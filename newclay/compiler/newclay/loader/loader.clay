import io.paths.*;
import maybe.*;
import newclay.common.*;
import newclay.lexer.*;
import newclay.ast as ast;
import newclay.ir as ir;
import newclay.ast.transforms.*;
import newclay.evaluator.*;
import newclay.parser.*;
import newclay.core.*;
import newclay.platforms.*;
import newclay.resolver.*;

private loadPrimitivesModule(program:Program) {
    var module = Module(program, primitivesModuleName);
    primitivesModule(program) = module;
    for (i in range(EnumMemberCount(PrimitiveKind))) {
        var kind = PrimitiveKind(i);
        module.publicEnv[primitiveName(kind)] = EnvEntry(Value(Primitive(kind)));
    }
    for (i in range(EnumMemberCount(RTPrimitiveKind))) {
        var kind = RTPrimitiveKind(i);
        var name = ast.Identifier(primitiveName(kind));
        module.publicEnv[primitiveName(kind)] = EnvEntry(Value(RTPrimitive(kind)));
    }
    return module;
}

private addSymbolHead(module, astItem, astName) {
    var name = astName.name;
    var head = SymbolHead(astItem, astName, module);

    push(module.program.allSymbolHeads, head);

    return head;
}

private addSymbolItem(module, menv, symbolItem) {
    withLocation(symbolItem, () ref=> {
        var head = addSymbolHead(module, SymbolHeadAST(symbolItem), symbolItem.name);

        if (symbolHeadHasParams?(head)) {
            moduleAdd(module, menv, symbolItem.name.name, Value(head));
        } else {
            var sym = EnvEntry(Value(Symbol(head, ValueList(), newEnv(module))));
            head.instances[ValueList()] = sym;
            moduleAdd(module, menv, symbolItem.name.name, sym);
        }
    });
}

private addExternalItem(module, menv, externalItem) {
    // XXX support external definitions as entry points
    withLocation(externalItem.body, () ref=> {
        if (not variantIs?(externalItem.body, ast.UndefinedCodeBody))
            genericError("external function definitions are not yet supported");
    });
    withLocation(externalItem, () ref=> {
        moduleAdd(module, menv, externalItem.name,
            RTExternal(externalItem, module, externalItem.name.str, nothing(RTExternalAttributes))
        );
    });
}

private addGlobalItem(module, env, globalItem) {
    withLocation(globalItem, () ref=> {
        for (binding in globalItem.bindings) {
            withLocation(binding, () ref=> {
                addGlobalVariable(module, env, globalItem.kind, binding);
            });
        }
    });
}

private addAliasItem(module, menv, aliasItem) {
    withLocation(aliasItem, () ref=> {
        var head = addSymbolHead(
            module,
            SymbolHeadAST(aliasItem),
            aliasItem.name
        );

        if (symbolHeadHasParams?(head)) {
            moduleAdd(module, menv, aliasItem.name.name, Value(head));
        } else {
            var a = Alias(aliasItem, newEnv(module));
            head.instances[ValueList()] = EnvEntry(a);
            moduleAdd(module, menv, aliasItem.name.name, a);
        }
    });
}

private addGlobalVariable(module, menv, kind:ast.BindingKind, binding:ast.SingleGlobalBinding) {
    var head = addSymbolHead(module, SymbolHeadAST(GlobalBinding(kind, binding)), binding.name);

    if (symbolHeadHasParams?(head)) {
        moduleAdd(module, menv, binding.name.name, Value(head));
    } else {
        var g = RTGlobal(head, ValueList(), newEnv(module));
        head.instances[ValueList()] = EnvEntry(g);
        moduleAdd(module, menv, binding.name.name, g);
    }
}

callbyname ifPublic(item, publicValue, privateValue)
    = ref if (item.visibility == ast.VIS_PUBLIC) publicValue else privateValue;

envRootAddImport(envRoot:EnvRoot, program:Program, importItem) {
    withLocation(importItem, () ref=> {
        var moduleName = ModuleName(importItem.name);
        assert(size(importItem.name) > 0, "import module can't have empty name");
        withLocation(importItem.name[0], () ref=> {
            var importedModule = programModule(program, moduleName);
            match(importItem.spec,
                ast.GeneralImportSpec,   genSpec ref=> {
                    envRootAddGeneral(envRoot, importedModule, genSpec.location);
                },
                ast.SpecificImportSpecs, specSpecs ref=> {
                    for (spec in specSpecs) {
                        var asName = just(spec.asName, spec.name).str;
                        envRootAddSpecific(
                            envRoot,
                            asName,
                            EnvImport(spec.visibility, importedModule, spec.name.str),
                            spec.location
                        );
                    }
                },
                ast.QualifiedImportSpec, qualSpec ref=> {
                    addQualifiedModuleValue(
                        envRoot,
                        importedModule,
                        moduleName,
                        qualSpec.location
                    );
                },
                ast.AliasedImportSpec, aliasSpec ref=> {
                    envRootAddSpecific(
                        envRoot,
                        aliasSpec.asName.str,
                        ModuleValue(importedModule),
                        aliasSpec.location
                    );
                },
            );
        });
    });
}

private initializeGlobalEntries(module) {
    ref publicRoot  = module.publicEnvRoot;
    ref privateRoot = module.privateEnvRoot;

    if (not empty?(module.ast.topLevelItems)) {
        envRootAddGeneral(
            privateRoot,
            programModule(module.program, preludeModuleName),
            ast.getLocation(*module.ast.topLevelItems[0])
        );

        for (item in module.ast.topLevelItems) {
            match(item,
                ast.Import, importItem ref=> {
                    envRootAddImport(
                        ifPublic(importItem, publicRoot, privateRoot),
                        module.program,
                        importItem
                    );
                },
                ast.Symbol, symbolItem ref=> {
                    addSymbolItem(
                        module,
                        ifPublic(symbolItem, module.publicEnv, module.privateEnv),
                        symbolItem
                    );
                },
                ast.ExternalProcedure, externalItem ref=> {
                    addExternalItem(
                        module,
                        ifPublic(externalItem, module.publicEnv, module.privateEnv),
                        externalItem
                    );
                },
                ast.GlobalBinding, globalItem ref=> {
                    addGlobalItem(
                        module,
                        ifPublic(globalItem, module.publicEnv, module.privateEnv),
                        globalItem
                    );
                },
                ast.GlobalAlias, aliasItem ref=> {
                    addAliasItem(
                        module,
                        ifPublic(aliasItem, module.publicEnv, module.privateEnv),
                        aliasItem
                    );
                },
                MatchDefault, x ref=> { },
            );
        }
    }
}

private symbolTarget?(p:ast.Pattern)
    = variantIs?(p, ast.IndexingPattern) or variantIs?(p, ast.NameRef);


private initializeAttributesAndOverloads(module) {
    for (item in module.ast.topLevelItems) {
        match(item,
            ast.Attribute, x ref=> {
                var y = Attribute(x, module);
                push(module.program.allAttributes, y);
            },
            ast.StaticOverload, x ref=> {
                var y = StaticOverload(x, newEnv(module));
                if (symbolTarget?(x.target))
                    push(module.program.symbolStaticOverloads, y);
                else
                    push(module.program.patternStaticOverloads, y);
            },
            ast.Overload, x ref=> {
                var y = Overload(x, newEnv(module));
                if (symbolTarget?(x.target))
                    push(module.program.symbolOverloads, y);
                else
                    push(module.program.patternOverloads, y);
            },
            ast.GlobalLiteralCodeBody, x ref=> {
                push(module.program.allLiteralCodeBodies,
                    GlobalLiteralCode(x.codeBody.kind, ir.parseLiteralCodeBody(module, x.codeBody.code))
                );
            },
            MatchDefault, x ref=> { },
        );
    }
}

private overloadSymbolHead(item) {
    var pvars = topLevelItemPatternVars(item);
    var env = initializeMatch(item.env, pvars);
    var patternResult = evaluatePattern(item.ast.target, env);
    return match(patternResult,
        Value, v ref=> valueSymbolHead(v),
        SymbolPattern, i ref=> Maybe(i.head),
        MatchDefault, x ref=> nothing(SymbolHead),
    );
}

private distributeOverloads(program) {
    for (so in program.symbolStaticOverloads)
        maybe(overloadSymbolHead(so),
            symbolHead ref=> {
                push(symbolHead.staticOverloads, so);
            },
            () ref=> {
                assert(false, "symbol static overload isn't: ", so);
            },
        );
    for (o in program.symbolOverloads)
        maybe(overloadSymbolHead(o),
            symbolHead ref=> {
                push(symbolHead.overloads, o);
            },
            () ref=> {
                assert(false, "symbol overload isn't: ", o);
            },
        );
    program.overloadsDistributed? = true;
}

private initializeModule(module) {
    module.ast = transformAST(module.originalAST);
    initializeGlobalEntries(module);
    initializeAttributesAndOverloads(module);
}

private moduleSourcePath(root, name) = joinPath(root, joinPath(name.path));

private findModuleSource(searchPath, name, moduleSuffixes) {
    var path = String();
    var basename = name.path[size(name.path) - 1];
    for (root in searchPath) {
        path = moduleSourcePath(root, name);
        for (suffix in moduleSuffixes)
            for (tryName in [
                path + suffix,
                joinPath(path, basename + suffix),
            ])
                if (pathExists?(tryName))
                    return move(tryName);
    }

    throw GenericError(printString(
        "could not find source file for module ", moduleNameString(name)
    ));
}

private var _traceLoading? = false;
traceLoading(traceLoading?:Bool) { _traceLoading? = traceLoading?; }

private loadModule(program, name) {
    ref module = program.modules[name];
    module = Module(program, name);
    var sourcePath = findModuleSource(
        program.moduleSearchPath,
        name,
        program.targetInfo.moduleSuffixes);

    if (_traceLoading?)
        println("* loading ", name, " from ", sourcePath);
    module.originalAST = parse(tokenize(readSource(sourcePath)));
    initializeModule(module);
}

programModule(program:Program, name:ModuleName) {
    var ptr = lookup(program.modules, name);
    if (null?(ptr)) {
        loadModule(program, name);
        return ref program.modules[name];
    } else
        return ref ptr^;
}

private loadMainModule(program, mainFilename) {
    var module = Module(program, mainModuleName);
    mainModule(program) = module;
    if (_traceLoading?)
        println("* loading ", mainModuleName, " from ", mainFilename);
    module.originalAST = parse(tokenize(readSource(mainFilename)));
    initializeModule(module);
    return module;
}

private resolveProgram(program:Program) {
    for (name, module in items(program.modules))
        resolveAST(newEnv(module), module.ast);
}

loadProgram(mainFilename:String, searchPath:Vector[String]) {
    var program = allocateRef(Program);
    program.overloadsDistributed? = false;

    program.targetInfo = hostTargetInfo();
    program.moduleSearchPath = searchPath;
    loadPrimitivesModule(program);
    loadMainModule(program, mainFilename);
    // ensure that "prelude" gets loaded, even if the main module somehow
    // managed not to pull it in
    programModule(program, preludeModuleName);
    distributeOverloads(program);
    resolveProgram(program);
    return program;
}

overload loadProgram(mainFilename) {
    var mainFilenameStr = String(mainFilename);
    return loadProgram(mainFilenameStr, Vector[String](pathDirname(mainFilenameStr)));
}
