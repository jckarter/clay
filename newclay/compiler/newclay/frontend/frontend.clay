import newclay.frontend.platform.*;

// XXX replace hostTargetInfo() hardcodes with configurable target


//
// parseFrontendOptions
//

enum FrontendOutputMode {
    EXECUTABLE_MODE,
    OBJECT_MODE,
    ASSEMBLY_MODE,
    C_SOURCE_MODE,
    INTERACTOR_MODE,
}

record FrontendOptions (
    modulePaths: Vector[String],
    cDialect: Maybe[CDialect],
    cFlags: Vector[String],
    outputMode: Maybe[FrontendOutputMode],
    outputFile: Maybe[String],
    inputFile: Maybe[String],
    interactorOnError?: Maybe[Bool],
    traceLoading?: Maybe[Bool],
    traceCompilation?: Maybe[Bool],
    traceTimes?: Maybe[Bool],
    commandlineVariables: HashMap[String, Maybe[String]],
);

initUniqueOption(maybeOption, value, errorFn) {
    maybe(maybeOption,
        oldOption ref=> { errorFn(oldOption); },
        () ref=> {
            maybeOption = Maybe(value);
        },
    );
}

initOutputMode(modeVar, mode) {
    initUniqueOption(modeVar, mode, x ref=> {
        optionError("only one of -c, -S, -E, or -i may be specified");
    });
}

parseFrontendOptions() {
    var options = FrontendOptions();

    parseOptions(
        ("-I", PrefixOption, o ref=> {
            push(options.modulePaths, String(requireParameter(o, "no path given for -I")));
        }),
        ("-D", PrefixOption, o ref=> {
            var param = String(requireParameter(o, "no variable name given for -D"));
            var equalSign = find(param, '=');
            var name = String();
            var value = nothing(String);

            if (equalSign != end(param)) {
                name = String(CoordinateRange(begin(param), equalSign));
                value = Maybe(String(CoordinateRange(equalSign + 1, end(param))));
            } else
                name = param;

            if (not null?(lookup(options.commandlineVariables, name)))
                optionError("multiple values given for -D", name);
            options.commandlineVariables[name] = value;
        }),
        ("-o", WordOption, o ref=> {
            var outputFile = requireParameter(o, "no path given for -o");
            initUniqueOption(options.outputFile, String(outputFile), oldOutputFile ref=> {
                optionError("multiple output filenames given: ", oldOutputFile, ", ", outputFile);
            });
        }),
        ("-cc", WordOption, o ref=> {
            var dialect = requireParameter(o, "no dialect given for -cc");
            switch (dialect) {
            case "msvc":
                initUniqueOption(options.cDialect, MSVC_DIALECT, x ref=> {
                    optionError("multiple -cc dialects given");
                });
                break;
            case "gcc":
                initUniqueOption(options.cDialect, GCC_DIALECT, x ref=> {
                    optionError("multiple -cc dialects given");
                });
                break;
            default:
                optionError("unknown -cc dialect ", dialect);
                break;
            }
        }),
        ("-cflags{", PrefixOption, o ref=> {
            requireParametersUntilBrace(o, options.cFlags, "no closing brace for -cflags{}");
        }),
        ("-c", WordOption, o ref=> {
            initOutputMode(options.outputMode, OBJECT_MODE);
        }),
        ("-S", WordOption, o ref=> {
            initOutputMode(options.outputMode, ASSEMBLY_MODE);
        }),
        ("-E", WordOption, o ref=> {
            initOutputMode(options.outputMode, C_SOURCE_MODE);
        }),
        ("-i", WordOption, o ref=> {
            initOutputMode(options.outputMode, INTERACTOR_MODE);
        }),
        ("-ierror", WordOption, o ref=> {
            initUniqueOption(options.interactorOnError?, true, x ref=> {
                optionError("more than one -ierror option given");
            });
        }),
        ("-trace", WordOption, o ref=> {
            initUniqueOption(options.traceCompilation?, true, x ref=> {
                optionError("more than one -trace option given");
            });
        }),
        ("-trace-times", WordOption, o ref=> {
            initUniqueOption(options.traceTimes?, true, x ref=> {
                optionError("more than one -trace-times option given");
            });
        }),
        ("-trace-load", WordOption, o ref=> {
            initUniqueOption(options.traceLoading?, true, x ref=> {
                optionError("more than one -trace-load option given");
            });
        }),
        ("--help", WordOption, o ref=> { usage(); }),
        ("-help",  WordOption, o ref=> { usage(); }),
        ("/?",     WordOption, o ref=> { usage(); }),
        inputFile ref=> {
            initUniqueOption(options.inputFile, String(inputFile), oldInputFile ref=> {
                optionError("multiple input filenames given: ", oldInputFile, ", ", inputFile);
            });
        },
    );

    validateFrontendOptions(options);
    observe(options);
    return move(options);
}

validateFrontendOptions(options) {
    if (nothing?(options.inputFile)) {
        println("no input file specified");
        println();
        usage();
    }

    var inputFile = just(options.inputFile);

    // XXX must occur before outputFile
    if (nothing?(options.outputMode))
        options.outputMode = Maybe(EXECUTABLE_MODE);

    if (nothing?(options.outputFile))
        options.outputFile = Maybe(defaultOutputFileName(options, inputFile));

    if (nothing?(options.cDialect))
        options.cDialect = Maybe(hostTargetInfo().cDialect);

    if (nothing?(options.interactorOnError?))
        options.interactorOnError? = Maybe(false);

    if (nothing?(options.traceCompilation?))
        options.traceCompilation? = Maybe(false);

    if (nothing?(options.traceTimes?))
        options.traceTimes? = Maybe(false);

    if (nothing?(options.traceLoading?))
        options.traceLoading? = Maybe(false);

    var dirname = pathDirname(inputFile);
    if (not empty?(dirname))
        push(options.modulePaths, dirname);
    push(options.modulePaths, String("."));
}

defaultOutputFileExtension(options) {
    switch (just(options.outputMode)) {
    case EXECUTABLE_MODE:
        if (hostTargetInfo().platformFamily == WINDOWS_PLATFORM_FAMILY)
            return ".exe";
        else
            return "";
    case OBJECT_MODE:
        if (hostTargetInfo().platform == MSVC_PLATFORM)
            return ".obj";
        else
            return ".o";
    case ASSEMBLY_MODE:
        if (hostTargetInfo().platform == MSVC_PLATFORM)
            return ".asm";
        else
            return ".s";
    case INTERACTOR_MODE:
    case C_SOURCE_MODE:
        return ".c";
    default:
        assert(false, "invalid output mode");
        return "";
    }
}

defaultOutputFileName(options, inputFile) {
    var dirname, basename = ...slicedPath(inputFile);
    var e = reverseFind(basename, '.');
    var name = if (e != begin(basename))
        String(coordinateRange(begin(basename), e - 1))
    else
        String(basename);

    return name + defaultOutputFileExtension(options);
}

usage() {
    println("usage: clay <options> <clayfile>");
    println("options:");
    println("  -o <filename>        - specify output file name");
    println("  -I<path>             - add <path> to module search path");
    println("  -cc gcc|msvc         - generate code for GCC or MSVC C dialect");
    println("  -cflags{ <flags> }   - pass compiler flags directly to C compiler");
    println("  -E                   - emit C source");
    println("  -S                   - emit assembly language");
    println("  -c                   - emit object file");
    println("  -i                   - enter interactor instead of running compiler");
    println("  -ierror              - enter interactor on error");
    println("  -trace               - trace compilation");
    println("  -trace-times         - include timestamps in compilation trace");
    println("  -trace-load          - trace module loading");
    exit(2);
}


//
// compiler invocation
//

compileProgramWithOptions(options:FrontendOptions) {
    if (just(options.outputMode) == INTERACTOR_MODE) {
        var interactor = Interactor(getProgram());
        interactLoop(interactor);
        return;
    }

    var sourceOnly? = just(options.outputMode) == C_SOURCE_MODE;
    var sourceFileName = uninitializedUnsafe(String);

    {
        var sourceFile = uninitializedUnsafe(RawFile);

        if (sourceOnly?) {
            sourceFileName <-- just(options.outputFile);
            sourceFile <-- RawFile(sourceFileName, CREATE);
        } else {
            sourceFileName, sourceFile <-- ...temporarySourceFile();
        }

        try {
            codegenStandaloneProgramTo(CodegenConfig(just(options.cDialect)), sourceFile);
        } catch (e:ClayError) {
            if (just(options.interactorOnError?)) {
                displayError(e);
                println();
                flush(stdout);

                var interactor = Interactor(getProgram());
                interactLoop(interactor);
                return;
            } else
                throw e;
        }
    }

    if (not sourceOnly?) {
        switch (just(options.cDialect)) {
        case GCC_DIALECT:
            invokeGCC(options, sourceFileName);
            return;
        case MSVC_DIALECT:
            invokeMSVC(options, sourceFileName);
            return;
        default:
            assert(false, "invalid C dialect");
            return;
        }
    }
}

private invokeGCC(options, sourceFileName) {
    var argv = Vector[String]();
    // XXX configurable gcc location
    push(argv, String("gcc"));
    switch (just(options.outputMode)) {
    case EXECUTABLE_MODE:
        break;
    case OBJECT_MODE:
        push(argv, String("-c"));
        break;
    case ASSEMBLY_MODE:
        push(argv, String("-S"));
        break;
    default:
        assert(false, "invalid output mode for compiler");
        break;
    }
    push(argv, String("-o"));
    push(argv, just(options.outputFile));
    push(argv, String("-x"));
    push(argv, String("c"));
    push(argv, options.cFlags);

    // gcc doesn't support -- to end option parsing
    if (sourceFileName[0] == '-')
        sourceFileName = "./" + sourceFileName;

    push(argv, sourceFileName);
    observe(argv);

    execArgv(argv);
}

private invokeMSVC(options, sourceFileName) {
    optionError("compilation with MSVC not yet supported. use -E to generate C source");
}


//
// options parser
//

record Options (
    more?: Bool,
    argc: SizeT,
    argv: Pointer[Pointer[CChar]],
    arg: Pointer[CChar],
);

overload Options(argc, argv) = Options(
    argc != 0,
    SizeT(argc),
    argv,
    if (argc == 0) null(CChar) else argv[0]
);

hasMoreParameters?(o:Options) = o.more?;
currentParameter(o:Options) = CStringRef(o.arg);
nextParameter(o:Options) {
    var result = currentParameter(o);
    o.argc -= 1;
    o.argv += 1;
    if (o.argc > 0) {
        if (CStringRef(o.argv[0]) == "--") {
            o.argc -= 1;
            o.argv += 1;
            o.more? = false;
        } else
            o.arg = o.argv[0];
    } else
        o.more? = false;
    return result;
}
tailParameters(o:Options) = mapped(CStringRef, coordinateRange(o.argv, o.argv + o.argc));

requireParameter(o:Options, ...msg) {
    if (not hasMoreParameters?(o))
        optionError(...msg);
    return nextParameter(o);
}

requireParametersUntilBrace(o:Options, into:Vector[String], ...msg) {
    while (true) {
        var s = requireParameter(o, ...msg);
        if (size(s) > 0 and s[size(s) - 1] == '}') {
            if (size(s) > 1)
                push(into, String(sliceUpto(s, size(s) - 1)));
            break;
        }
        push(into, String(s));
    }
}

[S | String?(S)]
currentParameter?(o:Options, prefix:S) {
    if (currentParameter(o) == prefix) {
        nextParameter(o);
        return true;
    }
    return false;
}

[S | String?(S)]
prefixParameter?(o:Options, prefix:S) {
    var param = currentParameter(o);
    var prefixSize = size(prefix);
    if (size(param) == prefixSize and param == prefix) {
        nextParameter(o);
        return true;
    }
    if (size(param) > prefixSize and prefix == slicedUpto(param, prefixSize)) {
        o.arg += prefixSize;
        return true;
    }
    return false;
}

parseArgcArgv(argc, argv, ...specs) {
    var options = Options(argc, argv);

    while (hasMoreParameters?(options)) {
        tryOptions(options, ...specs);
    }
    tryTailParameters(options, ...specs);
}

parseOptions(...specs) {
    var argc, argv = ...getArgcArgv();
    assert(argc >= 1, "argc must be at least 1");
    parseArgcArgv(argc - 1, argv + 1, ...specs);
}

procedure WordOption;
procedure PrefixOption;

OptionSpec?(X, O) = false;
[S, O, F | String?(S) and CallDefined?(call, F, Options)]
overload OptionSpec?(static Tuple[S, Static[O], F], static O) = true;

private tryOptions(options) {
    optionError("unknown option: ", currentParameter(options));
}

[F | CallDefined?(call, F, CStringRef)]
overload tryOptions(options, defaultFn:F) {
    var param = nextParameter(options);
    if (size(param) > 0 and param[0] == '-')
        optionError("unknown option: ", currentParameter(options));
    defaultFn(param);
}

[O | OptionSpec?(O, PrefixOption)]
overload tryOptions(options, spec:O, ...specs) {
    ref name, _, fn = ...unpack(spec);
    if (prefixParameter?(options, name))
        fn(options);
    else
        tryOptions(options, ...specs);
}
[O | OptionSpec?(O, WordOption)]
overload tryOptions(options, spec:O, ...specs) {
    ref name, _, fn = ...unpack(spec);
    if (currentParameter?(options, name))
        fn(options);
    else
        tryOptions(options, ...specs);
}

private tryTailParameters(options) {
    optionError("invalid parameter: ", currentParameter(options));
}

overload tryTailParameters(options, a, ...b) { tryTailParameters(options, ...b); }

[F | CallDefined?(call, F, CStringRef)]
overload tryTailParameters(options, defaultFn:F) {
    for (param in tailParameters(options))
        defaultFn(param);
}


