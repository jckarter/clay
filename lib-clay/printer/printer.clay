import core.errors.(private assertStringLiteral);
import core.errors.backtrace.(showBacktrace);

public import printer.protocol.*;
public import printer.types.*;

// io.errors and io.errors must be imported after printer.types, to make sure
// printTo(stream, GenericIOError) is not hidden by printTo(stream, record)
import io.files.raw.(stderrRawFile,stdoutRawFile);
import io.streams.(write,flush);

import libc;
import vectors.(moveVectorBuffer);
import strings.(String);


/// @section  print, println, printlnTo 

forceinline print(..x) {
    printTo(stdoutRawFile(), ..x);
}

forceinline println(..x) {
    printTo(stdoutRawFile(), ..x, '\n');
}

forceinline printlnTo(stream, ..x) {
    printTo(stream, ..x, '\n');
}


/// @section  str, strln 

str(forward ..x) {
    var s = String();
    printTo(s, ..x);
    return move(s);
}


/// @section  error, errorNoThrow, assert with pretty-printed message 

errorNoThrow(..e) {
    var err = stderrRawFile();
    printlnTo(err, "error: ", ..e);
    showBacktrace();
    libc.abort();
}

define error;

[when not ExceptionsEnabled?]
overload error(..e) {
    errorNoThrow(..e);
}

[when ExceptionsEnabled?]
overload error(..e) {
    var buf = String();
    printTo(buf, ..e);
    cstring(buf);
    throw Error(CStringRef(Pointer[Int8](moveVectorBuffer(buf))));
}

[when AllAssertionsEnabled?()]
alias overload assert(cond:Bool, ..args) {
    if (not cond)
        errorWithPrintfNoThrow(
            assertStringLiteral(__FILE__, #__LINE__, #__COLUMN__, __ARG__ cond, ": %s"),
            cstring(str(..args)));
}

[..tags when AllAssertionsEnabled?() and allValues?(AssertionEnabled?, ..tags)]
alias overload assert[..tags](cond:Bool, ..args) {
    if (not cond)
        errorWithPrintfNoThrow(
            assertStringLiteral(__FILE__, #__LINE__, #__COLUMN__, __ARG__ cond, ": %s"),
            cstring(str(..args)));
}




