import printer.(printlnTo);
import io.streams.(flush);
import io.files.raw.(stderrRawFile);


/// @section  observe, observeTo, observeCall -- log intermediate values and forward them 

define observeTo;

observeTo(stream, forward ..x) {
    var captured = captureValues(..x);
    printlnTo(stream, "[observed: ", ..weaveValues(", ", ..capturedRefs(captured)), "]");
    flush(stream);
    return forward ..forwardValues(captured);
}
[tag when StringLiteral?(tag)]
observeTo(stream, #tag, forward ..x) {
    var captured = captureValues(..x);
    printlnTo(stream, "[observed ", tag, ": ", ..weaveValues(", ", ..capturedRefs(captured)), "]");
    flush(stream);
    return forward ..forwardValues(captured);
}
observe(forward ..x) = forward ..observeTo(stderrRawFile(), ..x);

observeCallTo(stream, forward fn, forward ..args) {
    var capturedFn = captureValue(fn);
    var capturedArgs = captureValues(..args);
    printlnTo(stream, "[observed call ", capturedRef(capturedFn), "(", ..weaveValues(", ", ..capturedRefs(capturedArgs)), ")..");
    flush(stream);
    try {
        var capturedReturn = captureValues(..forwardValue(capturedFn)(..forwardValues(capturedArgs)));
        printlnTo(stream, "  ..returned ", ..capturedRefs(capturedReturn), "]");
        flush(stream);
        return forward ..forwardValues(capturedReturn);
    } catch (ex) {
        printlnTo(stream, "  ..threw ", ex, "]");
        flush(stream);
        throw ex;
    }
}

observeCall(forward fn, forward ..args)
    = forward ..observeCallTo(stderrRawFile(), fn, ..args);
