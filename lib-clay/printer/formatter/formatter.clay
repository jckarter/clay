import printer.*;
import printer.platform.*;
import data.strings.*;


/// @section  Formatter types 

define Formatter?;
override Formatter?(X) = false;

formatter(F, forward x, forward ..params)
    = F[Type(captureValue(x))](captureValue(x), ..params);

// formatTo(stream, formatter, value)
define formatTo;

[F when Formatter?(F)]
override printTo(stream, forward formatter: F) {
    formatTo(stream, formatter, forwardValue(formatter.value));
}



/// @section  Repr formatter 

private record ReprFormatter[T] (values: T);

repr(forward ..values) = ReprFormatter(captureValues(..values));

[T] override printTo(stream, f:ReprFormatter[T]) {
    printReprValuesTo(stream, ..forwardValues(f.values));
}


/// @section  stringRepr formatter 

private record StringReprFormatter[T] (value: T);

stringRepr(forward value) = StringReprFormatter(captureValue(value));

[T] override printTo(stream, f:StringReprFormatter[T]) {
    printStringReprTo(stream, forwardValue(f.value));
}


/// @section  Number base formatters 

private record HexFormatter[T] (value: T);
private record HEXFormatter[T] (value: T);
private record OctFormatter[T] (value: T);

[T] override Formatter?(#HexFormatter[T]) = true;
[T] override Formatter?(#HEXFormatter[T]) = true;
[T] override Formatter?(#OctFormatter[T]) = true;

[I when Integer?(I)]
hex(forward x: I) = formatter(HexFormatter, x);
[I when Integer?(I)]
HEX(forward x: I) = formatter(HEXFormatter, x);
[I when Integer?(I)]
oct(forward x: I) = formatter(OctFormatter, x);

private define _formatBase;

override _formatBase(stream, value, fmt) {
    if (value < 0) {
        printWithSprintf(stream, strl("-", fmt), wrapNegate(value));
    } else {
        printWithSprintf(stream, fmt, value);
    }
}

[U when UnsignedInteger?(U)]
override _formatBase(stream, value:U, fmt) {
    printWithSprintf(stream, fmt, value);
}

private define formatBase;

override formatBase(stream, value, fmt, fmt64) {
    _formatBase(stream, value, fmt);
}
override formatBase(stream, value: Int64, fmt, fmt64) {
    _formatBase(stream, value, fmt64);
}
override formatBase(stream, value: UInt64, fmt, fmt64) {
    printWithSprintf(stream, fmt64, value);
}

[T] override formatTo(stream, f: HexFormatter[T], value) {
    formatBase(stream, value, "%x", formatForHexInt64);
}

private define formatBase128(stream, value, wideFormat, narrowFormat) :;
override formatBase128(stream, value: UInt128, wideFormat, narrowFormat)
{
    var hi = UInt64(bitshr(value,64));
    if (hi != 0)
        printWithSprintf(stream, wideFormat, hi, wrapCast(UInt64, value));
    else
        printWithSprintf(stream, narrowFormat, wrapCast(UInt64, value));
}

override formatBase128(stream, value: Int128, wideFormat, narrowFormat)
{
    if (value < -Int128(Greatest(UInt64))) {
        var neg = wrapNegate(value);
        printWithSprintf(stream, strl("-", wideFormat),
            Int64(bitshr(neg, 64)), wrapCast(UInt64, neg));
    } else if (value < 0) {
        printWithSprintf(stream, strl("-", narrowFormat), UInt64(-value));
    } else if (value <= Int128(Greatest(UInt64))) {
        printWithSprintf(stream, narrowFormat, UInt64(value));
    } else {
        printWithSprintf(stream, wideFormat,
            Int64(bitshr(value, 64)), wrapCast(UInt64, value));
    }
}

// FIXME should use formatForHexInt64 instead of hardcoding %llx
// Not really a priority since LLVM doesn't support i128 types on windows yet
[T] override formatTo(stream, f: HexFormatter[T], value: UInt128) {
    formatBase128(stream, value, "%llx%016llx", "%llx");
}
[T] override formatTo(stream, f: HexFormatter[T], value: Int128) {
    formatBase128(stream, value, "%llx%016llx", "%llx");
}

[T] override formatTo(stream, f: HEXFormatter[T], value: UInt128) {
    formatBase128(stream, value, "%llX%016llX", "%llX");
}
[T] override formatTo(stream, f: HEXFormatter[T], value: Int128) {
    formatBase128(stream, value, "%llX%016llX", "%llX");
}

// FIXME implement octal printing for Int128
// Not really a priority because nobody uses octal
[T] override formatTo(stream, f: OctFormatter[T], value: Int128);
[T] override formatTo(stream, f: OctFormatter[T], value: UInt128);

[T] override formatTo(stream, f: HEXFormatter[T], value) {
    formatBase(stream, value, "%X", formatForHEXInt64);
}

[T] override formatTo(stream, f: OctFormatter[T], value) {
    formatBase(stream, value, "%o", formatForOctInt64);
}



/// @section  hexString 

record HexStringFormatter[T] (value: T);
[T] override Formatter?(#HexStringFormatter[T]) = true;

HexStringSequence?(S) = Sequence?(S) and TypeSize(SequenceElementType(S)) == 1;

[S when HexStringSequence?(S)]
hexString(forward s:S) = formatter(HexStringFormatter, s);

[T] override formatTo(stream, f: HexStringFormatter[T], value) {
    for (b in value)
        printWithSprintf(stream, "%02x", bitcast(UInt8, b));
}



/// @section  printedWidth function 

// printedWidth(object) SizeT
define printedWidth;

[S when String?(S)]
override printedWidth(s: S) = size(s);

[N, B when Integer?(N) and Integer?(B)]
widthInBase(n:N, base:B) {
    var nn = n;
    var len = SizeT(1);
    if (n < 0) {
        len +: 1;
        while(nn <= -base) {
            len +: 1;
            nn = Type(nn)(nn \ base);
        }
    } else {
        while(nn >= base) {
            len +: 1;
            nn = Type(nn)(nn \ base);
        }
    }
    return ref len;
}

[I when Integer?(I)]
override printedWidth(n: I) = widthInBase(n, 10);

[T]
override printedWidth(f: HexFormatter[T]) = widthInBase(capturedRef(f.value), 16);
[T]
override printedWidth(f: HEXFormatter[T]) = widthInBase(capturedRef(f.value), 16);
[T]
override printedWidth(f: OctFormatter[T]) = widthInBase(capturedRef(f.value),  8);

override printedWidth(c: Char) = 1;
override printedWidth(b: Bool) = if (b) 4 else 5;



/// @section  minimum-width alignment formatter 

[..C when allValues?(CapturedValue?, ..C)]
private record LeftAlignedFormatter[..C] (
    value: Tuple[..C],
    width: SizeT,
    filledWidth: SizeT,
    pad: Char,
);
[..C when allValues?(CapturedValue?, ..C)]
private record RightAlignedFormatter[..C] (
    value: Tuple[..C],
    width: SizeT,
    filledWidth: SizeT,
    pad: Char,
);

private define AlignedFormatter?;
override AlignedFormatter?(T) = false;
[..C] override AlignedFormatter?(#LeftAlignedFormatter[..C]) = true;
[..C] override AlignedFormatter?(#RightAlignedFormatter[..C]) = true;
[T when AlignedFormatter?(T)] override Formatter?(#T) = true;

private define alignedFormatter;

[I when Integer?(I)]
override alignedFormatter(F, width: I, pad: Char, forward ..values) {
    // If printedWidth isn't available for all objects, print them to a string
    // and use the width of that
    var s = str(..values);
    var filledWidth = size(s);
    return F(captureValues(move(s)), SizeT(width), filledWidth, pad);
}

private filledWidth(..values)
    = foldValues(add, SizeT(0), ..mapValues(printedWidth, ..values));

[I, ..TT when Integer?(I) and allValues?(T => CallDefined?(printedWidth, T), ..TT)]
override alignedFormatter(F, width: I, pad: Char, forward ..values: TT) {
    var cvalues = captureValues(..values);
    return F(cvalues, SizeT(width), filledWidth(..capturedRefs(cvalues)), pad);
}

leftAlignedWith(width, pad, forward ..values)
    = alignedFormatter(LeftAlignedFormatter, width, pad, ..values);
rightAlignedWith(width, pad, forward ..values)
    = alignedFormatter(RightAlignedFormatter, width, pad, ..values);

leftAligned(width, forward ..values)
    = alignedFormatter(LeftAlignedFormatter, width, ' ', ..values);
rightAligned(width, forward ..values)
    = alignedFormatter(RightAlignedFormatter, width, ' ', ..values);

[..C]
override printTo(stream, f: LeftAlignedFormatter[..C]) {
    printTo(stream, ..forwardValues(f.value));
    var i = f.filledWidth;
    while (i < f.width) {
        printTo(stream, f.pad);
        i +: 1;
    }
}
[..C]
override printTo(stream, f: RightAlignedFormatter[..C]) {
    var i = f.filledWidth;
    while (i < f.width) {
        printTo(stream, f.pad);
        i +: 1;
    }
    printTo(stream, ..forwardValues(f.value));
}
