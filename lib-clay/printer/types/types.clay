import printer.protocol.*;
import io.streams.protocol.*;

import libc;
import core.platform;
import printer.platform.(
    formatForInt64, formatForUInt64,
    formatForPartialInt128,
);
import numbers.floats.(nan, nan?);
import data.strings.*;
import data.strings.encodings.utf8.*;
import data.vectors.*;
import data.sequences.(interleave);
import simd.(unpackVec);


/// @section  printTo 

forceinline printTo(stream) {
}

forceinline printTo(stream, a, b, ..rest) {
    ..for (x in a, b, ..rest)
        printTo(stream, x);
}



/// @section  printTo - Bool 

printTo(stream, x:Bool) {
    if (x)
        printTo(stream, "true");
    else
        printTo(stream, "false");
}



/// @section  printTo - integers, floats, pointers 

[I when SignedInteger?(I)]
printTo(stream, x:I) {
    printWithSprintf(stream, "%d", Int(x));
}

[I when UnsignedInteger?(I)]
printTo(stream, x:I) {
    printWithSprintf(stream, "%u", UInt(x));
}

printTo(stream, x:Int64) {
    printWithSprintf(stream, formatForInt64, x);
}

printTo(stream, x:UInt64) {
    printWithSprintf(stream, formatForUInt64, x);
}

printTo(stream, x:Int128) {
    if (x >= Least(Int64) and x <= Greatest(Int64))
        printTo(stream, Int64(x));
    else {
        var lo = Int64(x % 1_000_000_000_000_000_000ll);
        var loabs = UInt64(if (lo < 0) -lo else lo);
        var hi = x \ 1_000_000_000_000_000_000ll;

        printTo(stream, hi);
        printWithSprintf(stream, formatForPartialInt128, loabs);
    }
}

printTo(stream, x:UInt128) {
    if (x <= Greatest(UInt64))
        printTo(stream, UInt64(x));
    else {
        var lo = UInt64(x % 1_000_000_000_000_000_000ull);
        var hi = x \ 1_000_000_000_000_000_000ull;

        printTo(stream, hi);
        printWithSprintf(stream, formatForPartialInt128, lo);
    }
}

printTo(stream, x:LongDouble) {
    printFloatWithSprintf(stream, "nan", "%.19Lg", x);
}

printTo(stream, x:Double) {
    printFloatWithSprintf(stream, "nan", "%.16g", x);
}
printTo(stream, x:Float) {
    printFloatWithSprintf(stream, "nan", "%.8g", Double(x));
}

private rectValues(T,x) = Pointer[T](@x)^, (Pointer[T](@x)+1)^;

printTo(stream, x:Complex80) {
    printFloatWithSprintf(stream, "nan", "%.19Lg%+.19Lgj", ..rectValues(Float80,x));
}

printTo(stream, x:Complex64) {
    printFloatWithSprintf(stream, "nan", "%.16g%+.16gj", ..rectValues(Float64,x));
}

printTo(stream, x:Complex32) {
    printFloatWithSprintf(stream, "nan", "%.16g%+.16gj", ..mapValues(Double, ..rectValues(Float32,x)));
}

printTo(stream, x:Imag80) {
    printFloatWithSprintf(stream, "nan", "%.19Lgj", x);
}

printTo(stream, x:Imag64) {
    printFloatWithSprintf(stream, "nan", "%.16gj", x);
}

printTo(stream, x:Imag32) {
    printFloatWithSprintf(stream, "nan", "%.8gj", Imag64(x));
}

[T]
printTo(stream, x:Pointer[T]) {
    printWithSprintf(stream, "%p", x);
}
[I, O]
printTo(stream, x:CodePointer[I, O]) {
    printWithSprintf(stream, "%p", x);
}
[C,V,I,O]
printTo(stream, x:ExternalCodePointer[C,V,I,O]) {
    printWithSprintf(stream, "%p", x);
}

printWithSprintf(stream, formatString, ..values) {
    var buf = Array[CChar, 100]();
    libc.sprintf(begin(buf), cstring(formatString), ..values);
    var n = libc.strlen(begin(buf));
    var ptr = Pointer[Byte](begin(buf));
    write(stream, ptr, SizeT(n));
}

forceinline printFloatWithSprintf(stream, nanString, formatString, ..values) {
    ..for (v in values)
        if (nan?(v)) {
            printTo(stream, nanString);
            return;
        }
    printWithSprintf(stream, formatString, ..values);
}


/// @section  printTo - statics 

[X]
printTo(stream, x:Static[X]) {
    printTo(stream, StaticName(x));
}

[X when Type?(X)]
printTo(stream, #X) {
    printReprTo(stream, X);
}

[X when StringLiteral?(X)]
printTo(stream, x:Static[X]) {
    printTo(stream, StaticName(x));
}


/// @section  printTo - enums 

[E when Enum?(E)]
printTo(stream, x:E) {
    printTo(stream, enumName(x));
}



/// @section  printTo - tuples, records, arrays, vectors 

[..T]
printTo(stream, x:Tuple[..T]) {
    printTo(stream, "[", ..weaveValues(", ", ..unpackTuple(x)), "]");
}

[T when Record?(T) and not LambdaRecord?(T)]
printTo(stream, x:T) {
    printTo(stream, T, "(", ..weaveValues(", ", ..recordFields(x)), ")");
}

[T when LambdaRecord?(T)]
printTo(stream, x:T) {
    printTo(stream, T);
}

printSequenceTo(stream, xs) {
    printTo(stream, "{");
    interleave(xs,
        () -> { printTo(stream, ", "); },
        x  -> { printTo(stream, x);    },
    );
    printTo(stream, "}");
}

[T,n]
printTo(stream, xs:Array[T,n]) {
    printSequenceTo(stream, xs);
}

[T]
printTo(stream, xs:Vector[T]) {
    printSequenceTo(stream, xs);
}



/// @section  printTo - variants 

[T when Variant?(T)]
printTo(stream, x:T) {
    printTo(stream, *x);
}



/// @section  printTo - Char, String?, ContiguousString? 

printTo(stream, x:Char) {
    write(stream, Pointer[Byte](@x), SizeT(1));
}

printTo(stream, x:UniChar) {
    encodeUniChar(x, c -> ..printTo(stream, c));
}

[S when String?(S)]
printTo(stream, x:S) {
    for (c in x)
        write(stream, c);
}

[S when ContiguousString?(S)]
printTo(stream, x:S) {
    write(stream, x);
}

printTo(stream, x:CStringRef) {
    if (null?(x.ptr)) {
        printTo(stream, "(null)");
    } else {
        write(stream, x);
    }
}

[T]
printTo(stream, s: UTF8[T]) {
    printTo(stream, s.encoded);
}



/// @section  printReprTo 

// printReprTo - Bool, Numeric?, Pointer[T], Enum

printReprTo(stream, x:Bool) {
    printTo(stream, x);
}

printReprTo(stream, x:Int8) {
    printTo(stream, x, "ss");
}

printReprTo(stream, x:Int16) {
    printTo(stream, x, "s");
}

printReprTo(stream, x:Int32) {
    printTo(stream, x, "i");
}

printReprTo(stream, x:Int64) {
    printTo(stream, x, "l");
}

printReprTo(stream, x:Int128) {
    printTo(stream, x, "ll");
}

printReprTo(stream, x:UInt8) {
    printTo(stream, x, "uss");
}

printReprTo(stream, x:UInt16) {
    printTo(stream, x, "us");
}

printReprTo(stream, x:UInt32) {
    printTo(stream, x, "u");
}

printReprTo(stream, x:UInt64) {
    printTo(stream, x, "ul");
}

printReprTo(stream, x:UInt128) {
    printTo(stream, x, "ull");
}

printReprTo(stream, x:Float32) {
    printFloatWithSprintf(stream, "nan(Float32)", "%.6af", Float64(x));
}

printReprTo(stream, x:Float64) {
    printFloatWithSprintf(stream, "nan(Float64)", "%.13a", x);
}

// Windows, Linux, and MacOS X printf format %La as `0x8.0000_0000_0000_000`
// FreeBSD printf formats %La as `0x1.0000_0000_0000_0000`
printReprTo(stream, x:Float80) {
    printFloatWithSprintf(stream, "nan(Float80)", "%.15Lafl", x);
}

[when core.platform.OS == core.platform.FreeBSD]
printReprTo(stream, x:Float80) {
    printFloatWithSprintf(stream, "nan(Float80)", "%.16Lafl", x);
}


printReprTo(stream, x:Imag32) {
    printFloatWithSprintf(stream, "nan(Imag32)", "%.6afj", Imag64(x));
}

printReprTo(stream, x:Imag64) {
    printFloatWithSprintf(stream, "nan(Imag64)", "%.13aj", x);
}

printReprTo(stream, x:Imag80) {
    printFloatWithSprintf(stream, "nan(Imag80)", "%.15Laflj", x);
}

[when core.platform.OS == core.platform.FreeBSD]
printReprTo(stream, x:Imag80) {
    printFloatWithSprintf(stream, "nan(Imag80)", "%.16Lafl", x);
}

printReprTo(stream, x:Complex80) {
    printFloatWithSprintf(stream, "nan(Complex80)", "%.15Lafl%+.15Laflj", ..rectValues(Float80,x));
}

[when core.platform.OS == core.platform.FreeBSD]
printReprTo(stream, x:Complex80) {
    printFloatWithSprintf(stream, "nan(Complex80)", "%.16Lafl%+.16Laflj", ..rectValues(Float80,x));
}

printReprTo(stream, x:Complex64) {
    printFloatWithSprintf(stream, "nan(Complex64)", "%.13a%+.13aj", ..rectValues(Float64,x));
}

printReprTo(stream, x:Complex32) {
    printFloatWithSprintf(stream, "nan(Complex32)", "%.6af%+.6afj", ..mapValues(Double, ..rectValues(Float32,x)));
}


[T]
printReprTo(stream, x:Pointer[T]) {
    printTo(stream, Pointer[T], "(");
    printTo(stream, x);
    printTo(stream, ")");
}

[E when Enum?(E)]
printReprTo(stream, x:E) {
    printTo(stream, x);
}


/// @section  printReprTo - statics 

[X]
printReprTo(stream, x:Static[X]) {
    printTo(stream, "#");
    printReprTo(stream, unwrapStatic(x));
}

[S when Symbol?(S)]
printReprTo(stream, #S) {
    printTo(stream, StaticName(S));
}

[T]
printReprTo(stream, #ArrayRef[T]) {
    printTo(stream, ArrayRef, "[", T, "]");
}

printReprTo(stream, #String) {
    printTo(stream, "String");
}

printReprTo(stream, #StringRef) {
    printTo(stream, "StringRef");
}


/// @section  printReprTo - tuples 

[..T]
printReprTo(stream, x:Tuple[..T]) {
    printTo(stream, "[");
    printReprValuesTo(stream, ..tupleElements(x));
    printTo(stream, "]");
}


/// @section  printReprTo - records 

[T when Record?(T) and not LambdaRecord?(T)]
printReprTo(stream, x:T) {
    printTo(stream, T);
    printReprArgumentsTo(stream, ..recordFields(x));
}

[T when LambdaRecord?(T)]
printReprTo(stream, x:T) {
    printTo(stream, T);
}



/// @section  printReprValuesTo, printReprArgumentsTo, printReprElementsTo 

define printReprValuesTo;

printReprValuesTo(stream, value, ..values) {
    printReprTo(stream, value);
    ..for (y in values) {
        printTo(stream, ", ");
        printReprTo(stream, y);
    }
}

printReprValuesTo(stream) { }

printReprArgumentsTo(stream, ..values) {
    printTo(stream, "(");
    printReprValuesTo(stream, ..values);
    printTo(stream, ")");
}

printReprElementsTo(stream, seq) {
    interleave(seq,
        () -> { printTo(stream, ", "); },
        x  -> { printReprTo(stream, x); },
    );
}


/// @section  printReprTo - arrays, vectors 

[T,n]
printReprTo(stream, a:Array[T,n]) {
    printTo(stream, Array[T,n], '(');
    printReprElementsTo(stream, a);
    printTo(stream, ')');
}

[T]
printReprTo(stream, a:Vector[T]) {
    printTo(stream, Vector[T], '(');
    printReprElementsTo(stream, a);
    printTo(stream, ')');
}



/// @section  printReprTo - variants 

[T when Variant?(T)]
printReprTo(stream, x:T) {
    printTo(stream, T, "(");
    printReprTo(stream, *x);
    printTo(stream, ")");
}



/// @section  printReprTo - Char, String 

printCharReprTo(stream, c:Char) {
    switch (c)
    case ('\0')
        printTo(stream, "\\0");
    case ('\n')
        printTo(stream, "\\n");
    case ('\r')
        printTo(stream, "\\r");
    case ('\t')
        printTo(stream, "\\t");
    case ('\f')
        printTo(stream, "\\f");
    case ('\\')
        printTo(stream, "\\\\");
    case ('\'')
        printTo(stream, "\\'");
    case ('\"')
        printTo(stream, "\\\"");
    case ('\$')
        printTo(stream, "\\\$");
    else if (c >= '\x20' and c <= '\x7E')
        printTo(stream, c);
    else
        printWithSprintf(stream, "\\x%02X", UInt8(c));
}

printReprTo(stream, c:Char) {
    printTo(stream, '\'');
    printCharReprTo(stream, c);
    printTo(stream, '\'');
}

printStringReprTo(stream, s) {
    printTo(stream, '"');
    for (c in s)
        printCharReprTo(stream, c);
    printTo(stream, '"');
}

[S when String?(S)]
printReprTo(stream, s:S) {
    printReprTo(stream, S);
    printTo(stream, '(');
    printStringReprTo(stream, s);
    printTo(stream, ')');
}

[S when S == CStringRef or S == StringRef]
printReprTo(stream, s:S) {
    printTo(stream, S, "(");
    if (not null?(begin(s)))
        printStringReprTo(stream, s);
    printTo(stream, ')');
}

[S when StringLiteral?(S)]
printReprTo(stream, #S) {
    printStringReprTo(stream, S);
}



/// @section  simd printing 

[T,n]
forceinline printTo(stream, a:Vec[T,n])
{
    printTo(stream, Type(a), "(", ..weaveValues(", ", ..unpackVec(a)), ")");
}

[T,n]
forceinline printReprTo(stream, a:Vec[T,n])
{
    printTo(stream,Type(a),"(");
    printReprValuesTo(stream, ..unpackVec(a));
    printTo(stream,")");
}

