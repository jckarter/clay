import os.errors.platform as platform;
import printer.protocol.(printTo,printReprTo);
import data.strings.*;

record GenericOSError(code:Int, where:StringLiteralRef);

[I, S when Integer?(I) and StringLiteral?(S)]
override GenericOSError(code:I, #S) --> returned:GenericOSError {
    returned.code = Int(code);
    returned.where = StringLiteralRef(S);
}

override printTo(stream, x:GenericOSError) {
    printTo(stream, x.where, ": ");
    printTo(stream, "error(", x.code, "): ");
    printErrorMessageTo(stream, x.code);
}

override printReprTo(stream, x:GenericOSError) {
    printTo(stream, "GenericOSError(", errorCodeName(x.code), ", ", repr(x.where), ")");
}

variant OSError;

instance Exception (OSError);

instance OSError (GenericOSError);

[T when VariantMember?(OSError, T)]
override Exception(forward x:T) = Exception(OSError(x));

printErrorMessageTo(stream, code:Int) {
    platform.printErrorMessageTo(stream, code);
}

errorMessage(code:Int) {
    var buf = String();
    printErrorMessageTo(buf, code);
    return move(buf);
}

errorCodeName(code:Int) {
    return platform.errorCodeName(code);
}
