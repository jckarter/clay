// Automatically generated by clay-bindgen
// language: c

private alias OpaquePointer = RawPointer;
private alias UnknownType = Int;
private alias AUnionType = Int;


alias __builtin_va_list = Pointer[CChar];

alias __gnuc_va_list = __builtin_va_list;

alias va_list = __gnuc_va_list;

alias DWORD = CULong;

alias WINBOOL = Int;

alias PWINBOOL = Pointer[Int];

alias LPWINBOOL = Pointer[Int];

alias BOOL = Int;

alias BYTE = CUChar;

alias PBOOL = Pointer[Int];

alias LPBOOL = Pointer[Int];

alias WORD = UShort;

alias FLOAT = Float;

alias PFLOAT = Pointer[Float];

alias PBYTE = Pointer[CUChar];

alias LPBYTE = Pointer[CUChar];

alias PINT = Pointer[Int];

alias LPINT = Pointer[Int];

alias PWORD = Pointer[UShort];

alias LPWORD = Pointer[UShort];

alias LPLONG = Pointer[CLong];

alias PDWORD = Pointer[CULong];

alias LPDWORD = Pointer[CULong];

alias PCVOID = RawPointer;

alias LPCVOID = RawPointer;

alias INT = Int;

alias UINT = UInt;

alias PUINT = Pointer[UInt];

alias LPUINT = Pointer[UInt];

alias size_t = UInt;

alias wchar_t = UShort;

external memchr(
    argument0 : RawPointer,
    argument1 : Int,
    argument2 : UInt) RawPointer;

external memcmp(
    argument0 : RawPointer,
    argument1 : RawPointer,
    argument2 : UInt) Int;

external memcpy(
    argument0 : RawPointer,
    argument1 : RawPointer,
    argument2 : UInt) RawPointer;

external memmove(
    argument0 : RawPointer,
    argument1 : RawPointer,
    argument2 : UInt) RawPointer;

external memset(
    argument0 : RawPointer,
    argument1 : Int,
    argument2 : UInt) RawPointer;

external strcat(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar]) Pointer[CChar];

external strchr(
    argument0 : Pointer[CChar],
    argument1 : Int) Pointer[CChar];

external strcmp(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar]) Int;

external strcoll(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar]) Int;

external strcpy(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar]) Pointer[CChar];

external strcspn(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar]) UInt;

external strerror(
    argument0 : Int) Pointer[CChar];

external strlen(
    argument0 : Pointer[CChar]) UInt;

external strncat(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar],
    argument2 : UInt) Pointer[CChar];

external strncmp(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar],
    argument2 : UInt) Int;

external strncpy(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar],
    argument2 : UInt) Pointer[CChar];

external strpbrk(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar]) Pointer[CChar];

external strrchr(
    argument0 : Pointer[CChar],
    argument1 : Int) Pointer[CChar];

external strspn(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar]) UInt;

external strstr(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar]) Pointer[CChar];

external strtok(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar]) Pointer[CChar];

external strxfrm(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar],
    argument2 : UInt) UInt;

external _strerror(
    argument0 : Pointer[CChar]) Pointer[CChar];

external _memccpy(
    argument0 : RawPointer,
    argument1 : RawPointer,
    argument2 : Int,
    argument3 : UInt) RawPointer;

external _memicmp(
    argument0 : RawPointer,
    argument1 : RawPointer,
    argument2 : UInt) Int;

external _strdup(
    argument0 : Pointer[CChar]) Pointer[CChar];

external _strcmpi(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar]) Int;

external _stricmp(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar]) Int;

external _stricoll(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar]) Int;

external _strlwr(
    argument0 : Pointer[CChar]) Pointer[CChar];

external _strnicmp(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar],
    argument2 : UInt) Int;

external _strnset(
    argument0 : Pointer[CChar],
    argument1 : Int,
    argument2 : UInt) Pointer[CChar];

external _strrev(
    argument0 : Pointer[CChar]) Pointer[CChar];

external _strset(
    argument0 : Pointer[CChar],
    argument1 : Int) Pointer[CChar];

external _strupr(
    argument0 : Pointer[CChar]) Pointer[CChar];

external _swab(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar],
    argument2 : UInt);

external _strncoll(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar],
    argument2 : UInt) Int;

external _strnicoll(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar],
    argument2 : UInt) Int;

external memccpy(
    argument0 : RawPointer,
    argument1 : RawPointer,
    argument2 : Int,
    argument3 : UInt) RawPointer;

external memicmp(
    argument0 : RawPointer,
    argument1 : RawPointer,
    argument2 : UInt) Int;

external strdup(
    argument0 : Pointer[CChar]) Pointer[CChar];

external strcmpi(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar]) Int;

external stricmp(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar]) Int;

external strcasecmp(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar]) Int;

external stricoll(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar]) Int;

external strlwr(
    argument0 : Pointer[CChar]) Pointer[CChar];

external strnicmp(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar],
    argument2 : UInt) Int;

external strncasecmp(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar],
    argument2 : UInt) Int;

external strnset(
    argument0 : Pointer[CChar],
    argument1 : Int,
    argument2 : UInt) Pointer[CChar];

external strrev(
    argument0 : Pointer[CChar]) Pointer[CChar];

external strset(
    argument0 : Pointer[CChar],
    argument1 : Int) Pointer[CChar];

external strupr(
    argument0 : Pointer[CChar]) Pointer[CChar];

external swab(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar],
    argument2 : UInt);

external wcscat(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort]) Pointer[UShort];

external wcschr(
    argument0 : Pointer[UShort],
    argument1 : UShort) Pointer[UShort];

external wcscmp(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort]) Int;

external wcscoll(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort]) Int;

external wcscpy(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort]) Pointer[UShort];

external wcscspn(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort]) UInt;

external wcslen(
    argument0 : Pointer[UShort]) UInt;

external wcsncat(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort],
    argument2 : UInt) Pointer[UShort];

external wcsncmp(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort],
    argument2 : UInt) Int;

external wcsncpy(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort],
    argument2 : UInt) Pointer[UShort];

external wcspbrk(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort]) Pointer[UShort];

external wcsrchr(
    argument0 : Pointer[UShort],
    argument1 : UShort) Pointer[UShort];

external wcsspn(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort]) UInt;

external wcsstr(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort]) Pointer[UShort];

external wcstok(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort]) Pointer[UShort];

external wcsxfrm(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort],
    argument2 : UInt) UInt;

external _wcsdup(
    argument0 : Pointer[UShort]) Pointer[UShort];

external _wcsicmp(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort]) Int;

external _wcsicoll(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort]) Int;

external _wcslwr(
    argument0 : Pointer[UShort]) Pointer[UShort];

external _wcsnicmp(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort],
    argument2 : UInt) Int;

external _wcsnset(
    argument0 : Pointer[UShort],
    argument1 : UShort,
    argument2 : UInt) Pointer[UShort];

external _wcsrev(
    argument0 : Pointer[UShort]) Pointer[UShort];

external _wcsset(
    argument0 : Pointer[UShort],
    argument1 : UShort) Pointer[UShort];

external _wcsupr(
    argument0 : Pointer[UShort]) Pointer[UShort];

external _wcsncoll(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort],
    argument2 : UInt) Int;

external _wcsnicoll(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort],
    argument2 : UInt) Int;

external wcscmpi(
    __ws1 : Pointer[UShort],
    __ws2 : Pointer[UShort]) Int;

external wcsdup(
    argument0 : Pointer[UShort]) Pointer[UShort];

external wcsicmp(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort]) Int;

external wcsicoll(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort]) Int;

external wcslwr(
    argument0 : Pointer[UShort]) Pointer[UShort];

external wcsnicmp(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort],
    argument2 : UInt) Int;

external wcsnset(
    argument0 : Pointer[UShort],
    argument1 : UShort,
    argument2 : UInt) Pointer[UShort];

external wcsrev(
    argument0 : Pointer[UShort]) Pointer[UShort];

external wcsset(
    argument0 : Pointer[UShort],
    argument1 : UShort) Pointer[UShort];

external wcsupr(
    argument0 : Pointer[UShort]) Pointer[UShort];

alias CHAR = CChar;

alias SHORT = Short;

alias LONG = CLong;

alias CCHAR = CChar;

alias PCCHAR = Pointer[CChar];

alias UCHAR = CUChar;

alias PUCHAR = Pointer[CUChar];

alias USHORT = UShort;

alias PUSHORT = Pointer[UShort];

alias ULONG = CULong;

alias PULONG = Pointer[CULong];

alias PSZ = Pointer[CChar];

alias PVOID = RawPointer;

alias LPVOID = RawPointer;

alias PVOID64 = RawPointer;

alias WCHAR = UShort;

alias PWCHAR = Pointer[UShort];

alias LPWCH = Pointer[UShort];

alias PWCH = Pointer[UShort];

alias NWPSTR = Pointer[UShort];

alias LPWSTR = Pointer[UShort];

alias PWSTR = Pointer[UShort];

alias LPCWCH = Pointer[UShort];

alias PCWCH = Pointer[UShort];

alias LPCWSTR = Pointer[UShort];

alias PCWSTR = Pointer[UShort];

alias PCHAR = Pointer[CChar];

alias LPCH = Pointer[CChar];

alias PCH = Pointer[CChar];

alias NPSTR = Pointer[CChar];

alias LPSTR = Pointer[CChar];

alias PSTR = Pointer[CChar];

alias LPCCH = Pointer[CChar];

alias PCSTR = Pointer[CChar];

alias LPCSTR = Pointer[CChar];

alias TCHAR = CChar;

alias _TCHAR = CChar;

alias TBYTE = CChar;

alias PTCH = Pointer[CChar];

alias PTBYTE = Pointer[CChar];

alias LPTCH = Pointer[CChar];

alias PTSTR = Pointer[CChar];

alias LPTSTR = Pointer[CChar];

alias LP = Pointer[CChar];

alias PTCHAR = Pointer[CChar];

alias LPCTSTR = Pointer[CChar];

alias PSHORT = Pointer[Short];

alias PLONG = Pointer[CLong];

alias HANDLE = RawPointer;

alias PHANDLE = Pointer[HANDLE];

alias LPHANDLE = Pointer[HANDLE];

alias LCID = CULong;

alias PLCID = PDWORD;

alias LANGID = UShort;

alias LONGLONG = Int64;

alias DWORDLONG = UInt64;

alias PLONGLONG = Pointer[Int64];

alias PDWORDLONG = Pointer[UInt64];

alias ULONGLONG = UInt64;

alias PULONGLONG = Pointer[UInt64];

alias USN = Int64;

alias BOOLEAN = CUChar;

alias PBOOLEAN = Pointer[CUChar];

alias FCHAR = CUChar;

alias FSHORT = UShort;

alias FLONG = CULong;

alias INT8 = CChar;

alias INT16 = Short;

alias LONG32 = Int;

alias PLONG32 = Pointer[Int];

alias INT32 = Int;

alias PINT32 = Pointer[Int];

alias UINT8 = CUChar;

alias UINT16 = UShort;

alias ULONG32 = UInt;

alias PULONG32 = Pointer[UInt];

alias DWORD32 = UInt;

alias PDWORD32 = Pointer[UInt];

alias UINT32 = UInt;

alias PUINT32 = Pointer[UInt];

alias INT_PTR = Int;

alias PINT_PTR = Pointer[Int];

alias UINT_PTR = UInt;

alias PUINT_PTR = Pointer[UInt];

alias LONG_PTR = CLong;

alias PLONG_PTR = Pointer[CLong];

alias ULONG_PTR = CULong;

alias PULONG_PTR = Pointer[CULong];

alias UHALF_PTR = UShort;

alias PUHALF_PTR = Pointer[UShort];

alias HALF_PTR = Short;

alias PHALF_PTR = Pointer[Short];

alias HANDLE_PTR = CULong;

alias SIZE_T = CULong;

alias PSIZE_T = Pointer[CULong];

alias SSIZE_T = CLong;

alias PSSIZE_T = Pointer[CLong];

alias DWORD_PTR = CULong;

alias PDWORD_PTR = Pointer[CULong];

alias LONG64 = Int64;

alias PLONG64 = Pointer[Int64];

alias INT64 = Int64;

alias PINT64 = Pointer[Int64];

alias ULONG64 = UInt64;

alias PULONG64 = Pointer[UInt64];

alias DWORD64 = UInt64;

alias PDWORD64 = Pointer[UInt64];

alias UINT64 = UInt64;

alias PUINT64 = Pointer[UInt64];

alias ACCESS_MASK = CULong;

alias PACCESS_MASK = Pointer[CULong];

record Struct__GUID (
    Data1 : CULong,
    Data2 : UShort,
    Data3 : UShort,
    Data4 : Array[CUChar,8],
);

alias GUID = Struct__GUID;

alias REFGUID = Pointer[Struct__GUID];

alias LPGUID = Pointer[Struct__GUID];

record Struct__GENERIC_MAPPING (
    GenericRead : CULong,
    GenericWrite : CULong,
    GenericExecute : CULong,
    GenericAll : CULong,
);

alias GENERIC_MAPPING = Struct__GENERIC_MAPPING;

alias PGENERIC_MAPPING = Pointer[Struct__GENERIC_MAPPING];

record Struct__ACE_HEADER (
    AceType : CUChar,
    AceFlags : CUChar,
    AceSize : UShort,
);

alias ACE_HEADER = Struct__ACE_HEADER;

alias PACE_HEADER = Pointer[Struct__ACE_HEADER];

record Struct__ACCESS_ALLOWED_ACE (
    Header : ACE_HEADER,
    Mask : CULong,
    SidStart : CULong,
);

alias ACCESS_ALLOWED_ACE = Struct__ACCESS_ALLOWED_ACE;

alias PACCESS_ALLOWED_ACE = Pointer[Struct__ACCESS_ALLOWED_ACE];

record Struct__ACCESS_DENIED_ACE (
    Header : ACE_HEADER,
    Mask : CULong,
    SidStart : CULong,
);

alias ACCESS_DENIED_ACE = Struct__ACCESS_DENIED_ACE;

alias PACCESS_DENIED_ACE = Pointer[Struct__ACCESS_DENIED_ACE];

record Struct__SYSTEM_AUDIT_ACE (
    Header : ACE_HEADER,
    Mask : CULong,
    SidStart : CULong,
);

alias SYSTEM_AUDIT_ACE = Struct__SYSTEM_AUDIT_ACE;

alias PSYSTEM_AUDIT_ACE = Pointer[SYSTEM_AUDIT_ACE];

record Struct__SYSTEM_ALARM_ACE (
    Header : ACE_HEADER,
    Mask : CULong,
    SidStart : CULong,
);

alias SYSTEM_ALARM_ACE = Struct__SYSTEM_ALARM_ACE;

alias PSYSTEM_ALARM_ACE = Pointer[Struct__SYSTEM_ALARM_ACE];

record Struct__ACCESS_ALLOWED_OBJECT_ACE (
    Header : ACE_HEADER,
    Mask : CULong,
    Flags : CULong,
    ObjectType : GUID,
    InheritedObjectType : GUID,
    SidStart : CULong,
);

alias ACCESS_ALLOWED_OBJECT_ACE = Struct__ACCESS_ALLOWED_OBJECT_ACE;

alias PACCESS_ALLOWED_OBJECT_ACE = Pointer[Struct__ACCESS_ALLOWED_OBJECT_ACE];

record Struct__ACCESS_DENIED_OBJECT_ACE (
    Header : ACE_HEADER,
    Mask : CULong,
    Flags : CULong,
    ObjectType : GUID,
    InheritedObjectType : GUID,
    SidStart : CULong,
);

alias ACCESS_DENIED_OBJECT_ACE = Struct__ACCESS_DENIED_OBJECT_ACE;

alias PACCESS_DENIED_OBJECT_ACE = Pointer[Struct__ACCESS_DENIED_OBJECT_ACE];

record Struct__SYSTEM_AUDIT_OBJECT_ACE (
    Header : ACE_HEADER,
    Mask : CULong,
    Flags : CULong,
    ObjectType : GUID,
    InheritedObjectType : GUID,
    SidStart : CULong,
);

alias SYSTEM_AUDIT_OBJECT_ACE = Struct__SYSTEM_AUDIT_OBJECT_ACE;

alias PSYSTEM_AUDIT_OBJECT_ACE = Pointer[Struct__SYSTEM_AUDIT_OBJECT_ACE];

record Struct__SYSTEM_ALARM_OBJECT_ACE (
    Header : ACE_HEADER,
    Mask : CULong,
    Flags : CULong,
    ObjectType : GUID,
    InheritedObjectType : GUID,
    SidStart : CULong,
);

alias SYSTEM_ALARM_OBJECT_ACE = Struct__SYSTEM_ALARM_OBJECT_ACE;

alias PSYSTEM_ALARM_OBJECT_ACE = Pointer[Struct__SYSTEM_ALARM_OBJECT_ACE];

record Struct__ACL (
    AclRevision : CUChar,
    Sbz1 : CUChar,
    AclSize : UShort,
    AceCount : UShort,
    Sbz2 : UShort,
);

alias ACL = Struct__ACL;

alias PACL = Pointer[Struct__ACL];

record Struct__ACL_REVISION_INFORMATION (
    AclRevision : CULong,
);

alias ACL_REVISION_INFORMATION = Struct__ACL_REVISION_INFORMATION;

record Struct__ACL_SIZE_INFORMATION (
    AceCount : CULong,
    AclBytesInUse : CULong,
    AclBytesFree : CULong,
);

alias ACL_SIZE_INFORMATION = Struct__ACL_SIZE_INFORMATION;

record Struct__FLOATING_SAVE_AREA (
    ControlWord : CULong,
    StatusWord : CULong,
    TagWord : CULong,
    ErrorOffset : CULong,
    ErrorSelector : CULong,
    DataOffset : CULong,
    DataSelector : CULong,
    RegisterArea : Array[CUChar,80],
    Cr0NpxState : CULong,
);

alias FLOATING_SAVE_AREA = Struct__FLOATING_SAVE_AREA;

record Struct__CONTEXT (
    ContextFlags : CULong,
    Dr0 : CULong,
    Dr1 : CULong,
    Dr2 : CULong,
    Dr3 : CULong,
    Dr6 : CULong,
    Dr7 : CULong,
    FloatSave : FLOATING_SAVE_AREA,
    SegGs : CULong,
    SegFs : CULong,
    SegEs : CULong,
    SegDs : CULong,
    Edi : CULong,
    Esi : CULong,
    Ebx : CULong,
    Edx : CULong,
    Ecx : CULong,
    Eax : CULong,
    Ebp : CULong,
    Eip : CULong,
    SegCs : CULong,
    EFlags : CULong,
    Esp : CULong,
    SegSs : CULong,
    ExtendedRegisters : Array[CUChar,512],
);

alias CONTEXT = Struct__CONTEXT;

alias PCONTEXT = Pointer[CONTEXT];

alias LPCONTEXT = Pointer[CONTEXT];

record Struct__EXCEPTION_RECORD (
    ExceptionCode : CULong,
    ExceptionFlags : CULong,
    ExceptionRecord : Pointer[Struct__EXCEPTION_RECORD],
    ExceptionAddress : PVOID,
    NumberParameters : CULong,
    ExceptionInformation : Array[CULong,15],
);

alias EXCEPTION_RECORD = Struct__EXCEPTION_RECORD;

alias PEXCEPTION_RECORD = Pointer[Struct__EXCEPTION_RECORD];

alias LPEXCEPTION_RECORD = Pointer[Struct__EXCEPTION_RECORD];

record Struct__EXCEPTION_POINTERS (
    ExceptionRecord : PEXCEPTION_RECORD,
    ContextRecord : PCONTEXT,
);

alias EXCEPTION_POINTERS = Struct__EXCEPTION_POINTERS;

alias PEXCEPTION_POINTERS = Pointer[Struct__EXCEPTION_POINTERS];

alias LPEXCEPTION_POINTERS = Pointer[Struct__EXCEPTION_POINTERS];

alias LARGE_INTEGER = AUnionType;

alias PLARGE_INTEGER = OpaquePointer;

alias ULARGE_INTEGER = AUnionType;

alias PULARGE_INTEGER = OpaquePointer;

record Struct__LUID (
    LowPart : CULong,
    HighPart : CLong,
);

alias LUID = Struct__LUID;

alias PLUID = Pointer[Struct__LUID];

record Struct__LUID_AND_ATTRIBUTES (
    Luid : LUID,
    Attributes : CULong,
);

alias LUID_AND_ATTRIBUTES = Struct__LUID_AND_ATTRIBUTES;

alias PLUID_AND_ATTRIBUTES = Pointer[Struct__LUID_AND_ATTRIBUTES];

alias LUID_AND_ATTRIBUTES_ARRAY = Array[LUID_AND_ATTRIBUTES,1];

alias PLUID_AND_ATTRIBUTES_ARRAY = Pointer[LUID_AND_ATTRIBUTES_ARRAY];

record Struct__PRIVILEGE_SET (
    PrivilegeCount : CULong,
    Control : CULong,
    Privilege : Array[LUID_AND_ATTRIBUTES,1],
);

alias PRIVILEGE_SET = Struct__PRIVILEGE_SET;

alias PPRIVILEGE_SET = Pointer[Struct__PRIVILEGE_SET];

record Struct__SECURITY_ATTRIBUTES (
    nLength : CULong,
    lpSecurityDescriptor : LPVOID,
    bInheritHandle : Int,
);

alias SECURITY_ATTRIBUTES = Struct__SECURITY_ATTRIBUTES;

alias PSECURITY_ATTRIBUTES = Pointer[Struct__SECURITY_ATTRIBUTES];

alias LPSECURITY_ATTRIBUTES = Pointer[Struct__SECURITY_ATTRIBUTES];

alias SecurityAnonymous = 0;
alias SecurityIdentification = 1;
alias SecurityImpersonation = 2;
alias SecurityDelegation = 3;

alias SECURITY_IMPERSONATION_LEVEL = Int;

alias PSECURITY_IMPERSONATION_LEVEL = Pointer[Int];

alias SECURITY_CONTEXT_TRACKING_MODE = CUChar;

alias PSECURITY_CONTEXT_TRACKING_MODE = Pointer[CUChar];

record Struct__SECURITY_QUALITY_OF_SERVICE (
    Length : CULong,
    ImpersonationLevel : SECURITY_IMPERSONATION_LEVEL,
    ContextTrackingMode : CUChar,
    EffectiveOnly : CUChar,
);

alias SECURITY_QUALITY_OF_SERVICE = Struct__SECURITY_QUALITY_OF_SERVICE;

alias PSECURITY_QUALITY_OF_SERVICE = Pointer[Struct__SECURITY_QUALITY_OF_SERVICE];

alias PACCESS_TOKEN = PVOID;

record Struct__SE_IMPERSONATION_STATE (
    Token : PACCESS_TOKEN,
    CopyOnOpen : CUChar,
    EffectiveOnly : CUChar,
    Level : SECURITY_IMPERSONATION_LEVEL,
);

alias SE_IMPERSONATION_STATE = Struct__SE_IMPERSONATION_STATE;

alias PSE_IMPERSONATION_STATE = Pointer[Struct__SE_IMPERSONATION_STATE];

record Struct__SID_IDENTIFIER_AUTHORITY (
    Value : Array[CUChar,6],
);

alias SID_IDENTIFIER_AUTHORITY = Struct__SID_IDENTIFIER_AUTHORITY;

alias PSID_IDENTIFIER_AUTHORITY = Pointer[Struct__SID_IDENTIFIER_AUTHORITY];

alias LPSID_IDENTIFIER_AUTHORITY = Pointer[Struct__SID_IDENTIFIER_AUTHORITY];

alias PSID = PVOID;

record Struct__SID (
    Revision : CUChar,
    SubAuthorityCount : CUChar,
    IdentifierAuthority : SID_IDENTIFIER_AUTHORITY,
    SubAuthority : Array[CULong,1],
);

alias SID = Struct__SID;

alias PISID = Pointer[Struct__SID];

record Struct__SID_AND_ATTRIBUTES (
    Sid : PSID,
    Attributes : CULong,
);

alias SID_AND_ATTRIBUTES = Struct__SID_AND_ATTRIBUTES;

alias PSID_AND_ATTRIBUTES = Pointer[Struct__SID_AND_ATTRIBUTES];

alias SID_AND_ATTRIBUTES_ARRAY = Array[SID_AND_ATTRIBUTES,1];

alias PSID_AND_ATTRIBUTES_ARRAY = Pointer[SID_AND_ATTRIBUTES_ARRAY];

record Struct__TOKEN_SOURCE (
    SourceName : Array[CChar,8],
    SourceIdentifier : LUID,
);

alias TOKEN_SOURCE = Struct__TOKEN_SOURCE;

alias PTOKEN_SOURCE = Pointer[Struct__TOKEN_SOURCE];

record Struct__TOKEN_CONTROL (
    TokenId : LUID,
    AuthenticationId : LUID,
    ModifiedId : LUID,
    TokenSource : TOKEN_SOURCE,
);

alias TOKEN_CONTROL = Struct__TOKEN_CONTROL;

alias PTOKEN_CONTROL = Pointer[Struct__TOKEN_CONTROL];

record Struct__TOKEN_DEFAULT_DACL (
    DefaultDacl : PACL,
);

alias TOKEN_DEFAULT_DACL = Struct__TOKEN_DEFAULT_DACL;

alias PTOKEN_DEFAULT_DACL = Pointer[Struct__TOKEN_DEFAULT_DACL];

record Struct__TOKEN_GROUPS (
    GroupCount : CULong,
    Groups : Array[SID_AND_ATTRIBUTES,1],
);

alias TOKEN_GROUPS = Struct__TOKEN_GROUPS;

alias PTOKEN_GROUPS = Pointer[Struct__TOKEN_GROUPS];

alias LPTOKEN_GROUPS = Pointer[Struct__TOKEN_GROUPS];

record Struct__TOKEN_OWNER (
    Owner : PSID,
);

alias TOKEN_OWNER = Struct__TOKEN_OWNER;

alias PTOKEN_OWNER = Pointer[Struct__TOKEN_OWNER];

record Struct__TOKEN_PRIMARY_GROUP (
    PrimaryGroup : PSID,
);

alias TOKEN_PRIMARY_GROUP = Struct__TOKEN_PRIMARY_GROUP;

alias PTOKEN_PRIMARY_GROUP = Pointer[Struct__TOKEN_PRIMARY_GROUP];

record Struct__TOKEN_PRIVILEGES (
    PrivilegeCount : CULong,
    Privileges : Array[LUID_AND_ATTRIBUTES,1],
);

alias TOKEN_PRIVILEGES = Struct__TOKEN_PRIVILEGES;

alias PTOKEN_PRIVILEGES = Pointer[Struct__TOKEN_PRIVILEGES];

alias LPTOKEN_PRIVILEGES = Pointer[Struct__TOKEN_PRIVILEGES];

alias TokenPrimary = 1;
alias TokenImpersonation = 2;

alias TOKEN_TYPE = Int;

alias PTOKEN_TYPE = Pointer[Int];

record Struct__TOKEN_STATISTICS (
    TokenId : LUID,
    AuthenticationId : LUID,
    ExpirationTime : LARGE_INTEGER,
    TokenType : TOKEN_TYPE,
    ImpersonationLevel : SECURITY_IMPERSONATION_LEVEL,
    DynamicCharged : CULong,
    DynamicAvailable : CULong,
    GroupCount : CULong,
    PrivilegeCount : CULong,
    ModifiedId : LUID,
);

alias TOKEN_STATISTICS = Struct__TOKEN_STATISTICS;

alias PTOKEN_STATISTICS = Pointer[Struct__TOKEN_STATISTICS];

record Struct__TOKEN_USER (
    User : SID_AND_ATTRIBUTES,
);

alias TOKEN_USER = Struct__TOKEN_USER;

alias PTOKEN_USER = Pointer[Struct__TOKEN_USER];

alias SECURITY_INFORMATION = CULong;

alias PSECURITY_INFORMATION = Pointer[CULong];

alias SECURITY_DESCRIPTOR_CONTROL = UShort;

alias PSECURITY_DESCRIPTOR_CONTROL = Pointer[UShort];

record Struct__SECURITY_DESCRIPTOR (
    Revision : CUChar,
    Sbz1 : CUChar,
    Control : UShort,
    Owner : PSID,
    Group : PSID,
    Sacl : PACL,
    Dacl : PACL,
);

alias SECURITY_DESCRIPTOR = Struct__SECURITY_DESCRIPTOR;

alias PSECURITY_DESCRIPTOR = Pointer[Struct__SECURITY_DESCRIPTOR];

alias PISECURITY_DESCRIPTOR = Pointer[Struct__SECURITY_DESCRIPTOR];

alias TokenUser = 1;
alias TokenGroups = 2;
alias TokenPrivileges = 3;
alias TokenOwner = 4;
alias TokenPrimaryGroup = 5;
alias TokenDefaultDacl = 6;
alias TokenSource = 7;
alias TokenType = 8;
alias TokenImpersonationLevel = 9;
alias TokenStatistics = 10;
alias TokenRestrictedSids = 11;
alias TokenSessionId = 12;
alias TokenGroupsAndPrivileges = 13;
alias TokenSessionReference = 14;
alias TokenSandBoxInert = 15;
alias TokenAuditPolicy = 16;
alias TokenOrigin = 17;
alias MaxTokenInfoClass = 18;

alias TOKEN_INFORMATION_CLASS = Int;

alias SidTypeUser = 1;
alias SidTypeGroup = 2;
alias SidTypeDomain = 3;
alias SidTypeAlias = 4;
alias SidTypeWellKnownGroup = 5;
alias SidTypeDeletedAccount = 6;
alias SidTypeInvalid = 7;
alias SidTypeUnknown = 8;
alias SidTypeComputer = 9;

alias SID_NAME_USE = Int;

alias PSID_NAME_USE = Pointer[Int];

record Struct__QUOTA_LIMITS (
    PagedPoolLimit : CULong,
    NonPagedPoolLimit : CULong,
    MinimumWorkingSetSize : CULong,
    MaximumWorkingSetSize : CULong,
    PagefileLimit : CULong,
    TimeLimit : LARGE_INTEGER,
);

alias QUOTA_LIMITS = Struct__QUOTA_LIMITS;

alias PQUOTA_LIMITS = Pointer[Struct__QUOTA_LIMITS];

record Struct__IO_COUNTERS (
    ReadOperationCount : UInt64,
    WriteOperationCount : UInt64,
    OtherOperationCount : UInt64,
    ReadTransferCount : UInt64,
    WriteTransferCount : UInt64,
    OtherTransferCount : UInt64,
);

alias IO_COUNTERS = Struct__IO_COUNTERS;

alias PIO_COUNTERS = Pointer[Struct__IO_COUNTERS];

record Struct__FILE_NOTIFY_INFORMATION (
    NextEntryOffset : CULong,
    Action : CULong,
    FileNameLength : CULong,
    FileName : Array[UShort,1],
);

alias FILE_NOTIFY_INFORMATION = Struct__FILE_NOTIFY_INFORMATION;

alias PFILE_NOTIFY_INFORMATION = Pointer[Struct__FILE_NOTIFY_INFORMATION];

record Struct__TAPE_ERASE (
    Type : CULong,
    Immediate : CUChar,
);

alias TAPE_ERASE = Struct__TAPE_ERASE;

alias PTAPE_ERASE = Pointer[Struct__TAPE_ERASE];

record Struct__TAPE_GET_DRIVE_PARAMETERS (
    ECC : CUChar,
    Compression : CUChar,
    DataPadding : CUChar,
    ReportSetmarks : CUChar,
    DefaultBlockSize : CULong,
    MaximumBlockSize : CULong,
    MinimumBlockSize : CULong,
    MaximumPartitionCount : CULong,
    FeaturesLow : CULong,
    FeaturesHigh : CULong,
    EOTWarningZoneSize : CULong,
);

alias TAPE_GET_DRIVE_PARAMETERS = Struct__TAPE_GET_DRIVE_PARAMETERS;

alias PTAPE_GET_DRIVE_PARAMETERS = Pointer[Struct__TAPE_GET_DRIVE_PARAMETERS];

record Struct__TAPE_GET_MEDIA_PARAMETERS (
    Capacity : LARGE_INTEGER,
    Remaining : LARGE_INTEGER,
    BlockSize : CULong,
    PartitionCount : CULong,
    WriteProtected : CUChar,
);

alias TAPE_GET_MEDIA_PARAMETERS = Struct__TAPE_GET_MEDIA_PARAMETERS;

alias PTAPE_GET_MEDIA_PARAMETERS = Pointer[Struct__TAPE_GET_MEDIA_PARAMETERS];

record Struct__TAPE_GET_POSITION (
    Type : CULong,
    Partition : CULong,
    OffsetLow : CULong,
    OffsetHigh : CULong,
);

alias TAPE_GET_POSITION = Struct__TAPE_GET_POSITION;

alias PTAPE_GET_POSITION = Pointer[Struct__TAPE_GET_POSITION];

record Struct__TAPE_PREPARE (
    Operation : CULong,
    Immediate : CUChar,
);

alias TAPE_PREPARE = Struct__TAPE_PREPARE;

alias PTAPE_PREPARE = Pointer[Struct__TAPE_PREPARE];

record Struct__TAPE_SET_DRIVE_PARAMETERS (
    ECC : CUChar,
    Compression : CUChar,
    DataPadding : CUChar,
    ReportSetmarks : CUChar,
    EOTWarningZoneSize : CULong,
);

alias TAPE_SET_DRIVE_PARAMETERS = Struct__TAPE_SET_DRIVE_PARAMETERS;

alias PTAPE_SET_DRIVE_PARAMETERS = Pointer[Struct__TAPE_SET_DRIVE_PARAMETERS];

record Struct__TAPE_SET_MEDIA_PARAMETERS (
    BlockSize : CULong,
);

alias TAPE_SET_MEDIA_PARAMETERS = Struct__TAPE_SET_MEDIA_PARAMETERS;

alias PTAPE_SET_MEDIA_PARAMETERS = Pointer[Struct__TAPE_SET_MEDIA_PARAMETERS];

record Struct__TAPE_SET_POSITION (
    Method : CULong,
    Partition : CULong,
    Offset : LARGE_INTEGER,
    Immediate : CUChar,
);

alias TAPE_SET_POSITION = Struct__TAPE_SET_POSITION;

alias PTAPE_SET_POSITION = Pointer[Struct__TAPE_SET_POSITION];

record Struct__TAPE_WRITE_MARKS (
    Type : CULong,
    Count : CULong,
    Immediate : CUChar,
);

alias TAPE_WRITE_MARKS = Struct__TAPE_WRITE_MARKS;

alias PTAPE_WRITE_MARKS = Pointer[Struct__TAPE_WRITE_MARKS];

record Struct__TAPE_CREATE_PARTITION (
    Method : CULong,
    Count : CULong,
    Size : CULong,
);

alias TAPE_CREATE_PARTITION = Struct__TAPE_CREATE_PARTITION;

alias PTAPE_CREATE_PARTITION = Pointer[Struct__TAPE_CREATE_PARTITION];

record Struct__MEMORY_BASIC_INFORMATION (
    BaseAddress : PVOID,
    AllocationBase : PVOID,
    AllocationProtect : CULong,
    RegionSize : CULong,
    State : CULong,
    Protect : CULong,
    Type : CULong,
);

alias MEMORY_BASIC_INFORMATION = Struct__MEMORY_BASIC_INFORMATION;

alias PMEMORY_BASIC_INFORMATION = Pointer[Struct__MEMORY_BASIC_INFORMATION];

record Struct__MESSAGE_RESOURCE_ENTRY (
    Length : UShort,
    Flags : UShort,
    Text : Array[CUChar,1],
);

alias MESSAGE_RESOURCE_ENTRY = Struct__MESSAGE_RESOURCE_ENTRY;

alias PMESSAGE_RESOURCE_ENTRY = Pointer[Struct__MESSAGE_RESOURCE_ENTRY];

record Struct__MESSAGE_RESOURCE_BLOCK (
    LowId : CULong,
    HighId : CULong,
    OffsetToEntries : CULong,
);

alias MESSAGE_RESOURCE_BLOCK = Struct__MESSAGE_RESOURCE_BLOCK;

alias PMESSAGE_RESOURCE_BLOCK = Pointer[Struct__MESSAGE_RESOURCE_BLOCK];

record Struct__MESSAGE_RESOURCE_DATA (
    NumberOfBlocks : CULong,
    Blocks : Array[MESSAGE_RESOURCE_BLOCK,1],
);

alias MESSAGE_RESOURCE_DATA = Struct__MESSAGE_RESOURCE_DATA;

alias PMESSAGE_RESOURCE_DATA = Pointer[Struct__MESSAGE_RESOURCE_DATA];

record Struct__LIST_ENTRY (
    Flink : Pointer[Struct__LIST_ENTRY],
    Blink : Pointer[Struct__LIST_ENTRY],
);

alias LIST_ENTRY = Struct__LIST_ENTRY;

alias PLIST_ENTRY = Pointer[Struct__LIST_ENTRY];

record Struct__SINGLE_LIST_ENTRY (
    Next : Pointer[Struct__SINGLE_LIST_ENTRY],
);

alias SINGLE_LIST_ENTRY = Struct__SINGLE_LIST_ENTRY;

alias PSINGLE_LIST_ENTRY = Pointer[Struct__SINGLE_LIST_ENTRY];

alias SLIST_HEADER = AUnionType;

alias PSLIST_HEADER = OpaquePointer;

record Struct__RTL_CRITICAL_SECTION_DEBUG (
    Type : UShort,
    CreatorBackTraceIndex : UShort,
    CriticalSection : Pointer[Struct__RTL_CRITICAL_SECTION],
    ProcessLocksList : LIST_ENTRY,
    EntryCount : CULong,
    ContentionCount : CULong,
    Spare : Array[CULong,2],
);

alias RTL_CRITICAL_SECTION_DEBUG = Struct__RTL_CRITICAL_SECTION_DEBUG;

alias PRTL_CRITICAL_SECTION_DEBUG = Pointer[Struct__RTL_CRITICAL_SECTION_DEBUG];

record Struct__RTL_CRITICAL_SECTION (
    DebugInfo : PRTL_CRITICAL_SECTION_DEBUG,
    LockCount : CLong,
    RecursionCount : CLong,
    OwningThread : HANDLE,
    LockSemaphore : HANDLE,
    Reserved : CULong,
);

alias RTL_CRITICAL_SECTION = Struct__RTL_CRITICAL_SECTION;

alias PRTL_CRITICAL_SECTION = Pointer[Struct__RTL_CRITICAL_SECTION];

record Struct__EVENTLOGRECORD (
    Length : CULong,
    Reserved : CULong,
    RecordNumber : CULong,
    TimeGenerated : CULong,
    TimeWritten : CULong,
    EventID : CULong,
    EventType : UShort,
    NumStrings : UShort,
    EventCategory : UShort,
    ReservedFlags : UShort,
    ClosingRecordNumber : CULong,
    StringOffset : CULong,
    UserSidLength : CULong,
    UserSidOffset : CULong,
    DataLength : CULong,
    DataOffset : CULong,
);

alias EVENTLOGRECORD = Struct__EVENTLOGRECORD;

alias PEVENTLOGRECORD = Pointer[Struct__EVENTLOGRECORD];

record Struct__OSVERSIONINFOA (
    dwOSVersionInfoSize : CULong,
    dwMajorVersion : CULong,
    dwMinorVersion : CULong,
    dwBuildNumber : CULong,
    dwPlatformId : CULong,
    szCSDVersion : Array[CChar,128],
);

alias OSVERSIONINFOA = Struct__OSVERSIONINFOA;

alias POSVERSIONINFOA = Pointer[Struct__OSVERSIONINFOA];

alias LPOSVERSIONINFOA = Pointer[Struct__OSVERSIONINFOA];

record Struct__OSVERSIONINFOW (
    dwOSVersionInfoSize : CULong,
    dwMajorVersion : CULong,
    dwMinorVersion : CULong,
    dwBuildNumber : CULong,
    dwPlatformId : CULong,
    szCSDVersion : Array[UShort,128],
);

alias OSVERSIONINFOW = Struct__OSVERSIONINFOW;

alias POSVERSIONINFOW = Pointer[Struct__OSVERSIONINFOW];

alias LPOSVERSIONINFOW = Pointer[Struct__OSVERSIONINFOW];

record Struct__OSVERSIONINFOEXA (
    dwOSVersionInfoSize : CULong,
    dwMajorVersion : CULong,
    dwMinorVersion : CULong,
    dwBuildNumber : CULong,
    dwPlatformId : CULong,
    szCSDVersion : Array[CChar,128],
    wServicePackMajor : UShort,
    wServicePackMinor : UShort,
    wSuiteMask : UShort,
    wProductType : CUChar,
    wReserved : CUChar,
);

alias OSVERSIONINFOEXA = Struct__OSVERSIONINFOEXA;

alias POSVERSIONINFOEXA = Pointer[Struct__OSVERSIONINFOEXA];

alias LPOSVERSIONINFOEXA = Pointer[Struct__OSVERSIONINFOEXA];

record Struct__OSVERSIONINFOEXW (
    dwOSVersionInfoSize : CULong,
    dwMajorVersion : CULong,
    dwMinorVersion : CULong,
    dwBuildNumber : CULong,
    dwPlatformId : CULong,
    szCSDVersion : Array[UShort,128],
    wServicePackMajor : UShort,
    wServicePackMinor : UShort,
    wSuiteMask : UShort,
    wProductType : CUChar,
    wReserved : CUChar,
);

alias OSVERSIONINFOEXW = Struct__OSVERSIONINFOEXW;

alias POSVERSIONINFOEXW = Pointer[Struct__OSVERSIONINFOEXW];

alias LPOSVERSIONINFOEXW = Pointer[Struct__OSVERSIONINFOEXW];

record Struct__IMAGE_VXD_HEADER (
    e32_magic : UShort,
    e32_border : CUChar,
    e32_worder : CUChar,
    e32_level : CULong,
    e32_cpu : UShort,
    e32_os : UShort,
    e32_ver : CULong,
    e32_mflags : CULong,
    e32_mpages : CULong,
    e32_startobj : CULong,
    e32_eip : CULong,
    e32_stackobj : CULong,
    e32_esp : CULong,
    e32_pagesize : CULong,
    e32_lastpagesize : CULong,
    e32_fixupsize : CULong,
    e32_fixupsum : CULong,
    e32_ldrsize : CULong,
    e32_ldrsum : CULong,
    e32_objtab : CULong,
    e32_objcnt : CULong,
    e32_objmap : CULong,
    e32_itermap : CULong,
    e32_rsrctab : CULong,
    e32_rsrccnt : CULong,
    e32_restab : CULong,
    e32_enttab : CULong,
    e32_dirtab : CULong,
    e32_dircnt : CULong,
    e32_fpagetab : CULong,
    e32_frectab : CULong,
    e32_impmod : CULong,
    e32_impmodcnt : CULong,
    e32_impproc : CULong,
    e32_pagesum : CULong,
    e32_datapage : CULong,
    e32_preload : CULong,
    e32_nrestab : CULong,
    e32_cbnrestab : CULong,
    e32_nressum : CULong,
    e32_autodata : CULong,
    e32_debuginfo : CULong,
    e32_debuglen : CULong,
    e32_instpreload : CULong,
    e32_instdemand : CULong,
    e32_heapsize : CULong,
    e32_res3 : Array[CUChar,12],
    e32_winresoff : CULong,
    e32_winreslen : CULong,
    e32_devid : UShort,
    e32_ddkver : UShort,
);

alias IMAGE_VXD_HEADER = Struct__IMAGE_VXD_HEADER;

alias PIMAGE_VXD_HEADER = Pointer[Struct__IMAGE_VXD_HEADER];

record Struct__IMAGE_FILE_HEADER (
    Machine : UShort,
    NumberOfSections : UShort,
    TimeDateStamp : CULong,
    PointerToSymbolTable : CULong,
    NumberOfSymbols : CULong,
    SizeOfOptionalHeader : UShort,
    Characteristics : UShort,
);

alias IMAGE_FILE_HEADER = Struct__IMAGE_FILE_HEADER;

alias PIMAGE_FILE_HEADER = Pointer[Struct__IMAGE_FILE_HEADER];

record Struct__IMAGE_DATA_DIRECTORY (
    VirtualAddress : CULong,
    Size : CULong,
);

alias IMAGE_DATA_DIRECTORY = Struct__IMAGE_DATA_DIRECTORY;

alias PIMAGE_DATA_DIRECTORY = Pointer[Struct__IMAGE_DATA_DIRECTORY];

record Struct__IMAGE_OPTIONAL_HEADER (
    Magic : UShort,
    MajorLinkerVersion : CUChar,
    MinorLinkerVersion : CUChar,
    SizeOfCode : CULong,
    SizeOfInitializedData : CULong,
    SizeOfUninitializedData : CULong,
    AddressOfEntryPoint : CULong,
    BaseOfCode : CULong,
    BaseOfData : CULong,
    ImageBase : CULong,
    SectionAlignment : CULong,
    FileAlignment : CULong,
    MajorOperatingSystemVersion : UShort,
    MinorOperatingSystemVersion : UShort,
    MajorImageVersion : UShort,
    MinorImageVersion : UShort,
    MajorSubsystemVersion : UShort,
    MinorSubsystemVersion : UShort,
    Win32VersionValue : CULong,
    SizeOfImage : CULong,
    SizeOfHeaders : CULong,
    CheckSum : CULong,
    Subsystem : UShort,
    DllCharacteristics : UShort,
    SizeOfStackReserve : CULong,
    SizeOfStackCommit : CULong,
    SizeOfHeapReserve : CULong,
    SizeOfHeapCommit : CULong,
    LoaderFlags : CULong,
    NumberOfRvaAndSizes : CULong,
    DataDirectory : Array[IMAGE_DATA_DIRECTORY,16],
);

alias IMAGE_OPTIONAL_HEADER32 = Struct__IMAGE_OPTIONAL_HEADER;

alias PIMAGE_OPTIONAL_HEADER32 = Pointer[Struct__IMAGE_OPTIONAL_HEADER];

record Struct__IMAGE_OPTIONAL_HEADER64 (
    Magic : UShort,
    MajorLinkerVersion : CUChar,
    MinorLinkerVersion : CUChar,
    SizeOfCode : CULong,
    SizeOfInitializedData : CULong,
    SizeOfUninitializedData : CULong,
    AddressOfEntryPoint : CULong,
    BaseOfCode : CULong,
    ImageBase : UInt64,
    SectionAlignment : CULong,
    FileAlignment : CULong,
    MajorOperatingSystemVersion : UShort,
    MinorOperatingSystemVersion : UShort,
    MajorImageVersion : UShort,
    MinorImageVersion : UShort,
    MajorSubsystemVersion : UShort,
    MinorSubsystemVersion : UShort,
    Win32VersionValue : CULong,
    SizeOfImage : CULong,
    SizeOfHeaders : CULong,
    CheckSum : CULong,
    Subsystem : UShort,
    DllCharacteristics : UShort,
    SizeOfStackReserve : UInt64,
    SizeOfStackCommit : UInt64,
    SizeOfHeapReserve : UInt64,
    SizeOfHeapCommit : UInt64,
    LoaderFlags : CULong,
    NumberOfRvaAndSizes : CULong,
    DataDirectory : Array[IMAGE_DATA_DIRECTORY,16],
);

alias IMAGE_OPTIONAL_HEADER64 = Struct__IMAGE_OPTIONAL_HEADER64;

alias PIMAGE_OPTIONAL_HEADER64 = Pointer[Struct__IMAGE_OPTIONAL_HEADER64];

alias IMAGE_OPTIONAL_HEADER = IMAGE_OPTIONAL_HEADER32;

alias PIMAGE_OPTIONAL_HEADER = PIMAGE_OPTIONAL_HEADER32;

record Struct__IMAGE_ROM_OPTIONAL_HEADER (
    Magic : UShort,
    MajorLinkerVersion : CUChar,
    MinorLinkerVersion : CUChar,
    SizeOfCode : CULong,
    SizeOfInitializedData : CULong,
    SizeOfUninitializedData : CULong,
    AddressOfEntryPoint : CULong,
    BaseOfCode : CULong,
    BaseOfData : CULong,
    BaseOfBss : CULong,
    GprMask : CULong,
    CprMask : Array[CULong,4],
    GpValue : CULong,
);

alias IMAGE_ROM_OPTIONAL_HEADER = Struct__IMAGE_ROM_OPTIONAL_HEADER;

alias PIMAGE_ROM_OPTIONAL_HEADER = Pointer[Struct__IMAGE_ROM_OPTIONAL_HEADER];

record Struct__IMAGE_DOS_HEADER (
    e_magic : UShort,
    e_cblp : UShort,
    e_cp : UShort,
    e_crlc : UShort,
    e_cparhdr : UShort,
    e_minalloc : UShort,
    e_maxalloc : UShort,
    e_ss : UShort,
    e_sp : UShort,
    e_csum : UShort,
    e_ip : UShort,
    e_cs : UShort,
    e_lfarlc : UShort,
    e_ovno : UShort,
    e_res : Array[UShort,4],
    e_oemid : UShort,
    e_oeminfo : UShort,
    e_res2 : Array[UShort,10],
    e_lfanew : CLong,
);

alias IMAGE_DOS_HEADER = Struct__IMAGE_DOS_HEADER;

alias PIMAGE_DOS_HEADER = Pointer[Struct__IMAGE_DOS_HEADER];

record Struct__IMAGE_OS2_HEADER (
    ne_magic : UShort,
    ne_ver : CChar,
    ne_rev : CChar,
    ne_enttab : UShort,
    ne_cbenttab : UShort,
    ne_crc : CLong,
    ne_flags : UShort,
    ne_autodata : UShort,
    ne_heap : UShort,
    ne_stack : UShort,
    ne_csip : CLong,
    ne_sssp : CLong,
    ne_cseg : UShort,
    ne_cmod : UShort,
    ne_cbnrestab : UShort,
    ne_segtab : UShort,
    ne_rsrctab : UShort,
    ne_restab : UShort,
    ne_modtab : UShort,
    ne_imptab : UShort,
    ne_nrestab : CLong,
    ne_cmovent : UShort,
    ne_align : UShort,
    ne_cres : UShort,
    ne_exetyp : CUChar,
    ne_flagsothers : CUChar,
    ne_pretthunks : UShort,
    ne_psegrefbytes : UShort,
    ne_swaparea : UShort,
    ne_expver : UShort,
);

alias IMAGE_OS2_HEADER = Struct__IMAGE_OS2_HEADER;

alias PIMAGE_OS2_HEADER = Pointer[Struct__IMAGE_OS2_HEADER];

record Struct__IMAGE_NT_HEADERS (
    Signature : CULong,
    FileHeader : IMAGE_FILE_HEADER,
    OptionalHeader : IMAGE_OPTIONAL_HEADER32,
);

alias IMAGE_NT_HEADERS32 = Struct__IMAGE_NT_HEADERS;

alias PIMAGE_NT_HEADERS32 = Pointer[Struct__IMAGE_NT_HEADERS];

record Struct__IMAGE_NT_HEADERS64 (
    Signature : CULong,
    FileHeader : IMAGE_FILE_HEADER,
    OptionalHeader : IMAGE_OPTIONAL_HEADER64,
);

alias IMAGE_NT_HEADERS64 = Struct__IMAGE_NT_HEADERS64;

alias PIMAGE_NT_HEADERS64 = Pointer[Struct__IMAGE_NT_HEADERS64];

alias IMAGE_NT_HEADERS = IMAGE_NT_HEADERS32;

alias PIMAGE_NT_HEADERS = PIMAGE_NT_HEADERS32;

record Struct__IMAGE_ROM_HEADERS (
    FileHeader : IMAGE_FILE_HEADER,
    OptionalHeader : IMAGE_ROM_OPTIONAL_HEADER,
);

alias IMAGE_ROM_HEADERS = Struct__IMAGE_ROM_HEADERS;

alias PIMAGE_ROM_HEADERS = Pointer[Struct__IMAGE_ROM_HEADERS];

record Struct__IMAGE_SECTION_HEADER (
    Name : Array[CUChar,8],
    Misc : AUnionType,
    VirtualAddress : CULong,
    SizeOfRawData : CULong,
    PointerToRawData : CULong,
    PointerToRelocations : CULong,
    PointerToLinenumbers : CULong,
    NumberOfRelocations : UShort,
    NumberOfLinenumbers : UShort,
    Characteristics : CULong,
);

alias IMAGE_SECTION_HEADER = Struct__IMAGE_SECTION_HEADER;

alias PIMAGE_SECTION_HEADER = Pointer[Struct__IMAGE_SECTION_HEADER];

record Struct__IMAGE_SYMBOL (
    N : AUnionType,
    Value : CULong,
    SectionNumber : Short,
    Type : UShort,
    StorageClass : CUChar,
    NumberOfAuxSymbols : CUChar,
);

alias IMAGE_SYMBOL = Struct__IMAGE_SYMBOL;

alias PIMAGE_SYMBOL = Pointer[Struct__IMAGE_SYMBOL];

alias IMAGE_AUX_SYMBOL = AUnionType;

alias PIMAGE_AUX_SYMBOL = OpaquePointer;

record Struct__IMAGE_COFF_SYMBOLS_HEADER (
    NumberOfSymbols : CULong,
    LvaToFirstSymbol : CULong,
    NumberOfLinenumbers : CULong,
    LvaToFirstLinenumber : CULong,
    RvaToFirstByteOfCode : CULong,
    RvaToLastByteOfCode : CULong,
    RvaToFirstByteOfData : CULong,
    RvaToLastByteOfData : CULong,
);

alias IMAGE_COFF_SYMBOLS_HEADER = Struct__IMAGE_COFF_SYMBOLS_HEADER;

alias PIMAGE_COFF_SYMBOLS_HEADER = Pointer[Struct__IMAGE_COFF_SYMBOLS_HEADER];

record Struct__IMAGE_RELOCATION (
    unnamed_field0 : AUnionType,
    SymbolTableIndex : CULong,
    Type : UShort,
);

alias IMAGE_RELOCATION = Struct__IMAGE_RELOCATION;

alias PIMAGE_RELOCATION = Pointer[Struct__IMAGE_RELOCATION];

record Struct__IMAGE_BASE_RELOCATION (
    VirtualAddress : CULong,
    SizeOfBlock : CULong,
);

alias IMAGE_BASE_RELOCATION = Struct__IMAGE_BASE_RELOCATION;

alias PIMAGE_BASE_RELOCATION = Pointer[Struct__IMAGE_BASE_RELOCATION];

record Struct__IMAGE_LINENUMBER (
    Type : AUnionType,
    Linenumber : UShort,
);

alias IMAGE_LINENUMBER = Struct__IMAGE_LINENUMBER;

alias PIMAGE_LINENUMBER = Pointer[Struct__IMAGE_LINENUMBER];

record Struct__IMAGE_ARCHIVE_MEMBER_HEADER (
    Name : Array[CUChar,16],
    Date : Array[CUChar,12],
    UserID : Array[CUChar,6],
    GroupID : Array[CUChar,6],
    Mode : Array[CUChar,8],
    Size : Array[CUChar,10],
    EndHeader : Array[CUChar,2],
);

alias IMAGE_ARCHIVE_MEMBER_HEADER = Struct__IMAGE_ARCHIVE_MEMBER_HEADER;

alias PIMAGE_ARCHIVE_MEMBER_HEADER = Pointer[Struct__IMAGE_ARCHIVE_MEMBER_HEADER];

record Struct__IMAGE_EXPORT_DIRECTORY (
    Characteristics : CULong,
    TimeDateStamp : CULong,
    MajorVersion : UShort,
    MinorVersion : UShort,
    Name : CULong,
    Base : CULong,
    NumberOfFunctions : CULong,
    NumberOfNames : CULong,
    AddressOfFunctions : CULong,
    AddressOfNames : CULong,
    AddressOfNameOrdinals : CULong,
);

alias IMAGE_EXPORT_DIRECTORY = Struct__IMAGE_EXPORT_DIRECTORY;

alias PIMAGE_EXPORT_DIRECTORY = Pointer[Struct__IMAGE_EXPORT_DIRECTORY];

record Struct__IMAGE_IMPORT_BY_NAME (
    Hint : UShort,
    Name : Array[CUChar,1],
);

alias IMAGE_IMPORT_BY_NAME = Struct__IMAGE_IMPORT_BY_NAME;

alias PIMAGE_IMPORT_BY_NAME = Pointer[Struct__IMAGE_IMPORT_BY_NAME];

record Struct__IMAGE_THUNK_DATA32 (
    u1 : AUnionType,
);

alias IMAGE_THUNK_DATA32 = Struct__IMAGE_THUNK_DATA32;

alias PIMAGE_THUNK_DATA32 = Pointer[Struct__IMAGE_THUNK_DATA32];

record Struct__IMAGE_THUNK_DATA64 (
    u1 : AUnionType,
);

alias IMAGE_THUNK_DATA64 = Struct__IMAGE_THUNK_DATA64;

alias PIMAGE_THUNK_DATA64 = Pointer[Struct__IMAGE_THUNK_DATA64];

alias IMAGE_THUNK_DATA = IMAGE_THUNK_DATA32;

alias PIMAGE_THUNK_DATA = PIMAGE_THUNK_DATA32;

record Struct__IMAGE_IMPORT_DESCRIPTOR (
    unnamed_field0 : AUnionType,
    TimeDateStamp : CULong,
    ForwarderChain : CULong,
    Name : CULong,
    FirstThunk : CULong,
);

alias IMAGE_IMPORT_DESCRIPTOR = Struct__IMAGE_IMPORT_DESCRIPTOR;

alias PIMAGE_IMPORT_DESCRIPTOR = Pointer[Struct__IMAGE_IMPORT_DESCRIPTOR];

record Struct__IMAGE_BOUND_IMPORT_DESCRIPTOR (
    TimeDateStamp : CULong,
    OffsetModuleName : UShort,
    NumberOfModuleForwarderRefs : UShort,
);

alias IMAGE_BOUND_IMPORT_DESCRIPTOR = Struct__IMAGE_BOUND_IMPORT_DESCRIPTOR;

alias PIMAGE_BOUND_IMPORT_DESCRIPTOR = Pointer[Struct__IMAGE_BOUND_IMPORT_DESCRIPTOR];

record Struct__IMAGE_BOUND_FORWARDER_REF (
    TimeDateStamp : CULong,
    OffsetModuleName : UShort,
    Reserved : UShort,
);

alias IMAGE_BOUND_FORWARDER_REF = Struct__IMAGE_BOUND_FORWARDER_REF;

alias PIMAGE_BOUND_FORWARDER_REF = Pointer[Struct__IMAGE_BOUND_FORWARDER_REF];

alias PIMAGE_TLS_CALLBACK = StdCallCodePointer[(RawPointer,CULong,RawPointer),()];

record Struct__IMAGE_TLS_DIRECTORY32 (
    StartAddressOfRawData : CULong,
    EndAddressOfRawData : CULong,
    AddressOfIndex : CULong,
    AddressOfCallBacks : CULong,
    SizeOfZeroFill : CULong,
    Characteristics : CULong,
);

alias IMAGE_TLS_DIRECTORY32 = Struct__IMAGE_TLS_DIRECTORY32;

alias PIMAGE_TLS_DIRECTORY32 = Pointer[Struct__IMAGE_TLS_DIRECTORY32];

record Struct__IMAGE_TLS_DIRECTORY64 (
    StartAddressOfRawData : UInt64,
    EndAddressOfRawData : UInt64,
    AddressOfIndex : UInt64,
    AddressOfCallBacks : UInt64,
    SizeOfZeroFill : CULong,
    Characteristics : CULong,
);

alias IMAGE_TLS_DIRECTORY64 = Struct__IMAGE_TLS_DIRECTORY64;

alias PIMAGE_TLS_DIRECTORY64 = Pointer[Struct__IMAGE_TLS_DIRECTORY64];

alias IMAGE_TLS_DIRECTORY = IMAGE_TLS_DIRECTORY32;

alias PIMAGE_TLS_DIRECTORY = PIMAGE_TLS_DIRECTORY32;

record Struct__IMAGE_RESOURCE_DIRECTORY (
    Characteristics : CULong,
    TimeDateStamp : CULong,
    MajorVersion : UShort,
    MinorVersion : UShort,
    NumberOfNamedEntries : UShort,
    NumberOfIdEntries : UShort,
);

alias IMAGE_RESOURCE_DIRECTORY = Struct__IMAGE_RESOURCE_DIRECTORY;

alias PIMAGE_RESOURCE_DIRECTORY = Pointer[Struct__IMAGE_RESOURCE_DIRECTORY];

record Struct__IMAGE_RESOURCE_DIRECTORY_ENTRY (
    unnamed_field0 : AUnionType,
    unnamed_field1 : AUnionType,
);

alias IMAGE_RESOURCE_DIRECTORY_ENTRY = Struct__IMAGE_RESOURCE_DIRECTORY_ENTRY;

alias PIMAGE_RESOURCE_DIRECTORY_ENTRY = Pointer[Struct__IMAGE_RESOURCE_DIRECTORY_ENTRY];

record Struct__IMAGE_RESOURCE_DIRECTORY_STRING (
    Length : UShort,
    NameString : Array[CChar,1],
);

alias IMAGE_RESOURCE_DIRECTORY_STRING = Struct__IMAGE_RESOURCE_DIRECTORY_STRING;

alias PIMAGE_RESOURCE_DIRECTORY_STRING = Pointer[Struct__IMAGE_RESOURCE_DIRECTORY_STRING];

record Struct__IMAGE_RESOURCE_DIR_STRING_U (
    Length : UShort,
    NameString : Array[UShort,1],
);

alias IMAGE_RESOURCE_DIR_STRING_U = Struct__IMAGE_RESOURCE_DIR_STRING_U;

alias PIMAGE_RESOURCE_DIR_STRING_U = Pointer[Struct__IMAGE_RESOURCE_DIR_STRING_U];

record Struct__IMAGE_RESOURCE_DATA_ENTRY (
    OffsetToData : CULong,
    Size : CULong,
    CodePage : CULong,
    Reserved : CULong,
);

alias IMAGE_RESOURCE_DATA_ENTRY = Struct__IMAGE_RESOURCE_DATA_ENTRY;

alias PIMAGE_RESOURCE_DATA_ENTRY = Pointer[Struct__IMAGE_RESOURCE_DATA_ENTRY];

record Struct__IMAGE_LOAD_CONFIG_DIRECTORY (
    Characteristics : CULong,
    TimeDateStamp : CULong,
    MajorVersion : UShort,
    MinorVersion : UShort,
    GlobalFlagsClear : CULong,
    GlobalFlagsSet : CULong,
    CriticalSectionDefaultTimeout : CULong,
    DeCommitFreeBlockThreshold : CULong,
    DeCommitTotalFreeThreshold : CULong,
    LockPrefixTable : PVOID,
    MaximumAllocationSize : CULong,
    VirtualMemoryThreshold : CULong,
    ProcessHeapFlags : CULong,
    Reserved : Array[CULong,4],
);

alias IMAGE_LOAD_CONFIG_DIRECTORY = Struct__IMAGE_LOAD_CONFIG_DIRECTORY;

alias PIMAGE_LOAD_CONFIG_DIRECTORY = Pointer[Struct__IMAGE_LOAD_CONFIG_DIRECTORY];

record UnnamedStruct (
    Characteristics : CULong,
    TimeDateStamp : CULong,
    MajorVersion : UShort,
    MinorVersion : UShort,
    GlobalFlagsClear : CULong,
    GlobalFlagsSet : CULong,
    CriticalSectionDefaultTimeout : CULong,
    DeCommitFreeBlockThreshold : UInt64,
    DeCommitTotalFreeThreshold : UInt64,
    LockPrefixTable : UInt64,
    MaximumAllocationSize : UInt64,
    VirtualMemoryThreshold : UInt64,
    ProcessAffinityMask : UInt64,
    ProcessHeapFlags : CULong,
    CSDFlags : UShort,
    Reserved1 : UShort,
    EditList : UInt64,
    Reserved : Array[CULong,2],
);

alias IMAGE_LOAD_CONFIG_DIRECTORY64 = UnnamedStruct;

alias PIMAGE_LOAD_CONFIG_DIRECTORY64 = Pointer[UnnamedStruct];

record Struct__IMAGE_RUNTIME_FUNCTION_ENTRY (
    BeginAddress : CULong,
    EndAddress : CULong,
    ExceptionHandler : PVOID,
    HandlerData : PVOID,
    PrologEndAddress : CULong,
);

alias IMAGE_RUNTIME_FUNCTION_ENTRY = Struct__IMAGE_RUNTIME_FUNCTION_ENTRY;

alias PIMAGE_RUNTIME_FUNCTION_ENTRY = Pointer[Struct__IMAGE_RUNTIME_FUNCTION_ENTRY];

record Struct__IMAGE_CE_RUNTIME_FUNCTION_ENTRY (
    FuncStart : UInt,
    PrologLen : UInt,
    FuncLen : UInt,
    ThirtyTwoBit : UInt,
    ExceptionFlag : UInt,
);

alias IMAGE_CE_RUNTIME_FUNCTION_ENTRY = Struct__IMAGE_CE_RUNTIME_FUNCTION_ENTRY;

alias PIMAGE_CE_RUNTIME_FUNCTION_ENTRY = Pointer[Struct__IMAGE_CE_RUNTIME_FUNCTION_ENTRY];

record Struct__IMAGE_DEBUG_DIRECTORY (
    Characteristics : CULong,
    TimeDateStamp : CULong,
    MajorVersion : UShort,
    MinorVersion : UShort,
    Type : CULong,
    SizeOfData : CULong,
    AddressOfRawData : CULong,
    PointerToRawData : CULong,
);

alias IMAGE_DEBUG_DIRECTORY = Struct__IMAGE_DEBUG_DIRECTORY;

alias PIMAGE_DEBUG_DIRECTORY = Pointer[Struct__IMAGE_DEBUG_DIRECTORY];

record Struct__FPO_DATA (
    ulOffStart : CULong,
    cbProcSize : CULong,
    cdwLocals : CULong,
    cdwParams : UShort,
    cbProlog : UShort,
    cbRegs : UShort,
    fHasSEH : UShort,
    fUseBP : UShort,
    reserved : UShort,
    cbFrame : UShort,
);

alias FPO_DATA = Struct__FPO_DATA;

alias PFPO_DATA = Pointer[Struct__FPO_DATA];

record Struct__IMAGE_DEBUG_MISC (
    DataType : CULong,
    Length : CULong,
    Unicode : CUChar,
    Reserved : Array[CUChar,3],
    Data : Array[CUChar,1],
);

alias IMAGE_DEBUG_MISC = Struct__IMAGE_DEBUG_MISC;

alias PIMAGE_DEBUG_MISC = Pointer[Struct__IMAGE_DEBUG_MISC];

record Struct__IMAGE_FUNCTION_ENTRY (
    StartingAddress : CULong,
    EndingAddress : CULong,
    EndOfPrologue : CULong,
);

alias IMAGE_FUNCTION_ENTRY = Struct__IMAGE_FUNCTION_ENTRY;

alias PIMAGE_FUNCTION_ENTRY = Pointer[Struct__IMAGE_FUNCTION_ENTRY];

record Struct__IMAGE_FUNCTION_ENTRY64 (
    StartingAddress : UInt64,
    EndingAddress : UInt64,
    unnamed_field2 : AUnionType,
);

alias IMAGE_FUNCTION_ENTRY64 = Struct__IMAGE_FUNCTION_ENTRY64;

alias PIMAGE_FUNCTION_ENTRY64 = Pointer[Struct__IMAGE_FUNCTION_ENTRY64];

record Struct__IMAGE_SEPARATE_DEBUG_HEADER (
    Signature : UShort,
    Flags : UShort,
    Machine : UShort,
    Characteristics : UShort,
    TimeDateStamp : CULong,
    CheckSum : CULong,
    ImageBase : CULong,
    SizeOfImage : CULong,
    NumberOfSections : CULong,
    ExportedNamesSize : CULong,
    DebugDirectorySize : CULong,
    SectionAlignment : CULong,
    Reserved : Array[CULong,2],
);

alias IMAGE_SEPARATE_DEBUG_HEADER = Struct__IMAGE_SEPARATE_DEBUG_HEADER;

alias PIMAGE_SEPARATE_DEBUG_HEADER = Pointer[Struct__IMAGE_SEPARATE_DEBUG_HEADER];

alias DriverType = 1;
alias FileSystemType = 2;
alias Win32ServiceOwnProcess = 16;
alias Win32ServiceShareProcess = 32;
alias AdapterType = 4;
alias RecognizerType = 8;

alias SERVICE_NODE_TYPE = Int;

alias BootLoad = 0;
alias SystemLoad = 1;
alias AutoLoad = 2;
alias DemandLoad = 3;
alias DisableLoad = 4;

alias SERVICE_LOAD_TYPE = Int;

alias IgnoreError = 0;
alias NormalError = 1;
alias SevereError = 2;
alias CriticalError = 3;

alias SERVICE_ERROR_TYPE = Int;

record Struct__NT_TIB (
    ExceptionList : OpaquePointer,
    StackBase : PVOID,
    StackLimit : PVOID,
    SubSystemTib : PVOID,
    unnamed_field4 : AUnionType,
    ArbitraryUserPointer : PVOID,
    Self : Pointer[Struct__NT_TIB],
);

alias NT_TIB = Struct__NT_TIB;

alias PNT_TIB = Pointer[Struct__NT_TIB];

record Struct__REPARSE_DATA_BUFFER (
    ReparseTag : CULong,
    ReparseDataLength : UShort,
    Reserved : UShort,
    unnamed_field3 : AUnionType,
);

alias REPARSE_DATA_BUFFER = Struct__REPARSE_DATA_BUFFER;

alias PREPARSE_DATA_BUFFER = Pointer[Struct__REPARSE_DATA_BUFFER];

record Struct__REPARSE_GUID_DATA_BUFFER (
    ReparseTag : CULong,
    ReparseDataLength : UShort,
    Reserved : UShort,
    ReparseGuid : GUID,
    GenericReparseBuffer : UnnamedRecord,
);

record UnnamedRecord (
    DataBuffer : Array[CUChar,1],
);

alias REPARSE_GUID_DATA_BUFFER = Struct__REPARSE_GUID_DATA_BUFFER;

alias PREPARSE_GUID_DATA_BUFFER = Pointer[Struct__REPARSE_GUID_DATA_BUFFER];

record Struct__REPARSE_POINT_INFORMATION (
    ReparseDataLength : UShort,
    UnparsedNameLength : UShort,
);

alias REPARSE_POINT_INFORMATION = Struct__REPARSE_POINT_INFORMATION;

alias PREPARSE_POINT_INFORMATION = Pointer[Struct__REPARSE_POINT_INFORMATION];

alias FILE_SEGMENT_ELEMENT = AUnionType;

alias PFILE_SEGMENT_ELEMENT = OpaquePointer;

alias JobObjectBasicAccountingInformation = 1;
alias JobObjectBasicLimitInformation = 2;
alias JobObjectBasicProcessIdList = 3;
alias JobObjectBasicUIRestrictions = 4;
alias JobObjectSecurityLimitInformation = 5;
alias JobObjectEndOfJobTimeInformation = 6;
alias JobObjectAssociateCompletionPortInformation = 7;
alias JobObjectBasicAndIoAccountingInformation = 8;
alias JobObjectExtendedLimitInformation = 9;
alias JobObjectJobSetInformation = 10;
alias MaxJobObjectInfoClass = 11;

alias JOBOBJECTINFOCLASS = Int;

record Struct__JOBOBJECT_BASIC_ACCOUNTING_INFORMATION (
    TotalUserTime : LARGE_INTEGER,
    TotalKernelTime : LARGE_INTEGER,
    ThisPeriodTotalUserTime : LARGE_INTEGER,
    ThisPeriodTotalKernelTime : LARGE_INTEGER,
    TotalPageFaultCount : CULong,
    TotalProcesses : CULong,
    ActiveProcesses : CULong,
    TotalTerminatedProcesses : CULong,
);

alias JOBOBJECT_BASIC_ACCOUNTING_INFORMATION = Struct__JOBOBJECT_BASIC_ACCOUNTING_INFORMATION;

alias PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION = Pointer[Struct__JOBOBJECT_BASIC_ACCOUNTING_INFORMATION];

record Struct__JOBOBJECT_BASIC_LIMIT_INFORMATION (
    PerProcessUserTimeLimit : LARGE_INTEGER,
    PerJobUserTimeLimit : LARGE_INTEGER,
    LimitFlags : CULong,
    MinimumWorkingSetSize : CULong,
    MaximumWorkingSetSize : CULong,
    ActiveProcessLimit : CULong,
    Affinity : CULong,
    PriorityClass : CULong,
    SchedulingClass : CULong,
);

alias JOBOBJECT_BASIC_LIMIT_INFORMATION = Struct__JOBOBJECT_BASIC_LIMIT_INFORMATION;

alias PJOBOBJECT_BASIC_LIMIT_INFORMATION = Pointer[Struct__JOBOBJECT_BASIC_LIMIT_INFORMATION];

record Struct__JOBOBJECT_BASIC_PROCESS_ID_LIST (
    NumberOfAssignedProcesses : CULong,
    NumberOfProcessIdsInList : CULong,
    ProcessIdList : Array[CULong,1],
);

alias JOBOBJECT_BASIC_PROCESS_ID_LIST = Struct__JOBOBJECT_BASIC_PROCESS_ID_LIST;

alias PJOBOBJECT_BASIC_PROCESS_ID_LIST = Pointer[Struct__JOBOBJECT_BASIC_PROCESS_ID_LIST];

record Struct__JOBOBJECT_BASIC_UI_RESTRICTIONS (
    UIRestrictionsClass : CULong,
);

alias JOBOBJECT_BASIC_UI_RESTRICTIONS = Struct__JOBOBJECT_BASIC_UI_RESTRICTIONS;

alias PJOBOBJECT_BASIC_UI_RESTRICTIONS = Pointer[Struct__JOBOBJECT_BASIC_UI_RESTRICTIONS];

record Struct__JOBOBJECT_SECURITY_LIMIT_INFORMATION (
    SecurityLimitFlags : CULong,
    JobToken : HANDLE,
    SidsToDisable : PTOKEN_GROUPS,
    PrivilegesToDelete : PTOKEN_PRIVILEGES,
    RestrictedSids : PTOKEN_GROUPS,
);

alias JOBOBJECT_SECURITY_LIMIT_INFORMATION = Struct__JOBOBJECT_SECURITY_LIMIT_INFORMATION;

alias PJOBOBJECT_SECURITY_LIMIT_INFORMATION = Pointer[Struct__JOBOBJECT_SECURITY_LIMIT_INFORMATION];

record Struct__JOBOBJECT_END_OF_JOB_TIME_INFORMATION (
    EndOfJobTimeAction : CULong,
);

alias JOBOBJECT_END_OF_JOB_TIME_INFORMATION = Struct__JOBOBJECT_END_OF_JOB_TIME_INFORMATION;

alias PJOBOBJECT_END_OF_JOB_TIME_INFORMATION = Pointer[Struct__JOBOBJECT_END_OF_JOB_TIME_INFORMATION];

record Struct__JOBOBJECT_ASSOCIATE_COMPLETION_PORT (
    CompletionKey : PVOID,
    CompletionPort : HANDLE,
);

alias JOBOBJECT_ASSOCIATE_COMPLETION_PORT = Struct__JOBOBJECT_ASSOCIATE_COMPLETION_PORT;

alias PJOBOBJECT_ASSOCIATE_COMPLETION_PORT = Pointer[Struct__JOBOBJECT_ASSOCIATE_COMPLETION_PORT];

record Struct__JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION (
    BasicInfo : JOBOBJECT_BASIC_ACCOUNTING_INFORMATION,
    IoInfo : IO_COUNTERS,
);

alias JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION = Struct__JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;

alias PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION = Pointer[Struct__JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION];

record Struct__JOBOBJECT_EXTENDED_LIMIT_INFORMATION (
    BasicLimitInformation : JOBOBJECT_BASIC_LIMIT_INFORMATION,
    IoInfo : IO_COUNTERS,
    ProcessMemoryLimit : CULong,
    JobMemoryLimit : CULong,
    PeakProcessMemoryUsed : CULong,
    PeakJobMemoryUsed : CULong,
);

alias JOBOBJECT_EXTENDED_LIMIT_INFORMATION = Struct__JOBOBJECT_EXTENDED_LIMIT_INFORMATION;

alias PJOBOBJECT_EXTENDED_LIMIT_INFORMATION = Pointer[Struct__JOBOBJECT_EXTENDED_LIMIT_INFORMATION];

record Struct__JOBOBJECT_JOBSET_INFORMATION (
    MemberLevel : CULong,
);

alias JOBOBJECT_JOBSET_INFORMATION = Struct__JOBOBJECT_JOBSET_INFORMATION;

alias PJOBOBJECT_JOBSET_INFORMATION = Pointer[Struct__JOBOBJECT_JOBSET_INFORMATION];

alias LT_DONT_CARE = 0;
alias LT_LOWEST_LATENCY = 1;

alias LATENCY_TIME = Int;

alias PLATENCY_TIME = Pointer[Int];

alias PowerSystemUnspecified = 0;
alias PowerSystemWorking = 1;
alias PowerSystemSleeping1 = 2;
alias PowerSystemSleeping2 = 3;
alias PowerSystemSleeping3 = 4;
alias PowerSystemHibernate = 5;
alias PowerSystemShutdown = 6;
alias PowerSystemMaximum = 7;

alias SYSTEM_POWER_STATE = Int;

alias PSYSTEM_POWER_STATE = Pointer[Int];

alias PowerActionNone = 0;
alias PowerActionReserved = 1;
alias PowerActionSleep = 2;
alias PowerActionHibernate = 3;
alias PowerActionShutdown = 4;
alias PowerActionShutdownReset = 5;
alias PowerActionShutdownOff = 6;
alias PowerActionWarmEject = 7;

alias POWER_ACTION = Int;

alias PPOWER_ACTION = Pointer[Int];

alias PowerDeviceUnspecified = 0;
alias PowerDeviceD0 = 1;
alias PowerDeviceD1 = 2;
alias PowerDeviceD2 = 3;
alias PowerDeviceD3 = 4;
alias PowerDeviceMaximum = 5;

alias DEVICE_POWER_STATE = Int;

alias PDEVICE_POWER_STATE = Pointer[Int];

record UnnamedStruct2 (
    Granularity : CULong,
    Capacity : CULong,
);

alias BATTERY_REPORTING_SCALE = UnnamedStruct2;

alias PBATTERY_REPORTING_SCALE = Pointer[UnnamedStruct2];

record Struct__POWER_ACTION_POLICY (
    Action : POWER_ACTION,
    Flags : CULong,
    EventCode : CULong,
);

alias POWER_ACTION_POLICY = Struct__POWER_ACTION_POLICY;

alias PPOWER_ACTION_POLICY = Pointer[Struct__POWER_ACTION_POLICY];

record Struct__SYSTEM_POWER_LEVEL (
    Enable : CUChar,
    Spare : Array[CUChar,3],
    BatteryLevel : CULong,
    PowerPolicy : POWER_ACTION_POLICY,
    MinSystemState : SYSTEM_POWER_STATE,
);

alias SYSTEM_POWER_LEVEL = Struct__SYSTEM_POWER_LEVEL;

alias PSYSTEM_POWER_LEVEL = Pointer[Struct__SYSTEM_POWER_LEVEL];

record Struct__SYSTEM_POWER_POLICY (
    Revision : CULong,
    PowerButton : POWER_ACTION_POLICY,
    SleepButton : POWER_ACTION_POLICY,
    LidClose : POWER_ACTION_POLICY,
    LidOpenWake : SYSTEM_POWER_STATE,
    Reserved : CULong,
    Idle : POWER_ACTION_POLICY,
    IdleTimeout : CULong,
    IdleSensitivity : CUChar,
    DynamicThrottle : CUChar,
    Spare2 : Array[CUChar,2],
    MinSleep : SYSTEM_POWER_STATE,
    MaxSleep : SYSTEM_POWER_STATE,
    ReducedLatencySleep : SYSTEM_POWER_STATE,
    WinLogonFlags : CULong,
    Spare3 : CULong,
    DozeS4Timeout : CULong,
    BroadcastCapacityResolution : CULong,
    DischargePolicy : Array[SYSTEM_POWER_LEVEL,4],
    VideoTimeout : CULong,
    VideoDimDisplay : CUChar,
    VideoReserved : Array[CULong,3],
    SpindownTimeout : CULong,
    OptimizeForPower : CUChar,
    FanThrottleTolerance : CUChar,
    ForcedThrottle : CUChar,
    MinThrottle : CUChar,
    OverThrottled : POWER_ACTION_POLICY,
);

alias SYSTEM_POWER_POLICY = Struct__SYSTEM_POWER_POLICY;

alias PSYSTEM_POWER_POLICY = Pointer[Struct__SYSTEM_POWER_POLICY];

record Struct__SYSTEM_POWER_CAPABILITIES (
    PowerButtonPresent : CUChar,
    SleepButtonPresent : CUChar,
    LidPresent : CUChar,
    SystemS1 : CUChar,
    SystemS2 : CUChar,
    SystemS3 : CUChar,
    SystemS4 : CUChar,
    SystemS5 : CUChar,
    HiberFilePresent : CUChar,
    FullWake : CUChar,
    VideoDimPresent : CUChar,
    ApmPresent : CUChar,
    UpsPresent : CUChar,
    ThermalControl : CUChar,
    ProcessorThrottle : CUChar,
    ProcessorMinThrottle : CUChar,
    ProcessorMaxThrottle : CUChar,
    FastSystemS4 : CUChar,
    spare2 : Array[CUChar,3],
    DiskSpinDown : CUChar,
    spare3 : Array[CUChar,8],
    SystemBatteriesPresent : CUChar,
    BatteriesAreShortTerm : CUChar,
    BatteryScale : Array[BATTERY_REPORTING_SCALE,3],
    AcOnLineWake : SYSTEM_POWER_STATE,
    SoftLidWake : SYSTEM_POWER_STATE,
    RtcWake : SYSTEM_POWER_STATE,
    MinDeviceWakeState : SYSTEM_POWER_STATE,
    DefaultLowLatencyWake : SYSTEM_POWER_STATE,
);

alias SYSTEM_POWER_CAPABILITIES = Struct__SYSTEM_POWER_CAPABILITIES;

alias PSYSTEM_POWER_CAPABILITIES = Pointer[Struct__SYSTEM_POWER_CAPABILITIES];

record Struct__SYSTEM_BATTERY_STATE (
    AcOnLine : CUChar,
    BatteryPresent : CUChar,
    Charging : CUChar,
    Discharging : CUChar,
    Spare1 : Array[CUChar,4],
    MaxCapacity : CULong,
    RemainingCapacity : CULong,
    Rate : CULong,
    EstimatedTime : CULong,
    DefaultAlert1 : CULong,
    DefaultAlert2 : CULong,
);

alias SYSTEM_BATTERY_STATE = Struct__SYSTEM_BATTERY_STATE;

alias PSYSTEM_BATTERY_STATE = Pointer[Struct__SYSTEM_BATTERY_STATE];

alias SystemPowerPolicyAc = 0;
alias SystemPowerPolicyDc = 1;
alias VerifySystemPolicyAc = 2;
alias VerifySystemPolicyDc = 3;
alias SystemPowerCapabilities = 4;
alias SystemBatteryState = 5;
alias SystemPowerStateHandler = 6;
alias ProcessorStateHandler = 7;
alias SystemPowerPolicyCurrent = 8;
alias AdministratorPowerPolicy = 9;
alias SystemReserveHiberFile = 10;
alias ProcessorInformation = 11;
alias SystemPowerInformation = 12;
alias ProcessorStateHandler2 = 13;
alias LastWakeTime = 14;
alias LastSleepTime = 15;
alias SystemExecutionState = 16;
alias SystemPowerStateNotifyHandler = 17;
alias ProcessorPowerPolicyAc = 18;
alias ProcessorPowerPolicyDc = 19;
alias VerifyProcessorPowerPolicyAc = 20;
alias VerifyProcessorPowerPolicyDc = 21;
alias ProcessorPowerPolicyCurrent = 22;

alias POWER_INFORMATION_LEVEL = Int;

record Struct__SYSTEM_POWER_INFORMATION (
    MaxIdlenessAllowed : CULong,
    Idleness : CULong,
    TimeRemaining : CULong,
    CoolingMode : CUChar,
);

alias SYSTEM_POWER_INFORMATION = Struct__SYSTEM_POWER_INFORMATION;

alias PSYSTEM_POWER_INFORMATION = Pointer[Struct__SYSTEM_POWER_INFORMATION];

record Struct__PROCESSOR_POWER_POLICY_INFO (
    TimeCheck : CULong,
    DemoteLimit : CULong,
    PromoteLimit : CULong,
    DemotePercent : CUChar,
    PromotePercent : CUChar,
    Spare : Array[CUChar,2],
    AllowDemotion : CULong,
    AllowPromotion : CULong,
    Reserved : CULong,
);

alias PROCESSOR_POWER_POLICY_INFO = Struct__PROCESSOR_POWER_POLICY_INFO;

alias PPROCESSOR_POWER_POLICY_INFO = Pointer[Struct__PROCESSOR_POWER_POLICY_INFO];

record Struct__PROCESSOR_POWER_POLICY (
    Revision : CULong,
    DynamicThrottle : CUChar,
    Spare : Array[CUChar,3],
    Reserved : CULong,
    PolicyCount : CULong,
    Policy : Array[PROCESSOR_POWER_POLICY_INFO,3],
);

alias PROCESSOR_POWER_POLICY = Struct__PROCESSOR_POWER_POLICY;

alias PPROCESSOR_POWER_POLICY = Pointer[Struct__PROCESSOR_POWER_POLICY];

record Struct__ADMINISTRATOR_POWER_POLICY (
    MinSleep : SYSTEM_POWER_STATE,
    MaxSleep : SYSTEM_POWER_STATE,
    MinVideoTimeout : CULong,
    MaxVideoTimeout : CULong,
    MinSpindownTimeout : CULong,
    MaxSpindownTimeout : CULong,
);

alias ADMINISTRATOR_POWER_POLICY = Struct__ADMINISTRATOR_POWER_POLICY;

alias PADMINISTRATOR_POWER_POLICY = Pointer[Struct__ADMINISTRATOR_POWER_POLICY];

alias OSVERSIONINFO = OSVERSIONINFOA;

alias POSVERSIONINFO = Pointer[OSVERSIONINFOA];

alias LPOSVERSIONINFO = Pointer[OSVERSIONINFOA];

alias OSVERSIONINFOEX = OSVERSIONINFOEXA;

alias POSVERSIONINFOEX = Pointer[OSVERSIONINFOEXA];

alias LPOSVERSIONINFOEX = Pointer[OSVERSIONINFOEXA];

alias WPARAM = UInt;

alias LPARAM = CLong;

alias LRESULT = CLong;

alias HRESULT = CLong;

alias ATOM = UShort;

alias HHOOK = HANDLE;

alias HGLOBAL = HANDLE;

alias HLOCAL = HANDLE;

alias GLOBALHANDLE = HANDLE;

alias LOCALHANDLE = HANDLE;

alias HGDIOBJ = RawPointer;

record Struct_HACCEL__ (
    i : Int,
);

alias HACCEL = Pointer[Struct_HACCEL__];

record Struct_HBITMAP__ (
    i : Int,
);

alias HBITMAP = Pointer[Struct_HBITMAP__];

record Struct_HBRUSH__ (
    i : Int,
);

alias HBRUSH = Pointer[Struct_HBRUSH__];

record Struct_HCOLORSPACE__ (
    i : Int,
);

alias HCOLORSPACE = Pointer[Struct_HCOLORSPACE__];

record Struct_HDC__ (
    i : Int,
);

alias HDC = Pointer[Struct_HDC__];

record Struct_HGLRC__ (
    i : Int,
);

alias HGLRC = Pointer[Struct_HGLRC__];

record Struct_HDESK__ (
    i : Int,
);

alias HDESK = Pointer[Struct_HDESK__];

record Struct_HENHMETAFILE__ (
    i : Int,
);

alias HENHMETAFILE = Pointer[Struct_HENHMETAFILE__];

record Struct_HFONT__ (
    i : Int,
);

alias HFONT = Pointer[Struct_HFONT__];

record Struct_HICON__ (
    i : Int,
);

alias HICON = Pointer[Struct_HICON__];

record Struct_HKEY__ (
    i : Int,
);

alias HKEY = Pointer[Struct_HKEY__];

record Struct_HMONITOR__ (
    i : Int,
);

alias HMONITOR = Pointer[Struct_HMONITOR__];

record Struct_HTERMINAL__ (
    i : Int,
);

alias HTERMINAL = Pointer[Struct_HTERMINAL__];

record Struct_HWINEVENTHOOK__ (
    i : Int,
);

alias HWINEVENTHOOK = Pointer[Struct_HWINEVENTHOOK__];

alias PHKEY = Pointer[HKEY];

record Struct_HMENU__ (
    i : Int,
);

alias HMENU = Pointer[Struct_HMENU__];

record Struct_HMETAFILE__ (
    i : Int,
);

alias HMETAFILE = Pointer[Struct_HMETAFILE__];

record Struct_HINSTANCE__ (
    i : Int,
);

alias HINSTANCE = Pointer[Struct_HINSTANCE__];

alias HMODULE = HINSTANCE;

record Struct_HPALETTE__ (
    i : Int,
);

alias HPALETTE = Pointer[Struct_HPALETTE__];

record Struct_HPEN__ (
    i : Int,
);

alias HPEN = Pointer[Struct_HPEN__];

record Struct_HRGN__ (
    i : Int,
);

alias HRGN = Pointer[Struct_HRGN__];

record Struct_HRSRC__ (
    i : Int,
);

alias HRSRC = Pointer[Struct_HRSRC__];

record Struct_HSTR__ (
    i : Int,
);

alias HSTR = Pointer[Struct_HSTR__];

record Struct_HTASK__ (
    i : Int,
);

alias HTASK = Pointer[Struct_HTASK__];

record Struct_HWND__ (
    i : Int,
);

alias HWND = Pointer[Struct_HWND__];

record Struct_HWINSTA__ (
    i : Int,
);

alias HWINSTA = Pointer[Struct_HWINSTA__];

record Struct_HKL__ (
    i : Int,
);

alias HKL = Pointer[Struct_HKL__];

alias HFILE = Int;

alias HCURSOR = HICON;

alias COLORREF = CULong;

alias FARPROC = StdCallCodePointer[(),(Int)];

alias NEARPROC = StdCallCodePointer[(),(Int)];

alias PROC = StdCallCodePointer[(),(Int)];

record Struct_tagRECT (
    left : CLong,
    top : CLong,
    right : CLong,
    bottom : CLong,
);

alias RECT = Struct_tagRECT;

alias PRECT = Pointer[Struct_tagRECT];

alias LPRECT = Pointer[Struct_tagRECT];

alias LPCRECT = Pointer[RECT];

record Struct_tagRECTL (
    left : CLong,
    top : CLong,
    right : CLong,
    bottom : CLong,
);

alias RECTL = Struct_tagRECTL;

alias PRECTL = Pointer[Struct_tagRECTL];

alias LPRECTL = Pointer[Struct_tagRECTL];

alias LPCRECTL = Pointer[RECTL];

record Struct_tagPOINT (
    x : CLong,
    y : CLong,
);

alias POINT = Struct_tagPOINT;

alias POINTL = Struct_tagPOINT;

alias PPOINT = Pointer[Struct_tagPOINT];

alias LPPOINT = Pointer[Struct_tagPOINT];

alias PPOINTL = Pointer[Struct_tagPOINT];

alias LPPOINTL = Pointer[Struct_tagPOINT];

record Struct_tagSIZE (
    cx : CLong,
    cy : CLong,
);

alias SIZE = Struct_tagSIZE;

alias SIZEL = Struct_tagSIZE;

alias PSIZE = Pointer[Struct_tagSIZE];

alias LPSIZE = Pointer[Struct_tagSIZE];

alias PSIZEL = Pointer[Struct_tagSIZE];

alias LPSIZEL = Pointer[Struct_tagSIZE];

record Struct_tagPOINTS (
    x : Short,
    y : Short,
);

alias POINTS = Struct_tagPOINTS;

alias PPOINTS = Pointer[Struct_tagPOINTS];

alias LPPOINTS = Pointer[Struct_tagPOINTS];

record Struct__CHAR_INFO (
    Char : AUnionType,
    Attributes : UShort,
);

alias CHAR_INFO = Struct__CHAR_INFO;

alias PCHAR_INFO = Pointer[Struct__CHAR_INFO];

record Struct__SMALL_RECT (
    Left : Short,
    Top : Short,
    Right : Short,
    Bottom : Short,
);

alias SMALL_RECT = Struct__SMALL_RECT;

alias PSMALL_RECT = Pointer[Struct__SMALL_RECT];

record Struct__CONSOLE_CURSOR_INFO (
    dwSize : CULong,
    bVisible : Int,
);

alias CONSOLE_CURSOR_INFO = Struct__CONSOLE_CURSOR_INFO;

alias PCONSOLE_CURSOR_INFO = Pointer[Struct__CONSOLE_CURSOR_INFO];

record Struct__COORD (
    X : Short,
    Y : Short,
);

alias COORD = Struct__COORD;

alias PCOORD = Pointer[Struct__COORD];

record Struct__CONSOLE_FONT_INFO (
    nFont : CULong,
    dwFontSize : COORD,
);

alias CONSOLE_FONT_INFO = Struct__CONSOLE_FONT_INFO;

alias PCONSOLE_FONT_INFO = Pointer[Struct__CONSOLE_FONT_INFO];

record Struct__CONSOLE_SCREEN_BUFFER_INFO (
    dwSize : COORD,
    dwCursorPosition : COORD,
    wAttributes : UShort,
    srWindow : SMALL_RECT,
    dwMaximumWindowSize : COORD,
);

alias CONSOLE_SCREEN_BUFFER_INFO = Struct__CONSOLE_SCREEN_BUFFER_INFO;

alias PCONSOLE_SCREEN_BUFFER_INFO = Pointer[Struct__CONSOLE_SCREEN_BUFFER_INFO];

alias PHANDLER_ROUTINE = StdCallCodePointer[(CULong),(Int)];

record Struct__KEY_EVENT_RECORD (
    bKeyDown : Int,
    wRepeatCount : UShort,
    wVirtualKeyCode : UShort,
    wVirtualScanCode : UShort,
    uChar : AUnionType,
    dwControlKeyState : CULong,
);

alias KEY_EVENT_RECORD = Struct__KEY_EVENT_RECORD;

record Struct__MOUSE_EVENT_RECORD (
    dwMousePosition : COORD,
    dwButtonState : CULong,
    dwControlKeyState : CULong,
    dwEventFlags : CULong,
);

alias MOUSE_EVENT_RECORD = Struct__MOUSE_EVENT_RECORD;

record Struct__WINDOW_BUFFER_SIZE_RECORD (
    dwSize : COORD,
);

alias WINDOW_BUFFER_SIZE_RECORD = Struct__WINDOW_BUFFER_SIZE_RECORD;

record Struct__MENU_EVENT_RECORD (
    dwCommandId : UInt,
);

alias MENU_EVENT_RECORD = Struct__MENU_EVENT_RECORD;

alias PMENU_EVENT_RECORD = Pointer[Struct__MENU_EVENT_RECORD];

record Struct__FOCUS_EVENT_RECORD (
    bSetFocus : Int,
);

alias FOCUS_EVENT_RECORD = Struct__FOCUS_EVENT_RECORD;

record Struct__INPUT_RECORD (
    EventType : UShort,
    Event : AUnionType,
);

alias INPUT_RECORD = Struct__INPUT_RECORD;

alias PINPUT_RECORD = Pointer[Struct__INPUT_RECORD];

external (stdcall) AllocConsole() Int;

external (stdcall) CreateConsoleScreenBuffer(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : Pointer[SECURITY_ATTRIBUTES],
    argument3 : CULong,
    argument4 : LPVOID) HANDLE;

external (stdcall) FillConsoleOutputAttribute(
    argument0 : HANDLE,
    argument1 : UShort,
    argument2 : CULong,
    argument3 : COORD,
    argument4 : PDWORD) Int;

external (stdcall) FillConsoleOutputCharacterA(
    argument0 : HANDLE,
    argument1 : CChar,
    argument2 : CULong,
    argument3 : COORD,
    argument4 : PDWORD) Int;

external (stdcall) FillConsoleOutputCharacterW(
    argument0 : HANDLE,
    argument1 : UShort,
    argument2 : CULong,
    argument3 : COORD,
    argument4 : PDWORD) Int;

external (stdcall) FlushConsoleInputBuffer(
    argument0 : HANDLE) Int;

external (stdcall) FreeConsole() Int;

external (stdcall) GenerateConsoleCtrlEvent(
    argument0 : CULong,
    argument1 : CULong) Int;

external (stdcall) GetConsoleCP() UInt;

external (stdcall) GetConsoleCursorInfo(
    argument0 : HANDLE,
    argument1 : PCONSOLE_CURSOR_INFO) Int;

external (stdcall) GetConsoleMode(
    argument0 : HANDLE,
    argument1 : PDWORD) Int;

external (stdcall) GetConsoleOutputCP() UInt;

external (stdcall) GetConsoleScreenBufferInfo(
    argument0 : HANDLE,
    argument1 : PCONSOLE_SCREEN_BUFFER_INFO) Int;

external (stdcall) GetConsoleTitleA(
    argument0 : LPSTR,
    argument1 : CULong) CULong;

external (stdcall) GetConsoleTitleW(
    argument0 : LPWSTR,
    argument1 : CULong) CULong;

external (stdcall) GetLargestConsoleWindowSize(
    argument0 : HANDLE) COORD;

external (stdcall) GetNumberOfConsoleInputEvents(
    argument0 : HANDLE,
    argument1 : PDWORD) Int;

external (stdcall) GetNumberOfConsoleMouseButtons(
    argument0 : PDWORD) Int;

external (stdcall) PeekConsoleInputA(
    argument0 : HANDLE,
    argument1 : PINPUT_RECORD,
    argument2 : CULong,
    argument3 : PDWORD) Int;

external (stdcall) PeekConsoleInputW(
    argument0 : HANDLE,
    argument1 : PINPUT_RECORD,
    argument2 : CULong,
    argument3 : PDWORD) Int;

external (stdcall) ReadConsoleA(
    argument0 : HANDLE,
    argument1 : PVOID,
    argument2 : CULong,
    argument3 : PDWORD,
    argument4 : PVOID) Int;

external (stdcall) ReadConsoleW(
    argument0 : HANDLE,
    argument1 : PVOID,
    argument2 : CULong,
    argument3 : PDWORD,
    argument4 : PVOID) Int;

external (stdcall) ReadConsoleInputA(
    argument0 : HANDLE,
    argument1 : PINPUT_RECORD,
    argument2 : CULong,
    argument3 : PDWORD) Int;

external (stdcall) ReadConsoleInputW(
    argument0 : HANDLE,
    argument1 : PINPUT_RECORD,
    argument2 : CULong,
    argument3 : PDWORD) Int;

external (stdcall) ReadConsoleOutputAttribute(
    argument0 : HANDLE,
    argument1 : LPWORD,
    argument2 : CULong,
    argument3 : COORD,
    argument4 : LPDWORD) Int;

external (stdcall) ReadConsoleOutputCharacterA(
    argument0 : HANDLE,
    argument1 : LPSTR,
    argument2 : CULong,
    argument3 : COORD,
    argument4 : PDWORD) Int;

external (stdcall) ReadConsoleOutputCharacterW(
    argument0 : HANDLE,
    argument1 : LPWSTR,
    argument2 : CULong,
    argument3 : COORD,
    argument4 : PDWORD) Int;

external (stdcall) ReadConsoleOutputA(
    argument0 : HANDLE,
    argument1 : PCHAR_INFO,
    argument2 : COORD,
    argument3 : COORD,
    argument4 : PSMALL_RECT) Int;

external (stdcall) ReadConsoleOutputW(
    argument0 : HANDLE,
    argument1 : PCHAR_INFO,
    argument2 : COORD,
    argument3 : COORD,
    argument4 : PSMALL_RECT) Int;

external (stdcall) ScrollConsoleScreenBufferA(
    argument0 : HANDLE,
    argument1 : Pointer[SMALL_RECT],
    argument2 : Pointer[SMALL_RECT],
    argument3 : COORD,
    argument4 : Pointer[CHAR_INFO]) Int;

external (stdcall) ScrollConsoleScreenBufferW(
    argument0 : HANDLE,
    argument1 : Pointer[SMALL_RECT],
    argument2 : Pointer[SMALL_RECT],
    argument3 : COORD,
    argument4 : Pointer[CHAR_INFO]) Int;

external (stdcall) SetConsoleActiveScreenBuffer(
    argument0 : HANDLE) Int;

external (stdcall) SetConsoleCP(
    argument0 : UInt) Int;

external (stdcall) SetConsoleCtrlHandler(
    argument0 : PHANDLER_ROUTINE,
    argument1 : Int) Int;

external (stdcall) SetConsoleCursorInfo(
    argument0 : HANDLE,
    argument1 : Pointer[CONSOLE_CURSOR_INFO]) Int;

external (stdcall) SetConsoleCursorPosition(
    argument0 : HANDLE,
    argument1 : COORD) Int;

external (stdcall) SetConsoleMode(
    argument0 : HANDLE,
    argument1 : CULong) Int;

external (stdcall) SetConsoleOutputCP(
    argument0 : UInt) Int;

external (stdcall) SetConsoleScreenBufferSize(
    argument0 : HANDLE,
    argument1 : COORD) Int;

external (stdcall) SetConsoleTextAttribute(
    argument0 : HANDLE,
    argument1 : UShort) Int;

external (stdcall) SetConsoleTitleA(
    argument0 : LPCSTR) Int;

external (stdcall) SetConsoleTitleW(
    argument0 : LPCWSTR) Int;

external (stdcall) SetConsoleWindowInfo(
    argument0 : HANDLE,
    argument1 : Int,
    argument2 : Pointer[SMALL_RECT]) Int;

external (stdcall) WriteConsoleA(
    argument0 : HANDLE,
    argument1 : PCVOID,
    argument2 : CULong,
    argument3 : PDWORD,
    argument4 : PVOID) Int;

external (stdcall) WriteConsoleW(
    argument0 : HANDLE,
    argument1 : PCVOID,
    argument2 : CULong,
    argument3 : PDWORD,
    argument4 : PVOID) Int;

external (stdcall) WriteConsoleInputA(
    argument0 : HANDLE,
    argument1 : Pointer[INPUT_RECORD],
    argument2 : CULong,
    argument3 : PDWORD) Int;

external (stdcall) WriteConsoleInputW(
    argument0 : HANDLE,
    argument1 : Pointer[INPUT_RECORD],
    argument2 : CULong,
    argument3 : PDWORD) Int;

external (stdcall) WriteConsoleOutputA(
    argument0 : HANDLE,
    argument1 : Pointer[CHAR_INFO],
    argument2 : COORD,
    argument3 : COORD,
    argument4 : PSMALL_RECT) Int;

external (stdcall) WriteConsoleOutputW(
    argument0 : HANDLE,
    argument1 : Pointer[CHAR_INFO],
    argument2 : COORD,
    argument3 : COORD,
    argument4 : PSMALL_RECT) Int;

external (stdcall) WriteConsoleOutputAttribute(
    argument0 : HANDLE,
    argument1 : Pointer[UShort],
    argument2 : CULong,
    argument3 : COORD,
    argument4 : PDWORD) Int;

external (stdcall) WriteConsoleOutputCharacterA(
    argument0 : HANDLE,
    argument1 : LPCSTR,
    argument2 : CULong,
    argument3 : COORD,
    argument4 : PDWORD) Int;

external (stdcall) WriteConsoleOutputCharacterW(
    argument0 : HANDLE,
    argument1 : LPCWSTR,
    argument2 : CULong,
    argument3 : COORD,
    argument4 : PDWORD) Int;

record Struct__FILETIME (
    dwLowDateTime : CULong,
    dwHighDateTime : CULong,
);

alias FILETIME = Struct__FILETIME;

alias PFILETIME = Pointer[Struct__FILETIME];

alias LPFILETIME = Pointer[Struct__FILETIME];

record Struct__BY_HANDLE_FILE_INFORMATION (
    dwFileAttributes : CULong,
    ftCreationTime : FILETIME,
    ftLastAccessTime : FILETIME,
    ftLastWriteTime : FILETIME,
    dwVolumeSerialNumber : CULong,
    nFileSizeHigh : CULong,
    nFileSizeLow : CULong,
    nNumberOfLinks : CULong,
    nFileIndexHigh : CULong,
    nFileIndexLow : CULong,
);

alias BY_HANDLE_FILE_INFORMATION = Struct__BY_HANDLE_FILE_INFORMATION;

alias LPBY_HANDLE_FILE_INFORMATION = Pointer[Struct__BY_HANDLE_FILE_INFORMATION];

record Struct__DCB (
    DCBlength : CULong,
    BaudRate : CULong,
    fBinary : CULong,
    fParity : CULong,
    fOutxCtsFlow : CULong,
    fOutxDsrFlow : CULong,
    fDtrControl : CULong,
    fDsrSensitivity : CULong,
    fTXContinueOnXoff : CULong,
    fOutX : CULong,
    fInX : CULong,
    fErrorChar : CULong,
    fNull : CULong,
    fRtsControl : CULong,
    fAbortOnError : CULong,
    fDummy2 : CULong,
    wReserved : UShort,
    XonLim : UShort,
    XoffLim : UShort,
    ByteSize : CUChar,
    Parity : CUChar,
    StopBits : CUChar,
    XonChar : CChar,
    XoffChar : CChar,
    ErrorChar : CChar,
    EofChar : CChar,
    EvtChar : CChar,
    wReserved1 : UShort,
);

alias DCB = Struct__DCB;

alias LPDCB = Pointer[Struct__DCB];

record Struct__COMM_CONFIG (
    dwSize : CULong,
    wVersion : UShort,
    wReserved : UShort,
    dcb : DCB,
    dwProviderSubType : CULong,
    dwProviderOffset : CULong,
    dwProviderSize : CULong,
    wcProviderData : Array[UShort,1],
);

alias COMMCONFIG = Struct__COMM_CONFIG;

alias LPCOMMCONFIG = Pointer[Struct__COMM_CONFIG];

record Struct__COMMPROP (
    wPacketLength : UShort,
    wPacketVersion : UShort,
    dwServiceMask : CULong,
    dwReserved1 : CULong,
    dwMaxTxQueue : CULong,
    dwMaxRxQueue : CULong,
    dwMaxBaud : CULong,
    dwProvSubType : CULong,
    dwProvCapabilities : CULong,
    dwSettableParams : CULong,
    dwSettableBaud : CULong,
    wSettableData : UShort,
    wSettableStopParity : UShort,
    dwCurrentTxQueue : CULong,
    dwCurrentRxQueue : CULong,
    dwProvSpec1 : CULong,
    dwProvSpec2 : CULong,
    wcProvChar : Array[UShort,1],
);

alias COMMPROP = Struct__COMMPROP;

alias LPCOMMPROP = Pointer[Struct__COMMPROP];

record Struct__COMMTIMEOUTS (
    ReadIntervalTimeout : CULong,
    ReadTotalTimeoutMultiplier : CULong,
    ReadTotalTimeoutConstant : CULong,
    WriteTotalTimeoutMultiplier : CULong,
    WriteTotalTimeoutConstant : CULong,
);

alias COMMTIMEOUTS = Struct__COMMTIMEOUTS;

alias LPCOMMTIMEOUTS = Pointer[Struct__COMMTIMEOUTS];

record Struct__COMSTAT (
    fCtsHold : CULong,
    fDsrHold : CULong,
    fRlsdHold : CULong,
    fXoffHold : CULong,
    fXoffSent : CULong,
    fEof : CULong,
    fTxim : CULong,
    fReserved : CULong,
    cbInQue : CULong,
    cbOutQue : CULong,
);

alias COMSTAT = Struct__COMSTAT;

alias LPCOMSTAT = Pointer[Struct__COMSTAT];

alias LPTHREAD_START_ROUTINE = StdCallCodePointer[(RawPointer),(CULong)];

record Struct__CREATE_PROCESS_DEBUG_INFO (
    hFile : HANDLE,
    hProcess : HANDLE,
    hThread : HANDLE,
    lpBaseOfImage : LPVOID,
    dwDebugInfoFileOffset : CULong,
    nDebugInfoSize : CULong,
    lpThreadLocalBase : LPVOID,
    lpStartAddress : LPTHREAD_START_ROUTINE,
    lpImageName : LPVOID,
    fUnicode : UShort,
);

alias CREATE_PROCESS_DEBUG_INFO = Struct__CREATE_PROCESS_DEBUG_INFO;

alias LPCREATE_PROCESS_DEBUG_INFO = Pointer[Struct__CREATE_PROCESS_DEBUG_INFO];

record Struct__CREATE_THREAD_DEBUG_INFO (
    hThread : HANDLE,
    lpThreadLocalBase : LPVOID,
    lpStartAddress : LPTHREAD_START_ROUTINE,
);

alias CREATE_THREAD_DEBUG_INFO = Struct__CREATE_THREAD_DEBUG_INFO;

alias LPCREATE_THREAD_DEBUG_INFO = Pointer[Struct__CREATE_THREAD_DEBUG_INFO];

record Struct__EXCEPTION_DEBUG_INFO (
    ExceptionRecord : EXCEPTION_RECORD,
    dwFirstChance : CULong,
);

alias EXCEPTION_DEBUG_INFO = Struct__EXCEPTION_DEBUG_INFO;

alias LPEXCEPTION_DEBUG_INFO = Pointer[Struct__EXCEPTION_DEBUG_INFO];

record Struct__EXIT_THREAD_DEBUG_INFO (
    dwExitCode : CULong,
);

alias EXIT_THREAD_DEBUG_INFO = Struct__EXIT_THREAD_DEBUG_INFO;

alias LPEXIT_THREAD_DEBUG_INFO = Pointer[Struct__EXIT_THREAD_DEBUG_INFO];

record Struct__EXIT_PROCESS_DEBUG_INFO (
    dwExitCode : CULong,
);

alias EXIT_PROCESS_DEBUG_INFO = Struct__EXIT_PROCESS_DEBUG_INFO;

alias LPEXIT_PROCESS_DEBUG_INFO = Pointer[Struct__EXIT_PROCESS_DEBUG_INFO];

record Struct__LOAD_DLL_DEBUG_INFO (
    hFile : HANDLE,
    lpBaseOfDll : LPVOID,
    dwDebugInfoFileOffset : CULong,
    nDebugInfoSize : CULong,
    lpImageName : LPVOID,
    fUnicode : UShort,
);

alias LOAD_DLL_DEBUG_INFO = Struct__LOAD_DLL_DEBUG_INFO;

alias LPLOAD_DLL_DEBUG_INFO = Pointer[Struct__LOAD_DLL_DEBUG_INFO];

record Struct__UNLOAD_DLL_DEBUG_INFO (
    lpBaseOfDll : LPVOID,
);

alias UNLOAD_DLL_DEBUG_INFO = Struct__UNLOAD_DLL_DEBUG_INFO;

alias LPUNLOAD_DLL_DEBUG_INFO = Pointer[Struct__UNLOAD_DLL_DEBUG_INFO];

record Struct__OUTPUT_DEBUG_STRING_INFO (
    lpDebugStringData : LPSTR,
    fUnicode : UShort,
    nDebugStringLength : UShort,
);

alias OUTPUT_DEBUG_STRING_INFO = Struct__OUTPUT_DEBUG_STRING_INFO;

alias LPOUTPUT_DEBUG_STRING_INFO = Pointer[Struct__OUTPUT_DEBUG_STRING_INFO];

record Struct__RIP_INFO (
    dwError : CULong,
    dwType : CULong,
);

alias RIP_INFO = Struct__RIP_INFO;

alias LPRIP_INFO = Pointer[Struct__RIP_INFO];

record Struct__DEBUG_EVENT (
    dwDebugEventCode : CULong,
    dwProcessId : CULong,
    dwThreadId : CULong,
    u : AUnionType,
);

alias DEBUG_EVENT = Struct__DEBUG_EVENT;

alias LPDEBUG_EVENT = Pointer[Struct__DEBUG_EVENT];

record Struct__OVERLAPPED (
    Internal : CULong,
    InternalHigh : CULong,
    unnamed_field2 : AUnionType,
    hEvent : HANDLE,
);

alias OVERLAPPED = Struct__OVERLAPPED;

alias POVERLAPPED = Pointer[Struct__OVERLAPPED];

alias LPOVERLAPPED = Pointer[Struct__OVERLAPPED];

record Struct__STARTUPINFOA (
    cb : CULong,
    lpReserved : LPSTR,
    lpDesktop : LPSTR,
    lpTitle : LPSTR,
    dwX : CULong,
    dwY : CULong,
    dwXSize : CULong,
    dwYSize : CULong,
    dwXCountChars : CULong,
    dwYCountChars : CULong,
    dwFillAttribute : CULong,
    dwFlags : CULong,
    wShowWindow : UShort,
    cbReserved2 : UShort,
    lpReserved2 : PBYTE,
    hStdInput : HANDLE,
    hStdOutput : HANDLE,
    hStdError : HANDLE,
);

alias STARTUPINFOA = Struct__STARTUPINFOA;

alias LPSTARTUPINFOA = Pointer[Struct__STARTUPINFOA];

record Struct__STARTUPINFOW (
    cb : CULong,
    lpReserved : LPWSTR,
    lpDesktop : LPWSTR,
    lpTitle : LPWSTR,
    dwX : CULong,
    dwY : CULong,
    dwXSize : CULong,
    dwYSize : CULong,
    dwXCountChars : CULong,
    dwYCountChars : CULong,
    dwFillAttribute : CULong,
    dwFlags : CULong,
    wShowWindow : UShort,
    cbReserved2 : UShort,
    lpReserved2 : PBYTE,
    hStdInput : HANDLE,
    hStdOutput : HANDLE,
    hStdError : HANDLE,
);

alias STARTUPINFOW = Struct__STARTUPINFOW;

alias LPSTARTUPINFOW = Pointer[Struct__STARTUPINFOW];

record Struct__PROCESS_INFORMATION (
    hProcess : HANDLE,
    hThread : HANDLE,
    dwProcessId : CULong,
    dwThreadId : CULong,
);

alias PROCESS_INFORMATION = Struct__PROCESS_INFORMATION;

alias PPROCESS_INFORMATION = Pointer[Struct__PROCESS_INFORMATION];

alias LPPROCESS_INFORMATION = Pointer[Struct__PROCESS_INFORMATION];

record Struct__CRITICAL_SECTION_DEBUG (
    Type : UShort,
    CreatorBackTraceIndex : UShort,
    CriticalSection : Pointer[Struct__CRITICAL_SECTION],
    ProcessLocksList : LIST_ENTRY,
    EntryCount : CULong,
    ContentionCount : CULong,
    Spare : Array[CULong,2],
);

alias CRITICAL_SECTION_DEBUG = Struct__CRITICAL_SECTION_DEBUG;

alias PCRITICAL_SECTION_DEBUG = Pointer[Struct__CRITICAL_SECTION_DEBUG];

record Struct__CRITICAL_SECTION (
    DebugInfo : PCRITICAL_SECTION_DEBUG,
    LockCount : CLong,
    RecursionCount : CLong,
    OwningThread : HANDLE,
    LockSemaphore : HANDLE,
    SpinCount : CULong,
);

alias CRITICAL_SECTION = Struct__CRITICAL_SECTION;

alias PCRITICAL_SECTION = Pointer[Struct__CRITICAL_SECTION];

alias LPCRITICAL_SECTION = Pointer[Struct__CRITICAL_SECTION];

record Struct__SYSTEMTIME (
    wYear : UShort,
    wMonth : UShort,
    wDayOfWeek : UShort,
    wDay : UShort,
    wHour : UShort,
    wMinute : UShort,
    wSecond : UShort,
    wMilliseconds : UShort,
);

alias SYSTEMTIME = Struct__SYSTEMTIME;

alias LPSYSTEMTIME = Pointer[Struct__SYSTEMTIME];

record Struct__WIN32_FILE_ATTRIBUTE_DATA (
    dwFileAttributes : CULong,
    ftCreationTime : FILETIME,
    ftLastAccessTime : FILETIME,
    ftLastWriteTime : FILETIME,
    nFileSizeHigh : CULong,
    nFileSizeLow : CULong,
);

alias WIN32_FILE_ATTRIBUTE_DATA = Struct__WIN32_FILE_ATTRIBUTE_DATA;

alias LPWIN32_FILE_ATTRIBUTE_DATA = Pointer[Struct__WIN32_FILE_ATTRIBUTE_DATA];

record Struct__WIN32_FIND_DATAA (
    dwFileAttributes : CULong,
    ftCreationTime : FILETIME,
    ftLastAccessTime : FILETIME,
    ftLastWriteTime : FILETIME,
    nFileSizeHigh : CULong,
    nFileSizeLow : CULong,
    dwReserved0 : CULong,
    dwReserved1 : CULong,
    cFileName : Array[CChar,260],
    cAlternateFileName : Array[CChar,14],
);

alias WIN32_FIND_DATAA = Struct__WIN32_FIND_DATAA;

alias PWIN32_FIND_DATAA = Pointer[Struct__WIN32_FIND_DATAA];

alias LPWIN32_FIND_DATAA = Pointer[Struct__WIN32_FIND_DATAA];

record Struct__WIN32_FIND_DATAW (
    dwFileAttributes : CULong,
    ftCreationTime : FILETIME,
    ftLastAccessTime : FILETIME,
    ftLastWriteTime : FILETIME,
    nFileSizeHigh : CULong,
    nFileSizeLow : CULong,
    dwReserved0 : CULong,
    dwReserved1 : CULong,
    cFileName : Array[UShort,260],
    cAlternateFileName : Array[UShort,14],
);

alias WIN32_FIND_DATAW = Struct__WIN32_FIND_DATAW;

alias PWIN32_FIND_DATAW = Pointer[Struct__WIN32_FIND_DATAW];

alias LPWIN32_FIND_DATAW = Pointer[Struct__WIN32_FIND_DATAW];

record Struct__WIN32_STREAM_ID (
    dwStreamId : CULong,
    dwStreamAttributes : CULong,
    Size : LARGE_INTEGER,
    dwStreamNameSize : CULong,
    cStreamName : Array[UShort,1],
);

alias WIN32_STREAM_ID = Struct__WIN32_STREAM_ID;

alias LPWIN32_STREAM_ID = Pointer[Struct__WIN32_STREAM_ID];

alias FindExInfoStandard = 0;
alias FindExInfoMaxInfoLevel = 1;

alias FINDEX_INFO_LEVELS = Int;

alias FindExSearchNameMatch = 0;
alias FindExSearchLimitToDirectories = 1;
alias FindExSearchLimitToDevices = 2;
alias FindExSearchMaxSearchOp = 3;

alias FINDEX_SEARCH_OPS = Int;

alias AclRevisionInformation = 1;
alias AclSizeInformation = 2;

alias ACL_INFORMATION_CLASS = Int;

record Struct_tagHW_PROFILE_INFOA (
    dwDockInfo : CULong,
    szHwProfileGuid : Array[CChar,39],
    szHwProfileName : Array[CChar,80],
);

alias HW_PROFILE_INFOA = Struct_tagHW_PROFILE_INFOA;

alias LPHW_PROFILE_INFOA = Pointer[Struct_tagHW_PROFILE_INFOA];

record Struct_tagHW_PROFILE_INFOW (
    dwDockInfo : CULong,
    szHwProfileGuid : Array[UShort,39],
    szHwProfileName : Array[UShort,80],
);

alias HW_PROFILE_INFOW = Struct_tagHW_PROFILE_INFOW;

alias LPHW_PROFILE_INFOW = Pointer[Struct_tagHW_PROFILE_INFOW];

alias GetFileExInfoStandard = 0;
alias GetFileExMaxInfoLevel = 1;

alias GET_FILEEX_INFO_LEVELS = Int;

record Struct__SYSTEM_INFO (
    unnamed_field0 : AUnionType,
    dwPageSize : CULong,
    lpMinimumApplicationAddress : PVOID,
    lpMaximumApplicationAddress : PVOID,
    dwActiveProcessorMask : CULong,
    dwNumberOfProcessors : CULong,
    dwProcessorType : CULong,
    dwAllocationGranularity : CULong,
    wProcessorLevel : UShort,
    wProcessorRevision : UShort,
);

alias SYSTEM_INFO = Struct__SYSTEM_INFO;

alias LPSYSTEM_INFO = Pointer[Struct__SYSTEM_INFO];

record Struct__SYSTEM_POWER_STATUS (
    ACLineStatus : CUChar,
    BatteryFlag : CUChar,
    BatteryLifePercent : CUChar,
    Reserved1 : CUChar,
    BatteryLifeTime : CULong,
    BatteryFullLifeTime : CULong,
);

alias SYSTEM_POWER_STATUS = Struct__SYSTEM_POWER_STATUS;

alias LPSYSTEM_POWER_STATUS = Pointer[Struct__SYSTEM_POWER_STATUS];

record Struct__TIME_ZONE_INFORMATION (
    Bias : CLong,
    StandardName : Array[UShort,32],
    StandardDate : SYSTEMTIME,
    StandardBias : CLong,
    DaylightName : Array[UShort,32],
    DaylightDate : SYSTEMTIME,
    DaylightBias : CLong,
);

alias TIME_ZONE_INFORMATION = Struct__TIME_ZONE_INFORMATION;

alias LPTIME_ZONE_INFORMATION = Pointer[Struct__TIME_ZONE_INFORMATION];

record Struct__MEMORYSTATUS (
    dwLength : CULong,
    dwMemoryLoad : CULong,
    dwTotalPhys : CULong,
    dwAvailPhys : CULong,
    dwTotalPageFile : CULong,
    dwAvailPageFile : CULong,
    dwTotalVirtual : CULong,
    dwAvailVirtual : CULong,
);

alias MEMORYSTATUS = Struct__MEMORYSTATUS;

alias LPMEMORYSTATUS = Pointer[Struct__MEMORYSTATUS];

record Struct__LDT_ENTRY (
    LimitLow : UShort,
    BaseLow : UShort,
    HighWord : AUnionType,
);

alias LDT_ENTRY = Struct__LDT_ENTRY;

alias PLDT_ENTRY = Pointer[Struct__LDT_ENTRY];

alias LPLDT_ENTRY = Pointer[Struct__LDT_ENTRY];

record Struct__PROCESS_HEAP_ENTRY (
    lpData : PVOID,
    cbData : CULong,
    cbOverhead : CUChar,
    iRegionIndex : CUChar,
    wFlags : UShort,
    unnamed_field5 : AUnionType,
);

alias PROCESS_HEAP_ENTRY = Struct__PROCESS_HEAP_ENTRY;

alias LPPROCESS_HEAP_ENTRY = Pointer[Struct__PROCESS_HEAP_ENTRY];

record Struct__OFSTRUCT (
    cBytes : CUChar,
    fFixedDisk : CUChar,
    nErrCode : UShort,
    Reserved1 : UShort,
    Reserved2 : UShort,
    szPathName : Array[CChar,128],
);

alias OFSTRUCT = Struct__OFSTRUCT;

alias LPOFSTRUCT = Pointer[Struct__OFSTRUCT];

alias POFSTRUCT = Pointer[Struct__OFSTRUCT];

record Struct__WIN_CERTIFICATE (
    dwLength : CULong,
    wRevision : UShort,
    wCertificateType : UShort,
    bCertificate : Array[CUChar,1],
);

alias WIN_CERTIFICATE = Struct__WIN_CERTIFICATE;

alias LPWIN_CERTIFICATE = Pointer[Struct__WIN_CERTIFICATE];

alias LPPROGRESS_ROUTINE = StdCallCodePointer[(AUnionType,AUnionType,AUnionType,AUnionType,CULong,CULong,RawPointer,RawPointer,RawPointer),(CULong)];

alias LPFIBER_START_ROUTINE = StdCallCodePointer[(RawPointer),()];

alias ENUMRESLANGPROCA = StdCallCodePointer[(Pointer[Struct_HINSTANCE__],Pointer[CChar],Pointer[CChar],UShort,CLong),(Int)];

alias ENUMRESLANGPROCW = StdCallCodePointer[(Pointer[Struct_HINSTANCE__],Pointer[UShort],Pointer[UShort],UShort,CLong),(Int)];

alias ENUMRESNAMEPROCA = StdCallCodePointer[(Pointer[Struct_HINSTANCE__],Pointer[CChar],Pointer[CChar],CLong),(Int)];

alias ENUMRESNAMEPROCW = StdCallCodePointer[(Pointer[Struct_HINSTANCE__],Pointer[UShort],Pointer[UShort],CLong),(Int)];

alias ENUMRESTYPEPROCA = StdCallCodePointer[(Pointer[Struct_HINSTANCE__],Pointer[CChar],CLong),(Int)];

alias ENUMRESTYPEPROCW = StdCallCodePointer[(Pointer[Struct_HINSTANCE__],Pointer[UShort],CLong),(Int)];

alias LPOVERLAPPED_COMPLETION_ROUTINE = StdCallCodePointer[(CULong,CULong,Pointer[Struct__OVERLAPPED]),()];

alias PTOP_LEVEL_EXCEPTION_FILTER = StdCallCodePointer[(Pointer[Struct__EXCEPTION_POINTERS]),(CLong)];

alias LPTOP_LEVEL_EXCEPTION_FILTER = PTOP_LEVEL_EXCEPTION_FILTER;

alias PAPCFUNC = StdCallCodePointer[(CULong),()];

alias PTIMERAPCROUTINE = StdCallCodePointer[(RawPointer,CULong,CULong),()];

external (stdcall) WinMain(
    argument0 : HINSTANCE,
    argument1 : HINSTANCE,
    argument2 : LPSTR,
    argument3 : Int) Int;

external (stdcall) wWinMain(
    argument0 : HINSTANCE,
    argument1 : HINSTANCE,
    argument2 : LPWSTR,
    argument3 : Int) Int;

external (stdcall) _hread(
    argument0 : Int,
    argument1 : LPVOID,
    argument2 : CLong) CLong;

external (stdcall) _hwrite(
    argument0 : Int,
    argument1 : LPCSTR,
    argument2 : CLong) CLong;

external (stdcall) _lclose(
    argument0 : Int) Int;

external (stdcall) _lcreat(
    argument0 : LPCSTR,
    argument1 : Int) Int;

external (stdcall) _llseek(
    argument0 : Int,
    argument1 : CLong,
    argument2 : Int) CLong;

external (stdcall) _lopen(
    argument0 : LPCSTR,
    argument1 : Int) Int;

external (stdcall) _lread(
    argument0 : Int,
    argument1 : LPVOID,
    argument2 : UInt) UInt;

external (stdcall) _lwrite(
    argument0 : Int,
    argument1 : LPCSTR,
    argument2 : UInt) UInt;

external (stdcall) AccessCheck(
    argument0 : PSECURITY_DESCRIPTOR,
    argument1 : HANDLE,
    argument2 : CULong,
    argument3 : PGENERIC_MAPPING,
    argument4 : PPRIVILEGE_SET,
    argument5 : PDWORD,
    argument6 : PDWORD,
    argument7 : PBOOL) Int;

external (stdcall) AccessCheckAndAuditAlarmA(
    argument0 : LPCSTR,
    argument1 : LPVOID,
    argument2 : LPSTR,
    argument3 : LPSTR,
    argument4 : PSECURITY_DESCRIPTOR,
    argument5 : CULong,
    argument6 : PGENERIC_MAPPING,
    argument7 : Int,
    argument8 : PDWORD,
    argument9 : PBOOL,
    argument10 : PBOOL) Int;

external (stdcall) AccessCheckAndAuditAlarmW(
    argument0 : LPCWSTR,
    argument1 : LPVOID,
    argument2 : LPWSTR,
    argument3 : LPWSTR,
    argument4 : PSECURITY_DESCRIPTOR,
    argument5 : CULong,
    argument6 : PGENERIC_MAPPING,
    argument7 : Int,
    argument8 : PDWORD,
    argument9 : PBOOL,
    argument10 : PBOOL) Int;

external (stdcall) AddAccessAllowedAce(
    argument0 : PACL,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : PSID) Int;

external (stdcall) AddAccessDeniedAce(
    argument0 : PACL,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : PSID) Int;

external (stdcall) AddAce(
    argument0 : PACL,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : PVOID,
    argument4 : CULong) Int;

external (stdcall) AddAtomA(
    argument0 : LPCSTR) UShort;

external (stdcall) AddAtomW(
    argument0 : LPCWSTR) UShort;

external (stdcall) AddAuditAccessAce(
    argument0 : PACL,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : PSID,
    argument4 : Int,
    argument5 : Int) Int;

external (stdcall) AdjustTokenGroups(
    argument0 : HANDLE,
    argument1 : Int,
    argument2 : PTOKEN_GROUPS,
    argument3 : CULong,
    argument4 : PTOKEN_GROUPS,
    argument5 : PDWORD) Int;

external (stdcall) AdjustTokenPrivileges(
    argument0 : HANDLE,
    argument1 : Int,
    argument2 : PTOKEN_PRIVILEGES,
    argument3 : CULong,
    argument4 : PTOKEN_PRIVILEGES,
    argument5 : PDWORD) Int;

external (stdcall) AllocateAndInitializeSid(
    argument0 : PSID_IDENTIFIER_AUTHORITY,
    argument1 : CUChar,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : CULong,
    argument6 : CULong,
    argument7 : CULong,
    argument8 : CULong,
    argument9 : CULong,
    argument10 : Pointer[PSID]) Int;

external (stdcall) AllocateLocallyUniqueId(
    argument0 : PLUID) Int;

external (stdcall) AreAllAccessesGranted(
    argument0 : CULong,
    argument1 : CULong) Int;

external (stdcall) AreAnyAccessesGranted(
    argument0 : CULong,
    argument1 : CULong) Int;

external (stdcall) AreFileApisANSI() Int;

external (stdcall) BackupEventLogA(
    argument0 : HANDLE,
    argument1 : LPCSTR) Int;

external (stdcall) BackupEventLogW(
    argument0 : HANDLE,
    argument1 : LPCWSTR) Int;

external (stdcall) BackupRead(
    argument0 : HANDLE,
    argument1 : LPBYTE,
    argument2 : CULong,
    argument3 : LPDWORD,
    argument4 : Int,
    argument5 : Int,
    argument6 : Pointer[LPVOID]) Int;

external (stdcall) BackupSeek(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPDWORD,
    argument4 : LPDWORD,
    argument5 : Pointer[LPVOID]) Int;

external (stdcall) BackupWrite(
    argument0 : HANDLE,
    argument1 : LPBYTE,
    argument2 : CULong,
    argument3 : LPDWORD,
    argument4 : Int,
    argument5 : Int,
    argument6 : Pointer[LPVOID]) Int;

external (stdcall) Beep(
    argument0 : CULong,
    argument1 : CULong) Int;

external (stdcall) BeginUpdateResourceA(
    argument0 : LPCSTR,
    argument1 : Int) HANDLE;

external (stdcall) BeginUpdateResourceW(
    argument0 : LPCWSTR,
    argument1 : Int) HANDLE;

external (stdcall) BuildCommDCBA(
    argument0 : LPCSTR,
    argument1 : LPDCB) Int;

external (stdcall) BuildCommDCBW(
    argument0 : LPCWSTR,
    argument1 : LPDCB) Int;

external (stdcall) BuildCommDCBAndTimeoutsA(
    argument0 : LPCSTR,
    argument1 : LPDCB,
    argument2 : LPCOMMTIMEOUTS) Int;

external (stdcall) BuildCommDCBAndTimeoutsW(
    argument0 : LPCWSTR,
    argument1 : LPDCB,
    argument2 : LPCOMMTIMEOUTS) Int;

external (stdcall) CallNamedPipeA(
    argument0 : LPCSTR,
    argument1 : PVOID,
    argument2 : CULong,
    argument3 : PVOID,
    argument4 : CULong,
    argument5 : PDWORD,
    argument6 : CULong) Int;

external (stdcall) CallNamedPipeW(
    argument0 : LPCWSTR,
    argument1 : PVOID,
    argument2 : CULong,
    argument3 : PVOID,
    argument4 : CULong,
    argument5 : PDWORD,
    argument6 : CULong) Int;

external (stdcall) CancelDeviceWakeupRequest(
    argument0 : HANDLE) Int;

external (stdcall) CancelIo(
    argument0 : HANDLE) Int;

external (stdcall) CancelWaitableTimer(
    argument0 : HANDLE) Int;

external (stdcall) ClearCommBreak(
    argument0 : HANDLE) Int;

external (stdcall) ClearCommError(
    argument0 : HANDLE,
    argument1 : PDWORD,
    argument2 : LPCOMSTAT) Int;

external (stdcall) ClearEventLogA(
    argument0 : HANDLE,
    argument1 : LPCSTR) Int;

external (stdcall) ClearEventLogW(
    argument0 : HANDLE,
    argument1 : LPCWSTR) Int;

external (stdcall) CloseEventLog(
    argument0 : HANDLE) Int;

external (stdcall) CloseHandle(
    argument0 : HANDLE) Int;

external (stdcall) CommConfigDialogA(
    argument0 : LPCSTR,
    argument1 : HWND,
    argument2 : LPCOMMCONFIG) Int;

external (stdcall) CommConfigDialogW(
    argument0 : LPCWSTR,
    argument1 : HWND,
    argument2 : LPCOMMCONFIG) Int;

external (stdcall) CompareFileTime(
    argument0 : Pointer[FILETIME],
    argument1 : Pointer[FILETIME]) CLong;

external (stdcall) ConnectNamedPipe(
    argument0 : HANDLE,
    argument1 : LPOVERLAPPED) Int;

external (stdcall) ContinueDebugEvent(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : CULong) Int;

external (stdcall) ConvertFiberToThread() Int;

external (stdcall) ConvertThreadToFiber(
    argument0 : PVOID) PVOID;

external (stdcall) CopyFileA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : Int) Int;

external (stdcall) CopyFileW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : Int) Int;

external (stdcall) CopyFileExA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : LPPROGRESS_ROUTINE,
    argument3 : LPVOID,
    argument4 : LPBOOL,
    argument5 : CULong) Int;

external (stdcall) CopyFileExW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : LPPROGRESS_ROUTINE,
    argument3 : LPVOID,
    argument4 : LPBOOL,
    argument5 : CULong) Int;

external (stdcall) CopySid(
    argument0 : CULong,
    argument1 : PSID,
    argument2 : PSID) Int;

external (stdcall) CreateDirectoryA(
    argument0 : LPCSTR,
    argument1 : LPSECURITY_ATTRIBUTES) Int;

external (stdcall) CreateDirectoryW(
    argument0 : LPCWSTR,
    argument1 : LPSECURITY_ATTRIBUTES) Int;

external (stdcall) CreateDirectoryExA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : LPSECURITY_ATTRIBUTES) Int;

external (stdcall) CreateDirectoryExW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : LPSECURITY_ATTRIBUTES) Int;

external (stdcall) CreateEventA(
    argument0 : LPSECURITY_ATTRIBUTES,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPCSTR) HANDLE;

external (stdcall) CreateEventW(
    argument0 : LPSECURITY_ATTRIBUTES,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPCWSTR) HANDLE;

external (stdcall) CreateFiber(
    argument0 : CULong,
    argument1 : LPFIBER_START_ROUTINE,
    argument2 : LPVOID) LPVOID;

external (stdcall) CreateFiberEx(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPFIBER_START_ROUTINE,
    argument4 : LPVOID) LPVOID;

external (stdcall) CreateFileA(
    argument0 : LPCSTR,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPSECURITY_ATTRIBUTES,
    argument4 : CULong,
    argument5 : CULong,
    argument6 : HANDLE) HANDLE;

external (stdcall) CreateFileW(
    argument0 : LPCWSTR,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPSECURITY_ATTRIBUTES,
    argument4 : CULong,
    argument5 : CULong,
    argument6 : HANDLE) HANDLE;

external (stdcall) CreateFileMappingA(
    argument0 : HANDLE,
    argument1 : LPSECURITY_ATTRIBUTES,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : LPCSTR) HANDLE;

external (stdcall) CreateFileMappingW(
    argument0 : HANDLE,
    argument1 : LPSECURITY_ATTRIBUTES,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : LPCWSTR) HANDLE;

external (stdcall) CreateIoCompletionPort(
    argument0 : HANDLE,
    argument1 : HANDLE,
    argument2 : CULong,
    argument3 : CULong) HANDLE;

external (stdcall) CreateMailslotA(
    argument0 : LPCSTR,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPSECURITY_ATTRIBUTES) HANDLE;

external (stdcall) CreateMailslotW(
    argument0 : LPCWSTR,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPSECURITY_ATTRIBUTES) HANDLE;

external (stdcall) CreateMutexA(
    argument0 : LPSECURITY_ATTRIBUTES,
    argument1 : Int,
    argument2 : LPCSTR) HANDLE;

external (stdcall) CreateMutexW(
    argument0 : LPSECURITY_ATTRIBUTES,
    argument1 : Int,
    argument2 : LPCWSTR) HANDLE;

external (stdcall) CreateNamedPipeA(
    argument0 : LPCSTR,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : CULong,
    argument6 : CULong,
    argument7 : LPSECURITY_ATTRIBUTES) HANDLE;

external (stdcall) CreateNamedPipeW(
    argument0 : LPCWSTR,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : CULong,
    argument6 : CULong,
    argument7 : LPSECURITY_ATTRIBUTES) HANDLE;

external (stdcall) CreatePipe(
    argument0 : PHANDLE,
    argument1 : PHANDLE,
    argument2 : LPSECURITY_ATTRIBUTES,
    argument3 : CULong) Int;

external (stdcall) CreatePrivateObjectSecurity(
    argument0 : PSECURITY_DESCRIPTOR,
    argument1 : PSECURITY_DESCRIPTOR,
    argument2 : Pointer[PSECURITY_DESCRIPTOR],
    argument3 : Int,
    argument4 : HANDLE,
    argument5 : PGENERIC_MAPPING) Int;

external (stdcall) CreateProcessA(
    argument0 : LPCSTR,
    argument1 : LPSTR,
    argument2 : LPSECURITY_ATTRIBUTES,
    argument3 : LPSECURITY_ATTRIBUTES,
    argument4 : Int,
    argument5 : CULong,
    argument6 : PVOID,
    argument7 : LPCSTR,
    argument8 : LPSTARTUPINFOA,
    argument9 : LPPROCESS_INFORMATION) Int;

external (stdcall) CreateProcessW(
    argument0 : LPCWSTR,
    argument1 : LPWSTR,
    argument2 : LPSECURITY_ATTRIBUTES,
    argument3 : LPSECURITY_ATTRIBUTES,
    argument4 : Int,
    argument5 : CULong,
    argument6 : PVOID,
    argument7 : LPCWSTR,
    argument8 : LPSTARTUPINFOW,
    argument9 : LPPROCESS_INFORMATION) Int;

external (stdcall) CreateProcessAsUserA(
    argument0 : HANDLE,
    argument1 : LPCSTR,
    argument2 : LPSTR,
    argument3 : LPSECURITY_ATTRIBUTES,
    argument4 : LPSECURITY_ATTRIBUTES,
    argument5 : Int,
    argument6 : CULong,
    argument7 : PVOID,
    argument8 : LPCSTR,
    argument9 : LPSTARTUPINFOA,
    argument10 : LPPROCESS_INFORMATION) Int;

external (stdcall) CreateProcessAsUserW(
    argument0 : HANDLE,
    argument1 : LPCWSTR,
    argument2 : LPWSTR,
    argument3 : LPSECURITY_ATTRIBUTES,
    argument4 : LPSECURITY_ATTRIBUTES,
    argument5 : Int,
    argument6 : CULong,
    argument7 : PVOID,
    argument8 : LPCWSTR,
    argument9 : LPSTARTUPINFOW,
    argument10 : LPPROCESS_INFORMATION) Int;

external (stdcall) CreateRemoteThread(
    argument0 : HANDLE,
    argument1 : LPSECURITY_ATTRIBUTES,
    argument2 : CULong,
    argument3 : LPTHREAD_START_ROUTINE,
    argument4 : LPVOID,
    argument5 : CULong,
    argument6 : LPDWORD) HANDLE;

external (stdcall) CreateSemaphoreA(
    argument0 : LPSECURITY_ATTRIBUTES,
    argument1 : CLong,
    argument2 : CLong,
    argument3 : LPCSTR) HANDLE;

external (stdcall) CreateSemaphoreW(
    argument0 : LPSECURITY_ATTRIBUTES,
    argument1 : CLong,
    argument2 : CLong,
    argument3 : LPCWSTR) HANDLE;

external (stdcall) CreateTapePartition(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong) CULong;

external (stdcall) CreateThread(
    argument0 : LPSECURITY_ATTRIBUTES,
    argument1 : CULong,
    argument2 : LPTHREAD_START_ROUTINE,
    argument3 : PVOID,
    argument4 : CULong,
    argument5 : PDWORD) HANDLE;

external (stdcall) CreateWaitableTimerA(
    argument0 : LPSECURITY_ATTRIBUTES,
    argument1 : Int,
    argument2 : LPCSTR) HANDLE;

external (stdcall) CreateWaitableTimerW(
    argument0 : LPSECURITY_ATTRIBUTES,
    argument1 : Int,
    argument2 : LPCWSTR) HANDLE;

external (stdcall) DebugActiveProcess(
    argument0 : CULong) Int;

external (stdcall) DebugBreak();

external (stdcall) DefineDosDeviceA(
    argument0 : CULong,
    argument1 : LPCSTR,
    argument2 : LPCSTR) Int;

external (stdcall) DefineDosDeviceW(
    argument0 : CULong,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR) Int;

external (stdcall) DeleteAce(
    argument0 : PACL,
    argument1 : CULong) Int;

external (stdcall) DeleteAtom(
    argument0 : UShort) UShort;

external (stdcall) DeleteCriticalSection(
    argument0 : PCRITICAL_SECTION);

external (stdcall) DeleteFiber(
    argument0 : PVOID);

external (stdcall) DeleteFileA(
    argument0 : LPCSTR) Int;

external (stdcall) DeleteFileW(
    argument0 : LPCWSTR) Int;

external (stdcall) DeregisterEventSource(
    argument0 : HANDLE) Int;

external (stdcall) DestroyPrivateObjectSecurity(
    argument0 : Pointer[PSECURITY_DESCRIPTOR]) Int;

external (stdcall) DeviceIoControl(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PVOID,
    argument3 : CULong,
    argument4 : PVOID,
    argument5 : CULong,
    argument6 : PDWORD,
    argument7 : POVERLAPPED) Int;

external (stdcall) DisableThreadLibraryCalls(
    argument0 : HMODULE) Int;

external (stdcall) DisconnectNamedPipe(
    argument0 : HANDLE) Int;

external (stdcall) DosDateTimeToFileTime(
    argument0 : UShort,
    argument1 : UShort,
    argument2 : LPFILETIME) Int;

external (stdcall) DuplicateHandle(
    argument0 : HANDLE,
    argument1 : HANDLE,
    argument2 : HANDLE,
    argument3 : PHANDLE,
    argument4 : CULong,
    argument5 : Int,
    argument6 : CULong) Int;

external (stdcall) DuplicateToken(
    argument0 : HANDLE,
    argument1 : SECURITY_IMPERSONATION_LEVEL,
    argument2 : PHANDLE) Int;

external (stdcall) DuplicateTokenEx(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : LPSECURITY_ATTRIBUTES,
    argument3 : SECURITY_IMPERSONATION_LEVEL,
    argument4 : TOKEN_TYPE,
    argument5 : PHANDLE) Int;

external (stdcall) EncryptFileA(
    argument0 : LPCSTR) Int;

external (stdcall) EncryptFileW(
    argument0 : LPCWSTR) Int;

external (stdcall) EndUpdateResourceA(
    argument0 : HANDLE,
    argument1 : Int) Int;

external (stdcall) EndUpdateResourceW(
    argument0 : HANDLE,
    argument1 : Int) Int;

external (stdcall) EnterCriticalSection(
    argument0 : LPCRITICAL_SECTION);

external (stdcall) EnumResourceLanguagesA(
    argument0 : HMODULE,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : ENUMRESLANGPROCA,
    argument4 : CLong) Int;

external (stdcall) EnumResourceLanguagesW(
    argument0 : HMODULE,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR,
    argument3 : ENUMRESLANGPROCW,
    argument4 : CLong) Int;

external (stdcall) EnumResourceNamesA(
    argument0 : HMODULE,
    argument1 : LPCSTR,
    argument2 : ENUMRESNAMEPROCA,
    argument3 : CLong) Int;

external (stdcall) EnumResourceNamesW(
    argument0 : HMODULE,
    argument1 : LPCWSTR,
    argument2 : ENUMRESNAMEPROCW,
    argument3 : CLong) Int;

external (stdcall) EnumResourceTypesA(
    argument0 : HMODULE,
    argument1 : ENUMRESTYPEPROCA,
    argument2 : CLong) Int;

external (stdcall) EnumResourceTypesW(
    argument0 : HMODULE,
    argument1 : ENUMRESTYPEPROCW,
    argument2 : CLong) Int;

external (stdcall) EqualPrefixSid(
    argument0 : PSID,
    argument1 : PSID) Int;

external (stdcall) EqualSid(
    argument0 : PSID,
    argument1 : PSID) Int;

external (stdcall) EraseTape(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : Int) CULong;

external (stdcall) EscapeCommFunction(
    argument0 : HANDLE,
    argument1 : CULong) Int;

external (stdcall) ExitProcess(
    argument0 : UInt);

external (stdcall) ExitThread(
    argument0 : CULong);

external (stdcall) ExpandEnvironmentStringsA(
    argument0 : LPCSTR,
    argument1 : LPSTR,
    argument2 : CULong) CULong;

external (stdcall) ExpandEnvironmentStringsW(
    argument0 : LPCWSTR,
    argument1 : LPWSTR,
    argument2 : CULong) CULong;

external (stdcall) FatalAppExitA(
    argument0 : UInt,
    argument1 : LPCSTR);

external (stdcall) FatalAppExitW(
    argument0 : UInt,
    argument1 : LPCWSTR);

external (stdcall) FatalExit(
    argument0 : Int);

external (stdcall) FileEncryptionStatusA(
    argument0 : LPCSTR,
    argument1 : LPDWORD) Int;

external (stdcall) FileEncryptionStatusW(
    argument0 : LPCWSTR,
    argument1 : LPDWORD) Int;

external (stdcall) FileTimeToDosDateTime(
    argument0 : Pointer[FILETIME],
    argument1 : LPWORD,
    argument2 : LPWORD) Int;

external (stdcall) FileTimeToLocalFileTime(
    argument0 : Pointer[FILETIME],
    argument1 : LPFILETIME) Int;

external (stdcall) FileTimeToSystemTime(
    argument0 : Pointer[FILETIME],
    argument1 : LPSYSTEMTIME) Int;

external (stdcall) FindAtomA(
    argument0 : LPCSTR) UShort;

external (stdcall) FindAtomW(
    argument0 : LPCWSTR) UShort;

external (stdcall) FindClose(
    argument0 : HANDLE) Int;

external (stdcall) FindCloseChangeNotification(
    argument0 : HANDLE) Int;

external (stdcall) FindFirstChangeNotificationA(
    argument0 : LPCSTR,
    argument1 : Int,
    argument2 : CULong) HANDLE;

external (stdcall) FindFirstChangeNotificationW(
    argument0 : LPCWSTR,
    argument1 : Int,
    argument2 : CULong) HANDLE;

external (stdcall) FindFirstFileA(
    argument0 : LPCSTR,
    argument1 : LPWIN32_FIND_DATAA) HANDLE;

external (stdcall) FindFirstFileW(
    argument0 : LPCWSTR,
    argument1 : LPWIN32_FIND_DATAW) HANDLE;

external (stdcall) FindFirstFileExA(
    argument0 : LPCSTR,
    argument1 : FINDEX_INFO_LEVELS,
    argument2 : PVOID,
    argument3 : FINDEX_SEARCH_OPS,
    argument4 : PVOID,
    argument5 : CULong) HANDLE;

external (stdcall) FindFirstFileExW(
    argument0 : LPCWSTR,
    argument1 : FINDEX_INFO_LEVELS,
    argument2 : PVOID,
    argument3 : FINDEX_SEARCH_OPS,
    argument4 : PVOID,
    argument5 : CULong) HANDLE;

external (stdcall) FindFirstFreeAce(
    argument0 : PACL,
    argument1 : Pointer[PVOID]) Int;

external (stdcall) FindNextChangeNotification(
    argument0 : HANDLE) Int;

external (stdcall) FindNextFileA(
    argument0 : HANDLE,
    argument1 : LPWIN32_FIND_DATAA) Int;

external (stdcall) FindNextFileW(
    argument0 : HANDLE,
    argument1 : LPWIN32_FIND_DATAW) Int;

external (stdcall) FindResourceA(
    argument0 : HMODULE,
    argument1 : LPCSTR,
    argument2 : LPCSTR) HRSRC;

external (stdcall) FindResourceW(
    argument0 : HINSTANCE,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR) HRSRC;

external (stdcall) FindResourceExA(
    argument0 : HINSTANCE,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : UShort) HRSRC;

external (stdcall) FindResourceExW(
    argument0 : HINSTANCE,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR,
    argument3 : UShort) HRSRC;

external (stdcall) FlushFileBuffers(
    argument0 : HANDLE) Int;

external (stdcall) FlushInstructionCache(
    argument0 : HANDLE,
    argument1 : PCVOID,
    argument2 : CULong) Int;

external (stdcall) FlushViewOfFile(
    argument0 : PCVOID,
    argument1 : CULong) Int;

external (stdcall) FormatMessageA(
    argument0 : CULong,
    argument1 : PCVOID,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : LPSTR,
    argument5 : CULong,
    argument6 : Pointer[va_list]) CULong;

external (stdcall) FormatMessageW(
    argument0 : CULong,
    argument1 : PCVOID,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : LPWSTR,
    argument5 : CULong,
    argument6 : Pointer[va_list]) CULong;

external (stdcall) FreeEnvironmentStringsA(
    argument0 : LPSTR) Int;

external (stdcall) FreeEnvironmentStringsW(
    argument0 : LPWSTR) Int;

external (stdcall) FreeLibrary(
    argument0 : HMODULE) Int;

external (stdcall) FreeLibraryAndExitThread(
    argument0 : HMODULE,
    argument1 : CULong);

external (stdcall) FreeResource(
    argument0 : HGLOBAL) Int;

external (stdcall) FreeSid(
    argument0 : PSID) PVOID;

external (stdcall) GetAce(
    argument0 : PACL,
    argument1 : CULong,
    argument2 : Pointer[LPVOID]) Int;

external (stdcall) GetAclInformation(
    argument0 : PACL,
    argument1 : PVOID,
    argument2 : CULong,
    argument3 : ACL_INFORMATION_CLASS) Int;

external (stdcall) GetAtomNameA(
    argument0 : UShort,
    argument1 : LPSTR,
    argument2 : Int) UInt;

external (stdcall) GetAtomNameW(
    argument0 : UShort,
    argument1 : LPWSTR,
    argument2 : Int) UInt;

external (stdcall) GetBinaryTypeA(
    argument0 : LPCSTR,
    argument1 : PDWORD) Int;

external (stdcall) GetBinaryTypeW(
    argument0 : LPCWSTR,
    argument1 : PDWORD) Int;

external (stdcall) GetCommandLineA() LPSTR;

external (stdcall) GetCommandLineW() LPWSTR;

external (stdcall) GetCommConfig(
    argument0 : HANDLE,
    argument1 : LPCOMMCONFIG,
    argument2 : PDWORD) Int;

external (stdcall) GetCommMask(
    argument0 : HANDLE,
    argument1 : PDWORD) Int;

external (stdcall) GetCommModemStatus(
    argument0 : HANDLE,
    argument1 : PDWORD) Int;

external (stdcall) GetCommProperties(
    argument0 : HANDLE,
    argument1 : LPCOMMPROP) Int;

external (stdcall) GetCommState(
    argument0 : HANDLE,
    argument1 : LPDCB) Int;

external (stdcall) GetCommTimeouts(
    argument0 : HANDLE,
    argument1 : LPCOMMTIMEOUTS) Int;

external (stdcall) GetCompressedFileSizeA(
    argument0 : LPCSTR,
    argument1 : PDWORD) CULong;

external (stdcall) GetCompressedFileSizeW(
    argument0 : LPCWSTR,
    argument1 : PDWORD) CULong;

external (stdcall) GetComputerNameA(
    argument0 : LPSTR,
    argument1 : PDWORD) Int;

external (stdcall) GetComputerNameW(
    argument0 : LPWSTR,
    argument1 : PDWORD) Int;

external (stdcall) GetCurrentDirectoryA(
    argument0 : CULong,
    argument1 : LPSTR) CULong;

external (stdcall) GetCurrentDirectoryW(
    argument0 : CULong,
    argument1 : LPWSTR) CULong;

external (stdcall) GetCurrentHwProfileA(
    argument0 : LPHW_PROFILE_INFOA) Int;

external (stdcall) GetCurrentHwProfileW(
    argument0 : LPHW_PROFILE_INFOW) Int;

external (stdcall) GetCurrentProcess() HANDLE;

external (stdcall) GetCurrentProcessId() CULong;

external (stdcall) GetCurrentThread() HANDLE;

external (stdcall) GetCurrentThreadId() CULong;

external (stdcall) GetDefaultCommConfigA(
    argument0 : LPCSTR,
    argument1 : LPCOMMCONFIG,
    argument2 : PDWORD) Int;

external (stdcall) GetDefaultCommConfigW(
    argument0 : LPCWSTR,
    argument1 : LPCOMMCONFIG,
    argument2 : PDWORD) Int;

external (stdcall) GetDevicePowerState(
    argument0 : HANDLE,
    argument1 : Pointer[Int]) Int;

external (stdcall) GetDiskFreeSpaceA(
    argument0 : LPCSTR,
    argument1 : PDWORD,
    argument2 : PDWORD,
    argument3 : PDWORD,
    argument4 : PDWORD) Int;

external (stdcall) GetDiskFreeSpaceW(
    argument0 : LPCWSTR,
    argument1 : PDWORD,
    argument2 : PDWORD,
    argument3 : PDWORD,
    argument4 : PDWORD) Int;

external (stdcall) GetDiskFreeSpaceExA(
    argument0 : LPCSTR,
    argument1 : PULARGE_INTEGER,
    argument2 : PULARGE_INTEGER,
    argument3 : PULARGE_INTEGER) Int;

external (stdcall) GetDiskFreeSpaceExW(
    argument0 : LPCWSTR,
    argument1 : PULARGE_INTEGER,
    argument2 : PULARGE_INTEGER,
    argument3 : PULARGE_INTEGER) Int;

external (stdcall) GetDriveTypeA(
    argument0 : LPCSTR) UInt;

external (stdcall) GetDriveTypeW(
    argument0 : LPCWSTR) UInt;

external (stdcall) GetEnvironmentStrings() LPCH;

external (stdcall) GetEnvironmentStringsA() LPCH;

external (stdcall) GetEnvironmentStringsW() LPWCH;

external (stdcall) GetEnvironmentVariableA(
    argument0 : LPCSTR,
    argument1 : LPSTR,
    argument2 : CULong) CULong;

external (stdcall) GetEnvironmentVariableW(
    argument0 : LPCWSTR,
    argument1 : LPWSTR,
    argument2 : CULong) CULong;

external (stdcall) GetExitCodeProcess(
    argument0 : HANDLE,
    argument1 : PDWORD) Int;

external (stdcall) GetExitCodeThread(
    argument0 : HANDLE,
    argument1 : PDWORD) Int;

external (stdcall) GetFileAttributesA(
    argument0 : LPCSTR) CULong;

external (stdcall) GetFileAttributesW(
    argument0 : LPCWSTR) CULong;

external (stdcall) GetFileAttributesExA(
    argument0 : LPCSTR,
    argument1 : GET_FILEEX_INFO_LEVELS,
    argument2 : PVOID) Int;

external (stdcall) GetFileAttributesExW(
    argument0 : LPCWSTR,
    argument1 : GET_FILEEX_INFO_LEVELS,
    argument2 : PVOID) Int;

external (stdcall) GetFileInformationByHandle(
    argument0 : HANDLE,
    argument1 : LPBY_HANDLE_FILE_INFORMATION) Int;

external (stdcall) GetFileSecurityA(
    argument0 : LPCSTR,
    argument1 : CULong,
    argument2 : PSECURITY_DESCRIPTOR,
    argument3 : CULong,
    argument4 : PDWORD) Int;

external (stdcall) GetFileSecurityW(
    argument0 : LPCWSTR,
    argument1 : CULong,
    argument2 : PSECURITY_DESCRIPTOR,
    argument3 : CULong,
    argument4 : PDWORD) Int;

external (stdcall) GetFileSize(
    argument0 : HANDLE,
    argument1 : PDWORD) CULong;

external (stdcall) GetFileTime(
    argument0 : HANDLE,
    argument1 : LPFILETIME,
    argument2 : LPFILETIME,
    argument3 : LPFILETIME) Int;

external (stdcall) GetFileType(
    argument0 : HANDLE) CULong;

external (stdcall) GetFullPathNameA(
    argument0 : LPCSTR,
    argument1 : CULong,
    argument2 : LPSTR,
    argument3 : Pointer[LPSTR]) CULong;

external (stdcall) GetFullPathNameW(
    argument0 : LPCWSTR,
    argument1 : CULong,
    argument2 : LPWSTR,
    argument3 : Pointer[LPWSTR]) CULong;

external (stdcall) GetHandleInformation(
    argument0 : HANDLE,
    argument1 : PDWORD) Int;

external (stdcall) GetKernelObjectSecurity(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PSECURITY_DESCRIPTOR,
    argument3 : CULong,
    argument4 : PDWORD) Int;

external (stdcall) GetLastError() CULong;

external (stdcall) GetLengthSid(
    argument0 : PSID) CULong;

external (stdcall) GetLocalTime(
    argument0 : LPSYSTEMTIME);

external (stdcall) GetLogicalDrives() CULong;

external (stdcall) GetLogicalDriveStringsA(
    argument0 : CULong,
    argument1 : LPSTR) CULong;

external (stdcall) GetLogicalDriveStringsW(
    argument0 : CULong,
    argument1 : LPWSTR) CULong;

external (stdcall) GetMailslotInfo(
    argument0 : HANDLE,
    argument1 : PDWORD,
    argument2 : PDWORD,
    argument3 : PDWORD,
    argument4 : PDWORD) Int;

external (stdcall) GetModuleFileNameA(
    argument0 : HINSTANCE,
    argument1 : LPSTR,
    argument2 : CULong) CULong;

external (stdcall) GetModuleFileNameW(
    argument0 : HINSTANCE,
    argument1 : LPWSTR,
    argument2 : CULong) CULong;

external (stdcall) GetModuleHandleA(
    argument0 : LPCSTR) HMODULE;

external (stdcall) GetModuleHandleW(
    argument0 : LPCWSTR) HMODULE;

external (stdcall) GetNamedPipeHandleStateA(
    argument0 : HANDLE,
    argument1 : PDWORD,
    argument2 : PDWORD,
    argument3 : PDWORD,
    argument4 : PDWORD,
    argument5 : LPSTR,
    argument6 : CULong) Int;

external (stdcall) GetNamedPipeHandleStateW(
    argument0 : HANDLE,
    argument1 : PDWORD,
    argument2 : PDWORD,
    argument3 : PDWORD,
    argument4 : PDWORD,
    argument5 : LPWSTR,
    argument6 : CULong) Int;

external (stdcall) GetNamedPipeInfo(
    argument0 : HANDLE,
    argument1 : PDWORD,
    argument2 : PDWORD,
    argument3 : PDWORD,
    argument4 : PDWORD) Int;

external (stdcall) GetNumberOfEventLogRecords(
    argument0 : HANDLE,
    argument1 : PDWORD) Int;

external (stdcall) GetOldestEventLogRecord(
    argument0 : HANDLE,
    argument1 : PDWORD) Int;

external (stdcall) GetOverlappedResult(
    argument0 : HANDLE,
    argument1 : LPOVERLAPPED,
    argument2 : PDWORD,
    argument3 : Int) Int;

external (stdcall) GetPriorityClass(
    argument0 : HANDLE) CULong;

external (stdcall) GetPrivateObjectSecurity(
    argument0 : PSECURITY_DESCRIPTOR,
    argument1 : CULong,
    argument2 : PSECURITY_DESCRIPTOR,
    argument3 : CULong,
    argument4 : PDWORD) Int;

external (stdcall) GetPrivateProfileIntA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : Int,
    argument3 : LPCSTR) UInt;

external (stdcall) GetPrivateProfileIntW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : Int,
    argument3 : LPCWSTR) UInt;

external (stdcall) GetPrivateProfileSectionA(
    argument0 : LPCSTR,
    argument1 : LPSTR,
    argument2 : CULong,
    argument3 : LPCSTR) CULong;

external (stdcall) GetPrivateProfileSectionW(
    argument0 : LPCWSTR,
    argument1 : LPWSTR,
    argument2 : CULong,
    argument3 : LPCWSTR) CULong;

external (stdcall) GetPrivateProfileSectionNamesA(
    argument0 : LPSTR,
    argument1 : CULong,
    argument2 : LPCSTR) CULong;

external (stdcall) GetPrivateProfileSectionNamesW(
    argument0 : LPWSTR,
    argument1 : CULong,
    argument2 : LPCWSTR) CULong;

external (stdcall) GetPrivateProfileStringA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : LPSTR,
    argument4 : CULong,
    argument5 : LPCSTR) CULong;

external (stdcall) GetPrivateProfileStringW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR,
    argument3 : LPWSTR,
    argument4 : CULong,
    argument5 : LPCWSTR) CULong;

external (stdcall) GetPrivateProfileStructA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : LPVOID,
    argument3 : UInt,
    argument4 : LPCSTR) Int;

external (stdcall) GetPrivateProfileStructW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : LPVOID,
    argument3 : UInt,
    argument4 : LPCWSTR) Int;

external (stdcall) GetProcAddress(
    argument0 : HINSTANCE,
    argument1 : LPCSTR) FARPROC;

external (stdcall) GetProcessAffinityMask(
    argument0 : HANDLE,
    argument1 : PDWORD,
    argument2 : PDWORD) Int;

external (stdcall) GetProcessHeap() HANDLE;

external (stdcall) GetProcessHeaps(
    argument0 : CULong,
    argument1 : PHANDLE) CULong;

external (stdcall) GetProcessPriorityBoost(
    argument0 : HANDLE,
    argument1 : PBOOL) Int;

external (stdcall) GetProcessShutdownParameters(
    argument0 : PDWORD,
    argument1 : PDWORD) Int;

external (stdcall) GetProcessTimes(
    argument0 : HANDLE,
    argument1 : LPFILETIME,
    argument2 : LPFILETIME,
    argument3 : LPFILETIME,
    argument4 : LPFILETIME) Int;

external (stdcall) GetProcessVersion(
    argument0 : CULong) CULong;

external (stdcall) GetProcessWindowStation() HWINSTA;

external (stdcall) GetProcessWorkingSetSize(
    argument0 : HANDLE,
    argument1 : PSIZE_T,
    argument2 : PSIZE_T) Int;

external (stdcall) GetProfileIntA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : Int) UInt;

external (stdcall) GetProfileIntW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : Int) UInt;

external (stdcall) GetProfileSectionA(
    argument0 : LPCSTR,
    argument1 : LPSTR,
    argument2 : CULong) CULong;

external (stdcall) GetProfileSectionW(
    argument0 : LPCWSTR,
    argument1 : LPWSTR,
    argument2 : CULong) CULong;

external (stdcall) GetProfileStringA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : LPSTR,
    argument4 : CULong) CULong;

external (stdcall) GetProfileStringW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR,
    argument3 : LPWSTR,
    argument4 : CULong) CULong;

external (stdcall) GetQueuedCompletionStatus(
    argument0 : HANDLE,
    argument1 : PDWORD,
    argument2 : PULONG_PTR,
    argument3 : Pointer[LPOVERLAPPED],
    argument4 : CULong) Int;

external (stdcall) GetSecurityDescriptorControl(
    argument0 : PSECURITY_DESCRIPTOR,
    argument1 : PSECURITY_DESCRIPTOR_CONTROL,
    argument2 : PDWORD) Int;

external (stdcall) GetSecurityDescriptorDacl(
    argument0 : PSECURITY_DESCRIPTOR,
    argument1 : LPBOOL,
    argument2 : Pointer[PACL],
    argument3 : LPBOOL) Int;

external (stdcall) GetSecurityDescriptorGroup(
    argument0 : PSECURITY_DESCRIPTOR,
    argument1 : Pointer[PSID],
    argument2 : LPBOOL) Int;

external (stdcall) GetSecurityDescriptorLength(
    argument0 : PSECURITY_DESCRIPTOR) CULong;

external (stdcall) GetSecurityDescriptorOwner(
    argument0 : PSECURITY_DESCRIPTOR,
    argument1 : Pointer[PSID],
    argument2 : LPBOOL) Int;

external (stdcall) GetSecurityDescriptorSacl(
    argument0 : PSECURITY_DESCRIPTOR,
    argument1 : LPBOOL,
    argument2 : Pointer[PACL],
    argument3 : LPBOOL) Int;

external (stdcall) GetShortPathNameA(
    argument0 : LPCSTR,
    argument1 : LPSTR,
    argument2 : CULong) CULong;

external (stdcall) GetShortPathNameW(
    argument0 : LPCWSTR,
    argument1 : LPWSTR,
    argument2 : CULong) CULong;

external (stdcall) GetSidIdentifierAuthority(
    argument0 : PSID) PSID_IDENTIFIER_AUTHORITY;

external (stdcall) GetSidLengthRequired(
    argument0 : CUChar) CULong;

external (stdcall) GetSidSubAuthority(
    argument0 : PSID,
    argument1 : CULong) PDWORD;

external (stdcall) GetSidSubAuthorityCount(
    argument0 : PSID) PUCHAR;

external (stdcall) GetStartupInfoA(
    argument0 : LPSTARTUPINFOA);

external (stdcall) GetStartupInfoW(
    argument0 : LPSTARTUPINFOW);

external (stdcall) GetStdHandle(
    argument0 : CULong) HANDLE;

external (stdcall) GetSystemDirectoryA(
    argument0 : LPSTR,
    argument1 : UInt) UInt;

external (stdcall) GetSystemDirectoryW(
    argument0 : LPWSTR,
    argument1 : UInt) UInt;

external (stdcall) GetSystemInfo(
    argument0 : LPSYSTEM_INFO);

external (stdcall) GetSystemPowerStatus(
    argument0 : LPSYSTEM_POWER_STATUS) Int;

external (stdcall) GetSystemTime(
    argument0 : LPSYSTEMTIME);

external (stdcall) GetSystemTimeAdjustment(
    argument0 : PDWORD,
    argument1 : PDWORD,
    argument2 : PBOOL) Int;

external (stdcall) GetSystemTimeAsFileTime(
    argument0 : LPFILETIME);

external (stdcall) GetTapeParameters(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PDWORD,
    argument3 : PVOID) CULong;

external (stdcall) GetTapePosition(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PDWORD,
    argument3 : PDWORD,
    argument4 : PDWORD) CULong;

external (stdcall) GetTapeStatus(
    argument0 : HANDLE) CULong;

external (stdcall) GetTempFileNameA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : UInt,
    argument3 : LPSTR) UInt;

external (stdcall) GetTempFileNameW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : UInt,
    argument3 : LPWSTR) UInt;

external (stdcall) GetTempPathA(
    argument0 : CULong,
    argument1 : LPSTR) CULong;

external (stdcall) GetTempPathW(
    argument0 : CULong,
    argument1 : LPWSTR) CULong;

external (stdcall) GetThreadContext(
    argument0 : HANDLE,
    argument1 : LPCONTEXT) Int;

external (stdcall) GetThreadPriority(
    argument0 : HANDLE) Int;

external (stdcall) GetThreadPriorityBoost(
    argument0 : HANDLE,
    argument1 : PBOOL) Int;

external (stdcall) GetThreadSelectorEntry(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : LPLDT_ENTRY) Int;

external (stdcall) GetThreadTimes(
    argument0 : HANDLE,
    argument1 : LPFILETIME,
    argument2 : LPFILETIME,
    argument3 : LPFILETIME,
    argument4 : LPFILETIME) Int;

external (stdcall) GetTickCount() CULong;

external (stdcall) GetTimeZoneInformation(
    argument0 : LPTIME_ZONE_INFORMATION) CULong;

external (stdcall) GetTokenInformation(
    argument0 : HANDLE,
    argument1 : TOKEN_INFORMATION_CLASS,
    argument2 : PVOID,
    argument3 : CULong,
    argument4 : PDWORD) Int;

external (stdcall) GetUserNameA(
    argument0 : LPSTR,
    argument1 : PDWORD) Int;

external (stdcall) GetUserNameW(
    argument0 : LPWSTR,
    argument1 : PDWORD) Int;

external (stdcall) GetVersion() CULong;

external (stdcall) GetVersionExA(
    argument0 : LPOSVERSIONINFOA) Int;

external (stdcall) GetVersionExW(
    argument0 : LPOSVERSIONINFOW) Int;

external (stdcall) GetVolumeInformationA(
    argument0 : LPCSTR,
    argument1 : LPSTR,
    argument2 : CULong,
    argument3 : PDWORD,
    argument4 : PDWORD,
    argument5 : PDWORD,
    argument6 : LPSTR,
    argument7 : CULong) Int;

external (stdcall) GetVolumeInformationW(
    argument0 : LPCWSTR,
    argument1 : LPWSTR,
    argument2 : CULong,
    argument3 : PDWORD,
    argument4 : PDWORD,
    argument5 : PDWORD,
    argument6 : LPWSTR,
    argument7 : CULong) Int;

external (stdcall) GetWindowsDirectoryA(
    argument0 : LPSTR,
    argument1 : UInt) UInt;

external (stdcall) GetWindowsDirectoryW(
    argument0 : LPWSTR,
    argument1 : UInt) UInt;

external (stdcall) GetWindowThreadProcessId(
    argument0 : HWND,
    argument1 : PDWORD) CULong;

external (stdcall) GetWriteWatch(
    argument0 : CULong,
    argument1 : PVOID,
    argument2 : CULong,
    argument3 : Pointer[PVOID],
    argument4 : PULONG_PTR,
    argument5 : PULONG) UInt;

external (stdcall) GlobalAddAtomA(
    argument0 : LPCSTR) UShort;

external (stdcall) GlobalAddAtomW(
    argument0 : LPCWSTR) UShort;

external (stdcall) GlobalAlloc(
    argument0 : UInt,
    argument1 : CULong) HGLOBAL;

external (stdcall) GlobalCompact(
    argument0 : CULong) CULong;

external (stdcall) GlobalDeleteAtom(
    argument0 : UShort) UShort;

external (stdcall) GlobalFindAtomA(
    argument0 : LPCSTR) UShort;

external (stdcall) GlobalFindAtomW(
    argument0 : LPCWSTR) UShort;

external (stdcall) GlobalFix(
    argument0 : HGLOBAL);

external (stdcall) GlobalFlags(
    argument0 : HGLOBAL) UInt;

external (stdcall) GlobalFree(
    argument0 : HGLOBAL) HGLOBAL;

external (stdcall) GlobalGetAtomNameA(
    argument0 : UShort,
    argument1 : LPSTR,
    argument2 : Int) UInt;

external (stdcall) GlobalGetAtomNameW(
    argument0 : UShort,
    argument1 : LPWSTR,
    argument2 : Int) UInt;

external (stdcall) GlobalHandle(
    argument0 : PCVOID) HGLOBAL;

external (stdcall) GlobalLock(
    argument0 : HGLOBAL) LPVOID;

external (stdcall) GlobalMemoryStatus(
    argument0 : LPMEMORYSTATUS);

external (stdcall) GlobalReAlloc(
    argument0 : HGLOBAL,
    argument1 : CULong,
    argument2 : UInt) HGLOBAL;

external (stdcall) GlobalSize(
    argument0 : HGLOBAL) CULong;

external (stdcall) GlobalUnfix(
    argument0 : HGLOBAL);

external (stdcall) GlobalUnlock(
    argument0 : HGLOBAL) Int;

external (stdcall) GlobalUnWire(
    argument0 : HGLOBAL) Int;

external (stdcall) GlobalWire(
    argument0 : HGLOBAL) PVOID;

external (stdcall) HeapAlloc(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong) PVOID;

external (stdcall) HeapCompact(
    argument0 : HANDLE,
    argument1 : CULong) CULong;

external (stdcall) HeapCreate(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : CULong) HANDLE;

external (stdcall) HeapDestroy(
    argument0 : HANDLE) Int;

external (stdcall) HeapFree(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PVOID) Int;

external (stdcall) HeapLock(
    argument0 : HANDLE) Int;

external (stdcall) HeapReAlloc(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PVOID,
    argument3 : CULong) PVOID;

external (stdcall) HeapSize(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PCVOID) CULong;

external (stdcall) HeapUnlock(
    argument0 : HANDLE) Int;

external (stdcall) HeapValidate(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PCVOID) Int;

external (stdcall) HeapWalk(
    argument0 : HANDLE,
    argument1 : LPPROCESS_HEAP_ENTRY) Int;

external (stdcall) ImpersonateLoggedOnUser(
    argument0 : HANDLE) Int;

external (stdcall) ImpersonateNamedPipeClient(
    argument0 : HANDLE) Int;

external (stdcall) ImpersonateSelf(
    argument0 : SECURITY_IMPERSONATION_LEVEL) Int;

external (stdcall) InitAtomTable(
    argument0 : CULong) Int;

external (stdcall) InitializeAcl(
    argument0 : PACL,
    argument1 : CULong,
    argument2 : CULong) Int;

external (stdcall) InitializeCriticalSection(
    argument0 : LPCRITICAL_SECTION);

external (stdcall) InitializeCriticalSectionAndSpinCount(
    argument0 : LPCRITICAL_SECTION,
    argument1 : CULong) Int;

external (stdcall) SetCriticalSectionSpinCount(
    argument0 : LPCRITICAL_SECTION,
    argument1 : CULong) CULong;

external (stdcall) InitializeSecurityDescriptor(
    argument0 : PSECURITY_DESCRIPTOR,
    argument1 : CULong) Int;

external (stdcall) InitializeSid(
    argument0 : PSID,
    argument1 : PSID_IDENTIFIER_AUTHORITY,
    argument2 : CUChar) Int;

external (stdcall) InterlockedCompareExchange(
    argument0 : Pointer[CLong],
    argument1 : CLong,
    argument2 : CLong) CLong;

external (stdcall) InterlockedDecrement(
    argument0 : Pointer[CLong]) CLong;

external (stdcall) InterlockedExchange(
    argument0 : Pointer[CLong],
    argument1 : CLong) CLong;

external (stdcall) InterlockedExchangeAdd(
    argument0 : Pointer[CLong],
    argument1 : CLong) CLong;

external (stdcall) InterlockedIncrement(
    argument0 : Pointer[CLong]) CLong;

external (stdcall) IsBadCodePtr(
    argument0 : FARPROC) Int;

external (stdcall) IsBadHugeReadPtr(
    argument0 : PCVOID,
    argument1 : UInt) Int;

external (stdcall) IsBadHugeWritePtr(
    argument0 : PVOID,
    argument1 : UInt) Int;

external (stdcall) IsBadReadPtr(
    argument0 : PCVOID,
    argument1 : UInt) Int;

external (stdcall) IsBadStringPtrA(
    argument0 : LPCSTR,
    argument1 : UInt) Int;

external (stdcall) IsBadStringPtrW(
    argument0 : LPCWSTR,
    argument1 : UInt) Int;

external (stdcall) IsBadWritePtr(
    argument0 : PVOID,
    argument1 : UInt) Int;

external (stdcall) IsDebuggerPresent() Int;

external (stdcall) IsProcessorFeaturePresent(
    argument0 : CULong) Int;

external (stdcall) IsSystemResumeAutomatic() Int;

external (stdcall) IsTextUnicode(
    argument0 : PCVOID,
    argument1 : Int,
    argument2 : LPINT) Int;

external (stdcall) IsValidAcl(
    argument0 : PACL) Int;

external (stdcall) IsValidSecurityDescriptor(
    argument0 : PSECURITY_DESCRIPTOR) Int;

external (stdcall) IsValidSid(
    argument0 : PSID) Int;

external (stdcall) LeaveCriticalSection(
    argument0 : LPCRITICAL_SECTION);

external (stdcall) LoadLibraryA(
    argument0 : LPCSTR) HINSTANCE;

external (stdcall) LoadLibraryExA(
    argument0 : LPCSTR,
    argument1 : HANDLE,
    argument2 : CULong) HINSTANCE;

external (stdcall) LoadLibraryExW(
    argument0 : LPCWSTR,
    argument1 : HANDLE,
    argument2 : CULong) HINSTANCE;

external (stdcall) LoadLibraryW(
    argument0 : LPCWSTR) HINSTANCE;

external (stdcall) LoadModule(
    argument0 : LPCSTR,
    argument1 : PVOID) CULong;

external (stdcall) LoadResource(
    argument0 : HINSTANCE,
    argument1 : HRSRC) HGLOBAL;

external (stdcall) LocalAlloc(
    argument0 : UInt,
    argument1 : CULong) HLOCAL;

external (stdcall) LocalCompact(
    argument0 : UInt) CULong;

external LocalDiscard(
    argument0 : HLOCAL) HLOCAL;

external (stdcall) LocalFileTimeToFileTime(
    argument0 : Pointer[FILETIME],
    argument1 : LPFILETIME) Int;

external (stdcall) LocalFlags(
    argument0 : HLOCAL) UInt;

external (stdcall) LocalFree(
    argument0 : HLOCAL) HLOCAL;

external (stdcall) LocalHandle(
    argument0 : LPCVOID) HLOCAL;

external (stdcall) LocalLock(
    argument0 : HLOCAL) PVOID;

external (stdcall) LocalReAlloc(
    argument0 : HLOCAL,
    argument1 : CULong,
    argument2 : UInt) HLOCAL;

external (stdcall) LocalShrink(
    argument0 : HLOCAL,
    argument1 : UInt) CULong;

external (stdcall) LocalSize(
    argument0 : HLOCAL) UInt;

external (stdcall) LocalUnlock(
    argument0 : HLOCAL) Int;

external (stdcall) LockFile(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong) Int;

external (stdcall) LockFileEx(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : LPOVERLAPPED) Int;

external (stdcall) LockResource(
    argument0 : HGLOBAL) PVOID;

external (stdcall) LogonUserA(
    argument0 : LPSTR,
    argument1 : LPSTR,
    argument2 : LPSTR,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : PHANDLE) Int;

external (stdcall) LogonUserW(
    argument0 : LPWSTR,
    argument1 : LPWSTR,
    argument2 : LPWSTR,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : PHANDLE) Int;

external (stdcall) LookupAccountNameA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : PSID,
    argument3 : PDWORD,
    argument4 : LPSTR,
    argument5 : PDWORD,
    argument6 : PSID_NAME_USE) Int;

external (stdcall) LookupAccountNameW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : PSID,
    argument3 : PDWORD,
    argument4 : LPWSTR,
    argument5 : PDWORD,
    argument6 : PSID_NAME_USE) Int;

external (stdcall) LookupAccountSidA(
    argument0 : LPCSTR,
    argument1 : PSID,
    argument2 : LPSTR,
    argument3 : PDWORD,
    argument4 : LPSTR,
    argument5 : PDWORD,
    argument6 : PSID_NAME_USE) Int;

external (stdcall) LookupAccountSidW(
    argument0 : LPCWSTR,
    argument1 : PSID,
    argument2 : LPWSTR,
    argument3 : PDWORD,
    argument4 : LPWSTR,
    argument5 : PDWORD,
    argument6 : PSID_NAME_USE) Int;

external (stdcall) LookupPrivilegeDisplayNameA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : LPSTR,
    argument3 : PDWORD,
    argument4 : PDWORD) Int;

external (stdcall) LookupPrivilegeDisplayNameW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : LPWSTR,
    argument3 : PDWORD,
    argument4 : PDWORD) Int;

external (stdcall) LookupPrivilegeNameA(
    argument0 : LPCSTR,
    argument1 : PLUID,
    argument2 : LPSTR,
    argument3 : PDWORD) Int;

external (stdcall) LookupPrivilegeNameW(
    argument0 : LPCWSTR,
    argument1 : PLUID,
    argument2 : LPWSTR,
    argument3 : PDWORD) Int;

external (stdcall) LookupPrivilegeValueA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : PLUID) Int;

external (stdcall) LookupPrivilegeValueW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : PLUID) Int;

external (stdcall) lstrcatA(
    argument0 : LPSTR,
    argument1 : LPCSTR) LPSTR;

external (stdcall) lstrcatW(
    argument0 : LPWSTR,
    argument1 : LPCWSTR) LPWSTR;

external (stdcall) lstrcmpA(
    argument0 : LPCSTR,
    argument1 : LPCSTR) Int;

external (stdcall) lstrcmpiA(
    argument0 : LPCSTR,
    argument1 : LPCSTR) Int;

external (stdcall) lstrcmpiW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR) Int;

external (stdcall) lstrcmpW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR) Int;

external (stdcall) lstrcpyA(
    argument0 : LPSTR,
    argument1 : LPCSTR) LPSTR;

external (stdcall) lstrcpynA(
    argument0 : LPSTR,
    argument1 : LPCSTR,
    argument2 : Int) LPSTR;

external (stdcall) lstrcpynW(
    argument0 : LPWSTR,
    argument1 : LPCWSTR,
    argument2 : Int) LPWSTR;

external (stdcall) lstrcpyW(
    argument0 : LPWSTR,
    argument1 : LPCWSTR) LPWSTR;

external (stdcall) lstrlenA(
    argument0 : LPCSTR) Int;

external (stdcall) lstrlenW(
    argument0 : LPCWSTR) Int;

external (stdcall) MakeAbsoluteSD(
    argument0 : PSECURITY_DESCRIPTOR,
    argument1 : PSECURITY_DESCRIPTOR,
    argument2 : PDWORD,
    argument3 : PACL,
    argument4 : PDWORD,
    argument5 : PACL,
    argument6 : PDWORD,
    argument7 : PSID,
    argument8 : PDWORD,
    argument9 : PSID,
    argument10 : PDWORD) Int;

external (stdcall) MakeSelfRelativeSD(
    argument0 : PSECURITY_DESCRIPTOR,
    argument1 : PSECURITY_DESCRIPTOR,
    argument2 : PDWORD) Int;

external (stdcall) MapGenericMask(
    argument0 : PDWORD,
    argument1 : PGENERIC_MAPPING);

external (stdcall) MapViewOfFile(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong) PVOID;

external (stdcall) MapViewOfFileEx(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : PVOID) PVOID;

external (stdcall) MoveFileA(
    argument0 : LPCSTR,
    argument1 : LPCSTR) Int;

external (stdcall) MoveFileExA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : CULong) Int;

external (stdcall) MoveFileExW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : CULong) Int;

external (stdcall) MoveFileW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR) Int;

external (stdcall) MulDiv(
    argument0 : Int,
    argument1 : Int,
    argument2 : Int) Int;

external (stdcall) NotifyChangeEventLog(
    argument0 : HANDLE,
    argument1 : HANDLE) Int;

external (stdcall) ObjectCloseAuditAlarmA(
    argument0 : LPCSTR,
    argument1 : PVOID,
    argument2 : Int) Int;

external (stdcall) ObjectCloseAuditAlarmW(
    argument0 : LPCWSTR,
    argument1 : PVOID,
    argument2 : Int) Int;

external (stdcall) ObjectDeleteAuditAlarmA(
    argument0 : LPCSTR,
    argument1 : PVOID,
    argument2 : Int) Int;

external (stdcall) ObjectDeleteAuditAlarmW(
    argument0 : LPCWSTR,
    argument1 : PVOID,
    argument2 : Int) Int;

external (stdcall) ObjectOpenAuditAlarmA(
    argument0 : LPCSTR,
    argument1 : PVOID,
    argument2 : LPSTR,
    argument3 : LPSTR,
    argument4 : PSECURITY_DESCRIPTOR,
    argument5 : HANDLE,
    argument6 : CULong,
    argument7 : CULong,
    argument8 : PPRIVILEGE_SET,
    argument9 : Int,
    argument10 : Int,
    argument11 : PBOOL) Int;

external (stdcall) ObjectOpenAuditAlarmW(
    argument0 : LPCWSTR,
    argument1 : PVOID,
    argument2 : LPWSTR,
    argument3 : LPWSTR,
    argument4 : PSECURITY_DESCRIPTOR,
    argument5 : HANDLE,
    argument6 : CULong,
    argument7 : CULong,
    argument8 : PPRIVILEGE_SET,
    argument9 : Int,
    argument10 : Int,
    argument11 : PBOOL) Int;

external (stdcall) ObjectPrivilegeAuditAlarmA(
    argument0 : LPCSTR,
    argument1 : PVOID,
    argument2 : HANDLE,
    argument3 : CULong,
    argument4 : PPRIVILEGE_SET,
    argument5 : Int) Int;

external (stdcall) ObjectPrivilegeAuditAlarmW(
    argument0 : LPCWSTR,
    argument1 : PVOID,
    argument2 : HANDLE,
    argument3 : CULong,
    argument4 : PPRIVILEGE_SET,
    argument5 : Int) Int;

external (stdcall) OpenBackupEventLogA(
    argument0 : LPCSTR,
    argument1 : LPCSTR) HANDLE;

external (stdcall) OpenBackupEventLogW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR) HANDLE;

external (stdcall) OpenEventA(
    argument0 : CULong,
    argument1 : Int,
    argument2 : LPCSTR) HANDLE;

external (stdcall) OpenEventLogA(
    argument0 : LPCSTR,
    argument1 : LPCSTR) HANDLE;

external (stdcall) OpenEventLogW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR) HANDLE;

external (stdcall) OpenEventW(
    argument0 : CULong,
    argument1 : Int,
    argument2 : LPCWSTR) HANDLE;

external (stdcall) OpenFile(
    argument0 : LPCSTR,
    argument1 : LPOFSTRUCT,
    argument2 : UInt) Int;

external (stdcall) OpenFileMappingA(
    argument0 : CULong,
    argument1 : Int,
    argument2 : LPCSTR) HANDLE;

external (stdcall) OpenFileMappingW(
    argument0 : CULong,
    argument1 : Int,
    argument2 : LPCWSTR) HANDLE;

external (stdcall) OpenMutexA(
    argument0 : CULong,
    argument1 : Int,
    argument2 : LPCSTR) HANDLE;

external (stdcall) OpenMutexW(
    argument0 : CULong,
    argument1 : Int,
    argument2 : LPCWSTR) HANDLE;

external (stdcall) OpenProcess(
    argument0 : CULong,
    argument1 : Int,
    argument2 : CULong) HANDLE;

external (stdcall) OpenProcessToken(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PHANDLE) Int;

external (stdcall) OpenSemaphoreA(
    argument0 : CULong,
    argument1 : Int,
    argument2 : LPCSTR) HANDLE;

external (stdcall) OpenSemaphoreW(
    argument0 : CULong,
    argument1 : Int,
    argument2 : LPCWSTR) HANDLE;

external (stdcall) OpenThreadToken(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : Int,
    argument3 : PHANDLE) Int;

external (stdcall) OpenWaitableTimerA(
    argument0 : CULong,
    argument1 : Int,
    argument2 : LPCSTR) HANDLE;

external (stdcall) OpenWaitableTimerW(
    argument0 : CULong,
    argument1 : Int,
    argument2 : LPCWSTR) HANDLE;

external (stdcall) OutputDebugStringA(
    argument0 : LPCSTR);

external (stdcall) OutputDebugStringW(
    argument0 : LPCWSTR);

external (stdcall) PeekNamedPipe(
    argument0 : HANDLE,
    argument1 : PVOID,
    argument2 : CULong,
    argument3 : PDWORD,
    argument4 : PDWORD,
    argument5 : PDWORD) Int;

external (stdcall) PostQueuedCompletionStatus(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPOVERLAPPED) Int;

external (stdcall) PrepareTape(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : Int) CULong;

external (stdcall) PrivilegeCheck(
    argument0 : HANDLE,
    argument1 : PPRIVILEGE_SET,
    argument2 : PBOOL) Int;

external (stdcall) PrivilegedServiceAuditAlarmA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : HANDLE,
    argument3 : PPRIVILEGE_SET,
    argument4 : Int) Int;

external (stdcall) PrivilegedServiceAuditAlarmW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : HANDLE,
    argument3 : PPRIVILEGE_SET,
    argument4 : Int) Int;

external (stdcall) PulseEvent(
    argument0 : HANDLE) Int;

external (stdcall) PurgeComm(
    argument0 : HANDLE,
    argument1 : CULong) Int;

external (stdcall) QueryDosDeviceA(
    argument0 : LPCSTR,
    argument1 : LPSTR,
    argument2 : CULong) CULong;

external (stdcall) QueryDosDeviceW(
    argument0 : LPCWSTR,
    argument1 : LPWSTR,
    argument2 : CULong) CULong;

external (stdcall) QueryPerformanceCounter(
    argument0 : PLARGE_INTEGER) Int;

external (stdcall) QueryPerformanceFrequency(
    argument0 : PLARGE_INTEGER) Int;

external (stdcall) QueueUserAPC(
    argument0 : PAPCFUNC,
    argument1 : HANDLE,
    argument2 : CULong) CULong;

external (stdcall) RaiseException(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[CULong]);

external (stdcall) ReadDirectoryChangesW(
    argument0 : HANDLE,
    argument1 : PVOID,
    argument2 : CULong,
    argument3 : Int,
    argument4 : CULong,
    argument5 : PDWORD,
    argument6 : LPOVERLAPPED,
    argument7 : LPOVERLAPPED_COMPLETION_ROUTINE) Int;

external (stdcall) ReadEventLogA(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : PVOID,
    argument4 : CULong,
    argument5 : Pointer[CULong],
    argument6 : Pointer[CULong]) Int;

external (stdcall) ReadEventLogW(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : PVOID,
    argument4 : CULong,
    argument5 : Pointer[CULong],
    argument6 : Pointer[CULong]) Int;

external (stdcall) ReadFile(
    argument0 : HANDLE,
    argument1 : PVOID,
    argument2 : CULong,
    argument3 : PDWORD,
    argument4 : LPOVERLAPPED) Int;

external (stdcall) ReadFileEx(
    argument0 : HANDLE,
    argument1 : PVOID,
    argument2 : CULong,
    argument3 : LPOVERLAPPED,
    argument4 : LPOVERLAPPED_COMPLETION_ROUTINE) Int;

external (stdcall) ReadFileScatter(
    argument0 : HANDLE,
    argument1 : Pointer[FILE_SEGMENT_ELEMENT],
    argument2 : CULong,
    argument3 : LPDWORD,
    argument4 : LPOVERLAPPED) Int;

external (stdcall) ReadProcessMemory(
    argument0 : HANDLE,
    argument1 : PCVOID,
    argument2 : PVOID,
    argument3 : CULong,
    argument4 : PDWORD) Int;

external (stdcall) RegisterEventSourceA(
    argument0 : LPCSTR,
    argument1 : LPCSTR) HANDLE;

external (stdcall) RegisterEventSourceW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR) HANDLE;

external (stdcall) ReleaseMutex(
    argument0 : HANDLE) Int;

external (stdcall) ReleaseSemaphore(
    argument0 : HANDLE,
    argument1 : CLong,
    argument2 : LPLONG) Int;

external (stdcall) RemoveDirectoryA(
    argument0 : LPCSTR) Int;

external (stdcall) RemoveDirectoryW(
    argument0 : LPCWSTR) Int;

external (stdcall) ReportEventA(
    argument0 : HANDLE,
    argument1 : UShort,
    argument2 : UShort,
    argument3 : CULong,
    argument4 : PSID,
    argument5 : UShort,
    argument6 : CULong,
    argument7 : Pointer[LPCSTR],
    argument8 : PVOID) Int;

external (stdcall) ReportEventW(
    argument0 : HANDLE,
    argument1 : UShort,
    argument2 : UShort,
    argument3 : CULong,
    argument4 : PSID,
    argument5 : UShort,
    argument6 : CULong,
    argument7 : Pointer[LPCWSTR],
    argument8 : PVOID) Int;

external (stdcall) ResetEvent(
    argument0 : HANDLE) Int;

external (stdcall) ResetWriteWatch(
    argument0 : LPVOID,
    argument1 : CULong) UInt;

external (stdcall) ResumeThread(
    argument0 : HANDLE) CULong;

external (stdcall) RevertToSelf() Int;

external (stdcall) SearchPathA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : CULong,
    argument4 : LPSTR,
    argument5 : Pointer[LPSTR]) CULong;

external (stdcall) SearchPathW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR,
    argument3 : CULong,
    argument4 : LPWSTR,
    argument5 : Pointer[LPWSTR]) CULong;

external (stdcall) SetAclInformation(
    argument0 : PACL,
    argument1 : PVOID,
    argument2 : CULong,
    argument3 : ACL_INFORMATION_CLASS) Int;

external (stdcall) SetCommBreak(
    argument0 : HANDLE) Int;

external (stdcall) SetCommConfig(
    argument0 : HANDLE,
    argument1 : LPCOMMCONFIG,
    argument2 : CULong) Int;

external (stdcall) SetCommMask(
    argument0 : HANDLE,
    argument1 : CULong) Int;

external (stdcall) SetCommState(
    argument0 : HANDLE,
    argument1 : LPDCB) Int;

external (stdcall) SetCommTimeouts(
    argument0 : HANDLE,
    argument1 : LPCOMMTIMEOUTS) Int;

external (stdcall) SetComputerNameA(
    argument0 : LPCSTR) Int;

external (stdcall) SetComputerNameW(
    argument0 : LPCWSTR) Int;

external (stdcall) SetCurrentDirectoryA(
    argument0 : LPCSTR) Int;

external (stdcall) SetCurrentDirectoryW(
    argument0 : LPCWSTR) Int;

external (stdcall) SetDefaultCommConfigA(
    argument0 : LPCSTR,
    argument1 : LPCOMMCONFIG,
    argument2 : CULong) Int;

external (stdcall) SetDefaultCommConfigW(
    argument0 : LPCWSTR,
    argument1 : LPCOMMCONFIG,
    argument2 : CULong) Int;

external (stdcall) SetEndOfFile(
    argument0 : HANDLE) Int;

external (stdcall) SetEnvironmentVariableA(
    argument0 : LPCSTR,
    argument1 : LPCSTR) Int;

external (stdcall) SetEnvironmentVariableW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR) Int;

external (stdcall) SetErrorMode(
    argument0 : UInt) UInt;

external (stdcall) SetEvent(
    argument0 : HANDLE) Int;

external (stdcall) SetFileApisToANSI();

external (stdcall) SetFileApisToOEM();

external (stdcall) SetFileAttributesA(
    argument0 : LPCSTR,
    argument1 : CULong) Int;

external (stdcall) SetFileAttributesW(
    argument0 : LPCWSTR,
    argument1 : CULong) Int;

external (stdcall) SetFilePointer(
    argument0 : HANDLE,
    argument1 : CLong,
    argument2 : PLONG,
    argument3 : CULong) CULong;

external (stdcall) SetFilePointerEx(
    argument0 : HANDLE,
    argument1 : LARGE_INTEGER,
    argument2 : PLARGE_INTEGER,
    argument3 : CULong) Int;

external (stdcall) SetFileSecurityA(
    argument0 : LPCSTR,
    argument1 : CULong,
    argument2 : PSECURITY_DESCRIPTOR) Int;

external (stdcall) SetFileSecurityW(
    argument0 : LPCWSTR,
    argument1 : CULong,
    argument2 : PSECURITY_DESCRIPTOR) Int;

external (stdcall) SetFileTime(
    argument0 : HANDLE,
    argument1 : Pointer[FILETIME],
    argument2 : Pointer[FILETIME],
    argument3 : Pointer[FILETIME]) Int;

external (stdcall) SetHandleCount(
    argument0 : UInt) UInt;

external (stdcall) SetHandleInformation(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong) Int;

external (stdcall) SetKernelObjectSecurity(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PSECURITY_DESCRIPTOR) Int;

external (stdcall) SetLastError(
    argument0 : CULong);

external (stdcall) SetLastErrorEx(
    argument0 : CULong,
    argument1 : CULong);

external (stdcall) SetLocalTime(
    argument0 : Pointer[SYSTEMTIME]) Int;

external (stdcall) SetMailslotInfo(
    argument0 : HANDLE,
    argument1 : CULong) Int;

external (stdcall) SetNamedPipeHandleState(
    argument0 : HANDLE,
    argument1 : PDWORD,
    argument2 : PDWORD,
    argument3 : PDWORD) Int;

external (stdcall) SetPriorityClass(
    argument0 : HANDLE,
    argument1 : CULong) Int;

external (stdcall) SetPrivateObjectSecurity(
    argument0 : CULong,
    argument1 : PSECURITY_DESCRIPTOR,
    argument2 : Pointer[PSECURITY_DESCRIPTOR],
    argument3 : PGENERIC_MAPPING,
    argument4 : HANDLE) Int;

external (stdcall) SetProcessAffinityMask(
    argument0 : HANDLE,
    argument1 : CULong) Int;

external (stdcall) SetProcessPriorityBoost(
    argument0 : HANDLE,
    argument1 : Int) Int;

external (stdcall) SetProcessShutdownParameters(
    argument0 : CULong,
    argument1 : CULong) Int;

external (stdcall) SetProcessWorkingSetSize(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong) Int;

external (stdcall) SetSecurityDescriptorControl(
    argument0 : PSECURITY_DESCRIPTOR,
    argument1 : UShort,
    argument2 : UShort) Int;

external (stdcall) SetSecurityDescriptorDacl(
    argument0 : PSECURITY_DESCRIPTOR,
    argument1 : Int,
    argument2 : PACL,
    argument3 : Int) Int;

external (stdcall) SetSecurityDescriptorGroup(
    argument0 : PSECURITY_DESCRIPTOR,
    argument1 : PSID,
    argument2 : Int) Int;

external (stdcall) SetSecurityDescriptorOwner(
    argument0 : PSECURITY_DESCRIPTOR,
    argument1 : PSID,
    argument2 : Int) Int;

external (stdcall) SetSecurityDescriptorSacl(
    argument0 : PSECURITY_DESCRIPTOR,
    argument1 : Int,
    argument2 : PACL,
    argument3 : Int) Int;

external (stdcall) SetStdHandle(
    argument0 : CULong,
    argument1 : HANDLE) Int;

external (stdcall) SetSystemPowerState(
    argument0 : Int,
    argument1 : Int) Int;

external (stdcall) SetSystemTime(
    argument0 : Pointer[SYSTEMTIME]) Int;

external (stdcall) SetSystemTimeAdjustment(
    argument0 : CULong,
    argument1 : Int) Int;

external (stdcall) SetTapeParameters(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PVOID) CULong;

external (stdcall) SetTapePosition(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : Int) CULong;

external (stdcall) SetThreadAffinityMask(
    argument0 : HANDLE,
    argument1 : CULong) CULong;

external (stdcall) SetThreadContext(
    argument0 : HANDLE,
    argument1 : Pointer[CONTEXT]) Int;

external (stdcall) SetThreadIdealProcessor(
    argument0 : HANDLE,
    argument1 : CULong) CULong;

external (stdcall) SetThreadPriority(
    argument0 : HANDLE,
    argument1 : Int) Int;

external (stdcall) SetThreadPriorityBoost(
    argument0 : HANDLE,
    argument1 : Int) Int;

external (stdcall) SetThreadToken(
    argument0 : PHANDLE,
    argument1 : HANDLE) Int;

external (stdcall) SetTimeZoneInformation(
    argument0 : Pointer[TIME_ZONE_INFORMATION]) Int;

external (stdcall) SetTokenInformation(
    argument0 : HANDLE,
    argument1 : TOKEN_INFORMATION_CLASS,
    argument2 : PVOID,
    argument3 : CULong) Int;

external (stdcall) SetUnhandledExceptionFilter(
    argument0 : LPTOP_LEVEL_EXCEPTION_FILTER) LPTOP_LEVEL_EXCEPTION_FILTER;

external (stdcall) SetupComm(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong) Int;

external (stdcall) SetVolumeLabelA(
    argument0 : LPCSTR,
    argument1 : LPCSTR) Int;

external (stdcall) SetVolumeLabelW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR) Int;

external (stdcall) SetWaitableTimer(
    argument0 : HANDLE,
    argument1 : Pointer[LARGE_INTEGER],
    argument2 : CLong,
    argument3 : PTIMERAPCROUTINE,
    argument4 : PVOID,
    argument5 : Int) Int;

external (stdcall) SignalObjectAndWait(
    argument0 : HANDLE,
    argument1 : HANDLE,
    argument2 : CULong,
    argument3 : Int) CULong;

external (stdcall) SizeofResource(
    argument0 : HINSTANCE,
    argument1 : HRSRC) CULong;

external (stdcall) Sleep(
    argument0 : CULong);

external (stdcall) SleepEx(
    argument0 : CULong,
    argument1 : Int) CULong;

external (stdcall) SuspendThread(
    argument0 : HANDLE) CULong;

external (stdcall) SwitchToFiber(
    argument0 : PVOID);

external (stdcall) SwitchToThread() Int;

external (stdcall) SystemTimeToFileTime(
    argument0 : Pointer[SYSTEMTIME],
    argument1 : LPFILETIME) Int;

external (stdcall) SystemTimeToTzSpecificLocalTime(
    argument0 : LPTIME_ZONE_INFORMATION,
    argument1 : LPSYSTEMTIME,
    argument2 : LPSYSTEMTIME) Int;

external (stdcall) TerminateProcess(
    argument0 : HANDLE,
    argument1 : UInt) Int;

external (stdcall) TerminateThread(
    argument0 : HANDLE,
    argument1 : CULong) Int;

external (stdcall) TlsAlloc() CULong;

external (stdcall) TlsFree(
    argument0 : CULong) Int;

external (stdcall) TlsGetValue(
    argument0 : CULong) PVOID;

external (stdcall) TlsSetValue(
    argument0 : CULong,
    argument1 : PVOID) Int;

external (stdcall) TransactNamedPipe(
    argument0 : HANDLE,
    argument1 : PVOID,
    argument2 : CULong,
    argument3 : PVOID,
    argument4 : CULong,
    argument5 : PDWORD,
    argument6 : LPOVERLAPPED) Int;

external (stdcall) TransmitCommChar(
    argument0 : HANDLE,
    argument1 : CChar) Int;

external (stdcall) TryEnterCriticalSection(
    argument0 : LPCRITICAL_SECTION) Int;

external (stdcall) UnhandledExceptionFilter(
    argument0 : LPEXCEPTION_POINTERS) CLong;

external (stdcall) UnlockFile(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong) Int;

external (stdcall) UnlockFileEx(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : LPOVERLAPPED) Int;

external (stdcall) UnmapViewOfFile(
    argument0 : LPCVOID) Int;

external (stdcall) UpdateResourceA(
    argument0 : HANDLE,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : UShort,
    argument4 : PVOID,
    argument5 : CULong) Int;

external (stdcall) UpdateResourceW(
    argument0 : HANDLE,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR,
    argument3 : UShort,
    argument4 : PVOID,
    argument5 : CULong) Int;

external (stdcall) VerifyVersionInfoA(
    argument0 : LPOSVERSIONINFOEXA,
    argument1 : CULong,
    argument2 : UInt64) Int;

external (stdcall) VerifyVersionInfoW(
    argument0 : LPOSVERSIONINFOEXW,
    argument1 : CULong,
    argument2 : UInt64) Int;

external (stdcall) VirtualAlloc(
    argument0 : PVOID,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong) PVOID;

external (stdcall) VirtualAllocEx(
    argument0 : HANDLE,
    argument1 : PVOID,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong) PVOID;

external (stdcall) VirtualFree(
    argument0 : PVOID,
    argument1 : CULong,
    argument2 : CULong) Int;

external (stdcall) VirtualFreeEx(
    argument0 : HANDLE,
    argument1 : PVOID,
    argument2 : CULong,
    argument3 : CULong) Int;

external (stdcall) VirtualLock(
    argument0 : PVOID,
    argument1 : CULong) Int;

external (stdcall) VirtualProtect(
    argument0 : PVOID,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : PDWORD) Int;

external (stdcall) VirtualProtectEx(
    argument0 : HANDLE,
    argument1 : PVOID,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : PDWORD) Int;

external (stdcall) VirtualQuery(
    argument0 : LPCVOID,
    argument1 : PMEMORY_BASIC_INFORMATION,
    argument2 : CULong) CULong;

external (stdcall) VirtualQueryEx(
    argument0 : HANDLE,
    argument1 : LPCVOID,
    argument2 : PMEMORY_BASIC_INFORMATION,
    argument3 : CULong) CULong;

external (stdcall) VirtualUnlock(
    argument0 : PVOID,
    argument1 : CULong) Int;

external (stdcall) WaitCommEvent(
    argument0 : HANDLE,
    argument1 : PDWORD,
    argument2 : LPOVERLAPPED) Int;

external (stdcall) WaitForDebugEvent(
    argument0 : LPDEBUG_EVENT,
    argument1 : CULong) Int;

external (stdcall) WaitForMultipleObjects(
    argument0 : CULong,
    argument1 : Pointer[HANDLE],
    argument2 : Int,
    argument3 : CULong) CULong;

external (stdcall) WaitForMultipleObjectsEx(
    argument0 : CULong,
    argument1 : Pointer[HANDLE],
    argument2 : Int,
    argument3 : CULong,
    argument4 : Int) CULong;

external (stdcall) WaitForSingleObject(
    argument0 : HANDLE,
    argument1 : CULong) CULong;

external (stdcall) WaitForSingleObjectEx(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : Int) CULong;

external (stdcall) WaitNamedPipeA(
    argument0 : LPCSTR,
    argument1 : CULong) Int;

external (stdcall) WaitNamedPipeW(
    argument0 : LPCWSTR,
    argument1 : CULong) Int;

external (stdcall) WinLoadTrustProvider(
    argument0 : Pointer[GUID]) Int;

external (stdcall) WriteFile(
    argument0 : HANDLE,
    argument1 : PCVOID,
    argument2 : CULong,
    argument3 : PDWORD,
    argument4 : LPOVERLAPPED) Int;

external (stdcall) WriteFileEx(
    argument0 : HANDLE,
    argument1 : PCVOID,
    argument2 : CULong,
    argument3 : LPOVERLAPPED,
    argument4 : LPOVERLAPPED_COMPLETION_ROUTINE) Int;

external (stdcall) WriteFileGather(
    argument0 : HANDLE,
    argument1 : Pointer[FILE_SEGMENT_ELEMENT],
    argument2 : CULong,
    argument3 : LPDWORD,
    argument4 : LPOVERLAPPED) Int;

external (stdcall) WritePrivateProfileSectionA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : LPCSTR) Int;

external (stdcall) WritePrivateProfileSectionW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR) Int;

external (stdcall) WritePrivateProfileStringA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : LPCSTR) Int;

external (stdcall) WritePrivateProfileStringW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR,
    argument3 : LPCWSTR) Int;

external (stdcall) WritePrivateProfileStructA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : LPVOID,
    argument3 : UInt,
    argument4 : LPCSTR) Int;

external (stdcall) WritePrivateProfileStructW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : LPVOID,
    argument3 : UInt,
    argument4 : LPCWSTR) Int;

external (stdcall) WriteProcessMemory(
    argument0 : HANDLE,
    argument1 : LPVOID,
    argument2 : LPCVOID,
    argument3 : CULong,
    argument4 : Pointer[CULong]) Int;

external (stdcall) WriteProfileSectionA(
    argument0 : LPCSTR,
    argument1 : LPCSTR) Int;

external (stdcall) WriteProfileSectionW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR) Int;

external (stdcall) WriteProfileStringA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : LPCSTR) Int;

external (stdcall) WriteProfileStringW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR) Int;

external (stdcall) WriteTapemark(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Int) CULong;

alias STARTUPINFO = STARTUPINFOA;

alias LPSTARTUPINFO = Pointer[STARTUPINFOA];

alias WIN32_FIND_DATA = WIN32_FIND_DATAA;

alias PWIN32_FIND_DATA = Pointer[WIN32_FIND_DATAA];

alias LPWIN32_FIND_DATA = Pointer[WIN32_FIND_DATAA];

alias HW_PROFILE_INFO = HW_PROFILE_INFOA;

alias LPHW_PROFILE_INFO = Pointer[HW_PROFILE_INFOA];

record Struct__ABC (
    abcA : Int,
    abcB : UInt,
    abcC : Int,
);

alias ABC = Struct__ABC;

alias LPABC = Pointer[Struct__ABC];

record Struct__ABCFLOAT (
    abcfA : Float,
    abcfB : Float,
    abcfC : Float,
);

alias ABCFLOAT = Struct__ABCFLOAT;

alias LPABCFLOAT = Pointer[Struct__ABCFLOAT];

record Struct_tagBITMAP (
    bmType : CLong,
    bmWidth : CLong,
    bmHeight : CLong,
    bmWidthBytes : CLong,
    bmPlanes : UShort,
    bmBitsPixel : UShort,
    bmBits : LPVOID,
);

alias BITMAP = Struct_tagBITMAP;

alias PBITMAP = Pointer[Struct_tagBITMAP];

alias LPBITMAP = Pointer[Struct_tagBITMAP];

record Struct_tagBITMAPCOREHEADER (
    bcSize : CULong,
    bcWidth : UShort,
    bcHeight : UShort,
    bcPlanes : UShort,
    bcBitCount : UShort,
);

alias BITMAPCOREHEADER = Struct_tagBITMAPCOREHEADER;

alias LPBITMAPCOREHEADER = Pointer[Struct_tagBITMAPCOREHEADER];

alias PBITMAPCOREHEADER = Pointer[Struct_tagBITMAPCOREHEADER];

record Struct_tagRGBTRIPLE (
    rgbtBlue : CUChar,
    rgbtGreen : CUChar,
    rgbtRed : CUChar,
);

alias RGBTRIPLE = Struct_tagRGBTRIPLE;

alias LPRGBTRIPLE = Pointer[Struct_tagRGBTRIPLE];

record Struct_tagBITMAPFILEHEADER (
    bfType : UShort,
    bfSize : CULong,
    bfReserved1 : UShort,
    bfReserved2 : UShort,
    bfOffBits : CULong,
);

alias BITMAPFILEHEADER = Struct_tagBITMAPFILEHEADER;

alias LPBITMAPFILEHEADER = Pointer[Struct_tagBITMAPFILEHEADER];

alias PBITMAPFILEHEADER = Pointer[Struct_tagBITMAPFILEHEADER];

record Struct__BITMAPCOREINFO (
    bmciHeader : BITMAPCOREHEADER,
    bmciColors : Array[RGBTRIPLE,1],
);

alias BITMAPCOREINFO = Struct__BITMAPCOREINFO;

alias LPBITMAPCOREINFO = Pointer[Struct__BITMAPCOREINFO];

alias PBITMAPCOREINFO = Pointer[Struct__BITMAPCOREINFO];

record Struct_tagBITMAPINFOHEADER (
    biSize : CULong,
    biWidth : CLong,
    biHeight : CLong,
    biPlanes : UShort,
    biBitCount : UShort,
    biCompression : CULong,
    biSizeImage : CULong,
    biXPelsPerMeter : CLong,
    biYPelsPerMeter : CLong,
    biClrUsed : CULong,
    biClrImportant : CULong,
);

alias BITMAPINFOHEADER = Struct_tagBITMAPINFOHEADER;

alias LPBITMAPINFOHEADER = Pointer[Struct_tagBITMAPINFOHEADER];

alias PBITMAPINFOHEADER = Pointer[Struct_tagBITMAPINFOHEADER];

record Struct_tagRGBQUAD (
    rgbBlue : CUChar,
    rgbGreen : CUChar,
    rgbRed : CUChar,
    rgbReserved : CUChar,
);

alias RGBQUAD = Struct_tagRGBQUAD;

alias LPRGBQUAD = Pointer[Struct_tagRGBQUAD];

record Struct_tagBITMAPINFO (
    bmiHeader : BITMAPINFOHEADER,
    bmiColors : Array[RGBQUAD,1],
);

alias BITMAPINFO = Struct_tagBITMAPINFO;

alias LPBITMAPINFO = Pointer[Struct_tagBITMAPINFO];

alias PBITMAPINFO = Pointer[Struct_tagBITMAPINFO];

alias FXPT16DOT16 = CLong;

alias LPFXPT16DOT16 = Pointer[CLong];

alias FXPT2DOT30 = CLong;

alias LPFXPT2DOT30 = Pointer[CLong];

record Struct_tagCIEXYZ (
    ciexyzX : CLong,
    ciexyzY : CLong,
    ciexyzZ : CLong,
);

alias CIEXYZ = Struct_tagCIEXYZ;

alias LPCIEXYZ = Pointer[Struct_tagCIEXYZ];

record Struct_tagCIEXYZTRIPLE (
    ciexyzRed : CIEXYZ,
    ciexyzGreen : CIEXYZ,
    ciexyzBlue : CIEXYZ,
);

alias CIEXYZTRIPLE = Struct_tagCIEXYZTRIPLE;

alias LPCIEXYZTRIPLE = Pointer[Struct_tagCIEXYZTRIPLE];

record UnnamedStruct3 (
    bV4Size : CULong,
    bV4Width : CLong,
    bV4Height : CLong,
    bV4Planes : UShort,
    bV4BitCount : UShort,
    bV4V4Compression : CULong,
    bV4SizeImage : CULong,
    bV4XPelsPerMeter : CLong,
    bV4YPelsPerMeter : CLong,
    bV4ClrUsed : CULong,
    bV4ClrImportant : CULong,
    bV4RedMask : CULong,
    bV4GreenMask : CULong,
    bV4BlueMask : CULong,
    bV4AlphaMask : CULong,
    bV4CSType : CULong,
    bV4Endpoints : CIEXYZTRIPLE,
    bV4GammaRed : CULong,
    bV4GammaGreen : CULong,
    bV4GammaBlue : CULong,
);

alias BITMAPV4HEADER = UnnamedStruct3;

alias LPBITMAPV4HEADER = Pointer[UnnamedStruct3];

alias PBITMAPV4HEADER = Pointer[UnnamedStruct3];

record UnnamedStruct4 (
    bV5Size : CULong,
    bV5Width : CLong,
    bV5Height : CLong,
    bV5Planes : UShort,
    bV5BitCount : UShort,
    bV5Compression : CULong,
    bV5SizeImage : CULong,
    bV5XPelsPerMeter : CLong,
    bV5YPelsPerMeter : CLong,
    bV5ClrUsed : CULong,
    bV5ClrImportant : CULong,
    bV5RedMask : CULong,
    bV5GreenMask : CULong,
    bV5BlueMask : CULong,
    bV5AlphaMask : CULong,
    bV5CSType : CULong,
    bV5Endpoints : CIEXYZTRIPLE,
    bV5GammaRed : CULong,
    bV5GammaGreen : CULong,
    bV5GammaBlue : CULong,
    bV5Intent : CULong,
    bV5ProfileData : CULong,
    bV5ProfileSize : CULong,
    bV5Reserved : CULong,
);

alias BITMAPV5HEADER = UnnamedStruct4;

alias LPBITMAPV5HEADER = Pointer[UnnamedStruct4];

alias PBITMAPV5HEADER = Pointer[UnnamedStruct4];

record Struct_tagFONTSIGNATURE (
    fsUsb : Array[CULong,4],
    fsCsb : Array[CULong,2],
);

alias FONTSIGNATURE = Struct_tagFONTSIGNATURE;

alias LPFONTSIGNATURE = Pointer[Struct_tagFONTSIGNATURE];

record UnnamedStruct5 (
    ciCharset : UInt,
    ciACP : UInt,
    fs : FONTSIGNATURE,
);

alias CHARSETINFO = UnnamedStruct5;

alias LPCHARSETINFO = Pointer[UnnamedStruct5];

record Struct_tagCOLORADJUSTMENT (
    caSize : UShort,
    caFlags : UShort,
    caIlluminantIndex : UShort,
    caRedGamma : UShort,
    caGreenGamma : UShort,
    caBlueGamma : UShort,
    caReferenceBlack : UShort,
    caReferenceWhite : UShort,
    caContrast : Short,
    caBrightness : Short,
    caColorfulness : Short,
    caRedGreenTint : Short,
);

alias COLORADJUSTMENT = Struct_tagCOLORADJUSTMENT;

alias LPCOLORADJUSTMENT = Pointer[Struct_tagCOLORADJUSTMENT];

record Struct__devicemodeA (
    dmDeviceName : Array[CUChar,32],
    dmSpecVersion : UShort,
    dmDriverVersion : UShort,
    dmSize : UShort,
    dmDriverExtra : UShort,
    dmFields : CULong,
    unnamed_field6 : AUnionType,
    dmColor : Short,
    dmDuplex : Short,
    dmYResolution : Short,
    dmTTOption : Short,
    dmCollate : Short,
    dmFormName : Array[CUChar,32],
    dmLogPixels : UShort,
    dmBitsPerPel : CULong,
    dmPelsWidth : CULong,
    dmPelsHeight : CULong,
    unnamed_field17 : AUnionType,
    dmDisplayFrequency : CULong,
    dmICMMethod : CULong,
    dmICMIntent : CULong,
    dmMediaType : CULong,
    dmDitherType : CULong,
    dmReserved1 : CULong,
    dmReserved2 : CULong,
    dmPanningWidth : CULong,
    dmPanningHeight : CULong,
);

alias DEVMODEA = Struct__devicemodeA;

alias LPDEVMODEA = Pointer[Struct__devicemodeA];

alias PDEVMODEA = Pointer[Struct__devicemodeA];

record Struct__devicemodeW (
    dmDeviceName : Array[UShort,32],
    dmSpecVersion : UShort,
    dmDriverVersion : UShort,
    dmSize : UShort,
    dmDriverExtra : UShort,
    dmFields : CULong,
    unnamed_field6 : AUnionType,
    dmColor : Short,
    dmDuplex : Short,
    dmYResolution : Short,
    dmTTOption : Short,
    dmCollate : Short,
    dmFormName : Array[UShort,32],
    dmLogPixels : UShort,
    dmBitsPerPel : CULong,
    dmPelsWidth : CULong,
    dmPelsHeight : CULong,
    unnamed_field17 : AUnionType,
    dmDisplayFrequency : CULong,
    dmICMMethod : CULong,
    dmICMIntent : CULong,
    dmMediaType : CULong,
    dmDitherType : CULong,
    dmReserved1 : CULong,
    dmReserved2 : CULong,
    dmPanningWidth : CULong,
    dmPanningHeight : CULong,
);

alias DEVMODEW = Struct__devicemodeW;

alias LPDEVMODEW = Pointer[Struct__devicemodeW];

alias PDEVMODEW = Pointer[Struct__devicemodeW];

record Struct_tagDIBSECTION (
    dsBm : BITMAP,
    dsBmih : BITMAPINFOHEADER,
    dsBitfields : Array[CULong,3],
    dshSection : HANDLE,
    dsOffset : CULong,
);

alias DIBSECTION = Struct_tagDIBSECTION;

record Struct__DOCINFOA (
    cbSize : Int,
    lpszDocName : LPCSTR,
    lpszOutput : LPCSTR,
    lpszDatatype : LPCSTR,
    fwType : CULong,
);

alias DOCINFOA = Struct__DOCINFOA;

alias LPDOCINFOA = Pointer[Struct__DOCINFOA];

record Struct__DOCINFOW (
    cbSize : Int,
    lpszDocName : LPCWSTR,
    lpszOutput : LPCWSTR,
    lpszDatatype : LPCWSTR,
    fwType : CULong,
);

alias DOCINFOW = Struct__DOCINFOW;

alias LPDOCINFOW = Pointer[Struct__DOCINFOW];

record Struct_tagEMR (
    iType : CULong,
    nSize : CULong,
);

alias EMR = Struct_tagEMR;

alias PEMR = Pointer[Struct_tagEMR];

record Struct_tagEMRANGLEARC (
    emr : EMR,
    ptlCenter : POINTL,
    nRadius : CULong,
    eStartAngle : Float,
    eSweepAngle : Float,
);

alias EMRANGLEARC = Struct_tagEMRANGLEARC;

alias PEMRANGLEARC = Pointer[Struct_tagEMRANGLEARC];

record Struct_tagEMRARC (
    emr : EMR,
    rclBox : RECTL,
    ptlStart : POINTL,
    ptlEnd : POINTL,
);

alias EMRARC = Struct_tagEMRARC;

alias PEMRARC = Pointer[Struct_tagEMRARC];

alias EMRARCTO = Struct_tagEMRARC;

alias PEMRARCTO = Pointer[Struct_tagEMRARC];

alias EMRCHORD = Struct_tagEMRARC;

alias PEMRCHORD = Pointer[Struct_tagEMRARC];

alias EMRPIE = Struct_tagEMRARC;

alias PEMRPIE = Pointer[Struct_tagEMRARC];

record Struct__XFORM (
    eM11 : Float,
    eM12 : Float,
    eM21 : Float,
    eM22 : Float,
    eDx : Float,
    eDy : Float,
);

alias XFORM = Struct__XFORM;

alias PXFORM = Pointer[Struct__XFORM];

alias LPXFORM = Pointer[Struct__XFORM];

record Struct_tagEMRBITBLT (
    emr : EMR,
    rclBounds : RECTL,
    xDest : CLong,
    yDest : CLong,
    cxDest : CLong,
    cyDest : CLong,
    dwRop : CULong,
    xSrc : CLong,
    ySrc : CLong,
    xformSrc : XFORM,
    crBkColorSrc : CULong,
    iUsageSrc : CULong,
    offBmiSrc : CULong,
    offBitsSrc : CULong,
    cbBitsSrc : CULong,
);

alias EMRBITBLT = Struct_tagEMRBITBLT;

alias PEMRBITBLT = Pointer[Struct_tagEMRBITBLT];

record Struct_tagLOGBRUSH (
    lbStyle : UInt,
    lbColor : CULong,
    lbHatch : CLong,
);

alias LOGBRUSH = Struct_tagLOGBRUSH;

alias PLOGBRUSH = Pointer[Struct_tagLOGBRUSH];

alias LPLOGBRUSH = Pointer[Struct_tagLOGBRUSH];

alias PATTERN = LOGBRUSH;

alias PPATTERN = Pointer[LOGBRUSH];

alias LPPATTERN = Pointer[LOGBRUSH];

record Struct_tagEMRCREATEBRUSHINDIRECT (
    emr : EMR,
    ihBrush : CULong,
    lb : LOGBRUSH,
);

alias EMRCREATEBRUSHINDIRECT = Struct_tagEMRCREATEBRUSHINDIRECT;

alias PEMRCREATEBRUSHINDIRECT = Pointer[Struct_tagEMRCREATEBRUSHINDIRECT];

alias LCSCSTYPE = CLong;

alias LCSGAMUTMATCH = CLong;

record Struct_tagLOGCOLORSPACEA (
    lcsSignature : CULong,
    lcsVersion : CULong,
    lcsSize : CULong,
    lcsCSType : CLong,
    lcsIntent : CLong,
    lcsEndpoints : CIEXYZTRIPLE,
    lcsGammaRed : CULong,
    lcsGammaGreen : CULong,
    lcsGammaBlue : CULong,
    lcsFilename : Array[CChar,260],
);

alias LOGCOLORSPACEA = Struct_tagLOGCOLORSPACEA;

alias LPLOGCOLORSPACEA = Pointer[Struct_tagLOGCOLORSPACEA];

record Struct_tagLOGCOLORSPACEW (
    lcsSignature : CULong,
    lcsVersion : CULong,
    lcsSize : CULong,
    lcsCSType : CLong,
    lcsIntent : CLong,
    lcsEndpoints : CIEXYZTRIPLE,
    lcsGammaRed : CULong,
    lcsGammaGreen : CULong,
    lcsGammaBlue : CULong,
    lcsFilename : Array[UShort,260],
);

alias LOGCOLORSPACEW = Struct_tagLOGCOLORSPACEW;

alias LPLOGCOLORSPACEW = Pointer[Struct_tagLOGCOLORSPACEW];

record Struct_tagEMRCREATECOLORSPACE (
    emr : EMR,
    ihCS : CULong,
    lcs : LOGCOLORSPACEW,
);

alias EMRCREATECOLORSPACE = Struct_tagEMRCREATECOLORSPACE;

alias PEMRCREATECOLORSPACE = Pointer[Struct_tagEMRCREATECOLORSPACE];

record Struct_tagEMRCREATEDIBPATTERNBRUSHPT (
    emr : EMR,
    ihBrush : CULong,
    iUsage : CULong,
    offBmi : CULong,
    cbBmi : CULong,
    offBits : CULong,
    cbBits : CULong,
);

alias EMRCREATEDIBPATTERNBRUSHPT = Struct_tagEMRCREATEDIBPATTERNBRUSHPT;

alias PEMRCREATEDIBPATTERNBRUSHPT = Pointer[Struct_tagEMRCREATEDIBPATTERNBRUSHPT];

record Struct_tagEMRCREATEMONOBRUSH (
    emr : EMR,
    ihBrush : CULong,
    iUsage : CULong,
    offBmi : CULong,
    cbBmi : CULong,
    offBits : CULong,
    cbBits : CULong,
);

alias EMRCREATEMONOBRUSH = Struct_tagEMRCREATEMONOBRUSH;

alias PEMRCREATEMONOBRUSH = Pointer[Struct_tagEMRCREATEMONOBRUSH];

record Struct_tagPALETTEENTRY (
    peRed : CUChar,
    peGreen : CUChar,
    peBlue : CUChar,
    peFlags : CUChar,
);

alias PALETTEENTRY = Struct_tagPALETTEENTRY;

alias LPPALETTEENTRY = Pointer[Struct_tagPALETTEENTRY];

alias PPALETTEENTRY = Pointer[Struct_tagPALETTEENTRY];

record Struct_tagLOGPALETTE (
    palVersion : UShort,
    palNumEntries : UShort,
    palPalEntry : Array[PALETTEENTRY,1],
);

alias LOGPALETTE = Struct_tagLOGPALETTE;

alias NPLOGPALETTE = Pointer[Struct_tagLOGPALETTE];

alias PLOGPALETTE = Pointer[Struct_tagLOGPALETTE];

alias LPLOGPALETTE = Pointer[Struct_tagLOGPALETTE];

record Struct_tagEMRCREATEPALETTE (
    emr : EMR,
    ihPal : CULong,
    lgpl : LOGPALETTE,
);

alias EMRCREATEPALETTE = Struct_tagEMRCREATEPALETTE;

alias PEMRCREATEPALETTE = Pointer[Struct_tagEMRCREATEPALETTE];

record Struct_tagLOGPEN (
    lopnStyle : UInt,
    lopnWidth : POINT,
    lopnColor : CULong,
);

alias LOGPEN = Struct_tagLOGPEN;

alias PLOGPEN = Pointer[Struct_tagLOGPEN];

alias LPLOGPEN = Pointer[Struct_tagLOGPEN];

record Struct_tagEMRCREATEPEN (
    emr : EMR,
    ihPen : CULong,
    lopn : LOGPEN,
);

alias EMRCREATEPEN = Struct_tagEMRCREATEPEN;

alias PEMRCREATEPEN = Pointer[Struct_tagEMRCREATEPEN];

record Struct_tagEMRELLIPSE (
    emr : EMR,
    rclBox : RECTL,
);

alias EMRELLIPSE = Struct_tagEMRELLIPSE;

alias PEMRELLIPSE = Pointer[Struct_tagEMRELLIPSE];

alias EMRRECTANGLE = Struct_tagEMRELLIPSE;

alias PEMRRECTANGLE = Pointer[Struct_tagEMRELLIPSE];

record Struct_tagEMREOF (
    emr : EMR,
    nPalEntries : CULong,
    offPalEntries : CULong,
    nSizeLast : CULong,
);

alias EMREOF = Struct_tagEMREOF;

alias PEMREOF = Pointer[Struct_tagEMREOF];

record Struct_tagEMREXCLUDECLIPRECT (
    emr : EMR,
    rclClip : RECTL,
);

alias EMREXCLUDECLIPRECT = Struct_tagEMREXCLUDECLIPRECT;

alias PEMREXCLUDECLIPRECT = Pointer[Struct_tagEMREXCLUDECLIPRECT];

alias EMRINTERSECTCLIPRECT = Struct_tagEMREXCLUDECLIPRECT;

alias PEMRINTERSECTCLIPRECT = Pointer[Struct_tagEMREXCLUDECLIPRECT];

record Struct_tagPANOSE (
    bFamilyType : CUChar,
    bSerifStyle : CUChar,
    bWeight : CUChar,
    bProportion : CUChar,
    bContrast : CUChar,
    bStrokeVariation : CUChar,
    bArmStyle : CUChar,
    bLetterform : CUChar,
    bMidline : CUChar,
    bXHeight : CUChar,
);

alias PANOSE = Struct_tagPANOSE;

record Struct_tagLOGFONTA (
    lfHeight : CLong,
    lfWidth : CLong,
    lfEscapement : CLong,
    lfOrientation : CLong,
    lfWeight : CLong,
    lfItalic : CUChar,
    lfUnderline : CUChar,
    lfStrikeOut : CUChar,
    lfCharSet : CUChar,
    lfOutPrecision : CUChar,
    lfClipPrecision : CUChar,
    lfQuality : CUChar,
    lfPitchAndFamily : CUChar,
    lfFaceName : Array[CChar,32],
);

alias LOGFONTA = Struct_tagLOGFONTA;

alias PLOGFONTA = Pointer[Struct_tagLOGFONTA];

alias LPLOGFONTA = Pointer[Struct_tagLOGFONTA];

record Struct_tagLOGFONTW (
    lfHeight : CLong,
    lfWidth : CLong,
    lfEscapement : CLong,
    lfOrientation : CLong,
    lfWeight : CLong,
    lfItalic : CUChar,
    lfUnderline : CUChar,
    lfStrikeOut : CUChar,
    lfCharSet : CUChar,
    lfOutPrecision : CUChar,
    lfClipPrecision : CUChar,
    lfQuality : CUChar,
    lfPitchAndFamily : CUChar,
    lfFaceName : Array[UShort,32],
);

alias LOGFONTW = Struct_tagLOGFONTW;

alias PLOGFONTW = Pointer[Struct_tagLOGFONTW];

alias LPLOGFONTW = Pointer[Struct_tagLOGFONTW];

record Struct_tagEXTLOGFONTA (
    elfLogFont : LOGFONTA,
    elfFullName : Array[CUChar,64],
    elfStyle : Array[CUChar,32],
    elfVersion : CULong,
    elfStyleSize : CULong,
    elfMatch : CULong,
    elfReserved : CULong,
    elfVendorId : Array[CUChar,4],
    elfCulture : CULong,
    elfPanose : PANOSE,
);

alias EXTLOGFONTA = Struct_tagEXTLOGFONTA;

alias PEXTLOGFONTA = Pointer[Struct_tagEXTLOGFONTA];

alias LPEXTLOGFONTA = Pointer[Struct_tagEXTLOGFONTA];

record Struct_tagEXTLOGFONTW (
    elfLogFont : LOGFONTW,
    elfFullName : Array[UShort,64],
    elfStyle : Array[UShort,32],
    elfVersion : CULong,
    elfStyleSize : CULong,
    elfMatch : CULong,
    elfReserved : CULong,
    elfVendorId : Array[CUChar,4],
    elfCulture : CULong,
    elfPanose : PANOSE,
);

alias EXTLOGFONTW = Struct_tagEXTLOGFONTW;

alias PEXTLOGFONTW = Pointer[Struct_tagEXTLOGFONTW];

alias LPEXTLOGFONTW = Pointer[Struct_tagEXTLOGFONTW];

record Struct_tagEMREXTCREATEFONTINDIRECTW (
    emr : EMR,
    ihFont : CULong,
    elfw : EXTLOGFONTW,
);

alias EMREXTCREATEFONTINDIRECTW = Struct_tagEMREXTCREATEFONTINDIRECTW;

alias PEMREXTCREATEFONTINDIRECTW = Pointer[Struct_tagEMREXTCREATEFONTINDIRECTW];

record Struct_tagEXTLOGPEN (
    elpPenStyle : UInt,
    elpWidth : UInt,
    elpBrushStyle : UInt,
    elpColor : CULong,
    elpHatch : CLong,
    elpNumEntries : CULong,
    elpStyleEntry : Array[CULong,1],
);

alias EXTLOGPEN = Struct_tagEXTLOGPEN;

alias PEXTLOGPEN = Pointer[Struct_tagEXTLOGPEN];

alias LPEXTLOGPEN = Pointer[Struct_tagEXTLOGPEN];

record Struct_tagEMREXTCREATEPEN (
    emr : EMR,
    ihPen : CULong,
    offBmi : CULong,
    cbBmi : CULong,
    offBits : CULong,
    cbBits : CULong,
    elp : EXTLOGPEN,
);

alias EMREXTCREATEPEN = Struct_tagEMREXTCREATEPEN;

alias PEMREXTCREATEPEN = Pointer[Struct_tagEMREXTCREATEPEN];

record Struct_tagEMREXTFLOODFILL (
    emr : EMR,
    ptlStart : POINTL,
    crColor : CULong,
    iMode : CULong,
);

alias EMREXTFLOODFILL = Struct_tagEMREXTFLOODFILL;

alias PEMREXTFLOODFILL = Pointer[Struct_tagEMREXTFLOODFILL];

record Struct_tagEMREXTSELECTCLIPRGN (
    emr : EMR,
    cbRgnData : CULong,
    iMode : CULong,
    RgnData : Array[CUChar,1],
);

alias EMREXTSELECTCLIPRGN = Struct_tagEMREXTSELECTCLIPRGN;

alias PEMREXTSELECTCLIPRGN = Pointer[Struct_tagEMREXTSELECTCLIPRGN];

record Struct_tagEMRTEXT (
    ptlReference : POINTL,
    nChars : CULong,
    offString : CULong,
    fOptions : CULong,
    rcl : RECTL,
    offDx : CULong,
);

alias EMRTEXT = Struct_tagEMRTEXT;

alias PEMRTEXT = Pointer[Struct_tagEMRTEXT];

record Struct_tagEMREXTTEXTOUTA (
    emr : EMR,
    rclBounds : RECTL,
    iGraphicsMode : CULong,
    exScale : Float,
    eyScale : Float,
    emrtext : EMRTEXT,
);

alias EMREXTTEXTOUTA = Struct_tagEMREXTTEXTOUTA;

alias PEMREXTTEXTOUTA = Pointer[Struct_tagEMREXTTEXTOUTA];

alias EMREXTTEXTOUTW = Struct_tagEMREXTTEXTOUTA;

alias PEMREXTTEXTOUTW = Pointer[Struct_tagEMREXTTEXTOUTA];

record Struct_tagEMRFILLPATH (
    emr : EMR,
    rclBounds : RECTL,
);

alias EMRFILLPATH = Struct_tagEMRFILLPATH;

alias PEMRFILLPATH = Pointer[Struct_tagEMRFILLPATH];

alias EMRSTROKEANDFILLPATH = Struct_tagEMRFILLPATH;

alias PEMRSTROKEANDFILLPATH = Pointer[Struct_tagEMRFILLPATH];

alias EMRSTROKEPATH = Struct_tagEMRFILLPATH;

alias PEMRSTROKEPATH = Pointer[Struct_tagEMRFILLPATH];

record Struct_tagEMRFILLRGN (
    emr : EMR,
    rclBounds : RECTL,
    cbRgnData : CULong,
    ihBrush : CULong,
    RgnData : Array[CUChar,1],
);

alias EMRFILLRGN = Struct_tagEMRFILLRGN;

alias PEMRFILLRGN = Pointer[Struct_tagEMRFILLRGN];

record Struct_tagEMRFORMAT (
    dSignature : CULong,
    nVersion : CULong,
    cbData : CULong,
    offData : CULong,
);

alias EMRFORMAT = Struct_tagEMRFORMAT;

record Struct_tagEMRFRAMERGN (
    emr : EMR,
    rclBounds : RECTL,
    cbRgnData : CULong,
    ihBrush : CULong,
    szlStroke : SIZEL,
    RgnData : Array[CUChar,1],
);

alias EMRFRAMERGN = Struct_tagEMRFRAMERGN;

alias PEMRFRAMERGN = Pointer[Struct_tagEMRFRAMERGN];

record Struct_tagEMRGDICOMMENT (
    emr : EMR,
    cbData : CULong,
    Data : Array[CUChar,1],
);

alias EMRGDICOMMENT = Struct_tagEMRGDICOMMENT;

alias PEMRGDICOMMENT = Pointer[Struct_tagEMRGDICOMMENT];

record Struct_tagEMRINVERTRGN (
    emr : EMR,
    rclBounds : RECTL,
    cbRgnData : CULong,
    RgnData : Array[CUChar,1],
);

alias EMRINVERTRGN = Struct_tagEMRINVERTRGN;

alias PEMRINVERTRGN = Pointer[Struct_tagEMRINVERTRGN];

alias EMRPAINTRGN = Struct_tagEMRINVERTRGN;

alias PEMRPAINTRGN = Pointer[Struct_tagEMRINVERTRGN];

record Struct_tagEMRLINETO (
    emr : EMR,
    ptl : POINTL,
);

alias EMRLINETO = Struct_tagEMRLINETO;

alias PEMRLINETO = Pointer[Struct_tagEMRLINETO];

alias EMRMOVETOEX = Struct_tagEMRLINETO;

alias PEMRMOVETOEX = Pointer[Struct_tagEMRLINETO];

record Struct_tagEMRMASKBLT (
    emr : EMR,
    rclBounds : RECTL,
    xDest : CLong,
    yDest : CLong,
    cxDest : CLong,
    cyDest : CLong,
    dwRop : CULong,
    xSrc : CLong,
    ySrc : CLong,
    xformSrc : XFORM,
    crBkColorSrc : CULong,
    iUsageSrc : CULong,
    offBmiSrc : CULong,
    cbBmiSrc : CULong,
    offBitsSrc : CULong,
    cbBitsSrc : CULong,
    xMask : CLong,
    yMask : CLong,
    iUsageMask : CULong,
    offBmiMask : CULong,
    cbBmiMask : CULong,
    offBitsMask : CULong,
    cbBitsMask : CULong,
);

alias EMRMASKBLT = Struct_tagEMRMASKBLT;

alias PEMRMASKBLT = Pointer[Struct_tagEMRMASKBLT];

record Struct_tagEMRMODIFYWORLDTRANSFORM (
    emr : EMR,
    xform : XFORM,
    iMode : CULong,
);

alias EMRMODIFYWORLDTRANSFORM = Struct_tagEMRMODIFYWORLDTRANSFORM;

alias PEMRMODIFYWORLDTRANSFORM = Pointer[Struct_tagEMRMODIFYWORLDTRANSFORM];

record Struct_tagEMROFFSETCLIPRGN (
    emr : EMR,
    ptlOffset : POINTL,
);

alias EMROFFSETCLIPRGN = Struct_tagEMROFFSETCLIPRGN;

alias PEMROFFSETCLIPRGN = Pointer[Struct_tagEMROFFSETCLIPRGN];

record Struct_tagEMRPLGBLT (
    emr : EMR,
    rclBounds : RECTL,
    aptlDest : Array[POINTL,3],
    xSrc : CLong,
    ySrc : CLong,
    cxSrc : CLong,
    cySrc : CLong,
    xformSrc : XFORM,
    crBkColorSrc : CULong,
    iUsageSrc : CULong,
    offBmiSrc : CULong,
    cbBmiSrc : CULong,
    offBitsSrc : CULong,
    cbBitsSrc : CULong,
    xMask : CLong,
    yMask : CLong,
    iUsageMask : CULong,
    offBmiMask : CULong,
    cbBmiMask : CULong,
    offBitsMask : CULong,
    cbBitsMask : CULong,
);

alias EMRPLGBLT = Struct_tagEMRPLGBLT;

alias PEMRPLGBLT = Pointer[Struct_tagEMRPLGBLT];

record Struct_tagEMRPOLYDRAW (
    emr : EMR,
    rclBounds : RECTL,
    cptl : CULong,
    aptl : Array[POINTL,1],
    abTypes : Array[CUChar,1],
);

alias EMRPOLYDRAW = Struct_tagEMRPOLYDRAW;

alias PEMRPOLYDRAW = Pointer[Struct_tagEMRPOLYDRAW];

record Struct_tagEMRPOLYDRAW16 (
    emr : EMR,
    rclBounds : RECTL,
    cpts : CULong,
    apts : Array[POINTS,1],
    abTypes : Array[CUChar,1],
);

alias EMRPOLYDRAW16 = Struct_tagEMRPOLYDRAW16;

alias PEMRPOLYDRAW16 = Pointer[Struct_tagEMRPOLYDRAW16];

record Struct_tagEMRPOLYLINE (
    emr : EMR,
    rclBounds : RECTL,
    cptl : CULong,
    aptl : Array[POINTL,1],
);

alias EMRPOLYLINE = Struct_tagEMRPOLYLINE;

alias PEMRPOLYLINE = Pointer[Struct_tagEMRPOLYLINE];

alias EMRPOLYBEZIER = Struct_tagEMRPOLYLINE;

alias PEMRPOLYBEZIER = Pointer[Struct_tagEMRPOLYLINE];

alias EMRPOLYGON = Struct_tagEMRPOLYLINE;

alias PEMRPOLYGON = Pointer[Struct_tagEMRPOLYLINE];

alias EMRPOLYBEZIERTO = Struct_tagEMRPOLYLINE;

alias PEMRPOLYBEZIERTO = Pointer[Struct_tagEMRPOLYLINE];

alias EMRPOLYLINETO = Struct_tagEMRPOLYLINE;

alias PEMRPOLYLINETO = Pointer[Struct_tagEMRPOLYLINE];

record Struct_tagEMRPOLYLINE16 (
    emr : EMR,
    rclBounds : RECTL,
    cpts : CULong,
    apts : Array[POINTL,1],
);

alias EMRPOLYLINE16 = Struct_tagEMRPOLYLINE16;

alias PEMRPOLYLINE16 = Pointer[Struct_tagEMRPOLYLINE16];

alias EMRPOLYBEZIER16 = Struct_tagEMRPOLYLINE16;

alias PEMRPOLYBEZIER16 = Pointer[Struct_tagEMRPOLYLINE16];

alias EMRPOLYGON16 = Struct_tagEMRPOLYLINE16;

alias PEMRPOLYGON16 = Pointer[Struct_tagEMRPOLYLINE16];

alias EMRPOLYBEZIERTO16 = Struct_tagEMRPOLYLINE16;

alias PEMRPOLYBEZIERTO16 = Pointer[Struct_tagEMRPOLYLINE16];

alias EMRPOLYLINETO16 = Struct_tagEMRPOLYLINE16;

alias PEMRPOLYLINETO16 = Pointer[Struct_tagEMRPOLYLINE16];

record Struct_tagEMRPOLYPOLYLINE (
    emr : EMR,
    rclBounds : RECTL,
    nPolys : CULong,
    cptl : CULong,
    aPolyCounts : Array[CULong,1],
    aptl : Array[POINTL,1],
);

alias EMRPOLYPOLYLINE = Struct_tagEMRPOLYPOLYLINE;

alias PEMRPOLYPOLYLINE = Pointer[Struct_tagEMRPOLYPOLYLINE];

alias EMRPOLYPOLYGON = Struct_tagEMRPOLYPOLYLINE;

alias PEMRPOLYPOLYGON = Pointer[Struct_tagEMRPOLYPOLYLINE];

record Struct_tagEMRPOLYPOLYLINE16 (
    emr : EMR,
    rclBounds : RECTL,
    nPolys : CULong,
    cpts : CULong,
    aPolyCounts : Array[CULong,1],
    apts : Array[POINTS,1],
);

alias EMRPOLYPOLYLINE16 = Struct_tagEMRPOLYPOLYLINE16;

alias PEMRPOLYPOLYLINE16 = Pointer[Struct_tagEMRPOLYPOLYLINE16];

alias EMRPOLYPOLYGON16 = Struct_tagEMRPOLYPOLYLINE16;

alias PEMRPOLYPOLYGON16 = Pointer[Struct_tagEMRPOLYPOLYLINE16];

record Struct_tagEMRPOLYTEXTOUTA (
    emr : EMR,
    rclBounds : RECTL,
    iGraphicsMode : CULong,
    exScale : Float,
    eyScale : Float,
    cStrings : CLong,
    aemrtext : Array[EMRTEXT,1],
);

alias EMRPOLYTEXTOUTA = Struct_tagEMRPOLYTEXTOUTA;

alias PEMRPOLYTEXTOUTA = Pointer[Struct_tagEMRPOLYTEXTOUTA];

alias EMRPOLYTEXTOUTW = Struct_tagEMRPOLYTEXTOUTA;

alias PEMRPOLYTEXTOUTW = Pointer[Struct_tagEMRPOLYTEXTOUTA];

record Struct_tagEMRRESIZEPALETTE (
    emr : EMR,
    ihPal : CULong,
    cEntries : CULong,
);

alias EMRRESIZEPALETTE = Struct_tagEMRRESIZEPALETTE;

alias PEMRRESIZEPALETTE = Pointer[Struct_tagEMRRESIZEPALETTE];

record Struct_tagEMRRESTOREDC (
    emr : EMR,
    iRelative : CLong,
);

alias EMRRESTOREDC = Struct_tagEMRRESTOREDC;

alias PEMRRESTOREDC = Pointer[Struct_tagEMRRESTOREDC];

record Struct_tagEMRROUNDRECT (
    emr : EMR,
    rclBox : RECTL,
    szlCorner : SIZEL,
);

alias EMRROUNDRECT = Struct_tagEMRROUNDRECT;

alias PEMRROUNDRECT = Pointer[Struct_tagEMRROUNDRECT];

record Struct_tagEMRSCALEVIEWPORTEXTEX (
    emr : EMR,
    xNum : CLong,
    xDenom : CLong,
    yNum : CLong,
    yDenom : CLong,
);

alias EMRSCALEVIEWPORTEXTEX = Struct_tagEMRSCALEVIEWPORTEXTEX;

alias PEMRSCALEVIEWPORTEXTEX = Pointer[Struct_tagEMRSCALEVIEWPORTEXTEX];

alias EMRSCALEWINDOWEXTEX = Struct_tagEMRSCALEVIEWPORTEXTEX;

alias PEMRSCALEWINDOWEXTEX = Pointer[Struct_tagEMRSCALEVIEWPORTEXTEX];

record Struct_tagEMRSELECTCOLORSPACE (
    emr : EMR,
    ihCS : CULong,
);

alias EMRSELECTCOLORSPACE = Struct_tagEMRSELECTCOLORSPACE;

alias PEMRSELECTCOLORSPACE = Pointer[Struct_tagEMRSELECTCOLORSPACE];

alias EMRDELETECOLORSPACE = Struct_tagEMRSELECTCOLORSPACE;

alias PEMRDELETECOLORSPACE = Pointer[Struct_tagEMRSELECTCOLORSPACE];

record Struct_tagEMRSELECTOBJECT (
    emr : EMR,
    ihObject : CULong,
);

alias EMRSELECTOBJECT = Struct_tagEMRSELECTOBJECT;

alias PEMRSELECTOBJECT = Pointer[Struct_tagEMRSELECTOBJECT];

alias EMRDELETEOBJECT = Struct_tagEMRSELECTOBJECT;

alias PEMRDELETEOBJECT = Pointer[Struct_tagEMRSELECTOBJECT];

record Struct_tagEMRSELECTPALETTE (
    emr : EMR,
    ihPal : CULong,
);

alias EMRSELECTPALETTE = Struct_tagEMRSELECTPALETTE;

alias PEMRSELECTPALETTE = Pointer[Struct_tagEMRSELECTPALETTE];

record Struct_tagEMRSETARCDIRECTION (
    emr : EMR,
    iArcDirection : CULong,
);

alias EMRSETARCDIRECTION = Struct_tagEMRSETARCDIRECTION;

alias PEMRSETARCDIRECTION = Pointer[Struct_tagEMRSETARCDIRECTION];

record Struct_tagEMRSETTEXTCOLOR (
    emr : EMR,
    crColor : CULong,
);

alias EMRSETBKCOLOR = Struct_tagEMRSETTEXTCOLOR;

alias PEMRSETBKCOLOR = Pointer[Struct_tagEMRSETTEXTCOLOR];

alias EMRSETTEXTCOLOR = Struct_tagEMRSETTEXTCOLOR;

alias PEMRSETTEXTCOLOR = Pointer[Struct_tagEMRSETTEXTCOLOR];

record Struct_tagEMRSETCOLORADJUSTMENT (
    emr : EMR,
    ColorAdjustment : COLORADJUSTMENT,
);

alias EMRSETCOLORADJUSTMENT = Struct_tagEMRSETCOLORADJUSTMENT;

alias PEMRSETCOLORADJUSTMENT = Pointer[Struct_tagEMRSETCOLORADJUSTMENT];

record Struct_tagEMRSETDIBITSTODEVICE (
    emr : EMR,
    rclBounds : RECTL,
    xDest : CLong,
    yDest : CLong,
    xSrc : CLong,
    ySrc : CLong,
    cxSrc : CLong,
    cySrc : CLong,
    offBmiSrc : CULong,
    cbBmiSrc : CULong,
    offBitsSrc : CULong,
    cbBitsSrc : CULong,
    iUsageSrc : CULong,
    iStartScan : CULong,
    cScans : CULong,
);

alias EMRSETDIBITSTODEVICE = Struct_tagEMRSETDIBITSTODEVICE;

alias PEMRSETDIBITSTODEVICE = Pointer[Struct_tagEMRSETDIBITSTODEVICE];

record Struct_tagEMRSETMAPPERFLAGS (
    emr : EMR,
    dwFlags : CULong,
);

alias EMRSETMAPPERFLAGS = Struct_tagEMRSETMAPPERFLAGS;

alias PEMRSETMAPPERFLAGS = Pointer[Struct_tagEMRSETMAPPERFLAGS];

record Struct_tagEMRSETMITERLIMIT (
    emr : EMR,
    eMiterLimit : Float,
);

alias EMRSETMITERLIMIT = Struct_tagEMRSETMITERLIMIT;

alias PEMRSETMITERLIMIT = Pointer[Struct_tagEMRSETMITERLIMIT];

record Struct_tagEMRSETPALETTEENTRIES (
    emr : EMR,
    ihPal : CULong,
    iStart : CULong,
    cEntries : CULong,
    aPalEntries : Array[PALETTEENTRY,1],
);

alias EMRSETPALETTEENTRIES = Struct_tagEMRSETPALETTEENTRIES;

alias PEMRSETPALETTEENTRIES = Pointer[Struct_tagEMRSETPALETTEENTRIES];

record Struct_tagEMRSETPIXELV (
    emr : EMR,
    ptlPixel : POINTL,
    crColor : CULong,
);

alias EMRSETPIXELV = Struct_tagEMRSETPIXELV;

alias PEMRSETPIXELV = Pointer[Struct_tagEMRSETPIXELV];

record Struct_tagEMRSETVIEWPORTEXTEX (
    emr : EMR,
    szlExtent : SIZEL,
);

alias EMRSETVIEWPORTEXTEX = Struct_tagEMRSETVIEWPORTEXTEX;

alias PEMRSETVIEWPORTEXTEX = Pointer[Struct_tagEMRSETVIEWPORTEXTEX];

alias EMRSETWINDOWEXTEX = Struct_tagEMRSETVIEWPORTEXTEX;

alias PEMRSETWINDOWEXTEX = Pointer[Struct_tagEMRSETVIEWPORTEXTEX];

record Struct_tagEMRSETVIEWPORTORGEX (
    emr : EMR,
    ptlOrigin : POINTL,
);

alias EMRSETVIEWPORTORGEX = Struct_tagEMRSETVIEWPORTORGEX;

alias PEMRSETVIEWPORTORGEX = Pointer[Struct_tagEMRSETVIEWPORTORGEX];

alias EMRSETWINDOWORGEX = Struct_tagEMRSETVIEWPORTORGEX;

alias PEMRSETWINDOWORGEX = Pointer[Struct_tagEMRSETVIEWPORTORGEX];

alias EMRSETBRUSHORGEX = Struct_tagEMRSETVIEWPORTORGEX;

alias PEMRSETBRUSHORGEX = Pointer[Struct_tagEMRSETVIEWPORTORGEX];

record Struct_tagEMRSETWORLDTRANSFORM (
    emr : EMR,
    xform : XFORM,
);

alias EMRSETWORLDTRANSFORM = Struct_tagEMRSETWORLDTRANSFORM;

alias PEMRSETWORLDTRANSFORM = Pointer[Struct_tagEMRSETWORLDTRANSFORM];

record Struct_tagEMRSTRETCHBLT (
    emr : EMR,
    rclBounds : RECTL,
    xDest : CLong,
    yDest : CLong,
    cxDest : CLong,
    cyDest : CLong,
    dwRop : CULong,
    xSrc : CLong,
    ySrc : CLong,
    xformSrc : XFORM,
    crBkColorSrc : CULong,
    iUsageSrc : CULong,
    offBmiSrc : CULong,
    cbBmiSrc : CULong,
    offBitsSrc : CULong,
    cbBitsSrc : CULong,
    cxSrc : CLong,
    cySrc : CLong,
);

alias EMRSTRETCHBLT = Struct_tagEMRSTRETCHBLT;

alias PEMRSTRETCHBLT = Pointer[Struct_tagEMRSTRETCHBLT];

record Struct_tagEMRSTRETCHDIBITS (
    emr : EMR,
    rclBounds : RECTL,
    xDest : CLong,
    yDest : CLong,
    xSrc : CLong,
    ySrc : CLong,
    cxSrc : CLong,
    cySrc : CLong,
    offBmiSrc : CULong,
    cbBmiSrc : CULong,
    offBitsSrc : CULong,
    cbBitsSrc : CULong,
    iUsageSrc : CULong,
    dwRop : CULong,
    cxDest : CLong,
    cyDest : CLong,
);

alias EMRSTRETCHDIBITS = Struct_tagEMRSTRETCHDIBITS;

alias PEMRSTRETCHDIBITS = Pointer[Struct_tagEMRSTRETCHDIBITS];

record Struct_tagABORTPATH (
    emr : EMR,
);

alias EMRABORTPATH = Struct_tagABORTPATH;

alias PEMRABORTPATH = Pointer[Struct_tagABORTPATH];

alias EMRBEGINPATH = Struct_tagABORTPATH;

alias PEMRBEGINPATH = Pointer[Struct_tagABORTPATH];

alias EMRENDPATH = Struct_tagABORTPATH;

alias PEMRENDPATH = Pointer[Struct_tagABORTPATH];

alias EMRCLOSEFIGURE = Struct_tagABORTPATH;

alias PEMRCLOSEFIGURE = Pointer[Struct_tagABORTPATH];

alias EMRFLATTENPATH = Struct_tagABORTPATH;

alias PEMRFLATTENPATH = Pointer[Struct_tagABORTPATH];

alias EMRWIDENPATH = Struct_tagABORTPATH;

alias PEMRWIDENPATH = Pointer[Struct_tagABORTPATH];

alias EMRSETMETARGN = Struct_tagABORTPATH;

alias PEMRSETMETARGN = Pointer[Struct_tagABORTPATH];

alias EMRSAVEDC = Struct_tagABORTPATH;

alias PEMRSAVEDC = Pointer[Struct_tagABORTPATH];

alias EMRREALIZEPALETTE = Struct_tagABORTPATH;

alias PEMRREALIZEPALETTE = Pointer[Struct_tagABORTPATH];

record Struct_tagEMRSELECTCLIPPATH (
    emr : EMR,
    iMode : CULong,
);

alias EMRSELECTCLIPPATH = Struct_tagEMRSELECTCLIPPATH;

alias PEMRSELECTCLIPPATH = Pointer[Struct_tagEMRSELECTCLIPPATH];

alias EMRSETBKMODE = Struct_tagEMRSELECTCLIPPATH;

alias PEMRSETBKMODE = Pointer[Struct_tagEMRSELECTCLIPPATH];

alias EMRSETMAPMODE = Struct_tagEMRSELECTCLIPPATH;

alias PEMRSETMAPMODE = Pointer[Struct_tagEMRSELECTCLIPPATH];

alias EMRSETPOLYFILLMODE = Struct_tagEMRSELECTCLIPPATH;

alias PEMRSETPOLYFILLMODE = Pointer[Struct_tagEMRSELECTCLIPPATH];

alias EMRSETROP2 = Struct_tagEMRSELECTCLIPPATH;

alias PEMRSETROP2 = Pointer[Struct_tagEMRSELECTCLIPPATH];

alias EMRSETSTRETCHBLTMODE = Struct_tagEMRSELECTCLIPPATH;

alias PEMRSETSTRETCHBLTMODE = Pointer[Struct_tagEMRSELECTCLIPPATH];

alias EMRSETTEXTALIGN = Struct_tagEMRSELECTCLIPPATH;

alias PEMRSETTEXTALIGN = Pointer[Struct_tagEMRSELECTCLIPPATH];

alias EMRENABLEICM = Struct_tagEMRSELECTCLIPPATH;

alias PEMRENABLEICM = Pointer[Struct_tagEMRSELECTCLIPPATH];

record Struct_tagMETAHEADER (
    mtType : UShort,
    mtHeaderSize : UShort,
    mtVersion : UShort,
    mtSize : CULong,
    mtNoObjects : UShort,
    mtMaxRecord : CULong,
    mtNoParameters : UShort,
);

alias METAHEADER = Struct_tagMETAHEADER;

alias PMETAHEADER = Pointer[Struct_tagMETAHEADER];

alias LPMETAHEADER = Pointer[Struct_tagMETAHEADER];

record Struct_tagENHMETAHEADER (
    iType : CULong,
    nSize : CULong,
    rclBounds : RECTL,
    rclFrame : RECTL,
    dSignature : CULong,
    nVersion : CULong,
    nBytes : CULong,
    nRecords : CULong,
    nHandles : UShort,
    sReserved : UShort,
    nDescription : CULong,
    offDescription : CULong,
    nPalEntries : CULong,
    szlDevice : SIZEL,
    szlMillimeters : SIZEL,
    cbPixelFormat : CULong,
    offPixelFormat : CULong,
    bOpenGL : CULong,
);

alias ENHMETAHEADER = Struct_tagENHMETAHEADER;

alias LPENHMETAHEADER = Pointer[Struct_tagENHMETAHEADER];

record Struct_tagMETARECORD (
    rdSize : CULong,
    rdFunction : UShort,
    rdParm : Array[UShort,1],
);

alias METARECORD = Struct_tagMETARECORD;

alias PMETARECORD = Pointer[Struct_tagMETARECORD];

alias LPMETARECORD = Pointer[Struct_tagMETARECORD];

record Struct_tagENHMETARECORD (
    iType : CULong,
    nSize : CULong,
    dParm : Array[CULong,1],
);

alias ENHMETARECORD = Struct_tagENHMETARECORD;

alias LPENHMETARECORD = Pointer[Struct_tagENHMETARECORD];

record Struct_tagHANDLETABLE (
    objectHandle : Array[HGDIOBJ,1],
);

alias HANDLETABLE = Struct_tagHANDLETABLE;

alias LPHANDLETABLE = Pointer[Struct_tagHANDLETABLE];

record Struct_tagTEXTMETRICA (
    tmHeight : CLong,
    tmAscent : CLong,
    tmDescent : CLong,
    tmInternalLeading : CLong,
    tmExternalLeading : CLong,
    tmAveCharWidth : CLong,
    tmMaxCharWidth : CLong,
    tmWeight : CLong,
    tmOverhang : CLong,
    tmDigitizedAspectX : CLong,
    tmDigitizedAspectY : CLong,
    tmFirstChar : CUChar,
    tmLastChar : CUChar,
    tmDefaultChar : CUChar,
    tmBreakChar : CUChar,
    tmItalic : CUChar,
    tmUnderlined : CUChar,
    tmStruckOut : CUChar,
    tmPitchAndFamily : CUChar,
    tmCharSet : CUChar,
);

alias TEXTMETRICA = Struct_tagTEXTMETRICA;

alias PTEXTMETRICA = Pointer[Struct_tagTEXTMETRICA];

alias LPTEXTMETRICA = Pointer[Struct_tagTEXTMETRICA];

record Struct_tagTEXTMETRICW (
    tmHeight : CLong,
    tmAscent : CLong,
    tmDescent : CLong,
    tmInternalLeading : CLong,
    tmExternalLeading : CLong,
    tmAveCharWidth : CLong,
    tmMaxCharWidth : CLong,
    tmWeight : CLong,
    tmOverhang : CLong,
    tmDigitizedAspectX : CLong,
    tmDigitizedAspectY : CLong,
    tmFirstChar : UShort,
    tmLastChar : UShort,
    tmDefaultChar : UShort,
    tmBreakChar : UShort,
    tmItalic : CUChar,
    tmUnderlined : CUChar,
    tmStruckOut : CUChar,
    tmPitchAndFamily : CUChar,
    tmCharSet : CUChar,
);

alias TEXTMETRICW = Struct_tagTEXTMETRICW;

alias PTEXTMETRICW = Pointer[Struct_tagTEXTMETRICW];

alias LPTEXTMETRICW = Pointer[Struct_tagTEXTMETRICW];

record Struct__RGNDATAHEADER (
    dwSize : CULong,
    iType : CULong,
    nCount : CULong,
    nRgnSize : CULong,
    rcBound : RECT,
);

alias RGNDATAHEADER = Struct__RGNDATAHEADER;

record Struct__RGNDATA (
    rdh : RGNDATAHEADER,
    Buffer : Array[CChar,1],
);

alias RGNDATA = Struct__RGNDATA;

alias PRGNDATA = Pointer[Struct__RGNDATA];

alias LPRGNDATA = Pointer[Struct__RGNDATA];

record Struct_tagGCP_RESULTSA (
    lStructSize : CULong,
    lpOutString : LPSTR,
    lpOrder : Pointer[UInt],
    lpDx : Pointer[Int],
    lpCaretPos : Pointer[Int],
    lpClass : LPSTR,
    lpGlyphs : LPWSTR,
    nGlyphs : UInt,
    nMaxFit : UInt,
);

alias GCP_RESULTSA = Struct_tagGCP_RESULTSA;

alias LPGCP_RESULTSA = Pointer[Struct_tagGCP_RESULTSA];

record Struct_tagGCP_RESULTSW (
    lStructSize : CULong,
    lpOutString : LPWSTR,
    lpOrder : Pointer[UInt],
    lpDx : Pointer[Int],
    lpCaretPos : Pointer[Int],
    lpClass : LPWSTR,
    lpGlyphs : LPWSTR,
    nGlyphs : UInt,
    nMaxFit : UInt,
);

alias GCP_RESULTSW = Struct_tagGCP_RESULTSW;

alias LPGCP_RESULTSW = Pointer[Struct_tagGCP_RESULTSW];

record Struct__GLYPHMETRICS (
    gmBlackBoxX : UInt,
    gmBlackBoxY : UInt,
    gmptGlyphOrigin : POINT,
    gmCellIncX : Short,
    gmCellIncY : Short,
);

alias GLYPHMETRICS = Struct__GLYPHMETRICS;

alias LPGLYPHMETRICS = Pointer[Struct__GLYPHMETRICS];

record Struct_tagKERNINGPAIR (
    wFirst : UShort,
    wSecond : UShort,
    iKernAmount : Int,
);

alias KERNINGPAIR = Struct_tagKERNINGPAIR;

alias LPKERNINGPAIR = Pointer[Struct_tagKERNINGPAIR];

record Struct__FIXED (
    fract : UShort,
    value : Short,
);

alias FIXED = Struct__FIXED;

record Struct__MAT2 (
    eM11 : FIXED,
    eM12 : FIXED,
    eM21 : FIXED,
    eM22 : FIXED,
);

alias MAT2 = Struct__MAT2;

alias LPMAT2 = Pointer[Struct__MAT2];

record Struct__OUTLINETEXTMETRICA (
    otmSize : UInt,
    otmTextMetrics : TEXTMETRICA,
    otmFiller : CUChar,
    otmPanoseNumber : PANOSE,
    otmfsSelection : UInt,
    otmfsType : UInt,
    otmsCharSlopeRise : Int,
    otmsCharSlopeRun : Int,
    otmItalicAngle : Int,
    otmEMSquare : UInt,
    otmAscent : Int,
    otmDescent : Int,
    otmLineGap : UInt,
    otmsCapEmHeight : UInt,
    otmsXHeight : UInt,
    otmrcFontBox : RECT,
    otmMacAscent : Int,
    otmMacDescent : Int,
    otmMacLineGap : UInt,
    otmusMinimumPPEM : UInt,
    otmptSubscriptSize : POINT,
    otmptSubscriptOffset : POINT,
    otmptSuperscriptSize : POINT,
    otmptSuperscriptOffset : POINT,
    otmsStrikeoutSize : UInt,
    otmsStrikeoutPosition : Int,
    otmsUnderscoreSize : Int,
    otmsUnderscorePosition : Int,
    otmpFamilyName : PSTR,
    otmpFaceName : PSTR,
    otmpStyleName : PSTR,
    otmpFullName : PSTR,
);

alias OUTLINETEXTMETRICA = Struct__OUTLINETEXTMETRICA;

alias POUTLINETEXTMETRICA = Pointer[Struct__OUTLINETEXTMETRICA];

alias LPOUTLINETEXTMETRICA = Pointer[Struct__OUTLINETEXTMETRICA];

record Struct__OUTLINETEXTMETRICW (
    otmSize : UInt,
    otmTextMetrics : TEXTMETRICW,
    otmFiller : CUChar,
    otmPanoseNumber : PANOSE,
    otmfsSelection : UInt,
    otmfsType : UInt,
    otmsCharSlopeRise : Int,
    otmsCharSlopeRun : Int,
    otmItalicAngle : Int,
    otmEMSquare : UInt,
    otmAscent : Int,
    otmDescent : Int,
    otmLineGap : UInt,
    otmsCapEmHeight : UInt,
    otmsXHeight : UInt,
    otmrcFontBox : RECT,
    otmMacAscent : Int,
    otmMacDescent : Int,
    otmMacLineGap : UInt,
    otmusMinimumPPEM : UInt,
    otmptSubscriptSize : POINT,
    otmptSubscriptOffset : POINT,
    otmptSuperscriptSize : POINT,
    otmptSuperscriptOffset : POINT,
    otmsStrikeoutSize : UInt,
    otmsStrikeoutPosition : Int,
    otmsUnderscoreSize : Int,
    otmsUnderscorePosition : Int,
    otmpFamilyName : PSTR,
    otmpFaceName : PSTR,
    otmpStyleName : PSTR,
    otmpFullName : PSTR,
);

alias OUTLINETEXTMETRICW = Struct__OUTLINETEXTMETRICW;

alias POUTLINETEXTMETRICW = Pointer[Struct__OUTLINETEXTMETRICW];

alias LPOUTLINETEXTMETRICW = Pointer[Struct__OUTLINETEXTMETRICW];

record Struct__RASTERIZER_STATUS (
    nSize : Short,
    wFlags : Short,
    nLanguageID : Short,
);

alias RASTERIZER_STATUS = Struct__RASTERIZER_STATUS;

alias LPRASTERIZER_STATUS = Pointer[Struct__RASTERIZER_STATUS];

record Struct__POLYTEXTA (
    x : Int,
    y : Int,
    n : UInt,
    lpstr : LPCSTR,
    uiFlags : UInt,
    rcl : RECT,
    pdx : Pointer[Int],
);

alias POLYTEXTA = Struct__POLYTEXTA;

alias PPOLYTEXTA = Pointer[Struct__POLYTEXTA];

alias LPPOLYTEXTA = Pointer[Struct__POLYTEXTA];

record Struct__POLYTEXTW (
    x : Int,
    y : Int,
    n : UInt,
    lpstr : LPCWSTR,
    uiFlags : UInt,
    rcl : RECT,
    pdx : Pointer[Int],
);

alias POLYTEXTW = Struct__POLYTEXTW;

alias PPOLYTEXTW = Pointer[Struct__POLYTEXTW];

alias LPPOLYTEXTW = Pointer[Struct__POLYTEXTW];

record Struct_tagPIXELFORMATDESCRIPTOR (
    nSize : UShort,
    nVersion : UShort,
    dwFlags : CULong,
    iPixelType : CUChar,
    cColorBits : CUChar,
    cRedBits : CUChar,
    cRedShift : CUChar,
    cGreenBits : CUChar,
    cGreenShift : CUChar,
    cBlueBits : CUChar,
    cBlueShift : CUChar,
    cAlphaBits : CUChar,
    cAlphaShift : CUChar,
    cAccumBits : CUChar,
    cAccumRedBits : CUChar,
    cAccumGreenBits : CUChar,
    cAccumBlueBits : CUChar,
    cAccumAlphaBits : CUChar,
    cDepthBits : CUChar,
    cStencilBits : CUChar,
    cAuxBuffers : CUChar,
    iLayerType : CUChar,
    bReserved : CUChar,
    dwLayerMask : CULong,
    dwVisibleMask : CULong,
    dwDamageMask : CULong,
);

alias PIXELFORMATDESCRIPTOR = Struct_tagPIXELFORMATDESCRIPTOR;

alias PPIXELFORMATDESCRIPTOR = Pointer[Struct_tagPIXELFORMATDESCRIPTOR];

alias LPPIXELFORMATDESCRIPTOR = Pointer[Struct_tagPIXELFORMATDESCRIPTOR];

record Struct_tagMETAFILEPICT (
    mm : CLong,
    xExt : CLong,
    yExt : CLong,
    hMF : HMETAFILE,
);

alias METAFILEPICT = Struct_tagMETAFILEPICT;

alias LPMETAFILEPICT = Pointer[Struct_tagMETAFILEPICT];

record Struct_tagLOCALESIGNATURE (
    lsUsb : Array[CULong,4],
    lsCsbDefault : Array[CULong,2],
    lsCsbSupported : Array[CULong,2],
);

alias LOCALESIGNATURE = Struct_tagLOCALESIGNATURE;

alias PLOCALESIGNATURE = Pointer[Struct_tagLOCALESIGNATURE];

alias LPLOCALESIGNATURE = Pointer[Struct_tagLOCALESIGNATURE];

alias LCSTYPE = CLong;

record Struct_tagNEWTEXTMETRICA (
    tmHeight : CLong,
    tmAscent : CLong,
    tmDescent : CLong,
    tmInternalLeading : CLong,
    tmExternalLeading : CLong,
    tmAveCharWidth : CLong,
    tmMaxCharWidth : CLong,
    tmWeight : CLong,
    tmOverhang : CLong,
    tmDigitizedAspectX : CLong,
    tmDigitizedAspectY : CLong,
    tmFirstChar : CUChar,
    tmLastChar : CUChar,
    tmDefaultChar : CUChar,
    tmBreakChar : CUChar,
    tmItalic : CUChar,
    tmUnderlined : CUChar,
    tmStruckOut : CUChar,
    tmPitchAndFamily : CUChar,
    tmCharSet : CUChar,
    ntmFlags : CULong,
    ntmSizeEM : UInt,
    ntmCellHeight : UInt,
    ntmAvgWidth : UInt,
);

alias NEWTEXTMETRICA = Struct_tagNEWTEXTMETRICA;

alias PNEWTEXTMETRICA = Pointer[Struct_tagNEWTEXTMETRICA];

alias LPNEWTEXTMETRICA = Pointer[Struct_tagNEWTEXTMETRICA];

record Struct_tagNEWTEXTMETRICW (
    tmHeight : CLong,
    tmAscent : CLong,
    tmDescent : CLong,
    tmInternalLeading : CLong,
    tmExternalLeading : CLong,
    tmAveCharWidth : CLong,
    tmMaxCharWidth : CLong,
    tmWeight : CLong,
    tmOverhang : CLong,
    tmDigitizedAspectX : CLong,
    tmDigitizedAspectY : CLong,
    tmFirstChar : UShort,
    tmLastChar : UShort,
    tmDefaultChar : UShort,
    tmBreakChar : UShort,
    tmItalic : CUChar,
    tmUnderlined : CUChar,
    tmStruckOut : CUChar,
    tmPitchAndFamily : CUChar,
    tmCharSet : CUChar,
    ntmFlags : CULong,
    ntmSizeEM : UInt,
    ntmCellHeight : UInt,
    ntmAvgWidth : UInt,
);

alias NEWTEXTMETRICW = Struct_tagNEWTEXTMETRICW;

alias PNEWTEXTMETRICW = Pointer[Struct_tagNEWTEXTMETRICW];

alias LPNEWTEXTMETRICW = Pointer[Struct_tagNEWTEXTMETRICW];

record Struct_tagNEWTEXTMETRICEXA (
    ntmTm : NEWTEXTMETRICA,
    ntmFontSig : FONTSIGNATURE,
);

alias NEWTEXTMETRICEXA = Struct_tagNEWTEXTMETRICEXA;

record Struct_tagNEWTEXTMETRICEXW (
    ntmTm : NEWTEXTMETRICW,
    ntmFontSig : FONTSIGNATURE,
);

alias NEWTEXTMETRICEXW = Struct_tagNEWTEXTMETRICEXW;

record Struct_tagPELARRAY (
    paXCount : CLong,
    paYCount : CLong,
    paXExt : CLong,
    paYExt : CLong,
    paRGBs : CUChar,
);

alias PELARRAY = Struct_tagPELARRAY;

alias PPELARRAY = Pointer[Struct_tagPELARRAY];

alias LPPELARRAY = Pointer[Struct_tagPELARRAY];

record Struct_tagENUMLOGFONTA (
    elfLogFont : LOGFONTA,
    elfFullName : Array[CUChar,64],
    elfStyle : Array[CUChar,32],
);

alias ENUMLOGFONTA = Struct_tagENUMLOGFONTA;

alias LPENUMLOGFONTA = Pointer[Struct_tagENUMLOGFONTA];

record Struct_tagENUMLOGFONTW (
    elfLogFont : LOGFONTW,
    elfFullName : Array[UShort,64],
    elfStyle : Array[UShort,32],
);

alias ENUMLOGFONTW = Struct_tagENUMLOGFONTW;

alias LPENUMLOGFONTW = Pointer[Struct_tagENUMLOGFONTW];

record Struct_tagENUMLOGFONTEXA (
    elfLogFont : LOGFONTA,
    elfFullName : Array[CUChar,64],
    elfStyle : Array[CUChar,32],
    elfScript : Array[CUChar,32],
);

alias ENUMLOGFONTEXA = Struct_tagENUMLOGFONTEXA;

alias LPENUMLOGFONTEXA = Pointer[Struct_tagENUMLOGFONTEXA];

record Struct_tagENUMLOGFONTEXW (
    elfLogFont : LOGFONTW,
    elfFullName : Array[UShort,64],
    elfStyle : Array[UShort,32],
    elfScript : Array[UShort,32],
);

alias ENUMLOGFONTEXW = Struct_tagENUMLOGFONTEXW;

alias LPENUMLOGFONTEXW = Pointer[Struct_tagENUMLOGFONTEXW];

record Struct_tagPOINTFX (
    x : FIXED,
    y : FIXED,
);

alias POINTFX = Struct_tagPOINTFX;

alias LPPOINTFX = Pointer[Struct_tagPOINTFX];

record Struct_tagTTPOLYCURVE (
    wType : UShort,
    cpfx : UShort,
    apfx : Array[POINTFX,1],
);

alias TTPOLYCURVE = Struct_tagTTPOLYCURVE;

alias LPTTPOLYCURVE = Pointer[Struct_tagTTPOLYCURVE];

record Struct_tagTTPOLYGONHEADER (
    cb : CULong,
    dwType : CULong,
    pfxStart : POINTFX,
);

alias TTPOLYGONHEADER = Struct_tagTTPOLYGONHEADER;

alias LPTTPOLYGONHEADER = Pointer[Struct_tagTTPOLYGONHEADER];

record Struct__POINTFLOAT (
    x : Float,
    y : Float,
);

alias POINTFLOAT = Struct__POINTFLOAT;

alias PPOINTFLOAT = Pointer[Struct__POINTFLOAT];

record Struct__GLYPHMETRICSFLOAT (
    gmfBlackBoxX : Float,
    gmfBlackBoxY : Float,
    gmfptGlyphOrigin : POINTFLOAT,
    gmfCellIncX : Float,
    gmfCellIncY : Float,
);

alias GLYPHMETRICSFLOAT = Struct__GLYPHMETRICSFLOAT;

alias PGLYPHMETRICSFLOAT = Pointer[Struct__GLYPHMETRICSFLOAT];

alias LPGLYPHMETRICSFLOAT = Pointer[Struct__GLYPHMETRICSFLOAT];

record Struct_tagLAYERPLANEDESCRIPTOR (
    nSize : UShort,
    nVersion : UShort,
    dwFlags : CULong,
    iPixelType : CUChar,
    cColorBits : CUChar,
    cRedBits : CUChar,
    cRedShift : CUChar,
    cGreenBits : CUChar,
    cGreenShift : CUChar,
    cBlueBits : CUChar,
    cBlueShift : CUChar,
    cAlphaBits : CUChar,
    cAlphaShift : CUChar,
    cAccumBits : CUChar,
    cAccumRedBits : CUChar,
    cAccumGreenBits : CUChar,
    cAccumBlueBits : CUChar,
    cAccumAlphaBits : CUChar,
    cDepthBits : CUChar,
    cStencilBits : CUChar,
    cAuxBuffers : CUChar,
    iLayerPlane : CUChar,
    bReserved : CUChar,
    crTransparent : CULong,
);

alias LAYERPLANEDESCRIPTOR = Struct_tagLAYERPLANEDESCRIPTOR;

alias PLAYERPLANEDESCRIPTOR = Pointer[Struct_tagLAYERPLANEDESCRIPTOR];

alias LPLAYERPLANEDESCRIPTOR = Pointer[Struct_tagLAYERPLANEDESCRIPTOR];

record Struct__BLENDFUNCTION (
    BlendOp : CUChar,
    BlendFlags : CUChar,
    SourceConstantAlpha : CUChar,
    AlphaFormat : CUChar,
);

alias BLENDFUNCTION = Struct__BLENDFUNCTION;

alias PBLENDFUNCTION = Pointer[Struct__BLENDFUNCTION];

alias LPBLENDFUNCTION = Pointer[Struct__BLENDFUNCTION];

record Struct__DESIGNVECTOR (
    dvReserved : CULong,
    dvNumAxes : CULong,
    dvValues : Array[CLong,16],
);

alias DESIGNVECTOR = Struct__DESIGNVECTOR;

alias PDESIGNVECTOR = Pointer[Struct__DESIGNVECTOR];

alias LPDESIGNVECTOR = Pointer[Struct__DESIGNVECTOR];

alias COLOR16 = UShort;

record Struct__TRIVERTEX (
    x : CLong,
    y : CLong,
    Red : UShort,
    Green : UShort,
    Blue : UShort,
    Alpha : UShort,
);

alias TRIVERTEX = Struct__TRIVERTEX;

alias PTRIVERTEX = Pointer[Struct__TRIVERTEX];

alias LPTRIVERTEX = Pointer[Struct__TRIVERTEX];

record Struct__GRADIENT_TRIANGLE (
    Vertex1 : CULong,
    Vertex2 : CULong,
    Vertex3 : CULong,
);

alias GRADIENT_TRIANGLE = Struct__GRADIENT_TRIANGLE;

alias PGRADIENT_TRIANGLE = Pointer[Struct__GRADIENT_TRIANGLE];

alias LPGRADIENT_TRIANGLE = Pointer[Struct__GRADIENT_TRIANGLE];

record Struct__GRADIENT_RECT (
    UpperLeft : CULong,
    LowerRight : CULong,
);

alias GRADIENT_RECT = Struct__GRADIENT_RECT;

alias PGRADIENT_RECT = Pointer[Struct__GRADIENT_RECT];

alias LPGRADIENT_RECT = Pointer[Struct__GRADIENT_RECT];

record Struct__DISPLAY_DEVICEA (
    cb : CULong,
    DeviceName : Array[CChar,32],
    DeviceString : Array[CChar,128],
    StateFlags : CULong,
    DeviceID : Array[CChar,128],
    DeviceKey : Array[CChar,128],
);

alias DISPLAY_DEVICEA = Struct__DISPLAY_DEVICEA;

alias PDISPLAY_DEVICEA = Pointer[Struct__DISPLAY_DEVICEA];

alias LPDISPLAY_DEVICEA = Pointer[Struct__DISPLAY_DEVICEA];

record Struct__DISPLAY_DEVICEW (
    cb : CULong,
    DeviceName : Array[UShort,32],
    DeviceString : Array[UShort,128],
    StateFlags : CULong,
    DeviceID : Array[UShort,128],
    DeviceKey : Array[UShort,128],
);

alias DISPLAY_DEVICEW = Struct__DISPLAY_DEVICEW;

alias PDISPLAY_DEVICEW = Pointer[Struct__DISPLAY_DEVICEW];

alias LPDISPLAY_DEVICEW = Pointer[Struct__DISPLAY_DEVICEW];

alias ABORTPROC = StdCallCodePointer[(Pointer[Struct_HDC__],Int),(Int)];

alias MFENUMPROC = StdCallCodePointer[(Pointer[Struct_HDC__],Pointer[Struct_tagHANDLETABLE],Pointer[Struct_tagMETARECORD],Int,CLong),(Int)];

alias ENHMFENUMPROC = StdCallCodePointer[(Pointer[Struct_HDC__],Pointer[Struct_tagHANDLETABLE],Pointer[Struct_tagENHMETARECORD],Int,CLong),(Int)];

alias OLDFONTENUMPROCA = StdCallCodePointer[(Pointer[Struct_tagLOGFONTA],Pointer[Struct_tagTEXTMETRICA],CULong,CLong),(Int)];

alias OLDFONTENUMPROCW = StdCallCodePointer[(Pointer[Struct_tagLOGFONTW],Pointer[Struct_tagTEXTMETRICW],CULong,CLong),(Int)];

alias FONTENUMPROCA = OLDFONTENUMPROCA;

alias FONTENUMPROCW = OLDFONTENUMPROCW;

alias ICMENUMPROCA = StdCallCodePointer[(Pointer[CChar],CLong),(Int)];

alias ICMENUMPROCW = StdCallCodePointer[(Pointer[UShort],CLong),(Int)];

alias GOBJENUMPROC = StdCallCodePointer[(RawPointer,CLong),()];

alias LINEDDAPROC = StdCallCodePointer[(Int,Int,CLong),()];

alias LPFNDEVMODE = StdCallCodePointer[(Pointer[Struct_HWND__],Pointer[Struct_HINSTANCE__],Pointer[Struct__devicemodeA],Pointer[CChar],Pointer[CChar],Pointer[Struct__devicemodeA],Pointer[CChar],UInt),(UInt)];

alias LPFNDEVCAPS = StdCallCodePointer[(Pointer[CChar],Pointer[CChar],UInt,Pointer[CChar],Pointer[Struct__devicemodeA]),(CULong)];

external (stdcall) AbortDoc(
    argument0 : HDC) Int;

external (stdcall) AbortPath(
    argument0 : HDC) Int;

external (stdcall) AddFontResourceA(
    argument0 : LPCSTR) Int;

external (stdcall) AddFontResourceW(
    argument0 : LPCWSTR) Int;

external (stdcall) AngleArc(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : CULong,
    argument4 : Float,
    argument5 : Float) Int;

external (stdcall) AnimatePalette(
    argument0 : HPALETTE,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : Pointer[PALETTEENTRY]) Int;

external (stdcall) Arc(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int,
    argument5 : Int,
    argument6 : Int,
    argument7 : Int,
    argument8 : Int) Int;

external (stdcall) ArcTo(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int,
    argument5 : Int,
    argument6 : Int,
    argument7 : Int,
    argument8 : Int) Int;

external (stdcall) BeginPath(
    argument0 : HDC) Int;

external (stdcall) BitBlt(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int,
    argument5 : HDC,
    argument6 : Int,
    argument7 : Int,
    argument8 : CULong) Int;

external (stdcall) CancelDC(
    argument0 : HDC) Int;

external (stdcall) CheckColorsInGamut(
    argument0 : HDC,
    argument1 : PVOID,
    argument2 : PVOID,
    argument3 : CULong) Int;

external (stdcall) Chord(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int,
    argument5 : Int,
    argument6 : Int,
    argument7 : Int,
    argument8 : Int) Int;

external (stdcall) ChoosePixelFormat(
    argument0 : HDC,
    argument1 : Pointer[PIXELFORMATDESCRIPTOR]) Int;

external (stdcall) CloseEnhMetaFile(
    argument0 : HDC) HENHMETAFILE;

external (stdcall) CloseFigure(
    argument0 : HDC) Int;

external (stdcall) CloseMetaFile(
    argument0 : HDC) HMETAFILE;

external (stdcall) CombineRgn(
    argument0 : HRGN,
    argument1 : HRGN,
    argument2 : HRGN,
    argument3 : Int) Int;

external (stdcall) CombineTransform(
    argument0 : LPXFORM,
    argument1 : Pointer[XFORM],
    argument2 : Pointer[XFORM]) Int;

external (stdcall) CopyEnhMetaFileA(
    argument0 : HENHMETAFILE,
    argument1 : LPCSTR) HENHMETAFILE;

external (stdcall) CopyEnhMetaFileW(
    argument0 : HENHMETAFILE,
    argument1 : LPCWSTR) HENHMETAFILE;

external (stdcall) CopyMetaFileA(
    argument0 : HMETAFILE,
    argument1 : LPCSTR) HMETAFILE;

external (stdcall) CopyMetaFileW(
    argument0 : HMETAFILE,
    argument1 : LPCWSTR) HMETAFILE;

external (stdcall) CreateBitmap(
    argument0 : Int,
    argument1 : Int,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : PCVOID) HBITMAP;

external (stdcall) CreateBitmapIndirect(
    argument0 : Pointer[BITMAP]) HBITMAP;

external (stdcall) CreateBrushIndirect(
    argument0 : Pointer[LOGBRUSH]) HBRUSH;

external (stdcall) CreateColorSpaceA(
    argument0 : LPLOGCOLORSPACEA) HCOLORSPACE;

external (stdcall) CreateColorSpaceW(
    argument0 : LPLOGCOLORSPACEW) HCOLORSPACE;

external (stdcall) CreateCompatibleBitmap(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int) HBITMAP;

external (stdcall) CreateCompatibleDC(
    argument0 : HDC) HDC;

external (stdcall) CreateDCA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : Pointer[DEVMODEA]) HDC;

external (stdcall) CreateDCW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR,
    argument3 : Pointer[DEVMODEW]) HDC;

external (stdcall) CreateDIBitmap(
    argument0 : HDC,
    argument1 : Pointer[BITMAPINFOHEADER],
    argument2 : CULong,
    argument3 : PCVOID,
    argument4 : Pointer[BITMAPINFO],
    argument5 : UInt) HBITMAP;

external (stdcall) CreateDIBPatternBrush(
    argument0 : HGLOBAL,
    argument1 : UInt) HBRUSH;

external (stdcall) CreateDIBPatternBrushPt(
    argument0 : PCVOID,
    argument1 : UInt) HBRUSH;

external (stdcall) CreateDIBSection(
    argument0 : HDC,
    argument1 : Pointer[BITMAPINFO],
    argument2 : UInt,
    argument3 : Pointer[RawPointer],
    argument4 : HANDLE,
    argument5 : CULong) HBITMAP;

external (stdcall) CreateDiscardableBitmap(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int) HBITMAP;

external (stdcall) CreateEllipticRgn(
    argument0 : Int,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int) HRGN;

external (stdcall) CreateEllipticRgnIndirect(
    argument0 : LPCRECT) HRGN;

external (stdcall) CreateEnhMetaFileA(
    argument0 : HDC,
    argument1 : LPCSTR,
    argument2 : LPCRECT,
    argument3 : LPCSTR) HDC;

external (stdcall) CreateEnhMetaFileW(
    argument0 : HDC,
    argument1 : LPCWSTR,
    argument2 : LPCRECT,
    argument3 : LPCWSTR) HDC;

external (stdcall) CreateFontA(
    argument0 : Int,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int,
    argument5 : CULong,
    argument6 : CULong,
    argument7 : CULong,
    argument8 : CULong,
    argument9 : CULong,
    argument10 : CULong,
    argument11 : CULong,
    argument12 : CULong,
    argument13 : LPCSTR) HFONT;

external (stdcall) CreateFontW(
    argument0 : Int,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int,
    argument5 : CULong,
    argument6 : CULong,
    argument7 : CULong,
    argument8 : CULong,
    argument9 : CULong,
    argument10 : CULong,
    argument11 : CULong,
    argument12 : CULong,
    argument13 : LPCWSTR) HFONT;

external (stdcall) CreateFontIndirectA(
    argument0 : Pointer[LOGFONTA]) HFONT;

external (stdcall) CreateFontIndirectW(
    argument0 : Pointer[LOGFONTW]) HFONT;

external (stdcall) CreateHalftonePalette(
    argument0 : HDC) HPALETTE;

external (stdcall) CreateHatchBrush(
    argument0 : Int,
    argument1 : CULong) HBRUSH;

external (stdcall) CreateICA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : Pointer[DEVMODEA]) HDC;

external (stdcall) CreateICW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR,
    argument3 : Pointer[DEVMODEW]) HDC;

external (stdcall) CreateMetaFileA(
    argument0 : LPCSTR) HDC;

external (stdcall) CreateMetaFileW(
    argument0 : LPCWSTR) HDC;

external (stdcall) CreatePalette(
    argument0 : Pointer[LOGPALETTE]) HPALETTE;

external (stdcall) CreatePatternBrush(
    argument0 : HBITMAP) HBRUSH;

external (stdcall) CreatePen(
    argument0 : Int,
    argument1 : Int,
    argument2 : CULong) HPEN;

external (stdcall) CreatePenIndirect(
    argument0 : Pointer[LOGPEN]) HPEN;

external (stdcall) CreatePolygonRgn(
    argument0 : Pointer[POINT],
    argument1 : Int,
    argument2 : Int) HRGN;

external (stdcall) CreatePolyPolygonRgn(
    argument0 : Pointer[POINT],
    argument1 : Pointer[Int],
    argument2 : Int,
    argument3 : Int) HRGN;

external (stdcall) CreateRectRgn(
    argument0 : Int,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int) HRGN;

external (stdcall) CreateRectRgnIndirect(
    argument0 : LPCRECT) HRGN;

external (stdcall) CreateRoundRectRgn(
    argument0 : Int,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int,
    argument5 : Int) HRGN;

external (stdcall) CreateScalableFontResourceA(
    argument0 : CULong,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : LPCSTR) Int;

external (stdcall) CreateScalableFontResourceW(
    argument0 : CULong,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR,
    argument3 : LPCWSTR) Int;

external (stdcall) CreateSolidBrush(
    argument0 : CULong) HBRUSH;

external (stdcall) DeleteColorSpace(
    argument0 : HCOLORSPACE) Int;

external (stdcall) DeleteDC(
    argument0 : HDC) Int;

external (stdcall) DeleteEnhMetaFile(
    argument0 : HENHMETAFILE) Int;

external (stdcall) DeleteMetaFile(
    argument0 : HMETAFILE) Int;

external (stdcall) DeleteObject(
    argument0 : HGDIOBJ) Int;

external (stdcall) DescribePixelFormat(
    argument0 : HDC,
    argument1 : Int,
    argument2 : UInt,
    argument3 : LPPIXELFORMATDESCRIPTOR) Int;

external (stdcall) DeviceCapabilitiesA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : UShort,
    argument3 : LPSTR,
    argument4 : Pointer[DEVMODEA]) CULong;

external (stdcall) DeviceCapabilitiesW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : UShort,
    argument3 : LPWSTR,
    argument4 : Pointer[DEVMODEW]) CULong;

external (stdcall) DPtoLP(
    argument0 : HDC,
    argument1 : LPPOINT,
    argument2 : Int) Int;

external (stdcall) DrawEscape(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPCSTR) Int;

external (stdcall) Ellipse(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int) Int;

external (stdcall) EndDoc(
    argument0 : HDC) Int;

external (stdcall) EndPage(
    argument0 : HDC) Int;

external (stdcall) EndPath(
    argument0 : HDC) Int;

external (stdcall) EnumEnhMetaFile(
    argument0 : HDC,
    argument1 : HENHMETAFILE,
    argument2 : ENHMFENUMPROC,
    argument3 : PVOID,
    argument4 : LPCRECT) Int;

external (stdcall) EnumFontFamiliesA(
    argument0 : HDC,
    argument1 : LPCSTR,
    argument2 : FONTENUMPROCA,
    argument3 : CLong) Int;

external (stdcall) EnumFontFamiliesW(
    argument0 : HDC,
    argument1 : LPCWSTR,
    argument2 : FONTENUMPROCW,
    argument3 : CLong) Int;

external (stdcall) EnumFontFamiliesExA(
    argument0 : HDC,
    argument1 : PLOGFONTA,
    argument2 : FONTENUMPROCA,
    argument3 : CLong,
    argument4 : CULong) Int;

external (stdcall) EnumFontFamiliesExW(
    argument0 : HDC,
    argument1 : PLOGFONTW,
    argument2 : FONTENUMPROCW,
    argument3 : CLong,
    argument4 : CULong) Int;

external (stdcall) EnumFontsA(
    argument0 : HDC,
    argument1 : LPCSTR,
    argument2 : FONTENUMPROCA,
    argument3 : CLong) Int;

external (stdcall) EnumFontsW(
    argument0 : HDC,
    argument1 : LPCWSTR,
    argument2 : FONTENUMPROCW,
    argument3 : CLong) Int;

external (stdcall) EnumICMProfilesA(
    argument0 : HDC,
    argument1 : ICMENUMPROCA,
    argument2 : CLong) Int;

external (stdcall) EnumICMProfilesW(
    argument0 : HDC,
    argument1 : ICMENUMPROCW,
    argument2 : CLong) Int;

external (stdcall) EnumMetaFile(
    argument0 : HDC,
    argument1 : HMETAFILE,
    argument2 : MFENUMPROC,
    argument3 : CLong) Int;

external (stdcall) EnumObjects(
    argument0 : HDC,
    argument1 : Int,
    argument2 : GOBJENUMPROC,
    argument3 : CLong) Int;

external (stdcall) EqualRgn(
    argument0 : HRGN,
    argument1 : HRGN) Int;

external (stdcall) Escape(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPCSTR,
    argument4 : PVOID) Int;

external (stdcall) ExcludeClipRect(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int) Int;

external (stdcall) ExcludeUpdateRgn(
    argument0 : HDC,
    argument1 : HWND) Int;

external (stdcall) ExtCreatePen(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : Pointer[LOGBRUSH],
    argument3 : CULong,
    argument4 : Pointer[CULong]) HPEN;

external (stdcall) ExtCreateRegion(
    argument0 : Pointer[XFORM],
    argument1 : CULong,
    argument2 : Pointer[RGNDATA]) HRGN;

external (stdcall) ExtEscape(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPCSTR,
    argument4 : Int,
    argument5 : LPSTR) Int;

external (stdcall) ExtFloodFill(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : CULong,
    argument4 : UInt) Int;

external (stdcall) ExtSelectClipRgn(
    argument0 : HDC,
    argument1 : HRGN,
    argument2 : Int) Int;

external (stdcall) ExtTextOutA(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : UInt,
    argument4 : LPCRECT,
    argument5 : LPCSTR,
    argument6 : UInt,
    argument7 : Pointer[Int]) Int;

external (stdcall) ExtTextOutW(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : UInt,
    argument4 : LPCRECT,
    argument5 : LPCWSTR,
    argument6 : UInt,
    argument7 : Pointer[Int]) Int;

external (stdcall) FillPath(
    argument0 : HDC) Int;

external (stdcall) FillRect(
    argument0 : HDC,
    argument1 : LPCRECT,
    argument2 : HBRUSH) Int;

external (stdcall) FillRgn(
    argument0 : HDC,
    argument1 : HRGN,
    argument2 : HBRUSH) Int;

external (stdcall) FixBrushOrgEx(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPPOINT) Int;

external (stdcall) FlattenPath(
    argument0 : HDC) Int;

external (stdcall) FloodFill(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : CULong) Int;

external (stdcall) GdiComment(
    argument0 : HDC,
    argument1 : UInt,
    argument2 : Pointer[CUChar]) Int;

external (stdcall) GdiFlush() Int;

external (stdcall) GdiGetBatchLimit() CULong;

external (stdcall) GdiSetBatchLimit(
    argument0 : CULong) CULong;

external (stdcall) GetArcDirection(
    argument0 : HDC) Int;

external (stdcall) GetAspectRatioFilterEx(
    argument0 : HDC,
    argument1 : LPSIZE) Int;

external (stdcall) GetBitmapBits(
    argument0 : HBITMAP,
    argument1 : CLong,
    argument2 : PVOID) CLong;

external (stdcall) GetBitmapDimensionEx(
    argument0 : HBITMAP,
    argument1 : LPSIZE) Int;

external (stdcall) GetBkColor(
    argument0 : HDC) CULong;

external (stdcall) GetBkMode(
    argument0 : HDC) Int;

external (stdcall) GetBoundsRect(
    argument0 : HDC,
    argument1 : LPRECT,
    argument2 : UInt) UInt;

external (stdcall) GetBrushOrgEx(
    argument0 : HDC,
    argument1 : LPPOINT) Int;

external (stdcall) GetCharABCWidthsA(
    argument0 : HDC,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : LPABC) Int;

external (stdcall) GetCharABCWidthsW(
    argument0 : HDC,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : LPABC) Int;

external (stdcall) GetCharABCWidthsFloatA(
    argument0 : HDC,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : LPABCFLOAT) Int;

external (stdcall) GetCharABCWidthsFloatW(
    argument0 : HDC,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : LPABCFLOAT) Int;

external (stdcall) GetCharacterPlacementA(
    argument0 : HDC,
    argument1 : LPCSTR,
    argument2 : Int,
    argument3 : Int,
    argument4 : LPGCP_RESULTSA,
    argument5 : CULong) CULong;

external (stdcall) GetCharacterPlacementW(
    argument0 : HDC,
    argument1 : LPCWSTR,
    argument2 : Int,
    argument3 : Int,
    argument4 : LPGCP_RESULTSW,
    argument5 : CULong) CULong;

external (stdcall) GetCharWidth32A(
    argument0 : HDC,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : LPINT) Int;

external (stdcall) GetCharWidth32W(
    argument0 : HDC,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : LPINT) Int;

external (stdcall) GetCharWidthA(
    argument0 : HDC,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : LPINT) Int;

external (stdcall) GetCharWidthW(
    argument0 : HDC,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : LPINT) Int;

external (stdcall) GetCharWidthFloatA(
    argument0 : HDC,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : PFLOAT) Int;

external (stdcall) GetCharWidthFloatW(
    argument0 : HDC,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : PFLOAT) Int;

external (stdcall) GetClipBox(
    argument0 : HDC,
    argument1 : LPRECT) Int;

external (stdcall) GetClipRgn(
    argument0 : HDC,
    argument1 : HRGN) Int;

external (stdcall) GetColorAdjustment(
    argument0 : HDC,
    argument1 : LPCOLORADJUSTMENT) Int;

external (stdcall) GetColorSpace(
    argument0 : HDC) HANDLE;

external (stdcall) GetCurrentObject(
    argument0 : HDC,
    argument1 : UInt) HGDIOBJ;

external (stdcall) GetCurrentPositionEx(
    argument0 : HDC,
    argument1 : LPPOINT) Int;

external (stdcall) GetCursor() HCURSOR;

external (stdcall) GetDCOrgEx(
    argument0 : HDC,
    argument1 : LPPOINT) Int;

external (stdcall) GetDeviceCaps(
    argument0 : HDC,
    argument1 : Int) Int;

external (stdcall) GetDeviceGammaRamp(
    argument0 : HDC,
    argument1 : PVOID) Int;

external (stdcall) GetDIBColorTable(
    argument0 : HDC,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : Pointer[RGBQUAD]) UInt;

external (stdcall) GetDIBits(
    argument0 : HDC,
    argument1 : HBITMAP,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : PVOID,
    argument5 : LPBITMAPINFO,
    argument6 : UInt) Int;

external (stdcall) GetEnhMetaFileA(
    argument0 : LPCSTR) HENHMETAFILE;

external (stdcall) GetEnhMetaFileW(
    argument0 : LPCWSTR) HENHMETAFILE;

external (stdcall) GetEnhMetaFileBits(
    argument0 : HENHMETAFILE,
    argument1 : UInt,
    argument2 : LPBYTE) UInt;

external (stdcall) GetEnhMetaFileDescriptionA(
    argument0 : HENHMETAFILE,
    argument1 : UInt,
    argument2 : LPSTR) UInt;

external (stdcall) GetEnhMetaFileDescriptionW(
    argument0 : HENHMETAFILE,
    argument1 : UInt,
    argument2 : LPWSTR) UInt;

external (stdcall) GetEnhMetaFileHeader(
    argument0 : HENHMETAFILE,
    argument1 : UInt,
    argument2 : LPENHMETAHEADER) UInt;

external (stdcall) GetEnhMetaFilePaletteEntries(
    argument0 : HENHMETAFILE,
    argument1 : UInt,
    argument2 : LPPALETTEENTRY) UInt;

external (stdcall) GetEnhMetaFilePixelFormat(
    argument0 : HENHMETAFILE,
    argument1 : CULong,
    argument2 : Pointer[PIXELFORMATDESCRIPTOR]) UInt;

external (stdcall) GetFontData(
    argument0 : HDC,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : PVOID,
    argument4 : CULong) CULong;

external (stdcall) GetFontLanguageInfo(
    argument0 : HDC) CULong;

external (stdcall) GetGlyphOutlineA(
    argument0 : HDC,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : LPGLYPHMETRICS,
    argument4 : CULong,
    argument5 : PVOID,
    argument6 : Pointer[MAT2]) CULong;

external (stdcall) GetGlyphOutlineW(
    argument0 : HDC,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : LPGLYPHMETRICS,
    argument4 : CULong,
    argument5 : PVOID,
    argument6 : Pointer[MAT2]) CULong;

external (stdcall) GetGraphicsMode(
    argument0 : HDC) Int;

external (stdcall) GetICMProfileA(
    argument0 : HDC,
    argument1 : LPDWORD,
    argument2 : LPSTR) Int;

external (stdcall) GetICMProfileW(
    argument0 : HDC,
    argument1 : LPDWORD,
    argument2 : LPWSTR) Int;

external (stdcall) GetKerningPairsA(
    argument0 : HDC,
    argument1 : CULong,
    argument2 : LPKERNINGPAIR) CULong;

external (stdcall) GetKerningPairsW(
    argument0 : HDC,
    argument1 : CULong,
    argument2 : LPKERNINGPAIR) CULong;

external (stdcall) GetLogColorSpaceA(
    argument0 : HCOLORSPACE,
    argument1 : LPLOGCOLORSPACEA,
    argument2 : CULong) Int;

external (stdcall) GetLogColorSpaceW(
    argument0 : HCOLORSPACE,
    argument1 : LPLOGCOLORSPACEW,
    argument2 : CULong) Int;

external (stdcall) GetMapMode(
    argument0 : HDC) Int;

external (stdcall) GetMetaFileA(
    argument0 : LPCSTR) HMETAFILE;

external (stdcall) GetMetaFileW(
    argument0 : LPCWSTR) HMETAFILE;

external (stdcall) GetMetaFileBitsEx(
    argument0 : HMETAFILE,
    argument1 : UInt,
    argument2 : PVOID) UInt;

external (stdcall) GetMetaRgn(
    argument0 : HDC,
    argument1 : HRGN) Int;

external (stdcall) GetMiterLimit(
    argument0 : HDC,
    argument1 : PFLOAT) Int;

external (stdcall) GetNearestColor(
    argument0 : HDC,
    argument1 : CULong) CULong;

external (stdcall) GetNearestPaletteIndex(
    argument0 : HPALETTE,
    argument1 : CULong) UInt;

external (stdcall) GetObjectA(
    argument0 : HGDIOBJ,
    argument1 : Int,
    argument2 : PVOID) Int;

external (stdcall) GetObjectW(
    argument0 : HGDIOBJ,
    argument1 : Int,
    argument2 : PVOID) Int;

external (stdcall) GetObjectType(
    argument0 : HGDIOBJ) CULong;

external (stdcall) GetOutlineTextMetricsA(
    argument0 : HDC,
    argument1 : UInt,
    argument2 : LPOUTLINETEXTMETRICA) UInt;

external (stdcall) GetOutlineTextMetricsW(
    argument0 : HDC,
    argument1 : UInt,
    argument2 : LPOUTLINETEXTMETRICW) UInt;

external (stdcall) GetPaletteEntries(
    argument0 : HPALETTE,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : LPPALETTEENTRY) UInt;

external (stdcall) GetPath(
    argument0 : HDC,
    argument1 : LPPOINT,
    argument2 : PBYTE,
    argument3 : Int) Int;

external (stdcall) GetPixel(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int) CULong;

external (stdcall) GetPixelFormat(
    argument0 : HDC) Int;

external (stdcall) GetPolyFillMode(
    argument0 : HDC) Int;

external (stdcall) GetRasterizerCaps(
    argument0 : LPRASTERIZER_STATUS,
    argument1 : UInt) Int;

external (stdcall) GetRandomRgn(
    argument0 : HDC,
    argument1 : HRGN,
    argument2 : Int) Int;

external (stdcall) GetRegionData(
    argument0 : HRGN,
    argument1 : CULong,
    argument2 : LPRGNDATA) CULong;

external (stdcall) GetRgnBox(
    argument0 : HRGN,
    argument1 : LPRECT) Int;

external (stdcall) GetROP2(
    argument0 : HDC) Int;

external (stdcall) GetStockObject(
    argument0 : Int) HGDIOBJ;

external (stdcall) GetStretchBltMode(
    argument0 : HDC) Int;

external (stdcall) GetSystemPaletteEntries(
    argument0 : HDC,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : LPPALETTEENTRY) UInt;

external (stdcall) GetSystemPaletteUse(
    argument0 : HDC) UInt;

external (stdcall) GetTextAlign(
    argument0 : HDC) UInt;

external (stdcall) GetTextCharacterExtra(
    argument0 : HDC) Int;

external (stdcall) GetTextCharset(
    argument0 : HDC) Int;

external (stdcall) GetTextCharsetInfo(
    argument0 : HDC,
    argument1 : LPFONTSIGNATURE,
    argument2 : CULong) Int;

external (stdcall) GetTextColor(
    argument0 : HDC) CULong;

external (stdcall) GetTextExtentExPointA(
    argument0 : HDC,
    argument1 : LPCSTR,
    argument2 : Int,
    argument3 : Int,
    argument4 : LPINT,
    argument5 : LPINT,
    argument6 : LPSIZE) Int;

external (stdcall) GetTextExtentExPointW(
    argument0 : HDC,
    argument1 : LPCWSTR,
    argument2 : Int,
    argument3 : Int,
    argument4 : LPINT,
    argument5 : LPINT,
    argument6 : LPSIZE) Int;

external (stdcall) GetTextExtentPointA(
    argument0 : HDC,
    argument1 : LPCSTR,
    argument2 : Int,
    argument3 : LPSIZE) Int;

external (stdcall) GetTextExtentPointW(
    argument0 : HDC,
    argument1 : LPCWSTR,
    argument2 : Int,
    argument3 : LPSIZE) Int;

external (stdcall) GetTextExtentPoint32A(
    argument0 : HDC,
    argument1 : LPCSTR,
    argument2 : Int,
    argument3 : LPSIZE) Int;

external (stdcall) GetTextExtentPoint32W(
    argument0 : HDC,
    argument1 : LPCWSTR,
    argument2 : Int,
    argument3 : LPSIZE) Int;

external (stdcall) GetTextFaceA(
    argument0 : HDC,
    argument1 : Int,
    argument2 : LPSTR) Int;

external (stdcall) GetTextFaceW(
    argument0 : HDC,
    argument1 : Int,
    argument2 : LPWSTR) Int;

external (stdcall) GetTextMetricsA(
    argument0 : HDC,
    argument1 : LPTEXTMETRICA) Int;

external (stdcall) GetTextMetricsW(
    argument0 : HDC,
    argument1 : LPTEXTMETRICW) Int;

external (stdcall) GetViewportExtEx(
    argument0 : HDC,
    argument1 : LPSIZE) Int;

external (stdcall) GetViewportOrgEx(
    argument0 : HDC,
    argument1 : LPPOINT) Int;

external (stdcall) GetWindowExtEx(
    argument0 : HDC,
    argument1 : LPSIZE) Int;

external (stdcall) GetWindowOrgEx(
    argument0 : HDC,
    argument1 : LPPOINT) Int;

external (stdcall) GetWinMetaFileBits(
    argument0 : HENHMETAFILE,
    argument1 : UInt,
    argument2 : LPBYTE,
    argument3 : Int,
    argument4 : HDC) UInt;

external (stdcall) GetWorldTransform(
    argument0 : HDC,
    argument1 : LPXFORM) Int;

external (stdcall) IntersectClipRect(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int) Int;

external (stdcall) InvertRgn(
    argument0 : HDC,
    argument1 : HRGN) Int;

external (stdcall) LineDDA(
    argument0 : Int,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : LINEDDAPROC,
    argument5 : CLong) Int;

external (stdcall) LineTo(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int) Int;

external (stdcall) LPtoDP(
    argument0 : HDC,
    argument1 : LPPOINT,
    argument2 : Int) Int;

external (stdcall) MaskBlt(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int,
    argument5 : HDC,
    argument6 : Int,
    argument7 : Int,
    argument8 : HBITMAP,
    argument9 : Int,
    argument10 : Int,
    argument11 : CULong) Int;

external (stdcall) ModifyWorldTransform(
    argument0 : HDC,
    argument1 : Pointer[XFORM],
    argument2 : CULong) Int;

external (stdcall) MoveToEx(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPPOINT) Int;

external (stdcall) OffsetClipRgn(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int) Int;

external (stdcall) OffsetRgn(
    argument0 : HRGN,
    argument1 : Int,
    argument2 : Int) Int;

external (stdcall) OffsetViewportOrgEx(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPPOINT) Int;

external (stdcall) OffsetWindowOrgEx(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPPOINT) Int;

external (stdcall) PaintRgn(
    argument0 : HDC,
    argument1 : HRGN) Int;

external (stdcall) PatBlt(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int,
    argument5 : CULong) Int;

external (stdcall) PathToRegion(
    argument0 : HDC) HRGN;

external (stdcall) Pie(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int,
    argument5 : Int,
    argument6 : Int,
    argument7 : Int,
    argument8 : Int) Int;

external (stdcall) PlayEnhMetaFile(
    argument0 : HDC,
    argument1 : HENHMETAFILE,
    argument2 : LPCRECT) Int;

external (stdcall) PlayEnhMetaFileRecord(
    argument0 : HDC,
    argument1 : LPHANDLETABLE,
    argument2 : Pointer[ENHMETARECORD],
    argument3 : UInt) Int;

external (stdcall) PlayMetaFile(
    argument0 : HDC,
    argument1 : HMETAFILE) Int;

external (stdcall) PlayMetaFileRecord(
    argument0 : HDC,
    argument1 : LPHANDLETABLE,
    argument2 : LPMETARECORD,
    argument3 : UInt) Int;

external (stdcall) PlgBlt(
    argument0 : HDC,
    argument1 : Pointer[POINT],
    argument2 : HDC,
    argument3 : Int,
    argument4 : Int,
    argument5 : Int,
    argument6 : Int,
    argument7 : HBITMAP,
    argument8 : Int,
    argument9 : Int) Int;

external (stdcall) PolyBezier(
    argument0 : HDC,
    argument1 : Pointer[POINT],
    argument2 : CULong) Int;

external (stdcall) PolyBezierTo(
    argument0 : HDC,
    argument1 : Pointer[POINT],
    argument2 : CULong) Int;

external (stdcall) PolyDraw(
    argument0 : HDC,
    argument1 : Pointer[POINT],
    argument2 : Pointer[CUChar],
    argument3 : Int) Int;

external (stdcall) Polygon(
    argument0 : HDC,
    argument1 : Pointer[POINT],
    argument2 : Int) Int;

external (stdcall) Polyline(
    argument0 : HDC,
    argument1 : Pointer[POINT],
    argument2 : Int) Int;

external (stdcall) PolylineTo(
    argument0 : HDC,
    argument1 : Pointer[POINT],
    argument2 : CULong) Int;

external (stdcall) PolyPolygon(
    argument0 : HDC,
    argument1 : Pointer[POINT],
    argument2 : Pointer[Int],
    argument3 : Int) Int;

external (stdcall) PolyPolyline(
    argument0 : HDC,
    argument1 : Pointer[POINT],
    argument2 : Pointer[CULong],
    argument3 : CULong) Int;

external (stdcall) PolyTextOutA(
    argument0 : HDC,
    argument1 : Pointer[POLYTEXTA],
    argument2 : Int) Int;

external (stdcall) PolyTextOutW(
    argument0 : HDC,
    argument1 : Pointer[POLYTEXTW],
    argument2 : Int) Int;

external (stdcall) PtInRegion(
    argument0 : HRGN,
    argument1 : Int,
    argument2 : Int) Int;

external (stdcall) PtVisible(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int) Int;

external (stdcall) RealizePalette(
    argument0 : HDC) UInt;

external (stdcall) Rectangle(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int) Int;

external (stdcall) RectInRegion(
    argument0 : HRGN,
    argument1 : LPCRECT) Int;

external (stdcall) RectVisible(
    argument0 : HDC,
    argument1 : LPCRECT) Int;

external (stdcall) RemoveFontResourceA(
    argument0 : LPCSTR) Int;

external (stdcall) RemoveFontResourceW(
    argument0 : LPCWSTR) Int;

external (stdcall) ResetDCA(
    argument0 : HDC,
    argument1 : Pointer[DEVMODEA]) HDC;

external (stdcall) ResetDCW(
    argument0 : HDC,
    argument1 : Pointer[DEVMODEW]) HDC;

external (stdcall) ResizePalette(
    argument0 : HPALETTE,
    argument1 : UInt) Int;

external (stdcall) RestoreDC(
    argument0 : HDC,
    argument1 : Int) Int;

external (stdcall) RoundRect(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int,
    argument5 : Int,
    argument6 : Int) Int;

external (stdcall) SaveDC(
    argument0 : HDC) Int;

external (stdcall) ScaleViewportExtEx(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int,
    argument5 : LPSIZE) Int;

external (stdcall) ScaleWindowExtEx(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int,
    argument5 : LPSIZE) Int;

external (stdcall) SelectClipPath(
    argument0 : HDC,
    argument1 : Int) Int;

external (stdcall) SelectClipRgn(
    argument0 : HDC,
    argument1 : HRGN) Int;

external (stdcall) SelectObject(
    argument0 : HDC,
    argument1 : HGDIOBJ) HGDIOBJ;

external (stdcall) SelectPalette(
    argument0 : HDC,
    argument1 : HPALETTE,
    argument2 : Int) HPALETTE;

external (stdcall) SetAbortProc(
    argument0 : HDC,
    argument1 : ABORTPROC) Int;

external (stdcall) SetArcDirection(
    argument0 : HDC,
    argument1 : Int) Int;

external (stdcall) SetBitmapBits(
    argument0 : HBITMAP,
    argument1 : CULong,
    argument2 : PCVOID) CLong;

external (stdcall) SetBitmapDimensionEx(
    argument0 : HBITMAP,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPSIZE) Int;

external (stdcall) SetBkColor(
    argument0 : HDC,
    argument1 : CULong) CULong;

external (stdcall) SetBkMode(
    argument0 : HDC,
    argument1 : Int) Int;

external (stdcall) SetBoundsRect(
    argument0 : HDC,
    argument1 : LPCRECT,
    argument2 : UInt) UInt;

external (stdcall) SetBrushOrgEx(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPPOINT) Int;

external (stdcall) SetColorAdjustment(
    argument0 : HDC,
    argument1 : Pointer[COLORADJUSTMENT]) Int;

external (stdcall) SetColorSpace(
    argument0 : HDC,
    argument1 : HCOLORSPACE) Int;

external (stdcall) SetDeviceGammaRamp(
    argument0 : HDC,
    argument1 : PVOID) Int;

external (stdcall) SetDIBColorTable(
    argument0 : HDC,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : Pointer[RGBQUAD]) UInt;

external (stdcall) SetDIBits(
    argument0 : HDC,
    argument1 : HBITMAP,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : PCVOID,
    argument5 : Pointer[BITMAPINFO],
    argument6 : UInt) Int;

external (stdcall) SetDIBitsToDevice(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : Int,
    argument6 : Int,
    argument7 : UInt,
    argument8 : UInt,
    argument9 : PCVOID,
    argument10 : Pointer[BITMAPINFO],
    argument11 : UInt) Int;

external (stdcall) SetEnhMetaFileBits(
    argument0 : UInt,
    argument1 : Pointer[CUChar]) HENHMETAFILE;

external (stdcall) SetGraphicsMode(
    argument0 : HDC,
    argument1 : Int) Int;

external (stdcall) SetICMMode(
    argument0 : HDC,
    argument1 : Int) Int;

external (stdcall) SetICMProfileA(
    argument0 : HDC,
    argument1 : LPSTR) Int;

external (stdcall) SetICMProfileW(
    argument0 : HDC,
    argument1 : LPWSTR) Int;

external (stdcall) SetMapMode(
    argument0 : HDC,
    argument1 : Int) Int;

external (stdcall) SetMapperFlags(
    argument0 : HDC,
    argument1 : CULong) CULong;

external (stdcall) SetMetaFileBitsEx(
    argument0 : UInt,
    argument1 : Pointer[CUChar]) HMETAFILE;

external (stdcall) SetMetaRgn(
    argument0 : HDC) Int;

external (stdcall) SetMiterLimit(
    argument0 : HDC,
    argument1 : Float,
    argument2 : PFLOAT) Int;

external (stdcall) SetPaletteEntries(
    argument0 : HPALETTE,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : Pointer[PALETTEENTRY]) UInt;

external (stdcall) SetPixel(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : CULong) CULong;

external (stdcall) SetPixelFormat(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Pointer[PIXELFORMATDESCRIPTOR]) Int;

external (stdcall) SetPixelV(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : CULong) Int;

external (stdcall) SetPolyFillMode(
    argument0 : HDC,
    argument1 : Int) Int;

external (stdcall) SetRectRgn(
    argument0 : HRGN,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int) Int;

external (stdcall) SetROP2(
    argument0 : HDC,
    argument1 : Int) Int;

external (stdcall) SetStretchBltMode(
    argument0 : HDC,
    argument1 : Int) Int;

external (stdcall) SetSystemPaletteUse(
    argument0 : HDC,
    argument1 : UInt) UInt;

external (stdcall) SetTextAlign(
    argument0 : HDC,
    argument1 : UInt) UInt;

external (stdcall) SetTextCharacterExtra(
    argument0 : HDC,
    argument1 : Int) Int;

external (stdcall) SetTextColor(
    argument0 : HDC,
    argument1 : CULong) CULong;

external (stdcall) SetTextJustification(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int) Int;

external (stdcall) SetViewportExtEx(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPSIZE) Int;

external (stdcall) SetViewportOrgEx(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPPOINT) Int;

external (stdcall) SetWindowExtEx(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPSIZE) Int;

external (stdcall) SetWindowOrgEx(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPPOINT) Int;

external (stdcall) SetWinMetaFileBits(
    argument0 : UInt,
    argument1 : Pointer[CUChar],
    argument2 : HDC,
    argument3 : Pointer[METAFILEPICT]) HENHMETAFILE;

external (stdcall) SetWorldTransform(
    argument0 : HDC,
    argument1 : Pointer[XFORM]) Int;

external (stdcall) StartDocA(
    argument0 : HDC,
    argument1 : Pointer[DOCINFOA]) Int;

external (stdcall) StartDocW(
    argument0 : HDC,
    argument1 : Pointer[DOCINFOW]) Int;

external (stdcall) StartPage(
    argument0 : HDC) Int;

external (stdcall) StretchBlt(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int,
    argument5 : HDC,
    argument6 : Int,
    argument7 : Int,
    argument8 : Int,
    argument9 : Int,
    argument10 : CULong) Int;

external (stdcall) StretchDIBits(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int,
    argument5 : Int,
    argument6 : Int,
    argument7 : Int,
    argument8 : Int,
    argument9 : RawPointer,
    argument10 : Pointer[BITMAPINFO],
    argument11 : UInt,
    argument12 : CULong) Int;

external (stdcall) StrokeAndFillPath(
    argument0 : HDC) Int;

external (stdcall) StrokePath(
    argument0 : HDC) Int;

external (stdcall) SwapBuffers(
    argument0 : HDC) Int;

external (stdcall) TextOutA(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPCSTR,
    argument4 : Int) Int;

external (stdcall) TextOutW(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPCWSTR,
    argument4 : Int) Int;

external (stdcall) TranslateCharsetInfo(
    argument0 : PDWORD,
    argument1 : LPCHARSETINFO,
    argument2 : CULong) Int;

external (stdcall) UnrealizeObject(
    argument0 : HGDIOBJ) Int;

external (stdcall) UpdateColors(
    argument0 : HDC) Int;

external (stdcall) UpdateICMRegKeyA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPSTR,
    argument3 : UInt) Int;

external (stdcall) UpdateICMRegKeyW(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPWSTR,
    argument3 : UInt) Int;

external (stdcall) WidenPath(
    argument0 : HDC) Int;

external (stdcall) wglCopyContext(
    argument0 : HGLRC,
    argument1 : HGLRC,
    argument2 : UInt) Int;

external (stdcall) wglCreateContext(
    argument0 : HDC) HGLRC;

external (stdcall) wglCreateLayerContext(
    argument0 : HDC,
    argument1 : Int) HGLRC;

external (stdcall) wglDeleteContext(
    argument0 : HGLRC) Int;

external (stdcall) wglDescribeLayerPlane(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : UInt,
    argument4 : LPLAYERPLANEDESCRIPTOR) Int;

external (stdcall) wglGetCurrentContext() HGLRC;

external (stdcall) wglGetCurrentDC() HDC;

external (stdcall) wglGetLayerPaletteEntries(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Pointer[CULong]) Int;

external (stdcall) wglGetProcAddress(
    argument0 : LPCSTR) PROC;

external (stdcall) wglMakeCurrent(
    argument0 : HDC,
    argument1 : HGLRC) Int;

external (stdcall) wglRealizeLayerPalette(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int) Int;

external (stdcall) wglSetLayerPaletteEntries(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Pointer[CULong]) Int;

external (stdcall) wglShareLists(
    argument0 : HGLRC,
    argument1 : HGLRC) Int;

external (stdcall) wglSwapLayerBuffers(
    argument0 : HDC,
    argument1 : UInt) Int;

external (stdcall) wglUseFontBitmapsA(
    argument0 : HDC,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong) Int;

external (stdcall) wglUseFontBitmapsW(
    argument0 : HDC,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong) Int;

external (stdcall) wglUseFontOutlinesA(
    argument0 : HDC,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : Float,
    argument5 : Float,
    argument6 : Int,
    argument7 : LPGLYPHMETRICSFLOAT) Int;

external (stdcall) wglUseFontOutlinesW(
    argument0 : HDC,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : Float,
    argument5 : Float,
    argument6 : Int,
    argument7 : LPGLYPHMETRICSFLOAT) Int;

alias BCHAR = CUChar;

alias DOCINFO = DOCINFOA;

alias LPDOCINFO = Pointer[DOCINFOA];

alias LOGFONT = LOGFONTA;

alias PLOGFONT = Pointer[LOGFONTA];

alias LPLOGFONT = Pointer[LOGFONTA];

alias TEXTMETRIC = TEXTMETRICA;

alias PTEXTMETRIC = Pointer[TEXTMETRICA];

alias LPTEXTMETRIC = Pointer[TEXTMETRICA];

alias DEVMODE = DEVMODEA;

alias PDEVMODE = Pointer[DEVMODEA];

alias LPDEVMODE = Pointer[DEVMODEA];

alias EXTLOGFONT = EXTLOGFONTA;

alias PEXTLOGFONT = Pointer[EXTLOGFONTA];

alias LPEXTLOGFONT = Pointer[EXTLOGFONTA];

alias GCP_RESULTS = GCP_RESULTSA;

alias LPGCP_RESULTS = Pointer[GCP_RESULTSA];

alias OUTLINETEXTMETRIC = OUTLINETEXTMETRICA;

alias POUTLINETEXTMETRIC = Pointer[OUTLINETEXTMETRICA];

alias LPOUTLINETEXTMETRIC = Pointer[OUTLINETEXTMETRICA];

alias POLYTEXT = POLYTEXTA;

alias PPOLYTEXT = Pointer[POLYTEXTA];

alias LPPOLYTEXT = Pointer[POLYTEXTA];

alias LOGCOLORSPACE = LOGCOLORSPACEA;

alias LPLOGCOLORSPACE = Pointer[LOGCOLORSPACEA];

alias NEWTEXTMETRIC = NEWTEXTMETRICA;

alias PNEWTEXTMETRIC = Pointer[NEWTEXTMETRICA];

alias LPNEWTEXTMETRIC = Pointer[NEWTEXTMETRICA];

alias NEWTEXTMETRICEX = NEWTEXTMETRICEXA;

alias ENUMLOGFONT = ENUMLOGFONTA;

alias LPENUMLOGFONT = Pointer[ENUMLOGFONTA];

alias ENUMLOGFONTEX = ENUMLOGFONTEXA;

alias LPENUMLOGFONTEX = Pointer[ENUMLOGFONTEXA];

alias DISPLAY_DEVICE = DISPLAY_DEVICEA;

alias PDISPLAY_DEVICE = Pointer[DISPLAY_DEVICEA];

alias LPDISPLAY_DEVICE = Pointer[DISPLAY_DEVICEA];

alias DLGPROC = StdCallCodePointer[(Pointer[Struct_HWND__],UInt,UInt,CLong),(Int)];

alias TIMERPROC = StdCallCodePointer[(Pointer[Struct_HWND__],UInt,UInt,CULong),()];

alias GRAYSTRINGPROC = StdCallCodePointer[(Pointer[Struct_HDC__],CLong,Int),(Int)];

alias HOOKPROC = StdCallCodePointer[(Int,UInt,CLong),(CLong)];

alias PROPENUMPROCA = StdCallCodePointer[(Pointer[Struct_HWND__],Pointer[CChar],RawPointer),(Int)];

alias PROPENUMPROCW = StdCallCodePointer[(Pointer[Struct_HWND__],Pointer[UShort],RawPointer),(Int)];

alias PROPENUMPROCEXA = StdCallCodePointer[(Pointer[Struct_HWND__],Pointer[CChar],RawPointer,CULong),(Int)];

alias PROPENUMPROCEXW = StdCallCodePointer[(Pointer[Struct_HWND__],Pointer[UShort],RawPointer,CULong),(Int)];

alias EDITWORDBREAKPROCA = StdCallCodePointer[(Pointer[CChar],Int,Int,Int),(Int)];

alias EDITWORDBREAKPROCW = StdCallCodePointer[(Pointer[UShort],Int,Int,Int),(Int)];

alias WNDPROC = StdCallCodePointer[(Pointer[Struct_HWND__],UInt,UInt,CLong),(CLong)];

alias DRAWSTATEPROC = StdCallCodePointer[(Pointer[Struct_HDC__],CLong,UInt,Int,Int),(Int)];

alias WNDENUMPROC = StdCallCodePointer[(Pointer[Struct_HWND__],CLong),(Int)];

alias ENUMWINDOWSPROC = StdCallCodePointer[(Pointer[Struct_HWND__],CLong),(Int)];

alias MONITORENUMPROC = StdCallCodePointer[(Pointer[Struct_HMONITOR__],Pointer[Struct_HDC__],Pointer[Struct_tagRECT],CLong),(Int)];

alias NAMEENUMPROCA = StdCallCodePointer[(Pointer[CChar],CLong),(Int)];

alias NAMEENUMPROCW = StdCallCodePointer[(Pointer[UShort],CLong),(Int)];

alias DESKTOPENUMPROCA = NAMEENUMPROCA;

alias DESKTOPENUMPROCW = NAMEENUMPROCW;

alias WINSTAENUMPROCA = NAMEENUMPROCA;

alias WINSTAENUMPROCW = NAMEENUMPROCW;

alias SENDASYNCPROC = StdCallCodePointer[(Pointer[Struct_HWND__],UInt,CULong,CLong),()];

record Struct_HDWP__ (
    i : Int,
);

alias HDWP = Pointer[Struct_HDWP__];

record Struct_HDEVNOTIFY__ (
    i : Int,
);

alias HDEVNOTIFY = Pointer[Struct_HDEVNOTIFY__];

record Struct_tagMENUGETOBJECTINFO (
    dwFlags : CULong,
    uPos : UInt,
    hmenu : HMENU,
    riid : PVOID,
    pvObj : PVOID,
);

alias MENUGETOBJECTINFO = Struct_tagMENUGETOBJECTINFO;

alias PMENUGETOBJECTINFO = Pointer[Struct_tagMENUGETOBJECTINFO];

record Struct_tagACCEL (
    fVirt : CUChar,
    key : UShort,
    cmd : UShort,
);

alias ACCEL = Struct_tagACCEL;

alias LPACCEL = Pointer[Struct_tagACCEL];

record Struct_tagACCESSTIMEOUT (
    cbSize : UInt,
    dwFlags : CULong,
    iTimeOutMSec : CULong,
);

alias ACCESSTIMEOUT = Struct_tagACCESSTIMEOUT;

alias LPACCESSTIMEOUT = Pointer[Struct_tagACCESSTIMEOUT];

record Struct_tagANIMATIONINFO (
    cbSize : UInt,
    iMinAnimate : Int,
);

alias ANIMATIONINFO = Struct_tagANIMATIONINFO;

alias LPANIMATIONINFO = Pointer[Struct_tagANIMATIONINFO];

record Struct_tagCREATESTRUCTA (
    lpCreateParams : LPVOID,
    hInstance : HINSTANCE,
    hMenu : HMENU,
    hwndParent : HWND,
    cy : Int,
    cx : Int,
    y : Int,
    x : Int,
    style : CLong,
    lpszName : LPCSTR,
    lpszClass : LPCSTR,
    dwExStyle : CULong,
);

alias CREATESTRUCTA = Struct_tagCREATESTRUCTA;

alias LPCREATESTRUCTA = Pointer[Struct_tagCREATESTRUCTA];

record Struct_tagCREATESTRUCTW (
    lpCreateParams : LPVOID,
    hInstance : HINSTANCE,
    hMenu : HMENU,
    hwndParent : HWND,
    cy : Int,
    cx : Int,
    y : Int,
    x : Int,
    style : CLong,
    lpszName : LPCWSTR,
    lpszClass : LPCWSTR,
    dwExStyle : CULong,
);

alias CREATESTRUCTW = Struct_tagCREATESTRUCTW;

alias LPCREATESTRUCTW = Pointer[Struct_tagCREATESTRUCTW];

record Struct_tagCBT_CREATEWNDA (
    lpcs : LPCREATESTRUCTA,
    hwndInsertAfter : HWND,
);

alias CBT_CREATEWNDA = Struct_tagCBT_CREATEWNDA;

alias LPCBT_CREATEWNDA = Pointer[Struct_tagCBT_CREATEWNDA];

record Struct_tagCBT_CREATEWNDW (
    lpcs : LPCREATESTRUCTW,
    hwndInsertAfter : HWND,
);

alias CBT_CREATEWNDW = Struct_tagCBT_CREATEWNDW;

alias LPCBT_CREATEWNDW = Pointer[Struct_tagCBT_CREATEWNDW];

record Struct_tagCBTACTIVATESTRUCT (
    fMouse : Int,
    hWndActive : HWND,
);

alias CBTACTIVATESTRUCT = Struct_tagCBTACTIVATESTRUCT;

alias LPCBTACTIVATESTRUCT = Pointer[Struct_tagCBTACTIVATESTRUCT];

record Struct_tagCLIENTCREATESTRUCT (
    hWindowMenu : HANDLE,
    idFirstChild : UInt,
);

alias CLIENTCREATESTRUCT = Struct_tagCLIENTCREATESTRUCT;

alias LPCLIENTCREATESTRUCT = Pointer[Struct_tagCLIENTCREATESTRUCT];

record Struct_tagCOMPAREITEMSTRUCT (
    CtlType : UInt,
    CtlID : UInt,
    hwndItem : HWND,
    itemID1 : UInt,
    itemData1 : CULong,
    itemID2 : UInt,
    itemData2 : CULong,
    dwLocaleId : CULong,
);

alias COMPAREITEMSTRUCT = Struct_tagCOMPAREITEMSTRUCT;

alias LPCOMPAREITEMSTRUCT = Pointer[Struct_tagCOMPAREITEMSTRUCT];

record Struct_tagCOPYDATASTRUCT (
    dwData : CULong,
    cbData : CULong,
    lpData : PVOID,
);

alias COPYDATASTRUCT = Struct_tagCOPYDATASTRUCT;

alias PCOPYDATASTRUCT = Pointer[Struct_tagCOPYDATASTRUCT];

record Struct_tagCURSORSHAPE (
    xHotSpot : Int,
    yHotSpot : Int,
    cx : Int,
    cy : Int,
    cbWidth : Int,
    Planes : CUChar,
    BitsPixel : CUChar,
);

alias CURSORSHAPE = Struct_tagCURSORSHAPE;

alias LPCURSORSHAPE = Pointer[Struct_tagCURSORSHAPE];

record Struct_tagCWPRETSTRUCT (
    lResult : CLong,
    lParam : CLong,
    wParam : UInt,
    message : CULong,
    hwnd : HWND,
);

alias CWPRETSTRUCT = Struct_tagCWPRETSTRUCT;

record Struct_tagCWPSTRUCT (
    lParam : CLong,
    wParam : UInt,
    message : UInt,
    hwnd : HWND,
);

alias CWPSTRUCT = Struct_tagCWPSTRUCT;

alias PCWPSTRUCT = Pointer[Struct_tagCWPSTRUCT];

record Struct_tagDEBUGHOOKINFO (
    idThread : CULong,
    idThreadInstaller : CULong,
    lParam : CLong,
    wParam : UInt,
    code : Int,
);

alias DEBUGHOOKINFO = Struct_tagDEBUGHOOKINFO;

alias PDEBUGHOOKINFO = Pointer[Struct_tagDEBUGHOOKINFO];

alias LPDEBUGHOOKINFO = Pointer[Struct_tagDEBUGHOOKINFO];

record Struct_tagDELETEITEMSTRUCT (
    CtlType : UInt,
    CtlID : UInt,
    itemID : UInt,
    hwndItem : HWND,
    itemData : UInt,
);

alias DELETEITEMSTRUCT = Struct_tagDELETEITEMSTRUCT;

alias PDELETEITEMSTRUCT = Pointer[Struct_tagDELETEITEMSTRUCT];

alias LPDELETEITEMSTRUCT = Pointer[Struct_tagDELETEITEMSTRUCT];

record UnnamedStruct6 (
    style : CULong,
    dwExtendedStyle : CULong,
    x : Short,
    y : Short,
    cx : Short,
    cy : Short,
    id : UShort,
);

alias DLGITEMTEMPLATE = UnnamedStruct6;

alias LPDLGITEMTEMPLATE = Pointer[UnnamedStruct6];

record UnnamedStruct7 (
    style : CULong,
    dwExtendedStyle : CULong,
    cdit : UShort,
    x : Short,
    y : Short,
    cx : Short,
    cy : Short,
);

alias DLGTEMPLATE = UnnamedStruct7;

alias LPDLGTEMPLATE = Pointer[UnnamedStruct7];

alias LPDLGTEMPLATEA = Pointer[UnnamedStruct7];

alias LPDLGTEMPLATEW = Pointer[UnnamedStruct7];

alias LPCDLGTEMPLATE = Pointer[DLGTEMPLATE];

record Struct_tagDRAWITEMSTRUCT (
    CtlType : UInt,
    CtlID : UInt,
    itemID : UInt,
    itemAction : UInt,
    itemState : UInt,
    hwndItem : HWND,
    hDC : HDC,
    rcItem : RECT,
    itemData : CULong,
);

alias DRAWITEMSTRUCT = Struct_tagDRAWITEMSTRUCT;

alias LPDRAWITEMSTRUCT = Pointer[Struct_tagDRAWITEMSTRUCT];

alias PDRAWITEMSTRUCT = Pointer[Struct_tagDRAWITEMSTRUCT];

record UnnamedStruct8 (
    cbSize : UInt,
    iTabLength : Int,
    iLeftMargin : Int,
    iRightMargin : Int,
    uiLengthDrawn : UInt,
);

alias DRAWTEXTPARAMS = UnnamedStruct8;

alias LPDRAWTEXTPARAMS = Pointer[UnnamedStruct8];

record Struct_tagPAINTSTRUCT (
    hdc : HDC,
    fErase : Int,
    rcPaint : RECT,
    fRestore : Int,
    fIncUpdate : Int,
    rgbReserved : Array[CUChar,32],
);

alias PAINTSTRUCT = Struct_tagPAINTSTRUCT;

alias LPPAINTSTRUCT = Pointer[Struct_tagPAINTSTRUCT];

record Struct_tagMSG (
    hwnd : HWND,
    message : UInt,
    wParam : UInt,
    lParam : CLong,
    time : CULong,
    pt : POINT,
);

alias MSG = Struct_tagMSG;

alias LPMSG = Pointer[Struct_tagMSG];

alias PMSG = Pointer[Struct_tagMSG];

record Struct__ICONINFO (
    fIcon : Int,
    xHotspot : CULong,
    yHotspot : CULong,
    hbmMask : HBITMAP,
    hbmColor : HBITMAP,
);

alias ICONINFO = Struct__ICONINFO;

alias PICONINFO = Pointer[Struct__ICONINFO];

record Struct_tagNMHDR (
    hwndFrom : HWND,
    idFrom : UInt,
    code : UInt,
);

alias NMHDR = Struct_tagNMHDR;

alias LPNMHDR = Pointer[Struct_tagNMHDR];

record Struct__WNDCLASSA (
    style : UInt,
    lpfnWndProc : WNDPROC,
    cbClsExtra : Int,
    cbWndExtra : Int,
    hInstance : HINSTANCE,
    hIcon : HICON,
    hCursor : HCURSOR,
    hbrBackground : HBRUSH,
    lpszMenuName : LPCSTR,
    lpszClassName : LPCSTR,
);

alias WNDCLASSA = Struct__WNDCLASSA;

alias LPWNDCLASSA = Pointer[Struct__WNDCLASSA];

alias PWNDCLASSA = Pointer[Struct__WNDCLASSA];

record Struct__WNDCLASSW (
    style : UInt,
    lpfnWndProc : WNDPROC,
    cbClsExtra : Int,
    cbWndExtra : Int,
    hInstance : HINSTANCE,
    hIcon : HICON,
    hCursor : HCURSOR,
    hbrBackground : HBRUSH,
    lpszMenuName : LPCWSTR,
    lpszClassName : LPCWSTR,
);

alias WNDCLASSW = Struct__WNDCLASSW;

alias LPWNDCLASSW = Pointer[Struct__WNDCLASSW];

alias PWNDCLASSW = Pointer[Struct__WNDCLASSW];

record Struct__WNDCLASSEXA (
    cbSize : UInt,
    style : UInt,
    lpfnWndProc : WNDPROC,
    cbClsExtra : Int,
    cbWndExtra : Int,
    hInstance : HINSTANCE,
    hIcon : HICON,
    hCursor : HCURSOR,
    hbrBackground : HBRUSH,
    lpszMenuName : LPCSTR,
    lpszClassName : LPCSTR,
    hIconSm : HICON,
);

alias WNDCLASSEXA = Struct__WNDCLASSEXA;

alias LPWNDCLASSEXA = Pointer[Struct__WNDCLASSEXA];

alias PWNDCLASSEXA = Pointer[Struct__WNDCLASSEXA];

record Struct__WNDCLASSEXW (
    cbSize : UInt,
    style : UInt,
    lpfnWndProc : WNDPROC,
    cbClsExtra : Int,
    cbWndExtra : Int,
    hInstance : HINSTANCE,
    hIcon : HICON,
    hCursor : HCURSOR,
    hbrBackground : HBRUSH,
    lpszMenuName : LPCWSTR,
    lpszClassName : LPCWSTR,
    hIconSm : HICON,
);

alias WNDCLASSEXW = Struct__WNDCLASSEXW;

alias LPWNDCLASSEXW = Pointer[Struct__WNDCLASSEXW];

alias PWNDCLASSEXW = Pointer[Struct__WNDCLASSEXW];

record Struct_tagMENUITEMINFOA (
    cbSize : UInt,
    fMask : UInt,
    fType : UInt,
    fState : UInt,
    wID : UInt,
    hSubMenu : HMENU,
    hbmpChecked : HBITMAP,
    hbmpUnchecked : HBITMAP,
    dwItemData : CULong,
    dwTypeData : LPSTR,
    cch : UInt,
);

alias MENUITEMINFOA = Struct_tagMENUITEMINFOA;

alias LPMENUITEMINFOA = Pointer[Struct_tagMENUITEMINFOA];

alias LPCMENUITEMINFOA = Pointer[MENUITEMINFOA];

record Struct_tagMENUITEMINFOW (
    cbSize : UInt,
    fMask : UInt,
    fType : UInt,
    fState : UInt,
    wID : UInt,
    hSubMenu : HMENU,
    hbmpChecked : HBITMAP,
    hbmpUnchecked : HBITMAP,
    dwItemData : CULong,
    dwTypeData : LPWSTR,
    cch : UInt,
);

alias MENUITEMINFOW = Struct_tagMENUITEMINFOW;

alias LPMENUITEMINFOW = Pointer[Struct_tagMENUITEMINFOW];

alias LPCMENUITEMINFOW = Pointer[MENUITEMINFOW];

record Struct_tagSCROLLINFO (
    cbSize : UInt,
    fMask : UInt,
    nMin : Int,
    nMax : Int,
    nPage : UInt,
    nPos : Int,
    nTrackPos : Int,
);

alias SCROLLINFO = Struct_tagSCROLLINFO;

alias LPSCROLLINFO = Pointer[Struct_tagSCROLLINFO];

alias LPCSCROLLINFO = Pointer[SCROLLINFO];

record Struct__WINDOWPLACEMENT (
    length : UInt,
    flags : UInt,
    showCmd : UInt,
    ptMinPosition : POINT,
    ptMaxPosition : POINT,
    rcNormalPosition : RECT,
);

alias WINDOWPLACEMENT = Struct__WINDOWPLACEMENT;

alias LPWINDOWPLACEMENT = Pointer[Struct__WINDOWPLACEMENT];

alias PWINDOWPLACEMENT = Pointer[Struct__WINDOWPLACEMENT];

record UnnamedStruct9 (
    versionNumber : UShort,
    offset : UShort,
);

alias MENUITEMTEMPLATEHEADER = UnnamedStruct9;

record UnnamedStruct10 (
    mtOption : UShort,
    mtID : UShort,
    mtString : Array[UShort,1],
);

alias MENUITEMTEMPLATE = UnnamedStruct10;

alias MENUTEMPLATE = Void;

alias MENUTEMPLATEA = Void;

alias MENUTEMPLATEW = Void;

alias LPMENUTEMPLATEA = RawPointer;

alias LPMENUTEMPLATEW = RawPointer;

alias LPMENUTEMPLATE = RawPointer;

record Struct_tagHELPINFO (
    cbSize : UInt,
    iContextType : Int,
    iCtrlId : Int,
    hItemHandle : HANDLE,
    dwContextId : CULong,
    MousePos : POINT,
);

alias HELPINFO = Struct_tagHELPINFO;

alias LPHELPINFO = Pointer[Struct_tagHELPINFO];

alias MSGBOXCALLBACK = StdCallCodePointer[(Pointer[Struct_tagHELPINFO]),()];

record UnnamedStruct11 (
    cbSize : UInt,
    hwndOwner : HWND,
    hInstance : HINSTANCE,
    lpszText : LPCSTR,
    lpszCaption : LPCSTR,
    dwStyle : CULong,
    lpszIcon : LPCSTR,
    dwContextHelpId : CULong,
    lpfnMsgBoxCallback : MSGBOXCALLBACK,
    dwLanguageId : CULong,
);

alias MSGBOXPARAMSA = UnnamedStruct11;

alias PMSGBOXPARAMSA = Pointer[UnnamedStruct11];

alias LPMSGBOXPARAMSA = Pointer[UnnamedStruct11];

record UnnamedStruct12 (
    cbSize : UInt,
    hwndOwner : HWND,
    hInstance : HINSTANCE,
    lpszText : LPCWSTR,
    lpszCaption : LPCWSTR,
    dwStyle : CULong,
    lpszIcon : LPCWSTR,
    dwContextHelpId : CULong,
    lpfnMsgBoxCallback : MSGBOXCALLBACK,
    dwLanguageId : CULong,
);

alias MSGBOXPARAMSW = UnnamedStruct12;

alias PMSGBOXPARAMSW = Pointer[UnnamedStruct12];

alias LPMSGBOXPARAMSW = Pointer[UnnamedStruct12];

record Struct_tagUSEROBJECTFLAGS (
    fInherit : Int,
    fReserved : Int,
    dwFlags : CULong,
);

alias USEROBJECTFLAGS = Struct_tagUSEROBJECTFLAGS;

record Struct_tagFILTERKEYS (
    cbSize : UInt,
    dwFlags : CULong,
    iWaitMSec : CULong,
    iDelayMSec : CULong,
    iRepeatMSec : CULong,
    iBounceMSec : CULong,
);

alias FILTERKEYS = Struct_tagFILTERKEYS;

record Struct_tagHIGHCONTRASTA (
    cbSize : UInt,
    dwFlags : CULong,
    lpszDefaultScheme : LPSTR,
);

alias HIGHCONTRASTA = Struct_tagHIGHCONTRASTA;

alias LPHIGHCONTRASTA = Pointer[Struct_tagHIGHCONTRASTA];

record Struct_tagHIGHCONTRASTW (
    cbSize : UInt,
    dwFlags : CULong,
    lpszDefaultScheme : LPWSTR,
);

alias HIGHCONTRASTW = Struct_tagHIGHCONTRASTW;

alias LPHIGHCONTRASTW = Pointer[Struct_tagHIGHCONTRASTW];

record Struct_tagICONMETRICSA (
    cbSize : UInt,
    iHorzSpacing : Int,
    iVertSpacing : Int,
    iTitleWrap : Int,
    lfFont : LOGFONTA,
);

alias ICONMETRICSA = Struct_tagICONMETRICSA;

alias LPICONMETRICSA = Pointer[Struct_tagICONMETRICSA];

record Struct_tagICONMETRICSW (
    cbSize : UInt,
    iHorzSpacing : Int,
    iVertSpacing : Int,
    iTitleWrap : Int,
    lfFont : LOGFONTW,
);

alias ICONMETRICSW = Struct_tagICONMETRICSW;

alias LPICONMETRICSW = Pointer[Struct_tagICONMETRICSW];

record Struct_tagMINIMIZEDMETRICS (
    cbSize : UInt,
    iWidth : Int,
    iHorzGap : Int,
    iVertGap : Int,
    iArrange : Int,
);

alias MINIMIZEDMETRICS = Struct_tagMINIMIZEDMETRICS;

alias LPMINIMIZEDMETRICS = Pointer[Struct_tagMINIMIZEDMETRICS];

record Struct_tagMOUSEKEYS (
    cbSize : UInt,
    dwFlags : CULong,
    iMaxSpeed : CULong,
    iTimeToMaxSpeed : CULong,
    iCtrlSpeed : CULong,
    dwReserved1 : CULong,
    dwReserved2 : CULong,
);

alias MOUSEKEYS = Struct_tagMOUSEKEYS;

alias LPMOUSEKEYS = Pointer[Struct_tagMOUSEKEYS];

record Struct_tagNONCLIENTMETRICSA (
    cbSize : UInt,
    iBorderWidth : Int,
    iScrollWidth : Int,
    iScrollHeight : Int,
    iCaptionWidth : Int,
    iCaptionHeight : Int,
    lfCaptionFont : LOGFONTA,
    iSmCaptionWidth : Int,
    iSmCaptionHeight : Int,
    lfSmCaptionFont : LOGFONTA,
    iMenuWidth : Int,
    iMenuHeight : Int,
    lfMenuFont : LOGFONTA,
    lfStatusFont : LOGFONTA,
    lfMessageFont : LOGFONTA,
);

alias NONCLIENTMETRICSA = Struct_tagNONCLIENTMETRICSA;

alias LPNONCLIENTMETRICSA = Pointer[Struct_tagNONCLIENTMETRICSA];

record Struct_tagNONCLIENTMETRICSW (
    cbSize : UInt,
    iBorderWidth : Int,
    iScrollWidth : Int,
    iScrollHeight : Int,
    iCaptionWidth : Int,
    iCaptionHeight : Int,
    lfCaptionFont : LOGFONTW,
    iSmCaptionWidth : Int,
    iSmCaptionHeight : Int,
    lfSmCaptionFont : LOGFONTW,
    iMenuWidth : Int,
    iMenuHeight : Int,
    lfMenuFont : LOGFONTW,
    lfStatusFont : LOGFONTW,
    lfMessageFont : LOGFONTW,
);

alias NONCLIENTMETRICSW = Struct_tagNONCLIENTMETRICSW;

alias LPNONCLIENTMETRICSW = Pointer[Struct_tagNONCLIENTMETRICSW];

record Struct_tagSERIALKEYSA (
    cbSize : UInt,
    dwFlags : CULong,
    lpszActivePort : LPSTR,
    lpszPort : LPSTR,
    iBaudRate : UInt,
    iPortState : UInt,
    iActive : UInt,
);

alias SERIALKEYSA = Struct_tagSERIALKEYSA;

alias LPSERIALKEYSA = Pointer[Struct_tagSERIALKEYSA];

record Struct_tagSERIALKEYSW (
    cbSize : UInt,
    dwFlags : CULong,
    lpszActivePort : LPWSTR,
    lpszPort : LPWSTR,
    iBaudRate : UInt,
    iPortState : UInt,
    iActive : UInt,
);

alias SERIALKEYSW = Struct_tagSERIALKEYSW;

alias LPSERIALKEYSW = Pointer[Struct_tagSERIALKEYSW];

record Struct_tagSOUNDSENTRYA (
    cbSize : UInt,
    dwFlags : CULong,
    iFSTextEffect : CULong,
    iFSTextEffectMSec : CULong,
    iFSTextEffectColorBits : CULong,
    iFSGrafEffect : CULong,
    iFSGrafEffectMSec : CULong,
    iFSGrafEffectColor : CULong,
    iWindowsEffect : CULong,
    iWindowsEffectMSec : CULong,
    lpszWindowsEffectDLL : LPSTR,
    iWindowsEffectOrdinal : CULong,
);

alias SOUNDSENTRYA = Struct_tagSOUNDSENTRYA;

alias LPSOUNDSENTRYA = Pointer[Struct_tagSOUNDSENTRYA];

record Struct_tagSOUNDSENTRYW (
    cbSize : UInt,
    dwFlags : CULong,
    iFSTextEffect : CULong,
    iFSTextEffectMSec : CULong,
    iFSTextEffectColorBits : CULong,
    iFSGrafEffect : CULong,
    iFSGrafEffectMSec : CULong,
    iFSGrafEffectColor : CULong,
    iWindowsEffect : CULong,
    iWindowsEffectMSec : CULong,
    lpszWindowsEffectDLL : LPWSTR,
    iWindowsEffectOrdinal : CULong,
);

alias SOUNDSENTRYW = Struct_tagSOUNDSENTRYW;

alias LPSOUNDSENTRYW = Pointer[Struct_tagSOUNDSENTRYW];

record Struct_tagSTICKYKEYS (
    cbSize : CULong,
    dwFlags : CULong,
);

alias STICKYKEYS = Struct_tagSTICKYKEYS;

alias LPSTICKYKEYS = Pointer[Struct_tagSTICKYKEYS];

record Struct_tagTOGGLEKEYS (
    cbSize : CULong,
    dwFlags : CULong,
);

alias TOGGLEKEYS = Struct_tagTOGGLEKEYS;

record Struct_tagMOUSEHOOKSTRUCT (
    pt : POINT,
    hwnd : HWND,
    wHitTestCode : UInt,
    dwExtraInfo : CULong,
);

alias MOUSEHOOKSTRUCT = Struct_tagMOUSEHOOKSTRUCT;

alias LPMOUSEHOOKSTRUCT = Pointer[Struct_tagMOUSEHOOKSTRUCT];

alias PMOUSEHOOKSTRUCT = Pointer[Struct_tagMOUSEHOOKSTRUCT];

record Struct_tagTRACKMOUSEEVENT (
    cbSize : CULong,
    dwFlags : CULong,
    hwndTrack : HWND,
    dwHoverTime : CULong,
);

alias TRACKMOUSEEVENT = Struct_tagTRACKMOUSEEVENT;

alias LPTRACKMOUSEEVENT = Pointer[Struct_tagTRACKMOUSEEVENT];

record Struct_tagTPMPARAMS (
    cbSize : UInt,
    rcExclude : RECT,
);

alias TPMPARAMS = Struct_tagTPMPARAMS;

alias LPTPMPARAMS = Pointer[Struct_tagTPMPARAMS];

record Struct_tagEVENTMSG (
    message : UInt,
    paramL : UInt,
    paramH : UInt,
    time : CULong,
    hwnd : HWND,
);

alias EVENTMSG = Struct_tagEVENTMSG;

alias PEVENTMSGMSG = Pointer[Struct_tagEVENTMSG];

alias LPEVENTMSGMSG = Pointer[Struct_tagEVENTMSG];

alias PEVENTMSG = Pointer[Struct_tagEVENTMSG];

alias LPEVENTMSG = Pointer[Struct_tagEVENTMSG];

record Struct__WINDOWPOS (
    hwnd : HWND,
    hwndInsertAfter : HWND,
    x : Int,
    y : Int,
    cx : Int,
    cy : Int,
    flags : UInt,
);

alias WINDOWPOS = Struct__WINDOWPOS;

alias PWINDOWPOS = Pointer[Struct__WINDOWPOS];

alias LPWINDOWPOS = Pointer[Struct__WINDOWPOS];

record Struct_tagNCCALCSIZE_PARAMS (
    rgrc : Array[RECT,3],
    lppos : PWINDOWPOS,
);

alias NCCALCSIZE_PARAMS = Struct_tagNCCALCSIZE_PARAMS;

alias LPNCCALCSIZE_PARAMS = Pointer[Struct_tagNCCALCSIZE_PARAMS];

record Struct_tagMDICREATESTRUCTA (
    szClass : LPCSTR,
    szTitle : LPCSTR,
    hOwner : HANDLE,
    x : Int,
    y : Int,
    cx : Int,
    cy : Int,
    style : CULong,
    lParam : CLong,
);

alias MDICREATESTRUCTA = Struct_tagMDICREATESTRUCTA;

alias LPMDICREATESTRUCTA = Pointer[Struct_tagMDICREATESTRUCTA];

record Struct_tagMDICREATESTRUCTW (
    szClass : LPCWSTR,
    szTitle : LPCWSTR,
    hOwner : HANDLE,
    x : Int,
    y : Int,
    cx : Int,
    cy : Int,
    style : CULong,
    lParam : CLong,
);

alias MDICREATESTRUCTW = Struct_tagMDICREATESTRUCTW;

alias LPMDICREATESTRUCTW = Pointer[Struct_tagMDICREATESTRUCTW];

record Struct_tagMINMAXINFO (
    ptReserved : POINT,
    ptMaxSize : POINT,
    ptMaxPosition : POINT,
    ptMinTrackSize : POINT,
    ptMaxTrackSize : POINT,
);

alias MINMAXINFO = Struct_tagMINMAXINFO;

alias PMINMAXINFO = Pointer[Struct_tagMINMAXINFO];

alias LPMINMAXINFO = Pointer[Struct_tagMINMAXINFO];

record Struct_tagMDINEXTMENU (
    hmenuIn : HMENU,
    hmenuNext : HMENU,
    hwndNext : HWND,
);

alias MDINEXTMENU = Struct_tagMDINEXTMENU;

alias PMDINEXTMENU = Pointer[Struct_tagMDINEXTMENU];

alias LPMDINEXTMENU = Pointer[Struct_tagMDINEXTMENU];

record Struct_tagMEASUREITEMSTRUCT (
    CtlType : UInt,
    CtlID : UInt,
    itemID : UInt,
    itemWidth : UInt,
    itemHeight : UInt,
    itemData : CULong,
);

alias MEASUREITEMSTRUCT = Struct_tagMEASUREITEMSTRUCT;

alias PMEASUREITEMSTRUCT = Pointer[Struct_tagMEASUREITEMSTRUCT];

alias LPMEASUREITEMSTRUCT = Pointer[Struct_tagMEASUREITEMSTRUCT];

record Struct_tagDROPSTRUCT (
    hwndSource : HWND,
    hwndSink : HWND,
    wFmt : CULong,
    dwData : CULong,
    ptDrop : POINT,
    dwControlData : CULong,
);

alias DROPSTRUCT = Struct_tagDROPSTRUCT;

alias PDROPSTRUCT = Pointer[Struct_tagDROPSTRUCT];

alias LPDROPSTRUCT = Pointer[Struct_tagDROPSTRUCT];

alias HELPPOLY = CULong;

record Struct_tagMULTIKEYHELPA (
    mkSize : CULong,
    mkKeylist : CChar,
    szKeyphrase : Array[CChar,1],
);

alias MULTIKEYHELPA = Struct_tagMULTIKEYHELPA;

alias PMULTIKEYHELPA = Pointer[Struct_tagMULTIKEYHELPA];

alias LPMULTIKEYHELPA = Pointer[Struct_tagMULTIKEYHELPA];

record Struct_tagMULTIKEYHELPW (
    mkSize : CULong,
    mkKeylist : UShort,
    szKeyphrase : Array[UShort,1],
);

alias MULTIKEYHELPW = Struct_tagMULTIKEYHELPW;

alias PMULTIKEYHELPW = Pointer[Struct_tagMULTIKEYHELPW];

alias LPMULTIKEYHELPW = Pointer[Struct_tagMULTIKEYHELPW];

record Struct_tagHELPWININFOA (
    wStructSize : Int,
    x : Int,
    y : Int,
    dx : Int,
    dy : Int,
    wMax : Int,
    rgchMember : Array[CChar,2],
);

alias HELPWININFOA = Struct_tagHELPWININFOA;

alias PHELPWININFOA = Pointer[Struct_tagHELPWININFOA];

alias LPHELPWININFOA = Pointer[Struct_tagHELPWININFOA];

record Struct_tagHELPWININFOW (
    wStructSize : Int,
    x : Int,
    y : Int,
    dx : Int,
    dy : Int,
    wMax : Int,
    rgchMember : Array[UShort,2],
);

alias HELPWININFOW = Struct_tagHELPWININFOW;

alias PHELPWININFOW = Pointer[Struct_tagHELPWININFOW];

alias LPHELPWININFOW = Pointer[Struct_tagHELPWININFOW];

record Struct_tagSTYLESTRUCT (
    styleOld : CULong,
    styleNew : CULong,
);

alias STYLESTRUCT = Struct_tagSTYLESTRUCT;

alias LPSTYLESTRUCT = Pointer[Struct_tagSTYLESTRUCT];

record Struct_tagALTTABINFO (
    cbSize : CULong,
    cItems : Int,
    cColumns : Int,
    cRows : Int,
    iColFocus : Int,
    iRowFocus : Int,
    cxItem : Int,
    cyItem : Int,
    ptStart : POINT,
);

alias ALTTABINFO = Struct_tagALTTABINFO;

alias PALTTABINFO = Pointer[Struct_tagALTTABINFO];

alias LPALTTABINFO = Pointer[Struct_tagALTTABINFO];

record Struct_tagCOMBOBOXINFO (
    cbSize : CULong,
    rcItem : RECT,
    rcButton : RECT,
    stateButton : CULong,
    hwndCombo : HWND,
    hwndItem : HWND,
    hwndList : HWND,
);

alias COMBOBOXINFO = Struct_tagCOMBOBOXINFO;

alias PCOMBOBOXINFO = Pointer[Struct_tagCOMBOBOXINFO];

alias LPCOMBOBOXINFO = Pointer[Struct_tagCOMBOBOXINFO];

record Struct_tagCURSORINFO (
    cbSize : CULong,
    flags : CULong,
    hCursor : HCURSOR,
    ptScreenPos : POINT,
);

alias CURSORINFO = Struct_tagCURSORINFO;

alias PCURSORINFO = Pointer[Struct_tagCURSORINFO];

alias LPCURSORINFO = Pointer[Struct_tagCURSORINFO];

record Struct_tagMENUBARINFO (
    cbSize : CULong,
    rcBar : RECT,
    hMenu : HMENU,
    hwndMenu : HWND,
    fBarFocused : Int,
    fFocused : Int,
);

alias MENUBARINFO = Struct_tagMENUBARINFO;

alias PMENUBARINFO = Pointer[Struct_tagMENUBARINFO];

record Struct_tagMENUINFO (
    cbSize : CULong,
    fMask : CULong,
    dwStyle : CULong,
    cyMax : UInt,
    hbrBack : HBRUSH,
    dwContextHelpID : CULong,
    dwMenuData : CULong,
);

alias MENUINFO = Struct_tagMENUINFO;

alias LPMENUINFO = Pointer[Struct_tagMENUINFO];

alias LPCMENUINFO = Pointer[MENUINFO];

record Struct_tagSCROLLBARINFO (
    cbSize : CULong,
    rcScrollBar : RECT,
    dxyLineButton : Int,
    xyThumbTop : Int,
    xyThumbBottom : Int,
    reserved : Int,
    rgstate : Array[CULong,6],
);

alias SCROLLBARINFO = Struct_tagSCROLLBARINFO;

alias PSCROLLBARINFO = Pointer[Struct_tagSCROLLBARINFO];

alias LPSCROLLBARINFO = Pointer[Struct_tagSCROLLBARINFO];

record Struct_tagWINDOWINFO (
    cbSize : CULong,
    rcWindow : RECT,
    rcClient : RECT,
    dwStyle : CULong,
    dwExStyle : CULong,
    dwWindowStatus : CULong,
    cxWindowBorders : UInt,
    cyWindowBorders : UInt,
    atomWindowType : UShort,
    wCreatorVersion : UShort,
);

alias WINDOWINFO = Struct_tagWINDOWINFO;

alias PWINDOWINFO = Pointer[Struct_tagWINDOWINFO];

alias LPWINDOWINFO = Pointer[Struct_tagWINDOWINFO];

record Struct_tagLASTINPUTINFO (
    cbSize : UInt,
    dwTime : CULong,
);

alias LASTINPUTINFO = Struct_tagLASTINPUTINFO;

alias PLASTINPUTINFO = Pointer[Struct_tagLASTINPUTINFO];

record Struct_tagMONITORINFO (
    cbSize : CULong,
    rcMonitor : RECT,
    rcWork : RECT,
    dwFlags : CULong,
);

alias MONITORINFO = Struct_tagMONITORINFO;

alias LPMONITORINFO = Pointer[Struct_tagMONITORINFO];

record Struct_tagMONITORINFOEXA (
    cbSize : CULong,
    rcMonitor : RECT,
    rcWork : RECT,
    dwFlags : CULong,
    szDevice : Array[CChar,32],
);

alias MONITORINFOEXA = Struct_tagMONITORINFOEXA;

alias LPMONITORINFOEXA = Pointer[Struct_tagMONITORINFOEXA];

record Struct_tagMONITORINFOEXW (
    cbSize : CULong,
    rcMonitor : RECT,
    rcWork : RECT,
    dwFlags : CULong,
    szDevice : Array[UShort,32],
);

alias MONITORINFOEXW = Struct_tagMONITORINFOEXW;

alias LPMONITORINFOEXW = Pointer[Struct_tagMONITORINFOEXW];

record Struct_tagKBDLLHOOKSTRUCT (
    vkCode : CULong,
    scanCode : CULong,
    flags : CULong,
    time : CULong,
    dwExtraInfo : CULong,
);

alias KBDLLHOOKSTRUCT = Struct_tagKBDLLHOOKSTRUCT;

alias LPKBDLLHOOKSTRUCT = Pointer[Struct_tagKBDLLHOOKSTRUCT];

alias PKBDLLHOOKSTRUCT = Pointer[Struct_tagKBDLLHOOKSTRUCT];

record UnnamedStruct13 (
    pt : POINT,
    mouseData : CULong,
    flags : CULong,
    time : CULong,
    dwExtraInfo : CULong,
);

alias MSLLHOOKSTRUCT = UnnamedStruct13;

alias PMSLLHOOKSTRUCT = Pointer[UnnamedStruct13];

alias LPCGUID = Pointer[GUID];

external (stdcall) ActivateKeyboardLayout(
    argument0 : HKL,
    argument1 : UInt) HKL;

external (stdcall) AdjustWindowRect(
    argument0 : LPRECT,
    argument1 : CULong,
    argument2 : Int) Int;

external (stdcall) AdjustWindowRectEx(
    argument0 : LPRECT,
    argument1 : CULong,
    argument2 : Int,
    argument3 : CULong) Int;

external (stdcall) AnyPopup() Int;

external (stdcall) AppendMenuA(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : LPCSTR) Int;

external (stdcall) AppendMenuW(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : LPCWSTR) Int;

external (stdcall) ArrangeIconicWindows(
    argument0 : HWND) UInt;

external (stdcall) AttachThreadInput(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : Int) Int;

external (stdcall) BeginDeferWindowPos(
    argument0 : Int) HDWP;

external (stdcall) BeginPaint(
    argument0 : HWND,
    argument1 : LPPAINTSTRUCT) HDC;

external (stdcall) BringWindowToTop(
    argument0 : HWND) Int;

external (stdcall) BroadcastSystemMessage(
    argument0 : CULong,
    argument1 : LPDWORD,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : CLong) CLong;

external (stdcall) BroadcastSystemMessageA(
    argument0 : CULong,
    argument1 : LPDWORD,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : CLong) CLong;

external (stdcall) BroadcastSystemMessageW(
    argument0 : CULong,
    argument1 : LPDWORD,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : CLong) CLong;

external (stdcall) CallMsgFilterA(
    argument0 : LPMSG,
    argument1 : Int) Int;

external (stdcall) CallMsgFilterW(
    argument0 : LPMSG,
    argument1 : Int) Int;

external (stdcall) CallNextHookEx(
    argument0 : HHOOK,
    argument1 : Int,
    argument2 : UInt,
    argument3 : CLong) CLong;

external (stdcall) CallWindowProcA(
    argument0 : WNDPROC,
    argument1 : HWND,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : CLong) CLong;

external (stdcall) CallWindowProcW(
    argument0 : WNDPROC,
    argument1 : HWND,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : CLong) CLong;

external (stdcall) CascadeWindows(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : LPCRECT,
    argument3 : UInt,
    argument4 : Pointer[HWND]) UShort;

external (stdcall) ChangeClipboardChain(
    argument0 : HWND,
    argument1 : HWND) Int;

external (stdcall) ChangeDisplaySettingsA(
    argument0 : PDEVMODEA,
    argument1 : CULong) CLong;

external (stdcall) ChangeDisplaySettingsW(
    argument0 : PDEVMODEW,
    argument1 : CULong) CLong;

external (stdcall) ChangeDisplaySettingsExA(
    argument0 : LPCSTR,
    argument1 : LPDEVMODEA,
    argument2 : HWND,
    argument3 : CULong,
    argument4 : LPVOID) CLong;

external (stdcall) ChangeDisplaySettingsExW(
    argument0 : LPCWSTR,
    argument1 : LPDEVMODEW,
    argument2 : HWND,
    argument3 : CULong,
    argument4 : LPVOID) CLong;

external (stdcall) ChangeMenuA(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : LPCSTR,
    argument3 : UInt,
    argument4 : UInt) Int;

external (stdcall) ChangeMenuW(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : LPCWSTR,
    argument3 : UInt,
    argument4 : UInt) Int;

external (stdcall) CharLowerA(
    argument0 : LPSTR) LPSTR;

external (stdcall) CharLowerW(
    argument0 : LPWSTR) LPWSTR;

external (stdcall) CharLowerBuffA(
    argument0 : LPSTR,
    argument1 : CULong) CULong;

external (stdcall) CharLowerBuffW(
    argument0 : LPWSTR,
    argument1 : CULong) CULong;

external (stdcall) CharNextA(
    argument0 : LPCSTR) LPSTR;

external (stdcall) CharNextW(
    argument0 : LPCWSTR) LPWSTR;

external (stdcall) CharNextExA(
    argument0 : UShort,
    argument1 : LPCSTR,
    argument2 : CULong) LPSTR;

external (stdcall) CharPrevA(
    argument0 : LPCSTR,
    argument1 : LPCSTR) LPSTR;

external (stdcall) CharPrevW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR) LPWSTR;

external (stdcall) CharPrevExA(
    argument0 : UShort,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : CULong) LPSTR;

external (stdcall) CharToOemA(
    argument0 : LPCSTR,
    argument1 : LPSTR) Int;

external (stdcall) CharToOemW(
    argument0 : LPCWSTR,
    argument1 : LPSTR) Int;

external (stdcall) CharToOemBuffA(
    argument0 : LPCSTR,
    argument1 : LPSTR,
    argument2 : CULong) Int;

external (stdcall) CharToOemBuffW(
    argument0 : LPCWSTR,
    argument1 : LPSTR,
    argument2 : CULong) Int;

external (stdcall) CharUpperA(
    argument0 : LPSTR) LPSTR;

external (stdcall) CharUpperW(
    argument0 : LPWSTR) LPWSTR;

external (stdcall) CharUpperBuffA(
    argument0 : LPSTR,
    argument1 : CULong) CULong;

external (stdcall) CharUpperBuffW(
    argument0 : LPWSTR,
    argument1 : CULong) CULong;

external (stdcall) CheckDlgButton(
    argument0 : HWND,
    argument1 : Int,
    argument2 : UInt) Int;

external (stdcall) CheckMenuItem(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : UInt) CULong;

external (stdcall) CheckMenuRadioItem(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : UInt) Int;

external (stdcall) CheckRadioButton(
    argument0 : HWND,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int) Int;

external (stdcall) ChildWindowFromPoint(
    argument0 : HWND,
    argument1 : POINT) HWND;

external (stdcall) ChildWindowFromPointEx(
    argument0 : HWND,
    argument1 : POINT,
    argument2 : UInt) HWND;

external (stdcall) ClientToScreen(
    argument0 : HWND,
    argument1 : LPPOINT) Int;

external (stdcall) ClipCursor(
    argument0 : LPCRECT) Int;

external (stdcall) CloseClipboard() Int;

external (stdcall) CloseDesktop(
    argument0 : HDESK) Int;

external (stdcall) CloseWindow(
    argument0 : HWND) Int;

external (stdcall) CloseWindowStation(
    argument0 : HWINSTA) Int;

external (stdcall) CopyAcceleratorTableA(
    argument0 : HACCEL,
    argument1 : LPACCEL,
    argument2 : Int) Int;

external (stdcall) CopyAcceleratorTableW(
    argument0 : HACCEL,
    argument1 : LPACCEL,
    argument2 : Int) Int;

external (stdcall) CopyIcon(
    argument0 : HICON) HICON;

external (stdcall) CopyImage(
    argument0 : HANDLE,
    argument1 : UInt,
    argument2 : Int,
    argument3 : Int,
    argument4 : UInt) HANDLE;

external (stdcall) CopyRect(
    argument0 : LPRECT,
    argument1 : LPCRECT) Int;

external (stdcall) CountClipboardFormats() Int;

external (stdcall) CreateAcceleratorTableA(
    argument0 : LPACCEL,
    argument1 : Int) HACCEL;

external (stdcall) CreateAcceleratorTableW(
    argument0 : LPACCEL,
    argument1 : Int) HACCEL;

external (stdcall) CreateCaret(
    argument0 : HWND,
    argument1 : HBITMAP,
    argument2 : Int,
    argument3 : Int) Int;

external (stdcall) CreateCursor(
    argument0 : HINSTANCE,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int,
    argument5 : PCVOID,
    argument6 : PCVOID) HCURSOR;

external (stdcall) CreateDesktopA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : LPDEVMODEA,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : LPSECURITY_ATTRIBUTES) HDESK;

external (stdcall) CreateDesktopW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : LPDEVMODEW,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : LPSECURITY_ATTRIBUTES) HDESK;

external (stdcall) CreateDialogIndirectParamA(
    argument0 : HINSTANCE,
    argument1 : LPCDLGTEMPLATE,
    argument2 : HWND,
    argument3 : DLGPROC,
    argument4 : CLong) HWND;

external (stdcall) CreateDialogIndirectParamW(
    argument0 : HINSTANCE,
    argument1 : LPCDLGTEMPLATE,
    argument2 : HWND,
    argument3 : DLGPROC,
    argument4 : CLong) HWND;

external (stdcall) CreateDialogParamA(
    argument0 : HINSTANCE,
    argument1 : LPCSTR,
    argument2 : HWND,
    argument3 : DLGPROC,
    argument4 : CLong) HWND;

external (stdcall) CreateDialogParamW(
    argument0 : HINSTANCE,
    argument1 : LPCWSTR,
    argument2 : HWND,
    argument3 : DLGPROC,
    argument4 : CLong) HWND;

external (stdcall) CreateIcon(
    argument0 : HINSTANCE,
    argument1 : Int,
    argument2 : Int,
    argument3 : CUChar,
    argument4 : CUChar,
    argument5 : Pointer[CUChar],
    argument6 : Pointer[CUChar]) HICON;

external (stdcall) CreateIconFromResource(
    argument0 : PBYTE,
    argument1 : CULong,
    argument2 : Int,
    argument3 : CULong) HICON;

external (stdcall) CreateIconFromResourceEx(
    argument0 : PBYTE,
    argument1 : CULong,
    argument2 : Int,
    argument3 : CULong,
    argument4 : Int,
    argument5 : Int,
    argument6 : UInt) HICON;

external (stdcall) CreateIconIndirect(
    argument0 : PICONINFO) HICON;

external (stdcall) CreateMDIWindowA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : CULong,
    argument3 : Int,
    argument4 : Int,
    argument5 : Int,
    argument6 : Int,
    argument7 : HWND,
    argument8 : HINSTANCE,
    argument9 : CLong) HWND;

external (stdcall) CreateMDIWindowW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : CULong,
    argument3 : Int,
    argument4 : Int,
    argument5 : Int,
    argument6 : Int,
    argument7 : HWND,
    argument8 : HINSTANCE,
    argument9 : CLong) HWND;

external (stdcall) CreateMenu() HMENU;

external (stdcall) CreatePopupMenu() HMENU;

external (stdcall) CreateWindowExA(
    argument0 : CULong,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : CULong,
    argument4 : Int,
    argument5 : Int,
    argument6 : Int,
    argument7 : Int,
    argument8 : HWND,
    argument9 : HMENU,
    argument10 : HINSTANCE,
    argument11 : LPVOID) HWND;

external (stdcall) CreateWindowExW(
    argument0 : CULong,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR,
    argument3 : CULong,
    argument4 : Int,
    argument5 : Int,
    argument6 : Int,
    argument7 : Int,
    argument8 : HWND,
    argument9 : HMENU,
    argument10 : HINSTANCE,
    argument11 : LPVOID) HWND;

external (stdcall) CreateWindowStationA(
    argument0 : LPCSTR,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPSECURITY_ATTRIBUTES) HWINSTA;

external (stdcall) CreateWindowStationW(
    argument0 : LPCWSTR,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPSECURITY_ATTRIBUTES) HWINSTA;

external (stdcall) DefDlgProcA(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong) CLong;

external (stdcall) DefDlgProcW(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong) CLong;

external (stdcall) DeferWindowPos(
    argument0 : HDWP,
    argument1 : HWND,
    argument2 : HWND,
    argument3 : Int,
    argument4 : Int,
    argument5 : Int,
    argument6 : Int,
    argument7 : UInt) HDWP;

external (stdcall) DefFrameProcA(
    argument0 : HWND,
    argument1 : HWND,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : CLong) CLong;

external (stdcall) DefFrameProcW(
    argument0 : HWND,
    argument1 : HWND,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : CLong) CLong;

external (stdcall) DefMDIChildProcA(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong) CLong;

external (stdcall) DefMDIChildProcW(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong) CLong;

external (stdcall) DefWindowProcA(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong) CLong;

external (stdcall) DefWindowProcW(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong) CLong;

external (stdcall) DeleteMenu(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : UInt) Int;

external (stdcall) DeregisterShellHookWindow(
    argument0 : HWND) Int;

external (stdcall) DestroyAcceleratorTable(
    argument0 : HACCEL) Int;

external (stdcall) DestroyCaret() Int;

external (stdcall) DestroyCursor(
    argument0 : HCURSOR) Int;

external (stdcall) DestroyIcon(
    argument0 : HICON) Int;

external (stdcall) DestroyMenu(
    argument0 : HMENU) Int;

external (stdcall) DestroyWindow(
    argument0 : HWND) Int;

external (stdcall) DialogBoxIndirectParamA(
    argument0 : HINSTANCE,
    argument1 : LPCDLGTEMPLATE,
    argument2 : HWND,
    argument3 : DLGPROC,
    argument4 : CLong) Int;

external (stdcall) DialogBoxIndirectParamW(
    argument0 : HINSTANCE,
    argument1 : LPCDLGTEMPLATE,
    argument2 : HWND,
    argument3 : DLGPROC,
    argument4 : CLong) Int;

external (stdcall) DialogBoxParamA(
    argument0 : HINSTANCE,
    argument1 : LPCSTR,
    argument2 : HWND,
    argument3 : DLGPROC,
    argument4 : CLong) Int;

external (stdcall) DialogBoxParamW(
    argument0 : HINSTANCE,
    argument1 : LPCWSTR,
    argument2 : HWND,
    argument3 : DLGPROC,
    argument4 : CLong) Int;

external (stdcall) DispatchMessageA(
    argument0 : Pointer[MSG]) CLong;

external (stdcall) DispatchMessageW(
    argument0 : Pointer[MSG]) CLong;

external (stdcall) DlgDirListA(
    argument0 : HWND,
    argument1 : LPSTR,
    argument2 : Int,
    argument3 : Int,
    argument4 : UInt) Int;

external (stdcall) DlgDirListW(
    argument0 : HWND,
    argument1 : LPWSTR,
    argument2 : Int,
    argument3 : Int,
    argument4 : UInt) Int;

external (stdcall) DlgDirListComboBoxA(
    argument0 : HWND,
    argument1 : LPSTR,
    argument2 : Int,
    argument3 : Int,
    argument4 : UInt) Int;

external (stdcall) DlgDirListComboBoxW(
    argument0 : HWND,
    argument1 : LPWSTR,
    argument2 : Int,
    argument3 : Int,
    argument4 : UInt) Int;

external (stdcall) DlgDirSelectComboBoxExA(
    argument0 : HWND,
    argument1 : LPSTR,
    argument2 : Int,
    argument3 : Int) Int;

external (stdcall) DlgDirSelectComboBoxExW(
    argument0 : HWND,
    argument1 : LPWSTR,
    argument2 : Int,
    argument3 : Int) Int;

external (stdcall) DlgDirSelectExA(
    argument0 : HWND,
    argument1 : LPSTR,
    argument2 : Int,
    argument3 : Int) Int;

external (stdcall) DlgDirSelectExW(
    argument0 : HWND,
    argument1 : LPWSTR,
    argument2 : Int,
    argument3 : Int) Int;

external (stdcall) DragDetect(
    argument0 : HWND,
    argument1 : POINT) Int;

external (stdcall) DragObject(
    argument0 : HWND,
    argument1 : HWND,
    argument2 : UInt,
    argument3 : CULong,
    argument4 : HCURSOR) CULong;

external (stdcall) DrawAnimatedRects(
    argument0 : HWND,
    argument1 : Int,
    argument2 : LPCRECT,
    argument3 : LPCRECT) Int;

external (stdcall) DrawCaption(
    argument0 : HWND,
    argument1 : HDC,
    argument2 : LPCRECT,
    argument3 : UInt) Int;

external (stdcall) DrawEdge(
    argument0 : HDC,
    argument1 : LPRECT,
    argument2 : UInt,
    argument3 : UInt) Int;

external (stdcall) DrawFocusRect(
    argument0 : HDC,
    argument1 : LPCRECT) Int;

external (stdcall) DrawFrameControl(
    argument0 : HDC,
    argument1 : LPRECT,
    argument2 : UInt,
    argument3 : UInt) Int;

external (stdcall) DrawIcon(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : HICON) Int;

external (stdcall) DrawIconEx(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : HICON,
    argument4 : Int,
    argument5 : Int,
    argument6 : UInt,
    argument7 : HBRUSH,
    argument8 : UInt) Int;

external (stdcall) DrawMenuBar(
    argument0 : HWND) Int;

external (stdcall) DrawStateA(
    argument0 : HDC,
    argument1 : HBRUSH,
    argument2 : DRAWSTATEPROC,
    argument3 : CLong,
    argument4 : UInt,
    argument5 : Int,
    argument6 : Int,
    argument7 : Int,
    argument8 : Int,
    argument9 : UInt) Int;

external (stdcall) DrawStateW(
    argument0 : HDC,
    argument1 : HBRUSH,
    argument2 : DRAWSTATEPROC,
    argument3 : CLong,
    argument4 : UInt,
    argument5 : Int,
    argument6 : Int,
    argument7 : Int,
    argument8 : Int,
    argument9 : UInt) Int;

external (stdcall) DrawTextA(
    argument0 : HDC,
    argument1 : LPCSTR,
    argument2 : Int,
    argument3 : LPRECT,
    argument4 : UInt) Int;

external (stdcall) DrawTextW(
    argument0 : HDC,
    argument1 : LPCWSTR,
    argument2 : Int,
    argument3 : LPRECT,
    argument4 : UInt) Int;

external (stdcall) DrawTextExA(
    argument0 : HDC,
    argument1 : LPSTR,
    argument2 : Int,
    argument3 : LPRECT,
    argument4 : UInt,
    argument5 : LPDRAWTEXTPARAMS) Int;

external (stdcall) DrawTextExW(
    argument0 : HDC,
    argument1 : LPWSTR,
    argument2 : Int,
    argument3 : LPRECT,
    argument4 : UInt,
    argument5 : LPDRAWTEXTPARAMS) Int;

external (stdcall) EmptyClipboard() Int;

external (stdcall) EnableMenuItem(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : UInt) Int;

external (stdcall) EnableScrollBar(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt) Int;

external (stdcall) EnableWindow(
    argument0 : HWND,
    argument1 : Int) Int;

external (stdcall) EndDeferWindowPos(
    argument0 : HDWP) Int;

external (stdcall) EndDialog(
    argument0 : HWND,
    argument1 : Int) Int;

external (stdcall) EndMenu() Int;

external (stdcall) EndPaint(
    argument0 : HWND,
    argument1 : Pointer[PAINTSTRUCT]) Int;

external (stdcall) EnumChildWindows(
    argument0 : HWND,
    argument1 : ENUMWINDOWSPROC,
    argument2 : CLong) Int;

external (stdcall) EnumClipboardFormats(
    argument0 : UInt) UInt;

external (stdcall) EnumDesktopsA(
    argument0 : HWINSTA,
    argument1 : DESKTOPENUMPROCA,
    argument2 : CLong) Int;

external (stdcall) EnumDesktopsW(
    argument0 : HWINSTA,
    argument1 : DESKTOPENUMPROCW,
    argument2 : CLong) Int;

external (stdcall) EnumDesktopWindows(
    argument0 : HDESK,
    argument1 : ENUMWINDOWSPROC,
    argument2 : CLong) Int;

external (stdcall) EnumDisplayMonitors(
    argument0 : HDC,
    argument1 : LPCRECT,
    argument2 : MONITORENUMPROC,
    argument3 : CLong) Int;

external (stdcall) EnumDisplaySettingsA(
    argument0 : LPCSTR,
    argument1 : CULong,
    argument2 : PDEVMODEA) Int;

external (stdcall) EnumDisplaySettingsW(
    argument0 : LPCWSTR,
    argument1 : CULong,
    argument2 : PDEVMODEW) Int;

external (stdcall) EnumDisplayDevicesA(
    argument0 : LPCSTR,
    argument1 : CULong,
    argument2 : PDISPLAY_DEVICEA,
    argument3 : CULong) Int;

external (stdcall) EnumDisplayDevicesW(
    argument0 : LPCWSTR,
    argument1 : CULong,
    argument2 : PDISPLAY_DEVICEW,
    argument3 : CULong) Int;

external (stdcall) EnumPropsA(
    argument0 : HWND,
    argument1 : PROPENUMPROCA) Int;

external (stdcall) EnumPropsW(
    argument0 : HWND,
    argument1 : PROPENUMPROCW) Int;

external (stdcall) EnumPropsExA(
    argument0 : HWND,
    argument1 : PROPENUMPROCEXA,
    argument2 : CLong) Int;

external (stdcall) EnumPropsExW(
    argument0 : HWND,
    argument1 : PROPENUMPROCEXW,
    argument2 : CLong) Int;

external (stdcall) EnumThreadWindows(
    argument0 : CULong,
    argument1 : WNDENUMPROC,
    argument2 : CLong) Int;

external (stdcall) EnumWindows(
    argument0 : WNDENUMPROC,
    argument1 : CLong) Int;

external (stdcall) EnumWindowStationsA(
    argument0 : WINSTAENUMPROCA,
    argument1 : CLong) Int;

external (stdcall) EnumWindowStationsW(
    argument0 : WINSTAENUMPROCW,
    argument1 : CLong) Int;

external (stdcall) EqualRect(
    argument0 : LPCRECT,
    argument1 : LPCRECT) Int;

external (stdcall) ExitWindowsEx(
    argument0 : UInt,
    argument1 : CULong) Int;

external (stdcall) FindWindowA(
    argument0 : LPCSTR,
    argument1 : LPCSTR) HWND;

external (stdcall) FindWindowExA(
    argument0 : HWND,
    argument1 : HWND,
    argument2 : LPCSTR,
    argument3 : LPCSTR) HWND;

external (stdcall) FindWindowExW(
    argument0 : HWND,
    argument1 : HWND,
    argument2 : LPCWSTR,
    argument3 : LPCWSTR) HWND;

external (stdcall) FindWindowW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR) HWND;

external (stdcall) FlashWindow(
    argument0 : HWND,
    argument1 : Int) Int;

external (stdcall) FrameRect(
    argument0 : HDC,
    argument1 : LPCRECT,
    argument2 : HBRUSH) Int;

external (stdcall) FrameRgn(
    argument0 : HDC,
    argument1 : HRGN,
    argument2 : HBRUSH,
    argument3 : Int,
    argument4 : Int) Int;

external (stdcall) GetActiveWindow() HWND;

external (stdcall) GetAncestor(
    argument0 : HWND,
    argument1 : UInt) HWND;

external (stdcall) GetAsyncKeyState(
    argument0 : Int) Short;

external (stdcall) GetCapture() HWND;

external (stdcall) GetCaretBlinkTime() UInt;

external (stdcall) GetCaretPos(
    argument0 : LPPOINT) Int;

external (stdcall) GetClassInfoA(
    argument0 : HINSTANCE,
    argument1 : LPCSTR,
    argument2 : LPWNDCLASSA) Int;

external (stdcall) GetClassInfoExA(
    argument0 : HINSTANCE,
    argument1 : LPCSTR,
    argument2 : LPWNDCLASSEXA) Int;

external (stdcall) GetClassInfoW(
    argument0 : HINSTANCE,
    argument1 : LPCWSTR,
    argument2 : LPWNDCLASSW) Int;

external (stdcall) GetClassInfoExW(
    argument0 : HINSTANCE,
    argument1 : LPCWSTR,
    argument2 : LPWNDCLASSEXW) Int;

external (stdcall) GetClassLongA(
    argument0 : HWND,
    argument1 : Int) CULong;

external (stdcall) GetClassLongW(
    argument0 : HWND,
    argument1 : Int) CULong;

external (stdcall) GetClassNameA(
    argument0 : HWND,
    argument1 : LPSTR,
    argument2 : Int) Int;

external (stdcall) GetClassNameW(
    argument0 : HWND,
    argument1 : LPWSTR,
    argument2 : Int) Int;

external (stdcall) GetClassWord(
    argument0 : HWND,
    argument1 : Int) UShort;

external (stdcall) GetClientRect(
    argument0 : HWND,
    argument1 : LPRECT) Int;

external (stdcall) GetClipboardData(
    argument0 : UInt) HANDLE;

external (stdcall) GetClipboardFormatNameA(
    argument0 : UInt,
    argument1 : LPSTR,
    argument2 : Int) Int;

external (stdcall) GetClipboardFormatNameW(
    argument0 : UInt,
    argument1 : LPWSTR,
    argument2 : Int) Int;

external (stdcall) GetClipboardOwner() HWND;

external (stdcall) GetClipboardViewer() HWND;

external (stdcall) GetClipCursor(
    argument0 : LPRECT) Int;

external (stdcall) GetCursorPos(
    argument0 : LPPOINT) Int;

external (stdcall) GetDC(
    argument0 : HWND) HDC;

external (stdcall) GetDCEx(
    argument0 : HWND,
    argument1 : HRGN,
    argument2 : CULong) HDC;

external (stdcall) GetDesktopWindow() HWND;

external (stdcall) GetDialogBaseUnits() CLong;

external (stdcall) GetDlgCtrlID(
    argument0 : HWND) Int;

external (stdcall) GetDlgItem(
    argument0 : HWND,
    argument1 : Int) HWND;

external (stdcall) GetDlgItemInt(
    argument0 : HWND,
    argument1 : Int,
    argument2 : PBOOL,
    argument3 : Int) UInt;

external (stdcall) GetDlgItemTextA(
    argument0 : HWND,
    argument1 : Int,
    argument2 : LPSTR,
    argument3 : Int) UInt;

external (stdcall) GetDlgItemTextW(
    argument0 : HWND,
    argument1 : Int,
    argument2 : LPWSTR,
    argument3 : Int) UInt;

external (stdcall) GetDoubleClickTime() UInt;

external (stdcall) GetFocus() HWND;

external (stdcall) GetForegroundWindow() HWND;

external (stdcall) GetIconInfo(
    argument0 : HICON,
    argument1 : PICONINFO) Int;

external (stdcall) GetInputState() Int;

external (stdcall) GetKBCodePage() UInt;

external (stdcall) GetKeyboardLayout(
    argument0 : CULong) HKL;

external (stdcall) GetKeyboardLayoutList(
    argument0 : Int,
    argument1 : Pointer[HKL]) UInt;

external (stdcall) GetKeyboardLayoutNameA(
    argument0 : LPSTR) Int;

external (stdcall) GetKeyboardLayoutNameW(
    argument0 : LPWSTR) Int;

external (stdcall) GetKeyboardState(
    argument0 : PBYTE) Int;

external (stdcall) GetKeyboardType(
    argument0 : Int) Int;

external (stdcall) GetKeyNameTextA(
    argument0 : CLong,
    argument1 : LPSTR,
    argument2 : Int) Int;

external (stdcall) GetKeyNameTextW(
    argument0 : CLong,
    argument1 : LPWSTR,
    argument2 : Int) Int;

external (stdcall) GetKeyState(
    argument0 : Int) Short;

external (stdcall) GetLastActivePopup(
    argument0 : HWND) HWND;

external (stdcall) GetMenu(
    argument0 : HWND) HMENU;

external (stdcall) GetMenuCheckMarkDimensions() CLong;

external (stdcall) GetMenuContextHelpId(
    argument0 : HMENU) CULong;

external (stdcall) GetMenuDefaultItem(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : UInt) UInt;

external (stdcall) GetMenuItemCount(
    argument0 : HMENU) Int;

external (stdcall) GetMenuItemID(
    argument0 : HMENU,
    argument1 : Int) UInt;

external (stdcall) GetMenuItemInfoA(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : Int,
    argument3 : LPMENUITEMINFOA) Int;

external (stdcall) GetMenuItemInfoW(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : Int,
    argument3 : LPMENUITEMINFOW) Int;

external (stdcall) GetMenuItemRect(
    argument0 : HWND,
    argument1 : HMENU,
    argument2 : UInt,
    argument3 : LPRECT) Int;

external (stdcall) GetMenuState(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : UInt) UInt;

external (stdcall) GetMenuStringA(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : LPSTR,
    argument3 : Int,
    argument4 : UInt) Int;

external (stdcall) GetMenuStringW(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : LPWSTR,
    argument3 : Int,
    argument4 : UInt) Int;

external (stdcall) GetMessageA(
    argument0 : LPMSG,
    argument1 : HWND,
    argument2 : UInt,
    argument3 : UInt) Int;

external (stdcall) GetMessageW(
    argument0 : LPMSG,
    argument1 : HWND,
    argument2 : UInt,
    argument3 : UInt) Int;

external (stdcall) GetMessageExtraInfo() CLong;

external (stdcall) GetMessagePos() CULong;

external (stdcall) GetMessageTime() CLong;

external (stdcall) GetNextDlgGroupItem(
    argument0 : HWND,
    argument1 : HWND,
    argument2 : Int) HWND;

external (stdcall) GetNextDlgTabItem(
    argument0 : HWND,
    argument1 : HWND,
    argument2 : Int) HWND;

external (stdcall) GetOpenClipboardWindow() HWND;

external (stdcall) GetParent(
    argument0 : HWND) HWND;

external (stdcall) GetPriorityClipboardFormat(
    argument0 : Pointer[UInt],
    argument1 : Int) Int;

external (stdcall) GetPropA(
    argument0 : HWND,
    argument1 : LPCSTR) HANDLE;

external (stdcall) GetPropW(
    argument0 : HWND,
    argument1 : LPCWSTR) HANDLE;

external (stdcall) GetQueueStatus(
    argument0 : UInt) CULong;

external (stdcall) GetScrollInfo(
    argument0 : HWND,
    argument1 : Int,
    argument2 : LPSCROLLINFO) Int;

external (stdcall) GetScrollPos(
    argument0 : HWND,
    argument1 : Int) Int;

external (stdcall) GetScrollRange(
    argument0 : HWND,
    argument1 : Int,
    argument2 : LPINT,
    argument3 : LPINT) Int;

external (stdcall) GetSubMenu(
    argument0 : HMENU,
    argument1 : Int) HMENU;

external (stdcall) GetSysColor(
    argument0 : Int) CULong;

external (stdcall) GetSysColorBrush(
    argument0 : Int) HBRUSH;

external (stdcall) GetSystemMenu(
    argument0 : HWND,
    argument1 : Int) HMENU;

external (stdcall) GetSystemMetrics(
    argument0 : Int) Int;

external (stdcall) GetTabbedTextExtentA(
    argument0 : HDC,
    argument1 : LPCSTR,
    argument2 : Int,
    argument3 : Int,
    argument4 : LPINT) CULong;

external (stdcall) GetTabbedTextExtentW(
    argument0 : HDC,
    argument1 : LPCWSTR,
    argument2 : Int,
    argument3 : Int,
    argument4 : LPINT) CULong;

external (stdcall) GetWindowLongA(
    argument0 : HWND,
    argument1 : Int) CLong;

external (stdcall) GetWindowLongW(
    argument0 : HWND,
    argument1 : Int) CLong;

external (stdcall) GetThreadDesktop(
    argument0 : CULong) HDESK;

external (stdcall) GetTopWindow(
    argument0 : HWND) HWND;

external (stdcall) GetUpdateRect(
    argument0 : HWND,
    argument1 : LPRECT,
    argument2 : Int) Int;

external (stdcall) GetUpdateRgn(
    argument0 : HWND,
    argument1 : HRGN,
    argument2 : Int) Int;

external (stdcall) GetUserObjectInformationA(
    argument0 : HANDLE,
    argument1 : Int,
    argument2 : PVOID,
    argument3 : CULong,
    argument4 : PDWORD) Int;

external (stdcall) GetUserObjectInformationW(
    argument0 : HANDLE,
    argument1 : Int,
    argument2 : PVOID,
    argument3 : CULong,
    argument4 : PDWORD) Int;

external (stdcall) GetUserObjectSecurity(
    argument0 : HANDLE,
    argument1 : PSECURITY_INFORMATION,
    argument2 : PSECURITY_DESCRIPTOR,
    argument3 : CULong,
    argument4 : PDWORD) Int;

external (stdcall) GetWindow(
    argument0 : HWND,
    argument1 : UInt) HWND;

external (stdcall) GetWindowContextHelpId(
    argument0 : HWND) CULong;

external (stdcall) GetWindowDC(
    argument0 : HWND) HDC;

external (stdcall) GetWindowPlacement(
    argument0 : HWND,
    argument1 : Pointer[WINDOWPLACEMENT]) Int;

external (stdcall) GetWindowRect(
    argument0 : HWND,
    argument1 : LPRECT) Int;

external (stdcall) GetWindowRgn(
    argument0 : HWND,
    argument1 : HRGN) Int;

external (stdcall) GetWindowTextA(
    argument0 : HWND,
    argument1 : LPSTR,
    argument2 : Int) Int;

external (stdcall) GetWindowTextLengthA(
    argument0 : HWND) Int;

external (stdcall) GetWindowTextLengthW(
    argument0 : HWND) Int;

external (stdcall) GetWindowTextW(
    argument0 : HWND,
    argument1 : LPWSTR,
    argument2 : Int) Int;

external (stdcall) GetWindowWord(
    argument0 : HWND,
    argument1 : Int) UShort;

external (stdcall) GetAltTabInfoA(
    argument0 : HWND,
    argument1 : Int,
    argument2 : PALTTABINFO,
    argument3 : LPSTR,
    argument4 : UInt) Int;

external (stdcall) GetAltTabInfoW(
    argument0 : HWND,
    argument1 : Int,
    argument2 : PALTTABINFO,
    argument3 : LPWSTR,
    argument4 : UInt) Int;

external (stdcall) GetComboBoxInfo(
    argument0 : HWND,
    argument1 : PCOMBOBOXINFO) Int;

external (stdcall) GetCursorInfo(
    argument0 : PCURSORINFO) Int;

external (stdcall) GetLastInputInfo(
    argument0 : PLASTINPUTINFO) Int;

external (stdcall) GetListBoxInfo(
    argument0 : HWND) CULong;

external (stdcall) GetMenuBarInfo(
    argument0 : HWND,
    argument1 : CLong,
    argument2 : CLong,
    argument3 : PMENUBARINFO) Int;

external (stdcall) GetMenuInfo(
    argument0 : HMENU,
    argument1 : LPMENUINFO) Int;

external (stdcall) GetScrollBarInfo(
    argument0 : HWND,
    argument1 : CLong,
    argument2 : PSCROLLBARINFO) Int;

external (stdcall) GetWindowInfo(
    argument0 : HWND,
    argument1 : PWINDOWINFO) Int;

external (stdcall) GetMonitorInfoA(
    argument0 : HMONITOR,
    argument1 : LPMONITORINFO) Int;

external (stdcall) GetMonitorInfoW(
    argument0 : HMONITOR,
    argument1 : LPMONITORINFO) Int;

external (stdcall) GetWindowModuleFileNameA(
    argument0 : HWND,
    argument1 : LPSTR,
    argument2 : UInt) UInt;

external (stdcall) GetWindowModuleFileNameW(
    argument0 : HWND,
    argument1 : LPWSTR,
    argument2 : UInt) UInt;

external (stdcall) GrayStringA(
    argument0 : HDC,
    argument1 : HBRUSH,
    argument2 : GRAYSTRINGPROC,
    argument3 : CLong,
    argument4 : Int,
    argument5 : Int,
    argument6 : Int,
    argument7 : Int,
    argument8 : Int) Int;

external (stdcall) GrayStringW(
    argument0 : HDC,
    argument1 : HBRUSH,
    argument2 : GRAYSTRINGPROC,
    argument3 : CLong,
    argument4 : Int,
    argument5 : Int,
    argument6 : Int,
    argument7 : Int,
    argument8 : Int) Int;

external (stdcall) HideCaret(
    argument0 : HWND) Int;

external (stdcall) HiliteMenuItem(
    argument0 : HWND,
    argument1 : HMENU,
    argument2 : UInt,
    argument3 : UInt) Int;

external (stdcall) InflateRect(
    argument0 : LPRECT,
    argument1 : Int,
    argument2 : Int) Int;

external (stdcall) InSendMessage() Int;

external (stdcall) InsertMenuA(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : LPCSTR) Int;

external (stdcall) InsertMenuW(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : LPCWSTR) Int;

external (stdcall) InsertMenuItemA(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : Int,
    argument3 : LPCMENUITEMINFOA) Int;

external (stdcall) InsertMenuItemW(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : Int,
    argument3 : LPCMENUITEMINFOW) Int;

external (stdcall) InternalGetWindowText(
    argument0 : HWND,
    argument1 : LPWSTR,
    argument2 : Int) Int;

external (stdcall) IntersectRect(
    argument0 : LPRECT,
    argument1 : LPCRECT,
    argument2 : LPCRECT) Int;

external (stdcall) InvalidateRect(
    argument0 : HWND,
    argument1 : LPCRECT,
    argument2 : Int) Int;

external (stdcall) InvalidateRgn(
    argument0 : HWND,
    argument1 : HRGN,
    argument2 : Int) Int;

external (stdcall) InvertRect(
    argument0 : HDC,
    argument1 : LPCRECT) Int;

external (stdcall) IsCharAlphaA(
    ch : CChar) Int;

external (stdcall) IsCharAlphaNumericA(
    argument0 : CChar) Int;

external (stdcall) IsCharAlphaNumericW(
    argument0 : UShort) Int;

external (stdcall) IsCharAlphaW(
    argument0 : UShort) Int;

external (stdcall) IsCharLowerA(
    argument0 : CChar) Int;

external (stdcall) IsCharLowerW(
    argument0 : UShort) Int;

external (stdcall) IsCharUpperA(
    argument0 : CChar) Int;

external (stdcall) IsCharUpperW(
    argument0 : UShort) Int;

external (stdcall) IsChild(
    argument0 : HWND,
    argument1 : HWND) Int;

external (stdcall) IsClipboardFormatAvailable(
    argument0 : UInt) Int;

external (stdcall) IsDialogMessageA(
    argument0 : HWND,
    argument1 : LPMSG) Int;

external (stdcall) IsDialogMessageW(
    argument0 : HWND,
    argument1 : LPMSG) Int;

external (stdcall) IsDlgButtonChecked(
    argument0 : HWND,
    argument1 : Int) UInt;

external (stdcall) IsIconic(
    argument0 : HWND) Int;

external (stdcall) IsMenu(
    argument0 : HMENU) Int;

external (stdcall) IsRectEmpty(
    argument0 : LPCRECT) Int;

external (stdcall) IsWindow(
    argument0 : HWND) Int;

external (stdcall) IsWindowEnabled(
    argument0 : HWND) Int;

external (stdcall) IsWindowUnicode(
    argument0 : HWND) Int;

external (stdcall) IsWindowVisible(
    argument0 : HWND) Int;

external (stdcall) IsZoomed(
    argument0 : HWND) Int;

external (stdcall) keybd_event(
    argument0 : CUChar,
    argument1 : CUChar,
    argument2 : CULong,
    argument3 : CULong);

external (stdcall) KillTimer(
    argument0 : HWND,
    argument1 : UInt) Int;

external (stdcall) LoadAcceleratorsA(
    argument0 : HINSTANCE,
    argument1 : LPCSTR) HACCEL;

external (stdcall) LoadAcceleratorsW(
    argument0 : HINSTANCE,
    argument1 : LPCWSTR) HACCEL;

external (stdcall) LoadBitmapA(
    argument0 : HINSTANCE,
    argument1 : LPCSTR) HBITMAP;

external (stdcall) LoadBitmapW(
    argument0 : HINSTANCE,
    argument1 : LPCWSTR) HBITMAP;

external (stdcall) LoadCursorA(
    argument0 : HINSTANCE,
    argument1 : LPCSTR) HCURSOR;

external (stdcall) LoadCursorFromFileA(
    argument0 : LPCSTR) HCURSOR;

external (stdcall) LoadCursorFromFileW(
    argument0 : LPCWSTR) HCURSOR;

external (stdcall) LoadCursorW(
    argument0 : HINSTANCE,
    argument1 : LPCWSTR) HCURSOR;

external (stdcall) LoadIconA(
    argument0 : HINSTANCE,
    argument1 : LPCSTR) HICON;

external (stdcall) LoadIconW(
    argument0 : HINSTANCE,
    argument1 : LPCWSTR) HICON;

external (stdcall) LoadImageA(
    argument0 : HINSTANCE,
    argument1 : LPCSTR,
    argument2 : UInt,
    argument3 : Int,
    argument4 : Int,
    argument5 : UInt) HANDLE;

external (stdcall) LoadImageW(
    argument0 : HINSTANCE,
    argument1 : LPCWSTR,
    argument2 : UInt,
    argument3 : Int,
    argument4 : Int,
    argument5 : UInt) HANDLE;

external (stdcall) LoadKeyboardLayoutA(
    argument0 : LPCSTR,
    argument1 : UInt) HKL;

external (stdcall) LoadKeyboardLayoutW(
    argument0 : LPCWSTR,
    argument1 : UInt) HKL;

external (stdcall) LoadMenuA(
    argument0 : HINSTANCE,
    argument1 : LPCSTR) HMENU;

external (stdcall) LoadMenuIndirectA(
    argument0 : RawPointer) HMENU;

external (stdcall) LoadMenuIndirectW(
    argument0 : RawPointer) HMENU;

external (stdcall) LoadMenuW(
    argument0 : HINSTANCE,
    argument1 : LPCWSTR) HMENU;

external (stdcall) LoadStringA(
    argument0 : HINSTANCE,
    argument1 : UInt,
    argument2 : LPSTR,
    argument3 : Int) Int;

external (stdcall) LoadStringW(
    argument0 : HINSTANCE,
    argument1 : UInt,
    argument2 : LPWSTR,
    argument3 : Int) Int;

external (stdcall) LockWindowUpdate(
    argument0 : HWND) Int;

external (stdcall) LookupIconIdFromDirectory(
    argument0 : PBYTE,
    argument1 : Int) Int;

external (stdcall) LookupIconIdFromDirectoryEx(
    argument0 : PBYTE,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : UInt) Int;

external (stdcall) MapDialogRect(
    argument0 : HWND,
    argument1 : LPRECT) Int;

external (stdcall) MapVirtualKeyA(
    argument0 : UInt,
    argument1 : UInt) UInt;

external (stdcall) MapVirtualKeyExA(
    argument0 : UInt,
    argument1 : UInt,
    argument2 : HKL) UInt;

external (stdcall) MapVirtualKeyExW(
    argument0 : UInt,
    argument1 : UInt,
    argument2 : HKL) UInt;

external (stdcall) MapVirtualKeyW(
    argument0 : UInt,
    argument1 : UInt) UInt;

external (stdcall) MapWindowPoints(
    argument0 : HWND,
    argument1 : HWND,
    argument2 : LPPOINT,
    argument3 : UInt) Int;

external (stdcall) MenuItemFromPoint(
    argument0 : HWND,
    argument1 : HMENU,
    argument2 : POINT) Int;

external (stdcall) MessageBeep(
    argument0 : UInt) Int;

external (stdcall) MessageBoxA(
    argument0 : HWND,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : UInt) Int;

external (stdcall) MessageBoxW(
    argument0 : HWND,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR,
    argument3 : UInt) Int;

external (stdcall) MessageBoxExA(
    argument0 : HWND,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : UInt,
    argument4 : UShort) Int;

external (stdcall) MessageBoxExW(
    argument0 : HWND,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR,
    argument3 : UInt,
    argument4 : UShort) Int;

external (stdcall) MessageBoxIndirectA(
    argument0 : Pointer[MSGBOXPARAMSA]) Int;

external (stdcall) MessageBoxIndirectW(
    argument0 : Pointer[MSGBOXPARAMSW]) Int;

external (stdcall) ModifyMenuA(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : LPCSTR) Int;

external (stdcall) ModifyMenuW(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : LPCWSTR) Int;

external (stdcall) mouse_event(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong);

external (stdcall) MoveWindow(
    argument0 : HWND,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int,
    argument5 : Int) Int;

external (stdcall) MsgWaitForMultipleObjects(
    argument0 : CULong,
    argument1 : Pointer[HANDLE],
    argument2 : Int,
    argument3 : CULong,
    argument4 : CULong) CULong;

external (stdcall) MsgWaitForMultipleObjectsEx(
    argument0 : CULong,
    argument1 : Pointer[HANDLE],
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong) CULong;

external (stdcall) OemKeyScan(
    argument0 : UShort) CULong;

external (stdcall) OemToCharA(
    argument0 : LPCSTR,
    argument1 : LPSTR) Int;

external (stdcall) OemToCharBuffA(
    argument0 : LPCSTR,
    argument1 : LPSTR,
    argument2 : CULong) Int;

external (stdcall) OemToCharBuffW(
    argument0 : LPCSTR,
    argument1 : LPWSTR,
    argument2 : CULong) Int;

external (stdcall) OemToCharW(
    argument0 : LPCSTR,
    argument1 : LPWSTR) Int;

external (stdcall) OffsetRect(
    argument0 : LPRECT,
    argument1 : Int,
    argument2 : Int) Int;

external (stdcall) OpenClipboard(
    argument0 : HWND) Int;

external (stdcall) OpenDesktopA(
    argument0 : LPSTR,
    argument1 : CULong,
    argument2 : Int,
    argument3 : CULong) HDESK;

external (stdcall) OpenDesktopW(
    argument0 : LPWSTR,
    argument1 : CULong,
    argument2 : Int,
    argument3 : CULong) HDESK;

external (stdcall) OpenIcon(
    argument0 : HWND) Int;

external (stdcall) OpenInputDesktop(
    argument0 : CULong,
    argument1 : Int,
    argument2 : CULong) HDESK;

external (stdcall) OpenWindowStationA(
    argument0 : LPSTR,
    argument1 : Int,
    argument2 : CULong) HWINSTA;

external (stdcall) OpenWindowStationW(
    argument0 : LPWSTR,
    argument1 : Int,
    argument2 : CULong) HWINSTA;

external (stdcall) PaintDesktop(
    argument0 : HDC) Int;

external (stdcall) PeekMessageA(
    argument0 : LPMSG,
    argument1 : HWND,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : UInt) Int;

external (stdcall) PeekMessageW(
    argument0 : LPMSG,
    argument1 : HWND,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : UInt) Int;

external (stdcall) PostMessageA(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong) Int;

external (stdcall) PostMessageW(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong) Int;

external (stdcall) PostQuitMessage(
    argument0 : Int);

external (stdcall) PostThreadMessageA(
    argument0 : CULong,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong) Int;

external (stdcall) PostThreadMessageW(
    argument0 : CULong,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong) Int;

external (stdcall) PtInRect(
    argument0 : LPCRECT,
    argument1 : POINT) Int;

external (stdcall) RealChildWindowFromPoint(
    argument0 : HWND,
    argument1 : POINT) HWND;

external (stdcall) RealGetWindowClassA(
    argument0 : HWND,
    argument1 : LPSTR,
    argument2 : UInt) UInt;

external (stdcall) RealGetWindowClassW(
    argument0 : HWND,
    argument1 : LPWSTR,
    argument2 : UInt) UInt;

external (stdcall) RedrawWindow(
    argument0 : HWND,
    argument1 : LPCRECT,
    argument2 : HRGN,
    argument3 : UInt) Int;

external (stdcall) RegisterClassA(
    argument0 : Pointer[WNDCLASSA]) UShort;

external (stdcall) RegisterClassW(
    argument0 : Pointer[WNDCLASSW]) UShort;

external (stdcall) RegisterClassExA(
    argument0 : Pointer[WNDCLASSEXA]) UShort;

external (stdcall) RegisterClassExW(
    argument0 : Pointer[WNDCLASSEXW]) UShort;

external (stdcall) RegisterClipboardFormatA(
    argument0 : LPCSTR) UInt;

external (stdcall) RegisterClipboardFormatW(
    argument0 : LPCWSTR) UInt;

external (stdcall) RegisterHotKey(
    argument0 : HWND,
    argument1 : Int,
    argument2 : UInt,
    argument3 : UInt) Int;

external (stdcall) RegisterWindowMessageA(
    argument0 : LPCSTR) UInt;

external (stdcall) RegisterWindowMessageW(
    argument0 : LPCWSTR) UInt;

external (stdcall) ReleaseCapture() Int;

external (stdcall) ReleaseDC(
    argument0 : HWND,
    argument1 : HDC) Int;

external (stdcall) RemoveMenu(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : UInt) Int;

external (stdcall) RemovePropA(
    argument0 : HWND,
    argument1 : LPCSTR) HANDLE;

external (stdcall) RemovePropW(
    argument0 : HWND,
    argument1 : LPCWSTR) HANDLE;

external (stdcall) ReplyMessage(
    argument0 : CLong) Int;

external (stdcall) ScreenToClient(
    argument0 : HWND,
    argument1 : LPPOINT) Int;

external (stdcall) ScrollDC(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPCRECT,
    argument4 : LPCRECT,
    argument5 : HRGN,
    argument6 : LPRECT) Int;

external (stdcall) ScrollWindow(
    argument0 : HWND,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPCRECT,
    argument4 : LPCRECT) Int;

external (stdcall) ScrollWindowEx(
    argument0 : HWND,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPCRECT,
    argument4 : LPCRECT,
    argument5 : HRGN,
    argument6 : LPRECT,
    argument7 : UInt) Int;

external (stdcall) SendDlgItemMessageA(
    argument0 : HWND,
    argument1 : Int,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : CLong) CLong;

external (stdcall) SendDlgItemMessageW(
    argument0 : HWND,
    argument1 : Int,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : CLong) CLong;

external (stdcall) SendMessageA(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong) CLong;

external (stdcall) SendMessageCallbackA(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong,
    argument4 : SENDASYNCPROC,
    argument5 : CULong) Int;

external (stdcall) SendMessageCallbackW(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong,
    argument4 : SENDASYNCPROC,
    argument5 : CULong) Int;

external (stdcall) SendMessageTimeoutA(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong,
    argument4 : UInt,
    argument5 : UInt,
    argument6 : PDWORD_PTR) CLong;

external (stdcall) SendMessageTimeoutW(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong,
    argument4 : UInt,
    argument5 : UInt,
    argument6 : PDWORD_PTR) CLong;

external (stdcall) SendMessageW(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong) CLong;

external (stdcall) SendNotifyMessageA(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong) Int;

external (stdcall) SendNotifyMessageW(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong) Int;

external (stdcall) SetActiveWindow(
    argument0 : HWND) HWND;

external (stdcall) SetCapture(
    hWnd : HWND) HWND;

external (stdcall) SetCaretBlinkTime(
    argument0 : UInt) Int;

external (stdcall) SetCaretPos(
    argument0 : Int,
    argument1 : Int) Int;

external (stdcall) SetClassLongA(
    argument0 : HWND,
    argument1 : Int,
    argument2 : CLong) CULong;

external (stdcall) SetClassLongW(
    argument0 : HWND,
    argument1 : Int,
    argument2 : CLong) CULong;

external (stdcall) SetClassWord(
    argument0 : HWND,
    argument1 : Int,
    argument2 : UShort) UShort;

external (stdcall) SetClipboardData(
    argument0 : UInt,
    argument1 : HANDLE) HANDLE;

external (stdcall) SetClipboardViewer(
    argument0 : HWND) HWND;

external (stdcall) SetCursor(
    argument0 : HCURSOR) HCURSOR;

external (stdcall) SetCursorPos(
    argument0 : Int,
    argument1 : Int) Int;

external (stdcall) SetDebugErrorLevel(
    argument0 : CULong);

external (stdcall) SetDlgItemInt(
    argument0 : HWND,
    argument1 : Int,
    argument2 : UInt,
    argument3 : Int) Int;

external (stdcall) SetDlgItemTextA(
    argument0 : HWND,
    argument1 : Int,
    argument2 : LPCSTR) Int;

external (stdcall) SetDlgItemTextW(
    argument0 : HWND,
    argument1 : Int,
    argument2 : LPCWSTR) Int;

external (stdcall) SetDoubleClickTime(
    argument0 : UInt) Int;

external (stdcall) SetFocus(
    argument0 : HWND) HWND;

external (stdcall) SetForegroundWindow(
    argument0 : HWND) Int;

external (stdcall) SetKeyboardState(
    argument0 : PBYTE) Int;

external (stdcall) SetMenu(
    argument0 : HWND,
    argument1 : HMENU) Int;

external (stdcall) SetMenuContextHelpId(
    argument0 : HMENU,
    argument1 : CULong) Int;

external (stdcall) SetMenuDefaultItem(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : UInt) Int;

external (stdcall) SetMenuInfo(
    argument0 : HMENU,
    argument1 : LPCMENUINFO) Int;

external (stdcall) SetMenuItemBitmaps(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : HBITMAP,
    argument4 : HBITMAP) Int;

external (stdcall) SetMenuItemInfoA(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : Int,
    argument3 : LPCMENUITEMINFOA) Int;

external (stdcall) SetMenuItemInfoW(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : Int,
    argument3 : LPCMENUITEMINFOW) Int;

external (stdcall) SetMessageExtraInfo(
    argument0 : CLong) CLong;

external (stdcall) SetMessageQueue(
    argument0 : Int) Int;

external (stdcall) SetParent(
    argument0 : HWND,
    argument1 : HWND) HWND;

external (stdcall) SetProcessWindowStation(
    argument0 : HWINSTA) Int;

external (stdcall) SetPropA(
    argument0 : HWND,
    argument1 : LPCSTR,
    argument2 : HANDLE) Int;

external (stdcall) SetPropW(
    argument0 : HWND,
    argument1 : LPCWSTR,
    argument2 : HANDLE) Int;

external (stdcall) SetRect(
    argument0 : LPRECT,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int) Int;

external (stdcall) SetRectEmpty(
    argument0 : LPRECT) Int;

external (stdcall) SetScrollInfo(
    argument0 : HWND,
    argument1 : Int,
    argument2 : LPCSCROLLINFO,
    argument3 : Int) Int;

external (stdcall) SetScrollPos(
    argument0 : HWND,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int) Int;

external (stdcall) SetScrollRange(
    argument0 : HWND,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int) Int;

external (stdcall) SetSysColors(
    argument0 : Int,
    argument1 : Pointer[Int],
    argument2 : Pointer[CULong]) Int;

external (stdcall) SetSystemCursor(
    argument0 : HCURSOR,
    argument1 : CULong) Int;

external (stdcall) SetThreadDesktop(
    argument0 : HDESK) Int;

external (stdcall) SetTimer(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : TIMERPROC) UInt;

external (stdcall) SetUserObjectInformationA(
    argument0 : HANDLE,
    argument1 : Int,
    argument2 : PVOID,
    argument3 : CULong) Int;

external (stdcall) SetUserObjectInformationW(
    argument0 : HANDLE,
    argument1 : Int,
    argument2 : PVOID,
    argument3 : CULong) Int;

external (stdcall) SetUserObjectSecurity(
    argument0 : HANDLE,
    argument1 : PSECURITY_INFORMATION,
    argument2 : PSECURITY_DESCRIPTOR) Int;

external (stdcall) SetWindowContextHelpId(
    argument0 : HWND,
    argument1 : CULong) Int;

external (stdcall) SetWindowLongA(
    argument0 : HWND,
    argument1 : Int,
    argument2 : CLong) CLong;

external (stdcall) SetWindowLongW(
    argument0 : HWND,
    argument1 : Int,
    argument2 : CLong) CLong;

external (stdcall) SetWindowPlacement(
    hWnd : HWND,
    argument1 : Pointer[WINDOWPLACEMENT]) Int;

external (stdcall) SetWindowPos(
    argument0 : HWND,
    argument1 : HWND,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int,
    argument5 : Int,
    argument6 : UInt) Int;

external (stdcall) SetWindowRgn(
    argument0 : HWND,
    argument1 : HRGN,
    argument2 : Int) Int;

external (stdcall) SetWindowsHookA(
    argument0 : Int,
    argument1 : HOOKPROC) HHOOK;

external (stdcall) SetWindowsHookW(
    argument0 : Int,
    argument1 : HOOKPROC) HHOOK;

external (stdcall) SetWindowsHookExA(
    argument0 : Int,
    argument1 : HOOKPROC,
    argument2 : HINSTANCE,
    argument3 : CULong) HHOOK;

external (stdcall) SetWindowsHookExW(
    argument0 : Int,
    argument1 : HOOKPROC,
    argument2 : HINSTANCE,
    argument3 : CULong) HHOOK;

external (stdcall) SetWindowTextA(
    argument0 : HWND,
    argument1 : LPCSTR) Int;

external (stdcall) SetWindowTextW(
    argument0 : HWND,
    argument1 : LPCWSTR) Int;

external (stdcall) SetWindowWord(
    argument0 : HWND,
    argument1 : Int,
    argument2 : UShort) UShort;

external (stdcall) ShowCaret(
    argument0 : HWND) Int;

external (stdcall) ShowCursor(
    argument0 : Int) Int;

external (stdcall) ShowOwnedPopups(
    argument0 : HWND,
    argument1 : Int) Int;

external (stdcall) ShowScrollBar(
    argument0 : HWND,
    argument1 : Int,
    argument2 : Int) Int;

external (stdcall) ShowWindow(
    argument0 : HWND,
    argument1 : Int) Int;

external (stdcall) ShowWindowAsync(
    argument0 : HWND,
    argument1 : Int) Int;

external (stdcall) SubtractRect(
    argument0 : LPRECT,
    argument1 : LPCRECT,
    argument2 : LPCRECT) Int;

external (stdcall) SwapMouseButton(
    argument0 : Int) Int;

external (stdcall) SwitchDesktop(
    argument0 : HDESK) Int;

external (stdcall) SystemParametersInfoA(
    argument0 : UInt,
    argument1 : UInt,
    argument2 : PVOID,
    argument3 : UInt) Int;

external (stdcall) SystemParametersInfoW(
    argument0 : UInt,
    argument1 : UInt,
    argument2 : PVOID,
    argument3 : UInt) Int;

external (stdcall) TabbedTextOutA(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPCSTR,
    argument4 : Int,
    argument5 : Int,
    argument6 : LPINT,
    argument7 : Int) CLong;

external (stdcall) TabbedTextOutW(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPCWSTR,
    argument4 : Int,
    argument5 : Int,
    argument6 : LPINT,
    argument7 : Int) CLong;

external (stdcall) TileWindows(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : LPCRECT,
    argument3 : UInt,
    argument4 : Pointer[HWND]) UShort;

external (stdcall) ToAscii(
    argument0 : UInt,
    argument1 : UInt,
    argument2 : PBYTE,
    argument3 : LPWORD,
    argument4 : UInt) Int;

external (stdcall) ToAsciiEx(
    argument0 : UInt,
    argument1 : UInt,
    argument2 : PBYTE,
    argument3 : LPWORD,
    argument4 : UInt,
    argument5 : HKL) Int;

external (stdcall) ToUnicode(
    argument0 : UInt,
    argument1 : UInt,
    argument2 : PBYTE,
    argument3 : LPWSTR,
    argument4 : Int,
    argument5 : UInt) Int;

external (stdcall) ToUnicodeEx(
    argument0 : UInt,
    argument1 : UInt,
    argument2 : PBYTE,
    argument3 : LPWSTR,
    argument4 : Int,
    argument5 : UInt,
    argument6 : HKL) Int;

external (stdcall) TrackMouseEvent(
    argument0 : LPTRACKMOUSEEVENT) Int;

external (stdcall) TrackPopupMenu(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int,
    argument5 : HWND,
    argument6 : LPCRECT) Int;

external (stdcall) TrackPopupMenuEx(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : Int,
    argument3 : Int,
    argument4 : HWND,
    argument5 : LPTPMPARAMS) Int;

external (stdcall) TranslateAcceleratorA(
    argument0 : HWND,
    argument1 : HACCEL,
    argument2 : LPMSG) Int;

external (stdcall) TranslateAcceleratorW(
    argument0 : HWND,
    argument1 : HACCEL,
    argument2 : LPMSG) Int;

external (stdcall) TranslateMDISysAccel(
    argument0 : HWND,
    argument1 : LPMSG) Int;

external (stdcall) TranslateMessage(
    argument0 : Pointer[MSG]) Int;

external (stdcall) UnhookWindowsHook(
    argument0 : Int,
    argument1 : HOOKPROC) Int;

external (stdcall) UnhookWindowsHookEx(
    argument0 : HHOOK) Int;

external (stdcall) UnionRect(
    argument0 : LPRECT,
    argument1 : LPCRECT,
    argument2 : LPCRECT) Int;

external (stdcall) UnloadKeyboardLayout(
    argument0 : HKL) Int;

external (stdcall) UnregisterClassA(
    argument0 : LPCSTR,
    argument1 : HINSTANCE) Int;

external (stdcall) UnregisterClassW(
    argument0 : LPCWSTR,
    argument1 : HINSTANCE) Int;

external (stdcall) UnregisterHotKey(
    argument0 : HWND,
    argument1 : Int) Int;

external (stdcall) UpdateWindow(
    argument0 : HWND) Int;

external (stdcall) ValidateRect(
    argument0 : HWND,
    argument1 : LPCRECT) Int;

external (stdcall) ValidateRgn(
    argument0 : HWND,
    argument1 : HRGN) Int;

external (stdcall) VkKeyScanA(
    argument0 : CChar) Short;

external (stdcall) VkKeyScanExA(
    argument0 : CChar,
    argument1 : HKL) Short;

external (stdcall) VkKeyScanExW(
    argument0 : UShort,
    argument1 : HKL) Short;

external (stdcall) VkKeyScanW(
    argument0 : UShort) Short;

external (stdcall) WaitForInputIdle(
    argument0 : HANDLE,
    argument1 : CULong) CULong;

external (stdcall) WaitMessage() Int;

external (stdcall) WindowFromDC(
    hDC : HDC) HWND;

external (stdcall) WindowFromPoint(
    argument0 : POINT) HWND;

external (stdcall) WinExec(
    argument0 : LPCSTR,
    argument1 : UInt) UInt;

external (stdcall) WinHelpA(
    argument0 : HWND,
    argument1 : LPCSTR,
    argument2 : UInt,
    argument3 : CULong) Int;

external (stdcall) WinHelpW(
    argument0 : HWND,
    argument1 : LPCWSTR,
    argument2 : UInt,
    argument3 : CULong) Int;

external wsprintfA(
    argument0 : LPSTR,
    argument1 : LPCSTR,
    ...) Int;

external wsprintfW(
    argument0 : LPWSTR,
    argument1 : LPCWSTR,
    ...) Int;

external (stdcall) wvsprintfA(
    argument0 : LPSTR,
    argument1 : LPCSTR,
    arglist : va_list) Int;

external (stdcall) wvsprintfW(
    argument0 : LPWSTR,
    argument1 : LPCWSTR,
    arglist : va_list) Int;

alias WNDCLASS = WNDCLASSA;

alias LPWNDCLASS = Pointer[WNDCLASSA];

alias PWNDCLASS = Pointer[WNDCLASSA];

alias WNDCLASSEX = WNDCLASSEXA;

alias LPWNDCLASSEX = Pointer[WNDCLASSEXA];

alias PWNDCLASSEX = Pointer[WNDCLASSEXA];

alias MENUITEMINFO = MENUITEMINFOA;

alias LPMENUITEMINFO = Pointer[MENUITEMINFOA];

alias LPCMENUITEMINFO = LPCMENUITEMINFOA;

alias MSGBOXPARAMS = MSGBOXPARAMSA;

alias PMSGBOXPARAMS = Pointer[MSGBOXPARAMSA];

alias LPMSGBOXPARAMS = Pointer[MSGBOXPARAMSA];

alias HIGHCONTRAST = HIGHCONTRASTA;

alias LPHIGHCONTRAST = Pointer[HIGHCONTRASTA];

alias SERIALKEYS = SERIALKEYSA;

alias LPSERIALKEYS = Pointer[SERIALKEYSA];

alias SOUNDSENTRY = SOUNDSENTRYA;

alias LPSOUNDSENTRY = Pointer[SOUNDSENTRYA];

alias CREATESTRUCT = CREATESTRUCTA;

alias LPCREATESTRUCT = Pointer[CREATESTRUCTA];

alias CBT_CREATEWND = CBT_CREATEWNDA;

alias LPCBT_CREATEWND = Pointer[CBT_CREATEWNDA];

alias MDICREATESTRUCT = MDICREATESTRUCTA;

alias LPMDICREATESTRUCT = Pointer[MDICREATESTRUCTA];

alias MULTIKEYHELP = MULTIKEYHELPA;

alias PMULTIKEYHELP = Pointer[MULTIKEYHELPA];

alias LPMULTIKEYHELP = Pointer[MULTIKEYHELPA];

alias MONITORINFOEX = MONITORINFOEXA;

alias LPMONITORINFOEX = Pointer[MONITORINFOEXA];

alias ICONMETRICS = ICONMETRICSA;

alias LPICONMETRICS = Pointer[ICONMETRICSA];

alias NONCLIENTMETRICS = NONCLIENTMETRICSA;

alias LPNONCLIENTMETRICS = Pointer[NONCLIENTMETRICSA];

alias LCTYPE = CULong;

alias CALTYPE = CULong;

alias CALID = CULong;

alias LGRPID = CULong;

alias GEOID = CULong;

alias GEOTYPE = CULong;

alias GEOCLASS = CULong;

alias CALINFO_ENUMPROCA = StdCallCodePointer[(Pointer[CChar]),(Int)];

alias CALINFO_ENUMPROCW = StdCallCodePointer[(Pointer[UShort]),(Int)];

alias CALINFO_ENUMPROCEXA = StdCallCodePointer[(Pointer[CChar],CULong),(Int)];

alias CALINFO_ENUMPROCEXW = StdCallCodePointer[(Pointer[UShort],CULong),(Int)];

alias LANGUAGEGROUP_ENUMPROCA = StdCallCodePointer[(CULong,Pointer[CChar],Pointer[CChar],CULong,CLong),(Int)];

alias LANGUAGEGROUP_ENUMPROCW = StdCallCodePointer[(CULong,Pointer[UShort],Pointer[UShort],CULong,CLong),(Int)];

alias LANGGROUPLOCALE_ENUMPROCA = StdCallCodePointer[(CULong,CULong,Pointer[CChar],CLong),(Int)];

alias LANGGROUPLOCALE_ENUMPROCW = StdCallCodePointer[(CULong,CULong,Pointer[UShort],CLong),(Int)];

alias UILANGUAGE_ENUMPROCW = StdCallCodePointer[(Pointer[UShort],CLong),(Int)];

alias UILANGUAGE_ENUMPROCA = StdCallCodePointer[(Pointer[CChar],CLong),(Int)];

alias LOCALE_ENUMPROCA = StdCallCodePointer[(Pointer[CChar]),(Int)];

alias LOCALE_ENUMPROCW = StdCallCodePointer[(Pointer[UShort]),(Int)];

alias CODEPAGE_ENUMPROCA = StdCallCodePointer[(Pointer[CChar]),(Int)];

alias CODEPAGE_ENUMPROCW = StdCallCodePointer[(Pointer[UShort]),(Int)];

alias DATEFMT_ENUMPROCA = StdCallCodePointer[(Pointer[CChar]),(Int)];

alias DATEFMT_ENUMPROCW = StdCallCodePointer[(Pointer[UShort]),(Int)];

alias DATEFMT_ENUMPROCEXA = StdCallCodePointer[(Pointer[CChar],CULong),(Int)];

alias DATEFMT_ENUMPROCEXW = StdCallCodePointer[(Pointer[UShort],CULong),(Int)];

alias TIMEFMT_ENUMPROCA = StdCallCodePointer[(Pointer[CChar]),(Int)];

alias TIMEFMT_ENUMPROCW = StdCallCodePointer[(Pointer[UShort]),(Int)];

alias GEO_ENUMPROC = StdCallCodePointer[(CULong),(Int)];

alias COMPARE_STRING = 1;

alias NLS_FUNCTION = Int;

alias GEOCLASS_NATION = 16;
alias GEOCLASS_REGION = 14;

alias GEO_NATION = 1;
alias GEO_LATITUDE = 2;
alias GEO_LONGITUDE = 3;
alias GEO_ISO2 = 4;
alias GEO_ISO3 = 5;
alias GEO_RFC1766 = 6;
alias GEO_LCID = 7;
alias GEO_FRIENDLYNAME = 8;
alias GEO_OFFICIALNAME = 9;
alias GEO_TIMEZONES = 10;
alias GEO_OFFICIALLANGUAGES = 10;

record Struct__cpinfo (
    MaxCharSize : UInt,
    DefaultChar : Array[CUChar,2],
    LeadByte : Array[CUChar,12],
);

alias CPINFO = Struct__cpinfo;

alias LPCPINFO = Pointer[Struct__cpinfo];

record Struct__cpinfoexA (
    MaxCharSize : UInt,
    DefaultChar : Array[CUChar,2],
    LeadByte : Array[CUChar,12],
    UnicodeDefaultChar : UShort,
    CodePage : UInt,
    CodePageName : Array[CChar,260],
);

alias CPINFOEXA = Struct__cpinfoexA;

alias LPCPINFOEXA = Pointer[Struct__cpinfoexA];

record Struct__cpinfoexW (
    MaxCharSize : UInt,
    DefaultChar : Array[CUChar,2],
    LeadByte : Array[CUChar,12],
    UnicodeDefaultChar : UShort,
    CodePage : UInt,
    CodePageName : Array[UShort,260],
);

alias CPINFOEXW = Struct__cpinfoexW;

alias LPCPINFOEXW = Pointer[Struct__cpinfoexW];

record Struct__currencyfmtA (
    NumDigits : UInt,
    LeadingZero : UInt,
    Grouping : UInt,
    lpDecimalSep : LPSTR,
    lpThousandSep : LPSTR,
    NegativeOrder : UInt,
    PositiveOrder : UInt,
    lpCurrencySymbol : LPSTR,
);

alias CURRENCYFMTA = Struct__currencyfmtA;

alias LPCURRENCYFMTA = Pointer[Struct__currencyfmtA];

record Struct__currencyfmtW (
    NumDigits : UInt,
    LeadingZero : UInt,
    Grouping : UInt,
    lpDecimalSep : LPWSTR,
    lpThousandSep : LPWSTR,
    NegativeOrder : UInt,
    PositiveOrder : UInt,
    lpCurrencySymbol : LPWSTR,
);

alias CURRENCYFMTW = Struct__currencyfmtW;

alias LPCURRENCYFMTW = Pointer[Struct__currencyfmtW];

record Struct_nlsversioninfo (
    dwNLSVersionInfoSize : CULong,
    dwNLSVersion : CULong,
    dwDefinedVersion : CULong,
);

alias NLSVERSIONINFO = Struct_nlsversioninfo;

alias LPNLSVERSIONINFO = Pointer[Struct_nlsversioninfo];

record Struct__numberfmtA (
    NumDigits : UInt,
    LeadingZero : UInt,
    Grouping : UInt,
    lpDecimalSep : LPSTR,
    lpThousandSep : LPSTR,
    NegativeOrder : UInt,
);

alias NUMBERFMTA = Struct__numberfmtA;

alias LPNUMBERFMTA = Pointer[Struct__numberfmtA];

record Struct__numberfmtW (
    NumDigits : UInt,
    LeadingZero : UInt,
    Grouping : UInt,
    lpDecimalSep : LPWSTR,
    lpThousandSep : LPWSTR,
    NegativeOrder : UInt,
);

alias NUMBERFMTW = Struct__numberfmtW;

alias LPNUMBERFMTW = Pointer[Struct__numberfmtW];

external (stdcall) CompareStringA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPCSTR,
    argument3 : Int,
    argument4 : LPCSTR,
    argument5 : Int) Int;

external (stdcall) CompareStringW(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPCWSTR,
    argument3 : Int,
    argument4 : LPCWSTR,
    argument5 : Int) Int;

external (stdcall) ConvertDefaultLocale(
    argument0 : CULong) CULong;

external (stdcall) EnumCalendarInfoA(
    argument0 : CALINFO_ENUMPROCA,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong) Int;

external (stdcall) EnumCalendarInfoW(
    argument0 : CALINFO_ENUMPROCW,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong) Int;

external (stdcall) EnumDateFormatsA(
    argument0 : DATEFMT_ENUMPROCA,
    argument1 : CULong,
    argument2 : CULong) Int;

external (stdcall) EnumDateFormatsW(
    argument0 : DATEFMT_ENUMPROCW,
    argument1 : CULong,
    argument2 : CULong) Int;

external (stdcall) EnumSystemCodePagesA(
    argument0 : CODEPAGE_ENUMPROCA,
    argument1 : CULong) Int;

external (stdcall) EnumSystemCodePagesW(
    argument0 : CODEPAGE_ENUMPROCW,
    argument1 : CULong) Int;

external (stdcall) EnumSystemGeoID(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : GEO_ENUMPROC) Int;

external (stdcall) EnumSystemLocalesA(
    argument0 : LOCALE_ENUMPROCA,
    argument1 : CULong) Int;

external (stdcall) EnumSystemLocalesW(
    argument0 : LOCALE_ENUMPROCW,
    argument1 : CULong) Int;

external (stdcall) EnumTimeFormatsA(
    argument0 : TIMEFMT_ENUMPROCA,
    argument1 : CULong,
    argument2 : CULong) Int;

external (stdcall) EnumTimeFormatsW(
    argument0 : TIMEFMT_ENUMPROCW,
    argument1 : CULong,
    argument2 : CULong) Int;

external (stdcall) FoldStringA(
    argument0 : CULong,
    argument1 : LPCSTR,
    argument2 : Int,
    argument3 : LPSTR,
    argument4 : Int) Int;

external (stdcall) FoldStringW(
    argument0 : CULong,
    argument1 : LPCWSTR,
    argument2 : Int,
    argument3 : LPWSTR,
    argument4 : Int) Int;

external (stdcall) GetACP() UInt;

external (stdcall) GetCalendarInfoA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPSTR,
    argument4 : Int,
    argument5 : LPDWORD) Int;

external (stdcall) GetCalendarInfoW(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPWSTR,
    argument4 : Int,
    argument5 : LPDWORD) Int;

external (stdcall) GetCPInfo(
    argument0 : UInt,
    argument1 : LPCPINFO) Int;

external (stdcall) GetCPInfoExA(
    argument0 : UInt,
    argument1 : CULong,
    argument2 : LPCPINFOEXA) Int;

external (stdcall) GetCPInfoExW(
    argument0 : UInt,
    argument1 : CULong,
    argument2 : LPCPINFOEXW) Int;

external (stdcall) GetCurrencyFormatA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPCSTR,
    argument3 : Pointer[CURRENCYFMTA],
    argument4 : LPSTR,
    argument5 : Int) Int;

external (stdcall) GetCurrencyFormatW(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPCWSTR,
    argument3 : Pointer[CURRENCYFMTW],
    argument4 : LPWSTR,
    argument5 : Int) Int;

external (stdcall) GetDateFormatA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : Pointer[SYSTEMTIME],
    argument3 : LPCSTR,
    argument4 : LPSTR,
    argument5 : Int) Int;

external (stdcall) GetDateFormatW(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : Pointer[SYSTEMTIME],
    argument3 : LPCWSTR,
    argument4 : LPWSTR,
    argument5 : Int) Int;

external (stdcall) GetGeoInfoA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPSTR,
    argument3 : Int,
    argument4 : UShort) Int;

external (stdcall) GetGeoInfoW(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPWSTR,
    argument3 : Int,
    argument4 : UShort) Int;

external (stdcall) GetLocaleInfoA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPSTR,
    argument3 : Int) Int;

external (stdcall) GetLocaleInfoW(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPWSTR,
    argument3 : Int) Int;

external (stdcall) GetNLSVersion(
    argument0 : NLS_FUNCTION,
    argument1 : CULong,
    argument2 : LPNLSVERSIONINFO) Int;

external (stdcall) GetNumberFormatA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPCSTR,
    argument3 : Pointer[NUMBERFMTA],
    argument4 : LPSTR,
    argument5 : Int) Int;

external (stdcall) GetNumberFormatW(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPCWSTR,
    argument3 : Pointer[NUMBERFMTW],
    argument4 : LPWSTR,
    argument5 : Int) Int;

external (stdcall) GetOEMCP() UInt;

external (stdcall) GetStringTypeA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPCSTR,
    argument3 : Int,
    argument4 : LPWORD) Int;

external (stdcall) GetStringTypeW(
    argument0 : CULong,
    argument1 : LPCWSTR,
    argument2 : Int,
    argument3 : LPWORD) Int;

external (stdcall) GetStringTypeExA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPCSTR,
    argument3 : Int,
    argument4 : LPWORD) Int;

external (stdcall) GetStringTypeExW(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPCWSTR,
    argument3 : Int,
    argument4 : LPWORD) Int;

external (stdcall) GetSystemDefaultLangID() UShort;

external (stdcall) GetSystemDefaultLCID() CULong;

external (stdcall) GetThreadLocale() CULong;

external (stdcall) GetTimeFormatA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : Pointer[SYSTEMTIME],
    argument3 : LPCSTR,
    argument4 : LPSTR,
    argument5 : Int) Int;

external (stdcall) GetTimeFormatW(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : Pointer[SYSTEMTIME],
    argument3 : LPCWSTR,
    argument4 : LPWSTR,
    argument5 : Int) Int;

external (stdcall) GetUserDefaultLangID() UShort;

external (stdcall) GetUserDefaultLCID() CULong;

external (stdcall) GetUserGeoID(
    argument0 : CULong) CULong;

external (stdcall) IsDBCSLeadByte(
    argument0 : CUChar) Int;

external (stdcall) IsDBCSLeadByteEx(
    argument0 : UInt,
    argument1 : CUChar) Int;

external (stdcall) IsNLSDefinedString(
    argument0 : NLS_FUNCTION,
    argument1 : CULong,
    argument2 : LPNLSVERSIONINFO,
    argument3 : LPCWSTR,
    argument4 : Int) Int;

external (stdcall) IsValidCodePage(
    argument0 : UInt) Int;

external (stdcall) IsValidLocale(
    argument0 : CULong,
    argument1 : CULong) Int;

external (stdcall) LCMapStringA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPCSTR,
    argument3 : Int,
    argument4 : LPSTR,
    argument5 : Int) Int;

external (stdcall) LCMapStringW(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPCWSTR,
    argument3 : Int,
    argument4 : LPWSTR,
    argument5 : Int) Int;

external (stdcall) MultiByteToWideChar(
    argument0 : UInt,
    argument1 : CULong,
    argument2 : LPCSTR,
    argument3 : Int,
    argument4 : LPWSTR,
    argument5 : Int) Int;

external (stdcall) SetCalendarInfoA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPCSTR) Int;

external (stdcall) SetCalendarInfoW(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPCWSTR) Int;

external (stdcall) SetLocaleInfoA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPCSTR) Int;

external (stdcall) SetLocaleInfoW(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPCWSTR) Int;

external (stdcall) SetThreadLocale(
    argument0 : CULong) Int;

external (stdcall) SetUserGeoID(
    argument0 : CULong) Int;

external (stdcall) WideCharToMultiByte(
    argument0 : UInt,
    argument1 : CULong,
    argument2 : LPCWSTR,
    argument3 : Int,
    argument4 : LPSTR,
    argument5 : Int,
    argument6 : LPCSTR,
    argument7 : LPBOOL) Int;

alias CPINFOEX = CPINFOEXA;

alias LPCPINFOEX = LPCPINFOEXA;

alias CURRENCYFMT = CURRENCYFMTA;

alias LPCURRENCYFMT = LPCURRENCYFMTA;

alias NUMBERFMT = NUMBERFMTA;

alias LPNUMBERFMT = LPNUMBERFMTA;

record Struct_tagVS_FIXEDFILEINFO (
    dwSignature : CULong,
    dwStrucVersion : CULong,
    dwFileVersionMS : CULong,
    dwFileVersionLS : CULong,
    dwProductVersionMS : CULong,
    dwProductVersionLS : CULong,
    dwFileFlagsMask : CULong,
    dwFileFlags : CULong,
    dwFileOS : CULong,
    dwFileType : CULong,
    dwFileSubtype : CULong,
    dwFileDateMS : CULong,
    dwFileDateLS : CULong,
);

alias VS_FIXEDFILEINFO = Struct_tagVS_FIXEDFILEINFO;

external (stdcall) VerFindFileA(
    argument0 : CULong,
    argument1 : LPSTR,
    argument2 : LPSTR,
    argument3 : LPSTR,
    argument4 : LPSTR,
    argument5 : PUINT,
    argument6 : LPSTR,
    argument7 : PUINT) CULong;

external (stdcall) VerFindFileW(
    argument0 : CULong,
    argument1 : LPWSTR,
    argument2 : LPWSTR,
    argument3 : LPWSTR,
    argument4 : LPWSTR,
    argument5 : PUINT,
    argument6 : LPWSTR,
    argument7 : PUINT) CULong;

external (stdcall) VerInstallFileA(
    argument0 : CULong,
    argument1 : LPSTR,
    argument2 : LPSTR,
    argument3 : LPSTR,
    argument4 : LPSTR,
    argument5 : LPSTR,
    argument6 : LPSTR,
    argument7 : PUINT) CULong;

external (stdcall) VerInstallFileW(
    argument0 : CULong,
    argument1 : LPWSTR,
    argument2 : LPWSTR,
    argument3 : LPWSTR,
    argument4 : LPWSTR,
    argument5 : LPWSTR,
    argument6 : LPWSTR,
    argument7 : PUINT) CULong;

external (stdcall) GetFileVersionInfoSizeA(
    argument0 : LPCSTR,
    argument1 : PDWORD) CULong;

external (stdcall) GetFileVersionInfoSizeW(
    argument0 : LPCWSTR,
    argument1 : PDWORD) CULong;

external (stdcall) GetFileVersionInfoA(
    argument0 : LPCSTR,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : PVOID) Int;

external (stdcall) GetFileVersionInfoW(
    argument0 : LPCWSTR,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : PVOID) Int;

external (stdcall) VerLanguageNameA(
    argument0 : CULong,
    argument1 : LPSTR,
    argument2 : CULong) CULong;

external (stdcall) VerLanguageNameW(
    argument0 : CULong,
    argument1 : LPWSTR,
    argument2 : CULong) CULong;

external (stdcall) VerQueryValueA(
    argument0 : LPVOID,
    argument1 : LPCSTR,
    argument2 : Pointer[LPVOID],
    argument3 : PUINT) Int;

external (stdcall) VerQueryValueW(
    argument0 : LPVOID,
    argument1 : LPCWSTR,
    argument2 : Pointer[LPVOID],
    argument3 : PUINT) Int;

record Struct__NETRESOURCEA (
    dwScope : CULong,
    dwType : CULong,
    dwDisplayType : CULong,
    dwUsage : CULong,
    lpLocalName : LPSTR,
    lpRemoteName : LPSTR,
    lpComment : LPSTR,
    lpProvider : LPSTR,
);

alias NETRESOURCEA = Struct__NETRESOURCEA;

alias LPNETRESOURCEA = Pointer[Struct__NETRESOURCEA];

record Struct__NETRESOURCEW (
    dwScope : CULong,
    dwType : CULong,
    dwDisplayType : CULong,
    dwUsage : CULong,
    lpLocalName : LPWSTR,
    lpRemoteName : LPWSTR,
    lpComment : LPWSTR,
    lpProvider : LPWSTR,
);

alias NETRESOURCEW = Struct__NETRESOURCEW;

alias LPNETRESOURCEW = Pointer[Struct__NETRESOURCEW];

record Struct__CONNECTDLGSTRUCTA (
    cbStructure : CULong,
    hwndOwner : HWND,
    lpConnRes : LPNETRESOURCEA,
    dwFlags : CULong,
    dwDevNum : CULong,
);

alias CONNECTDLGSTRUCTA = Struct__CONNECTDLGSTRUCTA;

alias LPCONNECTDLGSTRUCTA = Pointer[Struct__CONNECTDLGSTRUCTA];

record Struct__CONNECTDLGSTRUCTW (
    cbStructure : CULong,
    hwndOwner : HWND,
    lpConnRes : LPNETRESOURCEW,
    dwFlags : CULong,
    dwDevNum : CULong,
);

alias CONNECTDLGSTRUCTW = Struct__CONNECTDLGSTRUCTW;

alias LPCONNECTDLGSTRUCTW = Pointer[Struct__CONNECTDLGSTRUCTW];

record Struct__DISCDLGSTRUCTA (
    cbStructure : CULong,
    hwndOwner : HWND,
    lpLocalName : LPSTR,
    lpRemoteName : LPSTR,
    dwFlags : CULong,
);

alias DISCDLGSTRUCTA = Struct__DISCDLGSTRUCTA;

alias LPDISCDLGSTRUCTA = Pointer[Struct__DISCDLGSTRUCTA];

record Struct__DISCDLGSTRUCTW (
    cbStructure : CULong,
    hwndOwner : HWND,
    lpLocalName : LPWSTR,
    lpRemoteName : LPWSTR,
    dwFlags : CULong,
);

alias DISCDLGSTRUCTW = Struct__DISCDLGSTRUCTW;

alias LPDISCDLGSTRUCTW = Pointer[Struct__DISCDLGSTRUCTW];

record Struct__UNIVERSAL_NAME_INFOA (
    lpUniversalName : LPSTR,
);

alias UNIVERSAL_NAME_INFOA = Struct__UNIVERSAL_NAME_INFOA;

alias LPUNIVERSAL_NAME_INFOA = Pointer[Struct__UNIVERSAL_NAME_INFOA];

record Struct__UNIVERSAL_NAME_INFOW (
    lpUniversalName : LPWSTR,
);

alias UNIVERSAL_NAME_INFOW = Struct__UNIVERSAL_NAME_INFOW;

alias LPUNIVERSAL_NAME_INFOW = Pointer[Struct__UNIVERSAL_NAME_INFOW];

record Struct__REMOTE_NAME_INFOA (
    lpUniversalName : LPSTR,
    lpConnectionName : LPSTR,
    lpRemainingPath : LPSTR,
);

alias REMOTE_NAME_INFOA = Struct__REMOTE_NAME_INFOA;

alias LPREMOTE_NAME_INFOA = Pointer[Struct__REMOTE_NAME_INFOA];

record Struct__REMOTE_NAME_INFOW (
    lpUniversalName : LPWSTR,
    lpConnectionName : LPWSTR,
    lpRemainingPath : LPWSTR,
);

alias REMOTE_NAME_INFOW = Struct__REMOTE_NAME_INFOW;

alias LPREMOTE_NAME_INFOW = Pointer[Struct__REMOTE_NAME_INFOW];

record Struct__NETINFOSTRUCT (
    cbStructure : CULong,
    dwProviderVersion : CULong,
    dwStatus : CULong,
    dwCharacteristics : CULong,
    dwHandle : CULong,
    wNetType : UShort,
    dwPrinters : CULong,
    dwDrives : CULong,
);

alias NETINFOSTRUCT = Struct__NETINFOSTRUCT;

alias LPNETINFOSTRUCT = Pointer[Struct__NETINFOSTRUCT];

alias PFNGETPROFILEPATHA = StdCallCodePointer[(Pointer[CChar],Pointer[CChar],UInt),(UInt)];

alias PFNGETPROFILEPATHW = StdCallCodePointer[(Pointer[UShort],Pointer[UShort],UInt),(UInt)];

alias PFNRECONCILEPROFILEA = StdCallCodePointer[(Pointer[CChar],Pointer[CChar],CULong),(UInt)];

alias PFNRECONCILEPROFILEW = StdCallCodePointer[(Pointer[UShort],Pointer[UShort],CULong),(UInt)];

alias PFNPROCESSPOLICIESA = StdCallCodePointer[(Pointer[Struct_HWND__],Pointer[CChar],Pointer[CChar],Pointer[CChar],CULong),(Int)];

alias PFNPROCESSPOLICIESW = StdCallCodePointer[(Pointer[Struct_HWND__],Pointer[UShort],Pointer[UShort],Pointer[UShort],CULong),(Int)];

record Struct__NETCONNECTINFOSTRUCT (
    cbStructure : CULong,
    dwFlags : CULong,
    dwSpeed : CULong,
    dwDelay : CULong,
    dwOptDataSize : CULong,
);

alias NETCONNECTINFOSTRUCT = Struct__NETCONNECTINFOSTRUCT;

alias LPNETCONNECTINFOSTRUCT = Pointer[Struct__NETCONNECTINFOSTRUCT];

external (stdcall) WNetAddConnectionA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : LPCSTR) CULong;

external (stdcall) WNetAddConnectionW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR) CULong;

external (stdcall) WNetAddConnection2A(
    argument0 : LPNETRESOURCEA,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : CULong) CULong;

external (stdcall) WNetAddConnection2W(
    argument0 : LPNETRESOURCEW,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR,
    argument3 : CULong) CULong;

external (stdcall) WNetAddConnection3A(
    argument0 : HWND,
    argument1 : LPNETRESOURCEA,
    argument2 : LPCSTR,
    argument3 : LPCSTR,
    argument4 : CULong) CULong;

external (stdcall) WNetAddConnection3W(
    argument0 : HWND,
    argument1 : LPNETRESOURCEW,
    argument2 : LPCWSTR,
    argument3 : LPCWSTR,
    argument4 : CULong) CULong;

external (stdcall) WNetCancelConnectionA(
    argument0 : LPCSTR,
    argument1 : Int) CULong;

external (stdcall) WNetCancelConnectionW(
    argument0 : LPCWSTR,
    argument1 : Int) CULong;

external (stdcall) WNetCancelConnection2A(
    argument0 : LPCSTR,
    argument1 : CULong,
    argument2 : Int) CULong;

external (stdcall) WNetCancelConnection2W(
    argument0 : LPCWSTR,
    argument1 : CULong,
    argument2 : Int) CULong;

external (stdcall) WNetGetConnectionA(
    argument0 : LPCSTR,
    argument1 : LPSTR,
    argument2 : PDWORD) CULong;

external (stdcall) WNetGetConnectionW(
    argument0 : LPCWSTR,
    argument1 : LPWSTR,
    argument2 : PDWORD) CULong;

external (stdcall) WNetUseConnectionA(
    argument0 : HWND,
    argument1 : LPNETRESOURCEA,
    argument2 : LPCSTR,
    argument3 : LPCSTR,
    argument4 : CULong,
    argument5 : LPSTR,
    argument6 : PDWORD,
    argument7 : PDWORD) CULong;

external (stdcall) WNetUseConnectionW(
    argument0 : HWND,
    argument1 : LPNETRESOURCEW,
    argument2 : LPCWSTR,
    argument3 : LPCWSTR,
    argument4 : CULong,
    argument5 : LPWSTR,
    argument6 : PDWORD,
    argument7 : PDWORD) CULong;

external (stdcall) WNetSetConnectionA(
    argument0 : LPCSTR,
    argument1 : CULong,
    argument2 : PVOID) CULong;

external (stdcall) WNetSetConnectionW(
    argument0 : LPCWSTR,
    argument1 : CULong,
    argument2 : PVOID) CULong;

external (stdcall) WNetConnectionDialog(
    argument0 : HWND,
    argument1 : CULong) CULong;

external (stdcall) WNetDisconnectDialog(
    argument0 : HWND,
    argument1 : CULong) CULong;

external (stdcall) WNetConnectionDialog1A(
    argument0 : LPCONNECTDLGSTRUCTA) CULong;

external (stdcall) WNetConnectionDialog1W(
    argument0 : LPCONNECTDLGSTRUCTW) CULong;

external (stdcall) WNetDisconnectDialog1A(
    argument0 : LPDISCDLGSTRUCTA) CULong;

external (stdcall) WNetDisconnectDialog1W(
    argument0 : LPDISCDLGSTRUCTW) CULong;

external (stdcall) WNetOpenEnumA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPNETRESOURCEA,
    argument4 : LPHANDLE) CULong;

external (stdcall) WNetOpenEnumW(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPNETRESOURCEW,
    argument4 : LPHANDLE) CULong;

external (stdcall) WNetEnumResourceA(
    argument0 : HANDLE,
    argument1 : PDWORD,
    argument2 : PVOID,
    argument3 : PDWORD) CULong;

external (stdcall) WNetEnumResourceW(
    argument0 : HANDLE,
    argument1 : PDWORD,
    argument2 : PVOID,
    argument3 : PDWORD) CULong;

external (stdcall) WNetCloseEnum(
    argument0 : HANDLE) CULong;

external (stdcall) WNetGetUniversalNameA(
    argument0 : LPCSTR,
    argument1 : CULong,
    argument2 : PVOID,
    argument3 : PDWORD) CULong;

external (stdcall) WNetGetUniversalNameW(
    argument0 : LPCWSTR,
    argument1 : CULong,
    argument2 : PVOID,
    argument3 : PDWORD) CULong;

external (stdcall) WNetGetUserA(
    argument0 : LPCSTR,
    argument1 : LPSTR,
    argument2 : PDWORD) CULong;

external (stdcall) WNetGetUserW(
    argument0 : LPCWSTR,
    argument1 : LPWSTR,
    argument2 : PDWORD) CULong;

external (stdcall) WNetGetProviderNameA(
    argument0 : CULong,
    argument1 : LPSTR,
    argument2 : PDWORD) CULong;

external (stdcall) WNetGetProviderNameW(
    argument0 : CULong,
    argument1 : LPWSTR,
    argument2 : PDWORD) CULong;

external (stdcall) WNetGetNetworkInformationA(
    argument0 : LPCSTR,
    argument1 : LPNETINFOSTRUCT) CULong;

external (stdcall) WNetGetNetworkInformationW(
    argument0 : LPCWSTR,
    argument1 : LPNETINFOSTRUCT) CULong;

external (stdcall) WNetGetResourceInformationA(
    argument0 : LPNETRESOURCEA,
    argument1 : LPVOID,
    argument2 : LPDWORD,
    argument3 : Pointer[LPSTR]) CULong;

external (stdcall) WNetGetResourceInformationW(
    argument0 : LPNETRESOURCEW,
    argument1 : LPVOID,
    argument2 : LPDWORD,
    argument3 : Pointer[LPWSTR]) CULong;

external (stdcall) WNetGetResourceParentA(
    argument0 : LPNETRESOURCEA,
    argument1 : LPVOID,
    argument2 : LPDWORD) CULong;

external (stdcall) WNetGetResourceParentW(
    argument0 : LPNETRESOURCEW,
    argument1 : LPVOID,
    argument2 : LPDWORD) CULong;

external (stdcall) WNetGetLastErrorA(
    argument0 : PDWORD,
    argument1 : LPSTR,
    argument2 : CULong,
    argument3 : LPSTR,
    argument4 : CULong) CULong;

external (stdcall) WNetGetLastErrorW(
    argument0 : PDWORD,
    argument1 : LPWSTR,
    argument2 : CULong,
    argument3 : LPWSTR,
    argument4 : CULong) CULong;

external (stdcall) MultinetGetConnectionPerformanceA(
    argument0 : LPNETRESOURCEA,
    argument1 : LPNETCONNECTINFOSTRUCT) CULong;

external (stdcall) MultinetGetConnectionPerformanceW(
    argument0 : LPNETRESOURCEW,
    argument1 : LPNETCONNECTINFOSTRUCT) CULong;

alias NETRESOURCE = NETRESOURCEA;

alias LPNETRESOURCE = Pointer[NETRESOURCEA];

alias CONNECTDLGSTRUCT = CONNECTDLGSTRUCTA;

alias LPCONNECTDLGSTRUCT = Pointer[CONNECTDLGSTRUCTA];

alias DISCDLGSTRUCT = DISCDLGSTRUCTA;

alias LPDISCDLGSTRUCT = Pointer[DISCDLGSTRUCTA];

alias UNIVERSAL_NAME_INFO = UNIVERSAL_NAME_INFOA;

alias LPUNIVERSAL_NAME_INFO = Pointer[UNIVERSAL_NAME_INFOA];

alias REMOTE_NAME_INFO = REMOTE_NAME_INFOA;

alias LPREMOTE_NAME_INFO = Pointer[REMOTE_NAME_INFOA];

alias REGSAM = CULong;

record Struct_value_entA (
    ve_valuename : LPSTR,
    ve_valuelen : CULong,
    ve_valueptr : CULong,
    ve_type : CULong,
);

alias VALENTA = Struct_value_entA;

alias PVALENTA = Pointer[Struct_value_entA];

record Struct_value_entW (
    ve_valuename : LPWSTR,
    ve_valuelen : CULong,
    ve_valueptr : CULong,
    ve_type : CULong,
);

alias VALENTW = Struct_value_entW;

alias PVALENTW = Pointer[Struct_value_entW];

external (stdcall) AbortSystemShutdownA(
    argument0 : LPCSTR) Int;

external (stdcall) AbortSystemShutdownW(
    argument0 : LPCWSTR) Int;

external (stdcall) InitiateSystemShutdownA(
    argument0 : LPSTR,
    argument1 : LPSTR,
    argument2 : CULong,
    argument3 : Int,
    argument4 : Int) Int;

external (stdcall) InitiateSystemShutdownW(
    argument0 : LPWSTR,
    argument1 : LPWSTR,
    argument2 : CULong,
    argument3 : Int,
    argument4 : Int) Int;

external (stdcall) RegCloseKey(
    argument0 : HKEY) CLong;

external (stdcall) RegConnectRegistryA(
    argument0 : LPCSTR,
    argument1 : HKEY,
    argument2 : PHKEY) CLong;

external (stdcall) RegConnectRegistryW(
    argument0 : LPCWSTR,
    argument1 : HKEY,
    argument2 : PHKEY) CLong;

external (stdcall) RegCreateKeyA(
    argument0 : HKEY,
    argument1 : LPCSTR,
    argument2 : PHKEY) CLong;

external (stdcall) RegCreateKeyExA(
    argument0 : HKEY,
    argument1 : LPCSTR,
    argument2 : CULong,
    argument3 : LPSTR,
    argument4 : CULong,
    argument5 : CULong,
    argument6 : LPSECURITY_ATTRIBUTES,
    argument7 : PHKEY,
    argument8 : PDWORD) CLong;

external (stdcall) RegCreateKeyExW(
    argument0 : HKEY,
    argument1 : LPCWSTR,
    argument2 : CULong,
    argument3 : LPWSTR,
    argument4 : CULong,
    argument5 : CULong,
    argument6 : LPSECURITY_ATTRIBUTES,
    argument7 : PHKEY,
    argument8 : PDWORD) CLong;

external (stdcall) RegCreateKeyW(
    argument0 : HKEY,
    argument1 : LPCWSTR,
    argument2 : PHKEY) CLong;

external (stdcall) RegDeleteKeyA(
    argument0 : HKEY,
    argument1 : LPCSTR) CLong;

external (stdcall) RegDeleteKeyW(
    argument0 : HKEY,
    argument1 : LPCWSTR) CLong;

external (stdcall) RegDeleteValueA(
    argument0 : HKEY,
    argument1 : LPCSTR) CLong;

external (stdcall) RegDeleteValueW(
    argument0 : HKEY,
    argument1 : LPCWSTR) CLong;

external (stdcall) RegEnumKeyA(
    argument0 : HKEY,
    argument1 : CULong,
    argument2 : LPSTR,
    argument3 : CULong) CLong;

external (stdcall) RegEnumKeyW(
    argument0 : HKEY,
    argument1 : CULong,
    argument2 : LPWSTR,
    argument3 : CULong) CLong;

external (stdcall) RegEnumKeyExA(
    argument0 : HKEY,
    argument1 : CULong,
    argument2 : LPSTR,
    argument3 : PDWORD,
    argument4 : PDWORD,
    argument5 : LPSTR,
    argument6 : PDWORD,
    argument7 : PFILETIME) CLong;

external (stdcall) RegEnumKeyExW(
    argument0 : HKEY,
    argument1 : CULong,
    argument2 : LPWSTR,
    argument3 : PDWORD,
    argument4 : PDWORD,
    argument5 : LPWSTR,
    argument6 : PDWORD,
    argument7 : PFILETIME) CLong;

external (stdcall) RegEnumValueA(
    argument0 : HKEY,
    argument1 : CULong,
    argument2 : LPSTR,
    argument3 : PDWORD,
    argument4 : PDWORD,
    argument5 : PDWORD,
    argument6 : LPBYTE,
    argument7 : PDWORD) CLong;

external (stdcall) RegEnumValueW(
    argument0 : HKEY,
    argument1 : CULong,
    argument2 : LPWSTR,
    argument3 : PDWORD,
    argument4 : PDWORD,
    argument5 : PDWORD,
    argument6 : LPBYTE,
    argument7 : PDWORD) CLong;

external (stdcall) RegFlushKey(
    argument0 : HKEY) CLong;

external (stdcall) RegGetKeySecurity(
    argument0 : HKEY,
    argument1 : CULong,
    argument2 : PSECURITY_DESCRIPTOR,
    argument3 : PDWORD) CLong;

external (stdcall) RegLoadKeyA(
    argument0 : HKEY,
    argument1 : LPCSTR,
    argument2 : LPCSTR) CLong;

external (stdcall) RegLoadKeyW(
    argument0 : HKEY,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR) CLong;

external (stdcall) RegNotifyChangeKeyValue(
    argument0 : HKEY,
    argument1 : Int,
    argument2 : CULong,
    argument3 : HANDLE,
    argument4 : Int) CLong;

external (stdcall) RegOpenKeyA(
    argument0 : HKEY,
    argument1 : LPCSTR,
    argument2 : PHKEY) CLong;

external (stdcall) RegOpenKeyExA(
    argument0 : HKEY,
    argument1 : LPCSTR,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : PHKEY) CLong;

external (stdcall) RegOpenKeyExW(
    argument0 : HKEY,
    argument1 : LPCWSTR,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : PHKEY) CLong;

external (stdcall) RegOpenKeyW(
    argument0 : HKEY,
    argument1 : LPCWSTR,
    argument2 : PHKEY) CLong;

external (stdcall) RegQueryInfoKeyA(
    argument0 : HKEY,
    argument1 : LPSTR,
    argument2 : PDWORD,
    argument3 : PDWORD,
    argument4 : PDWORD,
    argument5 : PDWORD,
    argument6 : PDWORD,
    argument7 : PDWORD,
    argument8 : PDWORD,
    argument9 : PDWORD,
    argument10 : PDWORD,
    argument11 : PFILETIME) CLong;

external (stdcall) RegQueryInfoKeyW(
    argument0 : HKEY,
    argument1 : LPWSTR,
    argument2 : PDWORD,
    argument3 : PDWORD,
    argument4 : PDWORD,
    argument5 : PDWORD,
    argument6 : PDWORD,
    argument7 : PDWORD,
    argument8 : PDWORD,
    argument9 : PDWORD,
    argument10 : PDWORD,
    argument11 : PFILETIME) CLong;

external (stdcall) RegQueryMultipleValuesA(
    argument0 : HKEY,
    argument1 : PVALENTA,
    argument2 : CULong,
    argument3 : LPSTR,
    argument4 : LPDWORD) CLong;

external (stdcall) RegQueryMultipleValuesW(
    argument0 : HKEY,
    argument1 : PVALENTW,
    argument2 : CULong,
    argument3 : LPWSTR,
    argument4 : LPDWORD) CLong;

external (stdcall) RegQueryValueA(
    argument0 : HKEY,
    argument1 : LPCSTR,
    argument2 : LPSTR,
    argument3 : PLONG) CLong;

external (stdcall) RegQueryValueExA(
    argument0 : HKEY,
    argument1 : LPCSTR,
    argument2 : LPDWORD,
    argument3 : LPDWORD,
    argument4 : LPBYTE,
    argument5 : LPDWORD) CLong;

external (stdcall) RegQueryValueExW(
    argument0 : HKEY,
    argument1 : LPCWSTR,
    argument2 : LPDWORD,
    argument3 : LPDWORD,
    argument4 : LPBYTE,
    argument5 : LPDWORD) CLong;

external (stdcall) RegQueryValueW(
    argument0 : HKEY,
    argument1 : LPCWSTR,
    argument2 : LPWSTR,
    argument3 : PLONG) CLong;

external (stdcall) RegReplaceKeyA(
    argument0 : HKEY,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : LPCSTR) CLong;

external (stdcall) RegReplaceKeyW(
    argument0 : HKEY,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR,
    argument3 : LPCWSTR) CLong;

external (stdcall) RegRestoreKeyA(
    argument0 : HKEY,
    argument1 : LPCSTR,
    argument2 : CULong) CLong;

external (stdcall) RegRestoreKeyW(
    argument0 : HKEY,
    argument1 : LPCWSTR,
    argument2 : CULong) CLong;

external (stdcall) RegSaveKeyA(
    argument0 : HKEY,
    argument1 : LPCSTR,
    argument2 : LPSECURITY_ATTRIBUTES) CLong;

external (stdcall) RegSaveKeyW(
    argument0 : HKEY,
    argument1 : LPCWSTR,
    argument2 : LPSECURITY_ATTRIBUTES) CLong;

external (stdcall) RegSetKeySecurity(
    argument0 : HKEY,
    argument1 : CULong,
    argument2 : PSECURITY_DESCRIPTOR) CLong;

external (stdcall) RegSetValueA(
    argument0 : HKEY,
    argument1 : LPCSTR,
    argument2 : CULong,
    argument3 : LPCSTR,
    argument4 : CULong) CLong;

external (stdcall) RegSetValueExA(
    argument0 : HKEY,
    argument1 : LPCSTR,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : Pointer[CUChar],
    argument5 : CULong) CLong;

external (stdcall) RegSetValueExW(
    argument0 : HKEY,
    argument1 : LPCWSTR,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : Pointer[CUChar],
    argument5 : CULong) CLong;

external (stdcall) RegSetValueW(
    argument0 : HKEY,
    argument1 : LPCWSTR,
    argument2 : CULong,
    argument3 : LPCWSTR,
    argument4 : CULong) CLong;

external (stdcall) RegUnLoadKeyA(
    argument0 : HKEY,
    argument1 : LPCSTR) CLong;

external (stdcall) RegUnLoadKeyW(
    argument0 : HKEY,
    argument1 : LPCWSTR) CLong;

alias VALENT = VALENTA;

alias PVALENT = Pointer[VALENTA];

record Struct__SERVICE_STATUS (
    dwServiceType : CULong,
    dwCurrentState : CULong,
    dwControlsAccepted : CULong,
    dwWin32ExitCode : CULong,
    dwServiceSpecificExitCode : CULong,
    dwCheckPoint : CULong,
    dwWaitHint : CULong,
);

alias SERVICE_STATUS = Struct__SERVICE_STATUS;

alias LPSERVICE_STATUS = Pointer[Struct__SERVICE_STATUS];

record Struct__SERVICE_STATUS_PROCESS (
    dwServiceType : CULong,
    dwCurrentState : CULong,
    dwControlsAccepted : CULong,
    dwWin32ExitCode : CULong,
    dwServiceSpecificExitCode : CULong,
    dwCheckPoint : CULong,
    dwWaitHint : CULong,
    dwProcessId : CULong,
    dwServiceFlags : CULong,
);

alias SERVICE_STATUS_PROCESS = Struct__SERVICE_STATUS_PROCESS;

alias LPSERVICE_STATUS_PROCESS = Pointer[Struct__SERVICE_STATUS_PROCESS];

alias SC_STATUS_PROCESS_INFO = 0;

alias SC_STATUS_TYPE = Int;

alias SC_ENUM_PROCESS_INFO = 0;

alias SC_ENUM_TYPE = Int;

record Struct__ENUM_SERVICE_STATUSA (
    lpServiceName : LPSTR,
    lpDisplayName : LPSTR,
    ServiceStatus : SERVICE_STATUS,
);

alias ENUM_SERVICE_STATUSA = Struct__ENUM_SERVICE_STATUSA;

alias LPENUM_SERVICE_STATUSA = Pointer[Struct__ENUM_SERVICE_STATUSA];

record Struct__ENUM_SERVICE_STATUSW (
    lpServiceName : LPWSTR,
    lpDisplayName : LPWSTR,
    ServiceStatus : SERVICE_STATUS,
);

alias ENUM_SERVICE_STATUSW = Struct__ENUM_SERVICE_STATUSW;

alias LPENUM_SERVICE_STATUSW = Pointer[Struct__ENUM_SERVICE_STATUSW];

record Struct__ENUM_SERVICE_STATUS_PROCESSA (
    lpServiceName : LPSTR,
    lpDisplayName : LPSTR,
    ServiceStatusProcess : SERVICE_STATUS_PROCESS,
);

alias ENUM_SERVICE_STATUS_PROCESSA = Struct__ENUM_SERVICE_STATUS_PROCESSA;

alias LPENUM_SERVICE_STATUS_PROCESSA = Pointer[Struct__ENUM_SERVICE_STATUS_PROCESSA];

record Struct__ENUM_SERVICE_STATUS_PROCESSW (
    lpServiceName : LPWSTR,
    lpDisplayName : LPWSTR,
    ServiceStatusProcess : SERVICE_STATUS_PROCESS,
);

alias ENUM_SERVICE_STATUS_PROCESSW = Struct__ENUM_SERVICE_STATUS_PROCESSW;

alias LPENUM_SERVICE_STATUS_PROCESSW = Pointer[Struct__ENUM_SERVICE_STATUS_PROCESSW];

record Struct__QUERY_SERVICE_CONFIGA (
    dwServiceType : CULong,
    dwStartType : CULong,
    dwErrorControl : CULong,
    lpBinaryPathName : LPSTR,
    lpLoadOrderGroup : LPSTR,
    dwTagId : CULong,
    lpDependencies : LPSTR,
    lpServiceStartName : LPSTR,
    lpDisplayName : LPSTR,
);

alias QUERY_SERVICE_CONFIGA = Struct__QUERY_SERVICE_CONFIGA;

alias LPQUERY_SERVICE_CONFIGA = Pointer[Struct__QUERY_SERVICE_CONFIGA];

record Struct__QUERY_SERVICE_CONFIGW (
    dwServiceType : CULong,
    dwStartType : CULong,
    dwErrorControl : CULong,
    lpBinaryPathName : LPWSTR,
    lpLoadOrderGroup : LPWSTR,
    dwTagId : CULong,
    lpDependencies : LPWSTR,
    lpServiceStartName : LPWSTR,
    lpDisplayName : LPWSTR,
);

alias QUERY_SERVICE_CONFIGW = Struct__QUERY_SERVICE_CONFIGW;

alias LPQUERY_SERVICE_CONFIGW = Pointer[Struct__QUERY_SERVICE_CONFIGW];

record Struct__QUERY_SERVICE_LOCK_STATUSA (
    fIsLocked : CULong,
    lpLockOwner : LPSTR,
    dwLockDuration : CULong,
);

alias QUERY_SERVICE_LOCK_STATUSA = Struct__QUERY_SERVICE_LOCK_STATUSA;

alias LPQUERY_SERVICE_LOCK_STATUSA = Pointer[Struct__QUERY_SERVICE_LOCK_STATUSA];

record Struct__QUERY_SERVICE_LOCK_STATUSW (
    fIsLocked : CULong,
    lpLockOwner : LPWSTR,
    dwLockDuration : CULong,
);

alias QUERY_SERVICE_LOCK_STATUSW = Struct__QUERY_SERVICE_LOCK_STATUSW;

alias LPQUERY_SERVICE_LOCK_STATUSW = Pointer[Struct__QUERY_SERVICE_LOCK_STATUSW];

alias LPSERVICE_MAIN_FUNCTIONA = StdCallCodePointer[(CULong,Pointer[Pointer[CChar]]),()];

alias LPSERVICE_MAIN_FUNCTIONW = StdCallCodePointer[(CULong,Pointer[Pointer[UShort]]),()];

record Struct__SERVICE_TABLE_ENTRYA (
    lpServiceName : LPSTR,
    lpServiceProc : LPSERVICE_MAIN_FUNCTIONA,
);

alias SERVICE_TABLE_ENTRYA = Struct__SERVICE_TABLE_ENTRYA;

alias LPSERVICE_TABLE_ENTRYA = Pointer[Struct__SERVICE_TABLE_ENTRYA];

record Struct__SERVICE_TABLE_ENTRYW (
    lpServiceName : LPWSTR,
    lpServiceProc : LPSERVICE_MAIN_FUNCTIONW,
);

alias SERVICE_TABLE_ENTRYW = Struct__SERVICE_TABLE_ENTRYW;

alias LPSERVICE_TABLE_ENTRYW = Pointer[Struct__SERVICE_TABLE_ENTRYW];

record Struct_SC_HANDLE__ (
    i : Int,
);

alias SC_HANDLE = Pointer[Struct_SC_HANDLE__];

alias LPSC_HANDLE = Pointer[SC_HANDLE];

alias SC_LOCK = PVOID;

alias SERVICE_STATUS_HANDLE = CULong;

alias LPHANDLER_FUNCTION = StdCallCodePointer[(CULong),()];

alias LPHANDLER_FUNCTION_EX = StdCallCodePointer[(CULong,CULong,RawPointer,RawPointer),(CULong)];

record Struct__SERVICE_DESCRIPTIONA (
    lpDescription : LPSTR,
);

alias SERVICE_DESCRIPTIONA = Struct__SERVICE_DESCRIPTIONA;

alias LPSERVICE_DESCRIPTIONA = Pointer[Struct__SERVICE_DESCRIPTIONA];

record Struct__SERVICE_DESCRIPTIONW (
    lpDescription : LPWSTR,
);

alias SERVICE_DESCRIPTIONW = Struct__SERVICE_DESCRIPTIONW;

alias LPSERVICE_DESCRIPTIONW = Pointer[Struct__SERVICE_DESCRIPTIONW];

alias SC_ACTION_NONE = 0;
alias SC_ACTION_RESTART = 1;
alias SC_ACTION_REBOOT = 2;
alias SC_ACTION_RUN_COMMAND = 3;

alias SC_ACTION_TYPE = Int;

record Struct__SC_ACTION (
    Type : SC_ACTION_TYPE,
    Delay : CULong,
);

alias SC_ACTION = Struct__SC_ACTION;

alias LPSC_ACTION = Pointer[Struct__SC_ACTION];

record Struct__SERVICE_FAILURE_ACTIONSA (
    dwResetPeriod : CULong,
    lpRebootMsg : LPSTR,
    lpCommand : LPSTR,
    cActions : CULong,
    lpsaActions : Pointer[SC_ACTION],
);

alias SERVICE_FAILURE_ACTIONSA = Struct__SERVICE_FAILURE_ACTIONSA;

alias LPSERVICE_FAILURE_ACTIONSA = Pointer[Struct__SERVICE_FAILURE_ACTIONSA];

record Struct__SERVICE_FAILURE_ACTIONSW (
    dwResetPeriod : CULong,
    lpRebootMsg : LPWSTR,
    lpCommand : LPWSTR,
    cActions : CULong,
    lpsaActions : Pointer[SC_ACTION],
);

alias SERVICE_FAILURE_ACTIONSW = Struct__SERVICE_FAILURE_ACTIONSW;

alias LPSERVICE_FAILURE_ACTIONSW = Pointer[Struct__SERVICE_FAILURE_ACTIONSW];

external (stdcall) ChangeServiceConfigA(
    argument0 : SC_HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : LPCSTR,
    argument5 : LPCSTR,
    argument6 : LPDWORD,
    argument7 : LPCSTR,
    argument8 : LPCSTR,
    argument9 : LPCSTR,
    argument10 : LPCSTR) Int;

external (stdcall) ChangeServiceConfigW(
    argument0 : SC_HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : LPCWSTR,
    argument5 : LPCWSTR,
    argument6 : LPDWORD,
    argument7 : LPCWSTR,
    argument8 : LPCWSTR,
    argument9 : LPCWSTR,
    argument10 : LPCWSTR) Int;

external (stdcall) ChangeServiceConfig2A(
    argument0 : SC_HANDLE,
    argument1 : CULong,
    argument2 : LPVOID) Int;

external (stdcall) ChangeServiceConfig2W(
    argument0 : SC_HANDLE,
    argument1 : CULong,
    argument2 : LPVOID) Int;

external (stdcall) CloseServiceHandle(
    argument0 : SC_HANDLE) Int;

external (stdcall) ControlService(
    argument0 : SC_HANDLE,
    argument1 : CULong,
    argument2 : LPSERVICE_STATUS) Int;

external (stdcall) CreateServiceA(
    argument0 : SC_HANDLE,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : CULong,
    argument6 : CULong,
    argument7 : LPCSTR,
    argument8 : LPCSTR,
    argument9 : PDWORD,
    argument10 : LPCSTR,
    argument11 : LPCSTR,
    argument12 : LPCSTR) SC_HANDLE;

external (stdcall) CreateServiceW(
    argument0 : SC_HANDLE,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : CULong,
    argument6 : CULong,
    argument7 : LPCWSTR,
    argument8 : LPCWSTR,
    argument9 : PDWORD,
    argument10 : LPCWSTR,
    argument11 : LPCWSTR,
    argument12 : LPCWSTR) SC_HANDLE;

external (stdcall) DeleteService(
    argument0 : SC_HANDLE) Int;

external (stdcall) EnumDependentServicesA(
    argument0 : SC_HANDLE,
    argument1 : CULong,
    argument2 : LPENUM_SERVICE_STATUSA,
    argument3 : CULong,
    argument4 : PDWORD,
    argument5 : PDWORD) Int;

external (stdcall) EnumDependentServicesW(
    argument0 : SC_HANDLE,
    argument1 : CULong,
    argument2 : LPENUM_SERVICE_STATUSW,
    argument3 : CULong,
    argument4 : PDWORD,
    argument5 : PDWORD) Int;

external (stdcall) EnumServicesStatusA(
    argument0 : SC_HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPENUM_SERVICE_STATUSA,
    argument4 : CULong,
    argument5 : PDWORD,
    argument6 : PDWORD,
    argument7 : PDWORD) Int;

external (stdcall) EnumServicesStatusW(
    argument0 : SC_HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPENUM_SERVICE_STATUSW,
    argument4 : CULong,
    argument5 : PDWORD,
    argument6 : PDWORD,
    argument7 : PDWORD) Int;

external (stdcall) EnumServicesStatusExA(
    argument0 : SC_HANDLE,
    argument1 : SC_ENUM_TYPE,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : LPBYTE,
    argument5 : CULong,
    argument6 : LPDWORD,
    argument7 : LPDWORD,
    argument8 : LPDWORD,
    argument9 : LPCSTR) Int;

external (stdcall) EnumServicesStatusExW(
    argument0 : SC_HANDLE,
    argument1 : SC_ENUM_TYPE,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : LPBYTE,
    argument5 : CULong,
    argument6 : LPDWORD,
    argument7 : LPDWORD,
    argument8 : LPDWORD,
    argument9 : LPCWSTR) Int;

external (stdcall) GetServiceDisplayNameA(
    argument0 : SC_HANDLE,
    argument1 : LPCSTR,
    argument2 : LPSTR,
    argument3 : PDWORD) Int;

external (stdcall) GetServiceDisplayNameW(
    argument0 : SC_HANDLE,
    argument1 : LPCWSTR,
    argument2 : LPWSTR,
    argument3 : PDWORD) Int;

external (stdcall) GetServiceKeyNameA(
    argument0 : SC_HANDLE,
    argument1 : LPCSTR,
    argument2 : LPSTR,
    argument3 : PDWORD) Int;

external (stdcall) GetServiceKeyNameW(
    argument0 : SC_HANDLE,
    argument1 : LPCWSTR,
    argument2 : LPWSTR,
    argument3 : PDWORD) Int;

external (stdcall) LockServiceDatabase(
    argument0 : SC_HANDLE) SC_LOCK;

external (stdcall) NotifyBootConfigStatus(
    argument0 : Int) Int;

external (stdcall) OpenSCManagerA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : CULong) SC_HANDLE;

external (stdcall) OpenSCManagerW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : CULong) SC_HANDLE;

external (stdcall) OpenServiceA(
    argument0 : SC_HANDLE,
    argument1 : LPCSTR,
    argument2 : CULong) SC_HANDLE;

external (stdcall) OpenServiceW(
    argument0 : SC_HANDLE,
    argument1 : LPCWSTR,
    argument2 : CULong) SC_HANDLE;

external (stdcall) QueryServiceConfigA(
    argument0 : SC_HANDLE,
    argument1 : LPQUERY_SERVICE_CONFIGA,
    argument2 : CULong,
    argument3 : PDWORD) Int;

external (stdcall) QueryServiceConfigW(
    argument0 : SC_HANDLE,
    argument1 : LPQUERY_SERVICE_CONFIGW,
    argument2 : CULong,
    argument3 : PDWORD) Int;

external (stdcall) QueryServiceConfig2A(
    argument0 : SC_HANDLE,
    argument1 : CULong,
    argument2 : LPBYTE,
    argument3 : CULong,
    argument4 : LPDWORD) Int;

external (stdcall) QueryServiceConfig2W(
    argument0 : SC_HANDLE,
    argument1 : CULong,
    argument2 : LPBYTE,
    argument3 : CULong,
    argument4 : LPDWORD) Int;

external (stdcall) QueryServiceLockStatusA(
    argument0 : SC_HANDLE,
    argument1 : LPQUERY_SERVICE_LOCK_STATUSA,
    argument2 : CULong,
    argument3 : PDWORD) Int;

external (stdcall) QueryServiceLockStatusW(
    argument0 : SC_HANDLE,
    argument1 : LPQUERY_SERVICE_LOCK_STATUSW,
    argument2 : CULong,
    argument3 : PDWORD) Int;

external (stdcall) QueryServiceObjectSecurity(
    argument0 : SC_HANDLE,
    argument1 : CULong,
    argument2 : PSECURITY_DESCRIPTOR,
    argument3 : CULong,
    argument4 : LPDWORD) Int;

external (stdcall) QueryServiceStatus(
    argument0 : SC_HANDLE,
    argument1 : LPSERVICE_STATUS) Int;

external (stdcall) QueryServiceStatusEx(
    argument0 : SC_HANDLE,
    argument1 : SC_STATUS_TYPE,
    argument2 : LPBYTE,
    argument3 : CULong,
    argument4 : LPDWORD) Int;

external (stdcall) RegisterServiceCtrlHandlerA(
    argument0 : LPCSTR,
    argument1 : LPHANDLER_FUNCTION) CULong;

external (stdcall) RegisterServiceCtrlHandlerW(
    argument0 : LPCWSTR,
    argument1 : LPHANDLER_FUNCTION) CULong;

external (stdcall) RegisterServiceCtrlHandlerExA(
    argument0 : LPCSTR,
    argument1 : LPHANDLER_FUNCTION_EX,
    argument2 : LPVOID) CULong;

external (stdcall) RegisterServiceCtrlHandlerExW(
    argument0 : LPCWSTR,
    argument1 : LPHANDLER_FUNCTION_EX,
    argument2 : LPVOID) CULong;

external (stdcall) SetServiceObjectSecurity(
    argument0 : SC_HANDLE,
    argument1 : CULong,
    argument2 : PSECURITY_DESCRIPTOR) Int;

external (stdcall) SetServiceStatus(
    argument0 : CULong,
    argument1 : LPSERVICE_STATUS) Int;

external (stdcall) StartServiceA(
    argument0 : SC_HANDLE,
    argument1 : CULong,
    argument2 : Pointer[LPCSTR]) Int;

external (stdcall) StartServiceCtrlDispatcherA(
    argument0 : LPSERVICE_TABLE_ENTRYA) Int;

external (stdcall) StartServiceCtrlDispatcherW(
    argument0 : LPSERVICE_TABLE_ENTRYW) Int;

external (stdcall) StartServiceW(
    argument0 : SC_HANDLE,
    argument1 : CULong,
    argument2 : Pointer[LPCWSTR]) Int;

external (stdcall) UnlockServiceDatabase(
    argument0 : SC_LOCK) Int;

alias ENUM_SERVICE_STATUS = ENUM_SERVICE_STATUSA;

alias LPENUM_SERVICE_STATUS = Pointer[ENUM_SERVICE_STATUSA];

alias ENUM_SERVICE_STATUS_PROCESS = ENUM_SERVICE_STATUS_PROCESSA;

alias LPENUM_SERVICE_STATUS_PROCESS = LPENUM_SERVICE_STATUS_PROCESSA;

alias QUERY_SERVICE_CONFIG = QUERY_SERVICE_CONFIGA;

alias LPQUERY_SERVICE_CONFIG = Pointer[QUERY_SERVICE_CONFIGA];

alias QUERY_SERVICE_LOCK_STATUS = QUERY_SERVICE_LOCK_STATUSA;

alias LPQUERY_SERVICE_LOCK_STATUS = Pointer[QUERY_SERVICE_LOCK_STATUSA];

alias SERVICE_TABLE_ENTRY = SERVICE_TABLE_ENTRYA;

alias LPSERVICE_TABLE_ENTRY = Pointer[SERVICE_TABLE_ENTRYA];

alias LPSERVICE_MAIN_FUNCTION = LPSERVICE_MAIN_FUNCTIONA;

alias SERVICE_DESCRIPTION = SERVICE_DESCRIPTIONA;

alias LPSERVICE_DESCRIPTION = LPSERVICE_DESCRIPTIONA;

alias SERVICE_FAILURE_ACTIONS = SERVICE_FAILURE_ACTIONSA;

alias LPSERVICE_FAILURE_ACTIONS = LPSERVICE_FAILURE_ACTIONSA;

record UnnamedStruct14 (
    bAppReturnCode : UShort,
    reserved : UShort,
    fBusy : UShort,
    fAck : UShort,
);

alias DDEACK = UnnamedStruct14;

record UnnamedStruct15 (
    reserved : UShort,
    fDeferUpd : UShort,
    fAckReq : UShort,
    cfFormat : Short,
);

alias DDEADVISE = UnnamedStruct15;

record UnnamedStruct16 (
    unused : UShort,
    fResponse : UShort,
    fRelease : UShort,
    reserved : UShort,
    fAckReq : UShort,
    cfFormat : Short,
    Value : Array[CUChar,1],
);

alias DDEDATA = UnnamedStruct16;

record UnnamedStruct17 (
    unused : UShort,
    fRelease : UShort,
    fReserved : UShort,
    cfFormat : Short,
    Value : Array[CUChar,1],
);

alias DDEPOKE = UnnamedStruct17;

record UnnamedStruct18 (
    unused : UShort,
    fRelease : UShort,
    fDeferUpd : UShort,
    fAckReq : UShort,
    cfFormat : Short,
);

alias DDELN = UnnamedStruct18;

record UnnamedStruct19 (
    unused : UShort,
    fAck : UShort,
    fRelease : UShort,
    fReserved : UShort,
    fAckReq : UShort,
    cfFormat : Short,
    rgb : Array[CUChar,1],
);

alias DDEUP = UnnamedStruct19;

external (stdcall) DdeSetQualityOfService(
    argument0 : HWND,
    argument1 : Pointer[SECURITY_QUALITY_OF_SERVICE],
    argument2 : PSECURITY_QUALITY_OF_SERVICE) Int;

external (stdcall) ImpersonateDdeClientWindow(
    argument0 : HWND,
    argument1 : HWND) Int;

external (stdcall) PackDDElParam(
    argument0 : UInt,
    argument1 : UInt,
    argument2 : UInt) CLong;

external (stdcall) UnpackDDElParam(
    argument0 : UInt,
    argument1 : CLong,
    argument2 : PUINT_PTR,
    argument3 : PUINT_PTR) Int;

external (stdcall) FreeDDElParam(
    argument0 : UInt,
    argument1 : CLong) Int;

external (stdcall) ReuseDDElParam(
    argument0 : CLong,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : UInt) CLong;

record Struct_HCONVLIST__ (
    i : Int,
);

alias HCONVLIST = Pointer[Struct_HCONVLIST__];

record Struct_HCONV__ (
    i : Int,
);

alias HCONV = Pointer[Struct_HCONV__];

record Struct_HSZ__ (
    i : Int,
);

alias HSZ = Pointer[Struct_HSZ__];

record Struct_HDDEDATA__ (
    i : Int,
);

alias HDDEDATA = Pointer[Struct_HDDEDATA__];

alias PFNCALLBACK = StdCallCodePointer[(UInt,UInt,Pointer[Struct_HCONV__],Pointer[Struct_HSZ__],Pointer[Struct_HSZ__],Pointer[Struct_HDDEDATA__],CULong,CULong),(Pointer[Struct_HDDEDATA__])];

record Struct_tagHSZPAIR (
    hszSvc : HSZ,
    hszTopic : HSZ,
);

alias HSZPAIR = Struct_tagHSZPAIR;

alias PHSZPAIR = Pointer[Struct_tagHSZPAIR];

record Struct_tagCONVCONTEXT (
    cb : UInt,
    wFlags : UInt,
    wCountryID : UInt,
    iCodePage : Int,
    dwLangID : CULong,
    dwSecurity : CULong,
    qos : SECURITY_QUALITY_OF_SERVICE,
);

alias CONVCONTEXT = Struct_tagCONVCONTEXT;

alias PCONVCONTEXT = Pointer[Struct_tagCONVCONTEXT];

record Struct_tagCONVINFO (
    cb : CULong,
    hUser : CULong,
    hConvPartner : HCONV,
    hszSvcPartner : HSZ,
    hszServiceReq : HSZ,
    hszTopic : HSZ,
    hszItem : HSZ,
    wFmt : UInt,
    wType : UInt,
    wStatus : UInt,
    wConvst : UInt,
    wLastError : UInt,
    hConvList : HCONVLIST,
    ConvCtxt : CONVCONTEXT,
    hwnd : HWND,
    hwndPartner : HWND,
);

alias CONVINFO = Struct_tagCONVINFO;

alias PCONVINFO = Pointer[Struct_tagCONVINFO];

record Struct_tagDDEML_MSG_HOOK_DATA (
    uiLo : UInt,
    uiHi : UInt,
    cbData : CULong,
    Data : Array[CULong,8],
);

alias DDEML_MSG_HOOK_DATA = Struct_tagDDEML_MSG_HOOK_DATA;

record Struct_tagMONHSZSTRUCT (
    cb : UInt,
    fsAction : Int,
    dwTime : CULong,
    hsz : HSZ,
    hTask : HANDLE,
    str : Array[CChar,1],
);

alias MONHSZSTRUCT = Struct_tagMONHSZSTRUCT;

alias PMONHSZSTRUCT = Pointer[Struct_tagMONHSZSTRUCT];

record Struct_tagMONLINKSTRUCT (
    cb : UInt,
    dwTime : CULong,
    hTask : HANDLE,
    fEstablished : Int,
    fNoData : Int,
    hszSvc : HSZ,
    hszTopic : HSZ,
    hszItem : HSZ,
    wFmt : UInt,
    fServer : Int,
    hConvServer : HCONV,
    hConvClient : HCONV,
);

alias MONLINKSTRUCT = Struct_tagMONLINKSTRUCT;

alias PMONLINKSTRUCT = Pointer[Struct_tagMONLINKSTRUCT];

record Struct_tagMONCONVSTRUCT (
    cb : UInt,
    fConnect : Int,
    dwTime : CULong,
    hTask : HANDLE,
    hszSvc : HSZ,
    hszTopic : HSZ,
    hConvClient : HCONV,
    hConvServer : HCONV,
);

alias MONCONVSTRUCT = Struct_tagMONCONVSTRUCT;

alias PMONCONVSTRUCT = Pointer[Struct_tagMONCONVSTRUCT];

record Struct_tagMONCBSTRUCT (
    cb : UInt,
    dwTime : CULong,
    hTask : HANDLE,
    dwRet : CULong,
    wType : UInt,
    wFmt : UInt,
    hConv : HCONV,
    hsz1 : HSZ,
    hsz2 : HSZ,
    hData : HDDEDATA,
    dwData1 : CULong,
    dwData2 : CULong,
    cc : CONVCONTEXT,
    cbData : CULong,
    Data : Array[CULong,8],
);

alias MONCBSTRUCT = Struct_tagMONCBSTRUCT;

alias PMONCBSTRUCT = Pointer[Struct_tagMONCBSTRUCT];

record Struct_tagMONERRSTRUCT (
    cb : UInt,
    wLastError : UInt,
    dwTime : CULong,
    hTask : HANDLE,
);

alias MONERRSTRUCT = Struct_tagMONERRSTRUCT;

alias PMONERRSTRUCT = Pointer[Struct_tagMONERRSTRUCT];

record Struct_tagMONMSGSTRUCT (
    cb : UInt,
    hwndTo : HWND,
    dwTime : CULong,
    hTask : HANDLE,
    wMsg : UInt,
    wParam : UInt,
    lParam : CLong,
    dmhd : DDEML_MSG_HOOK_DATA,
);

alias MONMSGSTRUCT = Struct_tagMONMSGSTRUCT;

alias PMONMSGSTRUCT = Pointer[Struct_tagMONMSGSTRUCT];

external (stdcall) DdeAbandonTransaction(
    argument0 : CULong,
    argument1 : HCONV,
    argument2 : CULong) Int;

external (stdcall) DdeAccessData(
    argument0 : HDDEDATA,
    argument1 : PDWORD) PBYTE;

external (stdcall) DdeAddData(
    argument0 : HDDEDATA,
    argument1 : PBYTE,
    argument2 : CULong,
    argument3 : CULong) HDDEDATA;

external (stdcall) DdeClientTransaction(
    argument0 : PBYTE,
    argument1 : CULong,
    argument2 : HCONV,
    argument3 : HSZ,
    argument4 : UInt,
    argument5 : UInt,
    argument6 : CULong,
    argument7 : PDWORD) HDDEDATA;

external (stdcall) DdeCmpStringHandles(
    argument0 : HSZ,
    argument1 : HSZ) Int;

external (stdcall) DdeConnect(
    argument0 : CULong,
    argument1 : HSZ,
    argument2 : HSZ,
    argument3 : PCONVCONTEXT) HCONV;

external (stdcall) DdeConnectList(
    argument0 : CULong,
    argument1 : HSZ,
    argument2 : HSZ,
    argument3 : HCONVLIST,
    argument4 : PCONVCONTEXT) HCONVLIST;

external (stdcall) DdeCreateDataHandle(
    argument0 : CULong,
    argument1 : PBYTE,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : HSZ,
    argument5 : UInt,
    argument6 : UInt) HDDEDATA;

external (stdcall) DdeCreateStringHandleA(
    argument0 : CULong,
    argument1 : LPCSTR,
    argument2 : Int) HSZ;

external (stdcall) DdeCreateStringHandleW(
    argument0 : CULong,
    argument1 : LPCWSTR,
    argument2 : Int) HSZ;

external (stdcall) DdeDisconnect(
    argument0 : HCONV) Int;

external (stdcall) DdeDisconnectList(
    argument0 : HCONVLIST) Int;

external (stdcall) DdeEnableCallback(
    argument0 : CULong,
    argument1 : HCONV,
    argument2 : UInt) Int;

external (stdcall) DdeFreeDataHandle(
    argument0 : HDDEDATA) Int;

external (stdcall) DdeFreeStringHandle(
    argument0 : CULong,
    argument1 : HSZ) Int;

external (stdcall) DdeGetData(
    argument0 : HDDEDATA,
    argument1 : PBYTE,
    argument2 : CULong,
    argument3 : CULong) CULong;

external (stdcall) DdeGetLastError(
    argument0 : CULong) UInt;

external (stdcall) DdeImpersonateClient(
    argument0 : HCONV) Int;

external (stdcall) DdeInitializeA(
    argument0 : PDWORD,
    argument1 : PFNCALLBACK,
    argument2 : CULong,
    argument3 : CULong) UInt;

external (stdcall) DdeInitializeW(
    argument0 : PDWORD,
    argument1 : PFNCALLBACK,
    argument2 : CULong,
    argument3 : CULong) UInt;

external (stdcall) DdeKeepStringHandle(
    argument0 : CULong,
    argument1 : HSZ) Int;

external (stdcall) DdeNameService(
    argument0 : CULong,
    argument1 : HSZ,
    argument2 : HSZ,
    argument3 : UInt) HDDEDATA;

external (stdcall) DdePostAdvise(
    argument0 : CULong,
    argument1 : HSZ,
    argument2 : HSZ) Int;

external (stdcall) DdeQueryConvInfo(
    argument0 : HCONV,
    argument1 : CULong,
    argument2 : PCONVINFO) UInt;

external (stdcall) DdeQueryNextServer(
    argument0 : HCONVLIST,
    argument1 : HCONV) HCONV;

external (stdcall) DdeQueryStringA(
    argument0 : CULong,
    argument1 : HSZ,
    argument2 : LPSTR,
    argument3 : CULong,
    argument4 : Int) CULong;

external (stdcall) DdeQueryStringW(
    argument0 : CULong,
    argument1 : HSZ,
    argument2 : LPWSTR,
    argument3 : CULong,
    argument4 : Int) CULong;

external (stdcall) DdeReconnect(
    argument0 : HCONV) HCONV;

external (stdcall) DdeSetUserHandle(
    argument0 : HCONV,
    argument1 : CULong,
    argument2 : CULong) Int;

external (stdcall) DdeUnaccessData(
    argument0 : HDDEDATA) Int;

external (stdcall) DdeUninitialize(
    argument0 : CULong) Int;

record Struct_tagCRGB (
    bRed : CUChar,
    bGreen : CUChar,
    bBlue : CUChar,
    bExtra : CUChar,
);

alias CRGB = Struct_tagCRGB;

alias HIMC = CULong;

alias HIMCC = CULong;

alias LPHKL = Pointer[HKL];

record Struct_tagCOMPOSITIONFORM (
    dwStyle : CULong,
    ptCurrentPos : POINT,
    rcArea : RECT,
);

alias COMPOSITIONFORM = Struct_tagCOMPOSITIONFORM;

alias PCOMPOSITIONFORM = Pointer[Struct_tagCOMPOSITIONFORM];

alias LPCOMPOSITIONFORM = Pointer[Struct_tagCOMPOSITIONFORM];

record Struct_tagCANDIDATEFORM (
    dwIndex : CULong,
    dwStyle : CULong,
    ptCurrentPos : POINT,
    rcArea : RECT,
);

alias CANDIDATEFORM = Struct_tagCANDIDATEFORM;

alias PCANDIDATEFORM = Pointer[Struct_tagCANDIDATEFORM];

alias LPCANDIDATEFORM = Pointer[Struct_tagCANDIDATEFORM];

record Struct_tagCANDIDATELIST (
    dwSize : CULong,
    dwStyle : CULong,
    dwCount : CULong,
    dwSelection : CULong,
    dwPageStart : CULong,
    dwPageSize : CULong,
    dwOffset : Array[CULong,1],
);

alias CANDIDATELIST = Struct_tagCANDIDATELIST;

alias PCANDIDATELIST = Pointer[Struct_tagCANDIDATELIST];

alias LPCANDIDATELIST = Pointer[Struct_tagCANDIDATELIST];

record Struct_tagIMECHARPOSITION (
    dwSize : CULong,
    dwCharPos : CULong,
    pt : POINT,
    cLineHeight : UInt,
    rcDocument : RECT,
);

alias IMECHARPOSITION = Struct_tagIMECHARPOSITION;

alias PIMECHARPOSITION = Pointer[Struct_tagIMECHARPOSITION];

record Struct_tagRECONVERTSTRING (
    dwSize : CULong,
    dwVersion : CULong,
    dwStrLen : CULong,
    dwStrOffset : CULong,
    dwCompStrLen : CULong,
    dwCompStrOffset : CULong,
    dwTargetStrLen : CULong,
    dwTargetStrOffset : CULong,
);

alias RECONVERTSTRING = Struct_tagRECONVERTSTRING;

alias PRECONVERTSTRING = Pointer[Struct_tagRECONVERTSTRING];

record Struct_tagREGISTERWORDA (
    lpReading : LPSTR,
    lpWord : LPSTR,
);

alias REGISTERWORDA = Struct_tagREGISTERWORDA;

alias PREGISTERWORDA = Pointer[Struct_tagREGISTERWORDA];

alias LPREGISTERWORDA = Pointer[Struct_tagREGISTERWORDA];

record Struct_tagREGISTERWORDW (
    lpReading : LPWSTR,
    lpWord : LPWSTR,
);

alias REGISTERWORDW = Struct_tagREGISTERWORDW;

alias PREGISTERWORDW = Pointer[Struct_tagREGISTERWORDW];

alias LPREGISTERWORDW = Pointer[Struct_tagREGISTERWORDW];

record Struct_tagSTYLEBUFA (
    dwStyle : CULong,
    szDescription : Array[CChar,32],
);

alias STYLEBUFA = Struct_tagSTYLEBUFA;

alias PSTYLEBUFA = Pointer[Struct_tagSTYLEBUFA];

alias LPSTYLEBUFA = Pointer[Struct_tagSTYLEBUFA];

record Struct_tagSTYLEBUFW (
    dwStyle : CULong,
    szDescription : Array[UShort,32],
);

alias STYLEBUFW = Struct_tagSTYLEBUFW;

alias PSTYLEBUFW = Pointer[Struct_tagSTYLEBUFW];

alias LPSTYLEBUFW = Pointer[Struct_tagSTYLEBUFW];

record Struct_tagIMEMENUITEMINFOA (
    cbSize : UInt,
    fType : UInt,
    fState : UInt,
    wID : UInt,
    hbmpChecked : HBITMAP,
    hbmpUnchecked : HBITMAP,
    dwItemData : CULong,
    szString : Array[CChar,80],
    hbmpItem : HBITMAP,
);

alias IMEMENUITEMINFOA = Struct_tagIMEMENUITEMINFOA;

alias PIMEMENUITEMINFOA = Pointer[Struct_tagIMEMENUITEMINFOA];

alias LPIMEMENUITEMINFOA = Pointer[Struct_tagIMEMENUITEMINFOA];

record Struct_tagIMEMENUITEMINFOW (
    cbSize : UInt,
    fType : UInt,
    fState : UInt,
    wID : UInt,
    hbmpChecked : HBITMAP,
    hbmpUnchecked : HBITMAP,
    dwItemData : CULong,
    szString : Array[UShort,80],
    hbmpItem : HBITMAP,
);

alias IMEMENUITEMINFOW = Struct_tagIMEMENUITEMINFOW;

alias PIMEMENUITEMINFOW = Pointer[Struct_tagIMEMENUITEMINFOW];

alias LPIMEMENUITEMINFOW = Pointer[Struct_tagIMEMENUITEMINFOW];

alias REGISTERWORDENUMPROCA = StdCallCodePointer[(Pointer[CChar],CULong,Pointer[CChar],RawPointer),(Int)];

alias REGISTERWORDENUMPROCW = StdCallCodePointer[(Pointer[UShort],CULong,Pointer[UShort],RawPointer),(Int)];

alias REGISTERWORD = REGISTERWORDA;

alias PREGISTERWORD = Pointer[REGISTERWORDA];

alias LPREGISTERWORD = Pointer[REGISTERWORDA];

alias STYLEBUF = STYLEBUFA;

alias PSTYLEBUF = Pointer[STYLEBUFA];

alias LPSTYLEBUF = Pointer[STYLEBUFA];

alias IMEMENUITEMINFO = IMEMENUITEMINFOA;

alias PIMEMENUITEMINFO = Pointer[IMEMENUITEMINFOA];

alias LPIMEMENUITEMINFO = Pointer[IMEMENUITEMINFOA];

external (stdcall) ImmInstallIMEA(
    argument0 : LPCSTR,
    argument1 : LPCSTR) HKL;

external (stdcall) ImmInstallIMEW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR) HKL;

external (stdcall) ImmGetDefaultIMEWnd(
    argument0 : HWND) HWND;

external (stdcall) ImmGetDescriptionA(
    argument0 : HKL,
    argument1 : LPSTR,
    argument2 : UInt) UInt;

external (stdcall) ImmGetDescriptionW(
    argument0 : HKL,
    argument1 : LPWSTR,
    argument2 : UInt) UInt;

external (stdcall) ImmGetIMEFileNameA(
    argument0 : HKL,
    argument1 : LPSTR,
    argument2 : UInt) UInt;

external (stdcall) ImmGetIMEFileNameW(
    argument0 : HKL,
    argument1 : LPWSTR,
    argument2 : UInt) UInt;

external (stdcall) ImmGetProperty(
    argument0 : HKL,
    argument1 : CULong) CULong;

external (stdcall) ImmIsIME(
    argument0 : HKL) Int;

external (stdcall) ImmSimulateHotKey(
    argument0 : HWND,
    argument1 : CULong) Int;

external (stdcall) ImmCreateContext() CULong;

external (stdcall) ImmDestroyContext(
    argument0 : CULong) Int;

external (stdcall) ImmGetContext(
    argument0 : HWND) CULong;

external (stdcall) ImmReleaseContext(
    argument0 : HWND,
    argument1 : CULong) Int;

external (stdcall) ImmAssociateContext(
    argument0 : HWND,
    argument1 : CULong) CULong;

external (stdcall) ImmGetCompositionStringA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : PVOID,
    argument3 : CULong) CLong;

external (stdcall) ImmGetCompositionStringW(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : PVOID,
    argument3 : CULong) CLong;

external (stdcall) ImmSetCompositionStringA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : PCVOID,
    argument3 : CULong,
    argument4 : PCVOID,
    argument5 : CULong) Int;

external (stdcall) ImmSetCompositionStringW(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : PCVOID,
    argument3 : CULong,
    argument4 : PCVOID,
    argument5 : CULong) Int;

external (stdcall) ImmGetCandidateListCountA(
    argument0 : CULong,
    argument1 : PDWORD) CULong;

external (stdcall) ImmGetCandidateListCountW(
    argument0 : CULong,
    argument1 : PDWORD) CULong;

external (stdcall) ImmGetCandidateListA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : PCANDIDATELIST,
    argument3 : CULong) CULong;

external (stdcall) ImmGetCandidateListW(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : PCANDIDATELIST,
    argument3 : CULong) CULong;

external (stdcall) ImmGetGuideLineA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPSTR,
    argument3 : CULong) CULong;

external (stdcall) ImmGetGuideLineW(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPWSTR,
    argument3 : CULong) CULong;

external (stdcall) ImmGetConversionStatus(
    argument0 : CULong,
    argument1 : LPDWORD,
    argument2 : PDWORD) Int;

external (stdcall) ImmSetConversionStatus(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : CULong) Int;

external (stdcall) ImmGetOpenStatus(
    argument0 : CULong) Int;

external (stdcall) ImmSetOpenStatus(
    argument0 : CULong,
    argument1 : Int) Int;

external (stdcall) ImmGetCompositionFontA(
    argument0 : CULong,
    argument1 : LPLOGFONTA) Int;

external (stdcall) ImmGetCompositionFontW(
    argument0 : CULong,
    argument1 : LPLOGFONTW) Int;

external (stdcall) ImmSetCompositionFontA(
    argument0 : CULong,
    argument1 : LPLOGFONTA) Int;

external (stdcall) ImmSetCompositionFontW(
    argument0 : CULong,
    argument1 : LPLOGFONTW) Int;

external (stdcall) ImmConfigureIMEA(
    argument0 : HKL,
    argument1 : HWND,
    argument2 : CULong,
    argument3 : PVOID) Int;

external (stdcall) ImmConfigureIMEW(
    argument0 : HKL,
    argument1 : HWND,
    argument2 : CULong,
    argument3 : PVOID) Int;

external (stdcall) ImmEscapeA(
    argument0 : HKL,
    argument1 : CULong,
    argument2 : UInt,
    argument3 : PVOID) CLong;

external (stdcall) ImmEscapeW(
    argument0 : HKL,
    argument1 : CULong,
    argument2 : UInt,
    argument3 : PVOID) CLong;

external (stdcall) ImmGetConversionListA(
    argument0 : HKL,
    argument1 : CULong,
    argument2 : LPCSTR,
    argument3 : PCANDIDATELIST,
    argument4 : CULong,
    argument5 : UInt) CULong;

external (stdcall) ImmGetConversionListW(
    argument0 : HKL,
    argument1 : CULong,
    argument2 : LPCWSTR,
    argument3 : PCANDIDATELIST,
    argument4 : CULong,
    argument5 : UInt) CULong;

external (stdcall) ImmNotifyIME(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong) Int;

external (stdcall) ImmGetStatusWindowPos(
    argument0 : CULong,
    argument1 : LPPOINT) Int;

external (stdcall) ImmSetStatusWindowPos(
    argument0 : CULong,
    argument1 : LPPOINT) Int;

external (stdcall) ImmGetCompositionWindow(
    argument0 : CULong,
    argument1 : PCOMPOSITIONFORM) Int;

external (stdcall) ImmSetCompositionWindow(
    argument0 : CULong,
    argument1 : PCOMPOSITIONFORM) Int;

external (stdcall) ImmGetCandidateWindow(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : PCANDIDATEFORM) Int;

external (stdcall) ImmSetCandidateWindow(
    argument0 : CULong,
    argument1 : PCANDIDATEFORM) Int;

external (stdcall) ImmIsUIMessageA(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong) Int;

external (stdcall) ImmIsUIMessageW(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong) Int;

external (stdcall) ImmGetVirtualKey(
    argument0 : HWND) UInt;

external (stdcall) ImmRegisterWordA(
    argument0 : HKL,
    argument1 : LPCSTR,
    argument2 : CULong,
    argument3 : LPCSTR) Int;

external (stdcall) ImmRegisterWordW(
    argument0 : HKL,
    argument1 : LPCWSTR,
    argument2 : CULong,
    argument3 : LPCWSTR) Int;

external (stdcall) ImmUnregisterWordA(
    argument0 : HKL,
    argument1 : LPCSTR,
    argument2 : CULong,
    argument3 : LPCSTR) Int;

external (stdcall) ImmUnregisterWordW(
    argument0 : HKL,
    argument1 : LPCWSTR,
    argument2 : CULong,
    argument3 : LPCWSTR) Int;

external (stdcall) ImmGetRegisterWordStyleA(
    argument0 : HKL,
    argument1 : UInt,
    argument2 : PSTYLEBUFA) UInt;

external (stdcall) ImmGetRegisterWordStyleW(
    argument0 : HKL,
    argument1 : UInt,
    argument2 : PSTYLEBUFW) UInt;

external (stdcall) ImmEnumRegisterWordA(
    argument0 : HKL,
    argument1 : REGISTERWORDENUMPROCA,
    argument2 : LPCSTR,
    argument3 : CULong,
    argument4 : LPCSTR,
    argument5 : PVOID) UInt;

external (stdcall) ImmEnumRegisterWordW(
    argument0 : HKL,
    argument1 : REGISTERWORDENUMPROCW,
    argument2 : LPCWSTR,
    argument3 : CULong,
    argument4 : LPCWSTR,
    argument5 : PVOID) UInt;

external (stdcall) EnableEUDC(
    argument0 : Int) Int;

external (stdcall) ImmDisableIME(
    argument0 : CULong) Int;

external (stdcall) ImmGetImeMenuItemsA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPIMEMENUITEMINFOA,
    argument4 : LPIMEMENUITEMINFOA,
    argument5 : CULong) CULong;

external (stdcall) ImmGetImeMenuItemsW(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPIMEMENUITEMINFOW,
    argument4 : LPIMEMENUITEMINFOW,
    argument5 : CULong) CULong;

external (stdcall) CopyLZFile(
    argument0 : Int,
    argument1 : Int) CLong;

external (stdcall) GetExpandedNameA(
    argument0 : LPSTR,
    argument1 : LPSTR) Int;

external (stdcall) GetExpandedNameW(
    argument0 : LPWSTR,
    argument1 : LPWSTR) Int;

external (stdcall) LZClose(
    argument0 : Int);

external (stdcall) LZCopy(
    argument0 : Int,
    argument1 : Int) CLong;

external (stdcall) LZDone();

external (stdcall) LZInit(
    argument0 : Int) Int;

external (stdcall) LZOpenFileA(
    argument0 : LPSTR,
    argument1 : LPOFSTRUCT,
    argument2 : UShort) Int;

external (stdcall) LZOpenFileW(
    argument0 : LPWSTR,
    argument1 : LPOFSTRUCT,
    argument2 : UShort) Int;

external (stdcall) LZRead(
    argument0 : Int,
    argument1 : LPSTR,
    argument2 : Int) Int;

external (stdcall) LZSeek(
    argument0 : Int,
    argument1 : CLong,
    argument2 : Int) CLong;

external (stdcall) LZStart() Int;

alias MCIERROR = CULong;

alias MCIDEVICEID = UInt;

alias YIELDPROC = StdCallCodePointer[(UInt,CULong),(UInt)];

alias MMVERSION = UInt;

alias MMRESULT = UInt;

record Struct_mmtime_tag (
    wType : UInt,
    u : AUnionType,
);

alias MMTIME = Struct_mmtime_tag;

alias PMMTIME = Pointer[Struct_mmtime_tag];

alias LPMMTIME = Pointer[Struct_mmtime_tag];

record Struct_HDRVR__ (
    i : Int,
);

alias HDRVR = Pointer[Struct_HDRVR__];

record Struct_tagDRVCONFIGINFO (
    dwDCISize : CULong,
    lpszDCISectionName : LPCWSTR,
    lpszDCIAliasName : LPCWSTR,
);

alias DRVCONFIGINFO = Struct_tagDRVCONFIGINFO;

alias PDRVCONFIGINFO = Pointer[Struct_tagDRVCONFIGINFO];

alias LPDRVCONFIGINFO = Pointer[Struct_tagDRVCONFIGINFO];

record Struct_DRVCONFIGINFOEX (
    dwDCISize : CULong,
    lpszDCISectionName : LPCWSTR,
    lpszDCIAliasName : LPCWSTR,
    dnDevNode : CULong,
);

alias DRVCONFIGINFOEX = Struct_DRVCONFIGINFOEX;

alias PDRVCONFIGINFOEX = Pointer[Struct_DRVCONFIGINFOEX];

alias LPDRVCONFIGINFOEX = Pointer[Struct_DRVCONFIGINFOEX];

alias DRIVERPROC = StdCallCodePointer[(CULong,Pointer[Struct_HDRVR__],UInt,CLong,CLong),(CLong)];

alias LPDRVCALLBACK = StdCallCodePointer[(Pointer[Struct_HDRVR__],UInt,CULong,CULong,CULong),()];

alias PDRVCALLBACK = StdCallCodePointer[(Pointer[Struct_HDRVR__],UInt,CULong,CULong,CULong),()];

record Struct_HWAVE__ (
    i : Int,
);

alias HWAVE = Pointer[Struct_HWAVE__];

record Struct_HWAVEIN__ (
    i : Int,
);

alias HWAVEIN = Pointer[Struct_HWAVEIN__];

record Struct_HWAVEOUT__ (
    i : Int,
);

alias HWAVEOUT = Pointer[Struct_HWAVEOUT__];

alias LPHWAVEIN = Pointer[HWAVEIN];

alias LPHWAVEOUT = Pointer[HWAVEOUT];

alias LPWAVECALLBACK = StdCallCodePointer[(Pointer[Struct_HDRVR__],UInt,CULong,CULong,CULong),()];

record Struct_wavehdr_tag (
    lpData : LPSTR,
    dwBufferLength : CULong,
    dwBytesRecorded : CULong,
    dwUser : CULong,
    dwFlags : CULong,
    dwLoops : CULong,
    lpNext : Pointer[Struct_wavehdr_tag],
    reserved : CULong,
);

alias WAVEHDR = Struct_wavehdr_tag;

alias PWAVEHDR = Pointer[Struct_wavehdr_tag];

alias LPWAVEHDR = Pointer[Struct_wavehdr_tag];

record Struct_tagWAVEOUTCAPSA (
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[CChar,32],
    dwFormats : CULong,
    wChannels : UShort,
    wReserved1 : UShort,
    dwSupport : CULong,
);

alias WAVEOUTCAPSA = Struct_tagWAVEOUTCAPSA;

alias PWAVEOUTCAPSA = Pointer[Struct_tagWAVEOUTCAPSA];

alias LPWAVEOUTCAPSA = Pointer[Struct_tagWAVEOUTCAPSA];

record Struct_tagWAVEOUTCAPSW (
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[UShort,32],
    dwFormats : CULong,
    wChannels : UShort,
    wReserved1 : UShort,
    dwSupport : CULong,
);

alias WAVEOUTCAPSW = Struct_tagWAVEOUTCAPSW;

alias PWAVEOUTCAPSW = Pointer[Struct_tagWAVEOUTCAPSW];

alias LPWAVEOUTCAPSW = Pointer[Struct_tagWAVEOUTCAPSW];

record Struct_tagWAVEINCAPSA (
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[CChar,32],
    dwFormats : CULong,
    wChannels : UShort,
    wReserved1 : UShort,
);

alias WAVEINCAPSA = Struct_tagWAVEINCAPSA;

alias PWAVEINCAPSA = Pointer[Struct_tagWAVEINCAPSA];

alias LPWAVEINCAPSA = Pointer[Struct_tagWAVEINCAPSA];

record Struct_tagWAVEINCAPSW (
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[UShort,32],
    dwFormats : CULong,
    wChannels : UShort,
    wReserved1 : UShort,
);

alias WAVEINCAPSW = Struct_tagWAVEINCAPSW;

alias PWAVEINCAPSW = Pointer[Struct_tagWAVEINCAPSW];

alias LPWAVEINCAPSW = Pointer[Struct_tagWAVEINCAPSW];

record Struct_waveformat_tag (
    wFormatTag : UShort,
    nChannels : UShort,
    nSamplesPerSec : CULong,
    nAvgBytesPerSec : CULong,
    nBlockAlign : UShort,
);

alias WAVEFORMAT = Struct_waveformat_tag;

alias PWAVEFORMAT = Pointer[Struct_waveformat_tag];

alias LPWAVEFORMAT = Pointer[Struct_waveformat_tag];

record Struct_pcmwaveformat_tag (
    wf : WAVEFORMAT,
    wBitsPerSample : UShort,
);

alias PCMWAVEFORMAT = Struct_pcmwaveformat_tag;

alias PPCMWAVEFORMAT = Pointer[Struct_pcmwaveformat_tag];

alias LPPCMWAVEFORMAT = Pointer[Struct_pcmwaveformat_tag];

record Struct_tWAVEFORMATEX (
    wFormatTag : UShort,
    nChannels : UShort,
    nSamplesPerSec : CULong,
    nAvgBytesPerSec : CULong,
    nBlockAlign : UShort,
    wBitsPerSample : UShort,
    cbSize : UShort,
);

alias WAVEFORMATEX = Struct_tWAVEFORMATEX;

alias PWAVEFORMATEX = Pointer[Struct_tWAVEFORMATEX];

alias LPWAVEFORMATEX = Pointer[Struct_tWAVEFORMATEX];

alias LPCWAVEFORMATEX = Pointer[WAVEFORMATEX];

record Struct_HMIDI__ (
    i : Int,
);

alias HMIDI = Pointer[Struct_HMIDI__];

record Struct_HMIDIIN__ (
    i : Int,
);

alias HMIDIIN = Pointer[Struct_HMIDIIN__];

record Struct_HMIDIOUT__ (
    i : Int,
);

alias HMIDIOUT = Pointer[Struct_HMIDIOUT__];

record Struct_HMIDISTRM__ (
    i : Int,
);

alias HMIDISTRM = Pointer[Struct_HMIDISTRM__];

alias LPHMIDI = Pointer[HMIDI];

alias LPHMIDIIN = Pointer[HMIDIIN];

alias LPHMIDIOUT = Pointer[HMIDIOUT];

alias LPHMIDISTRM = Pointer[HMIDISTRM];

alias LPMIDICALLBACK = StdCallCodePointer[(Pointer[Struct_HDRVR__],UInt,CULong,CULong,CULong),()];

alias PATCHARRAY = Array[UShort,128];

alias LPPATCHARRAY = Pointer[UShort];

alias KEYARRAY = Array[UShort,128];

alias LPKEYARRAY = Pointer[UShort];

record Struct_tagMIDIOUTCAPSA (
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[CChar,32],
    wTechnology : UShort,
    wVoices : UShort,
    wNotes : UShort,
    wChannelMask : UShort,
    dwSupport : CULong,
);

alias MIDIOUTCAPSA = Struct_tagMIDIOUTCAPSA;

alias PMIDIOUTCAPSA = Pointer[Struct_tagMIDIOUTCAPSA];

alias LPMIDIOUTCAPSA = Pointer[Struct_tagMIDIOUTCAPSA];

record Struct_tagMIDIOUTCAPSW (
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[UShort,32],
    wTechnology : UShort,
    wVoices : UShort,
    wNotes : UShort,
    wChannelMask : UShort,
    dwSupport : CULong,
);

alias MIDIOUTCAPSW = Struct_tagMIDIOUTCAPSW;

alias PMIDIOUTCAPSW = Pointer[Struct_tagMIDIOUTCAPSW];

alias LPMIDIOUTCAPSW = Pointer[Struct_tagMIDIOUTCAPSW];

record Struct_tagMIDIINCAPSA (
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[CChar,32],
    dwSupport : CULong,
);

alias MIDIINCAPSA = Struct_tagMIDIINCAPSA;

alias PMIDIINCAPSA = Pointer[Struct_tagMIDIINCAPSA];

alias LPMIDIINCAPSA = Pointer[Struct_tagMIDIINCAPSA];

record Struct_tagMIDIINCAPSW (
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[UShort,32],
    dwSupport : CULong,
);

alias MIDIINCAPSW = Struct_tagMIDIINCAPSW;

alias PMIDIINCAPSW = Pointer[Struct_tagMIDIINCAPSW];

alias NPMIDIINCAPSW = Pointer[Struct_tagMIDIINCAPSW];

alias LPMIDIINCAPSW = Pointer[Struct_tagMIDIINCAPSW];

record Struct_midihdr_tag (
    lpData : LPSTR,
    dwBufferLength : CULong,
    dwBytesRecorded : CULong,
    dwUser : CULong,
    dwFlags : CULong,
    lpNext : Pointer[Struct_midihdr_tag],
    reserved : CULong,
    dwOffset : CULong,
    dwReserved : Array[CULong,8],
);

alias MIDIHDR = Struct_midihdr_tag;

alias PMIDIHDR = Pointer[Struct_midihdr_tag];

alias LPMIDIHDR = Pointer[Struct_midihdr_tag];

record Struct_midievent_tag (
    dwDeltaTime : CULong,
    dwStreamID : CULong,
    dwEvent : CULong,
    dwParms : Array[CULong,1],
);

alias MIDIEVENT = Struct_midievent_tag;

record Struct_midistrmbuffver_tag (
    dwVersion : CULong,
    dwMid : CULong,
    dwOEMVersion : CULong,
);

alias MIDISTRMBUFFVER = Struct_midistrmbuffver_tag;

record Struct_midiproptimediv_tag (
    cbStruct : CULong,
    dwTimeDiv : CULong,
);

alias MIDIPROPTIMEDIV = Struct_midiproptimediv_tag;

alias LPMIDIPROPTIMEDIV = Pointer[Struct_midiproptimediv_tag];

record Struct_midiproptempo_tag (
    cbStruct : CULong,
    dwTempo : CULong,
);

alias MIDIPROPTEMPO = Struct_midiproptempo_tag;

alias LPMIDIPROPTEMPO = Pointer[Struct_midiproptempo_tag];

record Struct_tagAUXCAPSA (
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[CChar,32],
    wTechnology : UShort,
    wReserved1 : UShort,
    dwSupport : CULong,
);

alias AUXCAPSA = Struct_tagAUXCAPSA;

alias PAUXCAPSA = Pointer[Struct_tagAUXCAPSA];

alias LPAUXCAPSA = Pointer[Struct_tagAUXCAPSA];

record Struct_tagAUXCAPSW (
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[UShort,32],
    wTechnology : UShort,
    wReserved1 : UShort,
    dwSupport : CULong,
);

alias AUXCAPSW = Struct_tagAUXCAPSW;

alias PAUXCAPSW = Pointer[Struct_tagAUXCAPSW];

alias LPAUXCAPSW = Pointer[Struct_tagAUXCAPSW];

record Struct_HMIXEROBJ__ (
    i : Int,
);

alias HMIXEROBJ = Pointer[Struct_HMIXEROBJ__];

alias LPHMIXEROBJ = Pointer[HMIXEROBJ];

record Struct_HMIXER__ (
    i : Int,
);

alias HMIXER = Pointer[Struct_HMIXER__];

alias LPHMIXER = Pointer[HMIXER];

record Struct_tagMIXERCAPSA (
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[CChar,32],
    fdwSupport : CULong,
    cDestinations : CULong,
);

alias MIXERCAPSA = Struct_tagMIXERCAPSA;

alias PMIXERCAPSA = Pointer[Struct_tagMIXERCAPSA];

alias LPMIXERCAPSA = Pointer[Struct_tagMIXERCAPSA];

record Struct_tagMIXERCAPSW (
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[UShort,32],
    fdwSupport : CULong,
    cDestinations : CULong,
);

alias MIXERCAPSW = Struct_tagMIXERCAPSW;

alias PMIXERCAPSW = Pointer[Struct_tagMIXERCAPSW];

alias LPMIXERCAPSW = Pointer[Struct_tagMIXERCAPSW];

record Struct_tagMIXERLINEA (
    cbStruct : CULong,
    dwDestination : CULong,
    dwSource : CULong,
    dwLineID : CULong,
    fdwLine : CULong,
    dwUser : CULong,
    dwComponentType : CULong,
    cChannels : CULong,
    cConnections : CULong,
    cControls : CULong,
    szShortName : Array[CChar,16],
    szName : Array[CChar,64],
    Target : UnnamedRecord2,
);

record UnnamedRecord2 (
    dwType : CULong,
    dwDeviceID : CULong,
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[CChar,32],
);

alias MIXERLINEA = Struct_tagMIXERLINEA;

alias PMIXERLINEA = Pointer[Struct_tagMIXERLINEA];

alias LPMIXERLINEA = Pointer[Struct_tagMIXERLINEA];

record Struct_tagMIXERLINEW (
    cbStruct : CULong,
    dwDestination : CULong,
    dwSource : CULong,
    dwLineID : CULong,
    fdwLine : CULong,
    dwUser : CULong,
    dwComponentType : CULong,
    cChannels : CULong,
    cConnections : CULong,
    cControls : CULong,
    szShortName : Array[UShort,16],
    szName : Array[UShort,64],
    Target : UnnamedRecord3,
);

record UnnamedRecord3 (
    dwType : CULong,
    dwDeviceID : CULong,
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[UShort,32],
);

alias MIXERLINEW = Struct_tagMIXERLINEW;

alias PMIXERLINEW = Pointer[Struct_tagMIXERLINEW];

alias LPMIXERLINEW = Pointer[Struct_tagMIXERLINEW];

record Struct_tagMIXERCONTROLA (
    cbStruct : CULong,
    dwControlID : CULong,
    dwControlType : CULong,
    fdwControl : CULong,
    cMultipleItems : CULong,
    szShortName : Array[CChar,16],
    szName : Array[CChar,64],
    Bounds : AUnionType,
    Metrics : AUnionType,
);

alias MIXERCONTROLA = Struct_tagMIXERCONTROLA;

alias PMIXERCONTROLA = Pointer[Struct_tagMIXERCONTROLA];

alias LPMIXERCONTROLA = Pointer[Struct_tagMIXERCONTROLA];

record Struct_tagMIXERCONTROLW (
    cbStruct : CULong,
    dwControlID : CULong,
    dwControlType : CULong,
    fdwControl : CULong,
    cMultipleItems : CULong,
    szShortName : Array[UShort,16],
    szName : Array[UShort,64],
    Bounds : AUnionType,
    Metrics : AUnionType,
);

alias MIXERCONTROLW = Struct_tagMIXERCONTROLW;

alias PMIXERCONTROLW = Pointer[Struct_tagMIXERCONTROLW];

alias LPMIXERCONTROLW = Pointer[Struct_tagMIXERCONTROLW];

record Struct_tagMIXERLINECONTROLSA (
    cbStruct : CULong,
    dwLineID : CULong,
    unnamed_field2 : AUnionType,
    cControls : CULong,
    cbmxctrl : CULong,
    pamxctrl : LPMIXERCONTROLA,
);

alias MIXERLINECONTROLSA = Struct_tagMIXERLINECONTROLSA;

alias PMIXERLINECONTROLSA = Pointer[Struct_tagMIXERLINECONTROLSA];

alias LPMIXERLINECONTROLSA = Pointer[Struct_tagMIXERLINECONTROLSA];

record Struct_tagMIXERLINECONTROLSW (
    cbStruct : CULong,
    dwLineID : CULong,
    unnamed_field2 : AUnionType,
    cControls : CULong,
    cbmxctrl : CULong,
    pamxctrl : LPMIXERCONTROLW,
);

alias MIXERLINECONTROLSW = Struct_tagMIXERLINECONTROLSW;

alias PMIXERLINECONTROLSW = Pointer[Struct_tagMIXERLINECONTROLSW];

alias LPMIXERLINECONTROLSW = Pointer[Struct_tagMIXERLINECONTROLSW];

record Struct_tMIXERCONTROLDETAILS (
    cbStruct : CULong,
    dwControlID : CULong,
    cChannels : CULong,
    unnamed_field3 : AUnionType,
    cbDetails : CULong,
    paDetails : PVOID,
);

alias MIXERCONTROLDETAILS = Struct_tMIXERCONTROLDETAILS;

alias PMIXERCONTROLDETAILS = Pointer[Struct_tMIXERCONTROLDETAILS];

alias LPMIXERCONTROLDETAILS = Pointer[Struct_tMIXERCONTROLDETAILS];

record Struct_tagMIXERCONTROLDETAILS_LISTTEXTA (
    dwParam1 : CULong,
    dwParam2 : CULong,
    szName : Array[CChar,64],
);

alias MIXERCONTROLDETAILS_LISTTEXTA = Struct_tagMIXERCONTROLDETAILS_LISTTEXTA;

alias PMIXERCONTROLDETAILS_LISTTEXTA = Pointer[Struct_tagMIXERCONTROLDETAILS_LISTTEXTA];

alias LPMIXERCONTROLDETAILS_LISTTEXTA = Pointer[Struct_tagMIXERCONTROLDETAILS_LISTTEXTA];

record Struct_tagMIXERCONTROLDETAILS_LISTTEXTW (
    dwParam1 : CULong,
    dwParam2 : CULong,
    szName : Array[UShort,64],
);

alias MIXERCONTROLDETAILS_LISTTEXTW = Struct_tagMIXERCONTROLDETAILS_LISTTEXTW;

alias PMIXERCONTROLDETAILS_LISTTEXTW = Pointer[Struct_tagMIXERCONTROLDETAILS_LISTTEXTW];

alias LPMIXERCONTROLDETAILS_LISTTEXTW = Pointer[Struct_tagMIXERCONTROLDETAILS_LISTTEXTW];

record Struct_tMIXERCONTROLDETAILS_BOOLEAN (
    fValue : CLong,
);

alias MIXERCONTROLDETAILS_BOOLEAN = Struct_tMIXERCONTROLDETAILS_BOOLEAN;

alias PMIXERCONTROLDETAILS_BOOLEAN = Pointer[Struct_tMIXERCONTROLDETAILS_BOOLEAN];

alias LPMIXERCONTROLDETAILS_BOOLEAN = Pointer[Struct_tMIXERCONTROLDETAILS_BOOLEAN];

record Struct_tMIXERCONTROLDETAILS_SIGNED (
    lValue : CLong,
);

alias MIXERCONTROLDETAILS_SIGNED = Struct_tMIXERCONTROLDETAILS_SIGNED;

alias PMIXERCONTROLDETAILS_SIGNED = Pointer[Struct_tMIXERCONTROLDETAILS_SIGNED];

alias LPMIXERCONTROLDETAILS_SIGNED = Pointer[Struct_tMIXERCONTROLDETAILS_SIGNED];

record Struct_tMIXERCONTROLDETAILS_UNSIGNED (
    dwValue : CULong,
);

alias MIXERCONTROLDETAILS_UNSIGNED = Struct_tMIXERCONTROLDETAILS_UNSIGNED;

alias PMIXERCONTROLDETAILS_UNSIGNED = Pointer[Struct_tMIXERCONTROLDETAILS_UNSIGNED];

alias LPMIXERCONTROLDETAILS_UNSIGNED = Pointer[Struct_tMIXERCONTROLDETAILS_UNSIGNED];

alias LPTIMECALLBACK = StdCallCodePointer[(UInt,UInt,CULong,CULong,CULong),()];

record Struct_timecaps_tag (
    wPeriodMin : UInt,
    wPeriodMax : UInt,
);

alias TIMECAPS = Struct_timecaps_tag;

alias PTIMECAPS = Pointer[Struct_timecaps_tag];

alias LPTIMECAPS = Pointer[Struct_timecaps_tag];

record Struct_tagJOYCAPSA (
    wMid : UShort,
    wPid : UShort,
    szPname : Array[CChar,32],
    wXmin : UInt,
    wXmax : UInt,
    wYmin : UInt,
    wYmax : UInt,
    wZmin : UInt,
    wZmax : UInt,
    wNumButtons : UInt,
    wPeriodMin : UInt,
    wPeriodMax : UInt,
    wRmin : UInt,
    wRmax : UInt,
    wUmin : UInt,
    wUmax : UInt,
    wVmin : UInt,
    wVmax : UInt,
    wCaps : UInt,
    wMaxAxes : UInt,
    wNumAxes : UInt,
    wMaxButtons : UInt,
    szRegKey : Array[CChar,32],
    szOEMVxD : Array[CChar,260],
);

alias JOYCAPSA = Struct_tagJOYCAPSA;

alias PJOYCAPSA = Pointer[Struct_tagJOYCAPSA];

alias LPJOYCAPSA = Pointer[Struct_tagJOYCAPSA];

record Struct_tagJOYCAPSW (
    wMid : UShort,
    wPid : UShort,
    szPname : Array[UShort,32],
    wXmin : UInt,
    wXmax : UInt,
    wYmin : UInt,
    wYmax : UInt,
    wZmin : UInt,
    wZmax : UInt,
    wNumButtons : UInt,
    wPeriodMin : UInt,
    wPeriodMax : UInt,
    wRmin : UInt,
    wRmax : UInt,
    wUmin : UInt,
    wUmax : UInt,
    wVmin : UInt,
    wVmax : UInt,
    wCaps : UInt,
    wMaxAxes : UInt,
    wNumAxes : UInt,
    wMaxButtons : UInt,
    szRegKey : Array[UShort,32],
    szOEMVxD : Array[UShort,260],
);

alias JOYCAPSW = Struct_tagJOYCAPSW;

alias PJOYCAPSW = Pointer[Struct_tagJOYCAPSW];

alias LPJOYCAPSW = Pointer[Struct_tagJOYCAPSW];

record Struct_joyinfo_tag (
    wXpos : UInt,
    wYpos : UInt,
    wZpos : UInt,
    wButtons : UInt,
);

alias JOYINFO = Struct_joyinfo_tag;

alias PJOYINFO = Pointer[Struct_joyinfo_tag];

alias LPJOYINFO = Pointer[Struct_joyinfo_tag];

record Struct_joyinfoex_tag (
    dwSize : CULong,
    dwFlags : CULong,
    dwXpos : CULong,
    dwYpos : CULong,
    dwZpos : CULong,
    dwRpos : CULong,
    dwUpos : CULong,
    dwVpos : CULong,
    dwButtons : CULong,
    dwButtonNumber : CULong,
    dwPOV : CULong,
    dwReserved1 : CULong,
    dwReserved2 : CULong,
);

alias JOYINFOEX = Struct_joyinfoex_tag;

alias PJOYINFOEX = Pointer[Struct_joyinfoex_tag];

alias LPJOYINFOEX = Pointer[Struct_joyinfoex_tag];

alias FOURCC = CULong;

alias HPSTR = Pointer[CChar];

record Struct_HMMIO__ (
    i : Int,
);

alias HMMIO = Pointer[Struct_HMMIO__];

alias LPMMIOPROC = StdCallCodePointer[(Pointer[CChar],UInt,CLong,CLong),(CLong)];

record Struct__MMIOINFO (
    dwFlags : CULong,
    fccIOProc : CULong,
    pIOProc : LPMMIOPROC,
    wErrorRet : UInt,
    htask : HTASK,
    cchBuffer : CLong,
    pchBuffer : HPSTR,
    pchNext : HPSTR,
    pchEndRead : HPSTR,
    pchEndWrite : HPSTR,
    lBufOffset : CLong,
    lDiskOffset : CLong,
    adwInfo : Array[CULong,3],
    dwReserved1 : CULong,
    dwReserved2 : CULong,
    hmmio : HMMIO,
);

alias MMIOINFO = Struct__MMIOINFO;

alias PMMIOINFO = Pointer[Struct__MMIOINFO];

alias LPMMIOINFO = Pointer[Struct__MMIOINFO];

alias LPCMMIOINFO = Pointer[MMIOINFO];

record Struct__MMCKINFO (
    ckid : CULong,
    cksize : CULong,
    fccType : CULong,
    dwDataOffset : CULong,
    dwFlags : CULong,
);

alias MMCKINFO = Struct__MMCKINFO;

alias PMMCKINFO = Pointer[Struct__MMCKINFO];

alias LPMMCKINFO = Pointer[Struct__MMCKINFO];

alias LPCMMCKINFO = Pointer[MMCKINFO];

record Struct_tagMCI_GENERIC_PARMS (
    dwCallback : CULong,
);

alias MCI_GENERIC_PARMS = Struct_tagMCI_GENERIC_PARMS;

alias PMCI_GENERIC_PARMS = Pointer[Struct_tagMCI_GENERIC_PARMS];

alias LPMCI_GENERIC_PARMS = Pointer[Struct_tagMCI_GENERIC_PARMS];

record Struct_tagMCI_OPEN_PARMSA (
    dwCallback : CULong,
    wDeviceID : UInt,
    lpstrDeviceType : LPCSTR,
    lpstrElementName : LPCSTR,
    lpstrAlias : LPCSTR,
);

alias MCI_OPEN_PARMSA = Struct_tagMCI_OPEN_PARMSA;

alias PMCI_OPEN_PARMSA = Pointer[Struct_tagMCI_OPEN_PARMSA];

alias LPMCI_OPEN_PARMSA = Pointer[Struct_tagMCI_OPEN_PARMSA];

record Struct_tagMCI_OPEN_PARMSW (
    dwCallback : CULong,
    wDeviceID : UInt,
    lpstrDeviceType : LPCWSTR,
    lpstrElementName : LPCWSTR,
    lpstrAlias : LPCWSTR,
);

alias MCI_OPEN_PARMSW = Struct_tagMCI_OPEN_PARMSW;

alias PMCI_OPEN_PARMSW = Pointer[Struct_tagMCI_OPEN_PARMSW];

alias LPMCI_OPEN_PARMSW = Pointer[Struct_tagMCI_OPEN_PARMSW];

record Struct_tagMCI_PLAY_PARMS (
    dwCallback : CULong,
    dwFrom : CULong,
    dwTo : CULong,
);

alias MCI_PLAY_PARMS = Struct_tagMCI_PLAY_PARMS;

alias PMCI_PLAY_PARMS = Pointer[Struct_tagMCI_PLAY_PARMS];

alias LPMCI_PLAY_PARMS = Pointer[Struct_tagMCI_PLAY_PARMS];

record Struct_tagMCI_SEEK_PARMS (
    dwCallback : CULong,
    dwTo : CULong,
);

alias MCI_SEEK_PARMS = Struct_tagMCI_SEEK_PARMS;

alias PMCI_SEEK_PARMS = Pointer[Struct_tagMCI_SEEK_PARMS];

alias LPMCI_SEEK_PARMS = Pointer[Struct_tagMCI_SEEK_PARMS];

record Struct_tagMCI_STATUS_PARMS (
    dwCallback : CULong,
    dwReturn : CULong,
    dwItem : CULong,
    dwTrack : CULong,
);

alias MCI_STATUS_PARMS = Struct_tagMCI_STATUS_PARMS;

alias PMCI_STATUS_PARMS = Pointer[Struct_tagMCI_STATUS_PARMS];

alias LPMCI_STATUS_PARMS = Pointer[Struct_tagMCI_STATUS_PARMS];

record Struct_tagMCI_INFO_PARMSA (
    dwCallback : CULong,
    lpstrReturn : LPSTR,
    dwRetSize : CULong,
);

alias MCI_INFO_PARMSA = Struct_tagMCI_INFO_PARMSA;

alias LPMCI_INFO_PARMSA = Pointer[Struct_tagMCI_INFO_PARMSA];

record Struct_tagMCI_INFO_PARMSW (
    dwCallback : CULong,
    lpstrReturn : LPWSTR,
    dwRetSize : CULong,
);

alias MCI_INFO_PARMSW = Struct_tagMCI_INFO_PARMSW;

alias LPMCI_INFO_PARMSW = Pointer[Struct_tagMCI_INFO_PARMSW];

record Struct_tagMCI_GETDEVCAPS_PARMS (
    dwCallback : CULong,
    dwReturn : CULong,
    dwItem : CULong,
);

alias MCI_GETDEVCAPS_PARMS = Struct_tagMCI_GETDEVCAPS_PARMS;

alias PMCI_GETDEVCAPS_PARMS = Pointer[Struct_tagMCI_GETDEVCAPS_PARMS];

alias LPMCI_GETDEVCAPS_PARMS = Pointer[Struct_tagMCI_GETDEVCAPS_PARMS];

record Struct_tagMCI_SYSINFO_PARMSA (
    dwCallback : CULong,
    lpstrReturn : LPSTR,
    dwRetSize : CULong,
    dwNumber : CULong,
    wDeviceType : UInt,
);

alias MCI_SYSINFO_PARMSA = Struct_tagMCI_SYSINFO_PARMSA;

alias PMCI_SYSINFO_PARMSA = Pointer[Struct_tagMCI_SYSINFO_PARMSA];

alias LPMCI_SYSINFO_PARMSA = Pointer[Struct_tagMCI_SYSINFO_PARMSA];

record Struct_tagMCI_SYSINFO_PARMSW (
    dwCallback : CULong,
    lpstrReturn : LPWSTR,
    dwRetSize : CULong,
    dwNumber : CULong,
    wDeviceType : UInt,
);

alias MCI_SYSINFO_PARMSW = Struct_tagMCI_SYSINFO_PARMSW;

alias PMCI_SYSINFO_PARMSW = Pointer[Struct_tagMCI_SYSINFO_PARMSW];

alias LPMCI_SYSINFO_PARMSW = Pointer[Struct_tagMCI_SYSINFO_PARMSW];

record Struct_tagMCI_SET_PARMS (
    dwCallback : CULong,
    dwTimeFormat : CULong,
    dwAudio : CULong,
);

alias MCI_SET_PARMS = Struct_tagMCI_SET_PARMS;

alias PMCI_SET_PARMS = Pointer[Struct_tagMCI_SET_PARMS];

alias LPMCI_SET_PARMS = Pointer[Struct_tagMCI_SET_PARMS];

record Struct_tagMCI_BREAK_PARMS (
    dwCallback : CULong,
    nVirtKey : Int,
    hwndBreak : HWND,
);

alias MCI_BREAK_PARMS = Struct_tagMCI_BREAK_PARMS;

alias PMCI_BREAK_PARMS = Pointer[Struct_tagMCI_BREAK_PARMS];

alias LPMCI_BREAK_PARMS = Pointer[Struct_tagMCI_BREAK_PARMS];

record Struct_tagMCI_SAVE_PARMSA (
    dwCallback : CULong,
    lpfilename : LPCSTR,
);

alias MCI_SAVE_PARMSA = Struct_tagMCI_SAVE_PARMSA;

alias PMCI_SAVE_PARMSA = Pointer[Struct_tagMCI_SAVE_PARMSA];

alias LPMCI_SAVE_PARMSA = Pointer[Struct_tagMCI_SAVE_PARMSA];

record Struct_tagMCI_SAVE_PARMSW (
    dwCallback : CULong,
    lpfilename : LPCWSTR,
);

alias MCI_SAVE_PARMSW = Struct_tagMCI_SAVE_PARMSW;

alias PMCI_SAVE_PARMSW = Pointer[Struct_tagMCI_SAVE_PARMSW];

alias LPMCI_SAVE_PARMSW = Pointer[Struct_tagMCI_SAVE_PARMSW];

record Struct_tagMCI_LOAD_PARMSA (
    dwCallback : CULong,
    lpfilename : LPCSTR,
);

alias MCI_LOAD_PARMSA = Struct_tagMCI_LOAD_PARMSA;

alias PMCI_LOAD_PARMSA = Pointer[Struct_tagMCI_LOAD_PARMSA];

alias LPMCI_LOAD_PARMSA = Pointer[Struct_tagMCI_LOAD_PARMSA];

record Struct_tagMCI_LOAD_PARMSW (
    dwCallback : CULong,
    lpfilename : LPCWSTR,
);

alias MCI_LOAD_PARMSW = Struct_tagMCI_LOAD_PARMSW;

alias PMCI_LOAD_PARMSW = Pointer[Struct_tagMCI_LOAD_PARMSW];

alias LPMCI_LOAD_PARMSW = Pointer[Struct_tagMCI_LOAD_PARMSW];

record Struct_tagMCI_RECORD_PARMS (
    dwCallback : CULong,
    dwFrom : CULong,
    dwTo : CULong,
);

alias MCI_RECORD_PARMS = Struct_tagMCI_RECORD_PARMS;

alias LPMCI_RECORD_PARMS = Pointer[Struct_tagMCI_RECORD_PARMS];

record Struct_tagMCI_VD_PLAY_PARMS (
    dwCallback : CULong,
    dwFrom : CULong,
    dwTo : CULong,
    dwSpeed : CULong,
);

alias MCI_VD_PLAY_PARMS = Struct_tagMCI_VD_PLAY_PARMS;

alias PMCI_VD_PLAY_PARMS = Pointer[Struct_tagMCI_VD_PLAY_PARMS];

alias LPMCI_VD_PLAY_PARMS = Pointer[Struct_tagMCI_VD_PLAY_PARMS];

record Struct_tagMCI_VD_STEP_PARMS (
    dwCallback : CULong,
    dwFrames : CULong,
);

alias MCI_VD_STEP_PARMS = Struct_tagMCI_VD_STEP_PARMS;

alias PMCI_VD_STEP_PARMS = Pointer[Struct_tagMCI_VD_STEP_PARMS];

alias LPMCI_VD_STEP_PARMS = Pointer[Struct_tagMCI_VD_STEP_PARMS];

record Struct_tagMCI_VD_ESCAPE_PARMSA (
    dwCallback : CULong,
    lpstrCommand : LPCSTR,
);

alias MCI_VD_ESCAPE_PARMSA = Struct_tagMCI_VD_ESCAPE_PARMSA;

alias PMCI_VD_ESCAPE_PARMSA = Pointer[Struct_tagMCI_VD_ESCAPE_PARMSA];

alias LPMCI_VD_ESCAPE_PARMSA = Pointer[Struct_tagMCI_VD_ESCAPE_PARMSA];

record Struct_tagMCI_VD_ESCAPE_PARMSW (
    dwCallback : CULong,
    lpstrCommand : LPCWSTR,
);

alias MCI_VD_ESCAPE_PARMSW = Struct_tagMCI_VD_ESCAPE_PARMSW;

alias PMCI_VD_ESCAPE_PARMSW = Pointer[Struct_tagMCI_VD_ESCAPE_PARMSW];

alias LPMCI_VD_ESCAPE_PARMSW = Pointer[Struct_tagMCI_VD_ESCAPE_PARMSW];

record Struct_tagMCI_WAVE_OPEN_PARMSA (
    dwCallback : CULong,
    wDeviceID : UInt,
    lpstrDeviceType : LPCSTR,
    lpstrElementName : LPCSTR,
    lpstrAlias : LPCSTR,
    dwBufferSeconds : CULong,
);

alias MCI_WAVE_OPEN_PARMSA = Struct_tagMCI_WAVE_OPEN_PARMSA;

alias PMCI_WAVE_OPEN_PARMSA = Pointer[Struct_tagMCI_WAVE_OPEN_PARMSA];

alias LPMCI_WAVE_OPEN_PARMSA = Pointer[Struct_tagMCI_WAVE_OPEN_PARMSA];

record Struct_tagMCI_WAVE_OPEN_PARMSW (
    dwCallback : CULong,
    wDeviceID : UInt,
    lpstrDeviceType : LPCWSTR,
    lpstrElementName : LPCWSTR,
    lpstrAlias : LPCWSTR,
    dwBufferSeconds : CULong,
);

alias MCI_WAVE_OPEN_PARMSW = Struct_tagMCI_WAVE_OPEN_PARMSW;

alias PMCI_WAVE_OPEN_PARMSW = Pointer[Struct_tagMCI_WAVE_OPEN_PARMSW];

alias LPMCI_WAVE_OPEN_PARMSW = Pointer[Struct_tagMCI_WAVE_OPEN_PARMSW];

record Struct_tagMCI_WAVE_DELETE_PARMS (
    dwCallback : CULong,
    dwFrom : CULong,
    dwTo : CULong,
);

alias MCI_WAVE_DELETE_PARMS = Struct_tagMCI_WAVE_DELETE_PARMS;

alias PMCI_WAVE_DELETE_PARMS = Pointer[Struct_tagMCI_WAVE_DELETE_PARMS];

alias LPMCI_WAVE_DELETE_PARMS = Pointer[Struct_tagMCI_WAVE_DELETE_PARMS];

record Struct_tagMCI_WAVE_SET_PARMS (
    dwCallback : CULong,
    dwTimeFormat : CULong,
    dwAudio : CULong,
    wInput : UInt,
    wOutput : UInt,
    wFormatTag : UShort,
    wReserved2 : UShort,
    nChannels : UShort,
    wReserved3 : UShort,
    nSamplesPerSec : CULong,
    nAvgBytesPerSec : CULong,
    nBlockAlign : UShort,
    wReserved4 : UShort,
    wBitsPerSample : UShort,
    wReserved5 : UShort,
);

alias MCI_WAVE_SET_PARMS = Struct_tagMCI_WAVE_SET_PARMS;

alias PMCI_WAVE_SET_PARMS = Pointer[Struct_tagMCI_WAVE_SET_PARMS];

alias LPMCI_WAVE_SET_PARMS = Pointer[Struct_tagMCI_WAVE_SET_PARMS];

external (stdcall) CloseDriver(
    argument0 : HDRVR,
    argument1 : CLong,
    argument2 : CLong) CLong;

external (stdcall) OpenDriver(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : CLong) HDRVR;

external (stdcall) SendDriverMessage(
    argument0 : HDRVR,
    argument1 : UInt,
    argument2 : CLong,
    argument3 : CLong) CLong;

external (stdcall) DrvGetModuleHandle(
    argument0 : HDRVR) HMODULE;

external (stdcall) GetDriverModuleHandle(
    argument0 : HDRVR) HMODULE;

external (stdcall) DefDriverProc(
    argument0 : CULong,
    argument1 : HDRVR,
    argument2 : UInt,
    argument3 : CLong,
    argument4 : CLong) CLong;

external (stdcall) mmsystemGetVersion() UInt;

external (stdcall) sndPlaySoundA(
    argument0 : LPCSTR,
    argument1 : UInt) Int;

external (stdcall) sndPlaySoundW(
    argument0 : LPCWSTR,
    argument1 : UInt) Int;

external (stdcall) PlaySoundA(
    argument0 : LPCSTR,
    argument1 : HMODULE,
    argument2 : CULong) Int;

external (stdcall) PlaySoundW(
    argument0 : LPCWSTR,
    argument1 : HMODULE,
    argument2 : CULong) Int;

external (stdcall) waveOutGetNumDevs() UInt;

external (stdcall) waveOutGetDevCapsA(
    argument0 : UInt,
    argument1 : LPWAVEOUTCAPSA,
    argument2 : UInt) UInt;

external (stdcall) waveOutGetDevCapsW(
    argument0 : UInt,
    argument1 : LPWAVEOUTCAPSW,
    argument2 : UInt) UInt;

external (stdcall) waveOutGetVolume(
    argument0 : HWAVEOUT,
    argument1 : PDWORD) UInt;

external (stdcall) waveOutSetVolume(
    argument0 : HWAVEOUT,
    argument1 : CULong) UInt;

external (stdcall) waveOutGetErrorTextA(
    argument0 : UInt,
    argument1 : LPSTR,
    argument2 : UInt) UInt;

external (stdcall) waveOutGetErrorTextW(
    argument0 : UInt,
    argument1 : LPWSTR,
    argument2 : UInt) UInt;

external (stdcall) waveOutOpen(
    argument0 : LPHWAVEOUT,
    argument1 : UInt,
    argument2 : LPCWAVEFORMATEX,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : CULong) UInt;

external (stdcall) waveOutClose(
    argument0 : HWAVEOUT) UInt;

external (stdcall) waveOutPrepareHeader(
    argument0 : HWAVEOUT,
    argument1 : LPWAVEHDR,
    argument2 : UInt) UInt;

external (stdcall) waveOutUnprepareHeader(
    argument0 : HWAVEOUT,
    argument1 : LPWAVEHDR,
    argument2 : UInt) UInt;

external (stdcall) waveOutWrite(
    argument0 : HWAVEOUT,
    argument1 : LPWAVEHDR,
    argument2 : UInt) UInt;

external (stdcall) waveOutPause(
    argument0 : HWAVEOUT) UInt;

external (stdcall) waveOutRestart(
    argument0 : HWAVEOUT) UInt;

external (stdcall) waveOutReset(
    argument0 : HWAVEOUT) UInt;

external (stdcall) waveOutBreakLoop(
    argument0 : HWAVEOUT) UInt;

external (stdcall) waveOutGetPosition(
    argument0 : HWAVEOUT,
    argument1 : LPMMTIME,
    argument2 : UInt) UInt;

external (stdcall) waveOutGetPitch(
    argument0 : HWAVEOUT,
    argument1 : PDWORD) UInt;

external (stdcall) waveOutSetPitch(
    argument0 : HWAVEOUT,
    argument1 : CULong) UInt;

external (stdcall) waveOutGetPlaybackRate(
    argument0 : HWAVEOUT,
    argument1 : PDWORD) UInt;

external (stdcall) waveOutSetPlaybackRate(
    argument0 : HWAVEOUT,
    argument1 : CULong) UInt;

external (stdcall) waveOutGetID(
    argument0 : HWAVEOUT,
    argument1 : LPUINT) UInt;

external (stdcall) waveOutMessage(
    argument0 : HWAVEOUT,
    argument1 : UInt,
    argument2 : CULong,
    argument3 : CULong) UInt;

external (stdcall) waveInGetNumDevs() UInt;

external (stdcall) waveInGetDevCapsA(
    argument0 : UInt,
    argument1 : LPWAVEINCAPSA,
    argument2 : UInt) UInt;

external (stdcall) waveInGetDevCapsW(
    argument0 : UInt,
    argument1 : LPWAVEINCAPSW,
    argument2 : UInt) UInt;

external (stdcall) waveInGetErrorTextA(
    argument0 : UInt,
    argument1 : LPSTR,
    argument2 : UInt) UInt;

external (stdcall) waveInGetErrorTextW(
    argument0 : UInt,
    argument1 : LPWSTR,
    argument2 : UInt) UInt;

external (stdcall) waveInOpen(
    argument0 : LPHWAVEIN,
    argument1 : UInt,
    argument2 : LPCWAVEFORMATEX,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : CULong) UInt;

external (stdcall) waveInClose(
    argument0 : HWAVEIN) UInt;

external (stdcall) waveInPrepareHeader(
    argument0 : HWAVEIN,
    argument1 : LPWAVEHDR,
    argument2 : UInt) UInt;

external (stdcall) waveInUnprepareHeader(
    argument0 : HWAVEIN,
    argument1 : LPWAVEHDR,
    argument2 : UInt) UInt;

external (stdcall) waveInAddBuffer(
    argument0 : HWAVEIN,
    argument1 : LPWAVEHDR,
    argument2 : UInt) UInt;

external (stdcall) waveInStart(
    argument0 : HWAVEIN) UInt;

external (stdcall) waveInStop(
    argument0 : HWAVEIN) UInt;

external (stdcall) waveInReset(
    argument0 : HWAVEIN) UInt;

external (stdcall) waveInGetPosition(
    argument0 : HWAVEIN,
    argument1 : LPMMTIME,
    argument2 : UInt) UInt;

external (stdcall) waveInGetID(
    argument0 : HWAVEIN,
    argument1 : LPUINT) UInt;

external (stdcall) waveInMessage(
    argument0 : HWAVEIN,
    argument1 : UInt,
    argument2 : CULong,
    argument3 : CULong) UInt;

external (stdcall) midiOutGetNumDevs() UInt;

external (stdcall) midiStreamOpen(
    argument0 : LPHMIDISTRM,
    argument1 : LPUINT,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : CULong) UInt;

external (stdcall) midiStreamClose(
    argument0 : HMIDISTRM) UInt;

external (stdcall) midiStreamProperty(
    argument0 : HMIDISTRM,
    argument1 : LPBYTE,
    argument2 : CULong) UInt;

external (stdcall) midiStreamPosition(
    argument0 : HMIDISTRM,
    argument1 : LPMMTIME,
    argument2 : UInt) UInt;

external (stdcall) midiStreamOut(
    argument0 : HMIDISTRM,
    argument1 : LPMIDIHDR,
    argument2 : UInt) UInt;

external (stdcall) midiStreamPause(
    argument0 : HMIDISTRM) UInt;

external (stdcall) midiStreamRestart(
    argument0 : HMIDISTRM) UInt;

external (stdcall) midiStreamStop(
    argument0 : HMIDISTRM) UInt;

external (stdcall) midiConnect(
    argument0 : HMIDI,
    argument1 : HMIDIOUT,
    argument2 : PVOID) UInt;

external (stdcall) midiDisconnect(
    argument0 : HMIDI,
    argument1 : HMIDIOUT,
    argument2 : PVOID) UInt;

external (stdcall) midiOutGetDevCapsA(
    argument0 : UInt,
    argument1 : LPMIDIOUTCAPSA,
    argument2 : UInt) UInt;

external (stdcall) midiOutGetDevCapsW(
    argument0 : UInt,
    argument1 : LPMIDIOUTCAPSW,
    argument2 : UInt) UInt;

external (stdcall) midiOutGetVolume(
    argument0 : HMIDIOUT,
    argument1 : PDWORD) UInt;

external (stdcall) midiOutSetVolume(
    argument0 : HMIDIOUT,
    argument1 : CULong) UInt;

external (stdcall) midiOutGetErrorTextA(
    argument0 : UInt,
    argument1 : LPSTR,
    argument2 : UInt) UInt;

external (stdcall) midiOutGetErrorTextW(
    argument0 : UInt,
    argument1 : LPWSTR,
    argument2 : UInt) UInt;

external (stdcall) midiOutOpen(
    argument0 : LPHMIDIOUT,
    argument1 : UInt,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong) UInt;

external (stdcall) midiOutClose(
    argument0 : HMIDIOUT) UInt;

external (stdcall) midiOutPrepareHeader(
    argument0 : HMIDIOUT,
    argument1 : LPMIDIHDR,
    argument2 : UInt) UInt;

external (stdcall) midiOutUnprepareHeader(
    argument0 : HMIDIOUT,
    argument1 : LPMIDIHDR,
    argument2 : UInt) UInt;

external (stdcall) midiOutShortMsg(
    argument0 : HMIDIOUT,
    argument1 : CULong) UInt;

external (stdcall) midiOutLongMsg(
    argument0 : HMIDIOUT,
    argument1 : LPMIDIHDR,
    argument2 : UInt) UInt;

external (stdcall) midiOutReset(
    argument0 : HMIDIOUT) UInt;

external (stdcall) midiOutCachePatches(
    argument0 : HMIDIOUT,
    argument1 : UInt,
    argument2 : LPWORD,
    argument3 : UInt) UInt;

external (stdcall) midiOutCacheDrumPatches(
    argument0 : HMIDIOUT,
    argument1 : UInt,
    argument2 : LPWORD,
    argument3 : UInt) UInt;

external (stdcall) midiOutGetID(
    argument0 : HMIDIOUT,
    argument1 : LPUINT) UInt;

external (stdcall) midiOutMessage(
    argument0 : HMIDIOUT,
    argument1 : UInt,
    argument2 : CULong,
    argument3 : CULong) UInt;

external (stdcall) midiInGetNumDevs() UInt;

external (stdcall) midiInGetDevCapsA(
    argument0 : UInt,
    argument1 : LPMIDIINCAPSA,
    argument2 : UInt) UInt;

external (stdcall) midiInGetDevCapsW(
    argument0 : UInt,
    argument1 : LPMIDIINCAPSW,
    argument2 : UInt) UInt;

external (stdcall) midiInGetErrorTextA(
    argument0 : UInt,
    argument1 : LPSTR,
    argument2 : UInt) UInt;

external (stdcall) midiInGetErrorTextW(
    argument0 : UInt,
    argument1 : LPWSTR,
    argument2 : UInt) UInt;

external (stdcall) midiInOpen(
    argument0 : LPHMIDIIN,
    argument1 : UInt,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong) UInt;

external (stdcall) midiInClose(
    argument0 : HMIDIIN) UInt;

external (stdcall) midiInPrepareHeader(
    argument0 : HMIDIIN,
    argument1 : LPMIDIHDR,
    argument2 : UInt) UInt;

external (stdcall) midiInUnprepareHeader(
    argument0 : HMIDIIN,
    argument1 : LPMIDIHDR,
    argument2 : UInt) UInt;

external (stdcall) midiInAddBuffer(
    argument0 : HMIDIIN,
    argument1 : LPMIDIHDR,
    argument2 : UInt) UInt;

external (stdcall) midiInStart(
    argument0 : HMIDIIN) UInt;

external (stdcall) midiInStop(
    argument0 : HMIDIIN) UInt;

external (stdcall) midiInReset(
    argument0 : HMIDIIN) UInt;

external (stdcall) midiInGetID(
    argument0 : HMIDIIN,
    argument1 : LPUINT) UInt;

external (stdcall) midiInMessage(
    argument0 : HMIDIIN,
    argument1 : UInt,
    argument2 : CULong,
    argument3 : CULong) UInt;

external (stdcall) auxGetNumDevs() UInt;

external (stdcall) auxGetDevCapsA(
    argument0 : UInt,
    argument1 : LPAUXCAPSA,
    argument2 : UInt) UInt;

external (stdcall) auxGetDevCapsW(
    argument0 : UInt,
    argument1 : LPAUXCAPSW,
    argument2 : UInt) UInt;

external (stdcall) auxSetVolume(
    argument0 : UInt,
    argument1 : CULong) UInt;

external (stdcall) auxGetVolume(
    argument0 : UInt,
    argument1 : PDWORD) UInt;

external (stdcall) auxOutMessage(
    argument0 : UInt,
    argument1 : UInt,
    argument2 : CULong,
    argument3 : CULong) UInt;

external (stdcall) mixerGetNumDevs() UInt;

external (stdcall) mixerGetDevCapsA(
    argument0 : UInt,
    argument1 : LPMIXERCAPSA,
    argument2 : UInt) UInt;

external (stdcall) mixerGetDevCapsW(
    argument0 : UInt,
    argument1 : LPMIXERCAPSW,
    argument2 : UInt) UInt;

external (stdcall) mixerOpen(
    argument0 : LPHMIXER,
    argument1 : UInt,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong) UInt;

external (stdcall) mixerClose(
    argument0 : HMIXER) UInt;

external (stdcall) mixerMessage(
    argument0 : HMIXER,
    argument1 : UInt,
    argument2 : CULong,
    argument3 : CULong) CULong;

external (stdcall) mixerGetLineInfoA(
    argument0 : HMIXEROBJ,
    argument1 : LPMIXERLINEA,
    argument2 : CULong) UInt;

external (stdcall) mixerGetLineInfoW(
    argument0 : HMIXEROBJ,
    argument1 : LPMIXERLINEW,
    argument2 : CULong) UInt;

external (stdcall) mixerGetID(
    argument0 : HMIXEROBJ,
    argument1 : PUINT,
    argument2 : CULong) UInt;

external (stdcall) mixerGetLineControlsA(
    argument0 : HMIXEROBJ,
    argument1 : LPMIXERLINECONTROLSA,
    argument2 : CULong) UInt;

external (stdcall) mixerGetLineControlsW(
    argument0 : HMIXEROBJ,
    argument1 : LPMIXERLINECONTROLSW,
    argument2 : CULong) UInt;

external (stdcall) mixerGetControlDetailsA(
    argument0 : HMIXEROBJ,
    argument1 : LPMIXERCONTROLDETAILS,
    argument2 : CULong) UInt;

external (stdcall) mixerGetControlDetailsW(
    argument0 : HMIXEROBJ,
    argument1 : LPMIXERCONTROLDETAILS,
    argument2 : CULong) UInt;

external (stdcall) mixerSetControlDetails(
    argument0 : HMIXEROBJ,
    argument1 : LPMIXERCONTROLDETAILS,
    argument2 : CULong) UInt;

external (stdcall) timeGetSystemTime(
    argument0 : LPMMTIME,
    argument1 : UInt) UInt;

external (stdcall) timeGetTime() CULong;

external (stdcall) timeSetEvent(
    argument0 : UInt,
    argument1 : UInt,
    argument2 : LPTIMECALLBACK,
    argument3 : CULong,
    argument4 : UInt) UInt;

external (stdcall) timeKillEvent(
    argument0 : UInt) UInt;

external (stdcall) timeGetDevCaps(
    argument0 : LPTIMECAPS,
    argument1 : UInt) UInt;

external (stdcall) timeBeginPeriod(
    argument0 : UInt) UInt;

external (stdcall) timeEndPeriod(
    argument0 : UInt) UInt;

external (stdcall) joyGetNumDevs() UInt;

external (stdcall) joyGetDevCapsA(
    argument0 : UInt,
    argument1 : LPJOYCAPSA,
    argument2 : UInt) UInt;

external (stdcall) joyGetDevCapsW(
    argument0 : UInt,
    argument1 : LPJOYCAPSW,
    argument2 : UInt) UInt;

external (stdcall) joyGetPos(
    argument0 : UInt,
    argument1 : LPJOYINFO) UInt;

external (stdcall) joyGetPosEx(
    argument0 : UInt,
    argument1 : LPJOYINFOEX) UInt;

external (stdcall) joyGetThreshold(
    argument0 : UInt,
    argument1 : LPUINT) UInt;

external (stdcall) joyReleaseCapture(
    argument0 : UInt) UInt;

external (stdcall) joySetCapture(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : Int) UInt;

external (stdcall) joySetThreshold(
    argument0 : UInt,
    argument1 : UInt) UInt;

external (stdcall) mmioStringToFOURCCA(
    argument0 : LPCSTR,
    argument1 : UInt) CULong;

external (stdcall) mmioStringToFOURCCW(
    argument0 : LPCWSTR,
    argument1 : UInt) CULong;

external (stdcall) mmioInstallIOProcA(
    argument0 : CULong,
    argument1 : LPMMIOPROC,
    argument2 : CULong) LPMMIOPROC;

external (stdcall) mmioInstallIOProcW(
    argument0 : CULong,
    argument1 : LPMMIOPROC,
    argument2 : CULong) LPMMIOPROC;

external (stdcall) mmioOpenA(
    argument0 : LPSTR,
    argument1 : LPMMIOINFO,
    argument2 : CULong) HMMIO;

external (stdcall) mmioOpenW(
    argument0 : LPWSTR,
    argument1 : LPMMIOINFO,
    argument2 : CULong) HMMIO;

external (stdcall) mmioRenameA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : LPCMMIOINFO,
    argument3 : CULong) UInt;

external (stdcall) mmioRenameW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : LPCMMIOINFO,
    argument3 : CULong) UInt;

external (stdcall) mmioClose(
    argument0 : HMMIO,
    argument1 : UInt) UInt;

external (stdcall) mmioRead(
    argument0 : HMMIO,
    argument1 : HPSTR,
    argument2 : CLong) CLong;

external (stdcall) mmioWrite(
    argument0 : HMMIO,
    argument1 : LPCSTR,
    argument2 : CLong) CLong;

external (stdcall) mmioSeek(
    argument0 : HMMIO,
    argument1 : CLong,
    argument2 : Int) CLong;

external (stdcall) mmioGetInfo(
    argument0 : HMMIO,
    argument1 : LPMMIOINFO,
    argument2 : UInt) UInt;

external (stdcall) mmioSetInfo(
    argument0 : HMMIO,
    argument1 : LPCMMIOINFO,
    argument2 : UInt) UInt;

external (stdcall) mmioSetBuffer(
    argument0 : HMMIO,
    argument1 : LPSTR,
    argument2 : CLong,
    argument3 : UInt) UInt;

external (stdcall) mmioFlush(
    argument0 : HMMIO,
    argument1 : UInt) UInt;

external (stdcall) mmioAdvance(
    argument0 : HMMIO,
    argument1 : LPMMIOINFO,
    argument2 : UInt) UInt;

external (stdcall) mmioSendMessage(
    argument0 : HMMIO,
    argument1 : UInt,
    argument2 : CLong,
    argument3 : CLong) CLong;

external (stdcall) mmioDescend(
    argument0 : HMMIO,
    argument1 : LPMMCKINFO,
    argument2 : Pointer[MMCKINFO],
    argument3 : UInt) UInt;

external (stdcall) mmioAscend(
    argument0 : HMMIO,
    argument1 : LPMMCKINFO,
    argument2 : UInt) UInt;

external (stdcall) mmioCreateChunk(
    argument0 : HMMIO,
    argument1 : LPMMCKINFO,
    argument2 : UInt) UInt;

external (stdcall) mciSendCommandA(
    argument0 : UInt,
    argument1 : UInt,
    argument2 : CULong,
    argument3 : CULong) CULong;

external (stdcall) mciSendCommandW(
    argument0 : UInt,
    argument1 : UInt,
    argument2 : CULong,
    argument3 : CULong) CULong;

external (stdcall) mciSendStringA(
    argument0 : LPCSTR,
    argument1 : LPSTR,
    argument2 : UInt,
    argument3 : HWND) CULong;

external (stdcall) mciSendStringW(
    argument0 : LPCWSTR,
    argument1 : LPWSTR,
    argument2 : UInt,
    argument3 : HWND) CULong;

external (stdcall) mciGetDeviceIDA(
    argument0 : LPCSTR) UInt;

external (stdcall) mciGetDeviceIDW(
    argument0 : LPCWSTR) UInt;

external (stdcall) mciGetDeviceIDFromElementIDA(
    argument0 : CULong,
    argument1 : LPCSTR) UInt;

external (stdcall) mciGetDeviceIDFromElementIDW(
    argument0 : CULong,
    argument1 : LPCWSTR) UInt;

external (stdcall) mciGetErrorStringA(
    argument0 : CULong,
    argument1 : LPSTR,
    argument2 : UInt) Int;

external (stdcall) mciGetErrorStringW(
    argument0 : CULong,
    argument1 : LPWSTR,
    argument2 : UInt) Int;

external (stdcall) mciSetYieldProc(
    argument0 : UInt,
    argument1 : YIELDPROC,
    argument2 : CULong) Int;

external (stdcall) mciGetCreatorTask(
    argument0 : UInt) HTASK;

external (stdcall) mciGetYieldProc(
    argument0 : UInt,
    argument1 : PDWORD) YIELDPROC;

record Struct_tagMCI_SEQ_SET_PARMS (
    dwCallback : CULong,
    dwTimeFormat : CULong,
    dwAudio : CULong,
    dwTempo : CULong,
    dwPort : CULong,
    dwSlave : CULong,
    dwMaster : CULong,
    dwOffset : CULong,
);

alias MCI_SEQ_SET_PARMS = Struct_tagMCI_SEQ_SET_PARMS;

alias PMCI_SEQ_SET_PARMS = Pointer[Struct_tagMCI_SEQ_SET_PARMS];

alias LPMCI_SEQ_SET_PARMS = Pointer[Struct_tagMCI_SEQ_SET_PARMS];

record Struct_tagMCI_ANIM_OPEN_PARMSA (
    dwCallback : CULong,
    wDeviceID : UInt,
    lpstrDeviceType : LPCSTR,
    lpstrElementName : LPCSTR,
    lpstrAlias : LPCSTR,
    dwStyle : CULong,
    hWndParent : HWND,
);

alias MCI_ANIM_OPEN_PARMSA = Struct_tagMCI_ANIM_OPEN_PARMSA;

alias PMCI_ANIM_OPEN_PARMSA = Pointer[Struct_tagMCI_ANIM_OPEN_PARMSA];

alias LPMCI_ANIM_OPEN_PARMSA = Pointer[Struct_tagMCI_ANIM_OPEN_PARMSA];

record Struct_tagMCI_ANIM_OPEN_PARMSW (
    dwCallback : CULong,
    wDeviceID : UInt,
    lpstrDeviceType : LPCWSTR,
    lpstrElementName : LPCWSTR,
    lpstrAlias : LPCWSTR,
    dwStyle : CULong,
    hWndParent : HWND,
);

alias MCI_ANIM_OPEN_PARMSW = Struct_tagMCI_ANIM_OPEN_PARMSW;

alias PMCI_ANIM_OPEN_PARMSW = Pointer[Struct_tagMCI_ANIM_OPEN_PARMSW];

alias LPMCI_ANIM_OPEN_PARMSW = Pointer[Struct_tagMCI_ANIM_OPEN_PARMSW];

record Struct_tagMCI_ANIM_PLAY_PARMS (
    dwCallback : CULong,
    dwFrom : CULong,
    dwTo : CULong,
    dwSpeed : CULong,
);

alias MCI_ANIM_PLAY_PARMS = Struct_tagMCI_ANIM_PLAY_PARMS;

alias PMCI_ANIM_PLAY_PARMS = Pointer[Struct_tagMCI_ANIM_PLAY_PARMS];

alias LPMCI_ANIM_PLAY_PARMS = Pointer[Struct_tagMCI_ANIM_PLAY_PARMS];

record Struct_tagMCI_ANIM_STEP_PARMS (
    dwCallback : CULong,
    dwFrames : CULong,
);

alias MCI_ANIM_STEP_PARMS = Struct_tagMCI_ANIM_STEP_PARMS;

alias PMCI_ANIM_STEP_PARMS = Pointer[Struct_tagMCI_ANIM_STEP_PARMS];

alias LPMCI_ANIM_STEP_PARMS = Pointer[Struct_tagMCI_ANIM_STEP_PARMS];

record Struct_tagMCI_ANIM_WINDOW_PARMSA (
    dwCallback : CULong,
    hWnd : HWND,
    nCmdShow : UInt,
    lpstrText : LPCSTR,
);

alias MCI_ANIM_WINDOW_PARMSA = Struct_tagMCI_ANIM_WINDOW_PARMSA;

alias PMCI_ANIM_WINDOW_PARMSA = Pointer[Struct_tagMCI_ANIM_WINDOW_PARMSA];

alias LPMCI_ANIM_WINDOW_PARMSA = Pointer[Struct_tagMCI_ANIM_WINDOW_PARMSA];

record Struct_tagMCI_ANIM_WINDOW_PARMSW (
    dwCallback : CULong,
    hWnd : HWND,
    nCmdShow : UInt,
    lpstrText : LPCWSTR,
);

alias MCI_ANIM_WINDOW_PARMSW = Struct_tagMCI_ANIM_WINDOW_PARMSW;

alias PMCI_ANIM_WINDOW_PARMSW = Pointer[Struct_tagMCI_ANIM_WINDOW_PARMSW];

alias LPMCI_ANIM_WINDOW_PARMSW = Pointer[Struct_tagMCI_ANIM_WINDOW_PARMSW];

record Struct_tagMCI_ANIM_RECT_PARMS (
    dwCallback : CULong,
    rc : RECT,
);

alias MCI_ANIM_RECT_PARMS = Struct_tagMCI_ANIM_RECT_PARMS;

alias PMCI_ANIM_RECT_PARMS = Pointer[Struct_tagMCI_ANIM_RECT_PARMS];

alias LPMCI_ANIM_RECT_PARMS = Pointer[Struct_tagMCI_ANIM_RECT_PARMS];

record Struct_tagMCI_ANIM_UPDATE_PARMS (
    dwCallback : CULong,
    rc : RECT,
    hDC : HDC,
);

alias MCI_ANIM_UPDATE_PARMS = Struct_tagMCI_ANIM_UPDATE_PARMS;

alias PMCI_ANIM_UPDATE_PARMS = Pointer[Struct_tagMCI_ANIM_UPDATE_PARMS];

alias LPMCI_ANIM_UPDATE_PARMS = Pointer[Struct_tagMCI_ANIM_UPDATE_PARMS];

record Struct_tagMCI_OVLY_OPEN_PARMSA (
    dwCallback : CULong,
    wDeviceID : UInt,
    lpstrDeviceType : LPCSTR,
    lpstrElementName : LPCSTR,
    lpstrAlias : LPCSTR,
    dwStyle : CULong,
    hWndParent : HWND,
);

alias MCI_OVLY_OPEN_PARMSA = Struct_tagMCI_OVLY_OPEN_PARMSA;

alias PMCI_OVLY_OPEN_PARMSA = Pointer[Struct_tagMCI_OVLY_OPEN_PARMSA];

alias LPMCI_OVLY_OPEN_PARMSA = Pointer[Struct_tagMCI_OVLY_OPEN_PARMSA];

record Struct_tagMCI_OVLY_OPEN_PARMSW (
    dwCallback : CULong,
    wDeviceID : UInt,
    lpstrDeviceType : LPCWSTR,
    lpstrElementName : LPCWSTR,
    lpstrAlias : LPCWSTR,
    dwStyle : CULong,
    hWndParent : HWND,
);

alias MCI_OVLY_OPEN_PARMSW = Struct_tagMCI_OVLY_OPEN_PARMSW;

alias PMCI_OVLY_OPEN_PARMSW = Pointer[Struct_tagMCI_OVLY_OPEN_PARMSW];

alias LPMCI_OVLY_OPEN_PARMSW = Pointer[Struct_tagMCI_OVLY_OPEN_PARMSW];

record Struct_tagMCI_OVLY_WINDOW_PARMSA (
    dwCallback : CULong,
    hWnd : HWND,
    nCmdShow : UInt,
    lpstrText : LPCSTR,
);

alias MCI_OVLY_WINDOW_PARMSA = Struct_tagMCI_OVLY_WINDOW_PARMSA;

alias PMCI_OVLY_WINDOW_PARMSA = Pointer[Struct_tagMCI_OVLY_WINDOW_PARMSA];

alias LPMCI_OVLY_WINDOW_PARMSA = Pointer[Struct_tagMCI_OVLY_WINDOW_PARMSA];

record Struct_tagMCI_OVLY_WINDOW_PARMSW (
    dwCallback : CULong,
    hWnd : HWND,
    nCmdShow : UInt,
    lpstrText : LPCWSTR,
);

alias MCI_OVLY_WINDOW_PARMSW = Struct_tagMCI_OVLY_WINDOW_PARMSW;

alias PMCI_OVLY_WINDOW_PARMSW = Pointer[Struct_tagMCI_OVLY_WINDOW_PARMSW];

alias LPMCI_OVLY_WINDOW_PARMSW = Pointer[Struct_tagMCI_OVLY_WINDOW_PARMSW];

record Struct_tagMCI_OVLY_RECT_PARMS (
    dwCallback : CULong,
    rc : RECT,
);

alias MCI_OVLY_RECT_PARMS = Struct_tagMCI_OVLY_RECT_PARMS;

alias PMCI_OVLY_RECT_PARMS = Pointer[Struct_tagMCI_OVLY_RECT_PARMS];

alias LPMCI_OVLY_RECT_PARMS = Pointer[Struct_tagMCI_OVLY_RECT_PARMS];

record Struct_tagMCI_OVLY_SAVE_PARMSA (
    dwCallback : CULong,
    lpfilename : LPCSTR,
    rc : RECT,
);

alias MCI_OVLY_SAVE_PARMSA = Struct_tagMCI_OVLY_SAVE_PARMSA;

alias PMCI_OVLY_SAVE_PARMSA = Pointer[Struct_tagMCI_OVLY_SAVE_PARMSA];

alias LPMCI_OVLY_SAVE_PARMSA = Pointer[Struct_tagMCI_OVLY_SAVE_PARMSA];

record Struct_tagMCI_OVLY_SAVE_PARMSW (
    dwCallback : CULong,
    lpfilename : LPCWSTR,
    rc : RECT,
);

alias MCI_OVLY_SAVE_PARMSW = Struct_tagMCI_OVLY_SAVE_PARMSW;

alias PMCI_OVLY_SAVE_PARMSW = Pointer[Struct_tagMCI_OVLY_SAVE_PARMSW];

alias LPMCI_OVLY_SAVE_PARMSW = Pointer[Struct_tagMCI_OVLY_SAVE_PARMSW];

record Struct_tagMCI_OVLY_LOAD_PARMSA (
    dwCallback : CULong,
    lpfilename : LPCSTR,
    rc : RECT,
);

alias MCI_OVLY_LOAD_PARMSA = Struct_tagMCI_OVLY_LOAD_PARMSA;

alias PMCI_OVLY_LOAD_PARMSA = Pointer[Struct_tagMCI_OVLY_LOAD_PARMSA];

alias LPMCI_OVLY_LOAD_PARMSA = Pointer[Struct_tagMCI_OVLY_LOAD_PARMSA];

record Struct_tagMCI_OVLY_LOAD_PARMSW (
    dwCallback : CULong,
    lpfilename : LPCWSTR,
    rc : RECT,
);

alias MCI_OVLY_LOAD_PARMSW = Struct_tagMCI_OVLY_LOAD_PARMSW;

alias PMCI_OVLY_LOAD_PARMSW = Pointer[Struct_tagMCI_OVLY_LOAD_PARMSW];

alias LPMCI_OVLY_LOAD_PARMSW = Pointer[Struct_tagMCI_OVLY_LOAD_PARMSW];

alias WAVEOUTCAPS = WAVEOUTCAPSA;

alias PWAVEOUTCAPS = Pointer[WAVEOUTCAPSA];

alias LPWAVEOUTCAPS = Pointer[WAVEOUTCAPSA];

alias WAVEINCAPS = WAVEINCAPSA;

alias PWAVEINCAPS = Pointer[WAVEINCAPSA];

alias LPWAVEINCAPS = Pointer[WAVEINCAPSA];

alias MIDIOUTCAPS = MIDIOUTCAPSA;

alias PMIDIOUTCAPS = Pointer[MIDIOUTCAPSA];

alias LPMIDIOUTCAPS = Pointer[MIDIOUTCAPSA];

alias MIDIINCAPS = MIDIINCAPSA;

alias PMIDIINCAPS = Pointer[MIDIINCAPSA];

alias LPMIDIINCAPS = Pointer[MIDIINCAPSA];

alias AUXCAPS = AUXCAPSA;

alias PAUXCAPS = Pointer[AUXCAPSA];

alias LPAUXCAPS = Pointer[AUXCAPSA];

alias MIXERCAPS = MIXERCAPSA;

alias PMIXERCAPS = Pointer[MIXERCAPSA];

alias LPMIXERCAPS = Pointer[MIXERCAPSA];

alias MIXERLINE = MIXERLINEA;

alias PMIXERLINE = Pointer[MIXERLINEA];

alias LPMIXERLINE = Pointer[MIXERLINEA];

alias MIXERCONTROL = MIXERCONTROLA;

alias PMIXERCONTROL = Pointer[MIXERCONTROLA];

alias LPMIXERCONTROL = Pointer[MIXERCONTROLA];

alias MIXERLINECONTROLS = MIXERLINECONTROLSA;

alias PMIXERLINECONTROLS = Pointer[MIXERLINECONTROLSA];

alias LPMIXERLINECONTROLS = Pointer[MIXERLINECONTROLSA];

alias MIXERCONTROLDETAILS_LISTTEXT = MIXERCONTROLDETAILS_LISTTEXTA;

alias PMIXERCONTROLDETAILS_LISTTEXT = Pointer[MIXERCONTROLDETAILS_LISTTEXTA];

alias LPMIXERCONTROLDETAILS_LISTTEXT = Pointer[MIXERCONTROLDETAILS_LISTTEXTA];

alias JOYCAPS = JOYCAPSA;

alias PJOYCAPS = Pointer[JOYCAPSA];

alias LPJOYCAPS = Pointer[JOYCAPSA];

alias MCI_OPEN_PARMS = MCI_OPEN_PARMSA;

alias PMCI_OPEN_PARMS = Pointer[MCI_OPEN_PARMSA];

alias LPMCI_OPEN_PARMS = Pointer[MCI_OPEN_PARMSA];

alias MCI_INFO_PARMS = MCI_INFO_PARMSA;

alias LPMCI_INFO_PARMS = Pointer[MCI_INFO_PARMSA];

alias MCI_SYSINFO_PARMS = MCI_SYSINFO_PARMSA;

alias PMCI_SYSINFO_PARMS = Pointer[MCI_SYSINFO_PARMSA];

alias LPMCI_SYSINFO_PARMS = Pointer[MCI_SYSINFO_PARMSA];

alias MCI_SAVE_PARMS = MCI_SAVE_PARMSA;

alias PMCI_SAVE_PARMS = Pointer[MCI_SAVE_PARMSA];

alias LPMCI_SAVE_PARMS = Pointer[MCI_SAVE_PARMSA];

alias MCI_LOAD_PARMS = MCI_LOAD_PARMSA;

alias PMCI_LOAD_PARMS = Pointer[MCI_LOAD_PARMSA];

alias LPMCI_LOAD_PARMS = Pointer[MCI_LOAD_PARMSA];

alias MCI_VD_ESCAPE_PARMS = MCI_VD_ESCAPE_PARMSA;

alias PMCI_VD_ESCAPE_PARMS = Pointer[MCI_VD_ESCAPE_PARMSA];

alias LPMCI_VD_ESCAPE_PARMS = Pointer[MCI_VD_ESCAPE_PARMSA];

alias MCI_WAVE_OPEN_PARMS = MCI_WAVE_OPEN_PARMSA;

alias PMCI_WAVE_OPEN_PARMS = Pointer[MCI_WAVE_OPEN_PARMSA];

alias LPMCI_WAVE_OPEN_PARMS = Pointer[MCI_WAVE_OPEN_PARMSA];

alias MCI_ANIM_OPEN_PARMS = MCI_ANIM_OPEN_PARMSA;

alias PMCI_ANIM_OPEN_PARMS = Pointer[MCI_ANIM_OPEN_PARMSA];

alias LPMCI_ANIM_OPEN_PARMS = Pointer[MCI_ANIM_OPEN_PARMSA];

alias MCI_ANIM_WINDOW_PARMS = MCI_ANIM_WINDOW_PARMSA;

alias PMCI_ANIM_WINDOW_PARMS = Pointer[MCI_ANIM_WINDOW_PARMSA];

alias LPMCI_ANIM_WINDOW_PARMS = Pointer[MCI_ANIM_WINDOW_PARMSA];

alias MCI_OVLY_OPEN_PARMS = MCI_OVLY_OPEN_PARMSA;

alias PMCI_OVLY_OPEN_PARMS = Pointer[MCI_OVLY_OPEN_PARMSA];

alias LPMCI_OVLY_OPEN_PARMS = Pointer[MCI_OVLY_OPEN_PARMSA];

alias MCI_OVLY_WINDOW_PARMS = MCI_OVLY_WINDOW_PARMSA;

alias PMCI_OVLY_WINDOW_PARMS = Pointer[MCI_OVLY_WINDOW_PARMSA];

alias LPMCI_OVLY_WINDOW_PARMS = Pointer[MCI_OVLY_WINDOW_PARMSA];

alias MCI_OVLY_SAVE_PARMS = MCI_OVLY_SAVE_PARMSA;

alias PMCI_OVLY_SAVE_PARMS = Pointer[MCI_OVLY_SAVE_PARMSA];

alias LPMCI_OVLY_SAVE_PARMS = Pointer[MCI_OVLY_SAVE_PARMSA];

record Struct__ACTION_HEADER (
    transport_id : CULong,
    action_code : UShort,
    reserved : UShort,
);

alias ACTION_HEADER = Struct__ACTION_HEADER;

alias PACTION_HEADER = Pointer[Struct__ACTION_HEADER];

record Struct__ADAPTER_STATUS (
    adapter_address : Array[CUChar,6],
    rev_major : CUChar,
    reserved0 : CUChar,
    adapter_type : CUChar,
    rev_minor : CUChar,
    duration : UShort,
    frmr_recv : UShort,
    frmr_xmit : UShort,
    iframe_recv_err : UShort,
    xmit_aborts : UShort,
    xmit_success : CULong,
    recv_success : CULong,
    iframe_xmit_err : UShort,
    recv_buff_unavail : UShort,
    t1_timeouts : UShort,
    ti_timeouts : UShort,
    reserved1 : CULong,
    free_ncbs : UShort,
    max_cfg_ncbs : UShort,
    max_ncbs : UShort,
    xmit_buf_unavail : UShort,
    max_dgram_size : UShort,
    pending_sess : UShort,
    max_cfg_sess : UShort,
    max_sess : UShort,
    max_sess_pkt_size : UShort,
    name_count : UShort,
);

alias ADAPTER_STATUS = Struct__ADAPTER_STATUS;

alias PADAPTER_STATUS = Pointer[Struct__ADAPTER_STATUS];

record Struct__FIND_NAME_BUFFER (
    length : CUChar,
    access_control : CUChar,
    frame_control : CUChar,
    destination_addr : Array[CUChar,6],
    source_addr : Array[CUChar,6],
    routing_info : Array[CUChar,18],
);

alias FIND_NAME_BUFFER = Struct__FIND_NAME_BUFFER;

alias PFIND_NAME_BUFFER = Pointer[Struct__FIND_NAME_BUFFER];

record Struct__FIND_NAME_HEADER (
    node_count : UShort,
    reserved : CUChar,
    unique_group : CUChar,
);

alias FIND_NAME_HEADER = Struct__FIND_NAME_HEADER;

alias PFIND_NAME_HEADER = Pointer[Struct__FIND_NAME_HEADER];

record Struct__LANA_ENUM (
    length : CUChar,
    lana : Array[CUChar,255],
);

alias LANA_ENUM = Struct__LANA_ENUM;

alias PLANA_ENUM = Pointer[Struct__LANA_ENUM];

record Struct__NAME_BUFFER (
    name : Array[CUChar,16],
    name_num : CUChar,
    name_flags : CUChar,
);

alias NAME_BUFFER = Struct__NAME_BUFFER;

alias PNAME_BUFFER = Pointer[Struct__NAME_BUFFER];

record Struct__NCB (
    ncb_command : CUChar,
    ncb_retcode : CUChar,
    ncb_lsn : CUChar,
    ncb_num : CUChar,
    ncb_buffer : PUCHAR,
    ncb_length : UShort,
    ncb_callname : Array[CUChar,16],
    ncb_name : Array[CUChar,16],
    ncb_rto : CUChar,
    ncb_sto : CUChar,
    ncb_post : StdCallCodePointer[(Pointer[Struct__NCB]),()],
    ncb_lana_num : CUChar,
    ncb_cmd_cplt : CUChar,
    ncb_reserve : Array[CUChar,10],
    ncb_event : HANDLE,
);

alias NCB = Struct__NCB;

alias PNCB = Pointer[Struct__NCB];

record Struct__SESSION_BUFFER (
    lsn : CUChar,
    state : CUChar,
    local_name : Array[CUChar,16],
    remote_name : Array[CUChar,16],
    rcvs_outstanding : CUChar,
    sends_outstanding : CUChar,
);

alias SESSION_BUFFER = Struct__SESSION_BUFFER;

alias PSESSION_BUFFER = Pointer[Struct__SESSION_BUFFER];

record Struct__SESSION_HEADER (
    sess_name : CUChar,
    num_sess : CUChar,
    rcv_dg_outstanding : CUChar,
    rcv_any_outstanding : CUChar,
);

alias SESSION_HEADER = Struct__SESSION_HEADER;

alias PSESSION_HEADER = Pointer[Struct__SESSION_HEADER];

external (stdcall) Netbios(
    argument0 : PNCB) CUChar;

alias I_RPC_HANDLE = RawPointer;

alias RPC_STATUS = CLong;

alias UUID = GUID;

alias IID = GUID;

alias CLSID = GUID;

alias LPCLSID = Pointer[CLSID];

alias LPIID = Pointer[IID];

alias REFIID = Pointer[IID];

alias REFCLSID = Pointer[CLSID];

alias FMTID = GUID;

alias REFFMTID = Pointer[FMTID];

alias error_status_t = CULong;

alias PROPID = CULong;

alias RPC_BINDING_HANDLE = I_RPC_HANDLE;

alias handle_t = RPC_BINDING_HANDLE;

record Struct__RPC_BINDING_VECTOR (
    Count : CULong,
    BindingH : Array[RPC_BINDING_HANDLE,1],
);

alias RPC_BINDING_VECTOR = Struct__RPC_BINDING_VECTOR;

record Struct__UUID_VECTOR (
    Count : CULong,
    Uuid : Array[Pointer[UUID],1],
);

alias UUID_VECTOR = Struct__UUID_VECTOR;

alias RPC_IF_HANDLE = RawPointer;

record Struct__RPC_IF_ID (
    Uuid : UUID,
    VersMajor : UShort,
    VersMinor : UShort,
);

alias RPC_IF_ID = Struct__RPC_IF_ID;

record Struct__RPC_POLICY (
    Length : UInt,
    EndpointFlags : CULong,
    NICFlags : CULong,
);

alias RPC_POLICY = Struct__RPC_POLICY;

alias PRPC_POLICY = Pointer[Struct__RPC_POLICY];

record UnnamedStruct20 (
    Count : UInt,
    Stats : Array[CULong,1],
);

alias RPC_STATS_VECTOR = UnnamedStruct20;

record UnnamedStruct21 (
    Count : CULong,
    IfId : Array[Pointer[RPC_IF_ID],1],
);

alias RPC_IF_ID_VECTOR = UnnamedStruct21;

alias RPC_AUTH_IDENTITY_HANDLE = RawPointer;

alias RPC_AUTHZ_HANDLE = RawPointer;

record Struct__RPC_SECURITY_QOS (
    Version : CULong,
    Capabilities : CULong,
    IdentityTracking : CULong,
    ImpersonationType : CULong,
);

alias RPC_SECURITY_QOS = Struct__RPC_SECURITY_QOS;

alias PRPC_SECURITY_QOS = Pointer[Struct__RPC_SECURITY_QOS];

record Struct__SEC_WINNT_AUTH_IDENTITY_W (
    User : Pointer[UShort],
    UserLength : CULong,
    Domain : Pointer[UShort],
    DomainLength : CULong,
    Password : Pointer[UShort],
    PasswordLength : CULong,
    Flags : CULong,
);

alias SEC_WINNT_AUTH_IDENTITY_W = Struct__SEC_WINNT_AUTH_IDENTITY_W;

alias PSEC_WINNT_AUTH_IDENTITY_W = Pointer[Struct__SEC_WINNT_AUTH_IDENTITY_W];

record Struct__SEC_WINNT_AUTH_IDENTITY_A (
    User : Pointer[CUChar],
    UserLength : CULong,
    Domain : Pointer[CUChar],
    DomainLength : CULong,
    Password : Pointer[CUChar],
    PasswordLength : CULong,
    Flags : CULong,
);

alias SEC_WINNT_AUTH_IDENTITY_A = Struct__SEC_WINNT_AUTH_IDENTITY_A;

alias PSEC_WINNT_AUTH_IDENTITY_A = Pointer[Struct__SEC_WINNT_AUTH_IDENTITY_A];

record UnnamedStruct22 (
    UserName : Pointer[CUChar],
    ComputerName : Pointer[CUChar],
    Privilege : UShort,
    AuthFlags : CULong,
);

alias RPC_CLIENT_INFORMATION1 = UnnamedStruct22;

alias PRPC_CLIENT_INFORMATION1 = Pointer[UnnamedStruct22];

alias RPC_EP_INQ_HANDLE = Pointer[I_RPC_HANDLE];

alias RPC_MGMT_AUTHORIZATION_FN = StdCallCodePointer[(RawPointer,CULong,Pointer[CLong]),(Int)];

record Struct__RPC_PROTSEQ_VECTORA (
    Count : UInt,
    Protseq : Array[Pointer[CUChar],1],
);

alias RPC_PROTSEQ_VECTORA = Struct__RPC_PROTSEQ_VECTORA;

record Struct__RPC_PROTSEQ_VECTORW (
    Count : UInt,
    Protseq : Array[Pointer[UShort],1],
);

alias RPC_PROTSEQ_VECTORW = Struct__RPC_PROTSEQ_VECTORW;

external (stdcall) RpcBindingFromStringBindingA(
    argument0 : Pointer[CUChar],
    argument1 : Pointer[RPC_BINDING_HANDLE]) CLong;

external (stdcall) RpcBindingFromStringBindingW(
    argument0 : Pointer[UShort],
    argument1 : Pointer[RPC_BINDING_HANDLE]) CLong;

external (stdcall) RpcBindingToStringBindingA(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[Pointer[CUChar]]) CLong;

external (stdcall) RpcBindingToStringBindingW(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[Pointer[UShort]]) CLong;

external (stdcall) RpcStringBindingComposeA(
    argument0 : Pointer[CUChar],
    argument1 : Pointer[CUChar],
    argument2 : Pointer[CUChar],
    argument3 : Pointer[CUChar],
    argument4 : Pointer[CUChar],
    argument5 : Pointer[Pointer[CUChar]]) CLong;

external (stdcall) RpcStringBindingComposeW(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort],
    argument2 : Pointer[UShort],
    argument3 : Pointer[UShort],
    argument4 : Pointer[UShort],
    argument5 : Pointer[Pointer[UShort]]) CLong;

external (stdcall) RpcStringBindingParseA(
    argument0 : Pointer[CUChar],
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : Pointer[Pointer[CUChar]],
    argument3 : Pointer[Pointer[CUChar]],
    argument4 : Pointer[Pointer[CUChar]],
    argument5 : Pointer[Pointer[CUChar]]) CLong;

external (stdcall) RpcStringBindingParseW(
    argument0 : Pointer[UShort],
    argument1 : Pointer[Pointer[UShort]],
    argument2 : Pointer[Pointer[UShort]],
    argument3 : Pointer[Pointer[UShort]],
    argument4 : Pointer[Pointer[UShort]],
    argument5 : Pointer[Pointer[UShort]]) CLong;

external (stdcall) RpcStringFreeA(
    argument0 : Pointer[Pointer[CUChar]]) CLong;

external (stdcall) RpcStringFreeW(
    argument0 : Pointer[Pointer[UShort]]) CLong;

external (stdcall) RpcNetworkIsProtseqValidA(
    argument0 : Pointer[CUChar]) CLong;

external (stdcall) RpcNetworkIsProtseqValidW(
    argument0 : Pointer[UShort]) CLong;

external (stdcall) RpcNetworkInqProtseqsA(
    argument0 : Pointer[Pointer[RPC_PROTSEQ_VECTORA]]) CLong;

external (stdcall) RpcNetworkInqProtseqsW(
    argument0 : Pointer[Pointer[RPC_PROTSEQ_VECTORW]]) CLong;

external (stdcall) RpcProtseqVectorFreeA(
    argument0 : Pointer[Pointer[RPC_PROTSEQ_VECTORA]]) CLong;

external (stdcall) RpcProtseqVectorFreeW(
    argument0 : Pointer[Pointer[RPC_PROTSEQ_VECTORW]]) CLong;

external (stdcall) RpcServerUseProtseqA(
    argument0 : Pointer[CUChar],
    argument1 : UInt,
    argument2 : RawPointer) CLong;

external (stdcall) RpcServerUseProtseqW(
    argument0 : Pointer[UShort],
    argument1 : UInt,
    argument2 : RawPointer) CLong;

external (stdcall) RpcServerUseProtseqExA(
    argument0 : Pointer[CUChar],
    MaxCalls : UInt,
    argument2 : RawPointer,
    argument3 : PRPC_POLICY) CLong;

external (stdcall) RpcServerUseProtseqExW(
    argument0 : Pointer[UShort],
    argument1 : UInt,
    argument2 : RawPointer,
    argument3 : PRPC_POLICY) CLong;

external (stdcall) RpcServerUseProtseqEpA(
    argument0 : Pointer[CUChar],
    argument1 : UInt,
    argument2 : Pointer[CUChar],
    argument3 : RawPointer) CLong;

external (stdcall) RpcServerUseProtseqEpExA(
    argument0 : Pointer[CUChar],
    argument1 : UInt,
    argument2 : Pointer[CUChar],
    argument3 : RawPointer,
    argument4 : PRPC_POLICY) CLong;

external (stdcall) RpcServerUseProtseqEpW(
    argument0 : Pointer[UShort],
    argument1 : UInt,
    argument2 : Pointer[UShort],
    argument3 : RawPointer) CLong;

external (stdcall) RpcServerUseProtseqEpExW(
    argument0 : Pointer[UShort],
    argument1 : UInt,
    argument2 : Pointer[UShort],
    argument3 : RawPointer,
    argument4 : PRPC_POLICY) CLong;

external (stdcall) RpcServerUseProtseqIfA(
    argument0 : Pointer[CUChar],
    argument1 : UInt,
    argument2 : RPC_IF_HANDLE,
    argument3 : RawPointer) CLong;

external (stdcall) RpcServerUseProtseqIfExA(
    argument0 : Pointer[CUChar],
    argument1 : UInt,
    argument2 : RPC_IF_HANDLE,
    argument3 : RawPointer,
    argument4 : PRPC_POLICY) CLong;

external (stdcall) RpcServerUseProtseqIfW(
    argument0 : Pointer[UShort],
    argument1 : UInt,
    argument2 : RPC_IF_HANDLE,
    argument3 : RawPointer) CLong;

external (stdcall) RpcServerUseProtseqIfExW(
    argument0 : Pointer[UShort],
    argument1 : UInt,
    argument2 : RPC_IF_HANDLE,
    argument3 : RawPointer,
    argument4 : PRPC_POLICY) CLong;

external (stdcall) RpcMgmtInqServerPrincNameA(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : CULong,
    argument2 : Pointer[Pointer[CUChar]]) CLong;

external (stdcall) RpcMgmtInqServerPrincNameW(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : CULong,
    argument2 : Pointer[Pointer[UShort]]) CLong;

external (stdcall) RpcServerInqDefaultPrincNameA(
    argument0 : CULong,
    argument1 : Pointer[Pointer[CUChar]]) CLong;

external (stdcall) RpcServerInqDefaultPrincNameW(
    argument0 : CULong,
    argument1 : Pointer[Pointer[UShort]]) CLong;

external (stdcall) RpcNsBindingInqEntryNameA(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : CULong,
    argument2 : Pointer[Pointer[CUChar]]) CLong;

external (stdcall) RpcNsBindingInqEntryNameW(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : CULong,
    argument2 : Pointer[Pointer[UShort]]) CLong;

external (stdcall) RpcBindingInqAuthClientA(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[RPC_AUTHZ_HANDLE],
    argument2 : Pointer[Pointer[CUChar]],
    argument3 : Pointer[CULong],
    argument4 : Pointer[CULong],
    argument5 : Pointer[CULong]) CLong;

external (stdcall) RpcBindingInqAuthClientW(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[RPC_AUTHZ_HANDLE],
    argument2 : Pointer[Pointer[UShort]],
    argument3 : Pointer[CULong],
    argument4 : Pointer[CULong],
    argument5 : Pointer[CULong]) CLong;

external (stdcall) RpcBindingInqAuthInfoA(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : Pointer[CULong],
    argument3 : Pointer[CULong],
    argument4 : Pointer[RPC_AUTH_IDENTITY_HANDLE],
    argument5 : Pointer[CULong]) CLong;

external (stdcall) RpcBindingInqAuthInfoW(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[Pointer[UShort]],
    argument2 : Pointer[CULong],
    argument3 : Pointer[CULong],
    argument4 : Pointer[RPC_AUTH_IDENTITY_HANDLE],
    argument5 : Pointer[CULong]) CLong;

external (stdcall) RpcBindingSetAuthInfoA(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[CUChar],
    argument2 : CULong,
    argument3 : CULong,
    argument4 : RPC_AUTH_IDENTITY_HANDLE,
    argument5 : CULong) CLong;

external (stdcall) RpcBindingSetAuthInfoExA(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[CUChar],
    argument2 : CULong,
    argument3 : CULong,
    argument4 : RPC_AUTH_IDENTITY_HANDLE,
    argument5 : CULong,
    argument6 : Pointer[RPC_SECURITY_QOS]) CLong;

external (stdcall) RpcBindingSetAuthInfoW(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[UShort],
    argument2 : CULong,
    argument3 : CULong,
    argument4 : RPC_AUTH_IDENTITY_HANDLE,
    argument5 : CULong) CLong;

external (stdcall) RpcBindingSetAuthInfoExW(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[UShort],
    argument2 : CULong,
    argument3 : CULong,
    argument4 : RPC_AUTH_IDENTITY_HANDLE,
    argument5 : CULong,
    argument6 : Pointer[RPC_SECURITY_QOS]) CLong;

external (stdcall) RpcBindingInqAuthInfoExA(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : Pointer[CULong],
    argument3 : Pointer[CULong],
    argument4 : Pointer[RPC_AUTH_IDENTITY_HANDLE],
    argument5 : Pointer[CULong],
    argument6 : CULong,
    argument7 : Pointer[RPC_SECURITY_QOS]) CLong;

external (stdcall) RpcBindingInqAuthInfoExW(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[Pointer[UShort]],
    argument2 : Pointer[CULong],
    argument3 : Pointer[CULong],
    argument4 : Pointer[RPC_AUTH_IDENTITY_HANDLE],
    argument5 : Pointer[CULong],
    argument6 : CULong,
    argument7 : Pointer[RPC_SECURITY_QOS]) CLong;

alias RPC_AUTH_KEY_RETRIEVAL_FN = StdCallCodePointer[(RawPointer,Pointer[UShort],CULong,Pointer[RawPointer],Pointer[CLong]),()];

external (stdcall) RpcServerRegisterAuthInfoA(
    argument0 : Pointer[CUChar],
    argument1 : CULong,
    argument2 : RPC_AUTH_KEY_RETRIEVAL_FN,
    argument3 : RawPointer) CLong;

external (stdcall) RpcServerRegisterAuthInfoW(
    argument0 : Pointer[UShort],
    argument1 : CULong,
    argument2 : RPC_AUTH_KEY_RETRIEVAL_FN,
    argument3 : RawPointer) CLong;

external (stdcall) UuidToStringA(
    argument0 : Pointer[UUID],
    argument1 : Pointer[Pointer[CUChar]]) CLong;

external (stdcall) UuidFromStringA(
    argument0 : Pointer[CUChar],
    argument1 : Pointer[UUID]) CLong;

external (stdcall) UuidToStringW(
    argument0 : Pointer[UUID],
    argument1 : Pointer[Pointer[UShort]]) CLong;

external (stdcall) UuidFromStringW(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UUID]) CLong;

external (stdcall) RpcEpRegisterNoReplaceA(
    argument0 : RPC_IF_HANDLE,
    argument1 : Pointer[RPC_BINDING_VECTOR],
    argument2 : Pointer[UUID_VECTOR],
    argument3 : Pointer[CUChar]) CLong;

external (stdcall) RpcEpRegisterNoReplaceW(
    argument0 : RPC_IF_HANDLE,
    argument1 : Pointer[RPC_BINDING_VECTOR],
    argument2 : Pointer[UUID_VECTOR],
    argument3 : Pointer[UShort]) CLong;

external (stdcall) RpcEpRegisterA(
    argument0 : RPC_IF_HANDLE,
    argument1 : Pointer[RPC_BINDING_VECTOR],
    argument2 : Pointer[UUID_VECTOR],
    argument3 : Pointer[CUChar]) CLong;

external (stdcall) RpcEpRegisterW(
    argument0 : RPC_IF_HANDLE,
    argument1 : Pointer[RPC_BINDING_VECTOR],
    argument2 : Pointer[UUID_VECTOR],
    argument3 : Pointer[UShort]) CLong;

external (stdcall) DceErrorInqTextA(
    argument0 : CLong,
    argument1 : Pointer[CUChar]) CLong;

external (stdcall) DceErrorInqTextW(
    argument0 : CLong,
    argument1 : Pointer[UShort]) CLong;

external (stdcall) RpcMgmtEpEltInqNextA(
    argument0 : RPC_EP_INQ_HANDLE,
    argument1 : Pointer[RPC_IF_ID],
    argument2 : Pointer[RPC_BINDING_HANDLE],
    argument3 : Pointer[UUID],
    argument4 : Pointer[Pointer[CUChar]]) CLong;

external (stdcall) RpcMgmtEpEltInqNextW(
    argument0 : RPC_EP_INQ_HANDLE,
    argument1 : Pointer[RPC_IF_ID],
    argument2 : Pointer[RPC_BINDING_HANDLE],
    argument3 : Pointer[UUID],
    argument4 : Pointer[Pointer[UShort]]) CLong;

external (stdcall) RpcBindingCopy(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[RPC_BINDING_HANDLE]) CLong;

external (stdcall) RpcBindingFree(
    argument0 : Pointer[RPC_BINDING_HANDLE]) CLong;

external (stdcall) RpcBindingInqObject(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[UUID]) CLong;

external (stdcall) RpcBindingReset(
    argument0 : RPC_BINDING_HANDLE) CLong;

external (stdcall) RpcBindingSetObject(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[UUID]) CLong;

external (stdcall) RpcMgmtInqDefaultProtectLevel(
    argument0 : CULong,
    argument1 : Pointer[CULong]) CLong;

external (stdcall) RpcBindingVectorFree(
    argument0 : Pointer[Pointer[RPC_BINDING_VECTOR]]) CLong;

external (stdcall) RpcIfInqId(
    argument0 : RPC_IF_HANDLE,
    argument1 : Pointer[RPC_IF_ID]) CLong;

external (stdcall) RpcMgmtInqComTimeout(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[UInt]) CLong;

external (stdcall) RpcMgmtSetComTimeout(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : UInt) CLong;

external (stdcall) RpcMgmtSetCancelTimeout(
    Timeout : CLong) CLong;

external (stdcall) RpcObjectInqType(
    argument0 : Pointer[UUID],
    argument1 : Pointer[UUID]) CLong;

external (stdcall) RpcObjectSetInqFn(
    argument0 : StdCallCodePointer[(Pointer[Struct__GUID],Pointer[Struct__GUID],Pointer[CLong]),()]) CLong;

external (stdcall) RpcObjectSetType(
    argument0 : Pointer[UUID],
    argument1 : Pointer[UUID]) CLong;

external (stdcall) RpcServerInqIf(
    argument0 : RPC_IF_HANDLE,
    argument1 : Pointer[UUID],
    argument2 : Pointer[RawPointer]) CLong;

external (stdcall) RpcServerListen(
    argument0 : UInt,
    argument1 : UInt,
    argument2 : UInt) CLong;

external (stdcall) RpcServerRegisterIf(
    argument0 : RPC_IF_HANDLE,
    argument1 : Pointer[UUID],
    argument2 : RawPointer) CLong;

external (stdcall) RpcServerRegisterIfEx(
    argument0 : RPC_IF_HANDLE,
    argument1 : Pointer[UUID],
    argument2 : RawPointer,
    argument3 : UInt,
    argument4 : UInt,
    argument5 : CCodePointer[(RawPointer,RawPointer),(CLong)]) CLong;

external (stdcall) RpcServerRegisterIf2(
    argument0 : RPC_IF_HANDLE,
    argument1 : Pointer[UUID],
    argument2 : RawPointer,
    argument3 : UInt,
    argument4 : UInt,
    argument5 : UInt,
    argument6 : CCodePointer[(RawPointer,RawPointer),(CLong)]) CLong;

external (stdcall) RpcServerUnregisterIf(
    argument0 : RPC_IF_HANDLE,
    argument1 : Pointer[UUID],
    argument2 : UInt) CLong;

external (stdcall) RpcServerUseAllProtseqs(
    argument0 : UInt,
    argument1 : RawPointer) CLong;

external (stdcall) RpcServerUseAllProtseqsEx(
    argument0 : UInt,
    argument1 : RawPointer,
    argument2 : PRPC_POLICY) CLong;

external (stdcall) RpcServerUseAllProtseqsIf(
    argument0 : UInt,
    argument1 : RPC_IF_HANDLE,
    argument2 : RawPointer) CLong;

external (stdcall) RpcServerUseAllProtseqsIfEx(
    argument0 : UInt,
    argument1 : RPC_IF_HANDLE,
    argument2 : RawPointer,
    argument3 : PRPC_POLICY) CLong;

external (stdcall) RpcMgmtStatsVectorFree(
    argument0 : Pointer[Pointer[RPC_STATS_VECTOR]]) CLong;

external (stdcall) RpcMgmtInqStats(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[Pointer[RPC_STATS_VECTOR]]) CLong;

external (stdcall) RpcMgmtIsServerListening(
    argument0 : RPC_BINDING_HANDLE) CLong;

external (stdcall) RpcMgmtStopServerListening(
    argument0 : RPC_BINDING_HANDLE) CLong;

external (stdcall) RpcMgmtWaitServerListen() CLong;

external (stdcall) RpcMgmtSetServerStackSize(
    argument0 : CULong) CLong;

external (stdcall) RpcSsDontSerializeContext();

external (stdcall) RpcMgmtEnableIdleCleanup() CLong;

external (stdcall) RpcMgmtInqIfIds(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[Pointer[RPC_IF_ID_VECTOR]]) CLong;

external (stdcall) RpcIfIdVectorFree(
    argument0 : Pointer[Pointer[RPC_IF_ID_VECTOR]]) CLong;

external (stdcall) RpcEpResolveBinding(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : RPC_IF_HANDLE) CLong;

external (stdcall) RpcBindingServerFromClient(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[RPC_BINDING_HANDLE]) CLong;

external (stdcall) RpcRaiseException(
    argument0 : CLong);

external (stdcall) RpcTestCancel() CLong;

external (stdcall) RpcCancelThread(
    argument0 : RawPointer) CLong;

external (stdcall) UuidCreate(
    argument0 : Pointer[UUID]) CLong;

external (stdcall) UuidCompare(
    argument0 : Pointer[UUID],
    argument1 : Pointer[UUID],
    argument2 : Pointer[CLong]) Int;

external (stdcall) UuidCreateNil(
    argument0 : Pointer[UUID]) CLong;

external (stdcall) UuidEqual(
    argument0 : Pointer[UUID],
    argument1 : Pointer[UUID],
    argument2 : Pointer[CLong]) Int;

external (stdcall) UuidHash(
    argument0 : Pointer[UUID],
    argument1 : Pointer[CLong]) UShort;

external (stdcall) UuidIsNil(
    argument0 : Pointer[UUID],
    argument1 : Pointer[CLong]) Int;

external (stdcall) RpcEpUnregister(
    argument0 : RPC_IF_HANDLE,
    argument1 : Pointer[RPC_BINDING_VECTOR],
    argument2 : Pointer[UUID_VECTOR]) CLong;

external (stdcall) RpcMgmtEpEltInqBegin(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : CULong,
    argument2 : Pointer[RPC_IF_ID],
    argument3 : CULong,
    argument4 : Pointer[UUID],
    argument5 : Pointer[RPC_EP_INQ_HANDLE]) CLong;

external (stdcall) RpcMgmtEpEltInqDone(
    argument0 : Pointer[RPC_EP_INQ_HANDLE]) CLong;

external (stdcall) RpcMgmtEpUnregister(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[RPC_IF_ID],
    argument2 : RPC_BINDING_HANDLE,
    argument3 : Pointer[UUID]) CLong;

external (stdcall) RpcMgmtSetAuthorizationFn(
    argument0 : RPC_MGMT_AUTHORIZATION_FN) CLong;

external (stdcall) RpcMgmtInqParameter(
    argument0 : UInt,
    argument1 : Pointer[CULong]) CLong;

external (stdcall) RpcMgmtSetParameter(
    argument0 : UInt,
    argument1 : CULong) CLong;

external (stdcall) RpcMgmtBindingInqParameter(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : UInt,
    argument2 : Pointer[CULong]) CLong;

external (stdcall) RpcMgmtBindingSetParameter(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : UInt,
    argument2 : CULong) CLong;

record Struct__RPC_VERSION (
    MajorVersion : UShort,
    MinorVersion : UShort,
);

alias RPC_VERSION = Struct__RPC_VERSION;

record Struct__RPC_SYNTAX_IDENTIFIER (
    SyntaxGUID : GUID,
    SyntaxVersion : RPC_VERSION,
);

alias RPC_SYNTAX_IDENTIFIER = Struct__RPC_SYNTAX_IDENTIFIER;

alias PRPC_SYNTAX_IDENTIFIER = Pointer[Struct__RPC_SYNTAX_IDENTIFIER];

record Struct__RPC_MESSAGE (
    Handle : HANDLE,
    DataRepresentation : CULong,
    Buffer : RawPointer,
    BufferLength : UInt,
    ProcNum : UInt,
    TransferSyntax : PRPC_SYNTAX_IDENTIFIER,
    RpcInterfaceInformation : RawPointer,
    ReservedForRuntime : RawPointer,
    ManagerEpv : RawPointer,
    ImportContext : RawPointer,
    RpcFlags : CULong,
);

alias RPC_MESSAGE = Struct__RPC_MESSAGE;

alias PRPC_MESSAGE = Pointer[Struct__RPC_MESSAGE];

alias RPC_DISPATCH_FUNCTION = StdCallCodePointer[(Pointer[Struct__RPC_MESSAGE]),()];

record UnnamedStruct23 (
    DispatchTableCount : UInt,
    DispatchTable : Pointer[RPC_DISPATCH_FUNCTION],
    Reserved : Int,
);

alias RPC_DISPATCH_TABLE = UnnamedStruct23;

alias PRPC_DISPATCH_TABLE = Pointer[UnnamedStruct23];

record Struct__RPC_PROTSEQ_ENDPOINT (
    RpcProtocolSequence : Pointer[CUChar],
    Endpoint : Pointer[CUChar],
);

alias RPC_PROTSEQ_ENDPOINT = Struct__RPC_PROTSEQ_ENDPOINT;

alias PRPC_PROTSEQ_ENDPOINT = Pointer[Struct__RPC_PROTSEQ_ENDPOINT];

record Struct__RPC_SERVER_INTERFACE (
    Length : UInt,
    InterfaceId : RPC_SYNTAX_IDENTIFIER,
    TransferSyntax : RPC_SYNTAX_IDENTIFIER,
    DispatchTable : PRPC_DISPATCH_TABLE,
    RpcProtseqEndpointCount : UInt,
    RpcProtseqEndpoint : PRPC_PROTSEQ_ENDPOINT,
    DefaultManagerEpv : RawPointer,
    InterpreterInfo : RawPointer,
);

alias RPC_SERVER_INTERFACE = Struct__RPC_SERVER_INTERFACE;

alias PRPC_SERVER_INTERFACE = Pointer[Struct__RPC_SERVER_INTERFACE];

record Struct__RPC_CLIENT_INTERFACE (
    Length : UInt,
    InterfaceId : RPC_SYNTAX_IDENTIFIER,
    TransferSyntax : RPC_SYNTAX_IDENTIFIER,
    DispatchTable : PRPC_DISPATCH_TABLE,
    RpcProtseqEndpointCount : UInt,
    RpcProtseqEndpoint : PRPC_PROTSEQ_ENDPOINT,
    Reserved : CULong,
    InterpreterInfo : RawPointer,
);

alias RPC_CLIENT_INTERFACE = Struct__RPC_CLIENT_INTERFACE;

alias PRPC_CLIENT_INTERFACE = Pointer[Struct__RPC_CLIENT_INTERFACE];

alias I_RPC_MUTEX = RawPointer;

record Struct__RPC_TRANSFER_SYNTAX (
    Uuid : GUID,
    VersMajor : UShort,
    VersMinor : UShort,
);

alias RPC_TRANSFER_SYNTAX = Struct__RPC_TRANSFER_SYNTAX;

alias RPC_BLOCKING_FN = CCodePointer[(RawPointer,RawPointer,RawPointer),(CLong)];

external (stdcall) I_RpcGetBuffer(
    argument0 : Pointer[RPC_MESSAGE]) CLong;

external (stdcall) I_RpcSendReceive(
    argument0 : Pointer[RPC_MESSAGE]) CLong;

external (stdcall) I_RpcSend(
    argument0 : Pointer[RPC_MESSAGE]) CLong;

external (stdcall) I_RpcFreeBuffer(
    argument0 : Pointer[RPC_MESSAGE]) CLong;

external (stdcall) I_RpcRequestMutex(
    argument0 : Pointer[I_RPC_MUTEX]);

external (stdcall) I_RpcClearMutex(
    argument0 : I_RPC_MUTEX);

external (stdcall) I_RpcDeleteMutex(
    argument0 : I_RPC_MUTEX);

external (stdcall) I_RpcAllocate(
    argument0 : UInt) RawPointer;

external (stdcall) I_RpcFree(
    argument0 : RawPointer);

external (stdcall) I_RpcPauseExecution(
    argument0 : CULong);

alias PRPC_RUNDOWN = StdCallCodePointer[(RawPointer),()];

external (stdcall) I_RpcMonitorAssociation(
    argument0 : HANDLE,
    argument1 : PRPC_RUNDOWN,
    argument2 : RawPointer) CLong;

external (stdcall) I_RpcStopMonitorAssociation(
    argument0 : HANDLE) CLong;

external (stdcall) I_RpcGetCurrentCallHandle() HANDLE;

external (stdcall) I_RpcGetAssociationContext(
    argument0 : Pointer[RawPointer]) CLong;

external (stdcall) I_RpcSetAssociationContext(
    argument0 : RawPointer) CLong;

external (stdcall) I_RpcNsBindingSetEntryName(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : Pointer[UShort]) CLong;

external (stdcall) I_RpcBindingInqDynamicEndpoint(
    argument0 : HANDLE,
    argument1 : Pointer[Pointer[UShort]]) CLong;

external (stdcall) I_RpcBindingInqTransportType(
    argument0 : HANDLE,
    argument1 : Pointer[UInt]) CLong;

external (stdcall) I_RpcIfInqTransferSyntaxes(
    argument0 : HANDLE,
    argument1 : Pointer[RPC_TRANSFER_SYNTAX],
    argument2 : UInt,
    argument3 : Pointer[UInt]) CLong;

external (stdcall) I_UuidCreate(
    argument0 : Pointer[GUID]) CLong;

external (stdcall) I_RpcBindingCopy(
    argument0 : HANDLE,
    argument1 : Pointer[HANDLE]) CLong;

external (stdcall) I_RpcBindingIsClientLocal(
    argument0 : HANDLE,
    argument1 : Pointer[UInt]) CLong;

external (stdcall) I_RpcSsDontSerializeContext();

external (stdcall) I_RpcServerRegisterForwardFunction(
    argument0 : StdCallCodePointer[(Pointer[Struct__GUID],Pointer[Struct__RPC_VERSION],Pointer[Struct__GUID],Pointer[CUChar],Pointer[RawPointer]),(CLong)]) CLong;

external (stdcall) I_RpcConnectionInqSockBuffSize(
    argument0 : Pointer[CULong],
    argument1 : Pointer[CULong]) CLong;

external (stdcall) I_RpcConnectionSetSockBuffSize(
    argument0 : CULong,
    argument1 : CULong) CLong;

external (stdcall) I_RpcBindingSetAsync(
    argument0 : HANDLE,
    argument1 : RPC_BLOCKING_FN) CLong;

external (stdcall) I_RpcAsyncSendReceive(
    argument0 : Pointer[RPC_MESSAGE],
    argument1 : RawPointer) CLong;

external (stdcall) I_RpcGetThreadWindowHandle(
    argument0 : Pointer[RawPointer]) CLong;

external (stdcall) I_RpcServerThreadPauseListening() CLong;

external (stdcall) I_RpcServerThreadContinueListening() CLong;

external (stdcall) I_RpcServerUnregisterEndpointA(
    argument0 : Pointer[CUChar],
    argument1 : Pointer[CUChar]) CLong;

external (stdcall) I_RpcServerUnregisterEndpointW(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort]) CLong;

alias RPC_NS_HANDLE = RawPointer;

external (stdcall) RpcNsBindingExportA(
    argument0 : CULong,
    argument1 : Pointer[CUChar],
    argument2 : RPC_IF_HANDLE,
    argument3 : Pointer[RPC_BINDING_VECTOR],
    argument4 : Pointer[UUID_VECTOR]) CLong;

external (stdcall) RpcNsBindingUnexportA(
    argument0 : CULong,
    argument1 : Pointer[CUChar],
    argument2 : RPC_IF_HANDLE,
    argument3 : Pointer[UUID_VECTOR]) CLong;

external (stdcall) RpcNsBindingLookupBeginA(
    argument0 : CULong,
    argument1 : Pointer[CUChar],
    argument2 : RPC_IF_HANDLE,
    argument3 : Pointer[UUID],
    argument4 : CULong,
    argument5 : Pointer[RPC_NS_HANDLE]) CLong;

external (stdcall) RpcNsBindingLookupNext(
    argument0 : RPC_NS_HANDLE,
    argument1 : Pointer[Pointer[RPC_BINDING_VECTOR]]) CLong;

external (stdcall) RpcNsBindingLookupDone(
    argument0 : Pointer[RPC_NS_HANDLE]) CLong;

external (stdcall) RpcNsGroupDeleteA(
    argument0 : CULong,
    argument1 : Pointer[CUChar]) CLong;

external (stdcall) RpcNsGroupMbrAddA(
    argument0 : CULong,
    argument1 : Pointer[CUChar],
    argument2 : CULong,
    argument3 : Pointer[CUChar]) CLong;

external (stdcall) RpcNsGroupMbrRemoveA(
    argument0 : CULong,
    argument1 : Pointer[CUChar],
    argument2 : CULong,
    argument3 : Pointer[CUChar]) CLong;

external (stdcall) RpcNsGroupMbrInqBeginA(
    argument0 : CULong,
    argument1 : Pointer[CUChar],
    argument2 : CULong,
    argument3 : Pointer[RPC_NS_HANDLE]) CLong;

external (stdcall) RpcNsGroupMbrInqNextA(
    argument0 : RPC_NS_HANDLE,
    argument1 : Pointer[Pointer[CUChar]]) CLong;

external (stdcall) RpcNsGroupMbrInqDone(
    argument0 : Pointer[RPC_NS_HANDLE]) CLong;

external (stdcall) RpcNsProfileDeleteA(
    argument0 : CULong,
    argument1 : Pointer[CUChar]) CLong;

external (stdcall) RpcNsProfileEltAddA(
    argument0 : CULong,
    argument1 : Pointer[CUChar],
    argument2 : Pointer[RPC_IF_ID],
    argument3 : CULong,
    argument4 : Pointer[CUChar],
    argument5 : CULong,
    argument6 : Pointer[CUChar]) CLong;

external (stdcall) RpcNsProfileEltRemoveA(
    argument0 : CULong,
    argument1 : Pointer[CUChar],
    argument2 : Pointer[RPC_IF_ID],
    argument3 : CULong,
    argument4 : Pointer[CUChar]) CLong;

external (stdcall) RpcNsProfileEltInqBeginA(
    argument0 : CULong,
    argument1 : Pointer[CUChar],
    argument2 : CULong,
    argument3 : Pointer[RPC_IF_ID],
    argument4 : CULong,
    argument5 : CULong,
    argument6 : Pointer[CUChar],
    argument7 : Pointer[RPC_NS_HANDLE]) CLong;

external (stdcall) RpcNsProfileEltInqNextA(
    argument0 : RPC_NS_HANDLE,
    argument1 : Pointer[RPC_IF_ID],
    argument2 : Pointer[Pointer[CUChar]],
    argument3 : Pointer[CULong],
    argument4 : Pointer[Pointer[CUChar]]) CLong;

external (stdcall) RpcNsProfileEltInqDone(
    argument0 : Pointer[RPC_NS_HANDLE]) CLong;

external (stdcall) RpcNsEntryObjectInqNext(
    argument0 : RPC_NS_HANDLE,
    argument1 : Pointer[UUID]) CLong;

external (stdcall) RpcNsEntryObjectInqDone(
    argument0 : Pointer[RPC_NS_HANDLE]) CLong;

external (stdcall) RpcNsEntryExpandNameA(
    argument0 : CULong,
    argument1 : Pointer[CUChar],
    argument2 : Pointer[Pointer[CUChar]]) CLong;

external (stdcall) RpcNsMgmtBindingUnexportA(
    argument0 : CULong,
    argument1 : Pointer[CUChar],
    argument2 : Pointer[RPC_IF_ID],
    argument3 : CULong,
    argument4 : Pointer[UUID_VECTOR]) CLong;

external (stdcall) RpcNsMgmtEntryCreateA(
    argument0 : CULong,
    argument1 : Pointer[CUChar]) CLong;

external (stdcall) RpcNsMgmtEntryDeleteA(
    argument0 : CULong,
    argument1 : Pointer[CUChar]) CLong;

external (stdcall) RpcNsMgmtEntryInqIfIdsA(
    argument0 : CULong,
    argument1 : Pointer[CUChar],
    argument2 : Pointer[Pointer[RPC_IF_ID_VECTOR]]) CLong;

external (stdcall) RpcNsMgmtHandleSetExpAge(
    argument0 : RPC_NS_HANDLE,
    argument1 : CULong) CLong;

external (stdcall) RpcNsMgmtInqExpAge(
    argument0 : Pointer[CULong]) CLong;

external (stdcall) RpcNsMgmtSetExpAge(
    argument0 : CULong) CLong;

external (stdcall) RpcNsBindingImportNext(
    argument0 : RPC_NS_HANDLE,
    argument1 : Pointer[RPC_BINDING_HANDLE]) CLong;

external (stdcall) RpcNsBindingImportDone(
    argument0 : Pointer[RPC_NS_HANDLE]) CLong;

external (stdcall) RpcNsBindingSelect(
    argument0 : Pointer[RPC_BINDING_VECTOR],
    argument1 : Pointer[RPC_BINDING_HANDLE]) CLong;

external (stdcall) RpcNsEntryObjectInqBeginA(
    argument0 : CULong,
    argument1 : Pointer[CUChar],
    argument2 : Pointer[RPC_NS_HANDLE]) CLong;

external (stdcall) RpcNsBindingImportBeginA(
    argument0 : CULong,
    argument1 : Pointer[CUChar],
    argument2 : RPC_IF_HANDLE,
    argument3 : Pointer[UUID],
    argument4 : Pointer[RPC_NS_HANDLE]) CLong;

external (stdcall) RpcNsBindingExportW(
    argument0 : CULong,
    argument1 : Pointer[UShort],
    argument2 : RPC_IF_HANDLE,
    argument3 : Pointer[RPC_BINDING_VECTOR],
    argument4 : Pointer[UUID_VECTOR]) CLong;

external (stdcall) RpcNsBindingUnexportW(
    argument0 : CULong,
    argument1 : Pointer[UShort],
    argument2 : RPC_IF_HANDLE,
    argument3 : Pointer[UUID_VECTOR]) CLong;

external (stdcall) RpcNsBindingLookupBeginW(
    argument0 : CULong,
    argument1 : Pointer[UShort],
    argument2 : RPC_IF_HANDLE,
    argument3 : Pointer[UUID],
    argument4 : CULong,
    argument5 : Pointer[RPC_NS_HANDLE]) CLong;

external (stdcall) RpcNsGroupDeleteW(
    argument0 : CULong,
    argument1 : Pointer[UShort]) CLong;

external (stdcall) RpcNsGroupMbrAddW(
    argument0 : CULong,
    argument1 : Pointer[UShort],
    argument2 : CULong,
    argument3 : Pointer[UShort]) CLong;

external (stdcall) RpcNsGroupMbrRemoveW(
    argument0 : CULong,
    argument1 : Pointer[UShort],
    argument2 : CULong,
    argument3 : Pointer[UShort]) CLong;

external (stdcall) RpcNsGroupMbrInqBeginW(
    argument0 : CULong,
    argument1 : Pointer[UShort],
    argument2 : CULong,
    argument3 : Pointer[RPC_NS_HANDLE]) CLong;

external (stdcall) RpcNsGroupMbrInqNextW(
    argument0 : RPC_NS_HANDLE,
    argument1 : Pointer[Pointer[UShort]]) CLong;

external (stdcall) RpcNsProfileDeleteW(
    argument0 : CULong,
    argument1 : Pointer[UShort]) CLong;

external (stdcall) RpcNsProfileEltAddW(
    argument0 : CULong,
    argument1 : Pointer[UShort],
    argument2 : Pointer[RPC_IF_ID],
    argument3 : CULong,
    argument4 : Pointer[UShort],
    argument5 : CULong,
    argument6 : Pointer[UShort]) CLong;

external (stdcall) RpcNsProfileEltRemoveW(
    argument0 : CULong,
    argument1 : Pointer[UShort],
    argument2 : Pointer[RPC_IF_ID],
    argument3 : CULong,
    argument4 : Pointer[UShort]) CLong;

external (stdcall) RpcNsProfileEltInqBeginW(
    argument0 : CULong,
    argument1 : Pointer[UShort],
    argument2 : CULong,
    argument3 : Pointer[RPC_IF_ID],
    argument4 : CULong,
    argument5 : CULong,
    argument6 : Pointer[UShort],
    argument7 : Pointer[RPC_NS_HANDLE]) CLong;

external (stdcall) RpcNsProfileEltInqNextW(
    argument0 : RPC_NS_HANDLE,
    argument1 : Pointer[RPC_IF_ID],
    argument2 : Pointer[Pointer[UShort]],
    argument3 : Pointer[CULong],
    argument4 : Pointer[Pointer[UShort]]) CLong;

external (stdcall) RpcNsEntryObjectInqBeginW(
    argument0 : CULong,
    argument1 : Pointer[UShort],
    argument2 : Pointer[RPC_NS_HANDLE]) CLong;

external (stdcall) RpcNsEntryExpandNameW(
    argument0 : CULong,
    argument1 : Pointer[UShort],
    argument2 : Pointer[Pointer[UShort]]) CLong;

external (stdcall) RpcNsMgmtBindingUnexportW(
    argument0 : CULong,
    argument1 : Pointer[UShort],
    argument2 : Pointer[RPC_IF_ID],
    argument3 : CULong,
    argument4 : Pointer[UUID_VECTOR]) CLong;

external (stdcall) RpcNsMgmtEntryCreateW(
    argument0 : CULong,
    argument1 : Pointer[UShort]) CLong;

external (stdcall) RpcNsMgmtEntryDeleteW(
    argument0 : CULong,
    argument1 : Pointer[UShort]) CLong;

external (stdcall) RpcNsMgmtEntryInqIfIdsW(
    argument0 : CULong,
    argument1 : UShort,
    argument2 : Pointer[Pointer[RPC_IF_ID_VECTOR]]) CLong;

external (stdcall) RpcNsBindingImportBeginW(
    argument0 : CULong,
    argument1 : Pointer[UShort],
    argument2 : RPC_IF_HANDLE,
    argument3 : Pointer[UUID],
    argument4 : Pointer[RPC_NS_HANDLE]) CLong;

external (stdcall) RpcImpersonateClient(
    argument0 : RPC_BINDING_HANDLE) CLong;

external (stdcall) RpcRevertToSelf() CLong;

external (stdcall) I_RpcMapWin32Status(
    argument0 : CLong) CLong;

alias FILEOP_FLAGS = UShort;

alias PRINTEROP_FLAGS = UShort;

record Struct__AppBarData (
    cbSize : CULong,
    hWnd : HWND,
    uCallbackMessage : UInt,
    uEdge : UInt,
    rc : RECT,
    lParam : CLong,
);

alias APPBARDATA = Struct__AppBarData;

alias PAPPBARDATA = Pointer[Struct__AppBarData];

record Struct_HDROP__ (
    i : Int,
);

alias HDROP = Pointer[Struct_HDROP__];

record Struct__NOTIFYICONDATAA (
    cbSize : CULong,
    hWnd : HWND,
    uID : UInt,
    uFlags : UInt,
    uCallbackMessage : UInt,
    hIcon : HICON,
    szTip : Array[CChar,64],
);

alias NOTIFYICONDATAA = Struct__NOTIFYICONDATAA;

alias PNOTIFYICONDATAA = Pointer[Struct__NOTIFYICONDATAA];

record Struct__NOTIFYICONDATAW (
    cbSize : CULong,
    hWnd : HWND,
    uID : UInt,
    uFlags : UInt,
    uCallbackMessage : UInt,
    hIcon : HICON,
    szTip : Array[UShort,64],
);

alias NOTIFYICONDATAW = Struct__NOTIFYICONDATAW;

alias PNOTIFYICONDATAW = Pointer[Struct__NOTIFYICONDATAW];

record Struct__SHELLEXECUTEINFOA (
    cbSize : CULong,
    fMask : CULong,
    hwnd : HWND,
    lpVerb : LPCSTR,
    lpFile : LPCSTR,
    lpParameters : LPCSTR,
    lpDirectory : LPCSTR,
    nShow : Int,
    hInstApp : HINSTANCE,
    lpIDList : PVOID,
    lpClass : LPCSTR,
    hkeyClass : HKEY,
    dwHotKey : CULong,
    hIcon : HANDLE,
    hProcess : HANDLE,
);

alias SHELLEXECUTEINFOA = Struct__SHELLEXECUTEINFOA;

alias LPSHELLEXECUTEINFOA = Pointer[Struct__SHELLEXECUTEINFOA];

record Struct__SHELLEXECUTEINFOW (
    cbSize : CULong,
    fMask : CULong,
    hwnd : HWND,
    lpVerb : LPCWSTR,
    lpFile : LPCWSTR,
    lpParameters : LPCWSTR,
    lpDirectory : LPCWSTR,
    nShow : Int,
    hInstApp : HINSTANCE,
    lpIDList : PVOID,
    lpClass : LPCWSTR,
    hkeyClass : HKEY,
    dwHotKey : CULong,
    hIcon : HANDLE,
    hProcess : HANDLE,
);

alias SHELLEXECUTEINFOW = Struct__SHELLEXECUTEINFOW;

alias LPSHELLEXECUTEINFOW = Pointer[Struct__SHELLEXECUTEINFOW];

record Struct__SHFILEOPSTRUCTA (
    hwnd : HWND,
    wFunc : UInt,
    pFrom : LPCSTR,
    pTo : LPCSTR,
    fFlags : UShort,
    fAnyOperationsAborted : Int,
    hNameMappings : PVOID,
    lpszProgressTitle : LPCSTR,
);

alias SHFILEOPSTRUCTA = Struct__SHFILEOPSTRUCTA;

alias LPSHFILEOPSTRUCTA = Pointer[Struct__SHFILEOPSTRUCTA];

record Struct__SHFILEOPSTRUCTW (
    hwnd : HWND,
    wFunc : UInt,
    pFrom : LPCWSTR,
    pTo : LPCWSTR,
    fFlags : UShort,
    fAnyOperationsAborted : Int,
    hNameMappings : PVOID,
    lpszProgressTitle : LPCWSTR,
);

alias SHFILEOPSTRUCTW = Struct__SHFILEOPSTRUCTW;

alias LPSHFILEOPSTRUCTW = Pointer[Struct__SHFILEOPSTRUCTW];

record Struct__SHFILEINFOA (
    hIcon : HICON,
    iIcon : Int,
    dwAttributes : CULong,
    szDisplayName : Array[CChar,260],
    szTypeName : Array[CChar,80],
);

alias SHFILEINFOA = Struct__SHFILEINFOA;

record Struct__SHFILEINFOW (
    hIcon : HICON,
    iIcon : Int,
    dwAttributes : CULong,
    szDisplayName : Array[UShort,260],
    szTypeName : Array[UShort,80],
);

alias SHFILEINFOW = Struct__SHFILEINFOW;

record Struct__SHQUERYRBINFO (
    cbSize : CULong,
    i64Size : Int64,
    i64NumItems : Int64,
);

alias SHQUERYRBINFO = Struct__SHQUERYRBINFO;

alias LPSHQUERYRBINFO = Pointer[Struct__SHQUERYRBINFO];

external (stdcall) CommandLineToArgvW(
    argument0 : LPCWSTR,
    argument1 : Pointer[Int]) Pointer[LPWSTR];

external (stdcall) DragAcceptFiles(
    argument0 : HWND,
    argument1 : Int);

external (stdcall) DragFinish(
    argument0 : HDROP);

external (stdcall) DragQueryFileA(
    argument0 : HDROP,
    argument1 : UInt,
    argument2 : LPSTR,
    argument3 : UInt) UInt;

external (stdcall) DragQueryFileW(
    argument0 : HDROP,
    argument1 : UInt,
    argument2 : LPWSTR,
    argument3 : UInt) UInt;

external (stdcall) DragQueryPoint(
    argument0 : HDROP,
    argument1 : LPPOINT) Int;

external (stdcall) DuplicateIcon(
    argument0 : HINSTANCE,
    argument1 : HICON) HICON;

external (stdcall) ExtractAssociatedIconA(
    argument0 : HINSTANCE,
    argument1 : LPCSTR,
    argument2 : PWORD) HICON;

external (stdcall) ExtractAssociatedIconW(
    argument0 : HINSTANCE,
    argument1 : LPCWSTR,
    argument2 : PWORD) HICON;

external (stdcall) ExtractIconA(
    argument0 : HINSTANCE,
    argument1 : LPCSTR,
    argument2 : UInt) HICON;

external (stdcall) ExtractIconW(
    argument0 : HINSTANCE,
    argument1 : LPCWSTR,
    argument2 : UInt) HICON;

external (stdcall) ExtractIconExA(
    argument0 : LPCSTR,
    argument1 : Int,
    argument2 : Pointer[HICON],
    argument3 : Pointer[HICON],
    argument4 : UInt) UInt;

external (stdcall) ExtractIconExW(
    argument0 : LPCWSTR,
    argument1 : Int,
    argument2 : Pointer[HICON],
    argument3 : Pointer[HICON],
    argument4 : UInt) UInt;

external (stdcall) FindExecutableA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : LPSTR) HINSTANCE;

external (stdcall) FindExecutableW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : LPWSTR) HINSTANCE;

external (stdcall) SHAppBarMessage(
    argument0 : CULong,
    argument1 : PAPPBARDATA) UInt;

external (stdcall) Shell_NotifyIconA(
    argument0 : CULong,
    argument1 : PNOTIFYICONDATAA) Int;

external (stdcall) Shell_NotifyIconW(
    argument0 : CULong,
    argument1 : PNOTIFYICONDATAW) Int;

external (stdcall) ShellAboutA(
    argument0 : HWND,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : HICON) Int;

external (stdcall) ShellAboutW(
    argument0 : HWND,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR,
    argument3 : HICON) Int;

external (stdcall) ShellExecuteA(
    argument0 : HWND,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : LPCSTR,
    argument4 : LPCSTR,
    argument5 : Int) HINSTANCE;

external (stdcall) ShellExecuteW(
    argument0 : HWND,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR,
    argument3 : LPCWSTR,
    argument4 : LPCWSTR,
    argument5 : Int) HINSTANCE;

external (stdcall) ShellExecuteExA(
    argument0 : LPSHELLEXECUTEINFOA) Int;

external (stdcall) ShellExecuteExW(
    argument0 : LPSHELLEXECUTEINFOW) Int;

external (stdcall) SHFileOperationA(
    argument0 : LPSHFILEOPSTRUCTA) Int;

external (stdcall) SHFileOperationW(
    argument0 : LPSHFILEOPSTRUCTW) Int;

external (stdcall) SHFreeNameMappings(
    argument0 : HANDLE);

external (stdcall) SHGetFileInfoA(
    argument0 : LPCSTR,
    argument1 : CULong,
    argument2 : Pointer[SHFILEINFOA],
    argument3 : UInt,
    argument4 : UInt) CULong;

external (stdcall) SHGetFileInfoW(
    argument0 : LPCWSTR,
    argument1 : CULong,
    argument2 : Pointer[SHFILEINFOW],
    argument3 : UInt,
    argument4 : UInt) CULong;

external (stdcall) SHQueryRecycleBinA(
    argument0 : LPCSTR,
    argument1 : LPSHQUERYRBINFO) CLong;

external (stdcall) SHQueryRecycleBinW(
    argument0 : LPCWSTR,
    argument1 : LPSHQUERYRBINFO) CLong;

external (stdcall) SHEmptyRecycleBinA(
    argument0 : HWND,
    argument1 : LPCSTR,
    argument2 : CULong) CLong;

external (stdcall) SHEmptyRecycleBinW(
    argument0 : HWND,
    argument1 : LPCWSTR,
    argument2 : CULong) CLong;

alias NOTIFYICONDATA = NOTIFYICONDATAA;

alias PNOTIFYICONDATA = Pointer[NOTIFYICONDATAA];

alias SHELLEXECUTEINFO = SHELLEXECUTEINFOA;

alias LPSHELLEXECUTEINFO = Pointer[SHELLEXECUTEINFOA];

alias SHFILEOPSTRUCT = SHFILEOPSTRUCTA;

alias LPSHFILEOPSTRUCT = Pointer[SHFILEOPSTRUCTA];

alias SHFILEINFO = SHFILEINFOA;

record Struct__PERF_DATA_BLOCK (
    Signature : Array[UShort,4],
    LittleEndian : CULong,
    Version : CULong,
    Revision : CULong,
    TotalByteLength : CULong,
    HeaderLength : CULong,
    NumObjectTypes : CULong,
    DefaultObject : CLong,
    SystemTime : SYSTEMTIME,
    PerfTime : LARGE_INTEGER,
    PerfFreq : LARGE_INTEGER,
    PerfTime100nSec : LARGE_INTEGER,
    SystemNameLength : CULong,
    SystemNameOffset : CULong,
);

alias PERF_DATA_BLOCK = Struct__PERF_DATA_BLOCK;

alias PPERF_DATA_BLOCK = Pointer[Struct__PERF_DATA_BLOCK];

record Struct__PERF_OBJECT_TYPE (
    TotalByteLength : CULong,
    DefinitionLength : CULong,
    HeaderLength : CULong,
    ObjectNameTitleIndex : CULong,
    ObjectNameTitle : LPWSTR,
    ObjectHelpTitleIndex : CULong,
    ObjectHelpTitle : LPWSTR,
    DetailLevel : CULong,
    NumCounters : CULong,
    DefaultCounter : CLong,
    NumInstances : CLong,
    CodePage : CULong,
    PerfTime : LARGE_INTEGER,
    PerfFreq : LARGE_INTEGER,
);

alias PERF_OBJECT_TYPE = Struct__PERF_OBJECT_TYPE;

alias PPERF_OBJECT_TYPE = Pointer[Struct__PERF_OBJECT_TYPE];

record Struct__PERF_COUNTER_DEFINITION (
    ByteLength : CULong,
    CounterNameTitleIndex : CULong,
    CounterNameTitle : LPWSTR,
    CounterHelpTitleIndex : CULong,
    CounterHelpTitle : LPWSTR,
    DefaultScale : CLong,
    DetailLevel : CULong,
    CounterType : CULong,
    CounterSize : CULong,
    CounterOffset : CULong,
);

alias PERF_COUNTER_DEFINITION = Struct__PERF_COUNTER_DEFINITION;

alias PPERF_COUNTER_DEFINITION = Pointer[Struct__PERF_COUNTER_DEFINITION];

record Struct__PERF_INSTANCE_DEFINITION (
    ByteLength : CULong,
    ParentObjectTitleIndex : CULong,
    ParentObjectInstance : CULong,
    UniqueID : CLong,
    NameOffset : CULong,
    NameLength : CULong,
);

alias PERF_INSTANCE_DEFINITION = Struct__PERF_INSTANCE_DEFINITION;

alias PPERF_INSTANCE_DEFINITION = Pointer[Struct__PERF_INSTANCE_DEFINITION];

record Struct__PERF_COUNTER_BLOCK (
    ByteLength : CULong,
);

alias PERF_COUNTER_BLOCK = Struct__PERF_COUNTER_BLOCK;

alias PPERF_COUNTER_BLOCK = Pointer[Struct__PERF_COUNTER_BLOCK];

alias __CDHOOKPROC = StdCallCodePointer[(Pointer[Struct_HWND__],UInt,UInt,CLong),(UInt)];

alias LPCCHOOKPROC = __CDHOOKPROC;

alias LPCFHOOKPROC = __CDHOOKPROC;

alias LPFRHOOKPROC = __CDHOOKPROC;

alias LPOFNHOOKPROC = __CDHOOKPROC;

alias LPPAGEPAINTHOOK = __CDHOOKPROC;

alias LPPAGESETUPHOOK = __CDHOOKPROC;

alias LPSETUPHOOKPROC = __CDHOOKPROC;

alias LPPRINTHOOKPROC = __CDHOOKPROC;

record Struct_tagCHOOSECOLORA (
    lStructSize : CULong,
    hwndOwner : HWND,
    hInstance : HWND,
    rgbResult : CULong,
    lpCustColors : Pointer[CULong],
    Flags : CULong,
    lCustData : CLong,
    lpfnHook : LPCCHOOKPROC,
    lpTemplateName : LPCSTR,
);

alias CHOOSECOLORA = Struct_tagCHOOSECOLORA;

alias LPCHOOSECOLORA = Pointer[Struct_tagCHOOSECOLORA];

record Struct_tagCHOOSECOLORW (
    lStructSize : CULong,
    hwndOwner : HWND,
    hInstance : HWND,
    rgbResult : CULong,
    lpCustColors : Pointer[CULong],
    Flags : CULong,
    lCustData : CLong,
    lpfnHook : LPCCHOOKPROC,
    lpTemplateName : LPCWSTR,
);

alias CHOOSECOLORW = Struct_tagCHOOSECOLORW;

alias LPCHOOSECOLORW = Pointer[Struct_tagCHOOSECOLORW];

record Struct_tagCHOOSEFONTA (
    lStructSize : CULong,
    hwndOwner : HWND,
    hDC : HDC,
    lpLogFont : LPLOGFONTA,
    iPointSize : Int,
    Flags : CULong,
    rgbColors : CULong,
    lCustData : CLong,
    lpfnHook : LPCFHOOKPROC,
    lpTemplateName : LPCSTR,
    hInstance : HINSTANCE,
    lpszStyle : LPSTR,
    nFontType : UShort,
    ___MISSING_ALIGNMENT__ : UShort,
    nSizeMin : Int,
    nSizeMax : Int,
);

alias CHOOSEFONTA = Struct_tagCHOOSEFONTA;

alias LPCHOOSEFONTA = Pointer[Struct_tagCHOOSEFONTA];

record Struct_tagCHOOSEFONTW (
    lStructSize : CULong,
    hwndOwner : HWND,
    hDC : HDC,
    lpLogFont : LPLOGFONTW,
    iPointSize : Int,
    Flags : CULong,
    rgbColors : CULong,
    lCustData : CLong,
    lpfnHook : LPCFHOOKPROC,
    lpTemplateName : LPCWSTR,
    hInstance : HINSTANCE,
    lpszStyle : LPWSTR,
    nFontType : UShort,
    ___MISSING_ALIGNMENT__ : UShort,
    nSizeMin : Int,
    nSizeMax : Int,
);

alias CHOOSEFONTW = Struct_tagCHOOSEFONTW;

alias LPCHOOSEFONTW = Pointer[Struct_tagCHOOSEFONTW];

record Struct_tagDEVNAMES (
    wDriverOffset : UShort,
    wDeviceOffset : UShort,
    wOutputOffset : UShort,
    wDefault : UShort,
);

alias DEVNAMES = Struct_tagDEVNAMES;

alias LPDEVNAMES = Pointer[Struct_tagDEVNAMES];

record UnnamedStruct24 (
    lStructSize : CULong,
    hwndOwner : HWND,
    hInstance : HINSTANCE,
    Flags : CULong,
    lpstrFindWhat : LPSTR,
    lpstrReplaceWith : LPSTR,
    wFindWhatLen : UShort,
    wReplaceWithLen : UShort,
    lCustData : CLong,
    lpfnHook : LPFRHOOKPROC,
    lpTemplateName : LPCSTR,
);

alias FINDREPLACEA = UnnamedStruct24;

alias LPFINDREPLACEA = Pointer[UnnamedStruct24];

record UnnamedStruct25 (
    lStructSize : CULong,
    hwndOwner : HWND,
    hInstance : HINSTANCE,
    Flags : CULong,
    lpstrFindWhat : LPWSTR,
    lpstrReplaceWith : LPWSTR,
    wFindWhatLen : UShort,
    wReplaceWithLen : UShort,
    lCustData : CLong,
    lpfnHook : LPFRHOOKPROC,
    lpTemplateName : LPCWSTR,
);

alias FINDREPLACEW = UnnamedStruct25;

alias LPFINDREPLACEW = Pointer[UnnamedStruct25];

record Struct_tagOFNA (
    lStructSize : CULong,
    hwndOwner : HWND,
    hInstance : HINSTANCE,
    lpstrFilter : LPCSTR,
    lpstrCustomFilter : LPSTR,
    nMaxCustFilter : CULong,
    nFilterIndex : CULong,
    lpstrFile : LPSTR,
    nMaxFile : CULong,
    lpstrFileTitle : LPSTR,
    nMaxFileTitle : CULong,
    lpstrInitialDir : LPCSTR,
    lpstrTitle : LPCSTR,
    Flags : CULong,
    nFileOffset : UShort,
    nFileExtension : UShort,
    lpstrDefExt : LPCSTR,
    lCustData : CULong,
    lpfnHook : LPOFNHOOKPROC,
    lpTemplateName : LPCSTR,
);

alias OPENFILENAMEA = Struct_tagOFNA;

alias LPOPENFILENAMEA = Pointer[Struct_tagOFNA];

record Struct_tagOFNW (
    lStructSize : CULong,
    hwndOwner : HWND,
    hInstance : HINSTANCE,
    lpstrFilter : LPCWSTR,
    lpstrCustomFilter : LPWSTR,
    nMaxCustFilter : CULong,
    nFilterIndex : CULong,
    lpstrFile : LPWSTR,
    nMaxFile : CULong,
    lpstrFileTitle : LPWSTR,
    nMaxFileTitle : CULong,
    lpstrInitialDir : LPCWSTR,
    lpstrTitle : LPCWSTR,
    Flags : CULong,
    nFileOffset : UShort,
    nFileExtension : UShort,
    lpstrDefExt : LPCWSTR,
    lCustData : CULong,
    lpfnHook : LPOFNHOOKPROC,
    lpTemplateName : LPCWSTR,
);

alias OPENFILENAMEW = Struct_tagOFNW;

alias LPOPENFILENAMEW = Pointer[Struct_tagOFNW];

record Struct__OFNOTIFYA (
    hdr : NMHDR,
    lpOFN : LPOPENFILENAMEA,
    pszFile : LPSTR,
);

alias OFNOTIFYA = Struct__OFNOTIFYA;

alias LPOFNOTIFYA = Pointer[Struct__OFNOTIFYA];

record Struct__OFNOTIFYW (
    hdr : NMHDR,
    lpOFN : LPOPENFILENAMEW,
    pszFile : LPWSTR,
);

alias OFNOTIFYW = Struct__OFNOTIFYW;

alias LPOFNOTIFYW = Pointer[Struct__OFNOTIFYW];

record Struct_tagPSDA (
    lStructSize : CULong,
    hwndOwner : HWND,
    hDevMode : HGLOBAL,
    hDevNames : HGLOBAL,
    Flags : CULong,
    ptPaperSize : POINT,
    rtMinMargin : RECT,
    rtMargin : RECT,
    hInstance : HINSTANCE,
    lCustData : CLong,
    lpfnPageSetupHook : LPPAGESETUPHOOK,
    lpfnPagePaintHook : LPPAGEPAINTHOOK,
    lpPageSetupTemplateName : LPCSTR,
    hPageSetupTemplate : HGLOBAL,
);

alias PAGESETUPDLGA = Struct_tagPSDA;

alias LPPAGESETUPDLGA = Pointer[Struct_tagPSDA];

record Struct_tagPSDW (
    lStructSize : CULong,
    hwndOwner : HWND,
    hDevMode : HGLOBAL,
    hDevNames : HGLOBAL,
    Flags : CULong,
    ptPaperSize : POINT,
    rtMinMargin : RECT,
    rtMargin : RECT,
    hInstance : HINSTANCE,
    lCustData : CLong,
    lpfnPageSetupHook : LPPAGESETUPHOOK,
    lpfnPagePaintHook : LPPAGEPAINTHOOK,
    lpPageSetupTemplateName : LPCWSTR,
    hPageSetupTemplate : HGLOBAL,
);

alias PAGESETUPDLGW = Struct_tagPSDW;

alias LPPAGESETUPDLGW = Pointer[Struct_tagPSDW];

record Struct_tagPDA (
    lStructSize : CULong,
    hwndOwner : HWND,
    hDevMode : HANDLE,
    hDevNames : HANDLE,
    hDC : HDC,
    Flags : CULong,
    nFromPage : UShort,
    nToPage : UShort,
    nMinPage : UShort,
    nMaxPage : UShort,
    nCopies : UShort,
    hInstance : HINSTANCE,
    lCustData : CULong,
    lpfnPrintHook : LPPRINTHOOKPROC,
    lpfnSetupHook : LPSETUPHOOKPROC,
    lpPrintTemplateName : LPCSTR,
    lpSetupTemplateName : LPCSTR,
    hPrintTemplate : HANDLE,
    hSetupTemplate : HANDLE,
);

alias PRINTDLGA = Struct_tagPDA;

alias LPPRINTDLGA = Pointer[Struct_tagPDA];

record Struct_tagPDW (
    lStructSize : CULong,
    hwndOwner : HWND,
    hDevMode : HANDLE,
    hDevNames : HANDLE,
    hDC : HDC,
    Flags : CULong,
    nFromPage : UShort,
    nToPage : UShort,
    nMinPage : UShort,
    nMaxPage : UShort,
    nCopies : UShort,
    hInstance : HINSTANCE,
    lCustData : CULong,
    lpfnPrintHook : LPPRINTHOOKPROC,
    lpfnSetupHook : LPSETUPHOOKPROC,
    lpPrintTemplateName : LPCWSTR,
    lpSetupTemplateName : LPCWSTR,
    hPrintTemplate : HANDLE,
    hSetupTemplate : HANDLE,
);

alias PRINTDLGW = Struct_tagPDW;

alias LPPRINTDLGW = Pointer[Struct_tagPDW];

external (stdcall) ChooseColorA(
    argument0 : LPCHOOSECOLORA) Int;

external (stdcall) ChooseColorW(
    argument0 : LPCHOOSECOLORW) Int;

external (stdcall) ChooseFontA(
    argument0 : LPCHOOSEFONTA) Int;

external (stdcall) ChooseFontW(
    argument0 : LPCHOOSEFONTW) Int;

external (stdcall) CommDlgExtendedError() CULong;

external (stdcall) FindTextA(
    argument0 : LPFINDREPLACEA) HWND;

external (stdcall) FindTextW(
    argument0 : LPFINDREPLACEW) HWND;

external (stdcall) GetFileTitleA(
    argument0 : LPCSTR,
    argument1 : LPSTR,
    argument2 : UShort) Short;

external (stdcall) GetFileTitleW(
    argument0 : LPCWSTR,
    argument1 : LPWSTR,
    argument2 : UShort) Short;

external (stdcall) GetOpenFileNameA(
    argument0 : LPOPENFILENAMEA) Int;

external (stdcall) GetOpenFileNameW(
    argument0 : LPOPENFILENAMEW) Int;

external (stdcall) GetSaveFileNameA(
    argument0 : LPOPENFILENAMEA) Int;

external (stdcall) GetSaveFileNameW(
    argument0 : LPOPENFILENAMEW) Int;

external (stdcall) PageSetupDlgA(
    argument0 : LPPAGESETUPDLGA) Int;

external (stdcall) PageSetupDlgW(
    argument0 : LPPAGESETUPDLGW) Int;

external (stdcall) PrintDlgA(
    argument0 : LPPRINTDLGA) Int;

external (stdcall) PrintDlgW(
    argument0 : LPPRINTDLGW) Int;

external (stdcall) ReplaceTextA(
    argument0 : LPFINDREPLACEA) HWND;

external (stdcall) ReplaceTextW(
    argument0 : LPFINDREPLACEW) HWND;

alias CHOOSECOLOR = CHOOSECOLORA;

alias LPCHOOSECOLOR = Pointer[CHOOSECOLORA];

alias CHOOSEFONT = CHOOSEFONTA;

alias LPCHOOSEFONT = Pointer[CHOOSEFONTA];

alias FINDREPLACE = FINDREPLACEA;

alias LPFINDREPLACE = Pointer[FINDREPLACEA];

alias OPENFILENAME = OPENFILENAMEA;

alias LPOPENFILENAME = Pointer[OPENFILENAMEA];

alias OFNOTIFY = OFNOTIFYA;

alias LPOFNOTIFY = Pointer[OFNOTIFYA];

alias PAGESETUPDLG = PAGESETUPDLGA;

alias LPPAGESETUPDLG = Pointer[PAGESETUPDLGA];

alias PRINTDLG = PRINTDLGA;

alias LPPRINTDLG = Pointer[PRINTDLGA];

record Struct__ADDJOB_INFO_1A (
    Path : LPSTR,
    JobId : CULong,
);

alias ADDJOB_INFO_1A = Struct__ADDJOB_INFO_1A;

alias PADDJOB_INFO_1A = Pointer[Struct__ADDJOB_INFO_1A];

alias LPADDJOB_INFO_1A = Pointer[Struct__ADDJOB_INFO_1A];

record Struct__ADDJOB_INFO_1W (
    Path : LPWSTR,
    JobId : CULong,
);

alias ADDJOB_INFO_1W = Struct__ADDJOB_INFO_1W;

alias PADDJOB_INFO_1W = Pointer[Struct__ADDJOB_INFO_1W];

alias LPADDJOB_INFO_1W = Pointer[Struct__ADDJOB_INFO_1W];

record Struct__DATATYPES_INFO_1A (
    pName : LPSTR,
);

alias DATATYPES_INFO_1A = Struct__DATATYPES_INFO_1A;

alias PDATATYPES_INFO_1A = Pointer[Struct__DATATYPES_INFO_1A];

alias LPDATATYPES_INFO_1A = Pointer[Struct__DATATYPES_INFO_1A];

record Struct__DATATYPES_INFO_1W (
    pName : LPWSTR,
);

alias DATATYPES_INFO_1W = Struct__DATATYPES_INFO_1W;

alias PDATATYPES_INFO_1W = Pointer[Struct__DATATYPES_INFO_1W];

alias LPDATATYPES_INFO_1W = Pointer[Struct__DATATYPES_INFO_1W];

record Struct__JOB_INFO_1A (
    JobId : CULong,
    pPrinterName : LPSTR,
    pMachineName : LPSTR,
    pUserName : LPSTR,
    pDocument : LPSTR,
    pDatatype : LPSTR,
    pStatus : LPSTR,
    Status : CULong,
    Priority : CULong,
    Position : CULong,
    TotalPages : CULong,
    PagesPrinted : CULong,
    Submitted : SYSTEMTIME,
);

alias JOB_INFO_1A = Struct__JOB_INFO_1A;

alias PJOB_INFO_1A = Pointer[Struct__JOB_INFO_1A];

alias LPJOB_INFO_1A = Pointer[Struct__JOB_INFO_1A];

record Struct__JOB_INFO_1W (
    JobId : CULong,
    pPrinterName : LPWSTR,
    pMachineName : LPWSTR,
    pUserName : LPWSTR,
    pDocument : LPWSTR,
    pDatatype : LPWSTR,
    pStatus : LPWSTR,
    Status : CULong,
    Priority : CULong,
    Position : CULong,
    TotalPages : CULong,
    PagesPrinted : CULong,
    Submitted : SYSTEMTIME,
);

alias JOB_INFO_1W = Struct__JOB_INFO_1W;

alias PJOB_INFO_1W = Pointer[Struct__JOB_INFO_1W];

alias LPJOB_INFO_1W = Pointer[Struct__JOB_INFO_1W];

record Struct__JOB_INFO_2A (
    JobId : CULong,
    pPrinterName : LPSTR,
    pMachineName : LPSTR,
    pUserName : LPSTR,
    pDocument : LPSTR,
    pNotifyName : LPSTR,
    pDatatype : LPSTR,
    pPrintProcessor : LPSTR,
    pParameters : LPSTR,
    pDriverName : LPSTR,
    pDevMode : LPDEVMODEA,
    pStatus : LPSTR,
    pSecurityDescriptor : PSECURITY_DESCRIPTOR,
    Status : CULong,
    Priority : CULong,
    Position : CULong,
    StartTime : CULong,
    UntilTime : CULong,
    TotalPages : CULong,
    Size : CULong,
    Submitted : SYSTEMTIME,
    Time : CULong,
    PagesPrinted : CULong,
);

alias JOB_INFO_2A = Struct__JOB_INFO_2A;

alias PJOB_INFO_2A = Pointer[Struct__JOB_INFO_2A];

alias LPJOB_INFO_2A = Pointer[Struct__JOB_INFO_2A];

record Struct__JOB_INFO_2W (
    JobId : CULong,
    pPrinterName : LPWSTR,
    pMachineName : LPWSTR,
    pUserName : LPWSTR,
    pDocument : LPWSTR,
    pNotifyName : LPWSTR,
    pDatatype : LPWSTR,
    pPrintProcessor : LPWSTR,
    pParameters : LPWSTR,
    pDriverName : LPWSTR,
    pDevMode : LPDEVMODEW,
    pStatus : LPWSTR,
    pSecurityDescriptor : PSECURITY_DESCRIPTOR,
    Status : CULong,
    Priority : CULong,
    Position : CULong,
    StartTime : CULong,
    UntilTime : CULong,
    TotalPages : CULong,
    Size : CULong,
    Submitted : SYSTEMTIME,
    Time : CULong,
    PagesPrinted : CULong,
);

alias JOB_INFO_2W = Struct__JOB_INFO_2W;

alias PJOB_INFO_2W = Pointer[Struct__JOB_INFO_2W];

alias LPJOB_INFO_2W = Pointer[Struct__JOB_INFO_2W];

record Struct__JOB_INFO_3 (
    JobId : CULong,
    NextJobId : CULong,
    Reserved : CULong,
);

alias JOB_INFO_3 = Struct__JOB_INFO_3;

alias PJOB_INFO_3 = Pointer[Struct__JOB_INFO_3];

alias LPJOB_INFO_3 = Pointer[Struct__JOB_INFO_3];

record Struct__DOC_INFO_1A (
    pDocName : LPSTR,
    pOutputFile : LPSTR,
    pDatatype : LPSTR,
);

alias DOC_INFO_1A = Struct__DOC_INFO_1A;

alias PDOC_INFO_1A = Pointer[Struct__DOC_INFO_1A];

alias LPDOC_INFO_1A = Pointer[Struct__DOC_INFO_1A];

record Struct__DOC_INFO_1W (
    pDocName : LPWSTR,
    pOutputFile : LPWSTR,
    pDatatype : LPWSTR,
);

alias DOC_INFO_1W = Struct__DOC_INFO_1W;

alias PDOC_INFO_1W = Pointer[Struct__DOC_INFO_1W];

alias LPDOC_INFO_1W = Pointer[Struct__DOC_INFO_1W];

record Struct__DOC_INFO_2A (
    pDocName : LPSTR,
    pOutputFile : LPSTR,
    pDatatype : LPSTR,
    dwMode : CULong,
    JobId : CULong,
);

alias DOC_INFO_2A = Struct__DOC_INFO_2A;

alias PDOC_INFO_2A = Pointer[Struct__DOC_INFO_2A];

alias LPDOC_INFO_2A = Pointer[Struct__DOC_INFO_2A];

record Struct__DOC_INFO_2W (
    pDocName : LPWSTR,
    pOutputFile : LPWSTR,
    pDatatype : LPWSTR,
    dwMode : CULong,
    JobId : CULong,
);

alias DOC_INFO_2W = Struct__DOC_INFO_2W;

alias PDOC_INFO_2W = Pointer[Struct__DOC_INFO_2W];

alias LPDOC_INFO_2W = Pointer[Struct__DOC_INFO_2W];

record Struct__DRIVER_INFO_1A (
    pName : LPSTR,
);

alias DRIVER_INFO_1A = Struct__DRIVER_INFO_1A;

alias PDRIVER_INFO_1A = Pointer[Struct__DRIVER_INFO_1A];

alias LPDRIVER_INFO_1A = Pointer[Struct__DRIVER_INFO_1A];

record Struct__DRIVER_INFO_1W (
    pName : LPWSTR,
);

alias DRIVER_INFO_1W = Struct__DRIVER_INFO_1W;

alias PDRIVER_INFO_1W = Pointer[Struct__DRIVER_INFO_1W];

alias LPDRIVER_INFO_1W = Pointer[Struct__DRIVER_INFO_1W];

record Struct__DRIVER_INFO_2A (
    cVersion : CULong,
    pName : LPSTR,
    pEnvironment : LPSTR,
    pDriverPath : LPSTR,
    pDataFile : LPSTR,
    pConfigFile : LPSTR,
);

alias DRIVER_INFO_2A = Struct__DRIVER_INFO_2A;

alias PDRIVER_INFO_2A = Pointer[Struct__DRIVER_INFO_2A];

alias LPDRIVER_INFO_2A = Pointer[Struct__DRIVER_INFO_2A];

record Struct__DRIVER_INFO_2W (
    cVersion : CULong,
    pName : LPWSTR,
    pEnvironment : LPWSTR,
    pDriverPath : LPWSTR,
    pDataFile : LPWSTR,
    pConfigFile : LPWSTR,
);

alias DRIVER_INFO_2W = Struct__DRIVER_INFO_2W;

alias PDRIVER_INFO_2W = Pointer[Struct__DRIVER_INFO_2W];

alias LPDRIVER_INFO_2W = Pointer[Struct__DRIVER_INFO_2W];

record Struct__DRIVER_INFO_3A (
    cVersion : CULong,
    pName : LPSTR,
    pEnvironment : LPSTR,
    pDriverPath : LPSTR,
    pDataFile : LPSTR,
    pConfigFile : LPSTR,
    pHelpFile : LPSTR,
    pDependentFiles : LPSTR,
    pMonitorName : LPSTR,
    pDefaultDataType : LPSTR,
);

alias DRIVER_INFO_3A = Struct__DRIVER_INFO_3A;

alias PDRIVER_INFO_3A = Pointer[Struct__DRIVER_INFO_3A];

alias LPDRIVER_INFO_3A = Pointer[Struct__DRIVER_INFO_3A];

record Struct__DRIVER_INFO_3W (
    cVersion : CULong,
    pName : LPWSTR,
    pEnvironment : LPWSTR,
    pDriverPath : LPWSTR,
    pDataFile : LPWSTR,
    pConfigFile : LPWSTR,
    pHelpFile : LPWSTR,
    pDependentFiles : LPWSTR,
    pMonitorName : LPWSTR,
    pDefaultDataType : LPWSTR,
);

alias DRIVER_INFO_3W = Struct__DRIVER_INFO_3W;

alias PDRIVER_INFO_3W = Pointer[Struct__DRIVER_INFO_3W];

alias LPDRIVER_INFO_3W = Pointer[Struct__DRIVER_INFO_3W];

record Struct__MONITOR_INFO_1A (
    pName : LPSTR,
);

alias MONITOR_INFO_1A = Struct__MONITOR_INFO_1A;

alias PMONITOR_INFO_1A = Pointer[Struct__MONITOR_INFO_1A];

alias LPMONITOR_INFO_1A = Pointer[Struct__MONITOR_INFO_1A];

record Struct__MONITOR_INFO_1W (
    pName : LPWSTR,
);

alias MONITOR_INFO_1W = Struct__MONITOR_INFO_1W;

alias PMONITOR_INFO_1W = Pointer[Struct__MONITOR_INFO_1W];

alias LPMONITOR_INFO_1W = Pointer[Struct__MONITOR_INFO_1W];

record Struct__PORT_INFO_1A (
    pName : LPSTR,
);

alias PORT_INFO_1A = Struct__PORT_INFO_1A;

alias PPORT_INFO_1A = Pointer[Struct__PORT_INFO_1A];

alias LPPORT_INFO_1A = Pointer[Struct__PORT_INFO_1A];

record Struct__PORT_INFO_1W (
    pName : LPWSTR,
);

alias PORT_INFO_1W = Struct__PORT_INFO_1W;

alias PPORT_INFO_1W = Pointer[Struct__PORT_INFO_1W];

alias LPPORT_INFO_1W = Pointer[Struct__PORT_INFO_1W];

record Struct__MONITOR_INFO_2A (
    pName : LPSTR,
    pEnvironment : LPSTR,
    pDLLName : LPSTR,
);

alias MONITOR_INFO_2A = Struct__MONITOR_INFO_2A;

alias PMONITOR_INFO_2A = Pointer[Struct__MONITOR_INFO_2A];

alias LPMONITOR_INFO_2A = Pointer[Struct__MONITOR_INFO_2A];

record Struct__MONITOR_INFO_2W (
    pName : LPWSTR,
    pEnvironment : LPWSTR,
    pDLLName : LPWSTR,
);

alias MONITOR_INFO_2W = Struct__MONITOR_INFO_2W;

alias PMONITOR_INFO_2W = Pointer[Struct__MONITOR_INFO_2W];

alias LPMONITOR_INFO_2W = Pointer[Struct__MONITOR_INFO_2W];

record Struct__PORT_INFO_2A (
    pPortName : LPSTR,
    pMonitorName : LPSTR,
    pDescription : LPSTR,
    fPortType : CULong,
    Reserved : CULong,
);

alias PORT_INFO_2A = Struct__PORT_INFO_2A;

alias PPORT_INFO_2A = Pointer[Struct__PORT_INFO_2A];

alias LPPORT_INFO_2A = Pointer[Struct__PORT_INFO_2A];

record Struct__PORT_INFO_2W (
    pPortName : LPWSTR,
    pMonitorName : LPWSTR,
    pDescription : LPWSTR,
    fPortType : CULong,
    Reserved : CULong,
);

alias PORT_INFO_2W = Struct__PORT_INFO_2W;

alias PPORT_INFO_2W = Pointer[Struct__PORT_INFO_2W];

alias LPPORT_INFO_2W = Pointer[Struct__PORT_INFO_2W];

record Struct__PORT_INFO_3A (
    dwStatus : CULong,
    pszStatus : LPSTR,
    dwSeverity : CULong,
);

alias PORT_INFO_3A = Struct__PORT_INFO_3A;

alias PPORT_INFO_3A = Pointer[Struct__PORT_INFO_3A];

alias LPPORT_INFO_3A = Pointer[Struct__PORT_INFO_3A];

record Struct__PORT_INFO_3W (
    dwStatus : CULong,
    pszStatus : LPWSTR,
    dwSeverity : CULong,
);

alias PORT_INFO_3W = Struct__PORT_INFO_3W;

alias PPORT_INFO_3W = Pointer[Struct__PORT_INFO_3W];

alias LPPORT_INFO_3W = Pointer[Struct__PORT_INFO_3W];

record Struct__PRINTER_INFO_1A (
    Flags : CULong,
    pDescription : LPSTR,
    pName : LPSTR,
    pComment : LPSTR,
);

alias PRINTER_INFO_1A = Struct__PRINTER_INFO_1A;

alias PPRINTER_INFO_1A = Pointer[Struct__PRINTER_INFO_1A];

alias LPPRINTER_INFO_1A = Pointer[Struct__PRINTER_INFO_1A];

record Struct__PRINTER_INFO_1W (
    Flags : CULong,
    pDescription : LPWSTR,
    pName : LPWSTR,
    pComment : LPWSTR,
);

alias PRINTER_INFO_1W = Struct__PRINTER_INFO_1W;

alias PPRINTER_INFO_1W = Pointer[Struct__PRINTER_INFO_1W];

alias LPPRINTER_INFO_1W = Pointer[Struct__PRINTER_INFO_1W];

record Struct__PRINTER_INFO_2A (
    pServerName : LPSTR,
    pPrinterName : LPSTR,
    pShareName : LPSTR,
    pPortName : LPSTR,
    pDriverName : LPSTR,
    pComment : LPSTR,
    pLocation : LPSTR,
    pDevMode : LPDEVMODEA,
    pSepFile : LPSTR,
    pPrintProcessor : LPSTR,
    pDatatype : LPSTR,
    pParameters : LPSTR,
    pSecurityDescriptor : PSECURITY_DESCRIPTOR,
    Attributes : CULong,
    Priority : CULong,
    DefaultPriority : CULong,
    StartTime : CULong,
    UntilTime : CULong,
    Status : CULong,
    cJobs : CULong,
    AveragePPM : CULong,
);

alias PRINTER_INFO_2A = Struct__PRINTER_INFO_2A;

alias PPRINTER_INFO_2A = Pointer[Struct__PRINTER_INFO_2A];

alias LPPRINTER_INFO_2A = Pointer[Struct__PRINTER_INFO_2A];

record Struct__PRINTER_INFO_2W (
    pServerName : LPWSTR,
    pPrinterName : LPWSTR,
    pShareName : LPWSTR,
    pPortName : LPWSTR,
    pDriverName : LPWSTR,
    pComment : LPWSTR,
    pLocation : LPWSTR,
    pDevMode : LPDEVMODEW,
    pSepFile : LPWSTR,
    pPrintProcessor : LPWSTR,
    pDatatype : LPWSTR,
    pParameters : LPWSTR,
    pSecurityDescriptor : PSECURITY_DESCRIPTOR,
    Attributes : CULong,
    Priority : CULong,
    DefaultPriority : CULong,
    StartTime : CULong,
    UntilTime : CULong,
    Status : CULong,
    cJobs : CULong,
    AveragePPM : CULong,
);

alias PRINTER_INFO_2W = Struct__PRINTER_INFO_2W;

alias PPRINTER_INFO_2W = Pointer[Struct__PRINTER_INFO_2W];

alias LPPRINTER_INFO_2W = Pointer[Struct__PRINTER_INFO_2W];

record Struct__PRINTER_INFO_3 (
    pSecurityDescriptor : PSECURITY_DESCRIPTOR,
);

alias PRINTER_INFO_3 = Struct__PRINTER_INFO_3;

alias PPRINTER_INFO_3 = Pointer[Struct__PRINTER_INFO_3];

alias LPPRINTER_INFO_3 = Pointer[Struct__PRINTER_INFO_3];

record Struct__PRINTER_INFO_4A (
    pPrinterName : LPSTR,
    pServerName : LPSTR,
    Attributes : CULong,
);

alias PRINTER_INFO_4A = Struct__PRINTER_INFO_4A;

alias PPRINTER_INFO_4A = Pointer[Struct__PRINTER_INFO_4A];

alias LPPRINTER_INFO_4A = Pointer[Struct__PRINTER_INFO_4A];

record Struct__PRINTER_INFO_4W (
    pPrinterName : LPWSTR,
    pServerName : LPWSTR,
    Attributes : CULong,
);

alias PRINTER_INFO_4W = Struct__PRINTER_INFO_4W;

alias PPRINTER_INFO_4W = Pointer[Struct__PRINTER_INFO_4W];

alias LPPRINTER_INFO_4W = Pointer[Struct__PRINTER_INFO_4W];

record Struct__PRINTER_INFO_5A (
    pPrinterName : LPSTR,
    pPortName : LPSTR,
    Attributes : CULong,
    DeviceNotSelectedTimeout : CULong,
    TransmissionRetryTimeout : CULong,
);

alias PRINTER_INFO_5A = Struct__PRINTER_INFO_5A;

alias PPRINTER_INFO_5A = Pointer[Struct__PRINTER_INFO_5A];

alias LPPRINTER_INFO_5A = Pointer[Struct__PRINTER_INFO_5A];

record Struct__PRINTER_INFO_5W (
    pPrinterName : LPWSTR,
    pPortName : LPWSTR,
    Attributes : CULong,
    DeviceNotSelectedTimeout : CULong,
    TransmissionRetryTimeout : CULong,
);

alias PRINTER_INFO_5W = Struct__PRINTER_INFO_5W;

alias PPRINTER_INFO_5W = Pointer[Struct__PRINTER_INFO_5W];

alias LPPRINTER_INFO_5W = Pointer[Struct__PRINTER_INFO_5W];

record Struct__PRINTER_INFO_6 (
    dwStatus : CULong,
);

alias PRINTER_INFO_6 = Struct__PRINTER_INFO_6;

alias PPRINTER_INFO_6 = Pointer[Struct__PRINTER_INFO_6];

alias LPPRINTER_INFO_6 = Pointer[Struct__PRINTER_INFO_6];

record Struct__PRINTPROCESSOR_INFO_1A (
    pName : LPSTR,
);

alias PRINTPROCESSOR_INFO_1A = Struct__PRINTPROCESSOR_INFO_1A;

alias PPRINTPROCESSOR_INFO_1A = Pointer[Struct__PRINTPROCESSOR_INFO_1A];

alias LPPRINTPROCESSOR_INFO_1A = Pointer[Struct__PRINTPROCESSOR_INFO_1A];

record Struct__PRINTPROCESSOR_INFO_1W (
    pName : LPWSTR,
);

alias PRINTPROCESSOR_INFO_1W = Struct__PRINTPROCESSOR_INFO_1W;

alias PPRINTPROCESSOR_INFO_1W = Pointer[Struct__PRINTPROCESSOR_INFO_1W];

alias LPPRINTPROCESSOR_INFO_1W = Pointer[Struct__PRINTPROCESSOR_INFO_1W];

record Struct__PRINTER_NOTIFY_INFO_DATA (
    Type : UShort,
    Field : UShort,
    Reserved : CULong,
    Id : CULong,
    NotifyData : AUnionType,
);

alias PRINTER_NOTIFY_INFO_DATA = Struct__PRINTER_NOTIFY_INFO_DATA;

alias PPRINTER_NOTIFY_INFO_DATA = Pointer[Struct__PRINTER_NOTIFY_INFO_DATA];

alias LPPRINTER_NOTIFY_INFO_DATA = Pointer[Struct__PRINTER_NOTIFY_INFO_DATA];

record Struct__PRINTER_NOTIFY_INFO (
    Version : CULong,
    Flags : CULong,
    Count : CULong,
    aData : Array[PRINTER_NOTIFY_INFO_DATA,1],
);

alias PRINTER_NOTIFY_INFO = Struct__PRINTER_NOTIFY_INFO;

alias PPRINTER_NOTIFY_INFO = Pointer[Struct__PRINTER_NOTIFY_INFO];

alias LPPRINTER_NOTIFY_INFO = Pointer[Struct__PRINTER_NOTIFY_INFO];

record Struct__FORM_INFO_1A (
    Flags : CULong,
    pName : LPSTR,
    Size : SIZEL,
    ImageableArea : RECTL,
);

alias FORM_INFO_1A = Struct__FORM_INFO_1A;

alias PFORM_INFO_1A = Pointer[Struct__FORM_INFO_1A];

alias LPFORM_INFO_1A = Pointer[Struct__FORM_INFO_1A];

record Struct__FORM_INFO_1W (
    Flags : CULong,
    pName : LPWSTR,
    Size : SIZEL,
    ImageableArea : RECTL,
);

alias FORM_INFO_1W = Struct__FORM_INFO_1W;

alias PFORM_INFO_1W = Pointer[Struct__FORM_INFO_1W];

alias LPFORM_INFO_1W = Pointer[Struct__FORM_INFO_1W];

record Struct__PRINTER_DEFAULTSA (
    pDatatype : LPSTR,
    pDevMode : LPDEVMODE,
    DesiredAccess : CULong,
);

alias PRINTER_DEFAULTSA = Struct__PRINTER_DEFAULTSA;

alias PPRINTER_DEFAULTSA = Pointer[Struct__PRINTER_DEFAULTSA];

alias LPPRINTER_DEFAULTSA = Pointer[Struct__PRINTER_DEFAULTSA];

record Struct__PRINTER_DEFAULTSW (
    pDatatype : LPWSTR,
    pDevMode : LPDEVMODE,
    DesiredAccess : CULong,
);

alias PRINTER_DEFAULTSW = Struct__PRINTER_DEFAULTSW;

alias PPRINTER_DEFAULTSW = Pointer[Struct__PRINTER_DEFAULTSW];

alias LPPRINTER_DEFAULTSW = Pointer[Struct__PRINTER_DEFAULTSW];

record Struct__PROVIDOR_INFO_1A (
    pName : LPSTR,
    pEnvironment : LPSTR,
    pDLLName : LPSTR,
);

alias PROVIDOR_INFO_1A = Struct__PROVIDOR_INFO_1A;

alias PPROVIDOR_INFO_1A = Pointer[Struct__PROVIDOR_INFO_1A];

alias LPPROVIDOR_INFO_1A = Pointer[Struct__PROVIDOR_INFO_1A];

record Struct__PROVIDOR_INFO_1W (
    pName : LPWSTR,
    pEnvironment : LPWSTR,
    pDLLName : LPWSTR,
);

alias PROVIDOR_INFO_1W = Struct__PROVIDOR_INFO_1W;

alias PPROVIDOR_INFO_1W = Pointer[Struct__PROVIDOR_INFO_1W];

alias LPPROVIDOR_INFO_1W = Pointer[Struct__PROVIDOR_INFO_1W];

record Struct__PROVIDOR_INFO_2A (
    pOrder : LPSTR,
);

alias PROVIDOR_INFO_2A = Struct__PROVIDOR_INFO_2A;

alias PPROVIDOR_INFO_2A = Pointer[Struct__PROVIDOR_INFO_2A];

alias LPROVIDOR_INFO_2A = Pointer[Struct__PROVIDOR_INFO_2A];

record Struct__PROVIDOR_INFO_2W (
    pOrder : LPWSTR,
);

alias PROVIDOR_INFO_2W = Struct__PROVIDOR_INFO_2W;

alias PPROVIDOR_INFO_2W = Pointer[Struct__PROVIDOR_INFO_2W];

alias LPROVIDOR_INFO_2W = Pointer[Struct__PROVIDOR_INFO_2W];

external (stdcall) AbortPrinter(
    argument0 : HANDLE) Int;

external (stdcall) AddFormA(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PBYTE) Int;

external (stdcall) AddFormW(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PBYTE) Int;

external (stdcall) AddJobA(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PBYTE,
    argument3 : CULong,
    argument4 : PDWORD) Int;

external (stdcall) AddJobW(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PBYTE,
    argument3 : CULong,
    argument4 : PDWORD) Int;

external (stdcall) AddMonitorA(
    argument0 : LPSTR,
    argument1 : CULong,
    argument2 : PBYTE) Int;

external (stdcall) AddMonitorW(
    argument0 : LPWSTR,
    argument1 : CULong,
    argument2 : PBYTE) Int;

external (stdcall) AddPortA(
    argument0 : LPSTR,
    argument1 : HWND,
    argument2 : LPSTR) Int;

external (stdcall) AddPortW(
    argument0 : LPWSTR,
    argument1 : HWND,
    argument2 : LPWSTR) Int;

external (stdcall) AddPrinterA(
    argument0 : LPSTR,
    argument1 : CULong,
    argument2 : PBYTE) HANDLE;

external (stdcall) AddPrinterW(
    argument0 : LPWSTR,
    argument1 : CULong,
    argument2 : PBYTE) HANDLE;

external (stdcall) AddPrinterConnectionA(
    argument0 : LPSTR) Int;

external (stdcall) AddPrinterConnectionW(
    argument0 : LPWSTR) Int;

external (stdcall) AddPrinterDriverA(
    argument0 : LPSTR,
    argument1 : CULong,
    argument2 : PBYTE) Int;

external (stdcall) AddPrinterDriverW(
    argument0 : LPWSTR,
    argument1 : CULong,
    argument2 : PBYTE) Int;

external (stdcall) AddPrintProcessorA(
    argument0 : LPSTR,
    argument1 : LPSTR,
    argument2 : LPSTR,
    argument3 : LPSTR) Int;

external (stdcall) AddPrintProcessorW(
    argument0 : LPWSTR,
    argument1 : LPWSTR,
    argument2 : LPWSTR,
    argument3 : LPWSTR) Int;

external (stdcall) AddPrintProvidorA(
    argument0 : LPSTR,
    argument1 : CULong,
    argument2 : PBYTE) Int;

external (stdcall) AddPrintProvidorW(
    argument0 : LPWSTR,
    argument1 : CULong,
    argument2 : PBYTE) Int;

external (stdcall) AdvancedDocumentPropertiesA(
    argument0 : HWND,
    argument1 : HANDLE,
    argument2 : LPSTR,
    argument3 : PDEVMODE,
    argument4 : PDEVMODEA) CLong;

external (stdcall) AdvancedDocumentPropertiesW(
    argument0 : HWND,
    argument1 : HANDLE,
    argument2 : LPWSTR,
    argument3 : PDEVMODE,
    argument4 : PDEVMODEW) CLong;

external (stdcall) ClosePrinter(
    argument0 : HANDLE) Int;

external (stdcall) ConfigurePortA(
    argument0 : LPSTR,
    argument1 : HWND,
    argument2 : LPSTR) Int;

external (stdcall) ConfigurePortW(
    argument0 : LPWSTR,
    argument1 : HWND,
    argument2 : LPWSTR) Int;

external (stdcall) ConnectToPrinterDlg(
    argument0 : HWND,
    argument1 : CULong) HANDLE;

external (stdcall) DeleteFormA(
    argument0 : HANDLE,
    argument1 : LPSTR) Int;

external (stdcall) DeleteFormW(
    argument0 : HANDLE,
    argument1 : LPWSTR) Int;

external (stdcall) DeleteMonitorA(
    argument0 : LPSTR,
    argument1 : LPSTR,
    argument2 : LPSTR) Int;

external (stdcall) DeleteMonitorW(
    argument0 : LPWSTR,
    argument1 : LPWSTR,
    argument2 : LPWSTR) Int;

external (stdcall) DeletePortA(
    argument0 : LPSTR,
    argument1 : HWND,
    argument2 : LPSTR) Int;

external (stdcall) DeletePortW(
    argument0 : LPWSTR,
    argument1 : HWND,
    argument2 : LPWSTR) Int;

external (stdcall) DeletePrinter(
    argument0 : HANDLE) Int;

external (stdcall) DeletePrinterConnectionA(
    argument0 : LPSTR) Int;

external (stdcall) DeletePrinterConnectionW(
    argument0 : LPWSTR) Int;

external (stdcall) DeletePrinterDataA(
    argument0 : HANDLE,
    argument1 : LPSTR) CULong;

external (stdcall) DeletePrinterDataW(
    argument0 : HANDLE,
    argument1 : LPWSTR) CULong;

external (stdcall) DeletePrinterDriverA(
    argument0 : LPSTR,
    argument1 : LPSTR,
    argument2 : LPSTR) Int;

external (stdcall) DeletePrinterDriverW(
    argument0 : LPWSTR,
    argument1 : LPWSTR,
    argument2 : LPWSTR) Int;

external (stdcall) DeletePrintProcessorA(
    argument0 : LPSTR,
    argument1 : LPSTR,
    argument2 : LPSTR) Int;

external (stdcall) DeletePrintProcessorW(
    argument0 : LPWSTR,
    argument1 : LPWSTR,
    argument2 : LPWSTR) Int;

external (stdcall) DeletePrintProvidorA(
    argument0 : LPSTR,
    argument1 : LPSTR,
    argument2 : LPSTR) Int;

external (stdcall) DeletePrintProvidorW(
    argument0 : LPWSTR,
    argument1 : LPWSTR,
    argument2 : LPWSTR) Int;

external (stdcall) DocumentPropertiesA(
    argument0 : HWND,
    argument1 : HANDLE,
    argument2 : LPSTR,
    argument3 : PDEVMODEA,
    argument4 : PDEVMODEA,
    argument5 : CULong) CLong;

external (stdcall) DocumentPropertiesW(
    argument0 : HWND,
    argument1 : HANDLE,
    argument2 : LPWSTR,
    argument3 : PDEVMODEW,
    argument4 : PDEVMODEW,
    argument5 : CULong) CLong;

external (stdcall) EndDocPrinter(
    argument0 : HANDLE) Int;

external (stdcall) EndPagePrinter(
    argument0 : HANDLE) Int;

external (stdcall) EnumFormsA(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PBYTE,
    argument3 : CULong,
    argument4 : PDWORD,
    argument5 : PDWORD) Int;

external (stdcall) EnumFormsW(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PBYTE,
    argument3 : CULong,
    argument4 : PDWORD,
    argument5 : PDWORD) Int;

external (stdcall) EnumJobsA(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : PBYTE,
    argument5 : CULong,
    argument6 : PDWORD,
    argument7 : PDWORD) Int;

external (stdcall) EnumJobsW(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : PBYTE,
    argument5 : CULong,
    argument6 : PDWORD,
    argument7 : PDWORD) Int;

external (stdcall) EnumMonitorsA(
    argument0 : LPSTR,
    argument1 : CULong,
    argument2 : PBYTE,
    argument3 : CULong,
    argument4 : PDWORD,
    argument5 : PDWORD) Int;

external (stdcall) EnumMonitorsW(
    argument0 : LPWSTR,
    argument1 : CULong,
    argument2 : PBYTE,
    argument3 : CULong,
    argument4 : PDWORD,
    argument5 : PDWORD) Int;

external (stdcall) EnumPortsA(
    argument0 : LPSTR,
    argument1 : CULong,
    argument2 : PBYTE,
    argument3 : CULong,
    argument4 : PDWORD,
    argument5 : PDWORD) Int;

external (stdcall) EnumPortsW(
    argument0 : LPWSTR,
    argument1 : CULong,
    argument2 : PBYTE,
    argument3 : CULong,
    argument4 : PDWORD,
    argument5 : PDWORD) Int;

external (stdcall) EnumPrinterDataA(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : LPSTR,
    argument3 : CULong,
    argument4 : PDWORD,
    argument5 : PDWORD,
    argument6 : PBYTE,
    argument7 : CULong,
    argument8 : PDWORD) CULong;

external (stdcall) EnumPrinterDataW(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : LPWSTR,
    argument3 : CULong,
    argument4 : PDWORD,
    argument5 : PDWORD,
    argument6 : PBYTE,
    argument7 : CULong,
    argument8 : PDWORD) CULong;

external (stdcall) EnumPrinterDriversA(
    argument0 : LPSTR,
    argument1 : LPSTR,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD,
    argument6 : PDWORD) Int;

external (stdcall) EnumPrinterDriversW(
    argument0 : LPWSTR,
    argument1 : LPWSTR,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD,
    argument6 : PDWORD) Int;

external (stdcall) EnumPrintersA(
    argument0 : CULong,
    argument1 : LPSTR,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD,
    argument6 : PDWORD) Int;

external (stdcall) EnumPrintersW(
    argument0 : CULong,
    argument1 : LPWSTR,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD,
    argument6 : PDWORD) Int;

external (stdcall) EnumPrintProcessorDatatypesA(
    argument0 : LPSTR,
    argument1 : LPSTR,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD,
    argument6 : PDWORD) Int;

external (stdcall) EnumPrintProcessorDatatypesW(
    argument0 : LPWSTR,
    argument1 : LPWSTR,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD,
    argument6 : PDWORD) Int;

external (stdcall) EnumPrintProcessorsA(
    argument0 : LPSTR,
    argument1 : LPSTR,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD,
    argument6 : PDWORD) Int;

external (stdcall) EnumPrintProcessorsW(
    argument0 : LPWSTR,
    argument1 : LPWSTR,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD,
    argument6 : PDWORD) Int;

external (stdcall) FindClosePrinterChangeNotification(
    argument0 : HANDLE) Int;

external (stdcall) FindFirstPrinterChangeNotification(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : PVOID) HANDLE;

external (stdcall) FindNextPrinterChangeNotification(
    argument0 : HANDLE,
    argument1 : PDWORD,
    argument2 : PVOID,
    argument3 : Pointer[PVOID]) HANDLE;

external (stdcall) FreePrinterNotifyInfo(
    argument0 : PPRINTER_NOTIFY_INFO) Int;

external (stdcall) GetFormA(
    argument0 : HANDLE,
    argument1 : LPSTR,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD) Int;

external (stdcall) GetFormW(
    argument0 : HANDLE,
    argument1 : LPWSTR,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD) Int;

external (stdcall) GetJobA(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD) Int;

external (stdcall) GetJobW(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD) Int;

external (stdcall) GetPrinterA(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PBYTE,
    argument3 : CULong,
    argument4 : PDWORD) Int;

external (stdcall) GetPrinterW(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PBYTE,
    argument3 : CULong,
    argument4 : PDWORD) Int;

external (stdcall) GetPrinterDataA(
    argument0 : HANDLE,
    argument1 : LPSTR,
    argument2 : PDWORD,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD) CULong;

external (stdcall) GetPrinterDataW(
    argument0 : HANDLE,
    argument1 : LPWSTR,
    argument2 : PDWORD,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD) CULong;

external (stdcall) GetPrinterDriverA(
    argument0 : HANDLE,
    argument1 : LPSTR,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD) CULong;

external (stdcall) GetPrinterDriverW(
    argument0 : HANDLE,
    argument1 : LPWSTR,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD) CULong;

external (stdcall) GetPrinterDriverDirectoryA(
    argument0 : LPSTR,
    argument1 : LPSTR,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD) CULong;

external (stdcall) GetPrinterDriverDirectoryW(
    argument0 : LPWSTR,
    argument1 : LPWSTR,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD) CULong;

external (stdcall) GetPrintProcessorDirectoryA(
    argument0 : LPSTR,
    argument1 : LPSTR,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD) CULong;

external (stdcall) GetPrintProcessorDirectoryW(
    argument0 : LPWSTR,
    argument1 : LPWSTR,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD) CULong;

external (stdcall) OpenPrinterA(
    argument0 : LPSTR,
    argument1 : PHANDLE,
    argument2 : LPPRINTER_DEFAULTSA) Int;

external (stdcall) OpenPrinterW(
    argument0 : LPWSTR,
    argument1 : PHANDLE,
    argument2 : LPPRINTER_DEFAULTSW) Int;

external (stdcall) PrinterMessageBoxA(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : HWND,
    argument3 : LPSTR,
    argument4 : LPSTR,
    argument5 : CULong) CULong;

external (stdcall) PrinterMessageBoxW(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : HWND,
    argument3 : LPWSTR,
    argument4 : LPWSTR,
    argument5 : CULong) CULong;

external (stdcall) PrinterProperties(
    argument0 : HWND,
    argument1 : HANDLE) Int;

external (stdcall) ReadPrinter(
    argument0 : HANDLE,
    argument1 : PVOID,
    argument2 : CULong,
    argument3 : PDWORD) Int;

external (stdcall) ResetPrinterA(
    argument0 : HANDLE,
    argument1 : LPPRINTER_DEFAULTSA) Int;

external (stdcall) ResetPrinterW(
    argument0 : HANDLE,
    argument1 : LPPRINTER_DEFAULTSW) Int;

external (stdcall) ScheduleJob(
    argument0 : HANDLE,
    argument1 : CULong) Int;

external (stdcall) SetFormA(
    argument0 : HANDLE,
    argument1 : LPSTR,
    argument2 : CULong,
    argument3 : PBYTE) Int;

external (stdcall) SetFormW(
    argument0 : HANDLE,
    argument1 : LPWSTR,
    argument2 : CULong,
    argument3 : PBYTE) Int;

external (stdcall) SetJobA(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong) Int;

external (stdcall) SetJobW(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong) Int;

external (stdcall) SetPrinterA(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PBYTE,
    argument3 : CULong) Int;

external (stdcall) SetPrinterW(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PBYTE,
    argument3 : CULong) Int;

external (stdcall) SetPrinterDataA(
    argument0 : HANDLE,
    argument1 : LPSTR,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong) Int;

external (stdcall) SetPrinterDataW(
    argument0 : HANDLE,
    argument1 : LPWSTR,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong) Int;

external (stdcall) StartDocPrinterA(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PBYTE) CULong;

external (stdcall) StartDocPrinterW(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PBYTE) CULong;

external (stdcall) StartPagePrinter(
    argument0 : HANDLE) Int;

external (stdcall) WaitForPrinterChange(
    argument0 : HANDLE,
    argument1 : CULong) CULong;

external (stdcall) WritePrinter(
    argument0 : HANDLE,
    argument1 : PVOID,
    argument2 : CULong,
    argument3 : PDWORD) Int;

alias JOB_INFO_1 = JOB_INFO_1A;

alias PJOB_INFO_1 = Pointer[JOB_INFO_1A];

alias LPJOB_INFO_1 = Pointer[JOB_INFO_1A];

alias JOB_INFO_2 = JOB_INFO_2A;

alias PJOB_INFO_2 = Pointer[JOB_INFO_2A];

alias LPJOB_INFO_2 = Pointer[JOB_INFO_2A];

alias ADDJOB_INFO_1 = ADDJOB_INFO_1A;

alias PADDJOB_INFO_1 = Pointer[ADDJOB_INFO_1A];

alias LPADDJOB_INFO_1 = Pointer[ADDJOB_INFO_1A];

alias DATATYPES_INFO_1 = DATATYPES_INFO_1A;

alias PDATATYPES_INFO_1 = Pointer[DATATYPES_INFO_1A];

alias LPDATATYPES_INFO_1 = Pointer[DATATYPES_INFO_1A];

alias MONITOR_INFO_1 = MONITOR_INFO_1A;

alias PMONITOR_INFO_1 = Pointer[MONITOR_INFO_1A];

alias LPMONITOR_INFO_1 = Pointer[MONITOR_INFO_1A];

alias MONITOR_INFO_2 = MONITOR_INFO_2A;

alias PMONITOR_INFO_2 = Pointer[MONITOR_INFO_2A];

alias LPMONITOR_INFO_2 = Pointer[MONITOR_INFO_2A];

alias DOC_INFO_1 = DOC_INFO_1A;

alias PDOC_INFO_1 = Pointer[DOC_INFO_1A];

alias LPDOC_INFO_1 = Pointer[DOC_INFO_1A];

alias DOC_INFO_2 = DOC_INFO_2A;

alias PDOC_INFO_2 = Pointer[DOC_INFO_2A];

alias LPDOC_INFO_2 = Pointer[DOC_INFO_2A];

alias PORT_INFO_1 = PORT_INFO_1A;

alias PPORT_INFO_1 = Pointer[PORT_INFO_1A];

alias LPPORT_INFO_1 = Pointer[PORT_INFO_1A];

alias PORT_INFO_2 = PORT_INFO_2A;

alias PPORT_INFO_2 = Pointer[PORT_INFO_2A];

alias LPPORT_INFO_2 = Pointer[PORT_INFO_2A];

alias PORT_INFO_3 = PORT_INFO_3A;

alias PPORT_INFO_3 = Pointer[PORT_INFO_3A];

alias LPPORT_INFO_3 = Pointer[PORT_INFO_3A];

alias DRIVER_INFO_1 = DRIVER_INFO_1A;

alias PDRIVER_INFO_1 = Pointer[DRIVER_INFO_1A];

alias LPDRIVER_INFO_1 = Pointer[DRIVER_INFO_1A];

alias DRIVER_INFO_2 = DRIVER_INFO_2A;

alias PDRIVER_INFO_2 = Pointer[DRIVER_INFO_2A];

alias LPDRIVER_INFO_2 = Pointer[DRIVER_INFO_2A];

alias DRIVER_INFO_3 = DRIVER_INFO_3A;

alias PDRIVER_INFO_3 = Pointer[DRIVER_INFO_3A];

alias LPDRIVER_INFO_3 = Pointer[DRIVER_INFO_3A];

alias PRINTER_INFO_1 = PRINTER_INFO_1A;

alias PPRINTER_INFO_1 = Pointer[PRINTER_INFO_1A];

alias LPPRINTER_INFO_1 = Pointer[PRINTER_INFO_1A];

alias PRINTER_INFO_2 = PRINTER_INFO_2A;

alias PPRINTER_INFO_2 = Pointer[PRINTER_INFO_2A];

alias LPPRINTER_INFO_2 = Pointer[PRINTER_INFO_2A];

alias PRINTER_INFO_4 = PRINTER_INFO_4A;

alias PPRINTER_INFO_4 = Pointer[PRINTER_INFO_4A];

alias LPPRINTER_INFO_4 = Pointer[PRINTER_INFO_4A];

alias PRINTER_INFO_5 = PRINTER_INFO_5A;

alias PPRINTER_INFO_5 = Pointer[PRINTER_INFO_5A];

alias LPPRINTER_INFO_5 = Pointer[PRINTER_INFO_5A];

alias PRINTPROCESSOR_INFO_1 = PRINTPROCESSOR_INFO_1A;

alias PPRINTPROCESSOR_INFO_1 = Pointer[PRINTPROCESSOR_INFO_1A];

alias LPPRINTPROCESSOR_INFO_1 = Pointer[PRINTPROCESSOR_INFO_1A];

alias FORM_INFO_1 = FORM_INFO_1A;

alias PFORM_INFO_1 = Pointer[FORM_INFO_1A];

alias LPFORM_INFO_1 = Pointer[FORM_INFO_1A];

alias PRINTER_DEFAULTS = PRINTER_DEFAULTSA;

alias PPRINTER_DEFAULTS = Pointer[PRINTER_DEFAULTSA];

alias LPPRINTER_DEFAULTS = Pointer[PRINTER_DEFAULTSA];

alias PROVIDOR_INFO_1 = PROVIDOR_INFO_1A;

alias PPROVIDOR_INFO_1 = Pointer[PROVIDOR_INFO_1A];

alias LPROVIDOR_INFO_1 = Pointer[PROVIDOR_INFO_1A];

alias PROVIDOR_INFO_2 = PROVIDOR_INFO_2A;

alias PPROVIDOR_INFO_2 = Pointer[PROVIDOR_INFO_2A];

alias LPROVIDOR_INFO_2 = Pointer[PROVIDOR_INFO_2A];

alias u_char = CUChar;

alias u_short = UShort;

alias u_int = UInt;

alias u_long = CULong;

alias SOCKET = UInt;

record Struct_fd_set (
    fd_count : UInt,
    fd_array : Array[UInt,64],
);

alias fd_set = Struct_fd_set;

external (stdcall) __WSAFDIsSet(
    argument0 : UInt,
    argument1 : Pointer[fd_set]) Int;

record Struct_timeval (
    tv_sec : CLong,
    tv_usec : CLong,
);

record Struct_hostent (
    h_name : Pointer[CChar],
    h_aliases : Pointer[Pointer[CChar]],
    h_addrtype : Short,
    h_length : Short,
    h_addr_list : Pointer[Pointer[CChar]],
);

record Struct_linger (
    l_onoff : UShort,
    l_linger : UShort,
);

record Struct_netent (
    n_name : Pointer[CChar],
    n_aliases : Pointer[Pointer[CChar]],
    n_addrtype : Short,
    n_net : CULong,
);

record Struct_servent (
    s_name : Pointer[CChar],
    s_aliases : Pointer[Pointer[CChar]],
    s_port : Short,
    s_proto : Pointer[CChar],
);

record Struct_protoent (
    p_name : Pointer[CChar],
    p_aliases : Pointer[Pointer[CChar]],
    p_proto : Short,
);

record Struct_in_addr (
    S_un : AUnionType,
);

record Struct_sockaddr_in (
    sin_family : Short,
    sin_port : UShort,
    sin_addr : Struct_in_addr,
    sin_zero : Array[CChar,8],
);

record Struct_WSAData (
    wVersion : UShort,
    wHighVersion : UShort,
    szDescription : Array[CChar,257],
    szSystemStatus : Array[CChar,129],
    iMaxSockets : UShort,
    iMaxUdpDg : UShort,
    lpVendorInfo : Pointer[CChar],
);

alias WSADATA = Struct_WSAData;

alias LPWSADATA = Pointer[WSADATA];

record Struct_sockaddr (
    sa_family : UShort,
    sa_data : Array[CChar,14],
);

record Struct_sockaddr_storage (
    ss_family : Short,
    __ss_pad1 : Array[CChar,6],
    __ss_align : Int64,
    __ss_pad2 : Array[CChar,112],
);

record Struct_sockproto (
    sp_family : UShort,
    sp_protocol : UShort,
);

external (stdcall) accept(
    argument0 : UInt,
    argument1 : Pointer[Struct_sockaddr],
    argument2 : Pointer[Int]) UInt;

external (stdcall) bind(
    argument0 : UInt,
    argument1 : Pointer[Struct_sockaddr],
    argument2 : Int) Int;

external (stdcall) closesocket(
    argument0 : UInt) Int;

external (stdcall) connect(
    argument0 : UInt,
    argument1 : Pointer[Struct_sockaddr],
    argument2 : Int) Int;

external (stdcall) ioctlsocket(
    argument0 : UInt,
    argument1 : CLong,
    argument2 : Pointer[CULong]) Int;

external (stdcall) getpeername(
    argument0 : UInt,
    argument1 : Pointer[Struct_sockaddr],
    argument2 : Pointer[Int]) Int;

external (stdcall) getsockname(
    argument0 : UInt,
    argument1 : Pointer[Struct_sockaddr],
    argument2 : Pointer[Int]) Int;

external (stdcall) getsockopt(
    argument0 : UInt,
    argument1 : Int,
    argument2 : Int,
    argument3 : Pointer[CChar],
    argument4 : Pointer[Int]) Int;

external (stdcall) inet_addr(
    argument0 : Pointer[CChar]) CULong;

external (stdcall) inet_ntoa(
    argument0 : Struct_in_addr) Pointer[CChar];

external (stdcall) listen(
    argument0 : UInt,
    argument1 : Int) Int;

external (stdcall) recv(
    argument0 : UInt,
    argument1 : Pointer[CChar],
    argument2 : Int,
    argument3 : Int) Int;

external (stdcall) recvfrom(
    argument0 : UInt,
    argument1 : Pointer[CChar],
    argument2 : Int,
    argument3 : Int,
    argument4 : Pointer[Struct_sockaddr],
    argument5 : Pointer[Int]) Int;

external (stdcall) send(
    argument0 : UInt,
    argument1 : Pointer[CChar],
    argument2 : Int,
    argument3 : Int) Int;

external (stdcall) sendto(
    argument0 : UInt,
    argument1 : Pointer[CChar],
    argument2 : Int,
    argument3 : Int,
    argument4 : Pointer[Struct_sockaddr],
    argument5 : Int) Int;

external (stdcall) setsockopt(
    argument0 : UInt,
    argument1 : Int,
    argument2 : Int,
    argument3 : Pointer[CChar],
    argument4 : Int) Int;

external (stdcall) shutdown(
    argument0 : UInt,
    argument1 : Int) Int;

external (stdcall) socket(
    argument0 : Int,
    argument1 : Int,
    argument2 : Int) UInt;

external (stdcall) gethostbyaddr(
    argument0 : Pointer[CChar],
    argument1 : Int,
    argument2 : Int) Pointer[Struct_hostent];

external (stdcall) gethostbyname(
    argument0 : Pointer[CChar]) Pointer[Struct_hostent];

external (stdcall) getservbyport(
    argument0 : Int,
    argument1 : Pointer[CChar]) Pointer[Struct_servent];

external (stdcall) getservbyname(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar]) Pointer[Struct_servent];

external (stdcall) getprotobynumber(
    argument0 : Int) Pointer[Struct_protoent];

external (stdcall) getprotobyname(
    argument0 : Pointer[CChar]) Pointer[Struct_protoent];

alias LPFN_ACCEPT = StdCallCodePointer[(UInt,Pointer[Struct_sockaddr],Pointer[Int]),(UInt)];

alias LPFN_BIND = StdCallCodePointer[(UInt,Pointer[Struct_sockaddr],Int),(Int)];

alias LPFN_CLOSESOCKET = StdCallCodePointer[(UInt),(Int)];

alias LPFN_CONNECT = StdCallCodePointer[(UInt,Pointer[Struct_sockaddr],Int),(Int)];

alias LPFN_IOCTLSOCKET = StdCallCodePointer[(UInt,CLong,Pointer[CULong]),(Int)];

alias LPFN_GETPEERNAME = StdCallCodePointer[(UInt,Pointer[Struct_sockaddr],Pointer[Int]),(Int)];

alias LPFN_GETSOCKNAME = StdCallCodePointer[(UInt,Pointer[Struct_sockaddr],Pointer[Int]),(Int)];

alias LPFN_GETSOCKOPT = StdCallCodePointer[(UInt,Int,Int,Pointer[CChar],Pointer[Int]),(Int)];

alias LPFN_HTONL = StdCallCodePointer[(CULong),(CULong)];

alias LPFN_HTONS = StdCallCodePointer[(UShort),(UShort)];

alias LPFN_INET_ADDR = StdCallCodePointer[(Pointer[CChar]),(CULong)];

alias LPFN_INET_NTOA = StdCallCodePointer[(Struct_in_addr),(Pointer[CChar])];

alias LPFN_LISTEN = StdCallCodePointer[(UInt,Int),(Int)];

alias LPFN_NTOHL = StdCallCodePointer[(CULong),(CULong)];

alias LPFN_NTOHS = StdCallCodePointer[(UShort),(UShort)];

alias LPFN_RECV = StdCallCodePointer[(UInt,Pointer[CChar],Int,Int),(Int)];

alias LPFN_RECVFROM = StdCallCodePointer[(UInt,Pointer[CChar],Int,Int,Pointer[Struct_sockaddr],Pointer[Int]),(Int)];

alias LPFN_SELECT = StdCallCodePointer[(Int,Pointer[Struct_fd_set],Pointer[Struct_fd_set],Pointer[Struct_fd_set],Pointer[Struct_timeval]),(Int)];

alias LPFN_SEND = StdCallCodePointer[(UInt,Pointer[CChar],Int,Int),(Int)];

alias LPFN_SENDTO = StdCallCodePointer[(UInt,Pointer[CChar],Int,Int,Pointer[Struct_sockaddr],Int),(Int)];

alias LPFN_SETSOCKOPT = StdCallCodePointer[(UInt,Int,Int,Pointer[CChar],Int),(Int)];

alias LPFN_SHUTDOWN = StdCallCodePointer[(UInt,Int),(Int)];

alias LPFN_SOCKET = StdCallCodePointer[(Int,Int,Int),(UInt)];

alias LPFN_GETHOSTBYADDR = StdCallCodePointer[(Pointer[CChar],Int,Int),(Pointer[Struct_hostent])];

alias LPFN_GETHOSTBYNAME = StdCallCodePointer[(Pointer[CChar]),(Pointer[Struct_hostent])];

alias LPFN_GETHOSTNAME = StdCallCodePointer[(Pointer[CChar],Int),(Int)];

alias LPFN_GETSERVBYPORT = StdCallCodePointer[(Int,Pointer[CChar]),(Pointer[Struct_servent])];

alias LPFN_GETSERVBYNAME = StdCallCodePointer[(Pointer[CChar],Pointer[CChar]),(Pointer[Struct_servent])];

alias LPFN_GETPROTOBYNUMBER = StdCallCodePointer[(Int),(Pointer[Struct_protoent])];

alias LPFN_GETPROTOBYNAME = StdCallCodePointer[(Pointer[CChar]),(Pointer[Struct_protoent])];

external (stdcall) WSAStartup(
    argument0 : UShort,
    argument1 : LPWSADATA) Int;

external (stdcall) WSACleanup() Int;

external (stdcall) WSASetLastError(
    argument0 : Int);

external (stdcall) WSAGetLastError() Int;

alias LPFN_WSASTARTUP = StdCallCodePointer[(UShort,Pointer[Struct_WSAData]),(Int)];

alias LPFN_WSACLEANUP = StdCallCodePointer[(),(Int)];

alias LPFN_WSASETLASTERROR = StdCallCodePointer[(Int),()];

alias LPFN_WSAGETLASTERROR = StdCallCodePointer[(),(Int)];

external (stdcall) WSAIsBlocking() Int;

external (stdcall) WSAUnhookBlockingHook() Int;

external (stdcall) WSASetBlockingHook(
    argument0 : FARPROC) FARPROC;

external (stdcall) WSACancelBlockingCall() Int;

alias LPFN_WSAISBLOCKING = StdCallCodePointer[(),(Int)];

alias LPFN_WSAUNHOOKBLOCKINGHOOK = StdCallCodePointer[(),(Int)];

alias LPFN_WSASETBLOCKINGHOOK = StdCallCodePointer[(StdCallCodePointer[(),(Int)]),(StdCallCodePointer[(),(Int)])];

alias LPFN_WSACANCELBLOCKINGCALL = StdCallCodePointer[(),(Int)];

external (stdcall) WSAAsyncGetServByName(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : Pointer[CChar],
    argument3 : Pointer[CChar],
    argument4 : Pointer[CChar],
    argument5 : Int) HANDLE;

external (stdcall) WSAAsyncGetServByPort(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : Int,
    argument3 : Pointer[CChar],
    argument4 : Pointer[CChar],
    argument5 : Int) HANDLE;

external (stdcall) WSAAsyncGetProtoByName(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : Pointer[CChar],
    argument3 : Pointer[CChar],
    argument4 : Int) HANDLE;

external (stdcall) WSAAsyncGetProtoByNumber(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : Int,
    argument3 : Pointer[CChar],
    argument4 : Int) HANDLE;

external (stdcall) WSAAsyncGetHostByName(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : Pointer[CChar],
    argument3 : Pointer[CChar],
    argument4 : Int) HANDLE;

external (stdcall) WSAAsyncGetHostByAddr(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : Pointer[CChar],
    argument3 : Int,
    argument4 : Int,
    argument5 : Pointer[CChar],
    argument6 : Int) HANDLE;

external (stdcall) WSACancelAsyncRequest(
    argument0 : HANDLE) Int;

external (stdcall) WSAAsyncSelect(
    argument0 : UInt,
    argument1 : HWND,
    argument2 : UInt,
    argument3 : CLong) Int;

alias LPFN_WSAASYNCGETSERVBYNAME = StdCallCodePointer[(Pointer[Struct_HWND__],UInt,Pointer[CChar],Pointer[CChar],Pointer[CChar],Int),(RawPointer)];

alias LPFN_WSAASYNCGETSERVBYPORT = StdCallCodePointer[(Pointer[Struct_HWND__],UInt,Int,Pointer[CChar],Pointer[CChar],Int),(RawPointer)];

alias LPFN_WSAASYNCGETPROTOBYNAME = StdCallCodePointer[(Pointer[Struct_HWND__],UInt,Pointer[CChar],Pointer[CChar],Int),(RawPointer)];

alias LPFN_WSAASYNCGETPROTOBYNUMBER = StdCallCodePointer[(Pointer[Struct_HWND__],UInt,Int,Pointer[CChar],Int),(RawPointer)];

alias LPFN_WSAASYNCGETHOSTBYADDR = StdCallCodePointer[(Pointer[Struct_HWND__],UInt,Pointer[CChar],Int,Int,Pointer[CChar],Int),(RawPointer)];

alias LPFN_WSACANCELASYNCREQUEST = StdCallCodePointer[(RawPointer),(Int)];

alias LPFN_WSAASYNCSELECT = StdCallCodePointer[(UInt,Pointer[Struct_HWND__],UInt,CLong),(Int)];

external (stdcall) htonl(
    argument0 : CULong) CULong;

external (stdcall) ntohl(
    argument0 : CULong) CULong;

external (stdcall) htons(
    argument0 : UShort) UShort;

external (stdcall) ntohs(
    argument0 : UShort) UShort;

external (stdcall) select(
    nfds : Int,
    argument1 : Pointer[fd_set],
    argument2 : Pointer[fd_set],
    argument3 : Pointer[fd_set],
    argument4 : Pointer[Struct_timeval]) Int;

external (stdcall) gethostname(
    argument0 : Pointer[CChar],
    argument1 : Int) Int;

alias SOCKADDR = Struct_sockaddr;

alias PSOCKADDR = Pointer[Struct_sockaddr];

alias LPSOCKADDR = Pointer[Struct_sockaddr];

alias SOCKADDR_STORAGE = Struct_sockaddr_storage;

alias PSOCKADDR_STORAGE = Pointer[Struct_sockaddr_storage];

alias SOCKADDR_IN = Struct_sockaddr_in;

alias PSOCKADDR_IN = Pointer[Struct_sockaddr_in];

alias LPSOCKADDR_IN = Pointer[Struct_sockaddr_in];

alias LINGER = Struct_linger;

alias PLINGER = Pointer[Struct_linger];

alias LPLINGER = Pointer[Struct_linger];

alias IN_ADDR = Struct_in_addr;

alias PIN_ADDR = Pointer[Struct_in_addr];

alias LPIN_ADDR = Pointer[Struct_in_addr];

alias FD_SET = Struct_fd_set;

alias PFD_SET = Pointer[Struct_fd_set];

alias LPFD_SET = Pointer[Struct_fd_set];

alias HOSTENT = Struct_hostent;

alias PHOSTENT = Pointer[Struct_hostent];

alias LPHOSTENT = Pointer[Struct_hostent];

alias SERVENT = Struct_servent;

alias PSERVENT = Pointer[Struct_servent];

alias LPSERVENT = Pointer[Struct_servent];

alias PROTOENT = Struct_protoent;

alias PPROTOENT = Pointer[Struct_protoent];

alias LPPROTOENT = Pointer[Struct_protoent];

alias TIMEVAL = Struct_timeval;

alias PTIMEVAL = Pointer[Struct_timeval];

alias LPTIMEVAL = Pointer[Struct_timeval];

alias LPWSAOVERLAPPED = Pointer[Struct__OVERLAPPED];

record Struct__WSABUF (
    len : CULong,
    buf : Pointer[CChar],
);

alias WSABUF = Struct__WSABUF;

alias LPWSABUF = Pointer[Struct__WSABUF];

alias BestEffortService = 0;
alias ControlledLoadService = 1;
alias PredictiveService = 2;
alias GuaranteedDelayService = 3;
alias GuaranteedService = 4;

alias GUARANTEE = Int;

alias SERVICETYPE = UInt;

record Struct__flowspec (
    TokenRate : UInt,
    TokenBucketSize : UInt,
    PeakBandwidth : UInt,
    Latency : UInt,
    DelayVariation : UInt,
    ServiceType : UInt,
    MaxSduSize : UInt,
    MinimumPolicedSize : UInt,
);

alias FLOWSPEC = Struct__flowspec;

alias PFLOWSPEC = Pointer[Struct__flowspec];

alias LPFLOWSPEC = Pointer[Struct__flowspec];

record Struct__QualityOfService (
    SendingFlowspec : FLOWSPEC,
    ReceivingFlowspec : FLOWSPEC,
    ProviderSpecific : WSABUF,
);

alias QOS = Struct__QualityOfService;

alias LPQOS = Pointer[Struct__QualityOfService];

alias GROUP = UInt;

record Struct__WSANETWORKEVENTS (
    lNetworkEvents : CLong,
    iErrorCode : Array[Int,10],
);

alias WSANETWORKEVENTS = Struct__WSANETWORKEVENTS;

alias LPWSANETWORKEVENTS = Pointer[Struct__WSANETWORKEVENTS];

alias RNRSERVICE_REGISTER = 0;
alias RNRSERVICE_DEREGISTER = 1;
alias RNRSERVICE_DELETE = 2;

alias WSAESETSERVICEOP = Int;

alias PWSAESETSERVICEOP = Pointer[Int];

alias LPWSAESETSERVICEOP = Pointer[Int];

record Struct__AFPROTOCOLS (
    iAddressFamily : Int,
    iProtocol : Int,
);

alias AFPROTOCOLS = Struct__AFPROTOCOLS;

alias PAFPROTOCOLS = Pointer[Struct__AFPROTOCOLS];

alias LPAFPROTOCOLS = Pointer[Struct__AFPROTOCOLS];

alias COMP_EQUAL = 0;
alias COMP_NOTLESS = 1;

alias WSAECOMPARATOR = Int;

alias PWSAECOMPARATOR = Pointer[Int];

alias LPWSAECOMPARATOR = Pointer[Int];

record Struct__WSAVersion (
    dwVersion : CULong,
    ecHow : WSAECOMPARATOR,
);

alias WSAVERSION = Struct__WSAVersion;

alias PWSAVERSION = Pointer[Struct__WSAVersion];

alias LPWSAVERSION = Pointer[Struct__WSAVersion];

record Struct__SOCKET_ADDRESS (
    lpSockaddr : LPSOCKADDR,
    iSockaddrLength : Int,
);

alias SOCKET_ADDRESS = Struct__SOCKET_ADDRESS;

alias PSOCKET_ADDRESS = Pointer[Struct__SOCKET_ADDRESS];

alias LPSOCKET_ADDRESS = Pointer[Struct__SOCKET_ADDRESS];

record Struct__CSADDR_INFO (
    LocalAddr : SOCKET_ADDRESS,
    RemoteAddr : SOCKET_ADDRESS,
    iSocketType : Int,
    iProtocol : Int,
);

alias CSADDR_INFO = Struct__CSADDR_INFO;

alias PCSADDR_INFO = Pointer[Struct__CSADDR_INFO];

alias LPCSADDR_INFO = Pointer[Struct__CSADDR_INFO];

record Struct__SOCKET_ADDRESS_LIST (
    iAddressCount : Int,
    Address : Array[SOCKET_ADDRESS,1],
);

alias SOCKET_ADDRESS_LIST = Struct__SOCKET_ADDRESS_LIST;

alias LPSOCKET_ADDRESS_LIST = Pointer[Struct__SOCKET_ADDRESS_LIST];

record Struct__BLOB (
    cbSize : CULong,
    pBlobData : Pointer[CUChar],
);

alias BLOB = Struct__BLOB;

alias PBLOB = Pointer[Struct__BLOB];

alias LPBLOB = Pointer[Struct__BLOB];

record Struct__WSAQuerySetA (
    dwSize : CULong,
    lpszServiceInstanceName : LPSTR,
    lpServiceClassId : LPGUID,
    lpVersion : LPWSAVERSION,
    lpszComment : LPSTR,
    dwNameSpace : CULong,
    lpNSProviderId : LPGUID,
    lpszContext : LPSTR,
    dwNumberOfProtocols : CULong,
    lpafpProtocols : LPAFPROTOCOLS,
    lpszQueryString : LPSTR,
    dwNumberOfCsAddrs : CULong,
    lpcsaBuffer : LPCSADDR_INFO,
    dwOutputFlags : CULong,
    lpBlob : LPBLOB,
);

alias WSAQUERYSETA = Struct__WSAQuerySetA;

alias PWSAQUERYSETA = Pointer[Struct__WSAQuerySetA];

alias LPWSAQUERYSETA = Pointer[Struct__WSAQuerySetA];

record Struct__WSAQuerySetW (
    dwSize : CULong,
    lpszServiceInstanceName : LPWSTR,
    lpServiceClassId : LPGUID,
    lpVersion : LPWSAVERSION,
    lpszComment : LPWSTR,
    dwNameSpace : CULong,
    lpNSProviderId : LPGUID,
    lpszContext : LPWSTR,
    dwNumberOfProtocols : CULong,
    lpafpProtocols : LPAFPROTOCOLS,
    lpszQueryString : LPWSTR,
    dwNumberOfCsAddrs : CULong,
    lpcsaBuffer : LPCSADDR_INFO,
    dwOutputFlags : CULong,
    lpBlob : LPBLOB,
);

alias WSAQUERYSETW = Struct__WSAQuerySetW;

alias PWSAQUERYSETW = Pointer[Struct__WSAQuerySetW];

alias LPWSAQUERYSETW = Pointer[Struct__WSAQuerySetW];

alias WSAQUERYSET = WSAQUERYSETA;

alias PWSAQUERYSET = PWSAQUERYSETA;

alias LPWSAQUERYSET = LPWSAQUERYSETA;

record Struct__WSANSClassInfoA (
    lpszName : LPSTR,
    dwNameSpace : CULong,
    dwValueType : CULong,
    dwValueSize : CULong,
    lpValue : LPVOID,
);

alias WSANSCLASSINFOA = Struct__WSANSClassInfoA;

alias PWSANSCLASSINFOA = Pointer[Struct__WSANSClassInfoA];

alias LPWSANSCLASSINFOA = Pointer[Struct__WSANSClassInfoA];

record Struct__WSANSClassInfoW (
    lpszName : LPWSTR,
    dwNameSpace : CULong,
    dwValueType : CULong,
    dwValueSize : CULong,
    lpValue : LPVOID,
);

alias WSANSCLASSINFOW = Struct__WSANSClassInfoW;

alias PWSANSCLASSINFOW = Pointer[Struct__WSANSClassInfoW];

alias LPWSANSCLASSINFOW = Pointer[Struct__WSANSClassInfoW];

alias WSANSCLASSINFO = WSANSCLASSINFOA;

alias PWSANSCLASSINFO = PWSANSCLASSINFOA;

alias LPWSANSCLASSINFO = LPWSANSCLASSINFOA;

record Struct__WSAServiceClassInfoA (
    lpServiceClassId : LPGUID,
    lpszServiceClassName : LPSTR,
    dwCount : CULong,
    lpClassInfos : LPWSANSCLASSINFOA,
);

alias WSASERVICECLASSINFOA = Struct__WSAServiceClassInfoA;

alias PWSASERVICECLASSINFOA = Pointer[Struct__WSAServiceClassInfoA];

alias LPWSASERVICECLASSINFOA = Pointer[Struct__WSAServiceClassInfoA];

record Struct__WSAServiceClassInfoW (
    lpServiceClassId : LPGUID,
    lpszServiceClassName : LPWSTR,
    dwCount : CULong,
    lpClassInfos : LPWSANSCLASSINFOW,
);

alias WSASERVICECLASSINFOW = Struct__WSAServiceClassInfoW;

alias PWSASERVICECLASSINFOW = Pointer[Struct__WSAServiceClassInfoW];

alias LPWSASERVICECLASSINFOW = Pointer[Struct__WSAServiceClassInfoW];

alias WSASERVICECLASSINFO = WSASERVICECLASSINFOA;

alias PWSASERVICECLASSINFO = PWSASERVICECLASSINFOA;

alias LPWSASERVICECLASSINFO = LPWSASERVICECLASSINFOA;

record Struct__WSANAMESPACE_INFOA (
    NSProviderId : GUID,
    dwNameSpace : CULong,
    fActive : Int,
    dwVersion : CULong,
    lpszIdentifier : LPSTR,
);

alias WSANAMESPACE_INFOA = Struct__WSANAMESPACE_INFOA;

alias PWSANAMESPACE_INFOA = Pointer[Struct__WSANAMESPACE_INFOA];

alias LPWSANAMESPACE_INFOA = Pointer[Struct__WSANAMESPACE_INFOA];

record Struct__WSANAMESPACE_INFOW (
    NSProviderId : GUID,
    dwNameSpace : CULong,
    fActive : Int,
    dwVersion : CULong,
    lpszIdentifier : LPWSTR,
);

alias WSANAMESPACE_INFOW = Struct__WSANAMESPACE_INFOW;

alias PWSANAMESPACE_INFOW = Pointer[Struct__WSANAMESPACE_INFOW];

alias LPWSANAMESPACE_INFOW = Pointer[Struct__WSANAMESPACE_INFOW];

alias WSANAMESPACE_INFO = WSANAMESPACE_INFOA;

alias PWSANAMESPACE_INFO = PWSANAMESPACE_INFOA;

alias LPWSANAMESPACE_INFO = LPWSANAMESPACE_INFOA;

record Struct__WSAPROTOCOLCHAIN (
    ChainLen : Int,
    ChainEntries : Array[CULong,7],
);

alias WSAPROTOCOLCHAIN = Struct__WSAPROTOCOLCHAIN;

alias LPWSAPROTOCOLCHAIN = Pointer[Struct__WSAPROTOCOLCHAIN];

record Struct__WSAPROTOCOL_INFOA (
    dwServiceFlags1 : CULong,
    dwServiceFlags2 : CULong,
    dwServiceFlags3 : CULong,
    dwServiceFlags4 : CULong,
    dwProviderFlags : CULong,
    ProviderId : GUID,
    dwCatalogEntryId : CULong,
    ProtocolChain : WSAPROTOCOLCHAIN,
    iVersion : Int,
    iAddressFamily : Int,
    iMaxSockAddr : Int,
    iMinSockAddr : Int,
    iSocketType : Int,
    iProtocol : Int,
    iProtocolMaxOffset : Int,
    iNetworkByteOrder : Int,
    iSecurityScheme : Int,
    dwMessageSize : CULong,
    dwProviderReserved : CULong,
    szProtocol : Array[CChar,256],
);

alias WSAPROTOCOL_INFOA = Struct__WSAPROTOCOL_INFOA;

alias LPWSAPROTOCOL_INFOA = Pointer[Struct__WSAPROTOCOL_INFOA];

record Struct__WSAPROTOCOL_INFOW (
    dwServiceFlags1 : CULong,
    dwServiceFlags2 : CULong,
    dwServiceFlags3 : CULong,
    dwServiceFlags4 : CULong,
    dwProviderFlags : CULong,
    ProviderId : GUID,
    dwCatalogEntryId : CULong,
    ProtocolChain : WSAPROTOCOLCHAIN,
    iVersion : Int,
    iAddressFamily : Int,
    iMaxSockAddr : Int,
    iMinSockAddr : Int,
    iSocketType : Int,
    iProtocol : Int,
    iProtocolMaxOffset : Int,
    iNetworkByteOrder : Int,
    iSecurityScheme : Int,
    dwMessageSize : CULong,
    dwProviderReserved : CULong,
    szProtocol : Array[UShort,256],
);

alias WSAPROTOCOL_INFOW = Struct__WSAPROTOCOL_INFOW;

alias LPWSAPROTOCOL_INFOW = Pointer[Struct__WSAPROTOCOL_INFOW];

alias LPCONDITIONPROC = StdCallCodePointer[(Pointer[Struct__WSABUF],Pointer[Struct__WSABUF],Pointer[Struct__QualityOfService],Pointer[Struct__QualityOfService],Pointer[Struct__WSABUF],Pointer[Struct__WSABUF],Pointer[UInt],CULong),(Int)];

alias LPWSAOVERLAPPED_COMPLETION_ROUTINE = StdCallCodePointer[(CULong,CULong,Pointer[Struct__OVERLAPPED],CULong),()];

alias WSAPROTOCOL_INFO = WSAPROTOCOL_INFOA;

alias LPWSAPROTOCOL_INFO = LPWSAPROTOCOL_INFOA;

alias NSP_NOTIFY_IMMEDIATELY = 0;
alias NSP_NOTIFY_HWND = 1;
alias NSP_NOTIFY_EVENT = 2;
alias NSP_NOTIFY_PORT = 3;
alias NSP_NOTIFY_APC = 4;

alias WSACOMPLETIONTYPE = Int;

alias PWSACOMPLETIONTYPE = Pointer[Int];

alias LPWSACOMPLETIONTYPE = Pointer[Int];

record Struct__WSACOMPLETION (
    Type : WSACOMPLETIONTYPE,
    Parameters : AUnionType,
);

alias WSACOMPLETION = Struct__WSACOMPLETION;

alias PWSACOMPLETION = Pointer[Struct__WSACOMPLETION];

alias LPWSACOMPLETION = Pointer[Struct__WSACOMPLETION];

external (stdcall) WSAAccept(
    argument0 : UInt,
    argument1 : Pointer[Struct_sockaddr],
    argument2 : LPINT,
    argument3 : LPCONDITIONPROC,
    argument4 : CULong) UInt;

external (stdcall) WSAAddressToStringA(
    argument0 : LPSOCKADDR,
    argument1 : CULong,
    argument2 : LPWSAPROTOCOL_INFOA,
    argument3 : LPSTR,
    argument4 : LPDWORD) Int;

external (stdcall) WSAAddressToStringW(
    argument0 : LPSOCKADDR,
    argument1 : CULong,
    argument2 : LPWSAPROTOCOL_INFOW,
    argument3 : LPWSTR,
    argument4 : LPDWORD) Int;

external (stdcall) WSACloseEvent(
    argument0 : HANDLE) Int;

external (stdcall) WSAConnect(
    argument0 : UInt,
    argument1 : Pointer[Struct_sockaddr],
    argument2 : Int,
    argument3 : LPWSABUF,
    argument4 : LPWSABUF,
    argument5 : LPQOS,
    argument6 : LPQOS) Int;

external (stdcall) WSACreateEvent() HANDLE;

external (stdcall) WSADuplicateSocketA(
    argument0 : UInt,
    argument1 : CULong,
    argument2 : LPWSAPROTOCOL_INFOA) Int;

external (stdcall) WSADuplicateSocketW(
    argument0 : UInt,
    argument1 : CULong,
    argument2 : LPWSAPROTOCOL_INFOW) Int;

external (stdcall) WSAEnumNameSpaceProvidersA(
    argument0 : LPDWORD,
    argument1 : LPWSANAMESPACE_INFOA) Int;

external (stdcall) WSAEnumNameSpaceProvidersW(
    argument0 : LPDWORD,
    argument1 : LPWSANAMESPACE_INFOW) Int;

external (stdcall) WSAEnumNetworkEvents(
    argument0 : UInt,
    argument1 : HANDLE,
    argument2 : LPWSANETWORKEVENTS) Int;

external (stdcall) WSAEnumProtocolsA(
    argument0 : LPINT,
    argument1 : LPWSAPROTOCOL_INFOA,
    argument2 : LPDWORD) Int;

external (stdcall) WSAEnumProtocolsW(
    argument0 : LPINT,
    argument1 : LPWSAPROTOCOL_INFOW,
    argument2 : LPDWORD) Int;

external (stdcall) WSAEventSelect(
    argument0 : UInt,
    argument1 : HANDLE,
    argument2 : CLong) Int;

external (stdcall) WSAGetOverlappedResult(
    argument0 : UInt,
    argument1 : LPWSAOVERLAPPED,
    argument2 : LPDWORD,
    argument3 : Int,
    argument4 : LPDWORD) Int;

external (stdcall) WSAGetQOSByName(
    argument0 : UInt,
    argument1 : LPWSABUF,
    argument2 : LPQOS) Int;

external (stdcall) WSAGetServiceClassInfoA(
    argument0 : LPGUID,
    argument1 : LPGUID,
    argument2 : LPDWORD,
    argument3 : LPWSASERVICECLASSINFOA) Int;

external (stdcall) WSAGetServiceClassInfoW(
    argument0 : LPGUID,
    argument1 : LPGUID,
    argument2 : LPDWORD,
    argument3 : LPWSASERVICECLASSINFOW) Int;

external (stdcall) WSAGetServiceClassNameByClassIdA(
    argument0 : LPGUID,
    argument1 : LPSTR,
    argument2 : LPDWORD) Int;

external (stdcall) WSAGetServiceClassNameByClassIdW(
    argument0 : LPGUID,
    argument1 : LPWSTR,
    argument2 : LPDWORD) Int;

external (stdcall) WSAHtonl(
    argument0 : UInt,
    argument1 : CULong,
    argument2 : Pointer[CULong]) Int;

external (stdcall) WSAHtons(
    argument0 : UInt,
    argument1 : UShort,
    argument2 : Pointer[UShort]) Int;

external (stdcall) WSAInstallServiceClassA(
    argument0 : LPWSASERVICECLASSINFOA) Int;

external (stdcall) WSAInstallServiceClassW(
    argument0 : LPWSASERVICECLASSINFOW) Int;

external (stdcall) WSAIoctl(
    argument0 : UInt,
    argument1 : CULong,
    argument2 : LPVOID,
    argument3 : CULong,
    argument4 : LPVOID,
    argument5 : CULong,
    argument6 : LPDWORD,
    argument7 : LPWSAOVERLAPPED,
    argument8 : LPWSAOVERLAPPED_COMPLETION_ROUTINE) Int;

external (stdcall) WSAJoinLeaf(
    argument0 : UInt,
    argument1 : Pointer[Struct_sockaddr],
    argument2 : Int,
    argument3 : LPWSABUF,
    argument4 : LPWSABUF,
    argument5 : LPQOS,
    argument6 : LPQOS,
    argument7 : CULong) UInt;

external (stdcall) WSALookupServiceBeginA(
    argument0 : LPWSAQUERYSETA,
    argument1 : CULong,
    argument2 : LPHANDLE) Int;

external (stdcall) WSALookupServiceBeginW(
    lpqsRestrictions : LPWSAQUERYSETW,
    argument1 : CULong,
    argument2 : LPHANDLE) Int;

external (stdcall) WSALookupServiceNextA(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : LPDWORD,
    argument3 : LPWSAQUERYSETA) Int;

external (stdcall) WSALookupServiceNextW(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : LPDWORD,
    argument3 : LPWSAQUERYSETW) Int;

external (stdcall) WSALookupServiceEnd(
    argument0 : HANDLE) Int;

external (stdcall) WSANSPIoctl(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : LPVOID,
    argument3 : CULong,
    argument4 : LPVOID,
    argument5 : CULong,
    argument6 : LPDWORD,
    argument7 : LPWSACOMPLETION) Int;

external (stdcall) WSANtohl(
    argument0 : UInt,
    argument1 : CULong,
    argument2 : Pointer[CULong]) Int;

external (stdcall) WSANtohs(
    argument0 : UInt,
    argument1 : UShort,
    argument2 : Pointer[UShort]) Int;

external (stdcall) WSARecv(
    argument0 : UInt,
    argument1 : LPWSABUF,
    argument2 : CULong,
    argument3 : LPDWORD,
    argument4 : LPDWORD,
    argument5 : LPWSAOVERLAPPED,
    argument6 : LPWSAOVERLAPPED_COMPLETION_ROUTINE) Int;

external (stdcall) WSARecvDisconnect(
    argument0 : UInt,
    argument1 : LPWSABUF) Int;

external (stdcall) WSARecvFrom(
    argument0 : UInt,
    argument1 : LPWSABUF,
    argument2 : CULong,
    argument3 : LPDWORD,
    argument4 : LPDWORD,
    argument5 : Pointer[Struct_sockaddr],
    argument6 : LPINT,
    argument7 : LPWSAOVERLAPPED,
    argument8 : LPWSAOVERLAPPED_COMPLETION_ROUTINE) Int;

external (stdcall) WSARemoveServiceClass(
    argument0 : LPGUID) Int;

external (stdcall) WSAResetEvent(
    argument0 : HANDLE) Int;

external (stdcall) WSASend(
    argument0 : UInt,
    argument1 : LPWSABUF,
    argument2 : CULong,
    argument3 : LPDWORD,
    argument4 : CULong,
    argument5 : LPWSAOVERLAPPED,
    argument6 : LPWSAOVERLAPPED_COMPLETION_ROUTINE) Int;

external (stdcall) WSASendDisconnect(
    argument0 : UInt,
    argument1 : LPWSABUF) Int;

external (stdcall) WSASendTo(
    argument0 : UInt,
    argument1 : LPWSABUF,
    argument2 : CULong,
    argument3 : LPDWORD,
    argument4 : CULong,
    argument5 : Pointer[Struct_sockaddr],
    argument6 : Int,
    argument7 : LPWSAOVERLAPPED,
    argument8 : LPWSAOVERLAPPED_COMPLETION_ROUTINE) Int;

external (stdcall) WSASetEvent(
    argument0 : HANDLE) Int;

external (stdcall) WSASetServiceA(
    argument0 : LPWSAQUERYSETA,
    argument1 : WSAESETSERVICEOP,
    argument2 : CULong) Int;

external (stdcall) WSASetServiceW(
    argument0 : LPWSAQUERYSETW,
    argument1 : WSAESETSERVICEOP,
    argument2 : CULong) Int;

external (stdcall) WSASocketA(
    argument0 : Int,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPWSAPROTOCOL_INFOA,
    argument4 : UInt,
    argument5 : CULong) UInt;

external (stdcall) WSASocketW(
    argument0 : Int,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPWSAPROTOCOL_INFOW,
    argument4 : UInt,
    argument5 : CULong) UInt;

external (stdcall) WSAStringToAddressA(
    argument0 : LPSTR,
    argument1 : Int,
    argument2 : LPWSAPROTOCOL_INFOA,
    argument3 : LPSOCKADDR,
    argument4 : LPINT) Int;

external (stdcall) WSAStringToAddressW(
    argument0 : LPWSTR,
    argument1 : Int,
    argument2 : LPWSAPROTOCOL_INFOW,
    argument3 : LPSOCKADDR,
    argument4 : LPINT) Int;

external (stdcall) WSAWaitForMultipleEvents(
    argument0 : CULong,
    argument1 : Pointer[HANDLE],
    argument2 : Int,
    argument3 : CULong,
    argument4 : Int) CULong;

alias LPFN_WSAACCEPT = StdCallCodePointer[(UInt,Pointer[Struct_sockaddr],Pointer[Int],StdCallCodePointer[(Pointer[Struct__WSABUF],Pointer[Struct__WSABUF],Pointer[Struct__QualityOfService],Pointer[Struct__QualityOfService],Pointer[Struct__WSABUF],Pointer[Struct__WSABUF],Pointer[UInt],CULong),(Int)],CULong),(UInt)];

alias LPFN_WSAADDRESSTOSTRINGA = StdCallCodePointer[(Pointer[Struct_sockaddr],CULong,Pointer[Struct__WSAPROTOCOL_INFOA],Pointer[CChar],Pointer[CULong]),(Int)];

alias LPFN_WSAADDRESSTOSTRINGW = StdCallCodePointer[(Pointer[Struct_sockaddr],CULong,Pointer[Struct__WSAPROTOCOL_INFOW],Pointer[UShort],Pointer[CULong]),(Int)];

alias LPFN_WSACLOSEEVENT = StdCallCodePointer[(RawPointer),(Int)];

alias LPFN_WSACONNECT = StdCallCodePointer[(UInt,Pointer[Struct_sockaddr],Int,Pointer[Struct__WSABUF],Pointer[Struct__WSABUF],Pointer[Struct__QualityOfService],Pointer[Struct__QualityOfService]),(Int)];

alias LPFN_WSACREATEEVENT = StdCallCodePointer[(),(RawPointer)];

alias LPFN_WSADUPLICATESOCKETA = StdCallCodePointer[(UInt,CULong,Pointer[Struct__WSAPROTOCOL_INFOA]),(Int)];

alias LPFN_WSADUPLICATESOCKETW = StdCallCodePointer[(UInt,CULong,Pointer[Struct__WSAPROTOCOL_INFOW]),(Int)];

alias LPFN_WSAENUMNAMESPACEPROVIDERSA = StdCallCodePointer[(Pointer[CULong],Pointer[Struct__WSANAMESPACE_INFOA]),(Int)];

alias LPFN_WSAENUMNAMESPACEPROVIDERSW = StdCallCodePointer[(Pointer[CULong],Pointer[Struct__WSANAMESPACE_INFOW]),(Int)];

alias LPFN_WSAENUMNETWORKEVENTS = StdCallCodePointer[(UInt,RawPointer,Pointer[Struct__WSANETWORKEVENTS]),(Int)];

alias LPFN_WSAENUMPROTOCOLSA = StdCallCodePointer[(Pointer[Int],Pointer[Struct__WSAPROTOCOL_INFOA],Pointer[CULong]),(Int)];

alias LPFN_WSAENUMPROTOCOLSW = StdCallCodePointer[(Pointer[Int],Pointer[Struct__WSAPROTOCOL_INFOW],Pointer[CULong]),(Int)];

alias LPFN_WSAEVENTSELECT = StdCallCodePointer[(UInt,RawPointer,CLong),(Int)];

alias LPFN_WSAGETOVERLAPPEDRESULT = StdCallCodePointer[(UInt,Pointer[Struct__OVERLAPPED],Pointer[CULong],Int,Pointer[CULong]),(Int)];

alias LPFN_WSAGETQOSBYNAME = StdCallCodePointer[(UInt,Pointer[Struct__WSABUF],Pointer[Struct__QualityOfService]),(Int)];

alias LPFN_WSAGETSERVICECLASSINFOA = StdCallCodePointer[(Pointer[Struct__GUID],Pointer[Struct__GUID],Pointer[CULong],Pointer[Struct__WSAServiceClassInfoA]),(Int)];

alias LPFN_WSAGETSERVICECLASSINFOW = StdCallCodePointer[(Pointer[Struct__GUID],Pointer[Struct__GUID],Pointer[CULong],Pointer[Struct__WSAServiceClassInfoW]),(Int)];

alias LPFN_WSAGETSERVICECLASSNAMEBYCLASSIDA = StdCallCodePointer[(Pointer[Struct__GUID],Pointer[CChar],Pointer[CULong]),(Int)];

alias LPFN_WSAGETSERVICECLASSNAMEBYCLASSIDW = StdCallCodePointer[(Pointer[Struct__GUID],Pointer[UShort],Pointer[CULong]),(Int)];

alias LPFN_WSAHTONL = StdCallCodePointer[(UInt,CULong,Pointer[CULong]),(Int)];

alias LPFN_WSAHTONS = StdCallCodePointer[(UInt,UShort,Pointer[UShort]),(Int)];

alias LPFN_WSAINSTALLSERVICECLASSA = StdCallCodePointer[(Pointer[Struct__WSAServiceClassInfoA]),(Int)];

alias LPFN_WSAINSTALLSERVICECLASSW = StdCallCodePointer[(Pointer[Struct__WSAServiceClassInfoW]),(Int)];

alias LPFN_WSAIOCTL = StdCallCodePointer[(UInt,CULong,RawPointer,CULong,RawPointer,CULong,Pointer[CULong],Pointer[Struct__OVERLAPPED],StdCallCodePointer[(CULong,CULong,Pointer[Struct__OVERLAPPED],CULong),()]),(Int)];

alias LPFN_WSAJOINLEAF = StdCallCodePointer[(UInt,Pointer[Struct_sockaddr],Int,Pointer[Struct__WSABUF],Pointer[Struct__WSABUF],Pointer[Struct__QualityOfService],Pointer[Struct__QualityOfService],CULong),(UInt)];

alias LPFN_WSALOOKUPSERVICEBEGINA = StdCallCodePointer[(Pointer[Struct__WSAQuerySetA],CULong,Pointer[RawPointer]),(Int)];

alias LPFN_WSALOOKUPSERVICEBEGINW = StdCallCodePointer[(Pointer[Struct__WSAQuerySetW],CULong,Pointer[RawPointer]),(Int)];

alias LPFN_WSALOOKUPSERVICENEXTA = StdCallCodePointer[(RawPointer,CULong,Pointer[CULong],Pointer[Struct__WSAQuerySetA]),(Int)];

alias LPFN_WSALOOKUPSERVICENEXTW = StdCallCodePointer[(RawPointer,CULong,Pointer[CULong],Pointer[Struct__WSAQuerySetW]),(Int)];

alias LPFN_WSALOOKUPSERVICEEND = StdCallCodePointer[(RawPointer),(Int)];

alias LPFN_WSANSPIoctl = StdCallCodePointer[(RawPointer,CULong,RawPointer,CULong,RawPointer,CULong,Pointer[CULong],Pointer[Struct__WSACOMPLETION]),(Int)];

alias LPFN_WSANTOHL = StdCallCodePointer[(UInt,CULong,Pointer[CULong]),(Int)];

alias LPFN_WSANTOHS = StdCallCodePointer[(UInt,UShort,Pointer[UShort]),(Int)];

alias LPFN_WSARECV = StdCallCodePointer[(UInt,Pointer[Struct__WSABUF],CULong,Pointer[CULong],Pointer[CULong],Pointer[Struct__OVERLAPPED],StdCallCodePointer[(CULong,CULong,Pointer[Struct__OVERLAPPED],CULong),()]),(Int)];

alias LPFN_WSARECVDISCONNECT = StdCallCodePointer[(UInt,Pointer[Struct__WSABUF]),(Int)];

alias LPFN_WSARECVFROM = StdCallCodePointer[(UInt,Pointer[Struct__WSABUF],CULong,Pointer[CULong],Pointer[CULong],Pointer[Struct_sockaddr],Pointer[Int],Pointer[Struct__OVERLAPPED],StdCallCodePointer[(CULong,CULong,Pointer[Struct__OVERLAPPED],CULong),()]),(Int)];

alias LPFN_WSAREMOVESERVICECLASS = StdCallCodePointer[(Pointer[Struct__GUID]),(Int)];

alias LPFN_WSARESETEVENT = StdCallCodePointer[(RawPointer),(Int)];

alias LPFN_WSASEND = StdCallCodePointer[(UInt,Pointer[Struct__WSABUF],CULong,Pointer[CULong],CULong,Pointer[Struct__OVERLAPPED],StdCallCodePointer[(CULong,CULong,Pointer[Struct__OVERLAPPED],CULong),()]),(Int)];

alias LPFN_WSASENDDISCONNECT = StdCallCodePointer[(UInt,Pointer[Struct__WSABUF]),(Int)];

alias LPFN_WSASENDTO = StdCallCodePointer[(UInt,Pointer[Struct__WSABUF],CULong,Pointer[CULong],CULong,Pointer[Struct_sockaddr],Int,Pointer[Struct__OVERLAPPED],StdCallCodePointer[(CULong,CULong,Pointer[Struct__OVERLAPPED],CULong),()]),(Int)];

alias LPFN_WSASETEVENT = StdCallCodePointer[(RawPointer),(Int)];

alias LPFN_WSASETSERVICEA = StdCallCodePointer[(Pointer[Struct__WSAQuerySetA],Int,CULong),(Int)];

alias LPFN_WSASETSERVICEW = StdCallCodePointer[(Pointer[Struct__WSAQuerySetW],Int,CULong),(Int)];

alias LPFN_WSASOCKETA = StdCallCodePointer[(Int,Int,Int,Pointer[Struct__WSAPROTOCOL_INFOA],UInt,CULong),(UInt)];

alias LPFN_WSASOCKETW = StdCallCodePointer[(Int,Int,Int,Pointer[Struct__WSAPROTOCOL_INFOW],UInt,CULong),(UInt)];

alias LPFN_WSASTRINGTOADDRESSA = StdCallCodePointer[(Pointer[CChar],Int,Pointer[Struct__WSAPROTOCOL_INFOA],Pointer[Struct_sockaddr],Pointer[Int]),(Int)];

alias LPFN_WSASTRINGTOADDRESSW = StdCallCodePointer[(Pointer[UShort],Int,Pointer[Struct__WSAPROTOCOL_INFOW],Pointer[Struct_sockaddr],Pointer[Int]),(Int)];

alias LPFN_WSAWAITFORMULTIPLEEVENTS = StdCallCodePointer[(CULong,Pointer[RawPointer],Int,CULong,Int),(CULong)];

record UnnamedStruct26 (
    LookupContext : RPC_NS_HANDLE,
    ProposedHandle : RPC_BINDING_HANDLE,
    Bindings : Pointer[RPC_BINDING_VECTOR],
);

alias RPC_IMPORT_CONTEXT_P = UnnamedStruct26;

alias PRPC_IMPORT_CONTEXT_P = Pointer[UnnamedStruct26];

external (stdcall) I_RpcNsGetBuffer(
    argument0 : PRPC_MESSAGE) CLong;

external (stdcall) I_RpcNsSendReceive(
    argument0 : PRPC_MESSAGE,
    argument1 : Pointer[RPC_BINDING_HANDLE]) CLong;

external (stdcall) I_RpcNsRaiseException(
    argument0 : PRPC_MESSAGE,
    argument1 : CLong);

external (stdcall) I_RpcReBindBuffer(
    argument0 : PRPC_MESSAGE) CLong;

external (stdcall) I_NsServerBindSearch() CLong;

external (stdcall) I_NsClientBindSearch() CLong;

external (stdcall) I_NsClientBindDone();

alias LPMONIKER = Pointer[Struct_IMoniker];

alias LPSTREAM = Pointer[Struct_IStream];

alias LPMARSHAL = Pointer[Struct_IMarshal];

alias LPMALLOC = Pointer[Struct_IMalloc];

alias LPMALLOCSPY = Pointer[Struct_IMallocSpy];

alias LPMESSAGEFILTER = Pointer[Struct_IMessageFilter];

alias LPPERSIST = Pointer[Struct_IPersist];

alias LPPERSISTSTREAM = Pointer[Struct_IPersistStream];

alias LPRUNNINGOBJECTTABLE = Pointer[Struct_IRunningObjectTable];

alias LPBINDCTX = Pointer[Struct_IBindCtx];

alias LPBC = Pointer[Struct_IBindCtx];

alias LPADVISESINK = Pointer[Struct_IAdviseSink];

alias LPADVISESINK2 = Pointer[Struct_IAdviseSink2];

alias LPDATAOBJECT = Pointer[Struct_IDataObject];

alias LPDATAADVISEHOLDER = Pointer[Struct_IDataAdviseHolder];

alias LPENUMMONIKER = Pointer[Struct_IEnumMoniker];

alias LPENUMFORMATETC = Pointer[Struct_IEnumFORMATETC];

alias LPENUMSTATDATA = Pointer[Struct_IEnumSTATDATA];

alias LPENUMSTATSTG = Pointer[Struct_IEnumSTATSTG];

alias LPENUMSTATPROPSTG = Struct_IEnumSTATPROPSTG;

alias LPENUMSTRING = Pointer[Struct_IEnumString];

alias LPENUMUNKNOWN = Pointer[Struct_IEnumUnknown];

alias LPSTORAGE = Pointer[Struct_IStorage];

alias LPPERSISTSTORAGE = Pointer[Struct_IPersistStorage];

alias LPLOCKBYTES = Pointer[Struct_ILockBytes];

alias LPSTDMARSHALINFO = Pointer[Struct_IStdMarshalInfo];

alias LPEXTERNALCONNECTION = Pointer[Struct_IExternalConnection];

alias LPRUNNABLEOBJECT = Pointer[Struct_IRunnableObject];

alias LPROTDATA = Pointer[Struct_IROTData];

alias LPPERSISTFILE = Pointer[Struct_IPersistFile];

alias LPROOTSTORAGE = Pointer[Struct_IRootStorage];

alias LPRPCCHANNELBUFFER = Pointer[Struct_IRpcChannelBuffer];

alias LPRPCPROXYBUFFER = Pointer[Struct_IRpcProxyBuffer];

alias LPRPCSTUBBUFFER = Pointer[Struct_IRpcStubBuffer];

alias LPPROPERTYSTORAGE = Pointer[Struct_IPropertyStorage];

alias LPENUMSTATPROPSETSTG = Pointer[Struct_IEnumSTATPROPSETSTG];

alias LPPROPERTYSETSTORAGE = Pointer[Struct_IPropertySetStorage];

alias LPCLIENTSECURITY = Pointer[Struct_IClientSecurity];

alias LPSERVERSECURITY = Pointer[Struct_IServerSecurity];

alias LPCLASSACTIVATOR = Pointer[Struct_IClassActivator];

alias LPFILLLOCKBYTES = Pointer[Struct_IFillLockBytes];

alias LPPROGRESSNOTIFY = Pointer[Struct_IProgressNotify];

alias LPLAYOUTSTORAGE = Pointer[Struct_ILayoutStorage];

alias byte = CUChar;

alias boolean = CUChar;

alias NDR_CCONTEXT = RawPointer;

record UnnamedStruct27 (
    pad : Array[RawPointer,2],
    userContext : RawPointer,
);

alias NDR_SCONTEXT = Pointer[UnnamedStruct27];

alias NDR_RUNDOWN = StdCallCodePointer[(RawPointer),()];

record Struct__SCONTEXT_QUEUE (
    NumberOfObjects : CULong,
    ArrayOfObjects : Pointer[NDR_SCONTEXT],
);

alias SCONTEXT_QUEUE = Struct__SCONTEXT_QUEUE;

alias PSCONTEXT_QUEUE = Pointer[Struct__SCONTEXT_QUEUE];

alias RPC_BUFPTR = Pointer[CUChar];

alias RPC_LENGTH = CULong;

alias EXPR_EVAL = StdCallCodePointer[(Pointer[Struct__MIDL_STUB_MESSAGE]),()];

alias PFORMAT_STRING = Pointer[CUChar];

record UnnamedStruct28 (
    Dimension : CLong,
    BufferConformanceMark : Pointer[CULong],
    BufferVarianceMark : Pointer[CULong],
    MaxCountArray : Pointer[CULong],
    OffsetArray : Pointer[CULong],
    ActualCountArray : Pointer[CULong],
);

alias ARRAY_INFO = UnnamedStruct28;

alias PARRAY_INFO = Pointer[UnnamedStruct28];

external (stdcall) NDRCContextBinding(
    argument0 : NDR_CCONTEXT) RPC_BINDING_HANDLE;

external (stdcall) NDRCContextMarshall(
    argument0 : NDR_CCONTEXT,
    argument1 : RawPointer);

external (stdcall) NDRCContextUnmarshall(
    argument0 : Pointer[NDR_CCONTEXT],
    argument1 : RPC_BINDING_HANDLE,
    argument2 : RawPointer,
    argument3 : CULong);

external (stdcall) NDRSContextMarshall(
    argument0 : NDR_SCONTEXT,
    argument1 : RawPointer,
    argument2 : NDR_RUNDOWN);

external (stdcall) NDRSContextUnmarshall(
    pBuff : RawPointer,
    argument1 : CULong) NDR_SCONTEXT;

external (stdcall) RpcSsDestroyClientContext(
    argument0 : Pointer[RawPointer]);

external (stdcall) NDRcopy(
    argument0 : RawPointer,
    argument1 : RawPointer,
    argument2 : UInt);

external (stdcall) MIDL_wchar_strlen(
    argument0 : Pointer[UShort]) UInt;

external (stdcall) MIDL_wchar_strcpy(
    argument0 : RawPointer,
    argument1 : Pointer[UShort]);

external (stdcall) char_from_ndr(
    argument0 : PRPC_MESSAGE,
    argument1 : Pointer[CUChar]);

external (stdcall) char_array_from_ndr(
    argument0 : PRPC_MESSAGE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[CUChar]);

external (stdcall) short_from_ndr(
    argument0 : PRPC_MESSAGE,
    argument1 : Pointer[UShort]);

external (stdcall) short_array_from_ndr(
    argument0 : PRPC_MESSAGE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[UShort]);

external (stdcall) short_from_ndr_temp(
    argument0 : Pointer[Pointer[CUChar]],
    argument1 : Pointer[UShort],
    argument2 : CULong);

external (stdcall) long_from_ndr(
    argument0 : PRPC_MESSAGE,
    argument1 : Pointer[CULong]);

external (stdcall) long_array_from_ndr(
    argument0 : PRPC_MESSAGE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[CULong]);

external (stdcall) long_from_ndr_temp(
    argument0 : Pointer[Pointer[CUChar]],
    argument1 : Pointer[CULong],
    argument2 : CULong);

external (stdcall) enum_from_ndr(
    argument0 : PRPC_MESSAGE,
    argument1 : Pointer[UInt]);

external (stdcall) float_from_ndr(
    argument0 : PRPC_MESSAGE,
    argument1 : RawPointer);

external (stdcall) float_array_from_ndr(
    argument0 : PRPC_MESSAGE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : RawPointer);

external (stdcall) double_from_ndr(
    argument0 : PRPC_MESSAGE,
    argument1 : RawPointer);

external (stdcall) double_array_from_ndr(
    argument0 : PRPC_MESSAGE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : RawPointer);

external (stdcall) hyper_from_ndr(
    argument0 : PRPC_MESSAGE,
    argument1 : Pointer[Int64]);

external (stdcall) hyper_array_from_ndr(
    argument0 : PRPC_MESSAGE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[Int64]);

external (stdcall) hyper_from_ndr_temp(
    argument0 : Pointer[Pointer[CUChar]],
    argument1 : Pointer[Int64],
    argument2 : CULong);

external (stdcall) data_from_ndr(
    argument0 : PRPC_MESSAGE,
    argument1 : RawPointer,
    argument2 : Pointer[CChar],
    argument3 : CUChar);

external (stdcall) data_into_ndr(
    argument0 : RawPointer,
    argument1 : PRPC_MESSAGE,
    argument2 : Pointer[CChar],
    argument3 : CUChar);

external (stdcall) tree_into_ndr(
    argument0 : RawPointer,
    argument1 : PRPC_MESSAGE,
    argument2 : Pointer[CChar],
    argument3 : CUChar);

external (stdcall) data_size_ndr(
    argument0 : RawPointer,
    argument1 : PRPC_MESSAGE,
    argument2 : Pointer[CChar],
    argument3 : CUChar);

external (stdcall) tree_size_ndr(
    argument0 : RawPointer,
    argument1 : PRPC_MESSAGE,
    argument2 : Pointer[CChar],
    argument3 : CUChar);

external (stdcall) tree_peek_ndr(
    argument0 : PRPC_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : Pointer[CChar],
    argument3 : CUChar);

external (stdcall) midl_allocate(
    argument0 : Int) RawPointer;

record Struct__MIDL_STUB_MESSAGE (
    RpcMsg : PRPC_MESSAGE,
    Buffer : Pointer[CUChar],
    BufferStart : Pointer[CUChar],
    BufferEnd : Pointer[CUChar],
    BufferMark : Pointer[CUChar],
    BufferLength : CULong,
    MemorySize : CULong,
    Memory : Pointer[CUChar],
    IsClient : Int,
    ReuseBuffer : Int,
    AllocAllNodesMemory : Pointer[CUChar],
    AllocAllNodesMemoryEnd : Pointer[CUChar],
    IgnoreEmbeddedPointers : Int,
    PointerBufferMark : Pointer[CUChar],
    fBufferValid : CUChar,
    Unused : CUChar,
    MaxCount : CULong,
    Offset : CULong,
    ActualCount : CULong,
    pfnAllocate : StdCallCodePointer[(UInt),(RawPointer)],
    pfnFree : StdCallCodePointer[(RawPointer),()],
    StackTop : Pointer[CUChar],
    pPresentedType : Pointer[CUChar],
    pTransmitType : Pointer[CUChar],
    SavedHandle : handle_t,
    StubDesc : Pointer[Struct__MIDL_STUB_DESC],
    FullPtrXlatTables : Pointer[Struct__FULL_PTR_XLAT_TABLES],
    FullPtrRefId : CULong,
    fCheckBounds : Int,
    fInDontFree : Int,
    fDontCallFreeInst : Int,
    fInOnlyParam : Int,
    fHasReturn : Int,
    dwDestContext : CULong,
    pvDestContext : RawPointer,
    SavedContextHandles : Pointer[NDR_SCONTEXT],
    ParamNumber : CLong,
    pRpcChannelBuffer : Pointer[Struct_IRpcChannelBuffer],
    pArrayInfo : PARRAY_INFO,
    SizePtrCountArray : Pointer[CULong],
    SizePtrOffsetArray : Pointer[CULong],
    SizePtrLengthArray : Pointer[CULong],
    pArgQueue : RawPointer,
    dwStubPhase : CULong,
    w2kReserved : Array[CULong,5],
);

alias MIDL_STUB_MESSAGE = Struct__MIDL_STUB_MESSAGE;

alias PMIDL_STUB_MESSAGE = Pointer[Struct__MIDL_STUB_MESSAGE];

alias GENERIC_BINDING_ROUTINE = StdCallCodePointer[(RawPointer),(RawPointer)];

alias GENERIC_UNBIND_ROUTINE = StdCallCodePointer[(RawPointer,Pointer[CUChar]),()];

record Struct__GENERIC_BINDING_ROUTINE_PAIR (
    pfnBind : GENERIC_BINDING_ROUTINE,
    pfnUnbind : GENERIC_UNBIND_ROUTINE,
);

alias GENERIC_BINDING_ROUTINE_PAIR = Struct__GENERIC_BINDING_ROUTINE_PAIR;

alias PGENERIC_BINDING_ROUTINE_PAIR = Pointer[Struct__GENERIC_BINDING_ROUTINE_PAIR];

record Struct___GENERIC_BINDING_INFO (
    pObj : RawPointer,
    Size : UInt,
    pfnBind : GENERIC_BINDING_ROUTINE,
    pfnUnbind : GENERIC_UNBIND_ROUTINE,
);

alias GENERIC_BINDING_INFO = Struct___GENERIC_BINDING_INFO;

alias PGENERIC_BINDING_INFO = Pointer[Struct___GENERIC_BINDING_INFO];

alias XMIT_HELPER_ROUTINE = StdCallCodePointer[(Pointer[Struct__MIDL_STUB_MESSAGE]),()];

record Struct__XMIT_ROUTINE_QUINTUPLE (
    pfnTranslateToXmit : XMIT_HELPER_ROUTINE,
    pfnTranslateFromXmit : XMIT_HELPER_ROUTINE,
    pfnFreeXmit : XMIT_HELPER_ROUTINE,
    pfnFreeInst : XMIT_HELPER_ROUTINE,
);

alias XMIT_ROUTINE_QUINTUPLE = Struct__XMIT_ROUTINE_QUINTUPLE;

alias PXMIT_ROUTINE_QUINTUPLE = Pointer[Struct__XMIT_ROUTINE_QUINTUPLE];

record Struct__MALLOC_FREE_STRUCT (
    pfnAllocate : StdCallCodePointer[(UInt),(RawPointer)],
    pfnFree : StdCallCodePointer[(RawPointer),()],
);

alias MALLOC_FREE_STRUCT = Struct__MALLOC_FREE_STRUCT;

record Struct__COMM_FAULT_OFFSETS (
    CommOffset : Short,
    FaultOffset : Short,
);

alias COMM_FAULT_OFFSETS = Struct__COMM_FAULT_OFFSETS;

alias USER_MARSHAL_SIZING_ROUTINE = StdCallCodePointer[(Pointer[CULong],CULong,RawPointer),(CULong)];

alias USER_MARSHAL_MARSHALLING_ROUTINE = StdCallCodePointer[(Pointer[CULong],Pointer[CUChar],RawPointer),(Pointer[CUChar])];

alias USER_MARSHAL_UNMARSHALLING_ROUTINE = StdCallCodePointer[(Pointer[CULong],Pointer[CUChar],RawPointer),(Pointer[CUChar])];

alias USER_MARSHAL_FREEING_ROUTINE = StdCallCodePointer[(Pointer[CULong],RawPointer),()];

record Struct__USER_MARSHAL_ROUTINE_QUADRUPLE (
    pfnBufferSize : USER_MARSHAL_SIZING_ROUTINE,
    pfnMarshall : USER_MARSHAL_MARSHALLING_ROUTINE,
    pfnUnmarshall : USER_MARSHAL_UNMARSHALLING_ROUTINE,
    pfnFree : USER_MARSHAL_FREEING_ROUTINE,
);

alias USER_MARSHAL_ROUTINE_QUADRUPLE = Struct__USER_MARSHAL_ROUTINE_QUADRUPLE;

alias NDR_NOTIFY_ROUTINE = StdCallCodePointer[(),()];

alias IDL_CS_NO_CONVERT = 0;
alias IDL_CS_IN_PLACE_CONVERT = 1;
alias IDL_CS_NEW_BUFFER_CONVERT = 2;

alias IDL_CS_CONVERT = Int;

alias CS_TYPE_NET_SIZE_ROUTINE = StdCallCodePointer[(RawPointer,CULong,CULong,Pointer[Int],Pointer[CULong],Pointer[CULong]),()];

alias CS_TYPE_LOCAL_SIZE_ROUTINE = StdCallCodePointer[(RawPointer,CULong,CULong,Pointer[Int],Pointer[CULong],Pointer[CULong]),()];

alias CS_TYPE_TO_NETCS_ROUTINE = StdCallCodePointer[(RawPointer,CULong,RawPointer,CULong,Pointer[CUChar],Pointer[CULong],Pointer[CULong]),()];

alias CS_TYPE_FROM_NETCS_ROUTINE = StdCallCodePointer[(RawPointer,CULong,Pointer[CUChar],CULong,CULong,RawPointer,Pointer[CULong],Pointer[CULong]),()];

alias CS_TAG_GETTING_ROUTINE = StdCallCodePointer[(RawPointer,Int,Pointer[CULong],Pointer[CULong],Pointer[CULong],Pointer[CULong]),()];

record Struct__NDR_CS_SIZE_CONVERT_ROUTINES (
    pfnNetSize : CS_TYPE_NET_SIZE_ROUTINE,
    pfnToNetCs : CS_TYPE_TO_NETCS_ROUTINE,
    pfnLocalSize : CS_TYPE_LOCAL_SIZE_ROUTINE,
    pfnFromNetCs : CS_TYPE_FROM_NETCS_ROUTINE,
);

alias NDR_CS_SIZE_CONVERT_ROUTINES = Struct__NDR_CS_SIZE_CONVERT_ROUTINES;

record Struct__NDR_CS_ROUTINES (
    pSizeConvertRoutines : Pointer[NDR_CS_SIZE_CONVERT_ROUTINES],
    pTagGettingRoutines : Pointer[CS_TAG_GETTING_ROUTINE],
);

alias NDR_CS_ROUTINES = Struct__NDR_CS_ROUTINES;

record Struct__MIDL_STUB_DESC (
    RpcInterfaceInformation : RawPointer,
    pfnAllocate : StdCallCodePointer[(UInt),(RawPointer)],
    pfnFree : StdCallCodePointer[(RawPointer),()],
    IMPLICIT_HANDLE_INFO : AUnionType,
    apfnNdrRundownRoutines : Pointer[NDR_RUNDOWN],
    aGenericBindingRoutinePairs : Pointer[GENERIC_BINDING_ROUTINE_PAIR],
    apfnExprEval : Pointer[EXPR_EVAL],
    aXmitQuintuple : Pointer[XMIT_ROUTINE_QUINTUPLE],
    pFormatTypes : Pointer[CUChar],
    fCheckBounds : Int,
    Version : CULong,
    pMallocFreeStruct : Pointer[MALLOC_FREE_STRUCT],
    MIDLVersion : CLong,
    CommFaultOffsets : Pointer[COMM_FAULT_OFFSETS],
    aUserMarshalQuadruple : Pointer[USER_MARSHAL_ROUTINE_QUADRUPLE],
    NotifyRoutineTable : Pointer[NDR_NOTIFY_ROUTINE],
    mFlags : CULong,
    CsRoutineTables : Pointer[NDR_CS_ROUTINES],
    Reserved4 : RawPointer,
    Reserved5 : CULong,
);

alias MIDL_STUB_DESC = Struct__MIDL_STUB_DESC;

alias PMIDL_STUB_DESC = Pointer[MIDL_STUB_DESC];

alias PMIDL_XMIT_TYPE = RawPointer;

record Struct__MIDL_FORMAT_STRING (
    Pad : Short,
    Format : Array[CUChar,1],
);

alias MIDL_FORMAT_STRING = Struct__MIDL_FORMAT_STRING;

alias STUB_THUNK = StdCallCodePointer[(Pointer[Struct__MIDL_STUB_MESSAGE]),()];

alias SERVER_ROUTINE = StdCallCodePointer[(),(CLong)];

record Struct__MIDL_SERVER_INFO_ (
    pStubDesc : PMIDL_STUB_DESC,
    DispatchTable : Pointer[SERVER_ROUTINE],
    ProcString : PFORMAT_STRING,
    FmtStringOffset : Pointer[UShort],
    ThunkTable : Pointer[STUB_THUNK],
);

alias MIDL_SERVER_INFO = Struct__MIDL_SERVER_INFO_;

alias PMIDL_SERVER_INFO = Pointer[Struct__MIDL_SERVER_INFO_];

record Struct__MIDL_STUBLESS_PROXY_INFO (
    pStubDesc : PMIDL_STUB_DESC,
    ProcFormatString : PFORMAT_STRING,
    FormatStringOffset : Pointer[UShort],
);

alias MIDL_STUBLESS_PROXY_INFO = Struct__MIDL_STUBLESS_PROXY_INFO;

alias PMIDL_STUBLESS_PROXY_INFO = Pointer[MIDL_STUBLESS_PROXY_INFO];

alias CLIENT_CALL_RETURN = AUnionType;

alias XLAT_SERVER = 1;
alias XLAT_CLIENT = 2;

alias XLAT_SIDE = Int;

record Struct__FULL_PTR_TO_REFID_ELEMENT (
    Next : Pointer[Struct__FULL_PTR_TO_REFID_ELEMENT],
    Pointer : RawPointer,
    RefId : CULong,
    State : CUChar,
);

alias FULL_PTR_TO_REFID_ELEMENT = Struct__FULL_PTR_TO_REFID_ELEMENT;

alias PFULL_PTR_TO_REFID_ELEMENT = Pointer[Struct__FULL_PTR_TO_REFID_ELEMENT];

record Struct__FULL_PTR_XLAT_TABLES (
    RefIdToPointer : UnnamedRecord4,
    PointerToRefId : UnnamedRecord5,
    NextRefId : CULong,
    XlatSide : XLAT_SIDE,
);

record UnnamedRecord4 (
    XlatTable : Pointer[RawPointer],
    StateTable : Pointer[CUChar],
    NumberOfEntries : CULong,
);

record UnnamedRecord5 (
    XlatTable : Pointer[PFULL_PTR_TO_REFID_ELEMENT],
    NumberOfBuckets : CULong,
    HashMask : CULong,
);

alias FULL_PTR_XLAT_TABLES = Struct__FULL_PTR_XLAT_TABLES;

alias PFULL_PTR_XLAT_TABLES = Pointer[Struct__FULL_PTR_XLAT_TABLES];

external (stdcall) NdrSimpleTypeMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : CUChar);

external (stdcall) NdrPointerMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    pFormat : PFORMAT_STRING) Pointer[CUChar];

external (stdcall) NdrSimpleStructMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) Pointer[CUChar];

external (stdcall) NdrConformantStructMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) Pointer[CUChar];

external (stdcall) NdrConformantVaryingStructMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) Pointer[CUChar];

external (stdcall) NdrHardStructMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) Pointer[CUChar];

external (stdcall) NdrComplexStructMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) Pointer[CUChar];

external (stdcall) NdrFixedArrayMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) Pointer[CUChar];

external (stdcall) NdrConformantArrayMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) Pointer[CUChar];

external (stdcall) NdrConformantVaryingArrayMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) Pointer[CUChar];

external (stdcall) NdrVaryingArrayMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) Pointer[CUChar];

external (stdcall) NdrComplexArrayMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) Pointer[CUChar];

external (stdcall) NdrNonConformantStringMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) Pointer[CUChar];

external (stdcall) NdrConformantStringMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) Pointer[CUChar];

external (stdcall) NdrEncapsulatedUnionMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) Pointer[CUChar];

external (stdcall) NdrNonEncapsulatedUnionMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) Pointer[CUChar];

external (stdcall) NdrByteCountPointerMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) Pointer[CUChar];

external (stdcall) NdrXmitOrRepAsMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) Pointer[CUChar];

external (stdcall) NdrInterfacePointerMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) Pointer[CUChar];

external (stdcall) NdrClientContextMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : NDR_CCONTEXT,
    argument2 : Int);

external (stdcall) NdrServerContextMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : NDR_SCONTEXT,
    argument2 : NDR_RUNDOWN);

external (stdcall) NdrSimpleTypeUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : CUChar);

external (stdcall) NdrPointerUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : PFORMAT_STRING,
    argument3 : CUChar) Pointer[CUChar];

external (stdcall) NdrSimpleStructUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : PFORMAT_STRING,
    argument3 : CUChar) Pointer[CUChar];

external (stdcall) NdrConformantStructUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : PFORMAT_STRING,
    argument3 : CUChar) Pointer[CUChar];

external (stdcall) NdrConformantVaryingStructUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : PFORMAT_STRING,
    argument3 : CUChar) Pointer[CUChar];

external (stdcall) NdrHardStructUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : PFORMAT_STRING,
    argument3 : CUChar) Pointer[CUChar];

external (stdcall) NdrComplexStructUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : PFORMAT_STRING,
    argument3 : CUChar) Pointer[CUChar];

external (stdcall) NdrFixedArrayUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : PFORMAT_STRING,
    argument3 : CUChar) Pointer[CUChar];

external (stdcall) NdrConformantArrayUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : PFORMAT_STRING,
    argument3 : CUChar) Pointer[CUChar];

external (stdcall) NdrConformantVaryingArrayUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : PFORMAT_STRING,
    argument3 : CUChar) Pointer[CUChar];

external (stdcall) NdrVaryingArrayUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : PFORMAT_STRING,
    argument3 : CUChar) Pointer[CUChar];

external (stdcall) NdrComplexArrayUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : PFORMAT_STRING,
    argument3 : CUChar) Pointer[CUChar];

external (stdcall) NdrNonConformantStringUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : PFORMAT_STRING,
    argument3 : CUChar) Pointer[CUChar];

external (stdcall) NdrConformantStringUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : PFORMAT_STRING,
    argument3 : CUChar) Pointer[CUChar];

external (stdcall) NdrEncapsulatedUnionUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : PFORMAT_STRING,
    argument3 : CUChar) Pointer[CUChar];

external (stdcall) NdrNonEncapsulatedUnionUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : PFORMAT_STRING,
    argument3 : CUChar) Pointer[CUChar];

external (stdcall) NdrByteCountPointerUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : PFORMAT_STRING,
    argument3 : CUChar) Pointer[CUChar];

external (stdcall) NdrXmitOrRepAsUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : PFORMAT_STRING,
    argument3 : CUChar) Pointer[CUChar];

external (stdcall) NdrInterfacePointerUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : PFORMAT_STRING,
    argument3 : CUChar) Pointer[CUChar];

external (stdcall) NdrClientContextUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[NDR_CCONTEXT],
    argument2 : RPC_BINDING_HANDLE);

external (stdcall) NdrServerContextUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE) NDR_SCONTEXT;

external (stdcall) NdrPointerBufferSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING);

external (stdcall) NdrSimpleStructBufferSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING);

external (stdcall) NdrConformantStructBufferSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING);

external (stdcall) NdrConformantVaryingStructBufferSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING);

external (stdcall) NdrHardStructBufferSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING);

external (stdcall) NdrComplexStructBufferSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING);

external (stdcall) NdrFixedArrayBufferSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING);

external (stdcall) NdrConformantArrayBufferSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING);

external (stdcall) NdrConformantVaryingArrayBufferSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING);

external (stdcall) NdrVaryingArrayBufferSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING);

external (stdcall) NdrComplexArrayBufferSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING);

external (stdcall) NdrConformantStringBufferSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING);

external (stdcall) NdrNonConformantStringBufferSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING);

external (stdcall) NdrEncapsulatedUnionBufferSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING);

external (stdcall) NdrNonEncapsulatedUnionBufferSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING);

external (stdcall) NdrByteCountPointerBufferSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING);

external (stdcall) NdrXmitOrRepAsBufferSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING);

external (stdcall) NdrInterfacePointerBufferSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING);

external (stdcall) NdrContextHandleSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING);

external (stdcall) NdrPointerMemorySize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING) CULong;

external (stdcall) NdrSimpleStructMemorySize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING) CULong;

external (stdcall) NdrConformantStructMemorySize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING) CULong;

external (stdcall) NdrConformantVaryingStructMemorySize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING) CULong;

external (stdcall) NdrHardStructMemorySize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING) CULong;

external (stdcall) NdrComplexStructMemorySize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING) CULong;

external (stdcall) NdrFixedArrayMemorySize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING) CULong;

external (stdcall) NdrConformantArrayMemorySize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING) CULong;

external (stdcall) NdrConformantVaryingArrayMemorySize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING) CULong;

external (stdcall) NdrVaryingArrayMemorySize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING) CULong;

external (stdcall) NdrComplexArrayMemorySize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING) CULong;

external (stdcall) NdrConformantStringMemorySize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING) CULong;

external (stdcall) NdrNonConformantStringMemorySize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING) CULong;

external (stdcall) NdrEncapsulatedUnionMemorySize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING) CULong;

external (stdcall) NdrNonEncapsulatedUnionMemorySize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING) CULong;

external (stdcall) NdrXmitOrRepAsMemorySize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING) CULong;

external (stdcall) NdrInterfacePointerMemorySize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING) CULong;

external (stdcall) NdrPointerFree(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING);

external (stdcall) NdrSimpleStructFree(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING);

external (stdcall) NdrConformantStructFree(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING);

external (stdcall) NdrConformantVaryingStructFree(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING);

external (stdcall) NdrHardStructFree(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING);

external (stdcall) NdrComplexStructFree(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING);

external (stdcall) NdrFixedArrayFree(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING);

external (stdcall) NdrConformantArrayFree(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING);

external (stdcall) NdrConformantVaryingArrayFree(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING);

external (stdcall) NdrVaryingArrayFree(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING);

external (stdcall) NdrComplexArrayFree(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING);

external (stdcall) NdrEncapsulatedUnionFree(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING);

external (stdcall) NdrNonEncapsulatedUnionFree(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING);

external (stdcall) NdrByteCountPointerFree(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING);

external (stdcall) NdrXmitOrRepAsFree(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING);

external (stdcall) NdrInterfacePointerFree(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING);

external (stdcall) NdrConvert(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING);

external (stdcall) NdrClientInitializeNew(
    argument0 : PRPC_MESSAGE,
    argument1 : PMIDL_STUB_MESSAGE,
    argument2 : PMIDL_STUB_DESC,
    argument3 : UInt);

external (stdcall) NdrServerInitializeNew(
    argument0 : PRPC_MESSAGE,
    argument1 : PMIDL_STUB_MESSAGE,
    argument2 : PMIDL_STUB_DESC) Pointer[CUChar];

external (stdcall) NdrClientInitialize(
    argument0 : PRPC_MESSAGE,
    argument1 : PMIDL_STUB_MESSAGE,
    argument2 : PMIDL_STUB_DESC,
    argument3 : UInt);

external (stdcall) NdrServerInitialize(
    argument0 : PRPC_MESSAGE,
    argument1 : PMIDL_STUB_MESSAGE,
    argument2 : PMIDL_STUB_DESC) Pointer[CUChar];

external (stdcall) NdrServerInitializeUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PMIDL_STUB_DESC,
    argument2 : PRPC_MESSAGE) Pointer[CUChar];

external (stdcall) NdrServerInitializeMarshall(
    argument0 : PRPC_MESSAGE,
    argument1 : PMIDL_STUB_MESSAGE);

external (stdcall) NdrGetBuffer(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : CULong,
    argument2 : RPC_BINDING_HANDLE) Pointer[CUChar];

external (stdcall) NdrNsGetBuffer(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : CULong,
    argument2 : RPC_BINDING_HANDLE) Pointer[CUChar];

external (stdcall) NdrSendReceive(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar]) Pointer[CUChar];

external (stdcall) NdrNsSendReceive(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : Pointer[RPC_BINDING_HANDLE]) Pointer[CUChar];

external (stdcall) NdrFreeBuffer(
    argument0 : PMIDL_STUB_MESSAGE);

external NdrClientCall(
    argument0 : PMIDL_STUB_DESC,
    argument1 : PFORMAT_STRING,
    ...) CLIENT_CALL_RETURN;

external NdrClientCall2(
    argument0 : PMIDL_STUB_DESC,
    argument1 : PFORMAT_STRING,
    ...) CLIENT_CALL_RETURN;

alias STUB_UNMARSHAL = 0;
alias STUB_CALL_SERVER = 1;
alias STUB_MARSHAL = 2;
alias STUB_CALL_SERVER_NO_HRESULT = 3;

alias STUB_PHASE = Int;

alias PROXY_CALCSIZE = 0;
alias PROXY_GETBUFFER = 1;
alias PROXY_MARSHAL = 2;
alias PROXY_SENDRECEIVE = 3;
alias PROXY_UNMARSHAL = 4;

alias PROXY_PHASE = Int;

external (stdcall) NdrStubCall(
    argument0 : Pointer[Struct_IRpcStubBuffer],
    argument1 : Pointer[Struct_IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : Pointer[CULong]) CLong;

external (stdcall) NdrServerCall(
    argument0 : PRPC_MESSAGE);

external (stdcall) NdrServerUnmarshall(
    argument0 : Pointer[Struct_IRpcChannelBuffer],
    argument1 : PRPC_MESSAGE,
    argument2 : PMIDL_STUB_MESSAGE,
    argument3 : PMIDL_STUB_DESC,
    argument4 : PFORMAT_STRING,
    argument5 : RawPointer) Int;

external (stdcall) NdrServerMarshall(
    argument0 : Pointer[Struct_IRpcStubBuffer],
    argument1 : Pointer[Struct_IRpcChannelBuffer],
    argument2 : PMIDL_STUB_MESSAGE,
    argument3 : PFORMAT_STRING);

external (stdcall) NdrMapCommAndFaultStatus(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CULong],
    argument2 : Pointer[CULong],
    argument3 : CLong) CLong;

external (stdcall) NdrSH_UPDecision(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : RPC_BUFPTR) Int;

external (stdcall) NdrSH_TLUPDecision(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]]) Int;

external (stdcall) NdrSH_TLUPDecisionBuffer(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]]) Int;

external (stdcall) NdrSH_IfAlloc(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : CULong) Int;

external (stdcall) NdrSH_IfAllocRef(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : CULong) Int;

external (stdcall) NdrSH_IfAllocSet(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : CULong) Int;

external (stdcall) NdrSH_IfCopy(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : CULong) RPC_BUFPTR;

external (stdcall) NdrSH_IfAllocCopy(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : CULong) RPC_BUFPTR;

external (stdcall) NdrSH_Copy(
    argument0 : Pointer[CUChar],
    argument1 : Pointer[CUChar],
    argument2 : CULong) CULong;

external (stdcall) NdrSH_IfFree(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar]);

external (stdcall) NdrSH_StringMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : CULong,
    argument3 : Int) RPC_BUFPTR;

external (stdcall) NdrSH_StringUnMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : Int) RPC_BUFPTR;

alias RPC_SS_THREAD_HANDLE = RawPointer;

external (stdcall) RpcSsAllocate(
    argument0 : UInt) RawPointer;

external (stdcall) RpcSsDisableAllocate();

external (stdcall) RpcSsEnableAllocate();

external (stdcall) RpcSsFree(
    argument0 : RawPointer);

external (stdcall) RpcSsGetThreadHandle() RPC_SS_THREAD_HANDLE;

external (stdcall) RpcSsSetClientAllocFree(
    argument0 : StdCallCodePointer[(UInt),(RawPointer)],
    argument1 : StdCallCodePointer[(RawPointer),()]);

external (stdcall) RpcSsSetThreadHandle(
    argument0 : RPC_SS_THREAD_HANDLE);

external (stdcall) RpcSsSwapClientAllocFree(
    argument0 : StdCallCodePointer[(UInt),(RawPointer)],
    argument1 : StdCallCodePointer[(RawPointer),()],
    argument2 : Pointer[StdCallCodePointer[(UInt),(RawPointer)]],
    argument3 : Pointer[StdCallCodePointer[(RawPointer),()]]);

external (stdcall) RpcSmAllocate(
    argument0 : UInt,
    argument1 : Pointer[CLong]) RawPointer;

external (stdcall) RpcSmClientFree(
    argument0 : RawPointer) CLong;

external (stdcall) RpcSmDestroyClientContext(
    argument0 : Pointer[RawPointer]) CLong;

external (stdcall) RpcSmDisableAllocate() CLong;

external (stdcall) RpcSmEnableAllocate() CLong;

external (stdcall) RpcSmFree(
    argument0 : RawPointer) CLong;

external (stdcall) RpcSmGetThreadHandle(
    argument0 : Pointer[CLong]) RPC_SS_THREAD_HANDLE;

external (stdcall) RpcSmSetClientAllocFree(
    argument0 : StdCallCodePointer[(UInt),(RawPointer)],
    argument1 : StdCallCodePointer[(RawPointer),()]) CLong;

external (stdcall) RpcSmSetThreadHandle(
    argument0 : RPC_SS_THREAD_HANDLE) CLong;

external (stdcall) RpcSmSwapClientAllocFree(
    argument0 : StdCallCodePointer[(UInt),(RawPointer)],
    argument1 : StdCallCodePointer[(RawPointer),()],
    argument2 : Pointer[StdCallCodePointer[(UInt),(RawPointer)]],
    argument3 : Pointer[StdCallCodePointer[(RawPointer),()]]) CLong;

external (stdcall) NdrRpcSsEnableAllocate(
    argument0 : PMIDL_STUB_MESSAGE);

external (stdcall) NdrRpcSsDisableAllocate(
    argument0 : PMIDL_STUB_MESSAGE);

external (stdcall) NdrRpcSmSetClientToOsf(
    argument0 : PMIDL_STUB_MESSAGE);

external (stdcall) NdrRpcSmClientAllocate(
    argument0 : UInt) RawPointer;

external (stdcall) NdrRpcSmClientFree(
    argument0 : RawPointer);

external (stdcall) NdrRpcSsDefaultAllocate(
    argument0 : UInt) RawPointer;

external (stdcall) NdrRpcSsDefaultFree(
    argument0 : RawPointer);

external (stdcall) NdrFullPointerXlatInit(
    argument0 : CULong,
    argument1 : XLAT_SIDE) PFULL_PTR_XLAT_TABLES;

external (stdcall) NdrFullPointerXlatFree(
    argument0 : PFULL_PTR_XLAT_TABLES);

external (stdcall) NdrFullPointerQueryPointer(
    argument0 : PFULL_PTR_XLAT_TABLES,
    argument1 : RawPointer,
    argument2 : CUChar,
    argument3 : Pointer[CULong]) Int;

external (stdcall) NdrFullPointerQueryRefId(
    argument0 : PFULL_PTR_XLAT_TABLES,
    argument1 : CULong,
    argument2 : CUChar,
    argument3 : Pointer[RawPointer]) Int;

external (stdcall) NdrFullPointerInsertRefId(
    argument0 : PFULL_PTR_XLAT_TABLES,
    argument1 : CULong,
    argument2 : RawPointer);

external (stdcall) NdrFullPointerFree(
    argument0 : PFULL_PTR_XLAT_TABLES,
    argument1 : RawPointer) Int;

external (stdcall) NdrAllocate(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : UInt) RawPointer;

external (stdcall) NdrClearOutParameters(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING,
    argument2 : RawPointer);

external (stdcall) NdrOleAllocate(
    argument0 : UInt) RawPointer;

external (stdcall) NdrOleFree(
    argument0 : RawPointer);

external (stdcall) NdrUserMarshalMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) Pointer[CUChar];

external (stdcall) NdrUserMarshalUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : PFORMAT_STRING,
    argument3 : CUChar) Pointer[CUChar];

external (stdcall) NdrUserMarshalBufferSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING);

external (stdcall) NdrUserMarshalMemorySize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING) CULong;

external (stdcall) NdrUserMarshalFree(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING);

external _argc : Int;

external _argv : Pointer[Pointer[CChar]];

external __p___argc() Pointer[Int];

external __p___argv() Pointer[Pointer[Pointer[CChar]]];

external __p___wargv() Pointer[Pointer[Pointer[UShort]]];

external (dllimport) __mb_cur_max : Int;

external _errno() Pointer[Int];

external __doserrno() Pointer[Int];

external __p__environ() Pointer[Pointer[Pointer[CChar]]];

external __p__wenviron() Pointer[Pointer[Pointer[UShort]]];

external (dllimport) _sys_nerr : Int;

external (dllimport) _sys_errlist : Array[Pointer[CChar],0];

external __p__osver() Pointer[UInt];

external __p__winver() Pointer[UInt];

external __p__winmajor() Pointer[UInt];

external __p__winminor() Pointer[UInt];

external (dllimport) _osver : UInt;

external (dllimport) _winver : UInt;

external (dllimport) _winmajor : UInt;

external (dllimport) _winminor : UInt;

external __p__pgmptr() Pointer[Pointer[CChar]];

external __p__wpgmptr() Pointer[Pointer[UShort]];

external (dllimport) _fmode : Int;

external atof(
    argument0 : Pointer[CChar]) Double;

external atoi(
    argument0 : Pointer[CChar]) Int;

external atol(
    argument0 : Pointer[CChar]) CLong;

external _wtof(
    argument0 : Pointer[UShort]) Double;

external _wtoi(
    argument0 : Pointer[UShort]) Int;

external _wtol(
    argument0 : Pointer[UShort]) CLong;

external __strtod(
    argument0 : Pointer[CChar],
    argument1 : Pointer[Pointer[CChar]]) Double;

external strtof(
    argument0 : Pointer[CChar],
    argument1 : Pointer[Pointer[CChar]]) Float;

external strtold(
    argument0 : Pointer[CChar],
    argument1 : Pointer[Pointer[CChar]]) UnsupportedCBuiltinType22;

external strtol(
    argument0 : Pointer[CChar],
    argument1 : Pointer[Pointer[CChar]],
    argument2 : Int) CLong;

external strtoul(
    argument0 : Pointer[CChar],
    argument1 : Pointer[Pointer[CChar]],
    argument2 : Int) CULong;

external wcstol(
    argument0 : Pointer[UShort],
    argument1 : Pointer[Pointer[UShort]],
    argument2 : Int) CLong;

external wcstoul(
    argument0 : Pointer[UShort],
    argument1 : Pointer[Pointer[UShort]],
    argument2 : Int) CULong;

external wcstod(
    argument0 : Pointer[UShort],
    argument1 : Pointer[Pointer[UShort]]) Double;

external wcstof(
    argument0 : Pointer[UShort],
    argument1 : Pointer[Pointer[UShort]]) Float;

external wcstold(
    argument0 : Pointer[UShort],
    argument1 : Pointer[Pointer[UShort]]) UnsupportedCBuiltinType22;

external _wgetenv(
    argument0 : Pointer[UShort]) Pointer[UShort];

external _wputenv(
    argument0 : Pointer[UShort]) Int;

external _wsearchenv(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort],
    argument2 : Pointer[UShort]);

external _wsystem(
    argument0 : Pointer[UShort]) Int;

external _wmakepath(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort],
    argument2 : Pointer[UShort],
    argument3 : Pointer[UShort],
    argument4 : Pointer[UShort]);

external _wsplitpath(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort],
    argument2 : Pointer[UShort],
    argument3 : Pointer[UShort],
    argument4 : Pointer[UShort]);

external _wfullpath(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort],
    argument2 : UInt) Pointer[UShort];

external wcstombs(
    argument0 : Pointer[CChar],
    argument1 : Pointer[UShort],
    argument2 : UInt) UInt;

external wctomb(
    argument0 : Pointer[CChar],
    argument1 : UShort) Int;

external mblen(
    argument0 : Pointer[CChar],
    argument1 : UInt) Int;

external mbstowcs(
    argument0 : Pointer[UShort],
    argument1 : Pointer[CChar],
    argument2 : UInt) UInt;

external mbtowc(
    argument0 : Pointer[UShort],
    argument1 : Pointer[CChar],
    argument2 : UInt) Int;

external rand() Int;

external srand(
    argument0 : UInt);

external calloc(
    argument0 : UInt,
    argument1 : UInt) RawPointer;

external malloc(
    argument0 : UInt) RawPointer;

external realloc(
    argument0 : RawPointer,
    argument1 : UInt) RawPointer;

external free(
    argument0 : RawPointer);

external abort();

external exit(
    argument0 : Int);

external atexit(
    argument0 : CCodePointer[(),()]) Int;

external system(
    argument0 : Pointer[CChar]) Int;

external getenv(
    argument0 : Pointer[CChar]) Pointer[CChar];

external bsearch(
    argument0 : RawPointer,
    argument1 : RawPointer,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : CCodePointer[(RawPointer,RawPointer),(Int)]) RawPointer;

external qsort(
    argument0 : RawPointer,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CCodePointer[(RawPointer,RawPointer),(Int)]);

external abs(
    argument0 : Int) Int;

external labs(
    argument0 : CLong) CLong;

record UnnamedStruct29 (
    quot : Int,
    rem : Int,
);

alias div_t = UnnamedStruct29;

record UnnamedStruct30 (
    quot : CLong,
    rem : CLong,
);

alias ldiv_t = UnnamedStruct30;

external div(
    argument0 : Int,
    argument1 : Int) div_t;

external ldiv(
    argument0 : CLong,
    argument1 : CLong) ldiv_t;

external _beep(
    argument0 : UInt,
    argument1 : UInt);

external _seterrormode(
    argument0 : Int);

external _sleep(
    argument0 : CULong);

external _exit(
    argument0 : Int);

alias _onexit_t = CCodePointer[(),(Int)];

external _onexit(
    argument0 : _onexit_t) _onexit_t;

external _putenv(
    argument0 : Pointer[CChar]) Int;

external _searchenv(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar],
    argument2 : Pointer[CChar]);

external _ecvt(
    argument0 : Double,
    argument1 : Int,
    argument2 : Pointer[Int],
    argument3 : Pointer[Int]) Pointer[CChar];

external _fcvt(
    argument0 : Double,
    argument1 : Int,
    argument2 : Pointer[Int],
    argument3 : Pointer[Int]) Pointer[CChar];

external _gcvt(
    argument0 : Double,
    argument1 : Int,
    argument2 : Pointer[CChar]) Pointer[CChar];

external _makepath(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar],
    argument2 : Pointer[CChar],
    argument3 : Pointer[CChar],
    argument4 : Pointer[CChar]);

external _splitpath(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar],
    argument2 : Pointer[CChar],
    argument3 : Pointer[CChar],
    argument4 : Pointer[CChar]);

external _fullpath(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar],
    argument2 : UInt) Pointer[CChar];

external _itoa(
    argument0 : Int,
    argument1 : Pointer[CChar],
    argument2 : Int) Pointer[CChar];

external _ltoa(
    argument0 : CLong,
    argument1 : Pointer[CChar],
    argument2 : Int) Pointer[CChar];

external _ultoa(
    argument0 : CULong,
    argument1 : Pointer[CChar],
    argument2 : Int) Pointer[CChar];

external _itow(
    argument0 : Int,
    argument1 : Pointer[UShort],
    argument2 : Int) Pointer[UShort];

external _ltow(
    argument0 : CLong,
    argument1 : Pointer[UShort],
    argument2 : Int) Pointer[UShort];

external _ultow(
    argument0 : CULong,
    argument1 : Pointer[UShort],
    argument2 : Int) Pointer[UShort];

external _atoi64(
    argument0 : Pointer[CChar]) Int64;

external _i64toa(
    argument0 : Int64,
    argument1 : Pointer[CChar],
    argument2 : Int) Pointer[CChar];

external _ui64toa(
    argument0 : UInt64,
    argument1 : Pointer[CChar],
    argument2 : Int) Pointer[CChar];

external _wtoi64(
    argument0 : Pointer[UShort]) Int64;

external _i64tow(
    argument0 : Int64,
    argument1 : Pointer[UShort],
    argument2 : Int) Pointer[UShort];

external _ui64tow(
    argument0 : UInt64,
    argument1 : Pointer[UShort],
    argument2 : Int) Pointer[UShort];

external _rotl(
    argument0 : UInt,
    argument1 : Int) UInt;

external _rotr(
    argument0 : UInt,
    argument1 : Int) UInt;

external _lrotl(
    argument0 : CULong,
    argument1 : Int) CULong;

external _lrotr(
    argument0 : CULong,
    argument1 : Int) CULong;

external _set_error_mode(
    argument0 : Int) Int;

external putenv(
    argument0 : Pointer[CChar]) Int;

external searchenv(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar],
    argument2 : Pointer[CChar]);

external itoa(
    argument0 : Int,
    argument1 : Pointer[CChar],
    argument2 : Int) Pointer[CChar];

external ltoa(
    argument0 : CLong,
    argument1 : Pointer[CChar],
    argument2 : Int) Pointer[CChar];

external ecvt(
    argument0 : Double,
    argument1 : Int,
    argument2 : Pointer[Int],
    argument3 : Pointer[Int]) Pointer[CChar];

external fcvt(
    argument0 : Double,
    argument1 : Int,
    argument2 : Pointer[Int],
    argument3 : Pointer[Int]) Pointer[CChar];

external gcvt(
    argument0 : Double,
    argument1 : Int,
    argument2 : Pointer[CChar]) Pointer[CChar];

external _Exit(
    argument0 : Int);

record UnnamedStruct31 (
    quot : Int64,
    rem : Int64,
);

alias lldiv_t = UnnamedStruct31;

external lldiv(
    argument0 : Int64,
    argument1 : Int64) lldiv_t;

external llabs(
    argument0 : Int64) Int64;

external strtoll(
    argument0 : Pointer[CChar],
    argument1 : Pointer[Pointer[CChar]],
    argument2 : Int) Int64;

external strtoull(
    argument0 : Pointer[CChar],
    argument1 : Pointer[Pointer[CChar]],
    argument2 : Int) UInt64;

external atoll(
    argument0 : Pointer[CChar]) Int64;

external wtoll(
    argument0 : Pointer[UShort]) Int64;

external lltoa(
    argument0 : Int64,
    argument1 : Pointer[CChar],
    argument2 : Int) Pointer[CChar];

external ulltoa(
    argument0 : UInt64,
    argument1 : Pointer[CChar],
    argument2 : Int) Pointer[CChar];

external lltow(
    argument0 : Int64,
    argument1 : Pointer[UShort],
    argument2 : Int) Pointer[UShort];

external ulltow(
    argument0 : UInt64,
    argument1 : Pointer[UShort],
    argument2 : Int) Pointer[UShort];

alias STGFMT_STORAGE = 0;
alias STGFMT_FILE = 3;
alias STGFMT_ANY = 4;
alias STGFMT_DOCFILE = 5;

alias STGFMT = Int;

record Struct_tagSTGOPTIONS (
    usVersion : UShort,
    reserved : UShort,
    ulSectorSize : CULong,
    pwcsTemplateFile : Pointer[UShort],
);

alias STGOPTIONS = Struct_tagSTGOPTIONS;

alias REGCLS_SINGLEUSE = 0;
alias REGCLS_MULTIPLEUSE = 1;
alias REGCLS_MULTI_SEPARATE = 2;

alias REGCLS = Int;

alias DVASPECT_CONTENT = 1;
alias DVASPECT_THUMBNAIL = 2;
alias DVASPECT_ICON = 4;
alias DVASPECT_DOCPRINT = 8;

alias DVASPECT = Int;

alias DVASPECT_OPAQUE = 16;
alias DVASPECT_TRANSPARENT = 32;

alias DVASPECT2 = Int;

alias STATFLAG_DEFAULT = 0;
alias STATFLAG_NONAME = 1;

alias STATFLAG = Int;

alias MEMCTX_LOCAL = 0;
alias MEMCTX_TASK = 1;
alias MEMCTX_SHARED = 2;
alias MEMCTX_MACSYSTEM = 3;
alias MEMCTX_UNKNOWN = 4294967295;
alias MEMCTX_SAME = 4294967294;

alias MEMCTX = Int;

alias MSHCTX_LOCAL = 0;
alias MSHCTX_NOSHAREDMEM = 1;
alias MSHCTX_DIFFERENTMACHINE = 2;
alias MSHCTX_INPROC = 3;
alias MSHCTX_CROSSCTX = 4;

alias MSHCTX = Int;

alias CLSCTX_INPROC_SERVER = 1;
alias CLSCTX_INPROC_HANDLER = 2;
alias CLSCTX_LOCAL_SERVER = 4;
alias CLSCTX_INPROC_SERVER16 = 8;
alias CLSCTX_REMOTE_SERVER = 16;

alias CLSCTX = Int;

alias MSHLFLAGS_NORMAL = 0;
alias MSHLFLAGS_TABLESTRONG = 1;
alias MSHLFLAGS_TABLEWEAK = 2;

alias MSHLFLAGS = Int;

record Struct__FLAGGED_WORD_BLOB (
    fFlags : CULong,
    clSize : CULong,
    asData : Array[UShort,1],
);

alias FLAGGED_WORD_BLOB = Struct__FLAGGED_WORD_BLOB;

alias OLECHAR = UShort;

alias LPOLESTR = LPWSTR;

alias LPCOLESTR = LPCWSTR;

alias VARTYPE = UShort;

alias VARIANT_BOOL = Short;

alias _VARIANT_BOOL = Short;

alias BSTR = Pointer[UShort];

alias wireBSTR = Pointer[FLAGGED_WORD_BLOB];

alias LPBSTR = Pointer[BSTR];

alias SCODE = CLong;

alias HCONTEXT = RawPointer;

alias CY = AUnionType;

alias DATE = Double;

record Struct_tagBSTRBLOB (
    cbSize : CULong,
    pData : PBYTE,
);

alias BSTRBLOB = Struct_tagBSTRBLOB;

alias LPBSTRBLOB = Pointer[Struct_tagBSTRBLOB];

record Struct_tagCLIPDATA (
    cbSize : CULong,
    ulClipFmt : CLong,
    pClipData : PBYTE,
);

alias CLIPDATA = Struct_tagCLIPDATA;

alias STGC_DEFAULT = 0;
alias STGC_OVERWRITE = 1;
alias STGC_ONLYIFCURRENT = 2;
alias STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 3;

alias STGC = Int;

alias STGMOVE_MOVE = 0;
alias STGMOVE_COPY = 1;
alias STGMOVE_SHALLOWCOPY = 2;

alias STGMOVE = Int;

alias VT_EMPTY = 0;
alias VT_NULL = 1;
alias VT_I2 = 2;
alias VT_I4 = 3;
alias VT_R4 = 4;
alias VT_R8 = 5;
alias VT_CY = 6;
alias VT_DATE = 7;
alias VT_BSTR = 8;
alias VT_DISPATCH = 9;
alias VT_ERROR = 10;
alias VT_BOOL = 11;
alias VT_VARIANT = 12;
alias VT_UNKNOWN = 13;
alias VT_DECIMAL = 14;
alias VT_I1 = 16;
alias VT_UI1 = 17;
alias VT_UI2 = 18;
alias VT_UI4 = 19;
alias VT_I8 = 20;
alias VT_UI8 = 21;
alias VT_INT = 22;
alias VT_UINT = 23;
alias VT_VOID = 24;
alias VT_HRESULT = 25;
alias VT_PTR = 26;
alias VT_SAFEARRAY = 27;
alias VT_CARRAY = 28;
alias VT_USERDEFINED = 29;
alias VT_LPSTR = 30;
alias VT_LPWSTR = 31;
alias VT_RECORD = 36;
alias VT_INT_PTR = 37;
alias VT_UINT_PTR = 38;
alias VT_FILETIME = 64;
alias VT_BLOB = 65;
alias VT_STREAM = 66;
alias VT_STORAGE = 67;
alias VT_STREAMED_OBJECT = 68;
alias VT_STORED_OBJECT = 69;
alias VT_BLOB_OBJECT = 70;
alias VT_CF = 71;
alias VT_CLSID = 72;
alias VT_BSTR_BLOB = 4095;
alias VT_VECTOR = 4096;
alias VT_ARRAY = 8192;
alias VT_BYREF = 16384;
alias VT_RESERVED = 32768;
alias VT_ILLEGAL = 65535;
alias VT_ILLEGALMASKED = 4095;
alias VT_TYPEMASK = 4095;

record Struct__BYTE_SIZEDARR (
    clSize : CULong,
    pData : Pointer[CUChar],
);

alias BYTE_SIZEDARR = Struct__BYTE_SIZEDARR;

record Struct__SHORT_SIZEDARR (
    clSize : CULong,
    pData : Pointer[UShort],
);

alias WORD_SIZEDARR = Struct__SHORT_SIZEDARR;

record Struct__LONG_SIZEDARR (
    clSize : CULong,
    pData : Pointer[CULong],
);

alias DWORD_SIZEDARR = Struct__LONG_SIZEDARR;

record Struct__HYPER_SIZEDARR (
    clSize : CULong,
    pData : Pointer[Int64],
);

alias HYPER_SIZEDARR = Struct__HYPER_SIZEDARR;

alias DOUBLE = Double;

record Struct_tagDEC (
    wReserved : UShort,
    unnamed_field1 : AUnionType,
    Hi32 : CULong,
    unnamed_field3 : AUnionType,
);

alias DECIMAL = Struct_tagDEC;

alias LPDECIMAL = Pointer[DECIMAL];

alias HMETAFILEPICT = RawPointer;

external (stdcall) MIDL_user_allocate(
    argument0 : UInt) RawPointer;

external (stdcall) MIDL_user_free(
    argument0 : RawPointer);

external IID_IUnknown : IID;

external IID_IClassFactory : IID;

record Struct_IUnknown (
    lpVtbl : Pointer[Struct_IUnknownVtbl],
);

alias IUnknown = Struct_IUnknown;

alias IUnknownVtbl = Struct_IUnknownVtbl;

record Struct_IUnknownVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IUnknown],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IUnknown]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IUnknown]),(CULong)],
);

alias LPUNKNOWN = Pointer[IUnknown];

record Struct_IClassFactory (
    lpVtbl : Pointer[Struct_IClassFactoryVtbl],
);

alias IClassFactory = Struct_IClassFactory;

alias IClassFactoryVtbl = Struct_IClassFactoryVtbl;

record Struct_IClassFactoryVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IClassFactory],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IClassFactory]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IClassFactory]),(CULong)],
    CreateInstance : StdCallCodePointer[(Pointer[Struct_IClassFactory],Pointer[Struct_IUnknown],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    LockServer : StdCallCodePointer[(Pointer[Struct_IClassFactory],Int),(CLong)],
);

alias LPCLASSFACTORY = Pointer[IClassFactory];

external (stdcall) IUnknown_QueryInterface_Proxy(
    argument0 : Pointer[IUnknown],
    argument1 : Pointer[IID],
    argument2 : Pointer[RawPointer]) CLong;

external (stdcall) IUnknown_QueryInterface_Stub(
    argument0 : LPRPCSTUBBUFFER,
    argument1 : LPRPCCHANNELBUFFER,
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IUnknown_AddRef_Proxy(
    argument0 : Pointer[IUnknown]) CULong;

external (stdcall) IUnknown_AddRef_Stub(
    argument0 : LPRPCSTUBBUFFER,
    argument1 : LPRPCCHANNELBUFFER,
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IUnknown_Release_Proxy(
    argument0 : Pointer[IUnknown]) CULong;

external (stdcall) IUnknown_Release_Stub(
    argument0 : LPRPCSTUBBUFFER,
    argument1 : LPRPCCHANNELBUFFER,
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IClassFactory_RemoteCreateInstance_Proxy(
    argument0 : Pointer[IClassFactory],
    argument1 : Pointer[IID],
    argument2 : Pointer[Pointer[IUnknown]]) CLong;

external (stdcall) IClassFactory_RemoteCreateInstance_Stub(
    argument0 : LPRPCSTUBBUFFER,
    argument1 : LPRPCCHANNELBUFFER,
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IClassFactory_RemoteLockServer_Proxy(
    argument0 : Pointer[IClassFactory],
    argument1 : Int) CLong;

external (stdcall) IClassFactory_RemoteLockServer_Stub(
    argument0 : LPRPCSTUBBUFFER,
    argument1 : LPRPCCHANNELBUFFER,
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IClassFactory_CreateInstance_Proxy(
    argument0 : Pointer[IClassFactory],
    argument1 : Pointer[IUnknown],
    argument2 : Pointer[IID],
    argument3 : Pointer[RawPointer]) CLong;

external (stdcall) IClassFactory_CreateInstance_Stub(
    argument0 : Pointer[IClassFactory],
    argument1 : Pointer[IID],
    argument2 : Pointer[Pointer[IUnknown]]) CLong;

external (stdcall) IClassFactory_LockServer_Proxy(
    argument0 : Pointer[IClassFactory],
    argument1 : Int) CLong;

external (stdcall) IClassFactory_LockServer_Stub(
    argument0 : Pointer[IClassFactory],
    argument1 : Int) CLong;

record Struct_tagSTATSTG (
    pwcsName : LPOLESTR,
    type : CULong,
    cbSize : ULARGE_INTEGER,
    mtime : FILETIME,
    ctime : FILETIME,
    atime : FILETIME,
    grfMode : CULong,
    grfLocksSupported : CULong,
    clsid : CLSID,
    grfStateBits : CULong,
    reserved : CULong,
);

alias STATSTG = Struct_tagSTATSTG;

alias STGTY_STORAGE = 1;
alias STGTY_STREAM = 2;
alias STGTY_LOCKBYTES = 3;
alias STGTY_PROPERTY = 4;

alias STGTY = Int;

alias STREAM_SEEK_SET = 0;
alias STREAM_SEEK_CUR = 1;
alias STREAM_SEEK_END = 2;

alias STREAM_SEEK = Int;

record Struct_tagINTERFACEINFO (
    pUnk : LPUNKNOWN,
    iid : IID,
    wMethod : UShort,
);

alias INTERFACEINFO = Struct_tagINTERFACEINFO;

alias LPINTERFACEINFO = Pointer[Struct_tagINTERFACEINFO];

alias CALLTYPE_TOPLEVEL = 1;
alias CALLTYPE_NESTED = 2;
alias CALLTYPE_ASYNC = 3;
alias CALLTYPE_TOPLEVEL_CALLPENDING = 4;
alias CALLTYPE_ASYNC_CALLPENDING = 5;

alias CALLTYPE = Int;

alias PENDINGTYPE_TOPLEVEL = 1;
alias PENDINGTYPE_NESTED = 2;

alias PENDINGTYPE = Int;

alias PENDINGMSG_CANCELCALL = 0;
alias PENDINGMSG_WAITNOPROCESS = 1;
alias PENDINGMSG_WAITDEFPROCESS = 2;

alias PENDINGMSG = Int;

alias SNB = Pointer[Pointer[UShort]];

alias DATADIR_GET = 1;
alias DATADIR_SET = 2;

alias DATADIR = Int;

alias CLIPFORMAT = UShort;

alias LPCLIPFORMAT = Pointer[UShort];

record Struct_tagDVTARGETDEVICE (
    tdSize : CULong,
    tdDriverNameOffset : UShort,
    tdDeviceNameOffset : UShort,
    tdPortNameOffset : UShort,
    tdExtDevmodeOffset : UShort,
    tdData : Array[CUChar,1],
);

alias DVTARGETDEVICE = Struct_tagDVTARGETDEVICE;

record Struct_tagFORMATETC (
    cfFormat : UShort,
    ptd : Pointer[DVTARGETDEVICE],
    dwAspect : CULong,
    lindex : CLong,
    tymed : CULong,
);

alias FORMATETC = Struct_tagFORMATETC;

alias LPFORMATETC = Pointer[Struct_tagFORMATETC];

record Struct_tagRemSTGMEDIUM (
    tymed : CULong,
    dwHandleType : CULong,
    pData : CULong,
    pUnkForRelease : CULong,
    cbData : CULong,
    data : Array[CUChar,1],
);

alias RemSTGMEDIUM = Struct_tagRemSTGMEDIUM;

record Struct_tagHLITEM (
    uHLID : CULong,
    pwzFriendlyName : LPWSTR,
);

alias HLITEM = Struct_tagHLITEM;

record Struct_tagSTATDATA (
    formatetc : FORMATETC,
    grfAdvf : CULong,
    pAdvSink : Pointer[Struct_IAdviseSink],
    dwConnection : CULong,
);

alias STATDATA = Struct_tagSTATDATA;

record Struct_tagSTATPROPSETSTG (
    fmtid : FMTID,
    clsid : CLSID,
    grfFlags : CULong,
    mtime : FILETIME,
    ctime : FILETIME,
    atime : FILETIME,
);

alias STATPROPSETSTG = Struct_tagSTATPROPSETSTG;

alias EXTCONN_STRONG = 1;
alias EXTCONN_WEAK = 2;
alias EXTCONN_CALLABLE = 4;

alias EXTCONN = Int;

record Struct_tagMULTI_QI (
    pIID : Pointer[IID],
    pItf : Pointer[IUnknown],
    hr : CLong,
);

alias MULTI_QI = Struct_tagMULTI_QI;

record Struct__AUTH_IDENTITY (
    User : Pointer[UShort],
    UserLength : CULong,
    Domain : Pointer[UShort],
    DomainLength : CULong,
    Password : Pointer[UShort],
    PasswordLength : CULong,
    Flags : CULong,
);

alias AUTH_IDENTITY = Struct__AUTH_IDENTITY;

record Struct__COAUTHINFO (
    dwAuthnSvc : CULong,
    dwAuthzSvc : CULong,
    pwszServerPrincName : LPWSTR,
    dwAuthnLevel : CULong,
    dwImpersonationLevel : CULong,
    pAuthIdentityData : Pointer[AUTH_IDENTITY],
    dwCapabilities : CULong,
);

alias COAUTHINFO = Struct__COAUTHINFO;

record Struct__COSERVERINFO (
    dwReserved1 : CULong,
    pwszName : LPWSTR,
    pAuthInfo : Pointer[COAUTHINFO],
    dwReserved2 : CULong,
);

alias COSERVERINFO = Struct__COSERVERINFO;

record Struct_tagBIND_OPTS (
    cbStruct : CULong,
    grfFlags : CULong,
    grfMode : CULong,
    dwTickCountDeadline : CULong,
);

alias BIND_OPTS = Struct_tagBIND_OPTS;

alias LPBIND_OPTS = Pointer[Struct_tagBIND_OPTS];

record Struct_tagBIND_OPTS2 (
    cbStruct : CULong,
    grfFlags : CULong,
    grfMode : CULong,
    dwTickCountDeadline : CULong,
    dwTrackFlags : CULong,
    dwClassContext : CULong,
    locale : CULong,
    pServerInfo : Pointer[COSERVERINFO],
);

alias BIND_OPTS2 = Struct_tagBIND_OPTS2;

alias LPBIND_OPTS2 = Pointer[Struct_tagBIND_OPTS2];

alias BIND_MAYBOTHERUSER = 1;
alias BIND_JUSTTESTEXISTENCE = 2;

alias BIND_FLAGS = Int;

record Struct_tagSTGMEDIUM (
    tymed : CULong,
    unnamed_field1 : AUnionType,
    pUnkForRelease : LPUNKNOWN,
);

alias STGMEDIUM = Struct_tagSTGMEDIUM;

alias LPSTGMEDIUM = Pointer[Struct_tagSTGMEDIUM];

alias LOCK_WRITE = 1;
alias LOCK_EXCLUSIVE = 2;
alias LOCK_ONLYONCE = 4;

alias LOCKTYPE = Int;

alias RPCOLEDATAREP = CULong;

record Struct_tagRPCOLEMESSAGE (
    reserved1 : PVOID,
    dataRepresentation : CULong,
    Buffer : PVOID,
    cbBuffer : CULong,
    iMethod : CULong,
    reserved2 : Array[PVOID,5],
    rpcFlags : CULong,
);

alias RPCOLEMESSAGE = Struct_tagRPCOLEMESSAGE;

alias PRPCOLEMESSAGE = Pointer[Struct_tagRPCOLEMESSAGE];

alias MKSYS_NONE = 0;
alias MKSYS_GENERICCOMPOSITE = 1;
alias MKSYS_FILEMONIKER = 2;
alias MKSYS_ANTIMONIKER = 3;
alias MKSYS_ITEMMONIKER = 4;
alias MKSYS_POINTERMONIKER = 5;

alias MKSYS = Int;

alias MKRREDUCE_ALL = 0;
alias MKRREDUCE_ONE = 196608;
alias MKRREDUCE_TOUSER = 131072;
alias MKRREDUCE_THROUGHUSER = 65536;

alias MKRREDUCE = Int;

record Struct_tagRemSNB (
    ulCntStr : CULong,
    ulCntChar : CULong,
    rgString : Array[UShort,1],
);

alias RemSNB = Struct_tagRemSNB;

alias ADVF_NODATA = 1;
alias ADVF_PRIMEFIRST = 2;
alias ADVF_ONLYONCE = 4;
alias ADVF_DATAONSTOP = 64;
alias ADVFCACHE_NOHANDLER = 8;
alias ADVFCACHE_FORCEBUILTIN = 16;
alias ADVFCACHE_ONSAVE = 32;

alias ADVF = Int;

alias TYMED_HGLOBAL = 1;
alias TYMED_FILE = 2;
alias TYMED_ISTREAM = 4;
alias TYMED_ISTORAGE = 8;
alias TYMED_GDI = 16;
alias TYMED_MFPICT = 32;
alias TYMED_ENHMF = 64;
alias TYMED_NULL = 0;

alias TYMED = Int;

alias SERVERCALL_ISHANDLED = 0;
alias SERVERCALL_REJECTED = 1;
alias SERVERCALL_RETRYLATER = 2;

alias SERVERCALL = Int;

record Struct_tagCAUB (
    cElems : CULong,
    pElems : Pointer[CUChar],
);

alias CAUB = Struct_tagCAUB;

record Struct_tagCAI (
    cElems : CULong,
    pElems : Pointer[Short],
);

alias CAI = Struct_tagCAI;

record Struct_tagCAUI (
    cElems : CULong,
    pElems : Pointer[UShort],
);

alias CAUI = Struct_tagCAUI;

record Struct_tagCAL (
    cElems : CULong,
    pElems : Pointer[CLong],
);

alias CAL = Struct_tagCAL;

record Struct_tagCAUL (
    cElems : CULong,
    pElems : Pointer[CULong],
);

alias CAUL = Struct_tagCAUL;

record Struct_tagCAFLT (
    cElems : CULong,
    pElems : Pointer[Float],
);

alias CAFLT = Struct_tagCAFLT;

record Struct_tagCADBL (
    cElems : CULong,
    pElems : Pointer[Double],
);

alias CADBL = Struct_tagCADBL;

record Struct_tagCACY (
    cElems : CULong,
    pElems : Pointer[CY],
);

alias CACY = Struct_tagCACY;

record Struct_tagCADATE (
    cElems : CULong,
    pElems : Pointer[Double],
);

alias CADATE = Struct_tagCADATE;

record Struct_tagCABSTR (
    cElems : CULong,
    pElems : Pointer[BSTR],
);

alias CABSTR = Struct_tagCABSTR;

record Struct_tagCABSTRBLOB (
    cElems : CULong,
    pElems : Pointer[BSTRBLOB],
);

alias CABSTRBLOB = Struct_tagCABSTRBLOB;

record Struct_tagCABOOL (
    cElems : CULong,
    pElems : Pointer[Short],
);

alias CABOOL = Struct_tagCABOOL;

record Struct_tagCASCODE (
    cElems : CULong,
    pElems : Pointer[CLong],
);

alias CASCODE = Struct_tagCASCODE;

record Struct_tagCAH (
    cElems : CULong,
    pElems : Pointer[LARGE_INTEGER],
);

alias CAH = Struct_tagCAH;

record Struct_tagCAUH (
    cElems : CULong,
    pElems : Pointer[ULARGE_INTEGER],
);

alias CAUH = Struct_tagCAUH;

record Struct_tagCALPSTR (
    cElems : CULong,
    pElems : Pointer[LPSTR],
);

alias CALPSTR = Struct_tagCALPSTR;

record Struct_tagCALPWSTR (
    cElems : CULong,
    pElems : Pointer[LPWSTR],
);

alias CALPWSTR = Struct_tagCALPWSTR;

record Struct_tagCAFILETIME (
    cElems : CULong,
    pElems : Pointer[FILETIME],
);

alias CAFILETIME = Struct_tagCAFILETIME;

record Struct_tagCACLIPDATA (
    cElems : CULong,
    pElems : Pointer[CLIPDATA],
);

alias CACLIPDATA = Struct_tagCACLIPDATA;

record Struct_tagCACLSID (
    cElems : CULong,
    pElems : Pointer[CLSID],
);

alias CACLSID = Struct_tagCACLSID;

alias LPPROPVARIANT = Pointer[Struct_tagPROPVARIANT];

record Struct_tagCAPROPVARIANT (
    cElems : CULong,
    pElems : LPPROPVARIANT,
);

alias CAPROPVARIANT = Struct_tagCAPROPVARIANT;

record Struct_tagPROPVARIANT (
    vt : UShort,
    wReserved1 : UShort,
    wReserved2 : UShort,
    wReserved3 : UShort,
    unnamed_field4 : AUnionType,
);

alias PROPVARIANT = Struct_tagPROPVARIANT;

record Struct_tagPROPSPEC (
    ulKind : CULong,
    unnamed_field1 : AUnionType,
);

alias PROPSPEC = Struct_tagPROPSPEC;

record Struct_tagSTATPROPSTG (
    lpwstrName : LPOLESTR,
    propid : CULong,
    vt : UShort,
);

alias STATPROPSTG = Struct_tagSTATPROPSTG;

alias PROPSETFLAG_DEFAULT = 0;
alias PROPSETFLAG_NONSIMPLE = 1;
alias PROPSETFLAG_ANSI = 2;
alias PROPSETFLAG_UNBUFFERED = 4;

alias PROPSETFLAG = Int;

record Struct_tagSTORAGELAYOUT (
    LayoutType : CULong,
    pwcsElementName : Pointer[UShort],
    cOffset : LARGE_INTEGER,
    cBytes : LARGE_INTEGER,
);

alias STORAGELAYOUT = Struct_tagSTORAGELAYOUT;

record Struct_tagSOLE_AUTHENTICATION_SERVICE (
    dwAuthnSvc : CULong,
    dwAuthzSvc : CULong,
    pPrincipalName : Pointer[UShort],
    hr : CLong,
);

alias SOLE_AUTHENTICATION_SERVICE = Struct_tagSOLE_AUTHENTICATION_SERVICE;

alias EOAC_NONE = 0;
alias EOAC_MUTUAL_AUTH = 1;
alias EOAC_STATIC_CLOAKING = 32;
alias EOAC_DYNAMIC_CLOAKING = 64;
alias EOAC_ANY_AUTHORITY = 128;
alias EOAC_MAKE_FULLSIC = 256;
alias EOAC_DEFAULT = 2048;
alias EOAC_SECURE_REFS = 2;
alias EOAC_ACCESS_CONTROL = 4;
alias EOAC_APPID = 8;
alias EOAC_DYNAMIC = 16;
alias EOAC_REQUIRE_FULLSIC = 512;
alias EOAC_AUTO_IMPERSONATE = 1024;
alias EOAC_NO_CUSTOM_MARSHAL = 8192;
alias EOAC_DISABLE_AAA = 4096;

alias EOLE_AUTHENTICATION_CAPABILITIES = Int;

record Struct_tagSOLE_AUTHENTICATION_INFO (
    dwAuthnSvc : CULong,
    dwAuthzSvc : CULong,
    pAuthInfo : RawPointer,
);

alias SOLE_AUTHENTICATION_INFO = Struct_tagSOLE_AUTHENTICATION_INFO;

record Struct_tagSOLE_AUTHENTICATION_LIST (
    cAuthInfo : CULong,
    aAuthInfo : Pointer[SOLE_AUTHENTICATION_INFO],
);

alias SOLE_AUTHENTICATION_LIST = Struct_tagSOLE_AUTHENTICATION_LIST;

external FMTID_SummaryInformation : FMTID;

external FMTID_DocSummaryInformation : FMTID;

external FMTID_UserDefinedProperties : FMTID;

record Struct_IEnumFORMATETC (
    lpVtbl : Pointer[Struct_IEnumFORMATETCVtbl],
);

alias IEnumFORMATETC = Struct_IEnumFORMATETC;

alias IEnumFORMATETCVtbl = Struct_IEnumFORMATETCVtbl;

record Struct_IEnumFORMATETCVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IEnumFORMATETC],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IEnumFORMATETC]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IEnumFORMATETC]),(CULong)],
    Next : StdCallCodePointer[(Pointer[Struct_IEnumFORMATETC],CULong,Pointer[Struct_tagFORMATETC],Pointer[CULong]),(CLong)],
    Skip : StdCallCodePointer[(Pointer[Struct_IEnumFORMATETC],CULong),(CLong)],
    Reset : StdCallCodePointer[(Pointer[Struct_IEnumFORMATETC]),(CLong)],
    Clone : StdCallCodePointer[(Pointer[Struct_IEnumFORMATETC],Pointer[Pointer[Struct_IEnumFORMATETC]]),(CLong)],
);

record Struct_IEnumHLITEM (
    lpVtbl : Pointer[Struct_IEnumHLITEMVtbl],
);

alias IEnumHLITEM = Struct_IEnumHLITEM;

alias IEnumHLITEMVtbl = Struct_IEnumHLITEMVtbl;

record Struct_IEnumHLITEMVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IEnumHLITEM],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IEnumHLITEM]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IEnumHLITEM]),(CULong)],
    Next : StdCallCodePointer[(Pointer[Struct_IEnumHLITEM],CULong,Pointer[Struct_tagHLITEM],Pointer[CULong]),(CLong)],
    Skip : StdCallCodePointer[(Pointer[Struct_IEnumHLITEM],CULong),(CLong)],
    Reset : StdCallCodePointer[(Pointer[Struct_IEnumHLITEM]),(CLong)],
    Clone : StdCallCodePointer[(Pointer[Struct_IEnumHLITEM],Pointer[Pointer[Struct_IEnumHLITEM]]),(CLong)],
);

record Struct_IEnumSTATDATA (
    lpVtbl : Pointer[Struct_IEnumSTATDATAVtbl],
);

alias IEnumSTATDATA = Struct_IEnumSTATDATA;

alias IEnumSTATDATAVtbl = Struct_IEnumSTATDATAVtbl;

record Struct_IEnumSTATDATAVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IEnumSTATDATA],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IEnumSTATDATA]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IEnumSTATDATA]),(CULong)],
    Next : StdCallCodePointer[(Pointer[Struct_IEnumSTATDATA],CULong,Pointer[Struct_tagSTATDATA],Pointer[CULong]),(CLong)],
    Skip : StdCallCodePointer[(Pointer[Struct_IEnumSTATDATA],CULong),(CLong)],
    Reset : StdCallCodePointer[(Pointer[Struct_IEnumSTATDATA]),(CLong)],
    Clone : StdCallCodePointer[(Pointer[Struct_IEnumSTATDATA],Pointer[Pointer[Struct_IEnumSTATDATA]]),(CLong)],
);

record Struct_IEnumSTATPROPSETSTG (
    lpVtbl : Pointer[Struct_IEnumSTATPROPSETSTGVtbl],
);

alias IEnumSTATPROPSETSTG = Struct_IEnumSTATPROPSETSTG;

alias IEnumSTATPROPSETSTGVtbl = Struct_IEnumSTATPROPSETSTGVtbl;

record Struct_IEnumSTATPROPSETSTGVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IEnumSTATPROPSETSTG],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IEnumSTATPROPSETSTG]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IEnumSTATPROPSETSTG]),(CULong)],
    Next : StdCallCodePointer[(Pointer[Struct_IEnumSTATPROPSETSTG],CULong,Pointer[Struct_tagSTATPROPSETSTG],Pointer[CULong]),(CLong)],
    Skip : StdCallCodePointer[(Pointer[Struct_IEnumSTATPROPSETSTG],CULong),(CLong)],
    Reset : StdCallCodePointer[(Pointer[Struct_IEnumSTATPROPSETSTG]),(CLong)],
    Clone : StdCallCodePointer[(Pointer[Struct_IEnumSTATPROPSETSTG],Pointer[Pointer[Struct_IEnumSTATPROPSETSTG]]),(CLong)],
);

record Struct_IEnumSTATPROPSTG (
    lpVtbl : Pointer[Struct_IEnumSTATPROPSTGVtbl],
);

alias IEnumSTATPROPSTG = Struct_IEnumSTATPROPSTG;

alias IEnumSTATPROPSTGVtbl = Struct_IEnumSTATPROPSTGVtbl;

record Struct_IEnumSTATPROPSTGVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IEnumSTATPROPSTG],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IEnumSTATPROPSTG]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IEnumSTATPROPSTG]),(CULong)],
    Next : StdCallCodePointer[(Pointer[Struct_IEnumSTATPROPSTG],CULong,Pointer[Struct_tagSTATPROPSTG],Pointer[CULong]),(CLong)],
    Skip : StdCallCodePointer[(Pointer[Struct_IEnumSTATPROPSTG],CULong),(CLong)],
    Reset : StdCallCodePointer[(Pointer[Struct_IEnumSTATPROPSTG]),(CLong)],
    Clone : StdCallCodePointer[(Pointer[Struct_IEnumSTATPROPSTG],Pointer[Pointer[Struct_IEnumSTATPROPSTG]]),(CLong)],
);

record Struct_IEnumSTATSTG (
    lpVtbl : Pointer[Struct_IEnumSTATSTGVtbl],
);

alias IEnumSTATSTG = Struct_IEnumSTATSTG;

alias IEnumSTATSTGVtbl = Struct_IEnumSTATSTGVtbl;

record Struct_IEnumSTATSTGVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IEnumSTATSTG],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IEnumSTATSTG]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IEnumSTATSTG]),(CULong)],
    Next : StdCallCodePointer[(Pointer[Struct_IEnumSTATSTG],CULong,Pointer[Struct_tagSTATSTG],Pointer[CULong]),(CLong)],
    Skip : StdCallCodePointer[(Pointer[Struct_IEnumSTATSTG],CULong),(CLong)],
    Reset : StdCallCodePointer[(Pointer[Struct_IEnumSTATSTG]),(CLong)],
    Clone : StdCallCodePointer[(Pointer[Struct_IEnumSTATSTG],Pointer[Pointer[Struct_IEnumSTATSTG]]),(CLong)],
);

record Struct_IEnumString (
    lpVtbl : Pointer[Struct_IEnumStringVtbl],
);

alias IEnumString = Struct_IEnumString;

alias IEnumStringVtbl = Struct_IEnumStringVtbl;

record Struct_IEnumStringVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IEnumString],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IEnumString]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IEnumString]),(CULong)],
    Next : StdCallCodePointer[(Pointer[Struct_IEnumString],CULong,Pointer[Pointer[UShort]],Pointer[CULong]),(CLong)],
    Skip : StdCallCodePointer[(Pointer[Struct_IEnumString],CULong),(CLong)],
    Reset : StdCallCodePointer[(Pointer[Struct_IEnumString]),(CLong)],
    Clone : StdCallCodePointer[(Pointer[Struct_IEnumString],Pointer[Pointer[Struct_IEnumString]]),(CLong)],
);

record Struct_IEnumMoniker (
    lpVtbl : Pointer[Struct_IEnumMonikerVtbl],
);

alias IEnumMoniker = Struct_IEnumMoniker;

alias IEnumMonikerVtbl = Struct_IEnumMonikerVtbl;

record Struct_IEnumMonikerVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IEnumMoniker],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IEnumMoniker]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IEnumMoniker]),(CULong)],
    Next : StdCallCodePointer[(Pointer[Struct_IEnumMoniker],CULong,Pointer[Pointer[Struct_IMoniker]],Pointer[CULong]),(CLong)],
    Skip : StdCallCodePointer[(Pointer[Struct_IEnumMoniker],CULong),(CLong)],
    Reset : StdCallCodePointer[(Pointer[Struct_IEnumMoniker]),(CLong)],
    Clone : StdCallCodePointer[(Pointer[Struct_IEnumMoniker],Pointer[Pointer[Struct_IEnumMoniker]]),(CLong)],
);

record Struct_IEnumUnknown (
    lpVtbl : Pointer[Struct_IEnumUnknownVtbl],
);

alias IEnumUnknown = Struct_IEnumUnknown;

alias IEnumUnknownVtbl = Struct_IEnumUnknownVtbl;

record Struct_IEnumUnknownVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IEnumUnknown],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IEnumUnknown]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IEnumUnknown]),(CULong)],
    Next : StdCallCodePointer[(Pointer[Struct_IEnumUnknown],CULong,Pointer[Pointer[Struct_IUnknown]],Pointer[CULong]),(CLong)],
    Skip : StdCallCodePointer[(Pointer[Struct_IEnumUnknown],CULong),(CLong)],
    Reset : StdCallCodePointer[(Pointer[Struct_IEnumUnknown]),(CLong)],
    Clone : StdCallCodePointer[(Pointer[Struct_IEnumUnknown],Pointer[Pointer[Struct_IEnumUnknown]]),(CLong)],
);

external IID_ISequentialStream : IID;

record Struct_ISequentialStream (
    lpVtbl : Pointer[Struct_ISequentialStreamVtbl],
);

alias ISequentialStream = Struct_ISequentialStream;

alias ISequentialStreamVtbl = Struct_ISequentialStreamVtbl;

record Struct_ISequentialStreamVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_ISequentialStream],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_ISequentialStream]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_ISequentialStream]),(CULong)],
    Read : StdCallCodePointer[(Pointer[Struct_ISequentialStream],RawPointer,CULong,Pointer[CULong]),(CLong)],
    Write : StdCallCodePointer[(Pointer[Struct_ISequentialStream],RawPointer,CULong,Pointer[CULong]),(CLong)],
);

external IID_IStream : IID;

record Struct_IStream (
    lpVtbl : Pointer[Struct_IStreamVtbl],
);

alias IStream = Struct_IStream;

alias IStreamVtbl = Struct_IStreamVtbl;

record Struct_IStreamVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IStream],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IStream]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IStream]),(CULong)],
    Read : StdCallCodePointer[(Pointer[Struct_IStream],RawPointer,CULong,Pointer[CULong]),(CLong)],
    Write : StdCallCodePointer[(Pointer[Struct_IStream],RawPointer,CULong,Pointer[CULong]),(CLong)],
    Seek : StdCallCodePointer[(Pointer[Struct_IStream],AUnionType,CULong,OpaquePointer),(CLong)],
    SetSize : StdCallCodePointer[(Pointer[Struct_IStream],AUnionType),(CLong)],
    CopyTo : StdCallCodePointer[(Pointer[Struct_IStream],Pointer[Struct_IStream],AUnionType,OpaquePointer,OpaquePointer),(CLong)],
    Commit : StdCallCodePointer[(Pointer[Struct_IStream],CULong),(CLong)],
    Revert : StdCallCodePointer[(Pointer[Struct_IStream]),(CLong)],
    LockRegion : StdCallCodePointer[(Pointer[Struct_IStream],AUnionType,AUnionType,CULong),(CLong)],
    UnlockRegion : StdCallCodePointer[(Pointer[Struct_IStream],AUnionType,AUnionType,CULong),(CLong)],
    Stat : StdCallCodePointer[(Pointer[Struct_IStream],Pointer[Struct_tagSTATSTG],CULong),(CLong)],
    Clone : StdCallCodePointer[(Pointer[Struct_IStream],Pointer[Pointer[Struct_IStream]]),(CLong)],
);

external IID_IMarshal : IID;

record Struct_IMarshal (
    lpVtbl : Pointer[Struct_IMarshalVtbl],
);

alias IMarshal = Struct_IMarshal;

alias IMarshalVtbl = Struct_IMarshalVtbl;

record Struct_IMarshalVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IMarshal],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IMarshal]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IMarshal]),(CULong)],
    GetUnmarshalClass : StdCallCodePointer[(Pointer[Struct_IMarshal],Pointer[Struct__GUID],RawPointer,CULong,RawPointer,CULong,Pointer[Struct__GUID]),(CLong)],
    GetMarshalSizeMax : StdCallCodePointer[(Pointer[Struct_IMarshal],Pointer[Struct__GUID],RawPointer,CULong,RawPointer,Pointer[CULong],Pointer[CULong]),(CLong)],
    MarshalInterface : StdCallCodePointer[(Pointer[Struct_IMarshal],Pointer[Struct_IStream],Pointer[Struct__GUID],RawPointer,CULong,RawPointer,CULong),(CLong)],
    UnmarshalInterface : StdCallCodePointer[(Pointer[Struct_IMarshal],Pointer[Struct_IStream],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    ReleaseMarshalData : StdCallCodePointer[(Pointer[Struct_IMarshal],Pointer[Struct_IStream]),(CLong)],
    DisconnectObject : StdCallCodePointer[(Pointer[Struct_IMarshal],CULong),(CLong)],
);

external IID_IStdMarshalInfo : IID;

record Struct_IStdMarshalInfo (
    lpVtbl : Pointer[Struct_IStdMarshalInfoVtbl],
);

alias IStdMarshalInfo = Struct_IStdMarshalInfo;

alias IStdMarshalInfoVtbl = Struct_IStdMarshalInfoVtbl;

record Struct_IStdMarshalInfoVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IStdMarshalInfo],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IStdMarshalInfo]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IStdMarshalInfo]),(CULong)],
    GetClassForHandler : StdCallCodePointer[(Pointer[Struct_IStdMarshalInfo],CULong,RawPointer,Pointer[Struct__GUID]),(CLong)],
);

external IID_IMalloc : IID;

record Struct_IMalloc (
    lpVtbl : Pointer[Struct_IMallocVtbl],
);

alias IMalloc = Struct_IMalloc;

alias IMallocVtbl = Struct_IMallocVtbl;

record Struct_IMallocVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IMalloc],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IMalloc]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IMalloc]),(CULong)],
    Alloc : StdCallCodePointer[(Pointer[Struct_IMalloc],CULong),(RawPointer)],
    Realloc : StdCallCodePointer[(Pointer[Struct_IMalloc],RawPointer,CULong),(RawPointer)],
    Free : StdCallCodePointer[(Pointer[Struct_IMalloc],RawPointer),()],
    GetSize : StdCallCodePointer[(Pointer[Struct_IMalloc],RawPointer),(CULong)],
    DidAlloc : StdCallCodePointer[(Pointer[Struct_IMalloc],RawPointer),(Int)],
    HeapMinimize : StdCallCodePointer[(Pointer[Struct_IMalloc]),()],
);

external IID_IMallocSpy : IID;

record Struct_IMallocSpy (
    lpVtbl : Pointer[Struct_IMallocSpyVtbl],
);

alias IMallocSpy = Struct_IMallocSpy;

alias IMallocSpyVtbl = Struct_IMallocSpyVtbl;

record Struct_IMallocSpyVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IMallocSpy],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IMallocSpy]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IMallocSpy]),(CULong)],
    PreAlloc : StdCallCodePointer[(Pointer[Struct_IMallocSpy],CULong),(CULong)],
    PostAlloc : StdCallCodePointer[(Pointer[Struct_IMallocSpy],RawPointer),(RawPointer)],
    PreFree : StdCallCodePointer[(Pointer[Struct_IMallocSpy],RawPointer,Int),(RawPointer)],
    PostFree : StdCallCodePointer[(Pointer[Struct_IMallocSpy],Int),()],
    PreRealloc : StdCallCodePointer[(Pointer[Struct_IMallocSpy],RawPointer,CULong,Pointer[RawPointer],Int),(CULong)],
    PostRealloc : StdCallCodePointer[(Pointer[Struct_IMallocSpy],RawPointer,Int),(RawPointer)],
    PreGetSize : StdCallCodePointer[(Pointer[Struct_IMallocSpy],RawPointer,Int),(RawPointer)],
    PostGetSize : StdCallCodePointer[(Pointer[Struct_IMallocSpy],CULong,Int),(CULong)],
    PreDidAlloc : StdCallCodePointer[(Pointer[Struct_IMallocSpy],RawPointer,Int),(RawPointer)],
    PostDidAlloc : StdCallCodePointer[(Pointer[Struct_IMallocSpy],RawPointer,Int,Int),(Int)],
    PreHeapMinimize : StdCallCodePointer[(Pointer[Struct_IMallocSpy]),()],
    PostHeapMinimize : StdCallCodePointer[(Pointer[Struct_IMallocSpy]),()],
);

external IID_IMessageFilter : IID;

record Struct_IMessageFilter (
    lpVtbl : Pointer[Struct_IMessageFilterVtbl],
);

alias IMessageFilter = Struct_IMessageFilter;

alias IMessageFilterVtbl = Struct_IMessageFilterVtbl;

record Struct_IMessageFilterVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IMessageFilter],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IMessageFilter]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IMessageFilter]),(CULong)],
    HandleInComingCall : StdCallCodePointer[(Pointer[Struct_IMessageFilter],CULong,Pointer[Struct_HTASK__],CULong,Pointer[Struct_tagINTERFACEINFO]),(CULong)],
    RetryRejectedCall : StdCallCodePointer[(Pointer[Struct_IMessageFilter],Pointer[Struct_HTASK__],CULong,CULong),(CULong)],
    MessagePending : StdCallCodePointer[(Pointer[Struct_IMessageFilter],Pointer[Struct_HTASK__],CULong,CULong),(CULong)],
);

external IID_IPersist : IID;

record Struct_IPersist (
    lpVtbl : Pointer[Struct_IPersistVtbl],
);

alias IPersist = Struct_IPersist;

alias IPersistVtbl = Struct_IPersistVtbl;

record Struct_IPersistVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IPersist],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IPersist]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IPersist]),(CULong)],
    GetClassID : StdCallCodePointer[(Pointer[Struct_IPersist],Pointer[Struct__GUID]),(CLong)],
);

external IID_IPersistStream : IID;

record Struct_IPersistStream (
    lpVtbl : Pointer[Struct_IPersistStreamVtbl],
);

alias IPersistStream = Struct_IPersistStream;

alias IPersistStreamVtbl = Struct_IPersistStreamVtbl;

record Struct_IPersistStreamVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IPersistStream],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IPersistStream]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IPersistStream]),(CULong)],
    GetClassID : StdCallCodePointer[(Pointer[Struct_IPersistStream],Pointer[Struct__GUID]),(CLong)],
    IsDirty : StdCallCodePointer[(Pointer[Struct_IPersistStream]),(CLong)],
    Load : StdCallCodePointer[(Pointer[Struct_IPersistStream],Pointer[Struct_IStream]),(CLong)],
    Save : StdCallCodePointer[(Pointer[Struct_IPersistStream],Pointer[Struct_IStream],Int),(CLong)],
    GetSizeMax : StdCallCodePointer[(Pointer[Struct_IPersistStream],OpaquePointer),(CLong)],
);

external IID_IRunningObjectTable : IID;

record Struct_IRunningObjectTable (
    lpVtbl : Pointer[Struct_IRunningObjectTableVtbl],
);

alias IRunningObjectTable = Struct_IRunningObjectTable;

alias IRunningObjectTableVtbl = Struct_IRunningObjectTableVtbl;

record Struct_IRunningObjectTableVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IRunningObjectTable],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IRunningObjectTable]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IRunningObjectTable]),(CULong)],
    Register : StdCallCodePointer[(Pointer[Struct_IRunningObjectTable],CULong,Pointer[Struct_IUnknown],Pointer[Struct_IMoniker],Pointer[CULong]),(CLong)],
    Revoke : StdCallCodePointer[(Pointer[Struct_IRunningObjectTable],CULong),(CLong)],
    IsRunning : StdCallCodePointer[(Pointer[Struct_IRunningObjectTable],Pointer[Struct_IMoniker]),(CLong)],
    GetObjectA : StdCallCodePointer[(Pointer[Struct_IRunningObjectTable],Pointer[Struct_IMoniker],Pointer[Pointer[Struct_IUnknown]]),(CLong)],
    NoteChangeTime : StdCallCodePointer[(Pointer[Struct_IRunningObjectTable],CULong,Pointer[Struct__FILETIME]),(CLong)],
    GetTimeOfLastChange : StdCallCodePointer[(Pointer[Struct_IRunningObjectTable],Pointer[Struct_IMoniker],Pointer[Struct__FILETIME]),(CLong)],
    EnumRunning : StdCallCodePointer[(Pointer[Struct_IRunningObjectTable],Pointer[Pointer[Struct_IEnumMoniker]]),(CLong)],
);

external IID_IBindCtx : IID;

record Struct_IBindCtx (
    lpVtbl : Pointer[Struct_IBindCtxVtbl],
);

alias IBindCtx = Struct_IBindCtx;

alias IBindCtxVtbl = Struct_IBindCtxVtbl;

record Struct_IBindCtxVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IBindCtx],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IBindCtx]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IBindCtx]),(CULong)],
    RegisterObjectBound : StdCallCodePointer[(Pointer[Struct_IBindCtx],Pointer[Struct_IUnknown]),(CLong)],
    RevokeObjectBound : StdCallCodePointer[(Pointer[Struct_IBindCtx],Pointer[Struct_IUnknown]),(CLong)],
    ReleaseBoundObjects : StdCallCodePointer[(Pointer[Struct_IBindCtx]),(CLong)],
    SetBindOptions : StdCallCodePointer[(Pointer[Struct_IBindCtx],Pointer[Struct_tagBIND_OPTS]),(CLong)],
    GetBindOptions : StdCallCodePointer[(Pointer[Struct_IBindCtx],Pointer[Struct_tagBIND_OPTS]),(CLong)],
    GetRunningObjectTable : StdCallCodePointer[(Pointer[Struct_IBindCtx],Pointer[Pointer[Struct_IRunningObjectTable]]),(CLong)],
    RegisterObjectParam : StdCallCodePointer[(Pointer[Struct_IBindCtx],Pointer[UShort],Pointer[Struct_IUnknown]),(CLong)],
    GetObjectParam : StdCallCodePointer[(Pointer[Struct_IBindCtx],Pointer[UShort],Pointer[Pointer[Struct_IUnknown]]),(CLong)],
    EnumObjectParam : StdCallCodePointer[(Pointer[Struct_IBindCtx],Pointer[Pointer[Struct_IEnumString]]),(CLong)],
    RevokeObjectParam : StdCallCodePointer[(Pointer[Struct_IBindCtx],Pointer[UShort]),(CLong)],
);

external IID_IMoniker : IID;

record Struct_IMoniker (
    lpVtbl : Pointer[Struct_IMonikerVtbl],
);

alias IMoniker = Struct_IMoniker;

alias IMonikerVtbl = Struct_IMonikerVtbl;

record Struct_IMonikerVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IMoniker],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IMoniker]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IMoniker]),(CULong)],
    GetClassID : StdCallCodePointer[(Pointer[Struct_IMoniker],Pointer[Struct__GUID]),(CLong)],
    IsDirty : StdCallCodePointer[(Pointer[Struct_IMoniker]),(CLong)],
    Load : StdCallCodePointer[(Pointer[Struct_IMoniker],Pointer[Struct_IStream]),(CLong)],
    Save : StdCallCodePointer[(Pointer[Struct_IMoniker],Pointer[Struct_IStream],Int),(CLong)],
    GetSizeMax : StdCallCodePointer[(Pointer[Struct_IMoniker],OpaquePointer),(CLong)],
    BindToObject : StdCallCodePointer[(Pointer[Struct_IMoniker],Pointer[Struct_IBindCtx],Pointer[Struct_IMoniker],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    BindToStorage : StdCallCodePointer[(Pointer[Struct_IMoniker],Pointer[Struct_IBindCtx],Pointer[Struct_IMoniker],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    Reduce : StdCallCodePointer[(Pointer[Struct_IMoniker],Pointer[Struct_IBindCtx],CULong,Pointer[Pointer[Struct_IMoniker]],Pointer[Pointer[Struct_IMoniker]]),(CLong)],
    ComposeWith : StdCallCodePointer[(Pointer[Struct_IMoniker],Pointer[Struct_IMoniker],Int,Pointer[Pointer[Struct_IMoniker]]),(CLong)],
    Enum : StdCallCodePointer[(Pointer[Struct_IMoniker],Int,Pointer[Pointer[Struct_IEnumMoniker]]),(CLong)],
    IsEqual : StdCallCodePointer[(Pointer[Struct_IMoniker],Pointer[Struct_IMoniker]),(CLong)],
    Hash : StdCallCodePointer[(Pointer[Struct_IMoniker],Pointer[CULong]),(CLong)],
    IsRunning : StdCallCodePointer[(Pointer[Struct_IMoniker],Pointer[Struct_IBindCtx],Pointer[Struct_IMoniker],Pointer[Struct_IMoniker]),(CLong)],
    GetTimeOfLastChange : StdCallCodePointer[(Pointer[Struct_IMoniker],Pointer[Struct_IBindCtx],Pointer[Struct_IMoniker],Pointer[Struct__FILETIME]),(CLong)],
    Inverse : StdCallCodePointer[(Pointer[Struct_IMoniker],Pointer[Pointer[Struct_IMoniker]]),(CLong)],
    CommonPrefixWith : StdCallCodePointer[(Pointer[Struct_IMoniker],Pointer[Struct_IMoniker],Pointer[Pointer[Struct_IMoniker]]),(CLong)],
    RelativePathTo : StdCallCodePointer[(Pointer[Struct_IMoniker],Pointer[Struct_IMoniker],Pointer[Pointer[Struct_IMoniker]]),(CLong)],
    GetDisplayName : StdCallCodePointer[(Pointer[Struct_IMoniker],Pointer[Struct_IBindCtx],Pointer[Struct_IMoniker],Pointer[Pointer[UShort]]),(CLong)],
    ParseDisplayName : StdCallCodePointer[(Pointer[Struct_IMoniker],Pointer[Struct_IBindCtx],Pointer[Struct_IMoniker],Pointer[UShort],Pointer[CULong],Pointer[Pointer[Struct_IMoniker]]),(CLong)],
    IsSystemMoniker : StdCallCodePointer[(Pointer[Struct_IMoniker],Pointer[CULong]),(CLong)],
);

external IID_IPersistStorage : IID;

record Struct_IPersistStorage (
    lpVtbl : Pointer[Struct_IPersistStorageVtbl],
);

alias IPersistStorage = Struct_IPersistStorage;

alias IPersistStorageVtbl = Struct_IPersistStorageVtbl;

record Struct_IPersistStorageVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IPersistStorage],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IPersistStorage]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IPersistStorage]),(CULong)],
    GetClassID : StdCallCodePointer[(Pointer[Struct_IPersistStorage],Pointer[Struct__GUID]),(CLong)],
    IsDirty : StdCallCodePointer[(Pointer[Struct_IPersistStorage]),(CLong)],
    InitNew : StdCallCodePointer[(Pointer[Struct_IPersistStorage],Pointer[Struct_IStorage]),(CLong)],
    Load : StdCallCodePointer[(Pointer[Struct_IPersistStorage],Pointer[Struct_IStorage]),(CLong)],
    Save : StdCallCodePointer[(Pointer[Struct_IPersistStorage],Pointer[Struct_IStorage],Int),(CLong)],
    SaveCompleted : StdCallCodePointer[(Pointer[Struct_IPersistStorage],Pointer[Struct_IStorage]),(CLong)],
    HandsOffStorage : StdCallCodePointer[(Pointer[Struct_IPersistStorage]),(CLong)],
);

external IID_IPersistFile : IID;

record Struct_IPersistFile (
    lpVtbl : Pointer[Struct_IPersistFileVtbl],
);

alias IPersistFile = Struct_IPersistFile;

alias IPersistFileVtbl = Struct_IPersistFileVtbl;

record Struct_IPersistFileVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IPersistFile],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IPersistFile]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IPersistFile]),(CULong)],
    GetClassID : StdCallCodePointer[(Pointer[Struct_IPersistFile],Pointer[Struct__GUID]),(CLong)],
    IsDirty : StdCallCodePointer[(Pointer[Struct_IPersistFile]),(CLong)],
    Load : StdCallCodePointer[(Pointer[Struct_IPersistFile],Pointer[UShort],CULong),(CLong)],
    Save : StdCallCodePointer[(Pointer[Struct_IPersistFile],Pointer[UShort],Int),(CLong)],
    SaveCompleted : StdCallCodePointer[(Pointer[Struct_IPersistFile],Pointer[UShort]),(CLong)],
    GetCurFile : StdCallCodePointer[(Pointer[Struct_IPersistFile],Pointer[Pointer[UShort]]),(CLong)],
);

external IID_IAdviseSink : IID;

record Struct_IAdviseSink (
    lpVtbl : Pointer[Struct_IAdviseSinkVtbl],
);

alias IAdviseSink = Struct_IAdviseSink;

alias IAdviseSinkVtbl = Struct_IAdviseSinkVtbl;

record Struct_IAdviseSinkVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IAdviseSink],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IAdviseSink]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IAdviseSink]),(CULong)],
    OnDataChange : StdCallCodePointer[(Pointer[Struct_IAdviseSink],Pointer[Struct_tagFORMATETC],Pointer[Struct_tagSTGMEDIUM]),()],
    OnViewChange : StdCallCodePointer[(Pointer[Struct_IAdviseSink],CULong,CLong),()],
    OnRename : StdCallCodePointer[(Pointer[Struct_IAdviseSink],Pointer[Struct_IMoniker]),()],
    OnSave : StdCallCodePointer[(Pointer[Struct_IAdviseSink]),()],
    OnClose : StdCallCodePointer[(Pointer[Struct_IAdviseSink]),()],
);

external IID_IAdviseSink2 : IID;

record Struct_IAdviseSink2 (
    lpVtbl : Pointer[Struct_IAdviseSink2Vtbl],
);

alias IAdviseSink2 = Struct_IAdviseSink2;

alias IAdviseSink2Vtbl = Struct_IAdviseSink2Vtbl;

record Struct_IAdviseSink2Vtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IAdviseSink2],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IAdviseSink2]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IAdviseSink2]),(CULong)],
    OnDataChange : StdCallCodePointer[(Pointer[Struct_IAdviseSink2],Pointer[Struct_tagFORMATETC],Pointer[Struct_tagSTGMEDIUM]),()],
    OnViewChange : StdCallCodePointer[(Pointer[Struct_IAdviseSink2],CULong,CLong),()],
    OnRename : StdCallCodePointer[(Pointer[Struct_IAdviseSink2],Pointer[Struct_IMoniker]),()],
    OnSave : StdCallCodePointer[(Pointer[Struct_IAdviseSink2]),()],
    OnClose : StdCallCodePointer[(Pointer[Struct_IAdviseSink2]),()],
    OnLinkSrcChange : StdCallCodePointer[(Pointer[Struct_IAdviseSink2],Pointer[Struct_IMoniker]),()],
);

external IID_IDataObject : IID;

record Struct_IDataObject (
    lpVtbl : Pointer[Struct_IDataObjectVtbl],
);

alias IDataObject = Struct_IDataObject;

alias IDataObjectVtbl = Struct_IDataObjectVtbl;

record Struct_IDataObjectVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IDataObject],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IDataObject]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IDataObject]),(CULong)],
    GetData : StdCallCodePointer[(Pointer[Struct_IDataObject],Pointer[Struct_tagFORMATETC],Pointer[Struct_tagSTGMEDIUM]),(CLong)],
    GetDataHere : StdCallCodePointer[(Pointer[Struct_IDataObject],Pointer[Struct_tagFORMATETC],Pointer[Struct_tagSTGMEDIUM]),(CLong)],
    QueryGetData : StdCallCodePointer[(Pointer[Struct_IDataObject],Pointer[Struct_tagFORMATETC]),(CLong)],
    GetCanonicalFormatEtc : StdCallCodePointer[(Pointer[Struct_IDataObject],Pointer[Struct_tagFORMATETC],Pointer[Struct_tagFORMATETC]),(CLong)],
    SetData : StdCallCodePointer[(Pointer[Struct_IDataObject],Pointer[Struct_tagFORMATETC],Pointer[Struct_tagSTGMEDIUM],Int),(CLong)],
    EnumFormatEtc : StdCallCodePointer[(Pointer[Struct_IDataObject],CULong,Pointer[Pointer[Struct_IEnumFORMATETC]]),(CLong)],
    DAdvise : StdCallCodePointer[(Pointer[Struct_IDataObject],Pointer[Struct_tagFORMATETC],CULong,Pointer[Struct_IAdviseSink],Pointer[CULong]),(CLong)],
    DUnadvise : StdCallCodePointer[(Pointer[Struct_IDataObject],CULong),(CLong)],
    EnumDAdvise : StdCallCodePointer[(Pointer[Struct_IDataObject],Pointer[Pointer[Struct_IEnumSTATDATA]]),(CLong)],
);

external IID_IDataAdviseHolder : IID;

record Struct_IDataAdviseHolder (
    lpVtbl : Pointer[Struct_IDataAdviseHolderVtbl],
);

alias IDataAdviseHolder = Struct_IDataAdviseHolder;

alias IDataAdviseHolderVtbl = Struct_IDataAdviseHolderVtbl;

record Struct_IDataAdviseHolderVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IDataAdviseHolder],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IDataAdviseHolder]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IDataAdviseHolder]),(CULong)],
    Advise : StdCallCodePointer[(Pointer[Struct_IDataAdviseHolder],Pointer[Struct_IDataObject],Pointer[Struct_tagFORMATETC],CULong,Pointer[Struct_IAdviseSink],Pointer[CULong]),(CLong)],
    Unadvise : StdCallCodePointer[(Pointer[Struct_IDataAdviseHolder],CULong),(CLong)],
    EnumAdvise : StdCallCodePointer[(Pointer[Struct_IDataAdviseHolder],Pointer[Pointer[Struct_IEnumSTATDATA]]),(CLong)],
    SendOnDataChange : StdCallCodePointer[(Pointer[Struct_IDataAdviseHolder],Pointer[Struct_IDataObject],CULong,CULong),(CLong)],
);

external IID_IStorage : IID;

record Struct_IStorage (
    lpVtbl : Pointer[Struct_IStorageVtbl],
);

alias IStorage = Struct_IStorage;

alias IStorageVtbl = Struct_IStorageVtbl;

record Struct_IStorageVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IStorage],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IStorage]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IStorage]),(CULong)],
    CreateStream : StdCallCodePointer[(Pointer[Struct_IStorage],Pointer[UShort],CULong,CULong,CULong,Pointer[Pointer[Struct_IStream]]),(CLong)],
    OpenStream : StdCallCodePointer[(Pointer[Struct_IStorage],Pointer[UShort],RawPointer,CULong,CULong,Pointer[Pointer[Struct_IStream]]),(CLong)],
    CreateStorage : StdCallCodePointer[(Pointer[Struct_IStorage],Pointer[UShort],CULong,CULong,CULong,Pointer[Pointer[Struct_IStorage]]),(CLong)],
    OpenStorage : StdCallCodePointer[(Pointer[Struct_IStorage],Pointer[UShort],Pointer[Struct_IStorage],CULong,Pointer[Pointer[UShort]],CULong,Pointer[Pointer[Struct_IStorage]]),(CLong)],
    CopyTo : StdCallCodePointer[(Pointer[Struct_IStorage],CULong,Pointer[Struct__GUID],Pointer[Pointer[UShort]],Pointer[Struct_IStorage]),(CLong)],
    MoveElementTo : StdCallCodePointer[(Pointer[Struct_IStorage],Pointer[UShort],Pointer[Struct_IStorage],Pointer[UShort],CULong),(CLong)],
    Commit : StdCallCodePointer[(Pointer[Struct_IStorage],CULong),(CLong)],
    Revert : StdCallCodePointer[(Pointer[Struct_IStorage]),(CLong)],
    EnumElements : StdCallCodePointer[(Pointer[Struct_IStorage],CULong,RawPointer,CULong,Pointer[Pointer[Struct_IEnumSTATSTG]]),(CLong)],
    DestroyElement : StdCallCodePointer[(Pointer[Struct_IStorage],Pointer[UShort]),(CLong)],
    RenameElement : StdCallCodePointer[(Pointer[Struct_IStorage],Pointer[UShort],Pointer[UShort]),(CLong)],
    SetElementTimes : StdCallCodePointer[(Pointer[Struct_IStorage],Pointer[UShort],Pointer[Struct__FILETIME],Pointer[Struct__FILETIME],Pointer[Struct__FILETIME]),(CLong)],
    SetClass : StdCallCodePointer[(Pointer[Struct_IStorage],Pointer[Struct__GUID]),(CLong)],
    SetStateBits : StdCallCodePointer[(Pointer[Struct_IStorage],CULong,CULong),(CLong)],
    Stat : StdCallCodePointer[(Pointer[Struct_IStorage],Pointer[Struct_tagSTATSTG],CULong),(CLong)],
);

external IID_IRootStorage : IID;

record Struct_IRootStorage (
    lpVtbl : Pointer[Struct_IRootStorageVtbl],
);

alias IRootStorage = Struct_IRootStorage;

alias IRootStorageVtbl = Struct_IRootStorageVtbl;

record Struct_IRootStorageVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IRootStorage],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IRootStorage]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IRootStorage]),(CULong)],
    SwitchToFile : StdCallCodePointer[(Pointer[Struct_IRootStorage],Pointer[UShort]),(CLong)],
);

external IID_IRpcChannelBuffer : IID;

record Struct_IRpcChannelBuffer (
    lpVtbl : Pointer[Struct_IRpcChannelBufferVtbl],
);

alias IRpcChannelBuffer = Struct_IRpcChannelBuffer;

alias IRpcChannelBufferVtbl = Struct_IRpcChannelBufferVtbl;

record Struct_IRpcChannelBufferVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IRpcChannelBuffer],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IRpcChannelBuffer]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IRpcChannelBuffer]),(CULong)],
    GetBuffer : StdCallCodePointer[(Pointer[Struct_IRpcChannelBuffer],Pointer[Struct_tagRPCOLEMESSAGE],Pointer[Struct__GUID]),(CLong)],
    SendReceive : StdCallCodePointer[(Pointer[Struct_IRpcChannelBuffer],Pointer[Struct_tagRPCOLEMESSAGE],Pointer[CULong]),(CLong)],
    FreeBuffer : StdCallCodePointer[(Pointer[Struct_IRpcChannelBuffer],Pointer[Struct_tagRPCOLEMESSAGE]),(CLong)],
    GetDestCtx : StdCallCodePointer[(Pointer[Struct_IRpcChannelBuffer],Pointer[CULong],Pointer[RawPointer]),(CLong)],
    IsConnected : StdCallCodePointer[(Pointer[Struct_IRpcChannelBuffer]),(CLong)],
);

external IID_IRpcProxyBuffer : IID;

record Struct_IRpcProxyBuffer (
    lpVtbl : Pointer[Struct_IRpcProxyBufferVtbl],
);

alias IRpcProxyBuffer = Struct_IRpcProxyBuffer;

alias IRpcProxyBufferVtbl = Struct_IRpcProxyBufferVtbl;

record Struct_IRpcProxyBufferVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IRpcProxyBuffer],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IRpcProxyBuffer]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IRpcProxyBuffer]),(CULong)],
    Connect : StdCallCodePointer[(Pointer[Struct_IRpcProxyBuffer],Pointer[Struct_IRpcChannelBuffer]),(CLong)],
    Disconnect : StdCallCodePointer[(Pointer[Struct_IRpcProxyBuffer]),()],
);

external IID_IRpcStubBuffer : IID;

record Struct_IRpcStubBuffer (
    lpVtbl : Pointer[Struct_IRpcStubBufferVtbl],
);

alias IRpcStubBuffer = Struct_IRpcStubBuffer;

alias IRpcStubBufferVtbl = Struct_IRpcStubBufferVtbl;

record Struct_IRpcStubBufferVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IRpcStubBuffer],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IRpcStubBuffer]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IRpcStubBuffer]),(CULong)],
    Connect : StdCallCodePointer[(Pointer[Struct_IRpcStubBuffer],Pointer[Struct_IUnknown]),(CLong)],
    Disconnect : StdCallCodePointer[(Pointer[Struct_IRpcStubBuffer]),()],
    Invoke : StdCallCodePointer[(Pointer[Struct_IRpcStubBuffer],Pointer[Struct_tagRPCOLEMESSAGE],Pointer[Struct_IRpcStubBuffer]),(CLong)],
    IsIIDSupported : StdCallCodePointer[(Pointer[Struct_IRpcStubBuffer],Pointer[Struct__GUID]),(Pointer[Struct_IRpcStubBuffer])],
    CountRefs : StdCallCodePointer[(Pointer[Struct_IRpcStubBuffer]),(CULong)],
    DebugServerQueryInterface : StdCallCodePointer[(Pointer[Struct_IRpcStubBuffer],Pointer[RawPointer]),(CLong)],
    DebugServerRelease : StdCallCodePointer[(Pointer[Struct_IRpcStubBuffer],RawPointer),(CLong)],
);

external IID_IPSFactoryBuffer : IID;

record Struct_IPSFactoryBuffer (
    lpVtbl : Pointer[Struct_IPSFactoryBufferVtbl],
);

alias IPSFactoryBuffer = Struct_IPSFactoryBuffer;

alias IPSFactoryBufferVtbl = Struct_IPSFactoryBufferVtbl;

record Struct_IPSFactoryBufferVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IPSFactoryBuffer],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IPSFactoryBuffer]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IPSFactoryBuffer]),(CULong)],
    CreateProxy : StdCallCodePointer[(Pointer[Struct_IPSFactoryBuffer],Pointer[Struct_IUnknown],Pointer[Struct__GUID],Pointer[Pointer[Struct_IRpcProxyBuffer]],Pointer[RawPointer]),(CLong)],
    CreateStub : StdCallCodePointer[(Pointer[Struct_IPSFactoryBuffer],Pointer[Struct__GUID],Pointer[Struct_IUnknown],Pointer[Pointer[Struct_IRpcStubBuffer]]),(CLong)],
);

alias LPPSFACTORYBUFFER = Pointer[Struct_IPSFactoryBuffer];

external IID_ILockBytes : IID;

record Struct_ILockBytes (
    lpVtbl : Pointer[Struct_ILockBytesVtbl],
);

alias ILockBytes = Struct_ILockBytes;

alias ILockBytesVtbl = Struct_ILockBytesVtbl;

record Struct_ILockBytesVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_ILockBytes],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_ILockBytes]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_ILockBytes]),(CULong)],
    ReadAt : StdCallCodePointer[(Pointer[Struct_ILockBytes],AUnionType,RawPointer,CULong,Pointer[CULong]),(CLong)],
    WriteAt : StdCallCodePointer[(Pointer[Struct_ILockBytes],AUnionType,RawPointer,CULong,Pointer[CULong]),(CLong)],
    Flush : StdCallCodePointer[(Pointer[Struct_ILockBytes]),(CLong)],
    SetSize : StdCallCodePointer[(Pointer[Struct_ILockBytes],AUnionType),(CLong)],
    LockRegion : StdCallCodePointer[(Pointer[Struct_ILockBytes],AUnionType,AUnionType,CULong),(CLong)],
    UnlockRegion : StdCallCodePointer[(Pointer[Struct_ILockBytes],AUnionType,AUnionType,CULong),(CLong)],
    Stat : StdCallCodePointer[(Pointer[Struct_ILockBytes],Pointer[Struct_tagSTATSTG],CULong),(CLong)],
);

external IID_IExternalConnection : IID;

record Struct_IExternalConnection (
    lpVtbl : Pointer[Struct_IExternalConnectionVtbl],
);

alias IExternalConnection = Struct_IExternalConnection;

alias IExternalConnectionVtbl = Struct_IExternalConnectionVtbl;

record Struct_IExternalConnectionVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IExternalConnection],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IExternalConnection]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IExternalConnection]),(CULong)],
    AddConnection : StdCallCodePointer[(Pointer[Struct_IExternalConnection],CULong,CULong),(CULong)],
    ReleaseConnection : StdCallCodePointer[(Pointer[Struct_IExternalConnection],CULong,CULong,Int),(CULong)],
);

external IID_IRunnableObject : IID;

record Struct_IRunnableObject (
    lpVtbl : Pointer[Struct_IRunnableObjectVtbl],
);

alias IRunnableObject = Struct_IRunnableObject;

alias IRunnableObjectVtbl = Struct_IRunnableObjectVtbl;

record Struct_IRunnableObjectVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IRunnableObject],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IRunnableObject]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IRunnableObject]),(CULong)],
    GetRunningClass : StdCallCodePointer[(Pointer[Struct_IRunnableObject],Pointer[Struct__GUID]),(CLong)],
    Run : StdCallCodePointer[(Pointer[Struct_IRunnableObject],Pointer[Struct_IBindCtx]),(CLong)],
    IsRunning : StdCallCodePointer[(Pointer[Struct_IRunnableObject]),(Int)],
    LockRunning : StdCallCodePointer[(Pointer[Struct_IRunnableObject],Int,Int),(CLong)],
    SetContainedObject : StdCallCodePointer[(Pointer[Struct_IRunnableObject],Int),(CLong)],
);

external IID_IROTData : IID;

record Struct_IROTData (
    lpVtbl : Pointer[Struct_IROTDataVtbl],
);

alias IROTData = Struct_IROTData;

alias IROTDataVtbl = Struct_IROTDataVtbl;

record Struct_IROTDataVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IROTData],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IROTData]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IROTData]),(CULong)],
    GetComparisonData : StdCallCodePointer[(Pointer[Struct_IROTData],RawPointer,CULong,Pointer[CULong]),(CLong)],
);

external IID_IChannelHook : IID;

record Struct_IChannelHook (
    lpVtbl : Pointer[Struct_IChannelHookVtbl],
);

alias IChannelHook = Struct_IChannelHook;

alias IChannelHookVtbl = Struct_IChannelHookVtbl;

record Struct_IChannelHookVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IChannelHook],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IChannelHook]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IChannelHook]),(CULong)],
    ClientGetSize : StdCallCodePointer[(Pointer[Struct_IChannelHook],Pointer[Struct__GUID],Pointer[Struct__GUID],Pointer[CULong]),()],
    ClientFillBuffer : StdCallCodePointer[(Pointer[Struct_IChannelHook],Pointer[Struct__GUID],Pointer[Struct__GUID],Pointer[CULong],RawPointer),()],
    ClientNotify : StdCallCodePointer[(Pointer[Struct_IChannelHook],Pointer[Struct__GUID],Pointer[Struct__GUID],CULong,RawPointer,CULong,CLong),()],
    ServerNotify : StdCallCodePointer[(Pointer[Struct_IChannelHook],Pointer[Struct__GUID],Pointer[Struct__GUID],CULong,RawPointer,CULong),()],
    ServerGetSize : StdCallCodePointer[(Pointer[Struct_IChannelHook],Pointer[Struct__GUID],Pointer[Struct__GUID],CLong,Pointer[CULong]),()],
    ServerFillBuffer : StdCallCodePointer[(Pointer[Struct_IChannelHook],Pointer[Struct__GUID],Pointer[Struct__GUID],Pointer[CULong],RawPointer,CLong),()],
);

external IID_IPropertyStorage : IID;

record Struct_IPropertyStorage (
    lpVtbl : Pointer[Struct_IPropertyStorageVtbl],
);

alias IPropertyStorage = Struct_IPropertyStorage;

alias IPropertyStorageVtbl = Struct_IPropertyStorageVtbl;

record Struct_IPropertyStorageVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IPropertyStorage],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IPropertyStorage]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IPropertyStorage]),(CULong)],
    ReadMultiple : StdCallCodePointer[(Pointer[Struct_IPropertyStorage],CULong,Pointer[Struct_tagPROPSPEC],Pointer[Struct_tagPROPVARIANT]),(CLong)],
    WriteMultiple : StdCallCodePointer[(Pointer[Struct_IPropertyStorage],CULong,Pointer[Struct_tagPROPSPEC],Pointer[Struct_tagPROPVARIANT],CULong),(CLong)],
    DeleteMultiple : StdCallCodePointer[(Pointer[Struct_IPropertyStorage],CULong,Pointer[Struct_tagPROPSPEC]),(CLong)],
    ReadPropertyNames : StdCallCodePointer[(Pointer[Struct_IPropertyStorage],CULong,Pointer[CULong],Pointer[Pointer[UShort]]),(CLong)],
    WritePropertyNames : StdCallCodePointer[(Pointer[Struct_IPropertyStorage],CULong,Pointer[CULong],Pointer[Pointer[UShort]]),(CLong)],
    DeletePropertyNames : StdCallCodePointer[(Pointer[Struct_IPropertyStorage],CULong,Pointer[CULong]),(CLong)],
    SetClass : StdCallCodePointer[(Pointer[Struct_IPropertyStorage],Pointer[Struct__GUID]),(CLong)],
    Commit : StdCallCodePointer[(Pointer[Struct_IPropertyStorage],CULong),(CLong)],
    Revert : StdCallCodePointer[(Pointer[Struct_IPropertyStorage]),(CLong)],
    Enum : StdCallCodePointer[(Pointer[Struct_IPropertyStorage],Pointer[Pointer[Struct_IEnumSTATPROPSTG]]),(CLong)],
    Stat : StdCallCodePointer[(Pointer[Struct_IPropertyStorage],Pointer[Struct_tagSTATPROPSTG]),(CLong)],
    SetTimes : StdCallCodePointer[(Pointer[Struct_IPropertyStorage],Pointer[Struct__FILETIME],Pointer[Struct__FILETIME],Pointer[Struct__FILETIME]),(CLong)],
);

external IID_IPropertySetStorage : IID;

record Struct_IPropertySetStorage (
    lpVtbl : Pointer[Struct_IPropertySetStorageVtbl],
);

alias IPropertySetStorage = Struct_IPropertySetStorage;

alias IPropertySetStorageVtbl = Struct_IPropertySetStorageVtbl;

record Struct_IPropertySetStorageVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IPropertySetStorage],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IPropertySetStorage]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IPropertySetStorage]),(CULong)],
    Create : StdCallCodePointer[(Pointer[Struct_IPropertySetStorage],Pointer[Struct__GUID],Pointer[Struct__GUID],CULong,CULong,Pointer[Pointer[Struct_IPropertyStorage]]),(CLong)],
    Open : StdCallCodePointer[(Pointer[Struct_IPropertySetStorage],Pointer[Struct__GUID],CULong,Pointer[Pointer[Struct_IPropertyStorage]]),(CLong)],
    Delete : StdCallCodePointer[(Pointer[Struct_IPropertySetStorage],Pointer[Struct__GUID]),(CLong)],
    Enum : StdCallCodePointer[(Pointer[Struct_IPropertySetStorage],Pointer[Pointer[Struct_IEnumSTATPROPSETSTG]]),(CLong)],
);

external IID_IClientSecurity : IID;

record Struct_IClientSecurity (
    lpVtbl : Pointer[Struct_IClientSecurityVtbl],
);

alias IClientSecurity = Struct_IClientSecurity;

alias IClientSecurityVtbl = Struct_IClientSecurityVtbl;

record Struct_IClientSecurityVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IClientSecurity],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IClientSecurity]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IClientSecurity]),(CULong)],
    QueryBlanket : StdCallCodePointer[(Pointer[Struct_IClientSecurity],RawPointer,Pointer[CULong],Pointer[CULong],Pointer[Pointer[UShort]],Pointer[CULong],Pointer[CULong],Pointer[Pointer[RawPointer]],Pointer[Pointer[CULong]]),(CLong)],
    SetBlanket : StdCallCodePointer[(Pointer[Struct_IClientSecurity],RawPointer,CULong,CULong,Pointer[UShort],CULong,CULong,Pointer[RawPointer],CULong),(CLong)],
    CopyProxy : StdCallCodePointer[(Pointer[Struct_IClientSecurity],Pointer[Struct_IUnknown],Pointer[Pointer[Struct_IUnknown]]),(CLong)],
);

external IID_IServerSecurity : IID;

record Struct_IServerSecurity (
    lpVtbl : Pointer[Struct_IServerSecurityVtbl],
);

alias IServerSecurity = Struct_IServerSecurity;

alias IServerSecurityVtbl = Struct_IServerSecurityVtbl;

record Struct_IServerSecurityVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IServerSecurity],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IServerSecurity]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IServerSecurity]),(CULong)],
    QueryBlanket : StdCallCodePointer[(Pointer[Struct_IServerSecurity],Pointer[CULong],Pointer[CULong],Pointer[Pointer[UShort]],Pointer[CULong],Pointer[CULong],Pointer[RawPointer],Pointer[Pointer[CULong]]),(CLong)],
    ImpersonateClient : StdCallCodePointer[(Pointer[Struct_IServerSecurity]),(CLong)],
    RevertToSelf : StdCallCodePointer[(Pointer[Struct_IServerSecurity]),(CLong)],
    IsImpersonating : StdCallCodePointer[(Pointer[Struct_IServerSecurity]),(CLong)],
);

external IID_IClassActivator : IID;

record Struct_IClassActivator (
    lpVtbl : Pointer[Struct_IClassActivatorVtbl],
);

alias IClassActivator = Struct_IClassActivator;

alias IClassActivatorVtbl = Struct_IClassActivatorVtbl;

record Struct_IClassActivatorVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IClassActivator],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IClassActivator]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IClassActivator]),(CULong)],
    GetClassObject : StdCallCodePointer[(Pointer[Struct_IClassActivator],Pointer[Struct__GUID],CULong,CULong,Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
);

external IID_IFillLockBytes : IID;

record Struct_IFillLockBytes (
    lpVtbl : Pointer[Struct_IFillLockBytesVtbl],
);

alias IFillLockBytes = Struct_IFillLockBytes;

alias IFillLockBytesVtbl = Struct_IFillLockBytesVtbl;

record Struct_IFillLockBytesVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IFillLockBytes],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IFillLockBytes]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IFillLockBytes]),(CULong)],
    FillAppend : StdCallCodePointer[(Pointer[Struct_IFillLockBytes],RawPointer,CULong,Pointer[CULong]),(CLong)],
    FillAt : StdCallCodePointer[(Pointer[Struct_IFillLockBytes],AUnionType,RawPointer,CULong,Pointer[CULong]),(CLong)],
    SetFillSize : StdCallCodePointer[(Pointer[Struct_IFillLockBytes],AUnionType),(CLong)],
    Terminate : StdCallCodePointer[(Pointer[Struct_IFillLockBytes],Int),(CLong)],
);

external IID_IProgressNotify : IID;

record Struct_IProgressNotify (
    lpVtbl : Pointer[Struct_IProgressNotifyVtbl],
);

alias IProgressNotify = Struct_IProgressNotify;

alias IProgressNotifyVtbl = Struct_IProgressNotifyVtbl;

record Struct_IProgressNotifyVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IProgressNotify],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IProgressNotify]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IProgressNotify]),(CULong)],
    OnProgress : StdCallCodePointer[(Pointer[Struct_IProgressNotify],CULong,CULong,Int,Int),(CLong)],
);

external IID_ILayoutStorage : IID;

record Struct_ILayoutStorage (
    lpVtbl : Pointer[Struct_ILayoutStorageVtbl],
);

alias ILayoutStorage = Struct_ILayoutStorage;

alias ILayoutStorageVtbl = Struct_ILayoutStorageVtbl;

record Struct_ILayoutStorageVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_ILayoutStorage],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_ILayoutStorage]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_ILayoutStorage]),(CULong)],
    LayoutScript : StdCallCodePointer[(Pointer[Struct_ILayoutStorage],Pointer[Struct_tagSTORAGELAYOUT],CULong,CULong),(CLong)],
    BeginMonitor : StdCallCodePointer[(Pointer[Struct_ILayoutStorage]),(CLong)],
    EndMonitor : StdCallCodePointer[(Pointer[Struct_ILayoutStorage]),(CLong)],
    ReLayoutDocfile : StdCallCodePointer[(Pointer[Struct_ILayoutStorage],Pointer[UShort]),(CLong)],
);

external IID_IGlobalInterfaceTable : IID;

record Struct_IGlobalInterfaceTable (
    lpVtbl : Pointer[Struct_IGlobalInterfaceTableVtbl],
);

alias IGlobalInterfaceTable = Struct_IGlobalInterfaceTable;

alias IGlobalInterfaceTableVtbl = Struct_IGlobalInterfaceTableVtbl;

record Struct_IGlobalInterfaceTableVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IGlobalInterfaceTable],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IGlobalInterfaceTable]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IGlobalInterfaceTable]),(CULong)],
    RegisterInterfaceInGlobal : StdCallCodePointer[(Pointer[Struct_IGlobalInterfaceTable],Pointer[Struct_IUnknown],Pointer[Struct__GUID],Pointer[CULong]),(CLong)],
    RevokeInterfaceFromGlobal : StdCallCodePointer[(Pointer[Struct_IGlobalInterfaceTable],CULong),(CLong)],
    GetInterfaceFromGlobal : StdCallCodePointer[(Pointer[Struct_IGlobalInterfaceTable],CULong,Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
);

external (stdcall) IMarshal_GetUnmarshalClass_Proxy(
    argument0 : Pointer[IMarshal],
    argument1 : Pointer[IID],
    argument2 : RawPointer,
    argument3 : CULong,
    argument4 : RawPointer,
    argument5 : CULong,
    argument6 : Pointer[CLSID]) CLong;

external (stdcall) IMarshal_GetUnmarshalClass_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMarshal_GetMarshalSizeMax_Proxy(
    argument0 : Pointer[IMarshal],
    argument1 : Pointer[IID],
    argument2 : RawPointer,
    argument3 : CULong,
    argument4 : RawPointer,
    argument5 : CULong,
    argument6 : Pointer[CULong]) CLong;

external (stdcall) IMarshal_GetMarshalSizeMax_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMarshal_MarshalInterface_Proxy(
    argument0 : Pointer[IMarshal],
    argument1 : Pointer[IStream],
    argument2 : Pointer[IID],
    argument3 : RawPointer,
    argument4 : CULong,
    argument5 : RawPointer,
    argument6 : CULong) CLong;

external (stdcall) IMarshal_MarshalInterface_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMarshal_UnmarshalInterface_Proxy(
    argument0 : Pointer[IMarshal],
    argument1 : Pointer[IStream],
    argument2 : Pointer[IID],
    argument3 : Pointer[RawPointer]) CLong;

external (stdcall) IMarshal_UnmarshalInterface_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMarshal_ReleaseMarshalData_Proxy(
    argument0 : Pointer[IMarshal],
    argument1 : Pointer[IStream]) CLong;

external (stdcall) IMarshal_ReleaseMarshalData_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMarshal_DisconnectObject_Proxy(
    argument0 : Pointer[IMarshal],
    argument1 : CULong) CLong;

external (stdcall) IMarshal_DisconnectObject_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMalloc_Alloc_Proxy(
    argument0 : Pointer[IMalloc],
    argument1 : CULong) RawPointer;

external (stdcall) IMalloc_Alloc_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMalloc_Realloc_Proxy(
    argument0 : Pointer[IMalloc],
    argument1 : RawPointer,
    argument2 : CULong) RawPointer;

external (stdcall) IMalloc_Realloc_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMalloc_Free_Proxy(
    argument0 : Pointer[IMalloc],
    argument1 : RawPointer);

external (stdcall) IMalloc_Free_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMalloc_GetSize_Proxy(
    argument0 : Pointer[IMalloc],
    argument1 : RawPointer) CULong;

external (stdcall) IMalloc_GetSize_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMalloc_DidAlloc_Proxy(
    argument0 : Pointer[IMalloc],
    argument1 : RawPointer) Int;

external (stdcall) IMalloc_DidAlloc_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMalloc_HeapMinimize_Proxy(
    argument0 : Pointer[IMalloc]);

external (stdcall) IMalloc_HeapMinimize_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMallocSpy_PreAlloc_Proxy(
    argument0 : Pointer[IMallocSpy],
    cbRequest : CULong) CULong;

external (stdcall) IMallocSpy_PreAlloc_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMallocSpy_PostAlloc_Proxy(
    argument0 : Pointer[IMallocSpy],
    argument1 : RawPointer) RawPointer;

external (stdcall) IMallocSpy_PostAlloc_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMallocSpy_PreFree_Proxy(
    argument0 : Pointer[IMallocSpy],
    argument1 : RawPointer,
    argument2 : Int) RawPointer;

external (stdcall) IMallocSpy_PreFree_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMallocSpy_PostFree_Proxy(
    argument0 : Pointer[IMallocSpy],
    argument1 : Int);

external (stdcall) IMallocSpy_PostFree_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMallocSpy_PreRealloc_Proxy(
    argument0 : Pointer[IMallocSpy],
    argument1 : RawPointer,
    argument2 : CULong,
    argument3 : Pointer[RawPointer],
    argument4 : Int) CULong;

external (stdcall) IMallocSpy_PreRealloc_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMallocSpy_PostRealloc_Proxy(
    argument0 : Pointer[IMallocSpy],
    argument1 : RawPointer,
    argument2 : Int) RawPointer;

external (stdcall) IMallocSpy_PostRealloc_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMallocSpy_PreGetSize_Proxy(
    argument0 : Pointer[IMallocSpy],
    argument1 : RawPointer,
    argument2 : Int) RawPointer;

external (stdcall) IMallocSpy_PreGetSize_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMallocSpy_PostGetSize_Proxy(
    argument0 : Pointer[IMallocSpy],
    argument1 : CULong,
    argument2 : Int) CULong;

external (stdcall) IMallocSpy_PostGetSize_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMallocSpy_PreDidAlloc_Proxy(
    argument0 : Pointer[IMallocSpy],
    argument1 : RawPointer,
    argument2 : Int) RawPointer;

external (stdcall) IMallocSpy_PreDidAlloc_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMallocSpy_PostDidAlloc_Proxy(
    argument0 : Pointer[IMallocSpy],
    argument1 : RawPointer,
    argument2 : Int,
    argument3 : Int) Int;

external (stdcall) IMallocSpy_PostDidAlloc_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMallocSpy_PreHeapMinimize_Proxy(
    argument0 : Pointer[IMallocSpy]);

external (stdcall) IMallocSpy_PreHeapMinimize_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMallocSpy_PostHeapMinimize_Proxy(
    argument0 : Pointer[IMallocSpy]);

external (stdcall) IMallocSpy_PostHeapMinimize_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IStdMarshalInfo_GetClassForHandler_Proxy(
    argument0 : Pointer[IStdMarshalInfo],
    argument1 : CULong,
    argument2 : RawPointer,
    argument3 : Pointer[CLSID]) CLong;

external (stdcall) IStdMarshalInfo_GetClassForHandler_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IExternalConnection_AddConnection_Proxy(
    argument0 : Pointer[IExternalConnection],
    argument1 : CULong,
    argument2 : CULong) CULong;

external (stdcall) IExternalConnection_AddConnection_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IExternalConnection_ReleaseConnection_Proxy(
    argument0 : Pointer[IExternalConnection],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Int) CULong;

external (stdcall) IExternalConnection_ReleaseConnection_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IEnumUnknown_RemoteNext_Proxy(
    argument0 : Pointer[IEnumUnknown],
    argument1 : CULong,
    argument2 : Pointer[Pointer[IUnknown]],
    argument3 : Pointer[CULong]) CLong;

external (stdcall) IEnumUnknown_RemoteNext_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IEnumUnknown_Skip_Proxy(
    argument0 : Pointer[IEnumUnknown],
    argument1 : CULong) CLong;

external (stdcall) IEnumUnknown_Skip_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IEnumUnknown_Reset_Proxy(
    argument0 : Pointer[IEnumUnknown]) CLong;

external (stdcall) IEnumUnknown_Reset_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IEnumUnknown_Clone_Proxy(
    argument0 : Pointer[IEnumUnknown],
    argument1 : Pointer[Pointer[IEnumUnknown]]) CLong;

external (stdcall) IEnumUnknown_Clone_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IBindCtx_RegisterObjectBound_Proxy(
    argument0 : Pointer[IBindCtx],
    punk : Pointer[IUnknown]) CLong;

external (stdcall) IBindCtx_RegisterObjectBound_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IBindCtx_RevokeObjectBound_Proxy(
    argument0 : Pointer[IBindCtx],
    punk : Pointer[IUnknown]) CLong;

external (stdcall) IBindCtx_RevokeObjectBound_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IBindCtx_ReleaseBoundObjects_Proxy(
    argument0 : Pointer[IBindCtx]) CLong;

external (stdcall) IBindCtx_ReleaseBoundObjects_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IBindCtx_SetBindOptions_Proxy(
    argument0 : Pointer[IBindCtx],
    argument1 : Pointer[BIND_OPTS]) CLong;

external (stdcall) IBindCtx_SetBindOptions_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IBindCtx_GetBindOptions_Proxy(
    argument0 : Pointer[IBindCtx],
    pbindopts : Pointer[BIND_OPTS]) CLong;

external (stdcall) IBindCtx_GetBindOptions_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IBindCtx_GetRunningObjectTable_Proxy(
    argument0 : Pointer[IBindCtx],
    argument1 : Pointer[Pointer[IRunningObjectTable]]) CLong;

external (stdcall) IBindCtx_GetRunningObjectTable_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IBindCtx_RegisterObjectParam_Proxy(
    argument0 : Pointer[IBindCtx],
    argument1 : LPCSTR,
    argument2 : Pointer[IUnknown]) CLong;

external (stdcall) IBindCtx_RegisterObjectParam_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IBindCtx_GetObjectParam_Proxy(
    argument0 : Pointer[IBindCtx],
    argument1 : LPCSTR,
    argument2 : Pointer[Pointer[IUnknown]]) CLong;

external (stdcall) IBindCtx_GetObjectParam_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IBindCtx_EnumObjectParam_Proxy(
    argument0 : Pointer[IBindCtx],
    argument1 : Pointer[Pointer[IEnumString]]) CLong;

external (stdcall) IBindCtx_EnumObjectParam_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IBindCtx_RevokeObjectParam_Proxy(
    argument0 : Pointer[IBindCtx],
    argument1 : LPCSTR) CLong;

external (stdcall) IBindCtx_RevokeObjectParam_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IEnumMoniker_RemoteNext_Proxy(
    argument0 : Pointer[IEnumMoniker],
    argument1 : CULong,
    argument2 : Pointer[Pointer[IMoniker]],
    argument3 : Pointer[CULong]) CLong;

external (stdcall) IEnumMoniker_RemoteNext_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IEnumMoniker_Skip_Proxy(
    argument0 : Pointer[IEnumMoniker],
    argument1 : CULong) CLong;

external (stdcall) IEnumMoniker_Skip_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IEnumMoniker_Reset_Proxy(
    argument0 : Pointer[IEnumMoniker]) CLong;

external (stdcall) IEnumMoniker_Reset_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IEnumMoniker_Clone_Proxy(
    argument0 : Pointer[IEnumMoniker],
    argument1 : Pointer[Pointer[IEnumMoniker]]) CLong;

external (stdcall) IEnumMoniker_Clone_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IRunnableObject_GetRunningClass_Proxy(
    argument0 : Pointer[IRunnableObject],
    argument1 : LPCLSID) CLong;

external (stdcall) IRunnableObject_GetRunningClass_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IRunnableObject_Run_Proxy(
    argument0 : Pointer[IRunnableObject],
    argument1 : LPBINDCTX) CLong;

external (stdcall) IRunnableObject_Run_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IRunnableObject_IsRunning_Proxy(
    argument0 : Pointer[IRunnableObject]) Int;

external (stdcall) IRunnableObject_IsRunning_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IRunnableObject_LockRunning_Proxy(
    argument0 : Pointer[IRunnableObject],
    argument1 : Int,
    argument2 : Int) CLong;

external (stdcall) IRunnableObject_LockRunning_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IRunnableObject_SetContainedObject_Proxy(
    argument0 : Pointer[IRunnableObject],
    argument1 : Int) CLong;

external (stdcall) IRunnableObject_SetContainedObject_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IRunningObjectTable_Register_Proxy(
    argument0 : Pointer[IRunningObjectTable],
    argument1 : CULong,
    argument2 : Pointer[IUnknown],
    argument3 : Pointer[IMoniker],
    argument4 : Pointer[CULong]) CLong;

external (stdcall) IRunningObjectTable_Register_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IRunningObjectTable_Revoke_Proxy(
    argument0 : Pointer[IRunningObjectTable],
    argument1 : CULong) CLong;

external (stdcall) IRunningObjectTable_Revoke_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IRunningObjectTable_IsRunning_Proxy(
    argument0 : Pointer[IRunningObjectTable],
    argument1 : Pointer[IMoniker]) CLong;

external (stdcall) IRunningObjectTable_IsRunning_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IRunningObjectTable_GetObject_Proxy(
    argument0 : Pointer[IRunningObjectTable],
    argument1 : Pointer[IMoniker],
    argument2 : Pointer[Pointer[IUnknown]]) CLong;

external (stdcall) IRunningObjectTable_GetObject_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IRunningObjectTable_NoteChangeTime_Proxy(
    argument0 : Pointer[IRunningObjectTable],
    argument1 : CULong,
    argument2 : Pointer[FILETIME]) CLong;

external (stdcall) IRunningObjectTable_NoteChangeTime_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IRunningObjectTable_GetTimeOfLastChange_Proxy(
    argument0 : Pointer[IRunningObjectTable],
    argument1 : Pointer[IMoniker],
    argument2 : Pointer[FILETIME]) CLong;

external (stdcall) IRunningObjectTable_GetTimeOfLastChange_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IRunningObjectTable_EnumRunning_Proxy(
    argument0 : Pointer[IRunningObjectTable],
    argument1 : Pointer[Pointer[IEnumMoniker]]) CLong;

external (stdcall) IRunningObjectTable_EnumRunning_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IPersist_GetClassID_Proxy(
    argument0 : Pointer[IPersist],
    argument1 : Pointer[CLSID]) CLong;

external (stdcall) IPersist_GetClassID_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IPersistStream_IsDirty_Proxy(
    argument0 : Pointer[IPersistStream]) CLong;

external (stdcall) IPersistStream_IsDirty_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IPersistStream_Load_Proxy(
    argument0 : Pointer[IPersistStream],
    argument1 : Pointer[IStream]) CLong;

external (stdcall) IPersistStream_Load_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IPersistStream_Save_Proxy(
    argument0 : Pointer[IPersistStream],
    argument1 : Pointer[IStream],
    argument2 : Int) CLong;

external (stdcall) IPersistStream_Save_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IPersistStream_GetSizeMax_Proxy(
    argument0 : Pointer[IPersistStream],
    argument1 : Pointer[ULARGE_INTEGER]) CLong;

external (stdcall) IPersistStream_GetSizeMax_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMoniker_RemoteBindToObject_Proxy(
    argument0 : Pointer[IMoniker],
    argument1 : Pointer[IBindCtx],
    argument2 : Pointer[IMoniker],
    argument3 : Pointer[IID],
    argument4 : Pointer[Pointer[IUnknown]]) CLong;

external (stdcall) IMoniker_RemoteBindToObject_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMoniker_RemoteBindToStorage_Proxy(
    argument0 : Pointer[IMoniker],
    argument1 : Pointer[IBindCtx],
    argument2 : Pointer[IMoniker],
    argument3 : Pointer[IID],
    argument4 : Pointer[Pointer[IUnknown]]) CLong;

external (stdcall) IMoniker_RemoteBindToStorage_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMoniker_Reduce_Proxy(
    argument0 : Pointer[IMoniker],
    argument1 : Pointer[IBindCtx],
    argument2 : CULong,
    argument3 : Pointer[Pointer[IMoniker]],
    argument4 : Pointer[Pointer[IMoniker]]) CLong;

external (stdcall) IMoniker_Reduce_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMoniker_ComposeWith_Proxy(
    argument0 : Pointer[IMoniker],
    argument1 : Pointer[IMoniker],
    argument2 : Int,
    argument3 : Pointer[Pointer[IMoniker]]) CLong;

external (stdcall) IMoniker_ComposeWith_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMoniker_Enum_Proxy(
    argument0 : Pointer[IMoniker],
    argument1 : Int,
    argument2 : Pointer[Pointer[IEnumMoniker]]) CLong;

external (stdcall) IMoniker_Enum_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMoniker_IsEqual_Proxy(
    argument0 : Pointer[IMoniker],
    argument1 : Pointer[IMoniker]) CLong;

external (stdcall) IMoniker_IsEqual_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMoniker_Hash_Proxy(
    argument0 : Pointer[IMoniker],
    argument1 : Pointer[CULong]) CLong;

external (stdcall) IMoniker_Hash_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMoniker_IsRunning_Proxy(
    argument0 : Pointer[IMoniker],
    argument1 : Pointer[IBindCtx],
    argument2 : Pointer[IMoniker],
    argument3 : Pointer[IMoniker]) CLong;

external (stdcall) IMoniker_IsRunning_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMoniker_GetTimeOfLastChange_Proxy(
    argument0 : Pointer[IMoniker],
    argument1 : Pointer[IBindCtx],
    argument2 : Pointer[IMoniker],
    argument3 : Pointer[FILETIME]) CLong;

external (stdcall) IMoniker_GetTimeOfLastChange_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMoniker_Inverse_Proxy(
    argument0 : Pointer[IMoniker],
    argument1 : Pointer[Pointer[IMoniker]]) CLong;

external (stdcall) IMoniker_Inverse_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMoniker_CommonPrefixWith_Proxy(
    argument0 : Pointer[IMoniker],
    argument1 : Pointer[IMoniker],
    argument2 : Pointer[Pointer[IMoniker]]) CLong;

external (stdcall) IMoniker_CommonPrefixWith_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMoniker_RelativePathTo_Proxy(
    argument0 : Pointer[IMoniker],
    argument1 : Pointer[IMoniker],
    argument2 : Pointer[Pointer[IMoniker]]) CLong;

external (stdcall) IMoniker_RelativePathTo_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMoniker_GetDisplayName_Proxy(
    argument0 : Pointer[IMoniker],
    argument1 : Pointer[IBindCtx],
    argument2 : Pointer[IMoniker],
    argument3 : Pointer[LPCSTR]) CLong;

external (stdcall) IMoniker_GetDisplayName_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMoniker_ParseDisplayName_Proxy(
    argument0 : Pointer[IMoniker],
    argument1 : Pointer[IBindCtx],
    argument2 : Pointer[IMoniker],
    argument3 : LPCSTR,
    argument4 : Pointer[CULong],
    argument5 : Pointer[Pointer[IMoniker]]) CLong;

external (stdcall) IMoniker_ParseDisplayName_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMoniker_IsSystemMoniker_Proxy(
    argument0 : Pointer[IMoniker],
    argument1 : Pointer[CULong]) CLong;

external (stdcall) IMoniker_IsSystemMoniker_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IROTData_GetComparisonData_Proxy(
    argument0 : Pointer[IROTData],
    argument1 : Pointer[CUChar],
    cbMax : CULong,
    argument3 : Pointer[CULong]) CLong;

external (stdcall) IROTData_GetComparisonData_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IEnumString_RemoteNext_Proxy(
    argument0 : Pointer[IEnumString],
    argument1 : CULong,
    rgelt : Pointer[LPCSTR],
    argument3 : Pointer[CULong]) CLong;

external (stdcall) IEnumString_RemoteNext_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IEnumString_Skip_Proxy(
    argument0 : Pointer[IEnumString],
    argument1 : CULong) CLong;

external (stdcall) IEnumString_Skip_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IEnumString_Reset_Proxy(
    argument0 : Pointer[IEnumString]) CLong;

external (stdcall) IEnumString_Reset_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IEnumString_Clone_Proxy(
    argument0 : Pointer[IEnumString],
    argument1 : Pointer[Pointer[IEnumString]]) CLong;

external (stdcall) IEnumString_Clone_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IStream_RemoteRead_Proxy(
    argument0 : Pointer[IStream],
    argument1 : Pointer[CUChar],
    argument2 : CULong,
    argument3 : Pointer[CULong]) CLong;

external (stdcall) IStream_RemoteRead_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IStream_RemoteWrite_Proxy(
    argument0 : Pointer[IStream],
    pv : Pointer[CUChar],
    argument2 : CULong,
    argument3 : Pointer[CULong]) CLong;

external (stdcall) IStream_RemoteWrite_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IStream_RemoteSeek_Proxy(
    argument0 : Pointer[IStream],
    argument1 : LARGE_INTEGER,
    argument2 : CULong,
    argument3 : Pointer[ULARGE_INTEGER]) CLong;

external (stdcall) IStream_RemoteSeek_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IStream_SetSize_Proxy(
    argument0 : Pointer[IStream],
    argument1 : ULARGE_INTEGER) CLong;

external (stdcall) IStream_SetSize_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IStream_RemoteCopyTo_Proxy(
    argument0 : Pointer[IStream],
    argument1 : Pointer[IStream],
    argument2 : ULARGE_INTEGER,
    argument3 : Pointer[ULARGE_INTEGER],
    argument4 : Pointer[ULARGE_INTEGER]) CLong;

external (stdcall) IStream_RemoteCopyTo_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IStream_Commit_Proxy(
    argument0 : Pointer[IStream],
    argument1 : CULong) CLong;

external (stdcall) IStream_Commit_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IStream_Revert_Proxy(
    argument0 : Pointer[IStream]) CLong;

external (stdcall) IStream_Revert_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IStream_LockRegion_Proxy(
    argument0 : Pointer[IStream],
    argument1 : ULARGE_INTEGER,
    argument2 : ULARGE_INTEGER,
    argument3 : CULong) CLong;

external (stdcall) IStream_LockRegion_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IStream_UnlockRegion_Proxy(
    argument0 : Pointer[IStream],
    argument1 : ULARGE_INTEGER,
    argument2 : ULARGE_INTEGER,
    argument3 : CULong) CLong;

external (stdcall) IStream_UnlockRegion_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IStream_Stat_Proxy(
    argument0 : Pointer[IStream],
    argument1 : Pointer[STATSTG],
    argument2 : CULong) CLong;

external (stdcall) IStream_Stat_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IStream_Clone_Proxy(
    argument0 : Pointer[IStream],
    argument1 : Pointer[Pointer[IStream]]) CLong;

external (stdcall) IStream_Clone_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IEnumSTATSTG_RemoteNext_Proxy(
    argument0 : Pointer[IEnumSTATSTG],
    argument1 : CULong,
    argument2 : Pointer[STATSTG],
    argument3 : Pointer[CULong]) CLong;

external (stdcall) IEnumSTATSTG_RemoteNext_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IEnumSTATSTG_Skip_Proxy(
    argument0 : Pointer[IEnumSTATSTG],
    celt : CULong) CLong;

external (stdcall) IEnumSTATSTG_Skip_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IEnumSTATSTG_Reset_Proxy(
    argument0 : Pointer[IEnumSTATSTG]) CLong;

external (stdcall) IEnumSTATSTG_Reset_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IEnumSTATSTG_Clone_Proxy(
    argument0 : Pointer[IEnumSTATSTG],
    argument1 : Pointer[Pointer[IEnumSTATSTG]]) CLong;

external (stdcall) IEnumSTATSTG_Clone_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IStorage_CreateStream_Proxy(
    argument0 : Pointer[IStorage],
    argument1 : Pointer[UShort],
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : Pointer[Pointer[IStream]]) CLong;

external (stdcall) IStorage_CreateStream_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IStorage_RemoteOpenStream_Proxy(
    argument0 : Pointer[IStorage],
    argument1 : Pointer[UShort],
    argument2 : CULong,
    argument3 : Pointer[CUChar],
    argument4 : CULong,
    argument5 : CULong,
    argument6 : Pointer[Pointer[IStream]]) CLong;

external (stdcall) IStorage_RemoteOpenStream_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IStorage_CreateStorage_Proxy(
    argument0 : Pointer[IStorage],
    argument1 : Pointer[UShort],
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : Pointer[Pointer[IStorage]]) CLong;

external (stdcall) IStorage_CreateStorage_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IStorage_OpenStorage_Proxy(
    argument0 : Pointer[IStorage],
    argument1 : Pointer[UShort],
    argument2 : Pointer[IStorage],
    argument3 : CULong,
    argument4 : SNB,
    argument5 : CULong,
    argument6 : Pointer[Pointer[IStorage]]) CLong;

external (stdcall) IStorage_OpenStorage_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IStorage_CopyTo_Proxy(
    argument0 : Pointer[IStorage],
    argument1 : CULong,
    argument2 : Pointer[IID],
    argument3 : SNB,
    argument4 : Pointer[IStorage]) CLong;

external (stdcall) IStorage_CopyTo_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IStorage_MoveElementTo_Proxy(
    argument0 : Pointer[IStorage],
    argument1 : Pointer[UShort],
    argument2 : Pointer[IStorage],
    argument3 : Pointer[UShort],
    argument4 : CULong) CLong;

external (stdcall) IStorage_MoveElementTo_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IStorage_Commit_Proxy(
    argument0 : Pointer[IStorage],
    argument1 : CULong) CLong;

external (stdcall) IStorage_Commit_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IStorage_Revert_Proxy(
    argument0 : Pointer[IStorage]) CLong;

external (stdcall) IStorage_Revert_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IStorage_RemoteEnumElements_Proxy(
    argument0 : Pointer[IStorage],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[CUChar],
    argument4 : CULong,
    argument5 : Pointer[Pointer[IEnumSTATSTG]]) CLong;

external (stdcall) IStorage_RemoteEnumElements_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IStorage_DestroyElement_Proxy(
    argument0 : Pointer[IStorage],
    argument1 : Pointer[UShort]) CLong;

external (stdcall) IStorage_DestroyElement_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IStorage_RenameElement_Proxy(
    argument0 : Pointer[IStorage],
    argument1 : Pointer[UShort],
    argument2 : Pointer[UShort]) CLong;

external (stdcall) IStorage_RenameElement_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IStorage_SetElementTimes_Proxy(
    argument0 : Pointer[IStorage],
    argument1 : Pointer[UShort],
    argument2 : Pointer[FILETIME],
    argument3 : Pointer[FILETIME],
    argument4 : Pointer[FILETIME]) CLong;

external (stdcall) IStorage_SetElementTimes_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IStorage_SetClass_Proxy(
    argument0 : Pointer[IStorage],
    argument1 : Pointer[CLSID]) CLong;

external (stdcall) IStorage_SetClass_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IStorage_SetStateBits_Proxy(
    argument0 : Pointer[IStorage],
    argument1 : CULong,
    argument2 : CULong) CLong;

external (stdcall) IStorage_SetStateBits_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IStorage_Stat_Proxy(
    argument0 : Pointer[IStorage],
    argument1 : Pointer[STATSTG],
    argument2 : CULong) CLong;

external (stdcall) IStorage_Stat_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IPersistFile_IsDirty_Proxy(
    argument0 : Pointer[IPersistFile]) CLong;

external (stdcall) IPersistFile_IsDirty_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IPersistFile_Load_Proxy(
    argument0 : Pointer[IPersistFile],
    argument1 : LPCOLESTR,
    argument2 : CULong) CLong;

external (stdcall) IPersistFile_Load_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IPersistFile_Save_Proxy(
    argument0 : Pointer[IPersistFile],
    pszFileName : LPCOLESTR,
    argument2 : Int) CLong;

external (stdcall) IPersistFile_Save_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IPersistFile_SaveCompleted_Proxy(
    argument0 : Pointer[IPersistFile],
    argument1 : LPCOLESTR) CLong;

external (stdcall) IPersistFile_SaveCompleted_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IPersistFile_GetCurFile_Proxy(
    argument0 : Pointer[IPersistFile],
    argument1 : Pointer[LPCSTR]) CLong;

external (stdcall) IPersistFile_GetCurFile_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IPersistStorage_IsDirty_Proxy(
    argument0 : Pointer[IPersistStorage]) CLong;

external (stdcall) IPersistStorage_IsDirty_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IPersistStorage_InitNew_Proxy(
    argument0 : Pointer[IPersistStorage],
    argument1 : Pointer[IStorage]) CLong;

external (stdcall) IPersistStorage_InitNew_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IPersistStorage_Load_Proxy(
    argument0 : Pointer[IPersistStorage],
    argument1 : Pointer[IStorage]) CLong;

external (stdcall) IPersistStorage_Load_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IPersistStorage_Save_Proxy(
    argument0 : Pointer[IPersistStorage],
    argument1 : Pointer[IStorage],
    argument2 : Int) CLong;

external (stdcall) IPersistStorage_Save_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IPersistStorage_SaveCompleted_Proxy(
    argument0 : Pointer[IPersistStorage],
    argument1 : Pointer[IStorage]) CLong;

external (stdcall) IPersistStorage_SaveCompleted_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IPersistStorage_HandsOffStorage_Proxy(
    argument0 : Pointer[IPersistStorage]) CLong;

external (stdcall) IPersistStorage_HandsOffStorage_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) ILockBytes_RemoteReadAt_Proxy(
    argument0 : Pointer[ILockBytes],
    argument1 : ULARGE_INTEGER,
    argument2 : Pointer[CUChar],
    argument3 : CULong,
    argument4 : Pointer[CULong]) CLong;

external (stdcall) ILockBytes_RemoteReadAt_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) ILockBytes_RemoteWriteAt_Proxy(
    argument0 : Pointer[ILockBytes],
    argument1 : ULARGE_INTEGER,
    pv : Pointer[CUChar],
    argument3 : CULong,
    argument4 : Pointer[CULong]) CLong;

external (stdcall) ILockBytes_RemoteWriteAt_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) ILockBytes_Flush_Proxy(
    argument0 : Pointer[ILockBytes]) CLong;

external (stdcall) ILockBytes_Flush_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) ILockBytes_SetSize_Proxy(
    argument0 : Pointer[ILockBytes],
    argument1 : ULARGE_INTEGER) CLong;

external (stdcall) ILockBytes_SetSize_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) ILockBytes_LockRegion_Proxy(
    argument0 : Pointer[ILockBytes],
    argument1 : ULARGE_INTEGER,
    argument2 : ULARGE_INTEGER,
    argument3 : CULong) CLong;

external (stdcall) ILockBytes_LockRegion_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) ILockBytes_UnlockRegion_Proxy(
    argument0 : Pointer[ILockBytes],
    argument1 : ULARGE_INTEGER,
    argument2 : ULARGE_INTEGER,
    argument3 : CULong) CLong;

external (stdcall) ILockBytes_UnlockRegion_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) ILockBytes_Stat_Proxy(
    argument0 : Pointer[ILockBytes],
    argument1 : Pointer[STATSTG],
    argument2 : CULong) CLong;

external (stdcall) ILockBytes_Stat_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IEnumFORMATETC_RemoteNext_Proxy(
    argument0 : Pointer[IEnumFORMATETC],
    argument1 : CULong,
    argument2 : Pointer[FORMATETC],
    argument3 : Pointer[CULong]) CLong;

external (stdcall) IEnumFORMATETC_RemoteNext_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IEnumFORMATETC_Skip_Proxy(
    argument0 : Pointer[IEnumFORMATETC],
    argument1 : CULong) CLong;

external (stdcall) IEnumFORMATETC_Skip_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IEnumFORMATETC_Reset_Proxy(
    argument0 : Pointer[IEnumFORMATETC]) CLong;

external (stdcall) IEnumFORMATETC_Reset_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IEnumFORMATETC_Clone_Proxy(
    argument0 : Pointer[IEnumFORMATETC],
    argument1 : Pointer[Pointer[IEnumFORMATETC]]) CLong;

external (stdcall) IEnumFORMATETC_Clone_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IEnumFORMATETC_Next_Proxy(
    argument0 : Pointer[IEnumFORMATETC],
    argument1 : CULong,
    argument2 : Pointer[FORMATETC],
    argument3 : Pointer[CULong]) CLong;

external (stdcall) IEnumFORMATETC_Next_Stub(
    argument0 : Pointer[IEnumFORMATETC],
    argument1 : CULong,
    argument2 : Pointer[FORMATETC],
    argument3 : Pointer[CULong]) CLong;

external (stdcall) IEnumSTATDATA_RemoteNext_Proxy(
    argument0 : Pointer[IEnumSTATDATA],
    argument1 : CULong,
    argument2 : Pointer[STATDATA],
    argument3 : Pointer[CULong]) CLong;

external (stdcall) IEnumSTATDATA_RemoteNext_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IEnumSTATDATA_Skip_Proxy(
    argument0 : Pointer[IEnumSTATDATA],
    argument1 : CULong) CLong;

external (stdcall) IEnumSTATDATA_Skip_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IEnumSTATDATA_Reset_Proxy(
    argument0 : Pointer[IEnumSTATDATA]) CLong;

external (stdcall) IEnumSTATDATA_Reset_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IEnumSTATDATA_Clone_Proxy(
    argument0 : Pointer[IEnumSTATDATA],
    argument1 : Pointer[Pointer[IEnumSTATDATA]]) CLong;

external (stdcall) IEnumSTATDATA_Clone_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IEnumSTATDATA_Next_Proxy(
    argument0 : Pointer[IEnumSTATDATA],
    argument1 : CULong,
    argument2 : Pointer[STATDATA],
    argument3 : Pointer[CULong]) CLong;

external (stdcall) IEnumSTATDATA_Next_Stub(
    argument0 : Pointer[IEnumSTATDATA],
    argument1 : CULong,
    argument2 : Pointer[STATDATA],
    argument3 : Pointer[CULong]) CLong;

external (stdcall) IRootStorage_SwitchToFile_Proxy(
    argument0 : Pointer[IRootStorage],
    argument1 : LPCSTR) CLong;

external (stdcall) IRootStorage_SwitchToFile_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IAdviseSink_RemoteOnDataChange_Proxy(
    argument0 : Pointer[IAdviseSink],
    argument1 : Pointer[FORMATETC],
    argument2 : Pointer[RemSTGMEDIUM]);

external (stdcall) IAdviseSink_RemoteOnDataChange_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IAdviseSink_RemoteOnViewChange_Proxy(
    argument0 : Pointer[IAdviseSink],
    argument1 : CULong,
    argument2 : CLong);

external (stdcall) IAdviseSink_RemoteOnViewChange_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IAdviseSink_RemoteOnRename_Proxy(
    argument0 : Pointer[IAdviseSink],
    argument1 : Pointer[IMoniker]);

external (stdcall) IAdviseSink_RemoteOnRename_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IAdviseSink_RemoteOnSave_Proxy(
    argument0 : Pointer[IAdviseSink]);

external (stdcall) IAdviseSink_RemoteOnSave_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IAdviseSink_RemoteOnClose_Proxy(
    argument0 : Pointer[IAdviseSink]) CLong;

external (stdcall) IAdviseSink_RemoteOnClose_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IAdviseSink_OnDataChange_Proxy(
    argument0 : Pointer[IAdviseSink],
    argument1 : Pointer[FORMATETC],
    argument2 : Pointer[STGMEDIUM]);

external (stdcall) IAdviseSink_OnDataChange_Stub(
    argument0 : Pointer[IAdviseSink],
    argument1 : Pointer[FORMATETC],
    argument2 : Pointer[RemSTGMEDIUM]);

external (stdcall) IAdviseSink_OnViewChange_Proxy(
    argument0 : Pointer[IAdviseSink],
    argument1 : CULong,
    argument2 : CLong);

external (stdcall) IAdviseSink_OnViewChange_Stub(
    argument0 : Pointer[IAdviseSink],
    argument1 : CULong,
    argument2 : CLong);

external (stdcall) IAdviseSink_OnRename_Proxy(
    argument0 : Pointer[IAdviseSink],
    argument1 : Pointer[IMoniker]);

external (stdcall) IAdviseSink_OnRename_Stub(
    argument0 : Pointer[IAdviseSink],
    argument1 : Pointer[IMoniker]);

external (stdcall) IAdviseSink_OnSave_Proxy(
    argument0 : Pointer[IAdviseSink]);

external (stdcall) IAdviseSink_OnSave_Stub(
    argument0 : Pointer[IAdviseSink]);

external (stdcall) IAdviseSink_OnClose_Proxy(
    argument0 : Pointer[IAdviseSink]);

external (stdcall) IAdviseSink_OnClose_Stub(
    argument0 : Pointer[IAdviseSink]) CLong;

external (stdcall) IAdviseSink2_RemoteOnLinkSrcChange_Proxy(
    argument0 : Pointer[IAdviseSink2],
    argument1 : Pointer[IMoniker]);

external (stdcall) IAdviseSink2_RemoteOnLinkSrcChange_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IAdviseSink2_OnLinkSrcChange_Proxy(
    argument0 : Pointer[IAdviseSink2],
    argument1 : Pointer[IMoniker]);

external (stdcall) IAdviseSink2_OnLinkSrcChange_Stub(
    argument0 : Pointer[IAdviseSink2],
    argument1 : Pointer[IMoniker]);

external (stdcall) IDataObject_RemoteGetData_Proxy(
    argument0 : Pointer[IDataObject],
    argument1 : Pointer[FORMATETC],
    argument2 : Pointer[Pointer[RemSTGMEDIUM]]) CLong;

external (stdcall) IDataObject_RemoteGetData_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IDataObject_RemoteGetDataHere_Proxy(
    argument0 : Pointer[IDataObject],
    argument1 : Pointer[FORMATETC],
    argument2 : Pointer[Pointer[RemSTGMEDIUM]]) CLong;

external (stdcall) IDataObject_RemoteGetDataHere_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IDataObject_QueryGetData_Proxy(
    argument0 : Pointer[IDataObject],
    argument1 : Pointer[FORMATETC]) CLong;

external (stdcall) IDataObject_QueryGetData_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IDataObject_GetCanonicalFormatEtc_Proxy(
    argument0 : Pointer[IDataObject],
    argument1 : Pointer[FORMATETC],
    argument2 : Pointer[FORMATETC]) CLong;

external (stdcall) IDataObject_GetCanonicalFormatEtc_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IDataObject_RemoteSetData_Proxy(
    argument0 : Pointer[IDataObject],
    argument1 : Pointer[FORMATETC],
    argument2 : Pointer[RemSTGMEDIUM],
    argument3 : Int) CLong;

external (stdcall) IDataObject_RemoteSetData_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IDataObject_EnumFormatEtc_Proxy(
    argument0 : Pointer[IDataObject],
    argument1 : CULong,
    argument2 : Pointer[Pointer[IEnumFORMATETC]]) CLong;

external (stdcall) IDataObject_EnumFormatEtc_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IDataObject_DAdvise_Proxy(
    argument0 : Pointer[IDataObject],
    argument1 : Pointer[FORMATETC],
    argument2 : CULong,
    argument3 : Pointer[IAdviseSink],
    argument4 : Pointer[CULong]) CLong;

external (stdcall) IDataObject_DAdvise_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IDataObject_DUnadvise_Proxy(
    argument0 : Pointer[IDataObject],
    argument1 : CULong) CLong;

external (stdcall) IDataObject_DUnadvise_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IDataObject_EnumDAdvise_Proxy(
    argument0 : Pointer[IDataObject],
    argument1 : Pointer[Pointer[IEnumSTATDATA]]) CLong;

external (stdcall) IDataObject_EnumDAdvise_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IDataObject_GetData_Proxy(
    argument0 : Pointer[IDataObject],
    argument1 : Pointer[FORMATETC],
    argument2 : Pointer[STGMEDIUM]) CLong;

external (stdcall) IDataObject_GetData_Stub(
    argument0 : Pointer[IDataObject],
    argument1 : Pointer[FORMATETC],
    argument2 : Pointer[Pointer[RemSTGMEDIUM]]) CLong;

external (stdcall) IDataObject_GetDataHere_Proxy(
    argument0 : Pointer[IDataObject],
    argument1 : Pointer[FORMATETC],
    argument2 : Pointer[STGMEDIUM]) CLong;

external (stdcall) IDataObject_GetDataHere_Stub(
    argument0 : Pointer[IDataObject],
    argument1 : Pointer[FORMATETC],
    argument2 : Pointer[Pointer[RemSTGMEDIUM]]) CLong;

external (stdcall) IDataObject_SetData_Proxy(
    argument0 : Pointer[IDataObject],
    argument1 : Pointer[FORMATETC],
    argument2 : Pointer[STGMEDIUM],
    argument3 : Int) CLong;

external (stdcall) IDataObject_SetData_Stub(
    argument0 : Pointer[IDataObject],
    argument1 : Pointer[FORMATETC],
    argument2 : Pointer[RemSTGMEDIUM],
    argument3 : Int) CLong;

external (stdcall) IDataAdviseHolder_Advise_Proxy(
    argument0 : Pointer[IDataAdviseHolder],
    argument1 : Pointer[IDataObject],
    argument2 : Pointer[FORMATETC],
    argument3 : CULong,
    argument4 : Pointer[IAdviseSink],
    argument5 : Pointer[CULong]) CLong;

external (stdcall) IDataAdviseHolder_Advise_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IDataAdviseHolder_Unadvise_Proxy(
    argument0 : Pointer[IDataAdviseHolder],
    argument1 : CULong) CLong;

external (stdcall) IDataAdviseHolder_Unadvise_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IDataAdviseHolder_EnumAdvise_Proxy(
    argument0 : Pointer[IDataAdviseHolder],
    argument1 : Pointer[Pointer[IEnumSTATDATA]]) CLong;

external (stdcall) IDataAdviseHolder_EnumAdvise_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IDataAdviseHolder_SendOnDataChange_Proxy(
    argument0 : Pointer[IDataAdviseHolder],
    argument1 : Pointer[IDataObject],
    argument2 : CULong,
    argument3 : CULong) CLong;

external (stdcall) IDataAdviseHolder_SendOnDataChange_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMessageFilter_HandleInComingCall_Proxy(
    argument0 : Pointer[IMessageFilter],
    argument1 : CULong,
    argument2 : HTASK,
    argument3 : CULong,
    argument4 : LPINTERFACEINFO) CULong;

external (stdcall) IMessageFilter_HandleInComingCall_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMessageFilter_RetryRejectedCall_Proxy(
    argument0 : Pointer[IMessageFilter],
    argument1 : HTASK,
    argument2 : CULong,
    argument3 : CULong) CULong;

external (stdcall) IMessageFilter_RetryRejectedCall_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IMessageFilter_MessagePending_Proxy(
    argument0 : Pointer[IMessageFilter],
    argument1 : HTASK,
    argument2 : CULong,
    argument3 : CULong) CULong;

external (stdcall) IMessageFilter_MessagePending_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IRpcChannelBuffer_GetBuffer_Proxy(
    argument0 : Pointer[IRpcChannelBuffer],
    argument1 : Pointer[RPCOLEMESSAGE],
    argument2 : Pointer[IID]) CLong;

external (stdcall) IRpcChannelBuffer_GetBuffer_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IRpcChannelBuffer_SendReceive_Proxy(
    argument0 : Pointer[IRpcChannelBuffer],
    argument1 : Pointer[RPCOLEMESSAGE],
    argument2 : Pointer[CULong]) CLong;

external (stdcall) IRpcChannelBuffer_SendReceive_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IRpcChannelBuffer_FreeBuffer_Proxy(
    argument0 : Pointer[IRpcChannelBuffer],
    argument1 : Pointer[RPCOLEMESSAGE]) CLong;

external (stdcall) IRpcChannelBuffer_FreeBuffer_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IRpcChannelBuffer_GetDestCtx_Proxy(
    argument0 : Pointer[IRpcChannelBuffer],
    argument1 : Pointer[CULong],
    argument2 : Pointer[RawPointer]) CLong;

external (stdcall) IRpcChannelBuffer_GetDestCtx_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IRpcChannelBuffer_IsConnected_Proxy(
    argument0 : Pointer[IRpcChannelBuffer]) CLong;

external (stdcall) IRpcChannelBuffer_IsConnected_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IRpcProxyBuffer_Connect_Proxy(
    argument0 : Pointer[IRpcProxyBuffer],
    pRpcChannelBuffer : Pointer[IRpcChannelBuffer]) CLong;

external (stdcall) IRpcProxyBuffer_Connect_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IRpcProxyBuffer_Disconnect_Proxy(
    argument0 : Pointer[IRpcProxyBuffer]);

external (stdcall) IRpcProxyBuffer_Disconnect_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IRpcStubBuffer_Connect_Proxy(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IUnknown]) CLong;

external (stdcall) IRpcStubBuffer_Connect_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IRpcStubBuffer_Disconnect_Proxy(
    argument0 : Pointer[IRpcStubBuffer]);

external (stdcall) IRpcStubBuffer_Disconnect_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IRpcStubBuffer_Invoke_Proxy(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[RPCOLEMESSAGE],
    argument2 : Pointer[IRpcChannelBuffer]) CLong;

external (stdcall) IRpcStubBuffer_Invoke_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IRpcStubBuffer_IsIIDSupported_Proxy(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IID]) Pointer[IRpcStubBuffer];

external (stdcall) IRpcStubBuffer_IsIIDSupported_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IRpcStubBuffer_CountRefs_Proxy(
    argument0 : Pointer[IRpcStubBuffer]) CULong;

external (stdcall) IRpcStubBuffer_CountRefs_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IRpcStubBuffer_DebugServerQueryInterface_Proxy(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[RawPointer]) CLong;

external (stdcall) IRpcStubBuffer_DebugServerQueryInterface_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IRpcStubBuffer_DebugServerRelease_Proxy(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : RawPointer);

external (stdcall) IRpcStubBuffer_DebugServerRelease_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IPSFactoryBuffer_CreateProxy_Proxy(
    argument0 : Pointer[IPSFactoryBuffer],
    argument1 : Pointer[IUnknown],
    argument2 : Pointer[IID],
    argument3 : Pointer[Pointer[IRpcProxyBuffer]],
    argument4 : Pointer[RawPointer]) CLong;

external (stdcall) IPSFactoryBuffer_CreateProxy_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) IPSFactoryBuffer_CreateStub_Proxy(
    argument0 : Pointer[IPSFactoryBuffer],
    argument1 : Pointer[IID],
    argument2 : Pointer[IUnknown],
    argument3 : Pointer[Pointer[IRpcStubBuffer]]) CLong;

external (stdcall) IPSFactoryBuffer_CreateStub_Stub(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD);

external (stdcall) SNB_to_xmit(
    argument0 : Pointer[SNB],
    argument1 : Pointer[Pointer[RemSNB]]);

external (stdcall) SNB_from_xmit(
    argument0 : Pointer[RemSNB],
    argument1 : Pointer[SNB]);

external (stdcall) SNB_free_inst(
    argument0 : Pointer[SNB]);

external (stdcall) SNB_free_xmit(
    argument0 : Pointer[RemSNB]);

external (stdcall) IEnumUnknown_Next_Proxy(
    argument0 : Pointer[IEnumUnknown],
    argument1 : CULong,
    argument2 : Pointer[Pointer[IUnknown]],
    argument3 : Pointer[CULong]) CLong;

external (stdcall) IEnumUnknown_Next_Stub(
    argument0 : Pointer[IEnumUnknown],
    argument1 : CULong,
    argument2 : Pointer[Pointer[IUnknown]],
    argument3 : Pointer[CULong]) CLong;

external (stdcall) IEnumMoniker_Next_Proxy(
    argument0 : Pointer[IEnumMoniker],
    argument1 : CULong,
    argument2 : Pointer[Pointer[IMoniker]],
    argument3 : Pointer[CULong]) CLong;

external (stdcall) IEnumMoniker_Next_Stub(
    argument0 : Pointer[IEnumMoniker],
    argument1 : CULong,
    argument2 : Pointer[Pointer[IMoniker]],
    argument3 : Pointer[CULong]) CLong;

external (stdcall) IMoniker_BindToObject_Proxy(
    argument0 : Pointer[IMoniker],
    argument1 : Pointer[IBindCtx],
    argument2 : Pointer[IMoniker],
    argument3 : Pointer[IID],
    argument4 : Pointer[RawPointer]) CLong;

external (stdcall) IMoniker_BindToObject_Stub(
    argument0 : Pointer[IMoniker],
    argument1 : Pointer[IBindCtx],
    argument2 : Pointer[IMoniker],
    argument3 : Pointer[IID],
    argument4 : Pointer[Pointer[IUnknown]]) CLong;

external (stdcall) IMoniker_BindToStorage_Proxy(
    argument0 : Pointer[IMoniker],
    argument1 : Pointer[IBindCtx],
    argument2 : Pointer[IMoniker],
    argument3 : Pointer[IID],
    argument4 : Pointer[RawPointer]) CLong;

external (stdcall) IMoniker_BindToStorage_Stub(
    argument0 : Pointer[IMoniker],
    argument1 : Pointer[IBindCtx],
    argument2 : Pointer[IMoniker],
    argument3 : Pointer[IID],
    argument4 : Pointer[Pointer[IUnknown]]) CLong;

external (stdcall) IEnumString_Next_Proxy(
    argument0 : Pointer[IEnumString],
    argument1 : CULong,
    argument2 : Pointer[LPCSTR],
    argument3 : Pointer[CULong]) CLong;

external (stdcall) IEnumString_Next_Stub(
    argument0 : Pointer[IEnumString],
    argument1 : CULong,
    argument2 : Pointer[LPCSTR],
    argument3 : Pointer[CULong]) CLong;

external (stdcall) IStream_Read_Proxy(
    argument0 : Pointer[IStream],
    argument1 : RawPointer,
    argument2 : CULong,
    argument3 : Pointer[CULong]) CLong;

external (stdcall) IStream_Read_Stub(
    argument0 : Pointer[IStream],
    argument1 : Pointer[CUChar],
    argument2 : CULong,
    argument3 : Pointer[CULong]) CLong;

external (stdcall) IStream_Write_Proxy(
    argument0 : Pointer[IStream],
    argument1 : RawPointer,
    argument2 : CULong,
    argument3 : Pointer[CULong]) CLong;

external (stdcall) IStream_Write_Stub(
    argument0 : Pointer[IStream],
    argument1 : Pointer[CUChar],
    argument2 : CULong,
    argument3 : Pointer[CULong]) CLong;

external (stdcall) IStream_Seek_Proxy(
    argument0 : Pointer[IStream],
    argument1 : LARGE_INTEGER,
    argument2 : CULong,
    argument3 : Pointer[ULARGE_INTEGER]) CLong;

external (stdcall) IStream_Seek_Stub(
    argument0 : Pointer[IStream],
    argument1 : LARGE_INTEGER,
    argument2 : CULong,
    argument3 : Pointer[ULARGE_INTEGER]) CLong;

external (stdcall) IStream_CopyTo_Proxy(
    argument0 : Pointer[IStream],
    argument1 : Pointer[IStream],
    argument2 : ULARGE_INTEGER,
    argument3 : Pointer[ULARGE_INTEGER],
    argument4 : Pointer[ULARGE_INTEGER]) CLong;

external (stdcall) IStream_CopyTo_Stub(
    argument0 : Pointer[IStream],
    argument1 : Pointer[IStream],
    argument2 : ULARGE_INTEGER,
    argument3 : Pointer[ULARGE_INTEGER],
    argument4 : Pointer[ULARGE_INTEGER]) CLong;

external (stdcall) IEnumSTATSTG_Next_Proxy(
    argument0 : Pointer[IEnumSTATSTG],
    argument1 : CULong,
    argument2 : Pointer[STATSTG],
    argument3 : Pointer[CULong]) CLong;

external (stdcall) IEnumSTATSTG_Next_Stub(
    argument0 : Pointer[IEnumSTATSTG],
    argument1 : CULong,
    argument2 : Pointer[STATSTG],
    argument3 : Pointer[CULong]) CLong;

external (stdcall) IStorage_OpenStream_Proxy(
    argument0 : Pointer[IStorage],
    argument1 : Pointer[UShort],
    argument2 : RawPointer,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : Pointer[Pointer[IStream]]) CLong;

external (stdcall) IStorage_OpenStream_Stub(
    argument0 : Pointer[IStorage],
    argument1 : Pointer[UShort],
    argument2 : CULong,
    argument3 : Pointer[CUChar],
    argument4 : CULong,
    argument5 : CULong,
    argument6 : Pointer[Pointer[IStream]]) CLong;

external (stdcall) IStorage_EnumElements_Proxy(
    argument0 : Pointer[IStorage],
    argument1 : CULong,
    argument2 : RawPointer,
    argument3 : CULong,
    argument4 : Pointer[Pointer[IEnumSTATSTG]]) CLong;

external (stdcall) IStorage_EnumElements_Stub(
    argument0 : Pointer[IStorage],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[CUChar],
    argument4 : CULong,
    argument5 : Pointer[Pointer[IEnumSTATSTG]]) CLong;

external (stdcall) ILockBytes_ReadAt_Proxy(
    argument0 : Pointer[ILockBytes],
    argument1 : ULARGE_INTEGER,
    argument2 : RawPointer,
    argument3 : CULong,
    argument4 : Pointer[CULong]) CLong;

external (stdcall) ILockBytes_ReadAt_Stub(
    argument0 : Pointer[ILockBytes],
    argument1 : ULARGE_INTEGER,
    argument2 : Pointer[CUChar],
    argument3 : CULong,
    argument4 : Pointer[CULong]) CLong;

external (stdcall) ILockBytes_WriteAt_Proxy(
    argument0 : Pointer[ILockBytes],
    argument1 : ULARGE_INTEGER,
    argument2 : RawPointer,
    argument3 : CULong,
    argument4 : Pointer[CULong]) CLong;

external (stdcall) ILockBytes_WriteAt_Stub(
    argument0 : Pointer[ILockBytes],
    argument1 : ULARGE_INTEGER,
    argument2 : Pointer[CUChar],
    argument3 : CULong,
    argument4 : Pointer[CULong]) CLong;

external GUID_NULL : IID;

external IID_IRpcChannel : IID;

external IID_IRpcStub : IID;

external IID_IStubManager : IID;

external IID_IRpcProxy : IID;

external IID_IProxyManager : IID;

external IID_IPSFactory : IID;

external IID_IInternalMoniker : IID;

external IID_IDfReserved1 : IID;

external IID_IDfReserved2 : IID;

external IID_IDfReserved3 : IID;

external CLSID_StdMarshal : CLSID;

external IID_IStub : IID;

external IID_IProxy : IID;

external IID_IEnumGeneric : IID;

external IID_IEnumHolder : IID;

external IID_IEnumCallback : IID;

external IID_IOleManager : IID;

external IID_IOlePresObj : IID;

external IID_IDebug : IID;

external IID_IDebugStream : IID;

external CLSID_PSGenObject : CLSID;

external CLSID_PSClientSite : CLSID;

external CLSID_PSClassObject : CLSID;

external CLSID_PSInPlaceActive : CLSID;

external CLSID_PSInPlaceFrame : CLSID;

external CLSID_PSDragDrop : CLSID;

external CLSID_PSBindCtx : CLSID;

external CLSID_PSEnumerators : CLSID;

external CLSID_StaticMetafile : CLSID;

external CLSID_StaticDib : CLSID;

external CID_CDfsVolume : CLSID;

external CLSID_CCDFormKrnl : CLSID;

external CLSID_CCDPropertyPage : CLSID;

external CLSID_CCDFormDialog : CLSID;

external CLSID_CCDCommandButton : CLSID;

external CLSID_CCDComboBox : CLSID;

external CLSID_CCDTextBox : CLSID;

external CLSID_CCDCheckBox : CLSID;

external CLSID_CCDLabel : CLSID;

external CLSID_CCDOptionButton : CLSID;

external CLSID_CCDListBox : CLSID;

external CLSID_CCDScrollBar : CLSID;

external CLSID_CCDGroupBox : CLSID;

external CLSID_CCDGeneralPropertyPage : CLSID;

external CLSID_CCDGenericPropertyPage : CLSID;

external CLSID_CCDFontPropertyPage : CLSID;

external CLSID_CCDColorPropertyPage : CLSID;

external CLSID_CCDLabelPropertyPage : CLSID;

external CLSID_CCDCheckBoxPropertyPage : CLSID;

external CLSID_CCDTextBoxPropertyPage : CLSID;

external CLSID_CCDOptionButtonPropertyPage : CLSID;

external CLSID_CCDListBoxPropertyPage : CLSID;

external CLSID_CCDCommandButtonPropertyPage : CLSID;

external CLSID_CCDComboBoxPropertyPage : CLSID;

external CLSID_CCDScrollBarPropertyPage : CLSID;

external CLSID_CCDGroupBoxPropertyPage : CLSID;

external CLSID_CCDXObjectPropertyPage : CLSID;

external CLSID_CStdPropertyFrame : CLSID;

external CLSID_CFormPropertyPage : CLSID;

external CLSID_CGridPropertyPage : CLSID;

external CLSID_CWSJArticlePage : CLSID;

external CLSID_CSystemPage : CLSID;

external CLSID_IdentityUnmarshal : CLSID;

external CLSID_InProcFreeMarshaler : CLSID;

external CLSID_Picture_Metafile : CLSID;

external CLSID_Picture_EnhMetafile : CLSID;

external CLSID_Picture_Dib : CLSID;

external CLSID_StdGlobalInterfaceTable : CLSID;

external GUID_TRISTATE : GUID;

alias COINIT_APARTMENTTHREADED = 2;
alias COINIT_MULTITHREADED = 0;
alias COINIT_DISABLE_OLE1DDE = 4;
alias COINIT_SPEED_OVER_MEMORY = 8;

alias COINIT = Int;

alias SMEXF_SERVER = 1;
alias SMEXF_HANDLER = 2;

alias STDMSHLFLAGS = Int;

external (stdcall) CoBuildVersion() CULong;

external (stdcall) CoInitialize(
    argument0 : PVOID) CLong;

external (stdcall) CoInitializeEx(
    argument0 : LPVOID,
    argument1 : CULong) CLong;

external (stdcall) CoUninitialize();

external (stdcall) CoGetMalloc(
    argument0 : CULong,
    argument1 : Pointer[LPMALLOC]) CLong;

external (stdcall) CoGetCurrentProcess() CULong;

external (stdcall) CoRegisterMallocSpy(
    argument0 : LPMALLOCSPY) CLong;

external (stdcall) CoRevokeMallocSpy() CLong;

external (stdcall) CoCreateStandardMalloc(
    argument0 : CULong,
    argument1 : Pointer[Pointer[IMalloc]]) CLong;

external (stdcall) CoGetClassObject(
    argument0 : Pointer[CLSID],
    argument1 : CULong,
    argument2 : Pointer[COSERVERINFO],
    argument3 : Pointer[IID],
    argument4 : Pointer[PVOID]) CLong;

external (stdcall) CoRegisterClassObject(
    argument0 : Pointer[CLSID],
    argument1 : LPUNKNOWN,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : PDWORD) CLong;

external (stdcall) CoRevokeClassObject(
    argument0 : CULong) CLong;

external (stdcall) CoGetMarshalSizeMax(
    argument0 : Pointer[CULong],
    argument1 : Pointer[IID],
    argument2 : LPUNKNOWN,
    argument3 : CULong,
    argument4 : PVOID,
    argument5 : CULong) CLong;

external (stdcall) CoMarshalInterface(
    argument0 : LPSTREAM,
    argument1 : Pointer[IID],
    argument2 : LPUNKNOWN,
    argument3 : CULong,
    argument4 : PVOID,
    argument5 : CULong) CLong;

external (stdcall) CoUnmarshalInterface(
    argument0 : LPSTREAM,
    argument1 : Pointer[IID],
    argument2 : Pointer[PVOID]) CLong;

external (stdcall) CoMarshalHresult(
    argument0 : LPSTREAM,
    argument1 : CLong) CLong;

external (stdcall) CoUnmarshalHresult(
    argument0 : LPSTREAM,
    argument1 : Pointer[CLong]) CLong;

external (stdcall) CoReleaseMarshalData(
    argument0 : LPSTREAM) CLong;

external (stdcall) CoDisconnectObject(
    argument0 : LPUNKNOWN,
    argument1 : CULong) CLong;

external (stdcall) CoLockObjectExternal(
    argument0 : LPUNKNOWN,
    argument1 : Int,
    argument2 : Int) CLong;

external (stdcall) CoGetStandardMarshal(
    argument0 : Pointer[IID],
    argument1 : LPUNKNOWN,
    argument2 : CULong,
    argument3 : PVOID,
    argument4 : CULong,
    argument5 : Pointer[LPMARSHAL]) CLong;

external (stdcall) CoGetStdMarshalEx(
    argument0 : LPUNKNOWN,
    argument1 : CULong,
    argument2 : Pointer[LPUNKNOWN]) CLong;

external (stdcall) CoIsHandlerConnected(
    argument0 : LPUNKNOWN) Int;

external (stdcall) CoHasStrongExternalConnections(
    argument0 : LPUNKNOWN) Int;

external (stdcall) CoMarshalInterThreadInterfaceInStream(
    argument0 : Pointer[IID],
    argument1 : LPUNKNOWN,
    argument2 : Pointer[LPSTREAM]) CLong;

external (stdcall) CoGetInterfaceAndReleaseStream(
    argument0 : LPSTREAM,
    argument1 : Pointer[IID],
    argument2 : Pointer[PVOID]) CLong;

external (stdcall) CoCreateFreeThreadedMarshaler(
    argument0 : LPUNKNOWN,
    argument1 : Pointer[LPUNKNOWN]) CLong;

external (stdcall) CoLoadLibrary(
    argument0 : LPOLESTR,
    argument1 : Int) HINSTANCE;

external (stdcall) CoFreeLibrary(
    argument0 : HINSTANCE);

external (stdcall) CoFreeAllLibraries();

external (stdcall) CoFreeUnusedLibraries();

external (stdcall) CoCreateInstance(
    argument0 : Pointer[CLSID],
    argument1 : LPUNKNOWN,
    argument2 : CULong,
    argument3 : Pointer[IID],
    argument4 : Pointer[PVOID]) CLong;

external (stdcall) CoCreateInstanceEx(
    argument0 : Pointer[CLSID],
    argument1 : Pointer[IUnknown],
    argument2 : CULong,
    argument3 : Pointer[COSERVERINFO],
    argument4 : CULong,
    argument5 : Pointer[MULTI_QI]) CLong;

external (stdcall) StringFromCLSID(
    argument0 : Pointer[CLSID],
    argument1 : Pointer[LPOLESTR]) CLong;

external (stdcall) CLSIDFromString(
    argument0 : LPOLESTR,
    argument1 : LPCLSID) CLong;

external (stdcall) StringFromIID(
    argument0 : Pointer[IID],
    argument1 : Pointer[LPOLESTR]) CLong;

external (stdcall) IIDFromString(
    argument0 : LPOLESTR,
    argument1 : LPIID) CLong;

external (stdcall) CoIsOle1Class(
    argument0 : Pointer[CLSID]) Int;

external (stdcall) ProgIDFromCLSID(
    argument0 : Pointer[CLSID],
    argument1 : Pointer[LPOLESTR]) CLong;

external (stdcall) CLSIDFromProgID(
    argument0 : LPCOLESTR,
    argument1 : LPCLSID) CLong;

external (stdcall) StringFromGUID2(
    argument0 : Pointer[GUID],
    argument1 : LPOLESTR,
    argument2 : Int) Int;

external (stdcall) CoCreateGuid(
    argument0 : Pointer[GUID]) CLong;

external (stdcall) CoFileTimeToDosDateTime(
    argument0 : Pointer[FILETIME],
    argument1 : LPWORD,
    argument2 : LPWORD) Int;

external (stdcall) CoDosDateTimeToFileTime(
    argument0 : UShort,
    argument1 : UShort,
    argument2 : Pointer[FILETIME]) Int;

external (stdcall) CoFileTimeNow(
    argument0 : Pointer[FILETIME]) CLong;

external (stdcall) CoRegisterMessageFilter(
    argument0 : LPMESSAGEFILTER,
    argument1 : Pointer[LPMESSAGEFILTER]) CLong;

external (stdcall) CoGetTreatAsClass(
    argument0 : Pointer[CLSID],
    argument1 : LPCLSID) CLong;

external (stdcall) CoTreatAsClass(
    argument0 : Pointer[CLSID],
    argument1 : Pointer[CLSID]) CLong;

alias LPFNGETCLASSOBJECT = StdCallCodePointer[(Pointer[Struct__GUID],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)];

alias LPFNCANUNLOADNOW = StdCallCodePointer[(),(CLong)];

external (stdcall) DllGetClassObject(
    argument0 : Pointer[CLSID],
    argument1 : Pointer[IID],
    argument2 : Pointer[PVOID]) CLong;

external (stdcall) DllCanUnloadNow() CLong;

external (stdcall) CoTaskMemAlloc(
    argument0 : CULong) PVOID;

external (stdcall) CoTaskMemRealloc(
    argument0 : PVOID,
    argument1 : CULong) PVOID;

external (stdcall) CoTaskMemFree(
    argument0 : PVOID);

external (stdcall) CreateDataAdviseHolder(
    argument0 : Pointer[LPDATAADVISEHOLDER]) CLong;

external (stdcall) CreateDataCache(
    argument0 : LPUNKNOWN,
    argument1 : Pointer[CLSID],
    argument2 : Pointer[IID],
    argument3 : Pointer[PVOID]) CLong;

external (stdcall) StgCreateDocfile(
    argument0 : Pointer[UShort],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[Pointer[IStorage]]) CLong;

external (stdcall) StgCreateDocfileOnILockBytes(
    argument0 : Pointer[ILockBytes],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[Pointer[IStorage]]) CLong;

external (stdcall) StgOpenStorage(
    argument0 : Pointer[UShort],
    argument1 : Pointer[IStorage],
    argument2 : CULong,
    argument3 : SNB,
    argument4 : CULong,
    argument5 : Pointer[Pointer[IStorage]]) CLong;

external (stdcall) StgOpenStorageOnILockBytes(
    argument0 : Pointer[ILockBytes],
    argument1 : Pointer[IStorage],
    argument2 : CULong,
    argument3 : SNB,
    argument4 : CULong,
    argument5 : Pointer[Pointer[IStorage]]) CLong;

external (stdcall) StgIsStorageFile(
    argument0 : Pointer[UShort]) CLong;

external (stdcall) StgIsStorageILockBytes(
    argument0 : Pointer[ILockBytes]) CLong;

external (stdcall) StgSetTimes(
    argument0 : Pointer[UShort],
    argument1 : Pointer[FILETIME],
    argument2 : Pointer[FILETIME],
    argument3 : Pointer[FILETIME]) CLong;

external (stdcall) StgCreateStorageEx(
    argument0 : Pointer[UShort],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : Pointer[STGOPTIONS],
    argument5 : RawPointer,
    argument6 : Pointer[IID],
    argument7 : Pointer[RawPointer]) CLong;

external (stdcall) StgOpenStorageEx(
    argument0 : Pointer[UShort],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : Pointer[STGOPTIONS],
    argument5 : RawPointer,
    argument6 : Pointer[IID],
    argument7 : Pointer[RawPointer]) CLong;

external (stdcall) BindMoniker(
    argument0 : LPMONIKER,
    argument1 : CULong,
    argument2 : Pointer[IID],
    argument3 : Pointer[PVOID]) CLong;

external (stdcall) CoGetObject(
    argument0 : LPCWSTR,
    argument1 : Pointer[BIND_OPTS],
    argument2 : Pointer[IID],
    argument3 : Pointer[RawPointer]) CLong;

external (stdcall) MkParseDisplayName(
    argument0 : LPBC,
    argument1 : LPCOLESTR,
    argument2 : Pointer[CULong],
    argument3 : Pointer[LPMONIKER]) CLong;

external (stdcall) MonikerRelativePathTo(
    argument0 : LPMONIKER,
    argument1 : LPMONIKER,
    argument2 : Pointer[LPMONIKER],
    argument3 : Int) CLong;

external (stdcall) MonikerCommonPrefixWith(
    argument0 : LPMONIKER,
    argument1 : LPMONIKER,
    argument2 : Pointer[LPMONIKER]) CLong;

external (stdcall) CreateBindCtx(
    argument0 : CULong,
    argument1 : Pointer[LPBC]) CLong;

external (stdcall) CreateGenericComposite(
    argument0 : LPMONIKER,
    argument1 : LPMONIKER,
    argument2 : Pointer[LPMONIKER]) CLong;

external (stdcall) GetClassFile(
    argument0 : LPCOLESTR,
    argument1 : Pointer[CLSID]) CLong;

external (stdcall) CreateFileMoniker(
    argument0 : LPCOLESTR,
    argument1 : Pointer[LPMONIKER]) CLong;

external (stdcall) CreateItemMoniker(
    argument0 : LPCOLESTR,
    argument1 : LPCOLESTR,
    argument2 : Pointer[LPMONIKER]) CLong;

external (stdcall) CreateAntiMoniker(
    argument0 : Pointer[LPMONIKER]) CLong;

external (stdcall) CreatePointerMoniker(
    argument0 : LPUNKNOWN,
    argument1 : Pointer[LPMONIKER]) CLong;

external (stdcall) GetRunningObjectTable(
    argument0 : CULong,
    argument1 : Pointer[LPRUNNINGOBJECTTABLE]) CLong;

external (stdcall) CoInitializeSecurity(
    argument0 : PSECURITY_DESCRIPTOR,
    argument1 : CLong,
    argument2 : Pointer[SOLE_AUTHENTICATION_SERVICE],
    argument3 : RawPointer,
    argument4 : CULong,
    argument5 : CULong,
    argument6 : RawPointer,
    argument7 : CULong,
    argument8 : RawPointer) CLong;

external (stdcall) CoGetCallContext(
    argument0 : Pointer[IID],
    argument1 : Pointer[RawPointer]) CLong;

external (stdcall) CoQueryProxyBlanket(
    argument0 : Pointer[IUnknown],
    argument1 : Pointer[CULong],
    argument2 : Pointer[CULong],
    argument3 : Pointer[Pointer[UShort]],
    argument4 : Pointer[CULong],
    argument5 : Pointer[CULong],
    argument6 : Pointer[RPC_AUTH_IDENTITY_HANDLE],
    argument7 : Pointer[CULong]) CLong;

external (stdcall) CoSetProxyBlanket(
    argument0 : Pointer[IUnknown],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[UShort],
    argument4 : CULong,
    argument5 : CULong,
    argument6 : RPC_AUTH_IDENTITY_HANDLE,
    argument7 : CULong) CLong;

external (stdcall) CoCopyProxy(
    argument0 : Pointer[IUnknown],
    argument1 : Pointer[Pointer[IUnknown]]) CLong;

external (stdcall) CoQueryClientBlanket(
    argument0 : Pointer[CULong],
    argument1 : Pointer[CULong],
    argument2 : Pointer[Pointer[UShort]],
    argument3 : Pointer[CULong],
    argument4 : Pointer[CULong],
    argument5 : Pointer[RPC_AUTHZ_HANDLE],
    argument6 : Pointer[CULong]) CLong;

external (stdcall) CoImpersonateClient() CLong;

external (stdcall) CoRevertToSelf() CLong;

external (stdcall) CoQueryAuthenticationServices(
    argument0 : Pointer[CULong],
    argument1 : Pointer[Pointer[SOLE_AUTHENTICATION_SERVICE]]) CLong;

external (stdcall) CoSwitchCallContext(
    argument0 : Pointer[IUnknown],
    argument1 : Pointer[Pointer[IUnknown]]) CLong;

external (stdcall) CoGetInstanceFromFile(
    argument0 : Pointer[COSERVERINFO],
    argument1 : Pointer[CLSID],
    argument2 : Pointer[IUnknown],
    argument3 : CULong,
    argument4 : CULong,
    argument5 : Pointer[UShort],
    argument6 : CULong,
    argument7 : Pointer[MULTI_QI]) CLong;

external (stdcall) CoGetInstanceFromIStorage(
    argument0 : Pointer[COSERVERINFO],
    argument1 : Pointer[CLSID],
    argument2 : Pointer[IUnknown],
    argument3 : CULong,
    argument4 : Pointer[Struct_IStorage],
    argument5 : CULong,
    argument6 : Pointer[MULTI_QI]) CLong;

external (stdcall) CoAddRefServerProcess() CULong;

external (stdcall) CoReleaseServerProcess() CULong;

external (stdcall) CoResumeClassObjects() CLong;

external (stdcall) CoSuspendClassObjects() CLong;

external (stdcall) CoGetPSClsid(
    argument0 : Pointer[IID],
    argument1 : Pointer[CLSID]) CLong;

external (stdcall) CoRegisterPSClsid(
    argument0 : Pointer[IID],
    argument1 : Pointer[CLSID]) CLong;

external IID_IDispatch : GUID;

external IID_IPropertyNotifySink : GUID;

external IID_IClassFactory2 : GUID;

external IID_IProvideClassInfo : GUID;

external IID_IProvideClassInfo2 : GUID;

external IID_IConnectionPointContainer : GUID;

external IID_IEnumConnectionPoints : GUID;

external IID_IConnectionPoint : GUID;

external IID_IEnumConnections : GUID;

external IID_IOleControl : GUID;

external IID_IOleControlSite : GUID;

external IID_ISimpleFrameSite : GUID;

external IID_IPersistStreamInit : GUID;

external IID_IPersistMemory : GUID;

external IID_IPersistPropertyBag : GUID;

external IID_IPropertyBag : GUID;

external IID_IErrorLog : GUID;

external IID_IPropertyFrame : GUID;

external IID_ISpecifyPropertyPages : GUID;

external IID_IPerPropertyBrowsing : GUID;

external IID_IPropertyPageSite : GUID;

external IID_IPropertyPage : GUID;

external IID_IPropertyPage2 : GUID;

external CLSID_CFontPropPage : GUID;

external CLSID_CColorPropPage : GUID;

external CLSID_CPicturePropPage : GUID;

external CLSID_PersistPropset : GUID;

external CLSID_ConvertVBX : GUID;

external CLSID_StdFont : GUID;

external CLSID_StdPicture : GUID;

external IID_IFont : GUID;

external IID_IFontDisp : GUID;

external IID_IPicture : GUID;

external IID_IPictureDisp : GUID;

external GUID_HIMETRIC : GUID;

external GUID_COLOR : GUID;

external GUID_XPOSPIXEL : GUID;

external GUID_YPOSPIXEL : GUID;

external GUID_XSIZEPIXEL : GUID;

external GUID_YSIZEPIXEL : GUID;

external GUID_XPOS : GUID;

external GUID_YPOS : GUID;

external GUID_XSIZE : GUID;

external GUID_YSIZE : GUID;

external GUID_OPTIONVALUEEXCLUSIVE : GUID;

external GUID_CHECKVALUEEXCLUSIVE : GUID;

external GUID_FONTNAME : GUID;

external GUID_FONTSIZE : GUID;

external GUID_FONTBOLD : GUID;

external GUID_FONTITALIC : GUID;

external GUID_FONTUNDERSCORE : GUID;

external GUID_FONTSTRIKETHROUGH : GUID;

external GUID_HANDLE : GUID;

external IID_IEnumUnknown : GUID;

external IID_IEnumString : GUID;

external IID_IEnumMoniker : GUID;

external IID_IEnumFORMATETC : GUID;

external IID_IEnumOLEVERB : GUID;

external IID_IEnumSTATDATA : GUID;

external IID_IEnumSTATSTG : GUID;

external IID_IViewObject : GUID;

external IID_IOleAdviseHolder : GUID;

external IID_IOleObject : GUID;

external IID_IOleInPlaceObject : GUID;

external IID_IOleWindow : GUID;

external IID_IOleInPlaceUIWindow : GUID;

external IID_IOleInPlaceFrame : GUID;

external IID_IOleInPlaceActiveObject : GUID;

external IID_IOleClientSite : GUID;

external IID_IOleInPlaceSite : GUID;

external IID_IParseDisplayName : GUID;

external IID_IOleContainer : GUID;

external IID_IOleItemContainer : GUID;

external IID_IOleLink : GUID;

external IID_IOleCache : GUID;

external IID_IDropSource : GUID;

external IID_IDropTarget : GUID;

external IID_IViewObject2 : GUID;

external IID_IOleCache2 : GUID;

external IID_IOleCacheControl : GUID;

alias LPTYPELIB = Pointer[Struct_ITypeLib];

alias LPTYPELIB2 = Pointer[Struct_ITypeLib2];

alias LPCREATETYPEINFO = OpaquePointer;

alias LPCREATETYPEINFO2 = OpaquePointer;

alias LPCREATETYPELIB = OpaquePointer;

alias LPCREATETYPELIB2 = OpaquePointer;

alias LPTYPECOMP = Pointer[Struct_ITypeComp];

alias LPTYPEINFO = Pointer[Struct_ITypeInfo];

alias LPTYPEINFO2 = Pointer[Struct_ITypeInfo2];

alias LPERRORINFO = Pointer[Struct_IErrorInfo];

alias LPDISPATCH = Pointer[Struct_IDispatch];

alias LPENUMVARIANT = Pointer[Struct_IEnumVARIANT];

alias LPCREATEERRORINFO = Pointer[Struct_ICreateErrorInfo];

alias LPSUPPORTERRORINFO = Pointer[Struct_ISupportErrorInfo];

alias LPRECORDINFO = Pointer[Struct_IRecordInfo];

external IID_ITypeLib : IID;

external IID_ITypeLib2 : IID;

external IID_ICreateTypeInfo : IID;

external IID_ICreateTypeInfo2 : IID;

external IID_ICreateTypeLib : IID;

external IID_ICreateTypeLib2 : IID;

external IID_ITypeInfo : IID;

external IID_ITypeInfo2 : IID;

external IID_IErrorInfo : IID;

external IID_IEnumVARIANT : IID;

external IID_ICreateErrorInfo : IID;

external IID_ISupportErrorInfo : IID;

external IID_IRecordInfo : IID;

external IID_ITypeMarshal : IID;

alias SYS_WIN16 = 0;
alias SYS_WIN32 = 1;
alias SYS_MAC = 2;

alias SYSKIND = Int;

alias LIBFLAG_FRESTRICTED = 1;
alias LIBFLAG_FCONTROL = 2;
alias LIBFLAG_FHIDDEN = 4;
alias LIBFLAG_FHASDISKIMAGE = 8;

alias LIBFLAGS = Int;

record Struct_tagTLIBATTR (
    guid : GUID,
    lcid : CULong,
    syskind : SYSKIND,
    wMajorVerNum : UShort,
    wMinorVerNum : UShort,
    wLibFlags : UShort,
);

alias TLIBATTR = Struct_tagTLIBATTR;

alias LPTLIBATTR = Pointer[Struct_tagTLIBATTR];

alias CURRENCY = CY;

record Struct_tagSAFEARRAYBOUND (
    cElements : CULong,
    lLbound : CLong,
);

alias SAFEARRAYBOUND = Struct_tagSAFEARRAYBOUND;

alias LPSAFEARRAYBOUND = Pointer[Struct_tagSAFEARRAYBOUND];

record Struct__wireSAFEARR_BSTR (
    Size : CULong,
    aBstr : Pointer[wireBSTR],
);

alias SAFEARR_BSTR = Struct__wireSAFEARR_BSTR;

record Struct__wireSAFEARR_UNKNOWN (
    Size : CULong,
    apUnknown : Pointer[Pointer[IUnknown]],
);

alias SAFEARR_UNKNOWN = Struct__wireSAFEARR_UNKNOWN;

record Struct__wireSAFEARR_DISPATCH (
    Size : CULong,
    apDispatch : Pointer[LPDISPATCH],
);

alias SAFEARR_DISPATCH = Struct__wireSAFEARR_DISPATCH;

record Struct__wireSAFEARR_VARIANT (
    Size : CULong,
    aVariant : Pointer[Struct__wireVARIANT],
);

alias SAFEARR_VARIANT = Struct__wireSAFEARR_VARIANT;

alias SF_ERROR = 10;
alias SF_I1 = 16;
alias SF_I2 = 2;
alias SF_I4 = 3;
alias SF_I8 = 20;
alias SF_BSTR = 8;
alias SF_UNKNOWN = 13;
alias SF_DISPATCH = 9;
alias SF_VARIANT = 12;

alias SF_TYPE = Int;

record Struct__wireBRECORD (
    fFlags : CULong,
    clSize : CULong,
    pRecInfo : Pointer[LPRECORDINFO],
    pRecord : Pointer[CUChar],
);

alias wireBRECORD = Pointer[Struct__wireBRECORD];

record Struct__wireSAFEARR_BRECORD (
    Size : CULong,
    aRecord : Pointer[wireBRECORD],
);

alias SAFEARR_BRECORD = Struct__wireSAFEARR_BRECORD;

record Struct__wireSAFEARR_HAVEIID (
    Size : CULong,
    apUnknown : Pointer[Pointer[IUnknown]],
    iid : IID,
);

alias SAFEARR_HAVEIID = Struct__wireSAFEARR_HAVEIID;

record Struct__wireSAFEARRAY_UNION (
    sfType : CULong,
    u : AUnionType,
);

alias SAFEARRAYUNION = Struct__wireSAFEARRAY_UNION;

record Struct__wireSAFEARRAY (
    cDims : UShort,
    fFeatures : UShort,
    cbElements : CULong,
    cLocks : CULong,
    uArrayStructs : SAFEARRAYUNION,
    rgsabound : Array[SAFEARRAYBOUND,1],
);

alias wireSAFEARRAY = Pointer[Struct__wireSAFEARRAY];

alias wirePSAFEARRAY = Pointer[wireSAFEARRAY];

record Struct_tagSAFEARRAY (
    cDims : UShort,
    fFeatures : UShort,
    cbElements : CULong,
    cLocks : CULong,
    pvData : PVOID,
    rgsabound : Array[SAFEARRAYBOUND,1],
);

alias SAFEARRAY = Struct_tagSAFEARRAY;

alias LPSAFEARRAY = Pointer[Struct_tagSAFEARRAY];

record Struct_tagVARIANT (
    unnamed_field0 : AUnionType,
);

alias VARIANT = Struct_tagVARIANT;

alias LPVARIANT = Pointer[Struct_tagVARIANT];

alias VARIANTARG = VARIANT;

alias LPVARIANTARG = Pointer[VARIANT];

record Struct__wireVARIANT (
    clSize : CULong,
    rpcReserved : CULong,
    vt : UShort,
    wReserved1 : UShort,
    wReserved2 : UShort,
    wReserved3 : UShort,
    unnamed_field6 : AUnionType,
);

alias wireVARIANT = Pointer[Struct__wireVARIANT];

alias DISPID = CLong;

alias MEMBERID = CLong;

alias HREFTYPE = CULong;

alias TKIND_ENUM = 0;
alias TKIND_RECORD = 1;
alias TKIND_MODULE = 2;
alias TKIND_INTERFACE = 3;
alias TKIND_DISPATCH = 4;
alias TKIND_COCLASS = 5;
alias TKIND_ALIAS = 6;
alias TKIND_UNION = 7;
alias TKIND_MAX = 8;

alias TYPEKIND = Int;

record Struct_tagTYPEDESC (
    unnamed_field0 : AUnionType,
    vt : UShort,
);

alias TYPEDESC = Struct_tagTYPEDESC;

record Struct_tagARRAYDESC (
    tdescElem : TYPEDESC,
    cDims : UShort,
    rgbounds : Array[SAFEARRAYBOUND,1],
);

alias ARRAYDESC = Struct_tagARRAYDESC;

record Struct_tagPARAMDESCEX (
    cBytes : CULong,
    varDefaultValue : VARIANTARG,
);

alias PARAMDESCEX = Struct_tagPARAMDESCEX;

alias LPPARAMDESCEX = Pointer[Struct_tagPARAMDESCEX];

record Struct_tagPARAMDESC (
    pparamdescex : LPPARAMDESCEX,
    wParamFlags : UShort,
);

alias PARAMDESC = Struct_tagPARAMDESC;

alias LPPARAMDESC = Pointer[Struct_tagPARAMDESC];

record Struct_tagIDLDESC (
    dwReserved : CULong,
    wIDLFlags : UShort,
);

alias IDLDESC = Struct_tagIDLDESC;

alias LPIDLDESC = Pointer[Struct_tagIDLDESC];

record Struct_tagELEMDESC (
    tdesc : TYPEDESC,
    unnamed_field1 : AUnionType,
);

alias ELEMDESC = Struct_tagELEMDESC;

alias LPELEMDESC = Pointer[Struct_tagELEMDESC];

record Struct_tagTYPEATTR (
    guid : GUID,
    lcid : CULong,
    dwReserved : CULong,
    memidConstructor : CLong,
    memidDestructor : CLong,
    lpstrSchema : LPOLESTR,
    cbSizeInstance : CULong,
    typekind : TYPEKIND,
    cFuncs : UShort,
    cVars : UShort,
    cImplTypes : UShort,
    cbSizeVft : UShort,
    cbAlignment : UShort,
    wTypeFlags : UShort,
    wMajorVerNum : UShort,
    wMinorVerNum : UShort,
    tdescAlias : TYPEDESC,
    idldescType : IDLDESC,
);

alias TYPEATTR = Struct_tagTYPEATTR;

alias LPTYPEATTR = Pointer[Struct_tagTYPEATTR];

record Struct_tagDISPPARAMS (
    rgvarg : Pointer[VARIANTARG],
    rgdispidNamedArgs : Pointer[CLong],
    cArgs : UInt,
    cNamedArgs : UInt,
);

alias DISPPARAMS = Struct_tagDISPPARAMS;

record Struct_tagEXCEPINFO (
    wCode : UShort,
    wReserved : UShort,
    bstrSource : BSTR,
    bstrDescription : BSTR,
    bstrHelpFile : BSTR,
    dwHelpContext : CULong,
    pvReserved : PVOID,
    pfnDeferredFillIn : StdCallCodePointer[(Pointer[Struct_tagEXCEPINFO]),(CLong)],
    scode : CLong,
);

alias EXCEPINFO = Struct_tagEXCEPINFO;

alias LPEXCEPINFO = Pointer[Struct_tagEXCEPINFO];

alias CC_FASTCALL = 0;
alias CC_CDECL = 1;
alias CC_MSCPASCAL = 2;
alias CC_PASCAL = 2;
alias CC_MACPASCAL = 3;
alias CC_STDCALL = 4;
alias CC_FPFASTCALL = 5;
alias CC_SYSCALL = 6;
alias CC_MPWCDECL = 7;
alias CC_MPWPASCAL = 8;
alias CC_MAX = 8;

alias CALLCONV = Int;

alias FUNC_VIRTUAL = 0;
alias FUNC_PUREVIRTUAL = 1;
alias FUNC_NONVIRTUAL = 2;
alias FUNC_STATIC = 3;
alias FUNC_DISPATCH = 4;

alias FUNCKIND = Int;

alias INVOKE_FUNC = 1;
alias INVOKE_PROPERTYGET = 2;
alias INVOKE_PROPERTYPUT = 4;
alias INVOKE_PROPERTYPUTREF = 8;

alias INVOKEKIND = Int;

record Struct_tagFUNCDESC (
    memid : CLong,
    lprgscode : Pointer[CLong],
    lprgelemdescParam : Pointer[ELEMDESC],
    funckind : FUNCKIND,
    invkind : INVOKEKIND,
    callconv : CALLCONV,
    cParams : Short,
    cParamsOpt : Short,
    oVft : Short,
    cScodes : Short,
    elemdescFunc : ELEMDESC,
    wFuncFlags : UShort,
);

alias FUNCDESC = Struct_tagFUNCDESC;

alias LPFUNCDESC = Pointer[Struct_tagFUNCDESC];

alias VAR_PERINSTANCE = 0;
alias VAR_STATIC = 1;
alias VAR_CONST = 2;
alias VAR_DISPATCH = 3;

alias VARKIND = Int;

record Struct_tagVARDESC (
    memid : CLong,
    lpstrSchema : LPOLESTR,
    unnamed_field2 : AUnionType,
    elemdescVar : ELEMDESC,
    wVarFlags : UShort,
    varkind : VARKIND,
);

alias VARDESC = Struct_tagVARDESC;

alias LPVARDESC = Pointer[Struct_tagVARDESC];

alias TYPEFLAG_FAPPOBJECT = 1;
alias TYPEFLAG_FCANCREATE = 2;
alias TYPEFLAG_FLICENSED = 4;
alias TYPEFLAG_FPREDECLID = 8;
alias TYPEFLAG_FHIDDEN = 16;
alias TYPEFLAG_FCONTROL = 32;
alias TYPEFLAG_FDUAL = 64;
alias TYPEFLAG_FNONEXTENSIBLE = 128;
alias TYPEFLAG_FOLEAUTOMATION = 256;
alias TYPEFLAG_FRESTRICTED = 512;
alias TYPEFLAG_FAGGREGATABLE = 1024;
alias TYPEFLAG_FREPLACEABLE = 2048;
alias TYPEFLAG_FDISPATCHABLE = 4096;
alias TYPEFLAG_FREVERSEBIND = 8192;

alias TYPEFLAGS = Int;

alias FUNCFLAG_FRESTRICTED = 1;
alias FUNCFLAG_FSOURCE = 2;
alias FUNCFLAG_FBINDABLE = 4;
alias FUNCFLAG_FREQUESTEDIT = 8;
alias FUNCFLAG_FDISPLAYBIND = 16;
alias FUNCFLAG_FDEFAULTBIND = 32;
alias FUNCFLAG_FHIDDEN = 64;
alias FUNCFLAG_FUSESGETLASTERROR = 128;
alias FUNCFLAG_FDEFAULTCOLLELEM = 256;
alias FUNCFLAG_FUIDEFAULT = 512;
alias FUNCFLAG_FNONBROWSABLE = 1024;
alias FUNCFLAG_FREPLACEABLE = 2048;
alias FUNCFLAG_FIMMEDIATEBIND = 4096;

alias FUNCFLAGS = Int;

alias VARFLAG_FREADONLY = 1;
alias VARFLAG_FSOURCE = 2;
alias VARFLAG_FBINDABLE = 4;
alias VARFLAG_FREQUESTEDIT = 8;
alias VARFLAG_FDISPLAYBIND = 16;
alias VARFLAG_FDEFAULTBIND = 32;
alias VARFLAG_FHIDDEN = 64;
alias VARFLAG_FRESTRICTED = 128;
alias VARFLAG_FDEFAULTCOLLELEM = 256;
alias VARFLAG_FUIDEFAULT = 512;
alias VARFLAG_FNONBROWSABLE = 1024;
alias VARFLAG_FREPLACEABLE = 2048;
alias VARFLAG_FIMMEDIATEBIND = 4096;

alias VARFLAGS = Int;

record Struct_tagCLEANLOCALSTORAGE (
    pInterface : Pointer[IUnknown],
    pStorage : PVOID,
    flags : CULong,
);

alias CLEANLOCALSTORAGE = Struct_tagCLEANLOCALSTORAGE;

record Struct_tagCUSTDATAITEM (
    guid : GUID,
    varValue : VARIANTARG,
);

alias CUSTDATAITEM = Struct_tagCUSTDATAITEM;

alias LPCUSTDATAITEM = Pointer[Struct_tagCUSTDATAITEM];

record Struct_tagCUSTDATA (
    cCustData : CULong,
    prgCustData : LPCUSTDATAITEM,
);

alias CUSTDATA = Struct_tagCUSTDATA;

alias LPCUSTDATA = Pointer[Struct_tagCUSTDATA];

alias DESCKIND_NONE = 0;
alias DESCKIND_FUNCDESC = 1;
alias DESCKIND_VARDESC = 2;
alias DESCKIND_TYPECOMP = 3;
alias DESCKIND_IMPLICITAPPOBJ = 4;
alias DESCKIND_MAX = 5;

alias DESCKIND = Int;

alias BINDPTR = AUnionType;

alias LPBINDPTR = OpaquePointer;

record Struct_IDispatch (
    lpVtbl : Pointer[Struct_IDispatchVtbl],
);

alias IDispatch = Struct_IDispatch;

alias IDispatchVtbl = Struct_IDispatchVtbl;

record Struct_IDispatchVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IDispatch],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IDispatch]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IDispatch]),(CULong)],
    GetTypeInfoCount : StdCallCodePointer[(Pointer[Struct_IDispatch],Pointer[UInt]),(CLong)],
    GetTypeInfo : StdCallCodePointer[(Pointer[Struct_IDispatch],UInt,CULong,Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetIDsOfNames : StdCallCodePointer[(Pointer[Struct_IDispatch],Pointer[Struct__GUID],Pointer[Pointer[UShort]],UInt,CULong,Pointer[CLong]),(CLong)],
    Invoke : StdCallCodePointer[(Pointer[Struct_IDispatch],CLong,Pointer[Struct__GUID],CULong,UShort,Pointer[Struct_tagDISPPARAMS],Pointer[Struct_tagVARIANT],Pointer[Struct_tagEXCEPINFO],Pointer[UInt]),(CLong)],
);

record Struct_IEnumVARIANT (
    lpVtbl : Pointer[Struct_IEnumVARIANTVtbl],
);

alias IEnumVARIANT = Struct_IEnumVARIANT;

alias IEnumVARIANTVtbl = Struct_IEnumVARIANTVtbl;

record Struct_IEnumVARIANTVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IEnumVARIANT],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IEnumVARIANT]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IEnumVARIANT]),(CULong)],
    Next : StdCallCodePointer[(Pointer[Struct_IEnumVARIANT],CULong,Pointer[Struct_tagVARIANT],Pointer[CULong]),(CLong)],
    Skip : StdCallCodePointer[(Pointer[Struct_IEnumVARIANT],CULong),(CLong)],
    Reset : StdCallCodePointer[(Pointer[Struct_IEnumVARIANT]),(CLong)],
    Clone : StdCallCodePointer[(Pointer[Struct_IEnumVARIANT],Pointer[Pointer[Struct_IEnumVARIANT]]),(CLong)],
);

record Struct_ITypeComp (
    lpVtbl : Pointer[Struct_ITypeCompVtbl],
);

alias ITypeComp = Struct_ITypeComp;

alias ITypeCompVtbl = Struct_ITypeCompVtbl;

record Struct_ITypeCompVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_ITypeComp],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_ITypeComp]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_ITypeComp]),(CULong)],
    Bind : StdCallCodePointer[(Pointer[Struct_ITypeComp],Pointer[UShort],CULong,UShort,Pointer[Pointer[Struct_ITypeInfo]],Pointer[Int],OpaquePointer),(CLong)],
    BindType : StdCallCodePointer[(Pointer[Struct_ITypeComp],Pointer[UShort],CULong,Pointer[Pointer[Struct_ITypeInfo]],Pointer[Pointer[Struct_ITypeComp]]),(CLong)],
);

record Struct_ITypeInfo (
    lpVtbl : Pointer[Struct_ITypeInfoVtbl],
);

alias ITypeInfo = Struct_ITypeInfo;

alias ITypeInfoVtbl = Struct_ITypeInfoVtbl;

record Struct_ITypeInfoVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_ITypeInfo],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_ITypeInfo]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_ITypeInfo]),(CULong)],
    GetTypeAttr : StdCallCodePointer[(Pointer[Struct_ITypeInfo],Pointer[Pointer[Struct_tagTYPEATTR]]),(CLong)],
    GetTypeComp : StdCallCodePointer[(Pointer[Struct_ITypeInfo],Pointer[Pointer[Struct_ITypeComp]]),(CLong)],
    GetFuncDesc : StdCallCodePointer[(Pointer[Struct_ITypeInfo],UInt,Pointer[Pointer[Struct_tagFUNCDESC]]),(CLong)],
    GetVarDesc : StdCallCodePointer[(Pointer[Struct_ITypeInfo],UInt,Pointer[Pointer[Struct_tagVARDESC]]),(CLong)],
    GetNames : StdCallCodePointer[(Pointer[Struct_ITypeInfo],CLong,Pointer[Pointer[UShort]],UInt,Pointer[UInt]),(CLong)],
    GetRefTypeOfImplType : StdCallCodePointer[(Pointer[Struct_ITypeInfo],UInt,Pointer[CULong]),(CLong)],
    GetImplTypeFlags : StdCallCodePointer[(Pointer[Struct_ITypeInfo],UInt,Pointer[Int]),(CLong)],
    GetIDsOfNames : StdCallCodePointer[(Pointer[Struct_ITypeInfo],Pointer[Pointer[UShort]],UInt,Pointer[CLong]),(CLong)],
    Invoke : StdCallCodePointer[(Pointer[Struct_ITypeInfo],RawPointer,CLong,UShort,Pointer[Struct_tagDISPPARAMS],Pointer[Struct_tagVARIANT],Pointer[Struct_tagEXCEPINFO],Pointer[UInt]),(CLong)],
    GetDocumentation : StdCallCodePointer[(Pointer[Struct_ITypeInfo],CLong,Pointer[Pointer[UShort]],Pointer[Pointer[UShort]],Pointer[CULong],Pointer[Pointer[UShort]]),(CLong)],
    GetDllEntry : StdCallCodePointer[(Pointer[Struct_ITypeInfo],CLong,Int,Pointer[Pointer[UShort]],Pointer[Pointer[UShort]],Pointer[UShort]),(CLong)],
    GetRefTypeInfo : StdCallCodePointer[(Pointer[Struct_ITypeInfo],CULong,Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    AddressOfMember : StdCallCodePointer[(Pointer[Struct_ITypeInfo],CLong,Int,Pointer[RawPointer]),(CLong)],
    CreateInstance : StdCallCodePointer[(Pointer[Struct_ITypeInfo],Pointer[Struct_IUnknown],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    GetMops : StdCallCodePointer[(Pointer[Struct_ITypeInfo],CLong,Pointer[Pointer[UShort]]),(CLong)],
    GetContainingTypeLib : StdCallCodePointer[(Pointer[Struct_ITypeInfo],Pointer[Pointer[Struct_ITypeLib]],Pointer[UInt]),(CLong)],
    ReleaseTypeAttr : StdCallCodePointer[(Pointer[Struct_ITypeInfo],Pointer[Struct_tagTYPEATTR]),()],
    ReleaseFuncDesc : StdCallCodePointer[(Pointer[Struct_ITypeInfo],Pointer[Struct_tagFUNCDESC]),()],
    ReleaseVarDesc : StdCallCodePointer[(Pointer[Struct_ITypeInfo],Pointer[Struct_tagVARDESC]),()],
);

record Struct_ITypeInfo2 (
    lpVtbl : Pointer[Struct_ITypeInfo2Vtbl],
);

alias ITypeInfo2 = Struct_ITypeInfo2;

alias ITypeInfo2Vtbl = Struct_ITypeInfo2Vtbl;

record Struct_ITypeInfo2Vtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_ITypeInfo2],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_ITypeInfo2]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_ITypeInfo2]),(CULong)],
    GetTypeAttr : StdCallCodePointer[(Pointer[Struct_ITypeInfo2],Pointer[Pointer[Struct_tagTYPEATTR]]),(CLong)],
    GetTypeComp : StdCallCodePointer[(Pointer[Struct_ITypeInfo2],Pointer[Pointer[Struct_ITypeComp]]),(CLong)],
    GetFuncDesc : StdCallCodePointer[(Pointer[Struct_ITypeInfo2],UInt,Pointer[Pointer[Struct_tagFUNCDESC]]),(CLong)],
    GetVarDesc : StdCallCodePointer[(Pointer[Struct_ITypeInfo2],UInt,Pointer[Pointer[Struct_tagVARDESC]]),(CLong)],
    GetNames : StdCallCodePointer[(Pointer[Struct_ITypeInfo2],CLong,Pointer[Pointer[UShort]],UInt,Pointer[UInt]),(CLong)],
    GetRefTypeOfImplType : StdCallCodePointer[(Pointer[Struct_ITypeInfo2],UInt,Pointer[CULong]),(CLong)],
    GetImplTypeFlags : StdCallCodePointer[(Pointer[Struct_ITypeInfo2],UInt,Pointer[Int]),(CLong)],
    GetIDsOfNames : StdCallCodePointer[(Pointer[Struct_ITypeInfo2],Pointer[Pointer[UShort]],UInt,Pointer[CLong]),(CLong)],
    Invoke : StdCallCodePointer[(Pointer[Struct_ITypeInfo2],RawPointer,CLong,UShort,Pointer[Struct_tagDISPPARAMS],Pointer[Struct_tagVARIANT],Pointer[Struct_tagEXCEPINFO],Pointer[UInt]),(CLong)],
    GetDocumentation : StdCallCodePointer[(Pointer[Struct_ITypeInfo2],CLong,Pointer[Pointer[UShort]],Pointer[Pointer[UShort]],Pointer[CULong],Pointer[Pointer[UShort]]),(CLong)],
    GetDllEntry : StdCallCodePointer[(Pointer[Struct_ITypeInfo2],CLong,Int,Pointer[Pointer[UShort]],Pointer[Pointer[UShort]],Pointer[UShort]),(CLong)],
    GetRefTypeInfo : StdCallCodePointer[(Pointer[Struct_ITypeInfo2],CULong,Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    AddressOfMember : StdCallCodePointer[(Pointer[Struct_ITypeInfo2],CLong,Int,Pointer[RawPointer]),(CLong)],
    CreateInstance : StdCallCodePointer[(Pointer[Struct_ITypeInfo2],Pointer[Struct_IUnknown],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    GetMops : StdCallCodePointer[(Pointer[Struct_ITypeInfo2],CLong,Pointer[Pointer[UShort]]),(CLong)],
    GetContainingTypeLib : StdCallCodePointer[(Pointer[Struct_ITypeInfo2],Pointer[Pointer[Struct_ITypeLib]],Pointer[UInt]),(CLong)],
    ReleaseTypeAttr : StdCallCodePointer[(Pointer[Struct_ITypeInfo2],Pointer[Struct_tagTYPEATTR]),()],
    ReleaseFuncDesc : StdCallCodePointer[(Pointer[Struct_ITypeInfo2],Pointer[Struct_tagFUNCDESC]),()],
    ReleaseVarDesc : StdCallCodePointer[(Pointer[Struct_ITypeInfo2],Pointer[Struct_tagVARDESC]),()],
    GetTypeKind : StdCallCodePointer[(Pointer[Struct_ITypeInfo2],Pointer[Int]),(CLong)],
    GetTypeFlags : StdCallCodePointer[(Pointer[Struct_ITypeInfo2],Pointer[CULong]),(CLong)],
    GetFuncIndexOfMemId : StdCallCodePointer[(Pointer[Struct_ITypeInfo2],CLong,Int,Pointer[UInt]),(CLong)],
    GetVarIndexOfMemId : StdCallCodePointer[(Pointer[Struct_ITypeInfo2],CLong,Pointer[UInt]),(CLong)],
    GetCustData : StdCallCodePointer[(Pointer[Struct_ITypeInfo2],Pointer[Struct__GUID],Pointer[Struct_tagVARIANT]),(CLong)],
    GetFuncCustData : StdCallCodePointer[(Pointer[Struct_ITypeInfo2],UInt,Pointer[Struct__GUID],Pointer[Struct_tagVARIANT]),(CLong)],
    GetParamCustData : StdCallCodePointer[(Pointer[Struct_ITypeInfo2],UInt,UInt,Pointer[Struct__GUID],Pointer[Struct_tagVARIANT]),(CLong)],
    GetVarCustData : StdCallCodePointer[(Pointer[Struct_ITypeInfo2],UInt,Pointer[Struct__GUID],Pointer[Struct_tagVARIANT]),(CLong)],
    GetImplTypeCustData : StdCallCodePointer[(Pointer[Struct_ITypeInfo2],UInt,Pointer[Struct__GUID],Pointer[Struct_tagVARIANT]),(CLong)],
    GetDocumentation2 : StdCallCodePointer[(Pointer[Struct_ITypeInfo2],CLong,CULong,Pointer[Pointer[UShort]],Pointer[CULong],Pointer[Pointer[UShort]]),(CLong)],
    GetAllCustData : StdCallCodePointer[(Pointer[Struct_ITypeInfo2],Pointer[Struct_tagCUSTDATA]),(CLong)],
    GetAllFuncCustData : StdCallCodePointer[(Pointer[Struct_ITypeInfo2],UInt,Pointer[Struct_tagCUSTDATA]),(CLong)],
    GetAllParamCustData : StdCallCodePointer[(Pointer[Struct_ITypeInfo2],UInt,UInt,Pointer[Struct_tagCUSTDATA]),(CLong)],
    GetAllVarCustData : StdCallCodePointer[(Pointer[Struct_ITypeInfo2],UInt,Pointer[Struct_tagCUSTDATA]),(CLong)],
    GetAllImplTypeCustData : StdCallCodePointer[(Pointer[Struct_ITypeInfo2],UInt,Pointer[Struct_tagCUSTDATA]),(CLong)],
);

record Struct_ITypeLib (
    lpVtbl : Pointer[Struct_ITypeLibVtbl],
);

alias ITypeLib = Struct_ITypeLib;

alias ITypeLibVtbl = Struct_ITypeLibVtbl;

record Struct_ITypeLibVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_ITypeLib],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_ITypeLib]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_ITypeLib]),(CULong)],
    GetTypeInfoCount : StdCallCodePointer[(Pointer[Struct_ITypeLib]),(UInt)],
    GetTypeInfo : StdCallCodePointer[(Pointer[Struct_ITypeLib],UInt,Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetTypeInfoType : StdCallCodePointer[(Pointer[Struct_ITypeLib],UInt,Pointer[Int]),(CLong)],
    GetTypeInfoOfGuid : StdCallCodePointer[(Pointer[Struct_ITypeLib],Pointer[Struct__GUID],Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetLibAttr : StdCallCodePointer[(Pointer[Struct_ITypeLib],Pointer[Pointer[Struct_tagTLIBATTR]]),(CLong)],
    GetTypeComp : StdCallCodePointer[(Pointer[Struct_ITypeLib],Pointer[Pointer[Struct_ITypeComp]]),(CLong)],
    GetDocumentation : StdCallCodePointer[(Pointer[Struct_ITypeLib],Int,Pointer[Pointer[UShort]],Pointer[Pointer[UShort]],Pointer[CULong],Pointer[Pointer[UShort]]),(CLong)],
    IsName : StdCallCodePointer[(Pointer[Struct_ITypeLib],Pointer[UShort],CULong,Pointer[Int]),(CLong)],
    FindName : StdCallCodePointer[(Pointer[Struct_ITypeLib],Pointer[UShort],CULong,Pointer[Pointer[Struct_ITypeInfo]],Pointer[CLong],Pointer[UShort]),(CLong)],
    ReleaseTLibAttr : StdCallCodePointer[(Pointer[Struct_ITypeLib],Pointer[Struct_tagTLIBATTR]),()],
);

record Struct_ITypeLib2 (
    lpVtbl : Pointer[Struct_ITypeLib2Vtbl],
);

alias ITypeLib2 = Struct_ITypeLib2;

alias ITypeLib2Vtbl = Struct_ITypeLib2Vtbl;

record Struct_ITypeLib2Vtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_ITypeLib2],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_ITypeLib2]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_ITypeLib2]),(CULong)],
    GetTypeInfoCount : StdCallCodePointer[(Pointer[Struct_ITypeLib2]),(UInt)],
    GetTypeInfo : StdCallCodePointer[(Pointer[Struct_ITypeLib2],UInt,Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetTypeInfoType : StdCallCodePointer[(Pointer[Struct_ITypeLib2],UInt,Pointer[Int]),(CLong)],
    GetTypeInfoOfGuid : StdCallCodePointer[(Pointer[Struct_ITypeLib2],Pointer[Struct__GUID],Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetLibAttr : StdCallCodePointer[(Pointer[Struct_ITypeLib2],Pointer[Pointer[Struct_tagTLIBATTR]]),(CLong)],
    GetTypeComp : StdCallCodePointer[(Pointer[Struct_ITypeLib2],Pointer[Pointer[Struct_ITypeComp]]),(CLong)],
    GetDocumentation : StdCallCodePointer[(Pointer[Struct_ITypeLib2],Int,Pointer[Pointer[UShort]],Pointer[Pointer[UShort]],Pointer[CULong],Pointer[Pointer[UShort]]),(CLong)],
    IsName : StdCallCodePointer[(Pointer[Struct_ITypeLib2],Pointer[UShort],CULong,Pointer[Int]),(CLong)],
    FindName : StdCallCodePointer[(Pointer[Struct_ITypeLib2],Pointer[UShort],CULong,Pointer[Pointer[Struct_ITypeInfo]],Pointer[CLong],Pointer[UShort]),(CLong)],
    ReleaseTLibAttr : StdCallCodePointer[(Pointer[Struct_ITypeLib2],Pointer[Struct_tagTLIBATTR]),()],
    GetCustData : StdCallCodePointer[(Pointer[Struct_ITypeLib2],Pointer[Struct__GUID],Pointer[Struct_tagVARIANT]),(CLong)],
    GetLibStatistics : StdCallCodePointer[(Pointer[Struct_ITypeLib2],Pointer[CULong],Pointer[CULong]),(CLong)],
    GetDocumentation2 : StdCallCodePointer[(Pointer[Struct_ITypeLib2],Int,CULong,Pointer[Pointer[UShort]],Pointer[CULong],Pointer[Pointer[UShort]]),(CLong)],
    GetAllCustData : StdCallCodePointer[(Pointer[Struct_ITypeLib2],Pointer[Struct_tagCUSTDATA]),(CLong)],
);

record Struct_IErrorInfo (
    lpVtbl : Pointer[Struct_IErrorInfoVtbl],
);

alias IErrorInfo = Struct_IErrorInfo;

alias IErrorInfoVtbl = Struct_IErrorInfoVtbl;

record Struct_IErrorInfoVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IErrorInfo],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IErrorInfo]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IErrorInfo]),(CULong)],
    GetGUID : StdCallCodePointer[(Pointer[Struct_IErrorInfo],Pointer[Struct__GUID]),(CLong)],
    GetSource : StdCallCodePointer[(Pointer[Struct_IErrorInfo],Pointer[Pointer[UShort]]),(CLong)],
    GetDescription : StdCallCodePointer[(Pointer[Struct_IErrorInfo],Pointer[Pointer[UShort]]),(CLong)],
    GetHelpFile : StdCallCodePointer[(Pointer[Struct_IErrorInfo],Pointer[Pointer[UShort]]),(CLong)],
    GetHelpContext : StdCallCodePointer[(Pointer[Struct_IErrorInfo],Pointer[CULong]),(CLong)],
);

record Struct_ICreateErrorInfo (
    lpVtbl : Pointer[Struct_ICreateErrorInfoVtbl],
);

alias ICreateErrorInfo = Struct_ICreateErrorInfo;

alias ICreateErrorInfoVtbl = Struct_ICreateErrorInfoVtbl;

record Struct_ICreateErrorInfoVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_ICreateErrorInfo],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_ICreateErrorInfo]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_ICreateErrorInfo]),(CULong)],
    SetGUID : StdCallCodePointer[(Pointer[Struct_ICreateErrorInfo],Pointer[Struct__GUID]),(CLong)],
    SetSource : StdCallCodePointer[(Pointer[Struct_ICreateErrorInfo],Pointer[UShort]),(CLong)],
    SetDescription : StdCallCodePointer[(Pointer[Struct_ICreateErrorInfo],Pointer[UShort]),(CLong)],
    SetHelpFile : StdCallCodePointer[(Pointer[Struct_ICreateErrorInfo],Pointer[UShort]),(CLong)],
    SetHelpContext : StdCallCodePointer[(Pointer[Struct_ICreateErrorInfo],CULong),(CLong)],
);

record Struct_ISupportErrorInfo (
    lpVtbl : Pointer[Struct_ISupportErrorInfoVtbl],
);

alias ISupportErrorInfo = Struct_ISupportErrorInfo;

alias ISupportErrorInfoVtbl = Struct_ISupportErrorInfoVtbl;

record Struct_ISupportErrorInfoVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_ISupportErrorInfo],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_ISupportErrorInfo]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_ISupportErrorInfo]),(CULong)],
    InterfaceSupportsErrorInfo : StdCallCodePointer[(Pointer[Struct_ISupportErrorInfo],Pointer[Struct__GUID]),(CLong)],
);

record Struct_IRecordInfo (
    lpVtbl : Pointer[Struct_IRecordInfoVtbl],
);

alias IRecordInfo = Struct_IRecordInfo;

alias IRecordInfoVtbl = Struct_IRecordInfoVtbl;

record Struct_IRecordInfoVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IRecordInfo],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IRecordInfo]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IRecordInfo]),(CULong)],
    RecordInit : StdCallCodePointer[(Pointer[Struct_IRecordInfo],RawPointer),(CLong)],
    RecordClear : StdCallCodePointer[(Pointer[Struct_IRecordInfo],RawPointer),(CLong)],
    RecordCopy : StdCallCodePointer[(Pointer[Struct_IRecordInfo],RawPointer,RawPointer),(CLong)],
    GetGuid : StdCallCodePointer[(Pointer[Struct_IRecordInfo],Pointer[Struct__GUID]),(CLong)],
    GetName : StdCallCodePointer[(Pointer[Struct_IRecordInfo],Pointer[Pointer[UShort]]),(CLong)],
    GetSize : StdCallCodePointer[(Pointer[Struct_IRecordInfo],Pointer[CULong]),(CLong)],
    GetTypeInfo : StdCallCodePointer[(Pointer[Struct_IRecordInfo],Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetField : StdCallCodePointer[(Pointer[Struct_IRecordInfo],RawPointer,Pointer[UShort],Pointer[Struct_tagVARIANT]),(CLong)],
    GetFieldNoCopy : StdCallCodePointer[(Pointer[Struct_IRecordInfo],RawPointer,Pointer[UShort],Pointer[Struct_tagVARIANT],Pointer[RawPointer]),(CLong)],
    PutField : StdCallCodePointer[(Pointer[Struct_IRecordInfo],CULong,RawPointer,Pointer[UShort],Pointer[Struct_tagVARIANT]),(CLong)],
    PutFieldNoCopy : StdCallCodePointer[(Pointer[Struct_IRecordInfo],CULong,RawPointer,Pointer[UShort],Pointer[Struct_tagVARIANT]),(CLong)],
    GetFieldNames : StdCallCodePointer[(Pointer[Struct_IRecordInfo],Pointer[CULong],Pointer[Pointer[UShort]]),(CLong)],
    IsMatchingType : StdCallCodePointer[(Pointer[Struct_IRecordInfo],Pointer[Struct_IRecordInfo]),(Int)],
    RecordCreate : StdCallCodePointer[(Pointer[Struct_IRecordInfo]),(RawPointer)],
    RecordCreateCopy : StdCallCodePointer[(Pointer[Struct_IRecordInfo],RawPointer,Pointer[RawPointer]),(CLong)],
    RecordDestroy : StdCallCodePointer[(Pointer[Struct_IRecordInfo],RawPointer),(CLong)],
);

record Struct_ITypeMarshal (
    lpVtbl : Pointer[Struct_ITypeMarshalVtbl],
);

alias ITypeMarshal = Struct_ITypeMarshal;

alias ITypeMarshalVtbl = Struct_ITypeMarshalVtbl;

record Struct_ITypeMarshalVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_ITypeMarshal],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_ITypeMarshal]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_ITypeMarshal]),(CULong)],
    Size : StdCallCodePointer[(Pointer[Struct_ITypeMarshal],RawPointer,CULong,RawPointer,Pointer[CULong]),(CLong)],
    Marshal : StdCallCodePointer[(Pointer[Struct_ITypeMarshal],RawPointer,CULong,RawPointer,CULong,Pointer[CUChar],Pointer[CULong]),(CLong)],
    Unmarshal : StdCallCodePointer[(Pointer[Struct_ITypeMarshal],RawPointer,CULong,CULong,Pointer[CUChar],Pointer[CULong]),(CLong)],
    Free : StdCallCodePointer[(Pointer[Struct_ITypeMarshal],RawPointer),(CLong)],
);

alias REGKIND_DEFAULT = 0;
alias REGKIND_REGISTER = 1;
alias REGKIND_NONE = 2;

alias REGKIND = Int;

record Struct_tagPARAMDATA (
    szName : Pointer[UShort],
    vt : UShort,
);

alias PARAMDATA = Struct_tagPARAMDATA;

alias LPPARAMDATA = Pointer[Struct_tagPARAMDATA];

record Struct_tagMETHODDATA (
    szName : Pointer[UShort],
    ppdata : Pointer[PARAMDATA],
    dispid : CLong,
    iMeth : UInt,
    cc : CALLCONV,
    cArgs : UInt,
    wFlags : UShort,
    vtReturn : UShort,
);

alias METHODDATA = Struct_tagMETHODDATA;

alias LPMETHODDATA = Pointer[Struct_tagMETHODDATA];

record Struct_tagINTERFACEDATA (
    pmethdata : Pointer[METHODDATA],
    cMembers : UInt,
);

alias INTERFACEDATA = Struct_tagINTERFACEDATA;

alias LPINTERFACEDATA = Pointer[Struct_tagINTERFACEDATA];

record UnnamedStruct32 (
    st : SYSTEMTIME,
    wDayOfYear : UShort,
);

alias UDATE = UnnamedStruct32;

record UnnamedStruct33 (
    cDig : Int,
    dwInFlags : CULong,
    dwOutFlags : CULong,
    cchUsed : Int,
    nBaseShift : Int,
    nPwr10 : Int,
);

alias NUMPARSE = UnnamedStruct33;

external (stdcall) SysAllocString(
    argument0 : Pointer[UShort]) BSTR;

external (stdcall) SysReAllocString(
    argument0 : Pointer[BSTR],
    argument1 : Pointer[UShort]) Int;

external (stdcall) SysAllocStringLen(
    argument0 : Pointer[UShort],
    argument1 : UInt) BSTR;

external (stdcall) SysReAllocStringLen(
    argument0 : Pointer[BSTR],
    argument1 : Pointer[UShort],
    argument2 : UInt) Int;

external (stdcall) SysFreeString(
    argument0 : BSTR);

external (stdcall) SysStringLen(
    argument0 : BSTR) UInt;

external (stdcall) SysStringByteLen(
    argument0 : BSTR) UInt;

external (stdcall) SysAllocStringByteLen(
    argument0 : Pointer[CChar],
    argument1 : UInt) BSTR;

external (stdcall) DosDateTimeToVariantTime(
    argument0 : UShort,
    argument1 : UShort,
    argument2 : Pointer[Double]) Int;

external (stdcall) VariantTimeToDosDateTime(
    argument0 : Double,
    argument1 : Pointer[UShort],
    argument2 : Pointer[UShort]) Int;

external (stdcall) VariantTimeToSystemTime(
    argument0 : Double,
    argument1 : LPSYSTEMTIME) Int;

external (stdcall) SystemTimeToVariantTime(
    argument0 : LPSYSTEMTIME,
    argument1 : Pointer[Double]) Int;

external (stdcall) VarDateFromUdate(
    argument0 : Pointer[UDATE],
    argument1 : CULong,
    argument2 : Pointer[Double]) CLong;

external (stdcall) VarDateFromUdateEx(
    argument0 : Pointer[UDATE],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[Double]) CLong;

external (stdcall) VarUdateFromDate(
    argument0 : Double,
    argument1 : CULong,
    argument2 : Pointer[UDATE]) CLong;

external (stdcall) SafeArrayAllocDescriptor(
    argument0 : UInt,
    argument1 : Pointer[Pointer[SAFEARRAY]]) CLong;

external (stdcall) SafeArrayAllocData(
    argument0 : Pointer[SAFEARRAY]) CLong;

external (stdcall) SafeArrayCreate(
    argument0 : UShort,
    argument1 : UInt,
    argument2 : Pointer[SAFEARRAYBOUND]) Pointer[SAFEARRAY];

external (stdcall) SafeArrayDestroyDescriptor(
    argument0 : Pointer[SAFEARRAY]) CLong;

external (stdcall) SafeArrayDestroyData(
    argument0 : Pointer[SAFEARRAY]) CLong;

external (stdcall) SafeArrayDestroy(
    argument0 : Pointer[SAFEARRAY]) CLong;

external (stdcall) SafeArrayRedim(
    argument0 : Pointer[SAFEARRAY],
    argument1 : Pointer[SAFEARRAYBOUND]) CLong;

external (stdcall) SafeArrayGetDim(
    argument0 : Pointer[SAFEARRAY]) UInt;

external (stdcall) SafeArrayGetElemsize(
    argument0 : Pointer[SAFEARRAY]) UInt;

external (stdcall) SafeArrayGetUBound(
    argument0 : Pointer[SAFEARRAY],
    argument1 : UInt,
    argument2 : Pointer[CLong]) CLong;

external (stdcall) SafeArrayGetLBound(
    argument0 : Pointer[SAFEARRAY],
    argument1 : UInt,
    argument2 : Pointer[CLong]) CLong;

external (stdcall) SafeArrayLock(
    argument0 : Pointer[SAFEARRAY]) CLong;

external (stdcall) SafeArrayUnlock(
    argument0 : Pointer[SAFEARRAY]) CLong;

external (stdcall) SafeArrayAccessData(
    argument0 : Pointer[SAFEARRAY],
    argument1 : Pointer[RawPointer]) CLong;

external (stdcall) SafeArrayUnaccessData(
    argument0 : Pointer[SAFEARRAY]) CLong;

external (stdcall) SafeArrayGetElement(
    argument0 : Pointer[SAFEARRAY],
    argument1 : Pointer[CLong],
    argument2 : RawPointer) CLong;

external (stdcall) SafeArrayPutElement(
    argument0 : Pointer[SAFEARRAY],
    argument1 : Pointer[CLong],
    argument2 : RawPointer) CLong;

external (stdcall) SafeArrayCopy(
    argument0 : Pointer[SAFEARRAY],
    argument1 : Pointer[Pointer[SAFEARRAY]]) CLong;

external (stdcall) SafeArrayPtrOfIndex(
    argument0 : Pointer[SAFEARRAY],
    argument1 : Pointer[CLong],
    argument2 : Pointer[RawPointer]) CLong;

external (stdcall) SafeArrayCreateVector(
    argument0 : UShort,
    argument1 : CLong,
    argument2 : CULong) Pointer[SAFEARRAY];

external (stdcall) SafeArrayCreateVectorEx(
    argument0 : UShort,
    argument1 : CLong,
    argument2 : CULong,
    argument3 : LPVOID) Pointer[SAFEARRAY];

external (stdcall) SafeArrayAllocDescriptorEx(
    argument0 : UShort,
    argument1 : UInt,
    argument2 : Pointer[Pointer[SAFEARRAY]]) CLong;

external (stdcall) SafeArrayGetVartype(
    argument0 : Pointer[SAFEARRAY],
    argument1 : Pointer[UShort]) CLong;

external (stdcall) SafeArraySetRecordInfo(
    argument0 : Pointer[SAFEARRAY],
    argument1 : Pointer[IRecordInfo]) CLong;

external (stdcall) SafeArrayGetRecordInfo(
    argument0 : Pointer[SAFEARRAY],
    argument1 : Pointer[Pointer[IRecordInfo]]) CLong;

external (stdcall) SafeArraySetIID(
    argument0 : Pointer[SAFEARRAY],
    argument1 : Pointer[GUID]) CLong;

external (stdcall) SafeArrayGetIID(
    argument0 : Pointer[SAFEARRAY],
    argument1 : Pointer[GUID]) CLong;

external (stdcall) VariantInit(
    argument0 : Pointer[VARIANTARG]);

external (stdcall) VariantClear(
    argument0 : Pointer[VARIANTARG]) CLong;

external (stdcall) VariantCopy(
    argument0 : Pointer[VARIANTARG],
    argument1 : Pointer[VARIANTARG]) CLong;

external (stdcall) VariantCopyInd(
    argument0 : Pointer[VARIANT],
    argument1 : Pointer[VARIANTARG]) CLong;

external (stdcall) VariantChangeType(
    argument0 : Pointer[VARIANTARG],
    argument1 : Pointer[VARIANTARG],
    argument2 : UShort,
    argument3 : UShort) CLong;

external (stdcall) VariantChangeTypeEx(
    argument0 : Pointer[VARIANTARG],
    argument1 : Pointer[VARIANTARG],
    argument2 : CULong,
    argument3 : UShort,
    argument4 : UShort) CLong;

external (stdcall) VarUI1FromI2(
    argument0 : Short,
    argument1 : Pointer[CUChar]) CLong;

external (stdcall) VarUI1FromI4(
    argument0 : CLong,
    argument1 : Pointer[CUChar]) CLong;

external (stdcall) VarUI1FromR4(
    argument0 : Float,
    argument1 : Pointer[CUChar]) CLong;

external (stdcall) VarUI1FromR8(
    argument0 : Double,
    argument1 : Pointer[CUChar]) CLong;

external (stdcall) VarUI1FromCy(
    argument0 : CY,
    argument1 : Pointer[CUChar]) CLong;

external (stdcall) VarUI1FromDate(
    argument0 : Double,
    argument1 : Pointer[CUChar]) CLong;

external (stdcall) VarUI1FromStr(
    argument0 : Pointer[UShort],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[CUChar]) CLong;

external (stdcall) VarUI1FromDisp(
    argument0 : LPDISPATCH,
    argument1 : CULong,
    argument2 : Pointer[CUChar]) CLong;

external (stdcall) VarUI1FromBool(
    argument0 : Short,
    argument1 : Pointer[CUChar]) CLong;

external (stdcall) VarI2FromUI1(
    argument0 : CUChar,
    argument1 : Pointer[Short]) CLong;

external (stdcall) VarI2FromI4(
    argument0 : CLong,
    argument1 : Pointer[Short]) CLong;

external (stdcall) VarI2FromR4(
    argument0 : Float,
    argument1 : Pointer[Short]) CLong;

external (stdcall) VarI2FromR8(
    argument0 : Double,
    argument1 : Pointer[Short]) CLong;

external (stdcall) VarI2FromCy(
    cyIn : CY,
    argument1 : Pointer[Short]) CLong;

external (stdcall) VarI2FromDate(
    argument0 : Double,
    argument1 : Pointer[Short]) CLong;

external (stdcall) VarI2FromStr(
    argument0 : Pointer[UShort],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[Short]) CLong;

external (stdcall) VarI2FromDisp(
    argument0 : LPDISPATCH,
    argument1 : CULong,
    argument2 : Pointer[Short]) CLong;

external (stdcall) VarI2FromBool(
    argument0 : Short,
    argument1 : Pointer[Short]) CLong;

external (stdcall) VarI4FromUI1(
    argument0 : CUChar,
    argument1 : Pointer[CLong]) CLong;

external (stdcall) VarI4FromI2(
    argument0 : Short,
    argument1 : Pointer[CLong]) CLong;

external (stdcall) VarI4FromR4(
    argument0 : Float,
    argument1 : Pointer[CLong]) CLong;

external (stdcall) VarI4FromR8(
    argument0 : Double,
    argument1 : Pointer[CLong]) CLong;

external (stdcall) VarI4FromCy(
    argument0 : CY,
    argument1 : Pointer[CLong]) CLong;

external (stdcall) VarI4FromDate(
    argument0 : Double,
    argument1 : Pointer[CLong]) CLong;

external (stdcall) VarI4FromStr(
    argument0 : Pointer[UShort],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[CLong]) CLong;

external (stdcall) VarI4FromDisp(
    argument0 : LPDISPATCH,
    argument1 : CULong,
    argument2 : Pointer[CLong]) CLong;

external (stdcall) VarI4FromBool(
    argument0 : Short,
    argument1 : Pointer[CLong]) CLong;

external (stdcall) VarR4FromUI1(
    argument0 : CUChar,
    argument1 : Pointer[Float]) CLong;

external (stdcall) VarR4FromI2(
    argument0 : Short,
    argument1 : Pointer[Float]) CLong;

external (stdcall) VarR4FromI4(
    argument0 : CLong,
    argument1 : Pointer[Float]) CLong;

external (stdcall) VarR4FromR8(
    argument0 : Double,
    argument1 : Pointer[Float]) CLong;

external (stdcall) VarR4FromCy(
    argument0 : CY,
    argument1 : Pointer[Float]) CLong;

external (stdcall) VarR4FromDate(
    argument0 : Double,
    argument1 : Pointer[Float]) CLong;

external (stdcall) VarR4FromStr(
    argument0 : Pointer[UShort],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[Float]) CLong;

external (stdcall) VarR4FromDisp(
    argument0 : LPDISPATCH,
    argument1 : CULong,
    argument2 : Pointer[Float]) CLong;

external (stdcall) VarR4FromBool(
    argument0 : Short,
    argument1 : Pointer[Float]) CLong;

external (stdcall) VarR8FromUI1(
    argument0 : CUChar,
    argument1 : Pointer[Double]) CLong;

external (stdcall) VarR8FromI2(
    argument0 : Short,
    argument1 : Pointer[Double]) CLong;

external (stdcall) VarR8FromI4(
    argument0 : CLong,
    argument1 : Pointer[Double]) CLong;

external (stdcall) VarR8FromR4(
    argument0 : Float,
    argument1 : Pointer[Double]) CLong;

external (stdcall) VarR8FromCy(
    argument0 : CY,
    argument1 : Pointer[Double]) CLong;

external (stdcall) VarR8FromDate(
    argument0 : Double,
    argument1 : Pointer[Double]) CLong;

external (stdcall) VarR8FromStr(
    argument0 : Pointer[UShort],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[Double]) CLong;

external (stdcall) VarR8FromDisp(
    argument0 : LPDISPATCH,
    argument1 : CULong,
    argument2 : Pointer[Double]) CLong;

external (stdcall) VarR8FromBool(
    argument0 : Short,
    argument1 : Pointer[Double]) CLong;

external (stdcall) VarR8FromDec(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[Double]) CLong;

external (stdcall) VarDateFromUI1(
    argument0 : CUChar,
    argument1 : Pointer[Double]) CLong;

external (stdcall) VarDateFromI2(
    argument0 : Short,
    argument1 : Pointer[Double]) CLong;

external (stdcall) VarDateFromI4(
    argument0 : CLong,
    argument1 : Pointer[Double]) CLong;

external (stdcall) VarDateFromR4(
    argument0 : Float,
    argument1 : Pointer[Double]) CLong;

external (stdcall) VarDateFromR8(
    argument0 : Double,
    argument1 : Pointer[Double]) CLong;

external (stdcall) VarDateFromCy(
    argument0 : CY,
    argument1 : Pointer[Double]) CLong;

external (stdcall) VarDateFromStr(
    argument0 : Pointer[UShort],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[Double]) CLong;

external (stdcall) VarDateFromDisp(
    argument0 : LPDISPATCH,
    argument1 : CULong,
    argument2 : Pointer[Double]) CLong;

external (stdcall) VarDateFromBool(
    argument0 : Short,
    argument1 : Pointer[Double]) CLong;

external (stdcall) VarCyFromUI1(
    argument0 : CUChar,
    argument1 : Pointer[CY]) CLong;

external (stdcall) VarCyFromI2(
    argument0 : Short,
    argument1 : Pointer[CY]) CLong;

external (stdcall) VarCyFromI4(
    argument0 : CLong,
    argument1 : Pointer[CY]) CLong;

external (stdcall) VarCyFromR4(
    argument0 : Float,
    argument1 : Pointer[CY]) CLong;

external (stdcall) VarCyFromR8(
    argument0 : Double,
    argument1 : Pointer[CY]) CLong;

external (stdcall) VarCyFromDate(
    argument0 : Double,
    argument1 : Pointer[CY]) CLong;

external (stdcall) VarCyFromStr(
    argument0 : Pointer[UShort],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[CY]) CLong;

external (stdcall) VarCyFromDisp(
    argument0 : LPDISPATCH,
    argument1 : CULong,
    argument2 : Pointer[CY]) CLong;

external (stdcall) VarCyFromBool(
    argument0 : Short,
    argument1 : Pointer[CY]) CLong;

external (stdcall) VarBstrFromUI1(
    argument0 : CUChar,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[BSTR]) CLong;

external (stdcall) VarBstrFromI2(
    argument0 : Short,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[BSTR]) CLong;

external (stdcall) VarBstrFromI4(
    argument0 : CLong,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[BSTR]) CLong;

external (stdcall) VarBstrFromR4(
    argument0 : Float,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[BSTR]) CLong;

external (stdcall) VarBstrFromR8(
    argument0 : Double,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[BSTR]) CLong;

external (stdcall) VarBstrFromCy(
    argument0 : CY,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[BSTR]) CLong;

external (stdcall) VarBstrFromDate(
    argument0 : Double,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[BSTR]) CLong;

external (stdcall) VarBstrFromDisp(
    argument0 : LPDISPATCH,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[BSTR]) CLong;

external (stdcall) VarBstrFromBool(
    argument0 : Short,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[BSTR]) CLong;

external (stdcall) VarBoolFromUI1(
    argument0 : CUChar,
    argument1 : Pointer[Short]) CLong;

external (stdcall) VarBoolFromI2(
    argument0 : Short,
    argument1 : Pointer[Short]) CLong;

external (stdcall) VarBoolFromI4(
    argument0 : CLong,
    argument1 : Pointer[Short]) CLong;

external (stdcall) VarBoolFromR4(
    argument0 : Float,
    argument1 : Pointer[Short]) CLong;

external (stdcall) VarBoolFromR8(
    argument0 : Double,
    argument1 : Pointer[Short]) CLong;

external (stdcall) VarBoolFromDate(
    argument0 : Double,
    argument1 : Pointer[Short]) CLong;

external (stdcall) VarBoolFromCy(
    argument0 : CY,
    argument1 : Pointer[Short]) CLong;

external (stdcall) VarBoolFromStr(
    argument0 : Pointer[UShort],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[Short]) CLong;

external (stdcall) VarBoolFromDisp(
    argument0 : LPDISPATCH,
    argument1 : CULong,
    argument2 : Pointer[Short]) CLong;

external (stdcall) VarDecFromR8(
    argument0 : Double,
    argument1 : Pointer[DECIMAL]) CLong;

external (stdcall) LHashValOfNameSysA(
    argument0 : SYSKIND,
    argument1 : CULong,
    argument2 : Pointer[CChar]) CULong;

external (stdcall) LHashValOfNameSys(
    argument0 : SYSKIND,
    argument1 : CULong,
    argument2 : Pointer[UShort]) CULong;

external (stdcall) LoadTypeLib(
    argument0 : Pointer[UShort],
    argument1 : Pointer[LPTYPELIB]) CLong;

external (stdcall) LoadTypeLibEx(
    argument0 : LPCOLESTR,
    argument1 : REGKIND,
    argument2 : Pointer[LPTYPELIB]) CLong;

external (stdcall) LoadRegTypeLib(
    argument0 : Pointer[GUID],
    argument1 : UShort,
    argument2 : UShort,
    argument3 : CULong,
    argument4 : Pointer[LPTYPELIB]) CLong;

external (stdcall) QueryPathOfRegTypeLib(
    argument0 : Pointer[GUID],
    argument1 : UShort,
    argument2 : UShort,
    argument3 : CULong,
    argument4 : LPBSTR) CLong;

external (stdcall) RegisterTypeLib(
    argument0 : LPTYPELIB,
    argument1 : Pointer[UShort],
    argument2 : Pointer[UShort]) CLong;

external (stdcall) UnRegisterTypeLib(
    argument0 : Pointer[GUID],
    argument1 : UShort,
    argument2 : UShort,
    argument3 : CULong,
    argument4 : SYSKIND) CLong;

external (stdcall) CreateTypeLib(
    argument0 : SYSKIND,
    argument1 : Pointer[UShort],
    argument2 : Pointer[LPCREATETYPELIB]) CLong;

external (stdcall) DispGetParam(
    argument0 : Pointer[DISPPARAMS],
    argument1 : UInt,
    argument2 : UShort,
    argument3 : Pointer[VARIANT],
    argument4 : Pointer[UInt]) CLong;

external (stdcall) DispGetIDsOfNames(
    argument0 : LPTYPEINFO,
    argument1 : Pointer[Pointer[UShort]],
    argument2 : UInt,
    argument3 : Pointer[CLong]) CLong;

external (stdcall) DispInvoke(
    argument0 : RawPointer,
    argument1 : LPTYPEINFO,
    argument2 : CLong,
    argument3 : UShort,
    argument4 : Pointer[DISPPARAMS],
    argument5 : Pointer[VARIANT],
    argument6 : Pointer[EXCEPINFO],
    argument7 : Pointer[UInt]) CLong;

external (stdcall) CreateDispTypeInfo(
    argument0 : Pointer[INTERFACEDATA],
    argument1 : CULong,
    argument2 : Pointer[LPTYPEINFO]) CLong;

external (stdcall) CreateStdDispatch(
    argument0 : Pointer[IUnknown],
    argument1 : RawPointer,
    argument2 : LPTYPEINFO,
    argument3 : Pointer[Pointer[IUnknown]]) CLong;

external (stdcall) RegisterActiveObject(
    argument0 : Pointer[IUnknown],
    argument1 : Pointer[CLSID],
    argument2 : CULong,
    argument3 : Pointer[CULong]) CLong;

external (stdcall) RevokeActiveObject(
    argument0 : CULong,
    argument1 : RawPointer) CLong;

external (stdcall) GetActiveObject(
    argument0 : Pointer[CLSID],
    argument1 : RawPointer,
    argument2 : Pointer[Pointer[IUnknown]]) CLong;

external (stdcall) SetErrorInfo(
    argument0 : CULong,
    argument1 : LPERRORINFO) CLong;

external (stdcall) GetErrorInfo(
    argument0 : CULong,
    argument1 : Pointer[LPERRORINFO]) CLong;

external (stdcall) CreateErrorInfo(
    argument0 : Pointer[LPCREATEERRORINFO]) CLong;

external (stdcall) OaBuildVersion() CULong;

external (stdcall) VectorFromBstr(
    argument0 : BSTR,
    argument1 : Pointer[Pointer[SAFEARRAY]]) CLong;

external (stdcall) BstrFromVector(
    argument0 : Pointer[SAFEARRAY],
    argument1 : Pointer[BSTR]) CLong;

external (stdcall) VarParseNumFromStr(
    argument0 : Pointer[UShort],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[NUMPARSE],
    argument4 : Pointer[CUChar]) CLong;

external (stdcall) VarNumFromParseNum(
    argument0 : Pointer[NUMPARSE],
    argument1 : Pointer[CUChar],
    argument2 : CULong,
    argument3 : Pointer[VARIANT]) CLong;

external (stdcall) GetRecordInfoFromTypeInfo(
    argument0 : Pointer[ITypeInfo],
    argument1 : Pointer[Pointer[IRecordInfo]]) CLong;

external (stdcall) GetRecordInfoFromGuids(
    argument0 : Pointer[GUID],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : Pointer[GUID],
    argument5 : Pointer[Pointer[IRecordInfo]]) CLong;

external (stdcall) VarAdd(
    argument0 : LPVARIANT,
    argument1 : LPVARIANT,
    argument2 : LPVARIANT) CLong;

external (stdcall) VarSub(
    argument0 : LPVARIANT,
    argument1 : LPVARIANT,
    argument2 : LPVARIANT) CLong;

external (stdcall) VarMul(
    argument0 : LPVARIANT,
    argument1 : LPVARIANT,
    argument2 : LPVARIANT) CLong;

external (stdcall) VarDiv(
    argument0 : LPVARIANT,
    argument1 : LPVARIANT,
    argument2 : LPVARIANT) CLong;

external (stdcall) VarUI1FromI8(
    argument0 : Int64,
    argument1 : Pointer[CUChar]) CLong;

external (stdcall) VarUI1FromI1(
    argument0 : CChar,
    argument1 : Pointer[CUChar]) CLong;

external (stdcall) VarUI1FromUI2(
    argument0 : UShort,
    argument1 : Pointer[CUChar]) CLong;

external (stdcall) VarUI1FromUI4(
    argument0 : CULong,
    argument1 : Pointer[CUChar]) CLong;

external (stdcall) VarUI1FromUI8(
    argument0 : UInt64,
    argument1 : Pointer[CUChar]) CLong;

external (stdcall) VarUI1FromDec(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[CUChar]) CLong;

external (stdcall) VarI2FromI8(
    argument0 : Int64,
    argument1 : Pointer[Short]) CLong;

external (stdcall) VarI2FromI1(
    argument0 : CChar,
    argument1 : Pointer[Short]) CLong;

external (stdcall) VarI2FromUI2(
    argument0 : UShort,
    argument1 : Pointer[Short]) CLong;

external (stdcall) VarI2FromUI4(
    argument0 : CULong,
    argument1 : Pointer[Short]) CLong;

external (stdcall) VarI2FromUI8(
    argument0 : UInt64,
    argument1 : Pointer[Short]) CLong;

external (stdcall) VarI2FromDec(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[Short]) CLong;

external (stdcall) VarI4FromI8(
    argument0 : Int64,
    argument1 : Pointer[CLong]) CLong;

external (stdcall) VarI4FromI1(
    argument0 : CChar,
    argument1 : Pointer[CLong]) CLong;

external (stdcall) VarI4FromUI2(
    argument0 : UShort,
    argument1 : Pointer[CLong]) CLong;

external (stdcall) VarI4FromUI4(
    argument0 : CULong,
    argument1 : Pointer[CLong]) CLong;

external (stdcall) VarI4FromUI8(
    argument0 : UInt64,
    argument1 : Pointer[CLong]) CLong;

external (stdcall) VarI4FromDec(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[CLong]) CLong;

external (stdcall) VarI8FromUI1(
    argument0 : CUChar,
    argument1 : Pointer[Int64]) CLong;

external (stdcall) VarI8FromI2(
    argument0 : Short,
    argument1 : Pointer[Int64]) CLong;

external (stdcall) VarI8FromI4(
    argument0 : CLong,
    argument1 : Pointer[Int64]) CLong;

external (stdcall) VarI8FromR4(
    argument0 : Float,
    argument1 : Pointer[Int64]) CLong;

external (stdcall) VarI8FromR8(
    argument0 : Double,
    argument1 : Pointer[Int64]) CLong;

external (stdcall) VarI8FromDate(
    argument0 : Double,
    argument1 : Pointer[Int64]) CLong;

external (stdcall) VarI8FromStr(
    argument0 : Pointer[UShort],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[Int64]) CLong;

external (stdcall) VarI8FromBool(
    argument0 : Short,
    argument1 : Pointer[Int64]) CLong;

external (stdcall) VarI8FromI1(
    argument0 : CChar,
    argument1 : Pointer[Int64]) CLong;

external (stdcall) VarI8FromUI2(
    argument0 : UShort,
    argument1 : Pointer[Int64]) CLong;

external (stdcall) VarI8FromUI4(
    argument0 : CULong,
    argument1 : Pointer[Int64]) CLong;

external (stdcall) VarI8FromUI8(
    argument0 : UInt64,
    argument1 : Pointer[Int64]) CLong;

external (stdcall) VarI8FromDec(
    pdecIn : Pointer[DECIMAL],
    argument1 : Pointer[Int64]) CLong;

external (stdcall) VarI8FromInt(
    intIn : Int,
    argument1 : Pointer[Int64]) CLong;

external (stdcall) VarI8FromCy(
    argument0 : CY,
    argument1 : Pointer[Int64]) CLong;

external (stdcall) VarI8FromDisp(
    argument0 : Pointer[IDispatch],
    argument1 : CULong,
    argument2 : Pointer[Int64]) CLong;

external (stdcall) VarR4FromI8(
    argument0 : Int64,
    argument1 : Pointer[Float]) CLong;

external (stdcall) VarR4FromI1(
    argument0 : CChar,
    argument1 : Pointer[Float]) CLong;

external (stdcall) VarR4FromUI2(
    argument0 : UShort,
    argument1 : Pointer[Float]) CLong;

external (stdcall) VarR4FromUI4(
    argument0 : CULong,
    argument1 : Pointer[Float]) CLong;

external (stdcall) VarR4FromUI8(
    argument0 : UInt64,
    argument1 : Pointer[Float]) CLong;

external (stdcall) VarR4FromDec(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[Float]) CLong;

external (stdcall) VarR8FromI8(
    argument0 : Int64,
    argument1 : Pointer[Double]) CLong;

external (stdcall) VarR8FromI1(
    argument0 : CChar,
    argument1 : Pointer[Double]) CLong;

external (stdcall) VarR8FromUI2(
    argument0 : UShort,
    argument1 : Pointer[Double]) CLong;

external (stdcall) VarR8FromUI4(
    argument0 : CULong,
    argument1 : Pointer[Double]) CLong;

external (stdcall) VarR8FromUI8(
    argument0 : UInt64,
    argument1 : Pointer[Double]) CLong;

external (stdcall) VarDateFromI8(
    argument0 : Int64,
    argument1 : Pointer[Double]) CLong;

external (stdcall) VarDateFromI1(
    argument0 : CChar,
    argument1 : Pointer[Double]) CLong;

external (stdcall) VarDateFromUI2(
    argument0 : UShort,
    argument1 : Pointer[Double]) CLong;

external (stdcall) VarDateFromUI4(
    argument0 : CULong,
    argument1 : Pointer[Double]) CLong;

external (stdcall) VarDateFromUI8(
    argument0 : UInt64,
    argument1 : Pointer[Double]) CLong;

external (stdcall) VarDateFromDec(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[Double]) CLong;

external (stdcall) VarCyFromI8(
    argument0 : Int64,
    argument1 : Pointer[CY]) CLong;

external (stdcall) VarCyFromI1(
    argument0 : CChar,
    argument1 : Pointer[CY]) CLong;

external (stdcall) VarCyFromUI2(
    argument0 : UShort,
    argument1 : Pointer[CY]) CLong;

external (stdcall) VarCyFromUI4(
    argument0 : CULong,
    argument1 : Pointer[CY]) CLong;

external (stdcall) VarCyFromUI8(
    argument0 : UInt64,
    argument1 : Pointer[CY]) CLong;

external (stdcall) VarCyFromDec(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[CY]) CLong;

external (stdcall) VarBstrFromI8(
    argument0 : Int64,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[BSTR]) CLong;

external (stdcall) VarBstrFromI1(
    argument0 : CChar,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[BSTR]) CLong;

external (stdcall) VarBstrFromUI2(
    argument0 : UShort,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[BSTR]) CLong;

external (stdcall) VarBstrFromUI8(
    argument0 : UInt64,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[BSTR]) CLong;

external (stdcall) VarBstrFromUI4(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[BSTR]) CLong;

external (stdcall) VarBstrFromDec(
    argument0 : Pointer[DECIMAL],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[BSTR]) CLong;

external (stdcall) VarBoolFromI8(
    argument0 : Int64,
    argument1 : Pointer[Short]) CLong;

external (stdcall) VarBoolFromI1(
    argument0 : CChar,
    argument1 : Pointer[Short]) CLong;

external (stdcall) VarBoolFromUI2(
    argument0 : UShort,
    argument1 : Pointer[Short]) CLong;

external (stdcall) VarBoolFromUI4(
    argument0 : CULong,
    argument1 : Pointer[Short]) CLong;

external (stdcall) VarBoolFromUI8(
    argument0 : UInt64,
    argument1 : Pointer[Short]) CLong;

external (stdcall) VarBoolFromDec(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[Short]) CLong;

external (stdcall) VarI1FromUI1(
    argument0 : CUChar,
    argument1 : Pointer[CChar]) CLong;

external (stdcall) VarI1FromI2(
    argument0 : Short,
    argument1 : Pointer[CChar]) CLong;

external (stdcall) VarI1FromI4(
    argument0 : CLong,
    argument1 : Pointer[CChar]) CLong;

external (stdcall) VarI1FromI8(
    argument0 : Int64,
    argument1 : Pointer[CChar]) CLong;

external (stdcall) VarI1FromR4(
    argument0 : Float,
    argument1 : Pointer[CChar]) CLong;

external (stdcall) VarI1FromR8(
    argument0 : Double,
    argument1 : Pointer[CChar]) CLong;

external (stdcall) VarI1FromDate(
    argument0 : Double,
    argument1 : Pointer[CChar]) CLong;

external (stdcall) VarI1FromStr(
    argument0 : Pointer[UShort],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[CChar]) CLong;

external (stdcall) VarI1FromBool(
    argument0 : Short,
    argument1 : Pointer[CChar]) CLong;

external (stdcall) VarI1FromUI2(
    argument0 : UShort,
    argument1 : Pointer[CChar]) CLong;

external (stdcall) VarI1FromUI4(
    argument0 : CULong,
    argument1 : Pointer[CChar]) CLong;

external (stdcall) VarI1FromUI8(
    argument0 : UInt64,
    argument1 : Pointer[CChar]) CLong;

external (stdcall) VarI1FromCy(
    argument0 : CY,
    argument1 : Pointer[CChar]) CLong;

external (stdcall) VarI1FromDec(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[CChar]) CLong;

external (stdcall) VarI1FromDisp(
    argument0 : Pointer[IDispatch],
    argument1 : CULong,
    argument2 : Pointer[CChar]) CLong;

external (stdcall) VarUI2FromUI1(
    argument0 : CUChar,
    argument1 : Pointer[UShort]) CLong;

external (stdcall) VarUI2FromI2(
    argument0 : Short,
    argument1 : Pointer[UShort]) CLong;

external (stdcall) VarUI2FromI4(
    argument0 : CLong,
    argument1 : Pointer[UShort]) CLong;

external (stdcall) VarUI2FromI8(
    argument0 : Int64,
    argument1 : Pointer[UShort]) CLong;

external (stdcall) VarUI2FromR4(
    argument0 : Float,
    argument1 : Pointer[UShort]) CLong;

external (stdcall) VarUI2FromR8(
    argument0 : Double,
    argument1 : Pointer[UShort]) CLong;

external (stdcall) VarUI2FromDate(
    argument0 : Double,
    argument1 : Pointer[UShort]) CLong;

external (stdcall) VarUI2FromStr(
    argument0 : Pointer[UShort],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[UShort]) CLong;

external (stdcall) VarUI2FromBool(
    argument0 : Short,
    argument1 : Pointer[UShort]) CLong;

external (stdcall) VarUI2FromI1(
    argument0 : CChar,
    argument1 : Pointer[UShort]) CLong;

external (stdcall) VarUI2FromUI4(
    argument0 : CULong,
    argument1 : Pointer[UShort]) CLong;

external (stdcall) VarUI2FromUI8(
    argument0 : UInt64,
    argument1 : Pointer[UShort]) CLong;

external (stdcall) VarUI2FromCy(
    argument0 : CY,
    argument1 : Pointer[UShort]) CLong;

external (stdcall) VarUI2FromDec(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[UShort]) CLong;

external (stdcall) VarUI2FromDisp(
    argument0 : Pointer[IDispatch],
    argument1 : CULong,
    argument2 : Pointer[UShort]) CLong;

external (stdcall) VarUI4FromStr(
    argument0 : Pointer[UShort],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[CULong]) CLong;

external (stdcall) VarUI4FromUI1(
    argument0 : CUChar,
    argument1 : Pointer[CULong]) CLong;

external (stdcall) VarUI4FromI2(
    argument0 : Short,
    argument1 : Pointer[CULong]) CLong;

external (stdcall) VarUI4FromI4(
    argument0 : CLong,
    argument1 : Pointer[CULong]) CLong;

external (stdcall) VarUI4FromI8(
    argument0 : Int64,
    argument1 : Pointer[CULong]) CLong;

external (stdcall) VarUI4FromR4(
    argument0 : Float,
    argument1 : Pointer[CULong]) CLong;

external (stdcall) VarUI4FromR8(
    argument0 : Double,
    argument1 : Pointer[CULong]) CLong;

external (stdcall) VarUI4FromDate(
    argument0 : Double,
    argument1 : Pointer[CULong]) CLong;

external (stdcall) VarUI4FromBool(
    argument0 : Short,
    argument1 : Pointer[CULong]) CLong;

external (stdcall) VarUI4FromI1(
    argument0 : CChar,
    argument1 : Pointer[CULong]) CLong;

external (stdcall) VarUI4FromUI2(
    argument0 : UShort,
    argument1 : Pointer[CULong]) CLong;

external (stdcall) VarUI4FromUI8(
    argument0 : UInt64,
    argument1 : Pointer[CULong]) CLong;

external (stdcall) VarUI4FromCy(
    argument0 : CY,
    argument1 : Pointer[CULong]) CLong;

external (stdcall) VarUI4FromDec(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[CULong]) CLong;

external (stdcall) VarUI4FromDisp(
    argument0 : Pointer[IDispatch],
    argument1 : CULong,
    argument2 : Pointer[CULong]) CLong;

external (stdcall) VarUI8FromUI1(
    argument0 : CUChar,
    argument1 : Pointer[UInt64]) CLong;

external (stdcall) VarUI8FromI2(
    argument0 : Short,
    argument1 : Pointer[UInt64]) CLong;

external (stdcall) VarUI8FromI4(
    argument0 : CLong,
    argument1 : Pointer[UInt64]) CLong;

external (stdcall) VarUI8FromI8(
    argument0 : Int64,
    argument1 : Pointer[UInt64]) CLong;

external (stdcall) VarUI8FromR4(
    argument0 : Float,
    argument1 : Pointer[UInt64]) CLong;

external (stdcall) VarUI8FromR8(
    argument0 : Double,
    argument1 : Pointer[UInt64]) CLong;

external (stdcall) VarUI8FromDate(
    argument0 : Double,
    argument1 : Pointer[UInt64]) CLong;

external (stdcall) VarUI8FromStr(
    argument0 : Pointer[UShort],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[UInt64]) CLong;

external (stdcall) VarUI8FromBool(
    argument0 : Short,
    argument1 : Pointer[UInt64]) CLong;

external (stdcall) VarUI8FromI1(
    argument0 : CChar,
    argument1 : Pointer[UInt64]) CLong;

external (stdcall) VarUI8FromUI2(
    argument0 : UShort,
    argument1 : Pointer[UInt64]) CLong;

external (stdcall) VarUI8FromUI4(
    argument0 : CULong,
    argument1 : Pointer[UInt64]) CLong;

external (stdcall) VarUI8FromDec(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[UInt64]) CLong;

external (stdcall) VarUI8FromInt(
    argument0 : Int,
    argument1 : Pointer[UInt64]) CLong;

external (stdcall) VarUI8FromCy(
    argument0 : CY,
    argument1 : Pointer[UInt64]) CLong;

external (stdcall) VarUI8FromDisp(
    argument0 : Pointer[IDispatch],
    argument1 : CULong,
    argument2 : Pointer[UInt64]) CLong;

external (stdcall) VarDecFromUI1(
    argument0 : CUChar,
    argument1 : Pointer[DECIMAL]) CLong;

external (stdcall) VarDecFromI2(
    argument0 : Short,
    argument1 : Pointer[DECIMAL]) CLong;

external (stdcall) VarDecFromI4(
    argument0 : CLong,
    argument1 : Pointer[DECIMAL]) CLong;

external (stdcall) VarDecFromI8(
    argument0 : Int64,
    argument1 : Pointer[DECIMAL]) CLong;

external (stdcall) VarDecFromR4(
    argument0 : Float,
    argument1 : Pointer[DECIMAL]) CLong;

external (stdcall) VarDecFromDate(
    argument0 : Double,
    argument1 : Pointer[DECIMAL]) CLong;

external (stdcall) VarDecFromStr(
    argument0 : Pointer[UShort],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[DECIMAL]) CLong;

external (stdcall) VarDecFromBool(
    argument0 : Short,
    argument1 : Pointer[DECIMAL]) CLong;

external (stdcall) VarDecFromI1(
    argument0 : CChar,
    argument1 : Pointer[DECIMAL]) CLong;

external (stdcall) VarDecFromUI2(
    argument0 : UShort,
    argument1 : Pointer[DECIMAL]) CLong;

external (stdcall) VarDecFromUI4(
    argument0 : CULong,
    argument1 : Pointer[DECIMAL]) CLong;

external (stdcall) VarDecFromUI8(
    argument0 : UInt64,
    argument1 : Pointer[DECIMAL]) CLong;

external (stdcall) VarDecFromCy(
    argument0 : CY,
    argument1 : Pointer[DECIMAL]) CLong;

external (stdcall) VarDecFromDisp(
    argument0 : Pointer[IDispatch],
    argument1 : CULong,
    argument2 : Pointer[DECIMAL]) CLong;

external (stdcall) VarDecNeg(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[DECIMAL]) CLong;

external (stdcall) VarR4CmpR8(
    argument0 : Float,
    argument1 : Double) CLong;

external (stdcall) VarR8Pow(
    argument0 : Double,
    argument1 : Double,
    argument2 : Pointer[Double]) CLong;

external (stdcall) VarR8Round(
    argument0 : Double,
    argument1 : Int,
    argument2 : Pointer[Double]) CLong;

external (stdcall) VarDecAbs(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[DECIMAL]) CLong;

external (stdcall) VarDecAdd(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[DECIMAL],
    argument2 : Pointer[DECIMAL]) CLong;

external (stdcall) VarDecCmp(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[DECIMAL]) CLong;

external (stdcall) VarDecCmpR8(
    argument0 : Pointer[DECIMAL],
    argument1 : Double) CLong;

external (stdcall) VarDecDiv(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[DECIMAL],
    argument2 : Pointer[DECIMAL]) CLong;

external (stdcall) VarDecFix(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[DECIMAL]) CLong;

external (stdcall) VarDecInt(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[DECIMAL]) CLong;

external (stdcall) VarDecMul(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[DECIMAL],
    argument2 : Pointer[DECIMAL]) CLong;

external (stdcall) VarDecRound(
    argument0 : Pointer[DECIMAL],
    argument1 : Int,
    argument2 : Pointer[DECIMAL]) CLong;

external (stdcall) VarDecSub(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[DECIMAL],
    argument2 : Pointer[DECIMAL]) CLong;

external (stdcall) VarCyAbs(
    argument0 : CY,
    argument1 : Pointer[CY]) CLong;

external (stdcall) VarCyAdd(
    argument0 : CY,
    argument1 : CY,
    argument2 : Pointer[CY]) CLong;

external (stdcall) VarCyCmp(
    argument0 : CY,
    argument1 : CY) CLong;

external (stdcall) VarCyCmpR8(
    argument0 : CY,
    argument1 : Double) CLong;

external (stdcall) VarCyFix(
    argument0 : CY,
    argument1 : Pointer[CY]) CLong;

external (stdcall) VarCyInt(
    argument0 : CY,
    argument1 : Pointer[CY]) CLong;

external (stdcall) VarCyMul(
    argument0 : CY,
    argument1 : CY,
    argument2 : Pointer[CY]) CLong;

external (stdcall) VarCyMulI4(
    argument0 : CY,
    argument1 : CLong,
    argument2 : Pointer[CY]) CLong;

external (stdcall) VarCyMulI8(
    argument0 : CY,
    argument1 : Int64,
    argument2 : Pointer[CY]) CLong;

external (stdcall) VarCyNeg(
    argument0 : CY,
    argument1 : Pointer[CY]) CLong;

external (stdcall) VarCyRound(
    argument0 : CY,
    argument1 : Int,
    argument2 : Pointer[CY]) CLong;

external (stdcall) VarCySub(
    argument0 : CY,
    argument1 : CY,
    argument2 : Pointer[CY]) CLong;

external (stdcall) VarAnd(
    argument0 : LPVARIANT,
    argument1 : LPVARIANT,
    argument2 : LPVARIANT) CLong;

external (stdcall) VarCat(
    argument0 : LPVARIANT,
    argument1 : LPVARIANT,
    argument2 : LPVARIANT) CLong;

external (stdcall) VarEqv(
    argument0 : LPVARIANT,
    argument1 : LPVARIANT,
    argument2 : LPVARIANT) CLong;

external (stdcall) VarIdiv(
    argument0 : LPVARIANT,
    argument1 : LPVARIANT,
    argument2 : LPVARIANT) CLong;

external (stdcall) VarImp(
    argument0 : LPVARIANT,
    argument1 : LPVARIANT,
    argument2 : LPVARIANT) CLong;

external (stdcall) VarMod(
    argument0 : LPVARIANT,
    argument1 : LPVARIANT,
    argument2 : LPVARIANT) CLong;

external (stdcall) VarOr(
    argument0 : LPVARIANT,
    argument1 : LPVARIANT,
    argument2 : LPVARIANT) CLong;

external (stdcall) VarPow(
    argument0 : LPVARIANT,
    argument1 : LPVARIANT,
    argument2 : LPVARIANT) CLong;

external (stdcall) VarXor(
    argument0 : LPVARIANT,
    argument1 : LPVARIANT,
    argument2 : LPVARIANT) CLong;

external (stdcall) VarAbs(
    argument0 : LPVARIANT,
    argument1 : LPVARIANT) CLong;

external (stdcall) VarFix(
    argument0 : LPVARIANT,
    argument1 : LPVARIANT) CLong;

external (stdcall) VarInt(
    argument0 : LPVARIANT,
    argument1 : LPVARIANT) CLong;

external (stdcall) VarNeg(
    argument0 : LPVARIANT,
    argument1 : LPVARIANT) CLong;

external (stdcall) VarNot(
    argument0 : LPVARIANT,
    argument1 : LPVARIANT) CLong;

external (stdcall) VarRound(
    argument0 : LPVARIANT,
    argument1 : Int,
    argument2 : LPVARIANT) CLong;

external (stdcall) VarCmp(
    argument0 : LPVARIANT,
    argument1 : LPVARIANT,
    argument2 : CULong,
    argument3 : CULong) CLong;

external (stdcall) VarBstrCmp(
    argument0 : BSTR,
    argument1 : BSTR,
    argument2 : CULong,
    argument3 : CULong) CLong;

external (stdcall) VarBstrCat(
    argument0 : BSTR,
    argument1 : BSTR,
    argument2 : Pointer[BSTR]) CLong;

alias LPPARSEDISPLAYNAME = Pointer[Struct_IParseDisplayName];

alias LPOLECONTAINER = Pointer[Struct_IOleContainer];

alias LPOLECLIENTSITE = Pointer[Struct_IOleClientSite];

alias LPOLEOBJECT = Pointer[Struct_IOleObject];

alias LPDROPTARGET = Pointer[Struct_IDropTarget];

alias LPDROPSOURCE = Pointer[Struct_IDropSource];

alias LPENUMOLEUNDOUNITS = OpaquePointer;

alias LPENUMOLEVERB = Pointer[Struct_IEnumOLEVERB];

alias LPOLEWINDOW = Pointer[Struct_IOleWindow];

alias LPOLEINPLACEUIWINDOW = Pointer[Struct_IOleInPlaceUIWindow];

alias LPOLEINPLACEACTIVEOBJECT = Pointer[Struct_IOleInPlaceActiveObject];

alias LPOLEINPLACEFRAME = Pointer[Struct_IOleInPlaceFrame];

alias LPOLEADVISEHOLDER = Pointer[Struct_IOleAdviseHolder];

alias LPVIEWOBJECT = Pointer[Struct_IViewObject];

alias LPVIEWOBJECT2 = Pointer[Struct_IViewObject2];

alias LPOLECACHE = Pointer[Struct_IOleCache];

alias LPOLECACHE2 = Pointer[Struct_IOleCache2];

alias LPOLECACHECONTROL = Pointer[Struct_IOleCacheControl];

alias BINDSPEED_INDEFINITE = 1;
alias BINDSPEED_MODERATE = 2;
alias BINDSPEED_IMMEDIATE = 3;

alias BINDSPEED = Int;

alias OLEWHICHMK_CONTAINER = 1;
alias OLEWHICHMK_OBJREL = 2;
alias OLEWHICHMK_OBJFULL = 3;

alias OLEWHICHMK = Int;

alias OLEGETMONIKER_ONLYIFTHERE = 1;
alias OLEGETMONIKER_FORCEASSIGN = 2;
alias OLEGETMONIKER_UNASSIGN = 3;
alias OLEGETMONIKER_TEMPFORUSER = 4;

alias OLEGETMONIKER = Int;

alias USERCLASSTYPE_FULL = 1;
alias USERCLASSTYPE_SHORT = 2;
alias USERCLASSTYPE_APPNAME = 3;

alias USERCLASSTYPE = Int;

alias DROPEFFECT_NONE = 0;
alias DROPEFFECT_COPY = 1;
alias DROPEFFECT_MOVE = 2;
alias DROPEFFECT_LINK = 4;
alias DROPEFFECT_SCROLL = 2147483648;

alias DROPEFFECT = Int;

record Struct_tagOleMenuGroupWidths (
    width : Array[CLong,6],
);

alias OLEMENUGROUPWIDTHS = Struct_tagOleMenuGroupWidths;

alias LPOLEMENUGROUPWIDTHS = Pointer[Struct_tagOleMenuGroupWidths];

alias HOLEMENU = HGLOBAL;

alias OLECLOSE_SAVEIFDIRTY = 0;
alias OLECLOSE_NOSAVE = 1;
alias OLECLOSE_PROMPTSAVE = 2;

alias OLECLOSE = Int;

record Struct_tagOLEVERB (
    lVerb : CLong,
    lpszVerbName : LPWSTR,
    fuFlags : CULong,
    grfAttribs : CULong,
);

alias OLEVERB = Struct_tagOLEVERB;

alias LPOLEVERB = Pointer[Struct_tagOLEVERB];

alias BORDERWIDTHS = RECT;

alias LPBORDERWIDTHS = LPRECT;

alias LPCBORDERWIDTHS = LPCRECT;

record Struct_tagOIFI (
    cb : UInt,
    fMDIApp : Int,
    hwndFrame : HWND,
    haccel : HACCEL,
    cAccelEntries : UInt,
);

alias OLEINPLACEFRAMEINFO = Struct_tagOIFI;

alias LPOLEINPLACEFRAMEINFO = Pointer[Struct_tagOIFI];

record Struct_IEnumOLEVERB (
    lpVtbl : Pointer[Struct_IEnumOLEVERBVtbl],
);

alias IEnumOLEVERB = Struct_IEnumOLEVERB;

alias IEnumOLEVERBVtbl = Struct_IEnumOLEVERBVtbl;

record Struct_IEnumOLEVERBVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IEnumOLEVERB],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IEnumOLEVERB]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IEnumOLEVERB]),(CULong)],
    Next : StdCallCodePointer[(Pointer[Struct_IEnumOLEVERB],CULong,Pointer[Struct_tagOLEVERB],Pointer[CULong]),(CLong)],
    Skip : StdCallCodePointer[(Pointer[Struct_IEnumOLEVERB],CULong),(CLong)],
    Reset : StdCallCodePointer[(Pointer[Struct_IEnumOLEVERB]),(CLong)],
    Clone : StdCallCodePointer[(Pointer[Struct_IEnumOLEVERB],Pointer[Pointer[Struct_IEnumOLEVERB]]),(CLong)],
);

alias IEnumOleVerb = IEnumOLEVERB;

record Struct_IParseDisplayName (
    lpVtbl : Pointer[Struct_IParseDisplayNameVtbl],
);

alias IParseDisplayName = Struct_IParseDisplayName;

alias IParseDisplayNameVtbl = Struct_IParseDisplayNameVtbl;

record Struct_IParseDisplayNameVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IParseDisplayName],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IParseDisplayName]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IParseDisplayName]),(CULong)],
    ParseDisplayName : StdCallCodePointer[(Pointer[Struct_IParseDisplayName],Pointer[Struct_IBindCtx],Pointer[UShort],Pointer[CULong],Pointer[Pointer[Struct_IMoniker]]),(CLong)],
);

record Struct_IOleContainer (
    lpVtbl : Pointer[Struct_IOleContainerVtbl],
);

alias IOleContainer = Struct_IOleContainer;

alias IOleContainerVtbl = Struct_IOleContainerVtbl;

record Struct_IOleContainerVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IOleContainer],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IOleContainer]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IOleContainer]),(CULong)],
    ParseDisplayName : StdCallCodePointer[(Pointer[Struct_IOleContainer],Pointer[Struct_IBindCtx],Pointer[UShort],Pointer[CULong],Pointer[Pointer[Struct_IMoniker]]),(CLong)],
    EnumObjects : StdCallCodePointer[(Pointer[Struct_IOleContainer],CULong,Pointer[Pointer[Struct_IEnumUnknown]]),(CLong)],
    LockContainer : StdCallCodePointer[(Pointer[Struct_IOleContainer],Int),(CLong)],
);

record Struct_IOleItemContainer (
    lpVtbl : Pointer[Struct_IOleItemContainerVtbl],
);

alias IOleItemContainer = Struct_IOleItemContainer;

alias IOleItemContainerVtbl = Struct_IOleItemContainerVtbl;

record Struct_IOleItemContainerVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IOleItemContainer],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IOleItemContainer]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IOleItemContainer]),(CULong)],
    ParseDisplayName : StdCallCodePointer[(Pointer[Struct_IOleItemContainer],Pointer[Struct_IBindCtx],Pointer[UShort],Pointer[CULong],Pointer[Pointer[Struct_IMoniker]]),(CLong)],
    EnumObjects : StdCallCodePointer[(Pointer[Struct_IOleItemContainer],CULong,Pointer[Pointer[Struct_IEnumUnknown]]),(CLong)],
    LockContainer : StdCallCodePointer[(Pointer[Struct_IOleItemContainer],Int),(CLong)],
    GetObjectA : StdCallCodePointer[(Pointer[Struct_IOleItemContainer],Pointer[UShort],CULong,Pointer[Struct_IBindCtx],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    GetObjectStorage : StdCallCodePointer[(Pointer[Struct_IOleItemContainer],Pointer[UShort],Pointer[Struct_IBindCtx],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    IsRunning : StdCallCodePointer[(Pointer[Struct_IOleItemContainer],Pointer[UShort]),(CLong)],
);

record Struct_IOleClientSite (
    lpVtbl : Pointer[Struct_IOleClientSiteVtbl],
);

alias IOleClientSite = Struct_IOleClientSite;

alias IOleClientSiteVtbl = Struct_IOleClientSiteVtbl;

record Struct_IOleClientSiteVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IOleClientSite],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IOleClientSite]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IOleClientSite]),(CULong)],
    SaveObject : StdCallCodePointer[(Pointer[Struct_IOleClientSite]),(CLong)],
    GetMoniker : StdCallCodePointer[(Pointer[Struct_IOleClientSite],CULong,CULong,Pointer[Pointer[Struct_IMoniker]]),(CLong)],
    GetContainer : StdCallCodePointer[(Pointer[Struct_IOleClientSite],Pointer[Pointer[Struct_IOleContainer]]),(CLong)],
    ShowObject : StdCallCodePointer[(Pointer[Struct_IOleClientSite]),(CLong)],
    OnShowWindow : StdCallCodePointer[(Pointer[Struct_IOleClientSite],Int),(CLong)],
    RequestNewObjectLayout : StdCallCodePointer[(Pointer[Struct_IOleClientSite]),(CLong)],
);

record Struct_IOleObject (
    lpVtbl : Pointer[Struct_IOleObjectVtbl],
);

alias IOleObject = Struct_IOleObject;

alias IOleObjectVtbl = Struct_IOleObjectVtbl;

record Struct_IOleObjectVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IOleObject],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IOleObject]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IOleObject]),(CULong)],
    SetClientSite : StdCallCodePointer[(Pointer[Struct_IOleObject],Pointer[Struct_IOleClientSite]),(CLong)],
    GetClientSite : StdCallCodePointer[(Pointer[Struct_IOleObject],Pointer[Pointer[Struct_IOleClientSite]]),(CLong)],
    SetHostNames : StdCallCodePointer[(Pointer[Struct_IOleObject],Pointer[UShort],Pointer[UShort]),(CLong)],
    Close : StdCallCodePointer[(Pointer[Struct_IOleObject],CULong),(CLong)],
    SetMoniker : StdCallCodePointer[(Pointer[Struct_IOleObject],CULong,Pointer[Struct_IMoniker]),(CLong)],
    GetMoniker : StdCallCodePointer[(Pointer[Struct_IOleObject],CULong,CULong,Pointer[Pointer[Struct_IMoniker]]),(CLong)],
    InitFromData : StdCallCodePointer[(Pointer[Struct_IOleObject],Pointer[Struct_IDataObject],Int,CULong),(CLong)],
    GetClipboardData : StdCallCodePointer[(Pointer[Struct_IOleObject],CULong,Pointer[Pointer[Struct_IDataObject]]),(CLong)],
    DoVerb : StdCallCodePointer[(Pointer[Struct_IOleObject],CLong,Pointer[Struct_tagMSG],Pointer[Struct_IOleClientSite],CLong,Pointer[Struct_HWND__],Pointer[Struct_tagRECT]),(CLong)],
    EnumVerbs : StdCallCodePointer[(Pointer[Struct_IOleObject],Pointer[Pointer[Struct_IEnumOLEVERB]]),(CLong)],
    Update : StdCallCodePointer[(Pointer[Struct_IOleObject]),(CLong)],
    IsUpToDate : StdCallCodePointer[(Pointer[Struct_IOleObject]),(CLong)],
    GetUserClassID : StdCallCodePointer[(Pointer[Struct_IOleObject],Pointer[Struct__GUID]),(CLong)],
    GetUserType : StdCallCodePointer[(Pointer[Struct_IOleObject],CULong,Pointer[Pointer[UShort]]),(CLong)],
    SetExtent : StdCallCodePointer[(Pointer[Struct_IOleObject],CULong,Pointer[Struct_tagSIZE]),(CLong)],
    GetExtent : StdCallCodePointer[(Pointer[Struct_IOleObject],CULong,Pointer[Struct_tagSIZE]),(CLong)],
    Advise : StdCallCodePointer[(Pointer[Struct_IOleObject],Pointer[Struct_IAdviseSink],Pointer[CULong]),(CLong)],
    Unadvise : StdCallCodePointer[(Pointer[Struct_IOleObject],CULong),(CLong)],
    EnumAdvise : StdCallCodePointer[(Pointer[Struct_IOleObject],Pointer[Pointer[Struct_IEnumSTATDATA]]),(CLong)],
    GetMiscStatus : StdCallCodePointer[(Pointer[Struct_IOleObject],CULong,Pointer[CULong]),(CLong)],
    SetColorScheme : StdCallCodePointer[(Pointer[Struct_IOleObject],Pointer[Struct_tagLOGPALETTE]),(CLong)],
);

record Struct_IOleWindow (
    lpVtbl : Pointer[Struct_IOleWindowVtbl],
);

alias IOleWindow = Struct_IOleWindow;

alias IOleWindowVtbl = Struct_IOleWindowVtbl;

record Struct_IOleWindowVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IOleWindow],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IOleWindow]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IOleWindow]),(CULong)],
    GetWindow : StdCallCodePointer[(Pointer[Struct_IOleWindow],Pointer[Pointer[Struct_HWND__]]),(CLong)],
    ContextSensitiveHelp : StdCallCodePointer[(Pointer[Struct_IOleWindow],Int),(CLong)],
);

record Struct_IOleInPlaceUIWindow (
    lpVtbl : Pointer[Struct_IOleInPlaceUIWindowVtbl],
);

alias IOleInPlaceUIWindow = Struct_IOleInPlaceUIWindow;

alias IOleInPlaceUIWindowVtbl = Struct_IOleInPlaceUIWindowVtbl;

record Struct_IOleInPlaceUIWindowVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IOleInPlaceUIWindow],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IOleInPlaceUIWindow]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IOleInPlaceUIWindow]),(CULong)],
    GetWindow : StdCallCodePointer[(Pointer[Struct_IOleInPlaceUIWindow],Pointer[Pointer[Struct_HWND__]]),(CLong)],
    ContextSensitiveHelp : StdCallCodePointer[(Pointer[Struct_IOleInPlaceUIWindow],Int),(CLong)],
    GetBorder : StdCallCodePointer[(Pointer[Struct_IOleInPlaceUIWindow],Pointer[Struct_tagRECT]),(CLong)],
    RequestBorderSpace : StdCallCodePointer[(Pointer[Struct_IOleInPlaceUIWindow],Pointer[Struct_tagRECT]),(CLong)],
    SetBorderSpace : StdCallCodePointer[(Pointer[Struct_IOleInPlaceUIWindow],Pointer[Struct_tagRECT]),(CLong)],
    SetActiveObject : StdCallCodePointer[(Pointer[Struct_IOleInPlaceUIWindow],Pointer[Struct_IOleInPlaceActiveObject],Pointer[UShort]),(CLong)],
);

record Struct_IOleInPlaceObject (
    lpVtbl : Pointer[Struct_IOleInPlaceObjectVtbl],
);

alias IOleInPlaceObject = Struct_IOleInPlaceObject;

alias IOleInPlaceObjectVtbl = Struct_IOleInPlaceObjectVtbl;

record Struct_IOleInPlaceObjectVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IOleInPlaceObject],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IOleInPlaceObject]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IOleInPlaceObject]),(CULong)],
    GetWindow : StdCallCodePointer[(Pointer[Struct_IOleInPlaceObject],Pointer[Pointer[Struct_HWND__]]),(CLong)],
    ContextSensitiveHelp : StdCallCodePointer[(Pointer[Struct_IOleInPlaceObject],Int),(CLong)],
    InPlaceDeactivate : StdCallCodePointer[(Pointer[Struct_IOleInPlaceObject]),(CLong)],
    UIDeactivate : StdCallCodePointer[(Pointer[Struct_IOleInPlaceObject]),(CLong)],
    SetObjectRects : StdCallCodePointer[(Pointer[Struct_IOleInPlaceObject],Pointer[Struct_tagRECT],Pointer[Struct_tagRECT]),(CLong)],
    ReactivateAndUndo : StdCallCodePointer[(Pointer[Struct_IOleInPlaceObject]),(CLong)],
);

record Struct_IOleInPlaceActiveObject (
    lpVtbl : Pointer[Struct_IOleInPlaceActiveObjectVtbl],
);

alias IOleInPlaceActiveObject = Struct_IOleInPlaceActiveObject;

alias IOleInPlaceActiveObjectVtbl = Struct_IOleInPlaceActiveObjectVtbl;

record Struct_IOleInPlaceActiveObjectVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IOleInPlaceActiveObject],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IOleInPlaceActiveObject]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IOleInPlaceActiveObject]),(CULong)],
    GetWindow : StdCallCodePointer[(Pointer[Struct_IOleInPlaceActiveObject],Pointer[Pointer[Struct_HWND__]]),(CLong)],
    ContextSensitiveHelp : StdCallCodePointer[(Pointer[Struct_IOleInPlaceActiveObject],Int),(CLong)],
    TranslateAcceleratorA : StdCallCodePointer[(Pointer[Struct_IOleInPlaceActiveObject],Pointer[Struct_tagMSG]),(CLong)],
    OnFrameWindowActivate : StdCallCodePointer[(Pointer[Struct_IOleInPlaceActiveObject],Int),(CLong)],
    OnDocWindowActivate : StdCallCodePointer[(Pointer[Struct_IOleInPlaceActiveObject],Int),(CLong)],
    ResizeBorder : StdCallCodePointer[(Pointer[Struct_IOleInPlaceActiveObject],Pointer[Struct_tagRECT],Pointer[Struct_IOleInPlaceUIWindow],Int),(CLong)],
    EnableModeless : StdCallCodePointer[(Pointer[Struct_IOleInPlaceActiveObject],Int),(CLong)],
);

record Struct_IOleInPlaceFrame (
    lpVtbl : Pointer[Struct_IOleInPlaceFrameVtbl],
);

alias IOleInPlaceFrame = Struct_IOleInPlaceFrame;

alias IOleInPlaceFrameVtbl = Struct_IOleInPlaceFrameVtbl;

record Struct_IOleInPlaceFrameVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IOleInPlaceFrame],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IOleInPlaceFrame]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IOleInPlaceFrame]),(CULong)],
    GetWindow : StdCallCodePointer[(Pointer[Struct_IOleInPlaceFrame],Pointer[Pointer[Struct_HWND__]]),(CLong)],
    ContextSensitiveHelp : StdCallCodePointer[(Pointer[Struct_IOleInPlaceFrame],Int),(CLong)],
    GetBorder : StdCallCodePointer[(Pointer[Struct_IOleInPlaceFrame],Pointer[Struct_tagRECT]),(CLong)],
    RequestBorderSpace : StdCallCodePointer[(Pointer[Struct_IOleInPlaceFrame],Pointer[Struct_tagRECT]),(CLong)],
    SetBorderSpace : StdCallCodePointer[(Pointer[Struct_IOleInPlaceFrame],Pointer[Struct_tagRECT]),(CLong)],
    SetActiveObject : StdCallCodePointer[(Pointer[Struct_IOleInPlaceFrame],Pointer[Struct_IOleInPlaceActiveObject],Pointer[UShort]),(CLong)],
    InsertMenus : StdCallCodePointer[(Pointer[Struct_IOleInPlaceFrame],Pointer[Struct_HMENU__],Pointer[Struct_tagOleMenuGroupWidths]),(CLong)],
    SetMenu : StdCallCodePointer[(Pointer[Struct_IOleInPlaceFrame],Pointer[Struct_HMENU__],RawPointer,Pointer[Struct_HWND__]),(CLong)],
    RemoveMenus : StdCallCodePointer[(Pointer[Struct_IOleInPlaceFrame],Pointer[Struct_HMENU__]),(CLong)],
    SetStatusText : StdCallCodePointer[(Pointer[Struct_IOleInPlaceFrame],Pointer[UShort]),(CLong)],
    EnableModeless : StdCallCodePointer[(Pointer[Struct_IOleInPlaceFrame],Int),(CLong)],
    TranslateAcceleratorA : StdCallCodePointer[(Pointer[Struct_IOleInPlaceFrame],Pointer[Struct_tagMSG],UShort),(CLong)],
);

record Struct_IOleInPlaceSite (
    lpVtbl : Pointer[Struct_IOleInPlaceSiteVtbl],
);

alias IOleInPlaceSite = Struct_IOleInPlaceSite;

alias IOleInPlaceSiteVtbl = Struct_IOleInPlaceSiteVtbl;

record Struct_IOleInPlaceSiteVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IOleInPlaceSite],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IOleInPlaceSite]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IOleInPlaceSite]),(CULong)],
    GetWindow : StdCallCodePointer[(Pointer[Struct_IOleInPlaceSite],Pointer[Pointer[Struct_HWND__]]),(CLong)],
    ContextSensitiveHelp : StdCallCodePointer[(Pointer[Struct_IOleInPlaceSite],Int),(CLong)],
    CanInPlaceActivate : StdCallCodePointer[(Pointer[Struct_IOleInPlaceSite]),(CLong)],
    OnInPlaceActivate : StdCallCodePointer[(Pointer[Struct_IOleInPlaceSite]),(CLong)],
    OnUIActivate : StdCallCodePointer[(Pointer[Struct_IOleInPlaceSite]),(CLong)],
    GetWindowContext : StdCallCodePointer[(Pointer[Struct_IOleInPlaceSite],Pointer[Pointer[Struct_IOleInPlaceFrame]],Pointer[Pointer[Struct_IOleInPlaceUIWindow]],Pointer[Struct_tagRECT],Pointer[Struct_tagRECT],Pointer[Struct_tagOIFI]),(CLong)],
    Scroll : StdCallCodePointer[(Pointer[Struct_IOleInPlaceSite],Struct_tagSIZE),(CLong)],
    OnUIDeactivate : StdCallCodePointer[(Pointer[Struct_IOleInPlaceSite],Int),(CLong)],
    OnInPlaceDeactivate : StdCallCodePointer[(Pointer[Struct_IOleInPlaceSite]),(CLong)],
    DiscardUndoState : StdCallCodePointer[(Pointer[Struct_IOleInPlaceSite]),(CLong)],
    DeactivateAndUndo : StdCallCodePointer[(Pointer[Struct_IOleInPlaceSite]),(CLong)],
    OnPosRectChange : StdCallCodePointer[(Pointer[Struct_IOleInPlaceSite],Pointer[Struct_tagRECT]),(CLong)],
);

record Struct_IOleAdviseHolder (
    lpVtbl : Pointer[Struct_IOleAdviseHolderVtbl],
);

alias IOleAdviseHolder = Struct_IOleAdviseHolder;

alias IOleAdviseHolderVtbl = Struct_IOleAdviseHolderVtbl;

record Struct_IOleAdviseHolderVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IOleAdviseHolder],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IOleAdviseHolder]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IOleAdviseHolder]),(CULong)],
    Advise : StdCallCodePointer[(Pointer[Struct_IOleAdviseHolder],Pointer[Struct_IAdviseSink],Pointer[CULong]),(CLong)],
    Unadvise : StdCallCodePointer[(Pointer[Struct_IOleAdviseHolder],CULong),(CLong)],
    EnumAdvise : StdCallCodePointer[(Pointer[Struct_IOleAdviseHolder],Pointer[Pointer[Struct_IEnumSTATDATA]]),(CLong)],
    SendOnRename : StdCallCodePointer[(Pointer[Struct_IOleAdviseHolder],Pointer[Struct_IMoniker]),(CLong)],
    SendOnSave : StdCallCodePointer[(Pointer[Struct_IOleAdviseHolder]),(CLong)],
    SendOnClose : StdCallCodePointer[(Pointer[Struct_IOleAdviseHolder]),(CLong)],
);

record Struct_IDropSource (
    lpVtbl : Pointer[Struct_IDropSourceVtbl],
);

alias IDropSource = Struct_IDropSource;

alias IDropSourceVtbl = Struct_IDropSourceVtbl;

record Struct_IDropSourceVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IDropSource],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IDropSource]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IDropSource]),(CULong)],
    QueryContinueDrag : StdCallCodePointer[(Pointer[Struct_IDropSource],Int,CULong),(CLong)],
    GiveFeedback : StdCallCodePointer[(Pointer[Struct_IDropSource],CULong),(CLong)],
);

record Struct_IDropTarget (
    lpVtbl : Pointer[Struct_IDropTargetVtbl],
);

alias IDropTarget = Struct_IDropTarget;

alias IDropTargetVtbl = Struct_IDropTargetVtbl;

record Struct_IDropTargetVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IDropTarget],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IDropTarget]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IDropTarget]),(CULong)],
    DragEnter : StdCallCodePointer[(Pointer[Struct_IDropTarget],Pointer[Struct_IDataObject],CULong,Struct_tagPOINT,Pointer[CULong]),(CLong)],
    DragOver : StdCallCodePointer[(Pointer[Struct_IDropTarget],CULong,Struct_tagPOINT,Pointer[CULong]),(CLong)],
    DragLeave : StdCallCodePointer[(Pointer[Struct_IDropTarget]),(CLong)],
    Drop : StdCallCodePointer[(Pointer[Struct_IDropTarget],Pointer[Struct_IDataObject],CULong,Struct_tagPOINT,Pointer[CULong]),(CLong)],
);

alias __IView_pfncont = StdCallCodePointer[(CULong),(Int)];

record Struct_IViewObject (
    lpVtbl : Pointer[Struct_IViewObjectVtbl],
);

alias IViewObject = Struct_IViewObject;

alias IViewObjectVtbl = Struct_IViewObjectVtbl;

record Struct_IViewObjectVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IViewObject],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IViewObject]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IViewObject]),(CULong)],
    Draw : StdCallCodePointer[(Pointer[Struct_IViewObject],CULong,CLong,RawPointer,Pointer[Struct_tagDVTARGETDEVICE],Pointer[Struct_HDC__],Pointer[Struct_HDC__],Pointer[Struct_tagRECTL],Pointer[Struct_tagRECTL],StdCallCodePointer[(CULong),(Int)],CULong),(CLong)],
    GetColorSet : StdCallCodePointer[(Pointer[Struct_IViewObject],CULong,CLong,RawPointer,Pointer[Struct_tagDVTARGETDEVICE],Pointer[Struct_HDC__],Pointer[Pointer[Struct_tagLOGPALETTE]]),(CLong)],
    Freeze : StdCallCodePointer[(Pointer[Struct_IViewObject],CULong,CLong,RawPointer,Pointer[CULong]),(CLong)],
    Unfreeze : StdCallCodePointer[(Pointer[Struct_IViewObject],CULong),(CLong)],
    SetAdvise : StdCallCodePointer[(Pointer[Struct_IViewObject],CULong,CULong,Pointer[Struct_IAdviseSink]),(CLong)],
    GetAdvise : StdCallCodePointer[(Pointer[Struct_IViewObject],Pointer[CULong],Pointer[CULong],Pointer[Pointer[Struct_IAdviseSink]]),(CLong)],
);

record Struct_IViewObject2 (
    lpVtbl : Pointer[Struct_IViewObject2Vtbl],
);

alias IViewObject2 = Struct_IViewObject2;

alias IViewObject2Vtbl = Struct_IViewObject2Vtbl;

record Struct_IViewObject2Vtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IViewObject2],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IViewObject2]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IViewObject2]),(CULong)],
    Draw : StdCallCodePointer[(Pointer[Struct_IViewObject2],CULong,CLong,RawPointer,Pointer[Struct_tagDVTARGETDEVICE],Pointer[Struct_HDC__],Pointer[Struct_HDC__],Pointer[Struct_tagRECTL],Pointer[Struct_tagRECTL],StdCallCodePointer[(CULong),(Int)],CULong),(CLong)],
    GetColorSet : StdCallCodePointer[(Pointer[Struct_IViewObject2],CULong,CLong,RawPointer,Pointer[Struct_tagDVTARGETDEVICE],Pointer[Struct_HDC__],Pointer[Pointer[Struct_tagLOGPALETTE]]),(CLong)],
    Freeze : StdCallCodePointer[(Pointer[Struct_IViewObject2],CULong,CLong,RawPointer,Pointer[CULong]),(CLong)],
    Unfreeze : StdCallCodePointer[(Pointer[Struct_IViewObject2],CULong),(CLong)],
    SetAdvise : StdCallCodePointer[(Pointer[Struct_IViewObject2],CULong,CULong,Pointer[Struct_IAdviseSink]),(CLong)],
    GetAdvise : StdCallCodePointer[(Pointer[Struct_IViewObject2],Pointer[CULong],Pointer[CULong],Pointer[Pointer[Struct_IAdviseSink]]),(CLong)],
    GetExtent : StdCallCodePointer[(Pointer[Struct_IViewObject2],CULong,CLong,Pointer[Struct_tagDVTARGETDEVICE],Pointer[Struct_tagSIZE]),(CLong)],
);

record Struct_IOleCache (
    lpVtbl : Pointer[Struct_IOleCacheVtbl],
);

alias IOleCache = Struct_IOleCache;

alias IOleCacheVtbl = Struct_IOleCacheVtbl;

record Struct_IOleCacheVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IOleCache],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IOleCache]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IOleCache]),(CULong)],
    Cache : StdCallCodePointer[(Pointer[Struct_IOleCache],Pointer[Struct_tagFORMATETC],CULong,Pointer[CULong]),(CLong)],
    Uncache : StdCallCodePointer[(Pointer[Struct_IOleCache],CULong),(CLong)],
    EnumCache : StdCallCodePointer[(Pointer[Struct_IOleCache],Pointer[Pointer[Struct_IEnumSTATDATA]]),(CLong)],
    InitCache : StdCallCodePointer[(Pointer[Struct_IOleCache],Pointer[Struct_IDataObject]),(CLong)],
    SetData : StdCallCodePointer[(Pointer[Struct_IOleCache],Pointer[Struct_tagFORMATETC],Pointer[Struct_tagSTGMEDIUM],Int),(CLong)],
);

record Struct_IOleCache2 (
    lpVtbl : Pointer[Struct_IOleCache2Vtbl],
);

alias IOleCache2 = Struct_IOleCache2;

alias IOleCache2Vtbl = Struct_IOleCache2Vtbl;

record Struct_IOleCache2Vtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IOleCache2],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IOleCache2]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IOleCache2]),(CULong)],
    Cache : StdCallCodePointer[(Pointer[Struct_IOleCache2],Pointer[Struct_tagFORMATETC],CULong,Pointer[CULong]),(CLong)],
    Uncache : StdCallCodePointer[(Pointer[Struct_IOleCache2],CULong),(CLong)],
    EnumCache : StdCallCodePointer[(Pointer[Struct_IOleCache2],Pointer[Pointer[Struct_IEnumSTATDATA]]),(CLong)],
    InitCache : StdCallCodePointer[(Pointer[Struct_IOleCache2],Pointer[Struct_IDataObject]),(CLong)],
    SetData : StdCallCodePointer[(Pointer[Struct_IOleCache2],Pointer[Struct_tagFORMATETC],Pointer[Struct_tagSTGMEDIUM],Int),(CLong)],
    UpdateCache : StdCallCodePointer[(Pointer[Struct_IOleCache2],Pointer[Struct_IDataObject],CULong,RawPointer),(CLong)],
    DiscardCache : StdCallCodePointer[(Pointer[Struct_IOleCache2],CULong),(CLong)],
);

record Struct_IOleCacheControl (
    lpVtbl : Pointer[Struct_IOleCacheControlVtbl],
);

alias IOleCacheControl = Struct_IOleCacheControl;

alias IOleCacheControlVtbl = Struct_IOleCacheControlVtbl;

record Struct_IOleCacheControlVtbl (
    QueryInterface : StdCallCodePointer[(Pointer[Struct_IOleCacheControl],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : StdCallCodePointer[(Pointer[Struct_IOleCacheControl]),(CULong)],
    Release : StdCallCodePointer[(Pointer[Struct_IOleCacheControl]),(CULong)],
    OnRun : StdCallCodePointer[(Pointer[Struct_IOleCacheControl],Pointer[Struct_IDataObject]),(CLong)],
    OnStop : StdCallCodePointer[(Pointer[Struct_IOleCacheControl]),(CLong)],
);

alias LPOLESTREAMVTBL = Pointer[Struct__OLESTREAMVTBL];

record Struct__OLESTREAM (
    lpstbl : LPOLESTREAMVTBL,
);

alias OLESTREAM = Struct__OLESTREAM;

alias LPOLESTREAM = Pointer[Struct__OLESTREAM];

record Struct__OLESTREAMVTBL (
    Get : StdCallCodePointer[(Pointer[Struct__OLESTREAM],RawPointer,CULong),(CULong)],
    Put : StdCallCodePointer[(Pointer[Struct__OLESTREAM],RawPointer,CULong),(CULong)],
);

alias OLESTREAMVTBL = Struct__OLESTREAMVTBL;

external (stdcall) OleBuildVersion() CULong;

external (stdcall) ReadClassStg(
    argument0 : LPSTORAGE,
    argument1 : Pointer[CLSID]) CLong;

external (stdcall) WriteClassStg(
    argument0 : LPSTORAGE,
    argument1 : Pointer[CLSID]) CLong;

external (stdcall) ReadClassStm(
    argument0 : LPSTREAM,
    argument1 : Pointer[CLSID]) CLong;

external (stdcall) WriteClassStm(
    argument0 : LPSTREAM,
    argument1 : Pointer[CLSID]) CLong;

external (stdcall) WriteFmtUserTypeStg(
    argument0 : LPSTORAGE,
    argument1 : UShort,
    argument2 : LPOLESTR) CLong;

external (stdcall) ReadFmtUserTypeStg(
    argument0 : LPSTORAGE,
    argument1 : Pointer[UShort],
    argument2 : Pointer[LPOLESTR]) CLong;

external (stdcall) OleInitialize(
    argument0 : PVOID) CLong;

external (stdcall) OleUninitialize();

external (stdcall) OleQueryLinkFromData(
    argument0 : LPDATAOBJECT) CLong;

external (stdcall) OleQueryCreateFromData(
    argument0 : LPDATAOBJECT) CLong;

external (stdcall) OleCreate(
    argument0 : Pointer[CLSID],
    argument1 : Pointer[IID],
    argument2 : CULong,
    argument3 : LPFORMATETC,
    argument4 : LPOLECLIENTSITE,
    argument5 : LPSTORAGE,
    argument6 : Pointer[PVOID]) CLong;

external (stdcall) OleCreateFromData(
    argument0 : LPDATAOBJECT,
    argument1 : Pointer[IID],
    argument2 : CULong,
    argument3 : LPFORMATETC,
    argument4 : LPOLECLIENTSITE,
    argument5 : LPSTORAGE,
    argument6 : Pointer[PVOID]) CLong;

external (stdcall) OleCreateLinkFromData(
    argument0 : LPDATAOBJECT,
    argument1 : Pointer[IID],
    argument2 : CULong,
    argument3 : LPFORMATETC,
    argument4 : LPOLECLIENTSITE,
    argument5 : LPSTORAGE,
    argument6 : Pointer[PVOID]) CLong;

external (stdcall) OleCreateStaticFromData(
    argument0 : LPDATAOBJECT,
    argument1 : Pointer[IID],
    argument2 : CULong,
    argument3 : LPFORMATETC,
    argument4 : LPOLECLIENTSITE,
    argument5 : LPSTORAGE,
    argument6 : Pointer[PVOID]) CLong;

external (stdcall) OleCreateLink(
    argument0 : LPMONIKER,
    argument1 : Pointer[IID],
    argument2 : CULong,
    argument3 : LPFORMATETC,
    argument4 : LPOLECLIENTSITE,
    argument5 : LPSTORAGE,
    argument6 : Pointer[PVOID]) CLong;

external (stdcall) OleCreateLinkToFile(
    argument0 : LPCOLESTR,
    argument1 : Pointer[IID],
    argument2 : CULong,
    argument3 : LPFORMATETC,
    argument4 : LPOLECLIENTSITE,
    argument5 : LPSTORAGE,
    argument6 : Pointer[PVOID]) CLong;

external (stdcall) OleCreateFromFile(
    argument0 : Pointer[CLSID],
    argument1 : LPCOLESTR,
    argument2 : Pointer[IID],
    argument3 : CULong,
    argument4 : LPFORMATETC,
    argument5 : LPOLECLIENTSITE,
    argument6 : LPSTORAGE,
    argument7 : Pointer[PVOID]) CLong;

external (stdcall) OleLoad(
    argument0 : LPSTORAGE,
    argument1 : Pointer[IID],
    argument2 : LPOLECLIENTSITE,
    argument3 : Pointer[PVOID]) CLong;

external (stdcall) OleSave(
    argument0 : LPPERSISTSTORAGE,
    argument1 : LPSTORAGE,
    argument2 : Int) CLong;

external (stdcall) OleLoadFromStream(
    argument0 : LPSTREAM,
    argument1 : Pointer[IID],
    argument2 : Pointer[PVOID]) CLong;

external (stdcall) OleSaveToStream(
    argument0 : LPPERSISTSTREAM,
    argument1 : LPSTREAM) CLong;

external (stdcall) OleSetContainedObject(
    argument0 : LPUNKNOWN,
    argument1 : Int) CLong;

external (stdcall) OleNoteObjectVisible(
    argument0 : LPUNKNOWN,
    argument1 : Int) CLong;

external (stdcall) RegisterDragDrop(
    argument0 : HWND,
    argument1 : LPDROPTARGET) CLong;

external (stdcall) RevokeDragDrop(
    argument0 : HWND) CLong;

external (stdcall) DoDragDrop(
    argument0 : LPDATAOBJECT,
    argument1 : LPDROPSOURCE,
    argument2 : CULong,
    argument3 : PDWORD) CLong;

external (stdcall) OleSetClipboard(
    argument0 : LPDATAOBJECT) CLong;

external (stdcall) OleGetClipboard(
    argument0 : Pointer[LPDATAOBJECT]) CLong;

external (stdcall) OleFlushClipboard() CLong;

external (stdcall) OleIsCurrentClipboard(
    argument0 : LPDATAOBJECT) CLong;

external (stdcall) OleCreateMenuDescriptor(
    argument0 : HMENU,
    argument1 : LPOLEMENUGROUPWIDTHS) HOLEMENU;

external (stdcall) OleSetMenuDescriptor(
    argument0 : HOLEMENU,
    argument1 : HWND,
    argument2 : HWND,
    argument3 : LPOLEINPLACEFRAME,
    argument4 : LPOLEINPLACEACTIVEOBJECT) CLong;

external (stdcall) OleDestroyMenuDescriptor(
    argument0 : HOLEMENU) CLong;

external (stdcall) OleTranslateAccelerator(
    argument0 : LPOLEINPLACEFRAME,
    argument1 : LPOLEINPLACEFRAMEINFO,
    argument2 : LPMSG) CLong;

external (stdcall) OleDuplicateData(
    argument0 : HANDLE,
    argument1 : UShort,
    argument2 : UInt) HANDLE;

external (stdcall) OleDraw(
    argument0 : LPUNKNOWN,
    argument1 : CULong,
    argument2 : HDC,
    argument3 : LPCRECT) CLong;

external (stdcall) OleRun(
    argument0 : LPUNKNOWN) CLong;

external (stdcall) OleIsRunning(
    argument0 : LPOLEOBJECT) Int;

external (stdcall) OleLockRunning(
    argument0 : LPUNKNOWN,
    argument1 : Int,
    argument2 : Int) CLong;

external (stdcall) ReleaseStgMedium(
    argument0 : LPSTGMEDIUM);

external (stdcall) CreateOleAdviseHolder(
    argument0 : Pointer[LPOLEADVISEHOLDER]) CLong;

external (stdcall) OleCreateDefaultHandler(
    argument0 : Pointer[CLSID],
    argument1 : LPUNKNOWN,
    argument2 : Pointer[IID],
    argument3 : Pointer[PVOID]) CLong;

external (stdcall) OleCreateEmbeddingHelper(
    argument0 : Pointer[CLSID],
    argument1 : LPUNKNOWN,
    argument2 : CULong,
    argument3 : LPCLASSFACTORY,
    argument4 : Pointer[IID],
    argument5 : Pointer[PVOID]) CLong;

external (stdcall) IsAccelerator(
    argument0 : HACCEL,
    argument1 : Int,
    argument2 : LPMSG,
    argument3 : Pointer[UShort]) Int;

external (stdcall) OleGetIconOfFile(
    argument0 : LPOLESTR,
    argument1 : Int) HGLOBAL;

external (stdcall) OleGetIconOfClass(
    argument0 : Pointer[CLSID],
    argument1 : LPOLESTR,
    argument2 : Int) HGLOBAL;

external (stdcall) OleMetafilePictFromIconAndLabel(
    argument0 : HICON,
    argument1 : LPOLESTR,
    argument2 : LPOLESTR,
    argument3 : UInt) HGLOBAL;

external (stdcall) OleRegGetUserType(
    argument0 : Pointer[CLSID],
    argument1 : CULong,
    argument2 : Pointer[LPOLESTR]) CLong;

external (stdcall) OleRegGetMiscStatus(
    argument0 : Pointer[CLSID],
    argument1 : CULong,
    argument2 : Pointer[CULong]) CLong;

external (stdcall) OleRegEnumFormatEtc(
    argument0 : Pointer[CLSID],
    argument1 : CULong,
    argument2 : Pointer[LPENUMFORMATETC]) CLong;

external (stdcall) OleRegEnumVerbs(
    argument0 : Pointer[CLSID],
    argument1 : Pointer[LPENUMOLEVERB]) CLong;

external (stdcall) OleConvertOLESTREAMToIStorage(
    argument0 : LPOLESTREAM,
    argument1 : LPSTORAGE,
    argument2 : Pointer[DVTARGETDEVICE]) CLong;

external (stdcall) OleConvertIStorageToOLESTREAM(
    argument0 : LPSTORAGE,
    argument1 : LPOLESTREAM) CLong;

external (stdcall) GetHGlobalFromILockBytes(
    argument0 : LPLOCKBYTES,
    argument1 : Pointer[HGLOBAL]) CLong;

external (stdcall) CreateILockBytesOnHGlobal(
    argument0 : HGLOBAL,
    argument1 : Int,
    argument2 : Pointer[LPLOCKBYTES]) CLong;

external (stdcall) GetHGlobalFromStream(
    argument0 : LPSTREAM,
    argument1 : Pointer[HGLOBAL]) CLong;

external (stdcall) CreateStreamOnHGlobal(
    argument0 : HGLOBAL,
    argument1 : Int,
    argument2 : Pointer[LPSTREAM]) CLong;

external (stdcall) OleDoAutoConvert(
    argument0 : LPSTORAGE,
    argument1 : LPCLSID) CLong;

external (stdcall) OleGetAutoConvert(
    argument0 : Pointer[CLSID],
    argument1 : LPCLSID) CLong;

external (stdcall) OleSetAutoConvert(
    argument0 : Pointer[CLSID],
    argument1 : Pointer[CLSID]) CLong;

external (stdcall) GetConvertStg(
    argument0 : LPSTORAGE) CLong;

external (stdcall) SetConvertStg(
    argument0 : LPSTORAGE,
    argument1 : Int) CLong;

external (stdcall) OleConvertIStorageToOLESTREAMEx(
    argument0 : LPSTORAGE,
    argument1 : UShort,
    argument2 : CLong,
    argument3 : CLong,
    argument4 : CULong,
    argument5 : LPSTGMEDIUM,
    argument6 : LPOLESTREAM) CLong;

external (stdcall) OleConvertOLESTREAMToIStorageEx(
    argument0 : LPOLESTREAM,
    argument1 : LPSTORAGE,
    argument2 : Pointer[UShort],
    argument3 : Pointer[CLong],
    argument4 : Pointer[CLong],
    argument5 : Pointer[CULong],
    argument6 : LPSTGMEDIUM) CLong;
