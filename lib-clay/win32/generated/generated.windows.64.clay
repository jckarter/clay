// Automatically generated by clay-bindgen
// language: c

private alias OpaquePointer = RawPointer;
private alias UnknownType = Int;
private alias AUnionType = Int;


alias __builtin_va_list = Pointer[CChar];

alias __int128 = UnsupportedCBuiltinType19;

alias __gnuc_va_list = __builtin_va_list;

alias va_list = __gnuc_va_list;

alias size_t = UInt64;

alias ssize_t = Int64;

alias intptr_t = Int64;

alias uintptr_t = UInt64;

alias ptrdiff_t = Int64;

alias wchar_t = UShort;

alias wint_t = UShort;

alias wctype_t = UShort;

alias errno_t = Int;

alias __time32_t = CLong;

alias __time64_t = Int64;

alias time_t = Int64;

alias pthreadlocinfo = Pointer[Struct_threadlocaleinfostruct];

alias pthreadmbcinfo = OpaquePointer;

record Struct_localeinfo_struct (
    locinfo : pthreadlocinfo,
    mbcinfo : pthreadmbcinfo,
);

alias _locale_tstruct = Struct_localeinfo_struct;

alias _locale_t = Pointer[Struct_localeinfo_struct];

record Struct_tagLC_ID (
    wLanguage : UShort,
    wCountry : UShort,
    wCodePage : UShort,
);

alias LC_ID = Struct_tagLC_ID;

alias LPLC_ID = Pointer[Struct_tagLC_ID];

record Struct_threadlocaleinfostruct (
    refcount : Int,
    lc_codepage : UInt,
    lc_collate_cp : UInt,
    lc_handle : Array[CULong,6],
    lc_id : Array[LC_ID,6],
    lc_category : Array[UnnamedRecord,6],
    lc_clike : Int,
    mb_cur_max : Int,
    lconv_intl_refcount : Pointer[Int],
    lconv_num_refcount : Pointer[Int],
    lconv_mon_refcount : Pointer[Int],
    lconv : OpaquePointer,
    ctype1_refcount : Pointer[Int],
    ctype1 : Pointer[UShort],
    pctype : Pointer[UShort],
    pclmap : Pointer[CUChar],
    pcumap : Pointer[CUChar],
    lc_time_curr : OpaquePointer,
);

record UnnamedRecord (
    locale : Pointer[CChar],
    wlocale : Pointer[UShort],
    refcount : Pointer[Int],
    wrefcount : Pointer[Int],
);

alias threadlocinfo = Struct_threadlocaleinfostruct;

external __mingw_get_crt_info() Pointer[CChar];

external _exception_code() CULong;

external _exception_info() RawPointer;

external _abnormal_termination() Int;

alias _PHNDLR = CCodePointer[(Int),()];

record Struct__XCPT_ACTION (
    XcptNum : CULong,
    SigNum : Int,
    XcptAction : _PHNDLR,
);

external _XcptActTab : Array[Struct__XCPT_ACTION,0];

external _XcptActTabCount : Int;

external _XcptActTabSize : Int;

external _First_FPE_Indx : Int;

external _Num_FPE : Int;

external __CppXcptFilter(
    _ExceptionNum : CULong,
    _ExceptionPtr : Pointer[Struct__EXCEPTION_POINTERS]) Int;

external _XcptFilter(
    _ExceptionNum : CULong,
    _ExceptionPtr : Pointer[Struct__EXCEPTION_POINTERS]) Int;

alias PEXCEPTION_HANDLER = CCodePointer[(Pointer[Struct__EXCEPTION_RECORD],RawPointer,Pointer[Struct__CONTEXT],RawPointer),(Int)];

record Struct__EXCEPTION_REGISTRATION (
    prev : Pointer[Struct__EXCEPTION_REGISTRATION],
    handler : CCodePointer[(Pointer[Struct__EXCEPTION_RECORD],RawPointer,Pointer[Struct__CONTEXT],RawPointer),(Int)],
);

alias EXCEPTION_REGISTRATION = Struct__EXCEPTION_REGISTRATION;

alias PEXCEPTION_REGISTRATION = Pointer[Struct__EXCEPTION_REGISTRATION];

alias EXCEPTION_REGISTRATION_RECORD = EXCEPTION_REGISTRATION;

alias PEXCEPTION_REGISTRATION_RECORD = PEXCEPTION_REGISTRATION;

alias ULONG = CULong;

alias PULONG = Pointer[CULong];

alias USHORT = UShort;

alias PUSHORT = Pointer[UShort];

alias UCHAR = CUChar;

alias PUCHAR = Pointer[CUChar];

alias PSZ = Pointer[CChar];

alias WINBOOL = Int;

alias BOOL = Int;

alias PBOOL = Pointer[Int];

alias LPBOOL = Pointer[Int];

alias BYTE = CUChar;

alias WORD = UShort;

alias DWORD = CULong;

alias FLOAT = Float;

alias PFLOAT = Pointer[Float];

alias PBYTE = Pointer[CUChar];

alias LPBYTE = Pointer[CUChar];

alias PINT = Pointer[Int];

alias LPINT = Pointer[Int];

alias PWORD = Pointer[UShort];

alias LPWORD = Pointer[UShort];

alias LPLONG = Pointer[CLong];

alias PDWORD = Pointer[CULong];

alias LPDWORD = Pointer[CULong];

alias LPVOID = RawPointer;

alias LPCVOID = RawPointer;

alias INT = Int;

alias UINT = UInt;

alias PUINT = Pointer[UInt];

external __imp__pctype : Pointer[Pointer[UShort]];

external __imp__wctype : Pointer[Pointer[UShort]];

external __imp__pwctype : Pointer[Pointer[UShort]];

external __newclmap : Array[CUChar,0];

external __newcumap : Array[CUChar,0];

external __ptlocinfo : pthreadlocinfo;

external __ptmbcinfo : pthreadmbcinfo;

external __globallocalestatus : Int;

external __locale_changed : Int;

external __initiallocinfo : Struct_threadlocaleinfostruct;

external __initiallocalestructinfo : _locale_tstruct;

external __updatetlocinfo() pthreadlocinfo;

external __updatetmbcinfo() pthreadmbcinfo;

external _isctype(
    _C : Int,
    _Type : Int) Int;

external _isctype_l(
    _C : Int,
    _Type : Int,
    _Locale : _locale_t) Int;

external isalpha(
    _C : Int) Int;

external _isalpha_l(
    _C : Int,
    _Locale : _locale_t) Int;

external isupper(
    _C : Int) Int;

external _isupper_l(
    _C : Int,
    _Locale : _locale_t) Int;

external islower(
    _C : Int) Int;

external _islower_l(
    _C : Int,
    _Locale : _locale_t) Int;

external isdigit(
    _C : Int) Int;

external _isdigit_l(
    _C : Int,
    _Locale : _locale_t) Int;

external isxdigit(
    _C : Int) Int;

external _isxdigit_l(
    _C : Int,
    _Locale : _locale_t) Int;

external isspace(
    _C : Int) Int;

external _isspace_l(
    _C : Int,
    _Locale : _locale_t) Int;

external ispunct(
    _C : Int) Int;

external _ispunct_l(
    _C : Int,
    _Locale : _locale_t) Int;

external isalnum(
    _C : Int) Int;

external _isalnum_l(
    _C : Int,
    _Locale : _locale_t) Int;

external isprint(
    _C : Int) Int;

external _isprint_l(
    _C : Int,
    _Locale : _locale_t) Int;

external isgraph(
    _C : Int) Int;

external _isgraph_l(
    _C : Int,
    _Locale : _locale_t) Int;

external iscntrl(
    _C : Int) Int;

external _iscntrl_l(
    _C : Int,
    _Locale : _locale_t) Int;

external toupper(
    _C : Int) Int;

external tolower(
    _C : Int) Int;

external _tolower(
    _C : Int) Int;

external _tolower_l(
    _C : Int,
    _Locale : _locale_t) Int;

external _toupper(
    _C : Int) Int;

external _toupper_l(
    _C : Int,
    _Locale : _locale_t) Int;

external __isascii(
    _C : Int) Int;

external __toascii(
    _C : Int) Int;

external __iscsymf(
    _C : Int) Int;

external __iscsym(
    _C : Int) Int;

external isblank(
    _C : Int) Int;

external iswalpha(
    _C : UShort) Int;

external _iswalpha_l(
    _C : UShort,
    _Locale : _locale_t) Int;

external iswupper(
    _C : UShort) Int;

external _iswupper_l(
    _C : UShort,
    _Locale : _locale_t) Int;

external iswlower(
    _C : UShort) Int;

external _iswlower_l(
    _C : UShort,
    _Locale : _locale_t) Int;

external iswdigit(
    _C : UShort) Int;

external _iswdigit_l(
    _C : UShort,
    _Locale : _locale_t) Int;

external iswxdigit(
    _C : UShort) Int;

external _iswxdigit_l(
    _C : UShort,
    _Locale : _locale_t) Int;

external iswspace(
    _C : UShort) Int;

external _iswspace_l(
    _C : UShort,
    _Locale : _locale_t) Int;

external iswpunct(
    _C : UShort) Int;

external _iswpunct_l(
    _C : UShort,
    _Locale : _locale_t) Int;

external iswalnum(
    _C : UShort) Int;

external _iswalnum_l(
    _C : UShort,
    _Locale : _locale_t) Int;

external iswprint(
    _C : UShort) Int;

external _iswprint_l(
    _C : UShort,
    _Locale : _locale_t) Int;

external iswgraph(
    _C : UShort) Int;

external _iswgraph_l(
    _C : UShort,
    _Locale : _locale_t) Int;

external iswcntrl(
    _C : UShort) Int;

external _iswcntrl_l(
    _C : UShort,
    _Locale : _locale_t) Int;

external iswascii(
    _C : UShort) Int;

external isleadbyte(
    _C : Int) Int;

external _isleadbyte_l(
    _C : Int,
    _Locale : _locale_t) Int;

external towupper(
    _C : UShort) UShort;

external _towupper_l(
    _C : UShort,
    _Locale : _locale_t) UShort;

external towlower(
    _C : UShort) UShort;

external _towlower_l(
    _C : UShort,
    _Locale : _locale_t) UShort;

external iswctype(
    _C : UShort,
    _Type : UShort) Int;

external _iswctype_l(
    _C : UShort,
    _Type : UShort,
    _Locale : _locale_t) Int;

external __iswcsymf(
    _C : UShort) Int;

external _iswcsymf_l(
    _C : UShort,
    _Locale : _locale_t) Int;

external __iswcsym(
    _C : UShort) Int;

external _iswcsym_l(
    _C : UShort,
    _Locale : _locale_t) Int;

external is_wctype(
    _C : UShort,
    _Type : UShort) Int;

external iswblank(
    _C : UShort) Int;

external __imp___mb_cur_max : Pointer[Int];

alias POINTER_64_INT = UInt64;

alias INT8 = CChar;

alias PINT8 = Pointer[CChar];

alias INT16 = Short;

alias PINT16 = Pointer[Short];

alias INT32 = Int;

alias PINT32 = Pointer[Int];

alias INT64 = Int64;

alias PINT64 = Pointer[Int64];

alias UINT8 = CUChar;

alias PUINT8 = Pointer[CUChar];

alias UINT16 = UShort;

alias PUINT16 = Pointer[UShort];

alias UINT32 = UInt;

alias PUINT32 = Pointer[UInt];

alias UINT64 = UInt64;

alias PUINT64 = Pointer[UInt64];

alias LONG32 = Int;

alias PLONG32 = Pointer[Int];

alias ULONG32 = UInt;

alias PULONG32 = Pointer[UInt];

alias DWORD32 = UInt;

alias PDWORD32 = Pointer[UInt];

alias INT_PTR = Int64;

alias PINT_PTR = Pointer[Int64];

alias UINT_PTR = UInt64;

alias PUINT_PTR = Pointer[UInt64];

alias LONG_PTR = Int64;

alias PLONG_PTR = Pointer[Int64];

alias ULONG_PTR = UInt64;

alias PULONG_PTR = Pointer[UInt64];

alias SHANDLE_PTR = Int64;

alias HANDLE_PTR = UInt64;

alias UHALF_PTR = UInt;

alias PUHALF_PTR = Pointer[UInt];

alias HALF_PTR = Int;

alias PHALF_PTR = Pointer[Int];

alias SIZE_T = UInt64;

alias PSIZE_T = Pointer[UInt64];

alias SSIZE_T = Int64;

alias PSSIZE_T = Pointer[Int64];

alias DWORD_PTR = UInt64;

alias PDWORD_PTR = Pointer[UInt64];

alias LONG64 = Int64;

alias PLONG64 = Pointer[Int64];

alias ULONG64 = UInt64;

alias PULONG64 = Pointer[UInt64];

alias DWORD64 = UInt64;

alias PDWORD64 = Pointer[UInt64];

alias KAFFINITY = UInt64;

alias PKAFFINITY = Pointer[UInt64];

alias PVOID = RawPointer;

alias PVOID64 = RawPointer;

alias CHAR = CChar;

alias SHORT = Short;

alias LONG = CLong;

alias WCHAR = UShort;

alias PWCHAR = Pointer[UShort];

alias LPWCH = Pointer[UShort];

alias PWCH = Pointer[UShort];

alias LPCWCH = Pointer[UShort];

alias PCWCH = Pointer[UShort];

alias NWPSTR = Pointer[UShort];

alias LPWSTR = Pointer[UShort];

alias PWSTR = Pointer[UShort];

alias PZPWSTR = Pointer[PWSTR];

alias PCZPWSTR = Pointer[PWSTR];

alias LPUWSTR = Pointer[UShort];

alias PUWSTR = Pointer[UShort];

alias LPCWSTR = Pointer[UShort];

alias PCWSTR = Pointer[UShort];

alias PZPCWSTR = Pointer[PCWSTR];

alias LPCUWSTR = Pointer[UShort];

alias PCUWSTR = Pointer[UShort];

alias PCHAR = Pointer[CChar];

alias LPCH = Pointer[CChar];

alias PCH = Pointer[CChar];

alias LPCCH = Pointer[CChar];

alias PCCH = Pointer[CChar];

alias NPSTR = Pointer[CChar];

alias LPSTR = Pointer[CChar];

alias PSTR = Pointer[CChar];

alias PZPSTR = Pointer[PSTR];

alias PCZPSTR = Pointer[PSTR];

alias LPCSTR = Pointer[CChar];

alias PCSTR = Pointer[CChar];

alias PZPCSTR = Pointer[PCSTR];

alias TCHAR = CChar;

alias PTCHAR = Pointer[CChar];

alias TBYTE = CUChar;

alias PTBYTE = Pointer[CUChar];

alias LPTCH = LPSTR;

alias PTCH = LPSTR;

alias PTSTR = LPSTR;

alias LPTSTR = LPSTR;

alias PUTSTR = LPSTR;

alias LPUTSTR = LPSTR;

alias PCTSTR = LPCSTR;

alias LPCTSTR = LPCSTR;

alias PCUTSTR = LPCSTR;

alias LPCUTSTR = LPCSTR;

alias PSHORT = Pointer[Short];

alias PLONG = Pointer[CLong];

alias HANDLE = RawPointer;

alias PHANDLE = Pointer[HANDLE];

alias FCHAR = CUChar;

alias FSHORT = UShort;

alias FLONG = CULong;

alias HRESULT = CLong;

alias CCHAR = CChar;

alias LCID = CULong;

alias PLCID = PDWORD;

alias LANGID = UShort;

record Struct__FLOAT128 (
    LowPart : Int64,
    HighPart : Int64,
);

alias FLOAT128 = Struct__FLOAT128;

alias PFLOAT128 = Pointer[FLOAT128];

alias LONGLONG = Int64;

alias ULONGLONG = UInt64;

alias PLONGLONG = Pointer[Int64];

alias PULONGLONG = Pointer[UInt64];

alias USN = Int64;

alias LARGE_INTEGER = AUnionType;

alias PLARGE_INTEGER = Pointer[LARGE_INTEGER];

alias ULARGE_INTEGER = AUnionType;

alias PULARGE_INTEGER = Pointer[ULARGE_INTEGER];

record Struct__LUID (
    LowPart : CULong,
    HighPart : CLong,
);

alias LUID = Struct__LUID;

alias PLUID = Pointer[Struct__LUID];

alias DWORDLONG = UInt64;

alias PDWORDLONG = Pointer[UInt64];

external _rotl8(
    Value : CUChar,
    Shift : CUChar) CUChar;

external _rotl16(
    Value : UShort,
    Shift : CUChar) UShort;

external _rotr8(
    Value : CUChar,
    Shift : CUChar) CUChar;

external _rotr16(
    Value : UShort,
    Shift : CUChar) UShort;

external _rotl(
    Value : UInt,
    Shift : Int) UInt;

external _rotr(
    Value : UInt,
    Shift : Int) UInt;

external _rotl64(
    Value : UInt64,
    Shift : Int) UInt64;

external _rotr64(
    Value : UInt64,
    Shift : Int) UInt64;

alias BOOLEAN = CUChar;

alias PBOOLEAN = Pointer[CUChar];

record Struct__LIST_ENTRY (
    Flink : Pointer[Struct__LIST_ENTRY],
    Blink : Pointer[Struct__LIST_ENTRY],
);

alias LIST_ENTRY = Struct__LIST_ENTRY;

alias PLIST_ENTRY = Pointer[Struct__LIST_ENTRY];

alias PRLIST_ENTRY = Pointer[Struct__LIST_ENTRY];

record Struct__SINGLE_LIST_ENTRY (
    Next : Pointer[Struct__SINGLE_LIST_ENTRY],
);

alias SINGLE_LIST_ENTRY = Struct__SINGLE_LIST_ENTRY;

alias PSINGLE_LIST_ENTRY = Pointer[Struct__SINGLE_LIST_ENTRY];

record Struct_LIST_ENTRY32 (
    Flink : CULong,
    Blink : CULong,
);

alias LIST_ENTRY32 = Struct_LIST_ENTRY32;

alias PLIST_ENTRY32 = Pointer[LIST_ENTRY32];

record Struct_LIST_ENTRY64 (
    Flink : UInt64,
    Blink : UInt64,
);

alias LIST_ENTRY64 = Struct_LIST_ENTRY64;

alias PLIST_ENTRY64 = Pointer[LIST_ENTRY64];

record Struct__GUID (
    Data1 : CULong,
    Data2 : UShort,
    Data3 : UShort,
    Data4 : Array[CUChar,8],
);

alias GUID = Struct__GUID;

alias LPGUID = Pointer[GUID];

alias LPCGUID = Pointer[GUID];

alias IID = GUID;

alias LPIID = Pointer[IID];

alias CLSID = GUID;

alias LPCLSID = Pointer[CLSID];

alias FMTID = GUID;

alias LPFMTID = Pointer[FMTID];

external _memccpy(
    _Dst : RawPointer,
    _Src : RawPointer,
    _Val : Int,
    _MaxCount : UInt64) RawPointer;

external memchr(
    _Buf : RawPointer,
    _Val : Int,
    _MaxCount : UInt64) RawPointer;

external _memicmp(
    _Buf1 : RawPointer,
    _Buf2 : RawPointer,
    _Size : UInt64) Int;

external _memicmp_l(
    _Buf1 : RawPointer,
    _Buf2 : RawPointer,
    _Size : UInt64,
    _Locale : _locale_t) Int;

external memcmp(
    _Buf1 : RawPointer,
    _Buf2 : RawPointer,
    _Size : UInt64) Int;

external memcpy(
    _Dst : RawPointer,
    _Src : RawPointer,
    _Size : UInt64) RawPointer;

external memset(
    _Dst : RawPointer,
    _Val : Int,
    _Size : UInt64) RawPointer;

external memccpy(
    _Dst : RawPointer,
    _Src : RawPointer,
    _Val : Int,
    _Size : UInt64) RawPointer;

external memicmp(
    _Buf1 : RawPointer,
    _Buf2 : RawPointer,
    _Size : UInt64) Int;

external _strset(
    _Str : Pointer[CChar],
    _Val : Int) Pointer[CChar];

external _strset_l(
    _Str : Pointer[CChar],
    _Val : Int,
    _Locale : _locale_t) Pointer[CChar];

external strcpy(
    _Dest : Pointer[CChar],
    _Source : Pointer[CChar]) Pointer[CChar];

external strcat(
    _Dest : Pointer[CChar],
    _Source : Pointer[CChar]) Pointer[CChar];

external strcmp(
    _Str1 : Pointer[CChar],
    _Str2 : Pointer[CChar]) Int;

external strlen(
    _Str : Pointer[CChar]) UInt64;

external memmove(
    _Dst : RawPointer,
    _Src : RawPointer,
    _Size : UInt64) RawPointer;

external _strdup(
    _Src : Pointer[CChar]) Pointer[CChar];

external strchr(
    _Str : Pointer[CChar],
    _Val : Int) Pointer[CChar];

external _stricmp(
    _Str1 : Pointer[CChar],
    _Str2 : Pointer[CChar]) Int;

external _strcmpi(
    _Str1 : Pointer[CChar],
    _Str2 : Pointer[CChar]) Int;

external _stricmp_l(
    _Str1 : Pointer[CChar],
    _Str2 : Pointer[CChar],
    _Locale : _locale_t) Int;

external strcoll(
    _Str1 : Pointer[CChar],
    _Str2 : Pointer[CChar]) Int;

external _strcoll_l(
    _Str1 : Pointer[CChar],
    _Str2 : Pointer[CChar],
    _Locale : _locale_t) Int;

external _stricoll(
    _Str1 : Pointer[CChar],
    _Str2 : Pointer[CChar]) Int;

external _stricoll_l(
    _Str1 : Pointer[CChar],
    _Str2 : Pointer[CChar],
    _Locale : _locale_t) Int;

external _strncoll(
    _Str1 : Pointer[CChar],
    _Str2 : Pointer[CChar],
    _MaxCount : UInt64) Int;

external _strncoll_l(
    _Str1 : Pointer[CChar],
    _Str2 : Pointer[CChar],
    _MaxCount : UInt64,
    _Locale : _locale_t) Int;

external _strnicoll(
    _Str1 : Pointer[CChar],
    _Str2 : Pointer[CChar],
    _MaxCount : UInt64) Int;

external _strnicoll_l(
    _Str1 : Pointer[CChar],
    _Str2 : Pointer[CChar],
    _MaxCount : UInt64,
    _Locale : _locale_t) Int;

external strcspn(
    _Str : Pointer[CChar],
    _Control : Pointer[CChar]) UInt64;

external _strerror(
    _ErrMsg : Pointer[CChar]) Pointer[CChar];

external strerror(
    argument0 : Int) Pointer[CChar];

external _strlwr(
    _String : Pointer[CChar]) Pointer[CChar];

external strlwr_l(
    _String : Pointer[CChar],
    _Locale : _locale_t) Pointer[CChar];

external strncat(
    _Dest : Pointer[CChar],
    _Source : Pointer[CChar],
    _Count : UInt64) Pointer[CChar];

external strncmp(
    _Str1 : Pointer[CChar],
    _Str2 : Pointer[CChar],
    _MaxCount : UInt64) Int;

external _strnicmp(
    _Str1 : Pointer[CChar],
    _Str2 : Pointer[CChar],
    _MaxCount : UInt64) Int;

external _strnicmp_l(
    _Str1 : Pointer[CChar],
    _Str2 : Pointer[CChar],
    _MaxCount : UInt64,
    _Locale : _locale_t) Int;

external strncpy(
    _Dest : Pointer[CChar],
    _Source : Pointer[CChar],
    _Count : UInt64) Pointer[CChar];

external _strnset(
    _Str : Pointer[CChar],
    _Val : Int,
    _MaxCount : UInt64) Pointer[CChar];

external _strnset_l(
    str : Pointer[CChar],
    c : Int,
    count : UInt64,
    _Locale : _locale_t) Pointer[CChar];

external strpbrk(
    _Str : Pointer[CChar],
    _Control : Pointer[CChar]) Pointer[CChar];

external strrchr(
    _Str : Pointer[CChar],
    _Ch : Int) Pointer[CChar];

external _strrev(
    _Str : Pointer[CChar]) Pointer[CChar];

external strspn(
    _Str : Pointer[CChar],
    _Control : Pointer[CChar]) UInt64;

external strstr(
    _Str : Pointer[CChar],
    _SubStr : Pointer[CChar]) Pointer[CChar];

external strtok(
    _Str : Pointer[CChar],
    _Delim : Pointer[CChar]) Pointer[CChar];

external _strupr(
    _String : Pointer[CChar]) Pointer[CChar];

external _strupr_l(
    _String : Pointer[CChar],
    _Locale : _locale_t) Pointer[CChar];

external strxfrm(
    _Dst : Pointer[CChar],
    _Src : Pointer[CChar],
    _MaxCount : UInt64) UInt64;

external _strxfrm_l(
    _Dst : Pointer[CChar],
    _Src : Pointer[CChar],
    _MaxCount : UInt64,
    _Locale : _locale_t) UInt64;

external strdup(
    _Src : Pointer[CChar]) Pointer[CChar];

external strcmpi(
    _Str1 : Pointer[CChar],
    _Str2 : Pointer[CChar]) Int;

external stricmp(
    _Str1 : Pointer[CChar],
    _Str2 : Pointer[CChar]) Int;

external strlwr(
    _Str : Pointer[CChar]) Pointer[CChar];

external strnicmp(
    _Str1 : Pointer[CChar],
    _Str : Pointer[CChar],
    _MaxCount : UInt64) Int;

external strncasecmp(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar],
    argument2 : UInt64) Int;

external strcasecmp(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar]) Int;

external strnset(
    _Str : Pointer[CChar],
    _Val : Int,
    _MaxCount : UInt64) Pointer[CChar];

external strrev(
    _Str : Pointer[CChar]) Pointer[CChar];

external strset(
    _Str : Pointer[CChar],
    _Val : Int) Pointer[CChar];

external strupr(
    _Str : Pointer[CChar]) Pointer[CChar];

external _wcsdup(
    _Str : Pointer[UShort]) Pointer[UShort];

external wcscat(
    _Dest : Pointer[UShort],
    _Source : Pointer[UShort]) Pointer[UShort];

external wcschr(
    _Str : Pointer[UShort],
    _Ch : UShort) Pointer[UShort];

external wcscmp(
    _Str1 : Pointer[UShort],
    _Str2 : Pointer[UShort]) Int;

external wcscpy(
    _Dest : Pointer[UShort],
    _Source : Pointer[UShort]) Pointer[UShort];

external wcscspn(
    _Str : Pointer[UShort],
    _Control : Pointer[UShort]) UInt64;

external wcslen(
    _Str : Pointer[UShort]) UInt64;

external wcsnlen(
    _Src : Pointer[UShort],
    _MaxCount : UInt64) UInt64;

external wcsncat(
    _Dest : Pointer[UShort],
    _Source : Pointer[UShort],
    _Count : UInt64) Pointer[UShort];

external wcsncmp(
    _Str1 : Pointer[UShort],
    _Str2 : Pointer[UShort],
    _MaxCount : UInt64) Int;

external wcsncpy(
    _Dest : Pointer[UShort],
    _Source : Pointer[UShort],
    _Count : UInt64) Pointer[UShort];

external _wcsncpy_l(
    _Dest : Pointer[UShort],
    _Source : Pointer[UShort],
    _Count : UInt64,
    _Locale : _locale_t) Pointer[UShort];

external wcspbrk(
    _Str : Pointer[UShort],
    _Control : Pointer[UShort]) Pointer[UShort];

external wcsrchr(
    _Str : Pointer[UShort],
    _Ch : UShort) Pointer[UShort];

external wcsspn(
    _Str : Pointer[UShort],
    _Control : Pointer[UShort]) UInt64;

external wcsstr(
    _Str : Pointer[UShort],
    _SubStr : Pointer[UShort]) Pointer[UShort];

external wcstok(
    _Str : Pointer[UShort],
    _Delim : Pointer[UShort]) Pointer[UShort];

external _wcserror(
    _ErrNum : Int) Pointer[UShort];

external __wcserror(
    _Str : Pointer[UShort]) Pointer[UShort];

external _wcsicmp(
    _Str1 : Pointer[UShort],
    _Str2 : Pointer[UShort]) Int;

external _wcsicmp_l(
    _Str1 : Pointer[UShort],
    _Str2 : Pointer[UShort],
    _Locale : _locale_t) Int;

external _wcsnicmp(
    _Str1 : Pointer[UShort],
    _Str2 : Pointer[UShort],
    _MaxCount : UInt64) Int;

external _wcsnicmp_l(
    _Str1 : Pointer[UShort],
    _Str2 : Pointer[UShort],
    _MaxCount : UInt64,
    _Locale : _locale_t) Int;

external _wcsnset(
    _Str : Pointer[UShort],
    _Val : UShort,
    _MaxCount : UInt64) Pointer[UShort];

external _wcsrev(
    _Str : Pointer[UShort]) Pointer[UShort];

external _wcsset(
    _Str : Pointer[UShort],
    _Val : UShort) Pointer[UShort];

external _wcslwr(
    _String : Pointer[UShort]) Pointer[UShort];

external _wcslwr_l(
    _String : Pointer[UShort],
    _Locale : _locale_t) Pointer[UShort];

external _wcsupr(
    _String : Pointer[UShort]) Pointer[UShort];

external _wcsupr_l(
    _String : Pointer[UShort],
    _Locale : _locale_t) Pointer[UShort];

external wcsxfrm(
    _Dst : Pointer[UShort],
    _Src : Pointer[UShort],
    _MaxCount : UInt64) UInt64;

external _wcsxfrm_l(
    _Dst : Pointer[UShort],
    _Src : Pointer[UShort],
    _MaxCount : UInt64,
    _Locale : _locale_t) UInt64;

external wcscoll(
    _Str1 : Pointer[UShort],
    _Str2 : Pointer[UShort]) Int;

external _wcscoll_l(
    _Str1 : Pointer[UShort],
    _Str2 : Pointer[UShort],
    _Locale : _locale_t) Int;

external _wcsicoll(
    _Str1 : Pointer[UShort],
    _Str2 : Pointer[UShort]) Int;

external _wcsicoll_l(
    _Str1 : Pointer[UShort],
    _Str2 : Pointer[UShort],
    _Locale : _locale_t) Int;

external _wcsncoll(
    _Str1 : Pointer[UShort],
    _Str2 : Pointer[UShort],
    _MaxCount : UInt64) Int;

external _wcsncoll_l(
    _Str1 : Pointer[UShort],
    _Str2 : Pointer[UShort],
    _MaxCount : UInt64,
    _Locale : _locale_t) Int;

external _wcsnicoll(
    _Str1 : Pointer[UShort],
    _Str2 : Pointer[UShort],
    _MaxCount : UInt64) Int;

external _wcsnicoll_l(
    _Str1 : Pointer[UShort],
    _Str2 : Pointer[UShort],
    _MaxCount : UInt64,
    _Locale : _locale_t) Int;

external wcsdup(
    _Str : Pointer[UShort]) Pointer[UShort];

external wcsicmp(
    _Str1 : Pointer[UShort],
    _Str2 : Pointer[UShort]) Int;

external wcsnicmp(
    _Str1 : Pointer[UShort],
    _Str2 : Pointer[UShort],
    _MaxCount : UInt64) Int;

external wcsnset(
    _Str : Pointer[UShort],
    _Val : UShort,
    _MaxCount : UInt64) Pointer[UShort];

external wcsrev(
    _Str : Pointer[UShort]) Pointer[UShort];

external wcsset(
    _Str : Pointer[UShort],
    _Val : UShort) Pointer[UShort];

external wcslwr(
    _Str : Pointer[UShort]) Pointer[UShort];

external wcsupr(
    _Str : Pointer[UShort]) Pointer[UShort];

external wcsicoll(
    _Str1 : Pointer[UShort],
    _Str2 : Pointer[UShort]) Int;

record Struct__OBJECTID (
    Lineage : GUID,
    Uniquifier : CULong,
);

alias OBJECTID = Struct__OBJECTID;

alias KSPIN_LOCK = UInt64;

alias PKSPIN_LOCK = Pointer[UInt64];

external _bittest(
    Base : Pointer[CLong],
    Offset : CLong) CUChar;

external _bittestandcomplement(
    Base : Pointer[CLong],
    Offset : CLong) CUChar;

external InterlockedBitTestAndComplement(
    Base : Pointer[CLong],
    Bit : CLong) CUChar;

external _bittestandset(
    Base : Pointer[CLong],
    Offset : CLong) CUChar;

external _bittestandreset(
    Base : Pointer[CLong],
    Offset : CLong) CUChar;

external _interlockedbittestandset(
    Base : Pointer[CLong],
    Offset : CLong) CUChar;

external _interlockedbittestandreset(
    Base : Pointer[CLong],
    Offset : CLong) CUChar;

external _bittest64(
    Base : Pointer[Int64],
    Offset : Int64) CUChar;

external _bittestandcomplement64(
    Base : Pointer[Int64],
    Offset : Int64) CUChar;

external _bittestandset64(
    Base : Pointer[Int64],
    Offset : Int64) CUChar;

external _bittestandreset64(
    Base : Pointer[Int64],
    Offset : Int64) CUChar;

external _interlockedbittestandset64(
    Base : Pointer[Int64],
    Offset : Int64) CUChar;

external _interlockedbittestandreset64(
    Base : Pointer[Int64],
    Offset : Int64) CUChar;

external _BitScanForward(
    Index : Pointer[CULong],
    Mask : CULong) CUChar;

external _BitScanReverse(
    Index : Pointer[CULong],
    Mask : CULong) CUChar;

external _BitScanForward64(
    Index : Pointer[CULong],
    Mask : UInt64) CUChar;

external _BitScanReverse64(
    Index : Pointer[CULong],
    Mask : UInt64) CUChar;

external _InterlockedIncrement16(
    Addend : Pointer[Short]) Short;

external _InterlockedDecrement16(
    Addend : Pointer[Short]) Short;

external _InterlockedCompareExchange16(
    Destination : Pointer[Short],
    ExChange : Short,
    Comperand : Short) Short;

external _InterlockedAnd(
    Destination : Pointer[CLong],
    Value : CLong) CLong;

external _InterlockedOr(
    Destination : Pointer[CLong],
    Value : CLong) CLong;

external _InterlockedXor(
    Destination : Pointer[CLong],
    Value : CLong) CLong;

external _InterlockedIncrement(
    Addend : Pointer[CLong]) CLong;

external _InterlockedDecrement(
    Addend : Pointer[CLong]) CLong;

external _InterlockedExchange(
    Target : Pointer[CLong],
    Value : CLong) CLong;

external _InterlockedAnd64(
    Destination : Pointer[Int64],
    Value : Int64) Int64;

external _InterlockedOr64(
    Destination : Pointer[Int64],
    Value : Int64) Int64;

external _InterlockedXor64(
    Destination : Pointer[Int64],
    Value : Int64) Int64;

external _InterlockedExchangeAdd(
    Addend : Pointer[CLong],
    Value : CLong) CLong;

external _InterlockedCompareExchange(
    Destination : Pointer[CLong],
    ExChange : CLong,
    Comperand : CLong) CLong;

external _InterlockedAdd(
    Addend : Pointer[CLong],
    Value : CLong) CLong;

external _InterlockedIncrement64(
    Addend : Pointer[Int64]) Int64;

external _InterlockedDecrement64(
    Addend : Pointer[Int64]) Int64;

external _InterlockedExchange64(
    Target : Pointer[Int64],
    Value : Int64) Int64;

external _InterlockedExchangeAdd64(
    Addend : Pointer[Int64],
    Value : Int64) Int64;

external _InterlockedAdd64(
    Addend : Pointer[Int64],
    Value : Int64) Int64;

external _InterlockedCompareExchange64(
    Destination : Pointer[Int64],
    ExChange : Int64,
    Comperand : Int64) Int64;

external _InterlockedCompareExchangePointer(
    Destination : Pointer[PVOID],
    ExChange : PVOID,
    Comperand : PVOID) PVOID;

external _InterlockedExchangePointer(
    Target : Pointer[PVOID],
    Value : PVOID) PVOID;

external _ReadWriteBarrier();

external __faststorefence();

external _m_prefetchw(
    Source : RawPointer);

alias errcode = Int;

record Struct__SETJMP_FLOAT128 (
    Part : Array[UInt64,2],
);

alias SETJMP_FLOAT128 = Struct__SETJMP_FLOAT128;

alias _JBTYPE = SETJMP_FLOAT128;

record Struct__JUMP_BUFFER (
    Frame : UInt64,
    Rbx : UInt64,
    Rsp : UInt64,
    Rbp : UInt64,
    Rsi : UInt64,
    Rdi : UInt64,
    R12 : UInt64,
    R13 : UInt64,
    R14 : UInt64,
    R15 : UInt64,
    Rip : UInt64,
    Spare : UInt64,
    Xmm6 : SETJMP_FLOAT128,
    Xmm7 : SETJMP_FLOAT128,
    Xmm8 : SETJMP_FLOAT128,
    Xmm9 : SETJMP_FLOAT128,
    Xmm10 : SETJMP_FLOAT128,
    Xmm11 : SETJMP_FLOAT128,
    Xmm12 : SETJMP_FLOAT128,
    Xmm13 : SETJMP_FLOAT128,
    Xmm14 : SETJMP_FLOAT128,
    Xmm15 : SETJMP_FLOAT128,
);

alias _JUMP_BUFFER = Struct__JUMP_BUFFER;

alias jmp_buf = Array[_JBTYPE,16];

external mingw_getsp() RawPointer;

external _setjmp(
    _Buf : Pointer[_JBTYPE],
    _Ctx : RawPointer) Int;

external _setjmp3(
    _Buf : Pointer[_JBTYPE],
    _Ctx : RawPointer) Int;

external ms_longjmp(
    _Buf : Pointer[_JBTYPE],
    _Value : Int);

external longjmp(
    _Buf : Pointer[_JBTYPE],
    _Value : Int);

external _errno() Pointer[Int];

external _set_errno(
    _Value : Int) Int;

external _get_errno(
    _Value : Pointer[Int]) Int;

external __threadid() CULong;

external __threadhandle() UInt64;

external __builtin_ia32_crc32qi(
    argument0 : UInt,
    argument1 : CUChar) UInt;

external __builtin_ia32_crc32hi(
    argument0 : UInt,
    argument1 : UShort) UInt;

external __builtin_ia32_crc32si(
    argument0 : UInt,
    argument1 : UInt) UInt;

alias _onexit_t = CCodePointer[(),(Int)];

record Struct__div_t (
    quot : Int,
    rem : Int,
);

alias div_t = Struct__div_t;

record Struct__ldiv_t (
    quot : CLong,
    rem : CLong,
);

alias ldiv_t = Struct__ldiv_t;

record UnnamedStruct (
    ld : Array[CUChar,10],
);

alias _LDOUBLE = UnnamedStruct;

record UnnamedStruct2 (
    x : Double,
);

alias _CRT_DOUBLE = UnnamedStruct2;

record UnnamedStruct3 (
    f : Float,
);

alias _CRT_FLOAT = UnnamedStruct3;

record UnnamedStruct4 (
    x : UnsupportedCBuiltinType22,
);

alias _LONGDOUBLE = UnnamedStruct4;

record UnnamedStruct5 (
    ld12 : Array[CUChar,12],
);

alias _LDBL12 = UnnamedStruct5;

alias _purecall_handler = CCodePointer[(),()];

external _set_purecall_handler(
    _Handler : _purecall_handler) _purecall_handler;

external _get_purecall_handler() _purecall_handler;

alias _invalid_parameter_handler = CCodePointer[(Pointer[UShort],Pointer[UShort],Pointer[UShort],UInt,UInt64),()];

external _set_invalid_parameter_handler(
    _Handler : _invalid_parameter_handler) _invalid_parameter_handler;

external _get_invalid_parameter_handler() _invalid_parameter_handler;

external __doserrno() Pointer[CULong];

external _set_doserrno(
    _Value : CULong) Int;

external _get_doserrno(
    _Value : Pointer[CULong]) Int;

external _sys_errlist : Array[Pointer[CChar],1];

external _sys_nerr : Int;

external __imp___argc : Pointer[Int];

external __imp___argv : Pointer[Pointer[Pointer[CChar]]];

external __imp___wargv : Pointer[Pointer[Pointer[UShort]]];

external __imp__environ : Pointer[Pointer[Pointer[CChar]]];

external __imp__wenviron : Pointer[Pointer[Pointer[UShort]]];

external __imp__pgmptr : Pointer[Pointer[CChar]];

external __imp__wpgmptr : Pointer[Pointer[UShort]];

external _get_pgmptr(
    _Value : Pointer[Pointer[CChar]]) Int;

external _get_wpgmptr(
    _Value : Pointer[Pointer[UShort]]) Int;

external __imp__fmode : Pointer[Int];

external _set_fmode(
    _Mode : Int) Int;

external _get_fmode(
    _PMode : Pointer[Int]) Int;

external __imp__osplatform : Pointer[UInt];

external __imp__osver : Pointer[UInt];

external __imp__winver : Pointer[UInt];

external __imp__winmajor : Pointer[UInt];

external __imp__winminor : Pointer[UInt];

external _get_osplatform(
    _Value : Pointer[UInt]) Int;

external _get_osver(
    _Value : Pointer[UInt]) Int;

external _get_winver(
    _Value : Pointer[UInt]) Int;

external _get_winmajor(
    _Value : Pointer[UInt]) Int;

external _get_winminor(
    _Value : Pointer[UInt]) Int;

external exit(
    _Code : Int);

external _exit(
    _Code : Int);

external _Exit(
    argument0 : Int);

external abort();

external _set_abort_behavior(
    _Flags : UInt,
    _Mask : UInt) UInt;

external abs(
    _X : Int) Int;

external labs(
    _X : CLong) CLong;

external _abs64(
    argument0 : Int64) Int64;

external atexit(
    argument0 : CCodePointer[(),()]) Int;

external atof(
    _String : Pointer[CChar]) Double;

external _atof_l(
    _String : Pointer[CChar],
    _Locale : _locale_t) Double;

external atoi(
    _Str : Pointer[CChar]) Int;

external _atoi_l(
    _Str : Pointer[CChar],
    _Locale : _locale_t) Int;

external atol(
    _Str : Pointer[CChar]) CLong;

external _atol_l(
    _Str : Pointer[CChar],
    _Locale : _locale_t) CLong;

external bsearch(
    _Key : RawPointer,
    _Base : RawPointer,
    _NumOfElements : UInt64,
    _SizeOfElements : UInt64,
    _PtFuncCompare : CCodePointer[(RawPointer,RawPointer),(Int)]) RawPointer;

external qsort(
    _Base : RawPointer,
    _NumOfElements : UInt64,
    _SizeOfElements : UInt64,
    _PtFuncCompare : CCodePointer[(RawPointer,RawPointer),(Int)]);

external _byteswap_ushort(
    _Short : UShort) UShort;

external _byteswap_uint64(
    _Int64 : UInt64) UInt64;

external div(
    _Numerator : Int,
    _Denominator : Int) div_t;

external getenv(
    _VarName : Pointer[CChar]) Pointer[CChar];

external _itoa(
    _Value : Int,
    _Dest : Pointer[CChar],
    _Radix : Int) Pointer[CChar];

external _i64toa(
    _Val : Int64,
    _DstBuf : Pointer[CChar],
    _Radix : Int) Pointer[CChar];

external _ui64toa(
    _Val : UInt64,
    _DstBuf : Pointer[CChar],
    _Radix : Int) Pointer[CChar];

external _atoi64(
    _String : Pointer[CChar]) Int64;

external _atoi64_l(
    _String : Pointer[CChar],
    _Locale : _locale_t) Int64;

external _strtoi64(
    _String : Pointer[CChar],
    _EndPtr : Pointer[Pointer[CChar]],
    _Radix : Int) Int64;

external _strtoi64_l(
    _String : Pointer[CChar],
    _EndPtr : Pointer[Pointer[CChar]],
    _Radix : Int,
    _Locale : _locale_t) Int64;

external _strtoui64(
    _String : Pointer[CChar],
    _EndPtr : Pointer[Pointer[CChar]],
    _Radix : Int) UInt64;

external _strtoui64_l(
    _String : Pointer[CChar],
    _EndPtr : Pointer[Pointer[CChar]],
    _Radix : Int,
    _Locale : _locale_t) UInt64;

external ldiv(
    _Numerator : CLong,
    _Denominator : CLong) ldiv_t;

external _ltoa(
    _Value : CLong,
    _Dest : Pointer[CChar],
    _Radix : Int) Pointer[CChar];

external mblen(
    _Ch : Pointer[CChar],
    _MaxCount : UInt64) Int;

external _mblen_l(
    _Ch : Pointer[CChar],
    _MaxCount : UInt64,
    _Locale : _locale_t) Int;

external _mbstrlen(
    _Str : Pointer[CChar]) UInt64;

external _mbstrlen_l(
    _Str : Pointer[CChar],
    _Locale : _locale_t) UInt64;

external _mbstrnlen(
    _Str : Pointer[CChar],
    _MaxCount : UInt64) UInt64;

external _mbstrnlen_l(
    _Str : Pointer[CChar],
    _MaxCount : UInt64,
    _Locale : _locale_t) UInt64;

external mbtowc(
    _DstCh : Pointer[UShort],
    _SrcCh : Pointer[CChar],
    _SrcSizeInBytes : UInt64) Int;

external _mbtowc_l(
    _DstCh : Pointer[UShort],
    _SrcCh : Pointer[CChar],
    _SrcSizeInBytes : UInt64,
    _Locale : _locale_t) Int;

external mbstowcs(
    _Dest : Pointer[UShort],
    _Source : Pointer[CChar],
    _MaxCount : UInt64) UInt64;

external _mbstowcs_l(
    _Dest : Pointer[UShort],
    _Source : Pointer[CChar],
    _MaxCount : UInt64,
    _Locale : _locale_t) UInt64;

external rand() Int;

external _set_error_mode(
    _Mode : Int) Int;

external srand(
    _Seed : UInt);

external strtod(
    _Str : Pointer[CChar],
    _EndPtr : Pointer[Pointer[CChar]]) Double;

external strtof(
    nptr : Pointer[CChar],
    endptr : Pointer[Pointer[CChar]]) Float;

external strtold(
    argument0 : Pointer[CChar],
    argument1 : Pointer[Pointer[CChar]]) UnsupportedCBuiltinType22;

external __strtod(
    argument0 : Pointer[CChar],
    argument1 : Pointer[Pointer[CChar]]) Double;

external __mingw_strtof(
    argument0 : Pointer[CChar],
    argument1 : Pointer[Pointer[CChar]]) Float;

external __mingw_strtold(
    argument0 : Pointer[CChar],
    argument1 : Pointer[Pointer[CChar]]) UnsupportedCBuiltinType22;

external _strtod_l(
    _Str : Pointer[CChar],
    _EndPtr : Pointer[Pointer[CChar]],
    _Locale : _locale_t) Double;

external strtol(
    _Str : Pointer[CChar],
    _EndPtr : Pointer[Pointer[CChar]],
    _Radix : Int) CLong;

external _strtol_l(
    _Str : Pointer[CChar],
    _EndPtr : Pointer[Pointer[CChar]],
    _Radix : Int,
    _Locale : _locale_t) CLong;

external strtoul(
    _Str : Pointer[CChar],
    _EndPtr : Pointer[Pointer[CChar]],
    _Radix : Int) CULong;

external _strtoul_l(
    _Str : Pointer[CChar],
    _EndPtr : Pointer[Pointer[CChar]],
    _Radix : Int,
    _Locale : _locale_t) CULong;

external system(
    _Command : Pointer[CChar]) Int;

external _ultoa(
    _Value : CULong,
    _Dest : Pointer[CChar],
    _Radix : Int) Pointer[CChar];

external wctomb(
    _MbCh : Pointer[CChar],
    _WCh : UShort) Int;

external _wctomb_l(
    _MbCh : Pointer[CChar],
    _WCh : UShort,
    _Locale : _locale_t) Int;

external wcstombs(
    _Dest : Pointer[CChar],
    _Source : Pointer[UShort],
    _MaxCount : UInt64) UInt64;

external _wcstombs_l(
    _Dest : Pointer[CChar],
    _Source : Pointer[UShort],
    _MaxCount : UInt64,
    _Locale : _locale_t) UInt64;

external calloc(
    _NumOfElements : UInt64,
    _SizeOfElements : UInt64) RawPointer;

external free(
    _Memory : RawPointer);

external malloc(
    _Size : UInt64) RawPointer;

external realloc(
    _Memory : RawPointer,
    _NewSize : UInt64) RawPointer;

external _recalloc(
    _Memory : RawPointer,
    _Count : UInt64,
    _Size : UInt64) RawPointer;

external _aligned_offset_malloc(
    _Size : UInt64,
    _Alignment : UInt64,
    _Offset : UInt64) RawPointer;

external _aligned_realloc(
    _Memory : RawPointer,
    _Size : UInt64,
    _Alignment : UInt64) RawPointer;

external _aligned_recalloc(
    _Memory : RawPointer,
    _Count : UInt64,
    _Size : UInt64,
    _Alignment : UInt64) RawPointer;

external _aligned_offset_realloc(
    _Memory : RawPointer,
    _Size : UInt64,
    _Alignment : UInt64,
    _Offset : UInt64) RawPointer;

external _aligned_offset_recalloc(
    _Memory : RawPointer,
    _Count : UInt64,
    _Size : UInt64,
    _Alignment : UInt64,
    _Offset : UInt64) RawPointer;

external _itow(
    _Value : Int,
    _Dest : Pointer[UShort],
    _Radix : Int) Pointer[UShort];

external _ltow(
    _Value : CLong,
    _Dest : Pointer[UShort],
    _Radix : Int) Pointer[UShort];

external _ultow(
    _Value : CULong,
    _Dest : Pointer[UShort],
    _Radix : Int) Pointer[UShort];

external wcstod(
    _Str : Pointer[UShort],
    _EndPtr : Pointer[Pointer[UShort]]) Double;

external wcstof(
    nptr : Pointer[UShort],
    endptr : Pointer[Pointer[UShort]]) Float;

external wcstold(
    argument0 : Pointer[UShort],
    argument1 : Pointer[Pointer[UShort]]) UnsupportedCBuiltinType22;

external _wcstod_l(
    _Str : Pointer[UShort],
    _EndPtr : Pointer[Pointer[UShort]],
    _Locale : _locale_t) Double;

external wcstol(
    _Str : Pointer[UShort],
    _EndPtr : Pointer[Pointer[UShort]],
    _Radix : Int) CLong;

external _wcstol_l(
    _Str : Pointer[UShort],
    _EndPtr : Pointer[Pointer[UShort]],
    _Radix : Int,
    _Locale : _locale_t) CLong;

external wcstoul(
    _Str : Pointer[UShort],
    _EndPtr : Pointer[Pointer[UShort]],
    _Radix : Int) CULong;

external _wcstoul_l(
    _Str : Pointer[UShort],
    _EndPtr : Pointer[Pointer[UShort]],
    _Radix : Int,
    _Locale : _locale_t) CULong;

external _wgetenv(
    _VarName : Pointer[UShort]) Pointer[UShort];

external _wsystem(
    _Command : Pointer[UShort]) Int;

external _wtof(
    _Str : Pointer[UShort]) Double;

external _wtof_l(
    _Str : Pointer[UShort],
    _Locale : _locale_t) Double;

external _wtoi(
    _Str : Pointer[UShort]) Int;

external _wtoi_l(
    _Str : Pointer[UShort],
    _Locale : _locale_t) Int;

external _wtol(
    _Str : Pointer[UShort]) CLong;

external _wtol_l(
    _Str : Pointer[UShort],
    _Locale : _locale_t) CLong;

external _i64tow(
    _Val : Int64,
    _DstBuf : Pointer[UShort],
    _Radix : Int) Pointer[UShort];

external _ui64tow(
    _Val : UInt64,
    _DstBuf : Pointer[UShort],
    _Radix : Int) Pointer[UShort];

external _wtoi64(
    _Str : Pointer[UShort]) Int64;

external _wtoi64_l(
    _Str : Pointer[UShort],
    _Locale : _locale_t) Int64;

external _wcstoi64(
    _Str : Pointer[UShort],
    _EndPtr : Pointer[Pointer[UShort]],
    _Radix : Int) Int64;

external _wcstoi64_l(
    _Str : Pointer[UShort],
    _EndPtr : Pointer[Pointer[UShort]],
    _Radix : Int,
    _Locale : _locale_t) Int64;

external _wcstoui64(
    _Str : Pointer[UShort],
    _EndPtr : Pointer[Pointer[UShort]],
    _Radix : Int) UInt64;

external _wcstoui64_l(
    _Str : Pointer[UShort],
    _EndPtr : Pointer[Pointer[UShort]],
    _Radix : Int,
    _Locale : _locale_t) UInt64;

external _fullpath(
    _FullPath : Pointer[CChar],
    _Path : Pointer[CChar],
    _SizeInBytes : UInt64) Pointer[CChar];

external _ecvt(
    _Val : Double,
    _NumOfDigits : Int,
    _PtDec : Pointer[Int],
    _PtSign : Pointer[Int]) Pointer[CChar];

external _fcvt(
    _Val : Double,
    _NumOfDec : Int,
    _PtDec : Pointer[Int],
    _PtSign : Pointer[Int]) Pointer[CChar];

external _gcvt(
    _Val : Double,
    _NumOfDigits : Int,
    _DstBuf : Pointer[CChar]) Pointer[CChar];

external _atodbl(
    _Result : Pointer[_CRT_DOUBLE],
    _Str : Pointer[CChar]) Int;

external _atoldbl(
    _Result : Pointer[_LDOUBLE],
    _Str : Pointer[CChar]) Int;

external _atoflt(
    _Result : Pointer[_CRT_FLOAT],
    _Str : Pointer[CChar]) Int;

external _atodbl_l(
    _Result : Pointer[_CRT_DOUBLE],
    _Str : Pointer[CChar],
    _Locale : _locale_t) Int;

external _atoldbl_l(
    _Result : Pointer[_LDOUBLE],
    _Str : Pointer[CChar],
    _Locale : _locale_t) Int;

external _atoflt_l(
    _Result : Pointer[_CRT_FLOAT],
    _Str : Pointer[CChar],
    _Locale : _locale_t) Int;

external _lrotl(
    _Val : UInt64,
    _Shift : Int) UInt64;

external _lrotr(
    _Val : UInt64,
    _Shift : Int) UInt64;

external _makepath(
    _Path : Pointer[CChar],
    _Drive : Pointer[CChar],
    _Dir : Pointer[CChar],
    _Filename : Pointer[CChar],
    _Ext : Pointer[CChar]);

external _onexit(
    _Func : _onexit_t) _onexit_t;

external perror(
    _ErrMsg : Pointer[CChar]);

external _putenv(
    _EnvString : Pointer[CChar]) Int;

external _searchenv(
    _Filename : Pointer[CChar],
    _EnvVar : Pointer[CChar],
    _ResultPath : Pointer[CChar]);

external _splitpath(
    _FullPath : Pointer[CChar],
    _Drive : Pointer[CChar],
    _Dir : Pointer[CChar],
    _Filename : Pointer[CChar],
    _Ext : Pointer[CChar]);

external _swab(
    _Buf1 : Pointer[CChar],
    _Buf2 : Pointer[CChar],
    _SizeInBytes : Int);

external _wfullpath(
    _FullPath : Pointer[UShort],
    _Path : Pointer[UShort],
    _SizeInWords : UInt64) Pointer[UShort];

external _wmakepath(
    _ResultPath : Pointer[UShort],
    _Drive : Pointer[UShort],
    _Dir : Pointer[UShort],
    _Filename : Pointer[UShort],
    _Ext : Pointer[UShort]);

external _wperror(
    _ErrMsg : Pointer[UShort]);

external _wputenv(
    _EnvString : Pointer[UShort]) Int;

external _wsearchenv(
    _Filename : Pointer[UShort],
    _EnvVar : Pointer[UShort],
    _ResultPath : Pointer[UShort]);

external _wsplitpath(
    _FullPath : Pointer[UShort],
    _Drive : Pointer[UShort],
    _Dir : Pointer[UShort],
    _Filename : Pointer[UShort],
    _Ext : Pointer[UShort]);

external _beep(
    _Frequency : UInt,
    _Duration : UInt);

external _seterrormode(
    _Mode : Int);

external _sleep(
    _Duration : CULong);

external ecvt(
    _Val : Double,
    _NumOfDigits : Int,
    _PtDec : Pointer[Int],
    _PtSign : Pointer[Int]) Pointer[CChar];

external fcvt(
    _Val : Double,
    _NumOfDec : Int,
    _PtDec : Pointer[Int],
    _PtSign : Pointer[Int]) Pointer[CChar];

external gcvt(
    _Val : Double,
    _NumOfDigits : Int,
    _DstBuf : Pointer[CChar]) Pointer[CChar];

external itoa(
    _Val : Int,
    _DstBuf : Pointer[CChar],
    _Radix : Int) Pointer[CChar];

external ltoa(
    _Val : CLong,
    _DstBuf : Pointer[CChar],
    _Radix : Int) Pointer[CChar];

external putenv(
    _EnvString : Pointer[CChar]) Int;

external swab(
    _Buf1 : Pointer[CChar],
    _Buf2 : Pointer[CChar],
    _SizeInBytes : Int);

external ultoa(
    _Val : CULong,
    _Dstbuf : Pointer[CChar],
    _Radix : Int) Pointer[CChar];

external onexit(
    _Func : _onexit_t) _onexit_t;

record UnnamedStruct6 (
    quot : Int64,
    rem : Int64,
);

alias lldiv_t = UnnamedStruct6;

external lldiv(
    argument0 : Int64,
    argument1 : Int64) lldiv_t;

external llabs(
    argument0 : Int64) Int64;

external strtoll(
    argument0 : Pointer[CChar],
    argument1 : Pointer[Pointer[CChar]],
    argument2 : Int) Int64;

external strtoull(
    argument0 : Pointer[CChar],
    argument1 : Pointer[Pointer[CChar]],
    argument2 : Int) UInt64;

external atoll(
    argument0 : Pointer[CChar]) Int64;

external wtoll(
    argument0 : Pointer[UShort]) Int64;

external lltoa(
    argument0 : Int64,
    argument1 : Pointer[CChar],
    argument2 : Int) Pointer[CChar];

external ulltoa(
    argument0 : UInt64,
    argument1 : Pointer[CChar],
    argument2 : Int) Pointer[CChar];

external lltow(
    argument0 : Int64,
    argument1 : Pointer[UShort],
    argument2 : Int) Pointer[UShort];

external ulltow(
    argument0 : UInt64,
    argument1 : Pointer[UShort],
    argument2 : Int) Pointer[UShort];

record Struct__heapinfo (
    _pentry : Pointer[Int],
    _size : UInt64,
    _useflag : Int,
);

alias _HEAPINFO = Struct__heapinfo;

external _amblksiz : UInt;

external _resetstkoflw() Int;

external _set_malloc_crt_max_wait(
    _NewValue : CULong) CULong;

external _expand(
    _Memory : RawPointer,
    _NewSize : UInt64) RawPointer;

external _msize(
    _Memory : RawPointer) UInt64;

external _get_sbh_threshold() UInt64;

external _set_sbh_threshold(
    _NewValue : UInt64) Int;

external _set_amblksiz(
    _Value : UInt64) Int;

external _get_amblksiz(
    _Value : Pointer[UInt64]) Int;

external _heapadd(
    _Memory : RawPointer,
    _Size : UInt64) Int;

external _heapchk() Int;

external _heapmin() Int;

external _heapset(
    _Fill : UInt) Int;

external _heapwalk(
    _EntryInfo : Pointer[_HEAPINFO]) Int;

external _heapused(
    _Used : Pointer[UInt64],
    _Commit : Pointer[UInt64]) UInt64;

external _get_heap_handle() Int64;

alias __m64 = UnknownType;

alias __v2si = UnknownType;

alias __v4hi = UnknownType;

alias __v8qi = UnknownType;

alias __v1di = UnknownType;

alias __v2sf = UnknownType;

alias __m128 = UnknownType;

alias __v4sf = UnknownType;

alias _MM_HINT_T0 = 3;
alias _MM_HINT_T1 = 2;
alias _MM_HINT_T2 = 1;
alias _MM_HINT_NTA = 0;

alias __v2df = UnknownType;

alias __v2di = UnknownType;

alias __v4si = UnknownType;

alias __v8hi = UnknownType;

alias __v16qi = UnknownType;

alias __m128i = UnknownType;

alias __m128d = UnknownType;

external _byteswap_ulong(
    value : CULong) CULong;

external ceil(
    argument0 : Double) Double;

external __debugbreak();

external _disable();

external __emul(
    argument0 : Int,
    argument1 : Int) Int64;

external __emulu(
    argument0 : UInt,
    argument1 : UInt) UInt64;

external _enable();

external _InterlockedCompare64Exchange128(
    Destination : Pointer[Int64],
    ExchangeHigh : Int64,
    ExchangeLow : Int64,
    Comparand : Int64) Int64;

external _InterlockedCompare64Exchange128_acq(
    Destination : Pointer[Int64],
    ExchangeHigh : Int64,
    ExchangeLow : Int64,
    Comparand : Int64) Int64;

external _InterlockedCompare64Exchange128_rel(
    Destination : Pointer[Int64],
    ExchangeHigh : Int64,
    ExchangeLow : Int64,
    Comparand : Int64) Int64;

external _InterlockedOr8(
    argument0 : Pointer[CChar],
    argument1 : CChar) CChar;

external _InterlockedOr16(
    argument0 : Pointer[Short],
    argument1 : Short) Short;

external _InterlockedXor8(
    argument0 : Pointer[CChar],
    argument1 : CChar) CChar;

external _InterlockedXor16(
    argument0 : Pointer[Short],
    argument1 : Short) Short;

external _InterlockedAnd8(
    argument0 : Pointer[CChar],
    argument1 : CChar) CChar;

external _InterlockedAnd16(
    argument0 : Pointer[Short],
    argument1 : Short) Short;

external _inp(
    argument0 : UShort) Int;

external inp(
    argument0 : UShort) Int;

external _inpd(
    argument0 : UShort) CULong;

external inpd(
    argument0 : UShort) CULong;

external _inpw(
    argument0 : UShort) UShort;

external inpw(
    argument0 : UShort) UShort;

external __ll_lshift(
    argument0 : UInt64,
    argument1 : Int) UInt64;

external __ll_rshift(
    argument0 : Int64,
    argument1 : Int) Int64;

external _outp(
    argument0 : UShort,
    argument1 : Int) Int;

external outp(
    argument0 : UShort,
    argument1 : Int) Int;

external _outpd(
    argument0 : UShort,
    argument1 : CULong) CULong;

external outpd(
    argument0 : UShort,
    argument1 : CULong) CULong;

external _outpw(
    argument0 : UShort,
    argument1 : UShort) UShort;

external outpw(
    argument0 : UShort,
    argument1 : UShort) UShort;

external _ReturnAddress() RawPointer;

external _setjmpex(
    argument0 : Pointer[_JBTYPE],
    argument1 : RawPointer) Int;

external __ull_rshift(
    argument0 : UInt64,
    argument1 : Int) UInt64;

external _AddressOfReturnAddress() RawPointer;

external _mm_add_sd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_add_pd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_div_sd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_div_pd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_max_sd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_max_pd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_min_sd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_min_pd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_mul_sd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_mul_pd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_sqrt_sd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_sqrt_pd(
    argument0 : __m128d) __m128d;

external _mm_sub_sd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_sub_pd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_and_pd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_andnot_pd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_or_pd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_xor_pd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_cmpeq_sd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_cmpeq_pd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_cmplt_sd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_cmplt_pd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_cmple_sd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_cmple_pd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_cmpgt_sd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_cmpgt_pd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_cmpge_sd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_cmpge_pd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_cmpneq_sd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_cmpneq_pd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_cmpnlt_sd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_cmpnlt_pd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_cmpnle_sd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_cmpnle_pd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_cmpngt_sd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_cmpngt_pd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_cmpnge_sd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_cmpnge_pd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_cmpord_sd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_cmpord_pd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_cmpunord_sd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_cmpunord_pd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_comieq_sd(
    argument0 : __m128d,
    argument1 : __m128d) Int;

external _mm_comilt_sd(
    argument0 : __m128d,
    argument1 : __m128d) Int;

external _mm_comile_sd(
    argument0 : __m128d,
    argument1 : __m128d) Int;

external _mm_comigt_sd(
    argument0 : __m128d,
    argument1 : __m128d) Int;

external _mm_comige_sd(
    argument0 : __m128d,
    argument1 : __m128d) Int;

external _mm_comineq_sd(
    argument0 : __m128d,
    argument1 : __m128d) Int;

external _mm_ucomieq_sd(
    argument0 : __m128d,
    argument1 : __m128d) Int;

external _mm_ucomilt_sd(
    argument0 : __m128d,
    argument1 : __m128d) Int;

external _mm_ucomile_sd(
    argument0 : __m128d,
    argument1 : __m128d) Int;

external _mm_ucomigt_sd(
    argument0 : __m128d,
    argument1 : __m128d) Int;

external _mm_ucomige_sd(
    argument0 : __m128d,
    argument1 : __m128d) Int;

external _mm_ucomineq_sd(
    argument0 : __m128d,
    argument1 : __m128d) Int;

external _mm_cvtpd_ps(
    argument0 : __m128d) __m128;

external _mm_cvtps_pd(
    argument0 : __m128) __m128d;

external _mm_cvtepi32_pd(
    argument0 : __m128i) __m128d;

external _mm_cvtpd_epi32(
    argument0 : __m128d) __m128i;

external _mm_cvtsd_si32(
    argument0 : __m128d) Int;

external _mm_cvtsd_ss(
    argument0 : __m128,
    argument1 : __m128d) __m128;

external _mm_cvtsi32_sd(
    argument0 : __m128d,
    argument1 : Int) __m128d;

external _mm_cvtss_sd(
    argument0 : __m128d,
    argument1 : __m128) __m128d;

external _mm_cvttpd_epi32(
    argument0 : __m128d) __m128i;

external _mm_cvttsd_si32(
    argument0 : __m128d) Int;

external _mm_cvtepi32_ps(
    argument0 : __m128i) __m128;

external _mm_cvtps_epi32(
    argument0 : __m128) __m128i;

external _mm_cvttps_epi32(
    argument0 : __m128) __m128i;

external _mm_unpackhi_pd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_unpacklo_pd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_movemask_pd(
    argument0 : __m128d) Int;

external _mm_load_pd(
    argument0 : Pointer[Double]) __m128d;

external _mm_load1_pd(
    argument0 : Pointer[Double]) __m128d;

external _mm_loadr_pd(
    argument0 : Pointer[Double]) __m128d;

external _mm_loadu_pd(
    argument0 : Pointer[Double]) __m128d;

external _mm_load_sd(
    argument0 : Pointer[Double]) __m128d;

external _mm_loadh_pd(
    argument0 : __m128d,
    argument1 : Pointer[Double]) __m128d;

external _mm_loadl_pd(
    argument0 : __m128d,
    argument1 : Pointer[Double]) __m128d;

external _mm_set_sd(
    argument0 : Double) __m128d;

external _mm_set1_pd(
    argument0 : Double) __m128d;

external _mm_set_pd(
    argument0 : Double,
    argument1 : Double) __m128d;

external _mm_setr_pd(
    argument0 : Double,
    argument1 : Double) __m128d;

external _mm_setzero_pd() __m128d;

external _mm_move_sd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_store_sd(
    argument0 : Pointer[Double],
    argument1 : __m128d);

external _mm_store1_pd(
    argument0 : Pointer[Double],
    argument1 : __m128d);

external _mm_store_pd(
    argument0 : Pointer[Double],
    argument1 : __m128d);

external _mm_storeu_pd(
    argument0 : Pointer[Double],
    argument1 : __m128d);

external _mm_storer_pd(
    argument0 : Pointer[Double],
    argument1 : __m128d);

external _mm_storeh_pd(
    argument0 : Pointer[Double],
    argument1 : __m128d);

external _mm_storel_pd(
    argument0 : Pointer[Double],
    argument1 : __m128d);

external _mm_add_epi8(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_add_epi16(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_add_epi32(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_add_epi64(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_adds_epi8(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_adds_epi16(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_adds_epu8(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_adds_epu16(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_avg_epu8(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_avg_epu16(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_madd_epi16(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_max_epi16(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_max_epu8(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_min_epi16(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_min_epu8(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_mulhi_epi16(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_mulhi_epu16(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_mullo_epi16(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_mul_epu32(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_sad_epu8(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_sub_epi8(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_sub_epi16(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_sub_epi32(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_sub_epi64(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_subs_epi8(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_subs_epi16(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_subs_epu8(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_subs_epu16(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_andnot_si128(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_and_si128(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_or_si128(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_xor_si128(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_sll_epi16(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_sll_epi32(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_sll_epi64(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_sra_epi16(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_sra_epi32(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_srl_epi16(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_srl_epi32(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_srl_epi64(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_cmpeq_epi8(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_cmpeq_epi16(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_cmpeq_epi32(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_cmpgt_epi8(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_cmpgt_epi16(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_cmpgt_epi32(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_cmplt_epi8(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_cmplt_epi16(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_cmplt_epi32(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_cvtsi32_si128(
    argument0 : Int) __m128i;

external _mm_cvtsi128_si32(
    argument0 : __m128i) Int;

external _mm_packs_epi16(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_packs_epi32(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_packus_epi16(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_movemask_epi8(
    argument0 : __m128i) Int;

external _mm_unpackhi_epi8(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_unpackhi_epi16(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_unpackhi_epi32(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_unpackhi_epi64(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_unpacklo_epi8(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_unpacklo_epi16(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_unpacklo_epi32(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_unpacklo_epi64(
    argument0 : __m128i,
    argument1 : __m128i) __m128i;

external _mm_load_si128(
    argument0 : Pointer[__m128i]) __m128i;

external _mm_loadu_si128(
    argument0 : Pointer[__m128i]) __m128i;

external _mm_loadl_epi64(
    argument0 : Pointer[__m128i]) __m128i;

external _mm_set_epi32(
    argument0 : Int,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int) __m128i;

external _mm_set_epi16(
    argument0 : Short,
    argument1 : Short,
    argument2 : Short,
    argument3 : Short,
    argument4 : Short,
    argument5 : Short,
    argument6 : Short,
    argument7 : Short) __m128i;

external _mm_set_epi8(
    argument0 : CChar,
    argument1 : CChar,
    argument2 : CChar,
    argument3 : CChar,
    argument4 : CChar,
    argument5 : CChar,
    argument6 : CChar,
    argument7 : CChar,
    argument8 : CChar,
    argument9 : CChar,
    argument10 : CChar,
    argument11 : CChar,
    argument12 : CChar,
    argument13 : CChar,
    argument14 : CChar,
    argument15 : CChar) __m128i;

external _mm_set1_epi32(
    argument0 : Int) __m128i;

external _mm_set1_epi16(
    argument0 : Short) __m128i;

external _mm_set1_epi8(
    argument0 : CChar) __m128i;

external _mm_setl_epi64(
    argument0 : __m128i) __m128i;

external _mm_setr_epi32(
    argument0 : Int,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int) __m128i;

external _mm_setr_epi16(
    argument0 : Short,
    argument1 : Short,
    argument2 : Short,
    argument3 : Short,
    argument4 : Short,
    argument5 : Short,
    argument6 : Short,
    argument7 : Short) __m128i;

external _mm_setr_epi8(
    argument0 : CChar,
    argument1 : CChar,
    argument2 : CChar,
    argument3 : CChar,
    argument4 : CChar,
    argument5 : CChar,
    argument6 : CChar,
    argument7 : CChar,
    argument8 : CChar,
    argument9 : CChar,
    argument10 : CChar,
    argument11 : CChar,
    argument12 : CChar,
    argument13 : CChar,
    argument14 : CChar,
    argument15 : CChar) __m128i;

external _mm_setzero_si128() __m128i;

external _mm_store_si128(
    argument0 : Pointer[__m128i],
    argument1 : __m128i);

external _mm_storeu_si128(
    argument0 : Pointer[__m128i],
    argument1 : __m128i);

external _mm_storel_epi64(
    argument0 : Pointer[__m128i],
    argument1 : __m128i);

external _mm_maskmoveu_si128(
    argument0 : __m128i,
    argument1 : __m128i,
    argument2 : Pointer[CChar]);

external _mm_move_epi64(
    argument0 : __m128i) __m128i;

external _mm_stream_pd(
    argument0 : Pointer[Double],
    argument1 : __m128d);

external _mm_stream_si128(
    argument0 : Pointer[__m128i],
    argument1 : __m128i);

external _mm_clflush(
    argument0 : RawPointer);

external _mm_lfence();

external _mm_mfence();

external _mm_stream_si32(
    argument0 : Pointer[Int],
    argument1 : Int);

external _mm_pause();

external _mm_addsub_ps(
    argument0 : __m128,
    argument1 : __m128) __m128;

external _mm_addsub_pd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_hadd_ps(
    argument0 : __m128,
    argument1 : __m128) __m128;

external _mm_hadd_pd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_hsub_ps(
    argument0 : __m128,
    argument1 : __m128) __m128;

external _mm_hsub_pd(
    argument0 : __m128d,
    argument1 : __m128d) __m128d;

external _mm_lddqu_si128(
    argument0 : Pointer[__m128i]) __m128i;

external _mm_monitor(
    argument0 : RawPointer,
    argument1 : UInt,
    argument2 : UInt);

external _mm_movedup_pd(
    argument0 : __m128d) __m128d;

external _mm_loaddup_pd(
    argument0 : Pointer[Double]) __m128d;

external _mm_movehdup_ps(
    argument0 : __m128) __m128;

external _mm_moveldup_ps(
    argument0 : __m128) __m128;

external _mm_mwait(
    argument0 : UInt,
    argument1 : UInt);

external _WriteBarrier();

external __mulh(
    argument0 : Int64,
    argument1 : Int64) Int64;

external __umulh(
    argument0 : UInt64,
    argument1 : UInt64) UInt64;

external __readcr0() UInt64;

external __readcr2() UInt64;

external __readcr3() UInt64;

external __readcr4() UInt64;

external __readcr8() UInt64;

external __writecr0(
    argument0 : UInt64);

external __writecr3(
    argument0 : UInt64);

external __writecr4(
    argument0 : UInt64);

external __writecr8(
    argument0 : UInt64);

external __wbinvd();

external __invlpg(
    argument0 : RawPointer);

external __readmsr(
    argument0 : CULong) UInt64;

external __writemsr(
    argument0 : CULong,
    argument1 : UInt64);

external __rdtsc() UInt64;

external __movsb(
    argument0 : Pointer[CUChar],
    argument1 : Pointer[CUChar],
    argument2 : UInt64);

external __movsw(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort],
    argument2 : UInt64);

external __movsd(
    argument0 : Pointer[CULong],
    argument1 : Pointer[CULong],
    argument2 : UInt64);

external __movsq(
    argument0 : Pointer[UInt64],
    argument1 : Pointer[UInt64],
    argument2 : UInt64);

external __readgsbyte(
    Offset : CULong) CUChar;

external __readgsword(
    Offset : CULong) UShort;

external __readgsdword(
    Offset : CULong) CULong;

external __readgsqword(
    Offset : CULong) UInt64;

external __writegsbyte(
    Offset : CULong,
    Data : CUChar);

external __writegsword(
    Offset : CULong,
    Data : UShort);

external __writegsdword(
    Offset : CULong,
    Data : CULong);

external __writegsqword(
    Offset : CULong,
    Data : UInt64);

external __inbyte(
    Port : UShort) CUChar;

external __inword(
    Port : UShort) UShort;

external __indword(
    Port : UShort) CULong;

external __outbyte(
    Port : UShort,
    Data : CUChar);

external __outword(
    Port : UShort,
    Data : UShort);

external __outdword(
    Port : UShort,
    Data : CULong);

external __inbytestring(
    Port : UShort,
    Buffer : Pointer[CUChar],
    Count : CULong);

external __inwordstring(
    Port : UShort,
    Buffer : Pointer[UShort],
    Count : CULong);

external __indwordstring(
    Port : UShort,
    Buffer : Pointer[CULong],
    Count : CULong);

external __outbytestring(
    Port : UShort,
    Buffer : Pointer[CUChar],
    Count : CULong);

external __outwordstring(
    Port : UShort,
    Buffer : Pointer[UShort],
    Count : CULong);

external __outdwordstring(
    Port : UShort,
    Buffer : Pointer[CULong],
    Count : CULong);

external __getcallerseflags() UInt;

external _mm_set_epi64x(
    i1 : Int64,
    i0 : Int64) __m128i;

external _mm_set1_epi64x(
    i : Int64) __m128i;

external _mm_cvtsd_si64x(
    a : __m128d) Int64;

external _mm_cvtsi64x_sd(
    a : __m128d,
    b : Int64) __m128d;

external _mm_cvtsi64x_ss(
    a : __m128,
    b : Int64) __m128;

external _mm_cvtss_si64x(
    a : __m128) Int64;

external _mm_cvttsd_si64x(
    a : __m128d) Int64;

external _mm_cvttss_si64x(
    a : __m128) Int64;

external _mm_cvtsi64x_si128(
    a : Int64) __m128i;

external _mm_cvtsi128_si64x(
    a : __m128i) Int64;

external _mm_stream_si64x(
    argument0 : Pointer[Int64],
    argument1 : Int64);

external __stosb(
    argument0 : Pointer[CUChar],
    argument1 : CUChar,
    argument2 : UInt64);

external __stosw(
    argument0 : Pointer[UShort],
    argument1 : UShort,
    argument2 : UInt64);

external __stosd(
    argument0 : Pointer[CULong],
    argument1 : CULong,
    argument2 : UInt64);

external __stosq(
    argument0 : Pointer[UInt64],
    argument1 : UInt64,
    argument2 : UInt64);

external __cpuid(
    a : Pointer[Int],
    b : Int);

external __readpmc(
    a : CULong) UInt64;

external __segmentlimit(
    a : CULong) CULong;

external __rolq(
    argument0 : UInt64,
    argument1 : Int) UInt64;

external __rorq(
    argument0 : UInt64,
    argument1 : Int) UInt64;

external __shiftleft128(
    LowPart : UInt64,
    HighPart : UInt64,
    Shift : CUChar) UInt64;

external __shiftright128(
    LowPart : UInt64,
    HighPart : UInt64,
    Shift : CUChar) UInt64;

external _umul128(
    multiplier : UInt64,
    multiplicand : UInt64,
    highproduct : Pointer[UInt64]) UInt64;

external _mul128(
    multiplier : Int64,
    multiplicand : Int64,
    highproduct : Pointer[Int64]) Int64;

external __int2c();

external _ReadBarrier();

external __nvreg_save_fence();

external __nvreg_restore_fence();

external _InterlockedCompareExchange16_np(
    Destination : Pointer[Short],
    Exchange : Short,
    Comparand : Short) Short;

external _InterlockedCompareExchange_np(
    argument0 : Pointer[CLong],
    argument1 : CLong,
    argument2 : CLong) CLong;

external _InterlockedCompareExchange64_np(
    argument0 : Pointer[Int64],
    argument1 : Int64,
    argument2 : Int64) Int64;

external _InterlockedCompareExchangePointer_np(
    argument0 : Pointer[RawPointer],
    argument1 : RawPointer,
    argument2 : RawPointer) RawPointer;

external _InterlockedCompare64Exchange128_np(
    Destination : Pointer[Int64],
    ExchangeHigh : Int64,
    ExchangeLow : Int64,
    Comparand : Int64) Int64;

external _InterlockedCompare64Exchange128_acq_np(
    Destination : Pointer[Int64],
    ExchangeHigh : Int64,
    ExchangeLow : Int64,
    Comparand : Int64) Int64;

external _InterlockedCompare64Exchange128_rel_np(
    Destination : Pointer[Int64],
    ExchangeHigh : Int64,
    ExchangeLow : Int64,
    Comparand : Int64) Int64;

external _InterlockedAnd_np(
    argument0 : Pointer[CLong],
    argument1 : CLong) CLong;

external _InterlockedAnd8_np(
    argument0 : Pointer[CChar],
    argument1 : CChar) CChar;

external _InterlockedAnd16_np(
    argument0 : Pointer[Short],
    argument1 : Short) Short;

external _InterlockedAnd64_np(
    argument0 : Pointer[Int64],
    argument1 : Int64) Int64;

external _InterlockedOr_np(
    argument0 : Pointer[CLong],
    argument1 : CLong) CLong;

external _InterlockedOr8_np(
    argument0 : Pointer[CChar],
    argument1 : CChar) CChar;

external _InterlockedOr16_np(
    argument0 : Pointer[Short],
    argument1 : Short) Short;

external _InterlockedOr64_np(
    argument0 : Pointer[Int64],
    argument1 : Int64) Int64;

external _InterlockedXor_np(
    argument0 : Pointer[CLong],
    argument1 : CLong) CLong;

external _InterlockedXor8_np(
    argument0 : Pointer[CChar],
    argument1 : CChar) CChar;

external _InterlockedXor16_np(
    argument0 : Pointer[Short],
    argument1 : Short) Short;

external _InterlockedXor64_np(
    argument0 : Pointer[Int64],
    argument1 : Int64) Int64;

external MultiplyExtract128(
    Multiplier : Int64,
    Multiplicand : Int64,
    Shift : CUChar) Int64;

external UnsignedMultiplyExtract128(
    Multiplier : UInt64,
    Multiplicand : UInt64,
    Shift : CUChar) UInt64;

record Struct__M128A (
    Low : UInt64,
    High : Int64,
);

alias M128A = Struct__M128A;

alias PM128A = Pointer[Struct__M128A];

record Struct__XMM_SAVE_AREA32 (
    ControlWord : UShort,
    StatusWord : UShort,
    TagWord : CUChar,
    Reserved1 : CUChar,
    ErrorOpcode : UShort,
    ErrorOffset : CULong,
    ErrorSelector : UShort,
    Reserved2 : UShort,
    DataOffset : CULong,
    DataSelector : UShort,
    Reserved3 : UShort,
    MxCsr : CULong,
    MxCsr_Mask : CULong,
    FloatRegisters : Array[M128A,8],
    XmmRegisters : Array[M128A,16],
    Reserved4 : Array[CUChar,96],
);

alias XMM_SAVE_AREA32 = Struct__XMM_SAVE_AREA32;

alias PXMM_SAVE_AREA32 = Pointer[Struct__XMM_SAVE_AREA32];

record Struct__CONTEXT (
    P1Home : UInt64,
    P2Home : UInt64,
    P3Home : UInt64,
    P4Home : UInt64,
    P5Home : UInt64,
    P6Home : UInt64,
    ContextFlags : CULong,
    MxCsr : CULong,
    SegCs : UShort,
    SegDs : UShort,
    SegEs : UShort,
    SegFs : UShort,
    SegGs : UShort,
    SegSs : UShort,
    EFlags : CULong,
    Dr0 : UInt64,
    Dr1 : UInt64,
    Dr2 : UInt64,
    Dr3 : UInt64,
    Dr6 : UInt64,
    Dr7 : UInt64,
    Rax : UInt64,
    Rcx : UInt64,
    Rdx : UInt64,
    Rbx : UInt64,
    Rsp : UInt64,
    Rbp : UInt64,
    Rsi : UInt64,
    Rdi : UInt64,
    R8 : UInt64,
    R9 : UInt64,
    R10 : UInt64,
    R11 : UInt64,
    R12 : UInt64,
    R13 : UInt64,
    R14 : UInt64,
    R15 : UInt64,
    Rip : UInt64,
    unnamed_field38 : AUnionType,
    VectorRegister : Array[M128A,26],
    VectorControl : UInt64,
    DebugControl : UInt64,
    LastBranchToRip : UInt64,
    LastBranchFromRip : UInt64,
    LastExceptionToRip : UInt64,
    LastExceptionFromRip : UInt64,
);

alias CONTEXT = Struct__CONTEXT;

alias PCONTEXT = Pointer[Struct__CONTEXT];

record Struct__RUNTIME_FUNCTION (
    BeginAddress : CULong,
    EndAddress : CULong,
    UnwindData : CULong,
);

alias RUNTIME_FUNCTION = Struct__RUNTIME_FUNCTION;

alias PRUNTIME_FUNCTION = Pointer[Struct__RUNTIME_FUNCTION];

alias PGET_RUNTIME_FUNCTION_CALLBACK = CCodePointer[(UInt64,RawPointer),(Pointer[Struct__RUNTIME_FUNCTION])];

alias POUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK = CCodePointer[(RawPointer,RawPointer,Pointer[CULong],Pointer[Pointer[Struct__RUNTIME_FUNCTION]]),(CULong)];

external RtlRestoreContext(
    ContextRecord : PCONTEXT,
    ExceptionRecord : Pointer[Struct__EXCEPTION_RECORD]);

external RtlAddFunctionTable(
    FunctionTable : PRUNTIME_FUNCTION,
    EntryCount : CULong,
    BaseAddress : UInt64) CUChar;

external RtlInstallFunctionTableCallback(
    TableIdentifier : UInt64,
    BaseAddress : UInt64,
    Length : CULong,
    Callback : PGET_RUNTIME_FUNCTION_CALLBACK,
    Context : PVOID,
    OutOfProcessCallbackDll : PCWSTR) CUChar;

external RtlDeleteFunctionTable(
    FunctionTable : PRUNTIME_FUNCTION) CUChar;

record Struct__LDT_ENTRY (
    LimitLow : UShort,
    BaseLow : UShort,
    HighWord : AUnionType,
);

alias LDT_ENTRY = Struct__LDT_ENTRY;

alias PLDT_ENTRY = Pointer[Struct__LDT_ENTRY];

record Struct__EXCEPTION_RECORD (
    ExceptionCode : CULong,
    ExceptionFlags : CULong,
    ExceptionRecord : Pointer[Struct__EXCEPTION_RECORD],
    ExceptionAddress : PVOID,
    NumberParameters : CULong,
    ExceptionInformation : Array[UInt64,15],
);

alias EXCEPTION_RECORD = Struct__EXCEPTION_RECORD;

alias PEXCEPTION_RECORD = Pointer[EXCEPTION_RECORD];

record Struct__EXCEPTION_RECORD32 (
    ExceptionCode : CULong,
    ExceptionFlags : CULong,
    ExceptionRecord : CULong,
    ExceptionAddress : CULong,
    NumberParameters : CULong,
    ExceptionInformation : Array[CULong,15],
);

alias EXCEPTION_RECORD32 = Struct__EXCEPTION_RECORD32;

alias PEXCEPTION_RECORD32 = Pointer[Struct__EXCEPTION_RECORD32];

record Struct__EXCEPTION_RECORD64 (
    ExceptionCode : CULong,
    ExceptionFlags : CULong,
    ExceptionRecord : UInt64,
    ExceptionAddress : UInt64,
    NumberParameters : CULong,
    __unusedAlignment : CULong,
    ExceptionInformation : Array[UInt64,15],
);

alias EXCEPTION_RECORD64 = Struct__EXCEPTION_RECORD64;

alias PEXCEPTION_RECORD64 = Pointer[Struct__EXCEPTION_RECORD64];

record Struct__EXCEPTION_POINTERS (
    ExceptionRecord : PEXCEPTION_RECORD,
    ContextRecord : PCONTEXT,
);

alias EXCEPTION_POINTERS = Struct__EXCEPTION_POINTERS;

alias PEXCEPTION_POINTERS = Pointer[Struct__EXCEPTION_POINTERS];

alias PACCESS_TOKEN = PVOID;

alias PSECURITY_DESCRIPTOR = PVOID;

alias PSID = PVOID;

alias ACCESS_MASK = CULong;

alias PACCESS_MASK = Pointer[CULong];

record Struct__GENERIC_MAPPING (
    GenericRead : CULong,
    GenericWrite : CULong,
    GenericExecute : CULong,
    GenericAll : CULong,
);

alias GENERIC_MAPPING = Struct__GENERIC_MAPPING;

alias PGENERIC_MAPPING = Pointer[GENERIC_MAPPING];

record Struct__LUID_AND_ATTRIBUTES (
    Luid : LUID,
    Attributes : CULong,
);

alias LUID_AND_ATTRIBUTES = Struct__LUID_AND_ATTRIBUTES;

alias PLUID_AND_ATTRIBUTES = Pointer[Struct__LUID_AND_ATTRIBUTES];

alias LUID_AND_ATTRIBUTES_ARRAY = Array[LUID_AND_ATTRIBUTES,1];

alias PLUID_AND_ATTRIBUTES_ARRAY = Pointer[LUID_AND_ATTRIBUTES_ARRAY];

record Struct__SID_IDENTIFIER_AUTHORITY (
    Value : Array[CUChar,6],
);

alias SID_IDENTIFIER_AUTHORITY = Struct__SID_IDENTIFIER_AUTHORITY;

alias PSID_IDENTIFIER_AUTHORITY = Pointer[Struct__SID_IDENTIFIER_AUTHORITY];

record Struct__SID (
    Revision : CUChar,
    SubAuthorityCount : CUChar,
    IdentifierAuthority : SID_IDENTIFIER_AUTHORITY,
    SubAuthority : Array[CULong,1],
);

alias SID = Struct__SID;

alias PISID = Pointer[Struct__SID];

alias SidTypeUser = 1;
alias SidTypeGroup = 2;
alias SidTypeDomain = 3;
alias SidTypeAlias = 4;
alias SidTypeWellKnownGroup = 5;
alias SidTypeDeletedAccount = 6;
alias SidTypeInvalid = 7;
alias SidTypeUnknown = 8;
alias SidTypeComputer = 9;

alias SID_NAME_USE = Int;

alias PSID_NAME_USE = Pointer[Int];

record Struct__SID_AND_ATTRIBUTES (
    Sid : PSID,
    Attributes : CULong,
);

alias SID_AND_ATTRIBUTES = Struct__SID_AND_ATTRIBUTES;

alias PSID_AND_ATTRIBUTES = Pointer[Struct__SID_AND_ATTRIBUTES];

alias SID_AND_ATTRIBUTES_ARRAY = Array[SID_AND_ATTRIBUTES,1];

alias PSID_AND_ATTRIBUTES_ARRAY = Pointer[SID_AND_ATTRIBUTES_ARRAY];

alias WinNullSid = 0;
alias WinWorldSid = 1;
alias WinLocalSid = 2;
alias WinCreatorOwnerSid = 3;
alias WinCreatorGroupSid = 4;
alias WinCreatorOwnerServerSid = 5;
alias WinCreatorGroupServerSid = 6;
alias WinNtAuthoritySid = 7;
alias WinDialupSid = 8;
alias WinNetworkSid = 9;
alias WinBatchSid = 10;
alias WinInteractiveSid = 11;
alias WinServiceSid = 12;
alias WinAnonymousSid = 13;
alias WinProxySid = 14;
alias WinEnterpriseControllersSid = 15;
alias WinSelfSid = 16;
alias WinAuthenticatedUserSid = 17;
alias WinRestrictedCodeSid = 18;
alias WinTerminalServerSid = 19;
alias WinRemoteLogonIdSid = 20;
alias WinLogonIdsSid = 21;
alias WinLocalSystemSid = 22;
alias WinLocalServiceSid = 23;
alias WinNetworkServiceSid = 24;
alias WinBuiltinDomainSid = 25;
alias WinBuiltinAdministratorsSid = 26;
alias WinBuiltinUsersSid = 27;
alias WinBuiltinGuestsSid = 28;
alias WinBuiltinPowerUsersSid = 29;
alias WinBuiltinAccountOperatorsSid = 30;
alias WinBuiltinSystemOperatorsSid = 31;
alias WinBuiltinPrintOperatorsSid = 32;
alias WinBuiltinBackupOperatorsSid = 33;
alias WinBuiltinReplicatorSid = 34;
alias WinBuiltinPreWindows2000CompatibleAccessSid = 35;
alias WinBuiltinRemoteDesktopUsersSid = 36;
alias WinBuiltinNetworkConfigurationOperatorsSid = 37;
alias WinAccountAdministratorSid = 38;
alias WinAccountGuestSid = 39;
alias WinAccountKrbtgtSid = 40;
alias WinAccountDomainAdminsSid = 41;
alias WinAccountDomainUsersSid = 42;
alias WinAccountDomainGuestsSid = 43;
alias WinAccountComputersSid = 44;
alias WinAccountControllersSid = 45;
alias WinAccountCertAdminsSid = 46;
alias WinAccountSchemaAdminsSid = 47;
alias WinAccountEnterpriseAdminsSid = 48;
alias WinAccountPolicyAdminsSid = 49;
alias WinAccountRasAndIasServersSid = 50;
alias WinNTLMAuthenticationSid = 51;
alias WinDigestAuthenticationSid = 52;
alias WinSChannelAuthenticationSid = 53;
alias WinThisOrganizationSid = 54;
alias WinOtherOrganizationSid = 55;
alias WinBuiltinIncomingForestTrustBuildersSid = 56;
alias WinBuiltinPerfMonitoringUsersSid = 57;
alias WinBuiltinPerfLoggingUsersSid = 58;
alias WinBuiltinAuthorizationAccessSid = 59;
alias WinBuiltinTerminalServerLicenseServersSid = 60;
alias WinBuiltinDCOMUsersSid = 61;

alias WELL_KNOWN_SID_TYPE = Int;

record Struct__ACL (
    AclRevision : CUChar,
    Sbz1 : CUChar,
    AclSize : UShort,
    AceCount : UShort,
    Sbz2 : UShort,
);

alias ACL = Struct__ACL;

alias PACL = Pointer[ACL];

record Struct__ACE_HEADER (
    AceType : CUChar,
    AceFlags : CUChar,
    AceSize : UShort,
);

alias ACE_HEADER = Struct__ACE_HEADER;

alias PACE_HEADER = Pointer[ACE_HEADER];

record Struct__ACCESS_ALLOWED_ACE (
    Header : ACE_HEADER,
    Mask : CULong,
    SidStart : CULong,
);

alias ACCESS_ALLOWED_ACE = Struct__ACCESS_ALLOWED_ACE;

alias PACCESS_ALLOWED_ACE = Pointer[ACCESS_ALLOWED_ACE];

record Struct__ACCESS_DENIED_ACE (
    Header : ACE_HEADER,
    Mask : CULong,
    SidStart : CULong,
);

alias ACCESS_DENIED_ACE = Struct__ACCESS_DENIED_ACE;

alias PACCESS_DENIED_ACE = Pointer[ACCESS_DENIED_ACE];

record Struct__SYSTEM_AUDIT_ACE (
    Header : ACE_HEADER,
    Mask : CULong,
    SidStart : CULong,
);

alias SYSTEM_AUDIT_ACE = Struct__SYSTEM_AUDIT_ACE;

alias PSYSTEM_AUDIT_ACE = Pointer[SYSTEM_AUDIT_ACE];

record Struct__SYSTEM_ALARM_ACE (
    Header : ACE_HEADER,
    Mask : CULong,
    SidStart : CULong,
);

alias SYSTEM_ALARM_ACE = Struct__SYSTEM_ALARM_ACE;

alias PSYSTEM_ALARM_ACE = Pointer[SYSTEM_ALARM_ACE];

record Struct__SYSTEM_MANDATORY_LABEL_ACE (
    Header : ACE_HEADER,
    Mask : CULong,
    SidStart : CULong,
);

alias SYSTEM_MANDATORY_LABEL_ACE = Struct__SYSTEM_MANDATORY_LABEL_ACE;

alias PSYSTEM_MANDATORY_LABEL_ACE = Pointer[Struct__SYSTEM_MANDATORY_LABEL_ACE];

record Struct__ACCESS_ALLOWED_OBJECT_ACE (
    Header : ACE_HEADER,
    Mask : CULong,
    Flags : CULong,
    ObjectType : GUID,
    InheritedObjectType : GUID,
    SidStart : CULong,
);

alias ACCESS_ALLOWED_OBJECT_ACE = Struct__ACCESS_ALLOWED_OBJECT_ACE;

alias PACCESS_ALLOWED_OBJECT_ACE = Pointer[Struct__ACCESS_ALLOWED_OBJECT_ACE];

record Struct__ACCESS_DENIED_OBJECT_ACE (
    Header : ACE_HEADER,
    Mask : CULong,
    Flags : CULong,
    ObjectType : GUID,
    InheritedObjectType : GUID,
    SidStart : CULong,
);

alias ACCESS_DENIED_OBJECT_ACE = Struct__ACCESS_DENIED_OBJECT_ACE;

alias PACCESS_DENIED_OBJECT_ACE = Pointer[Struct__ACCESS_DENIED_OBJECT_ACE];

record Struct__SYSTEM_AUDIT_OBJECT_ACE (
    Header : ACE_HEADER,
    Mask : CULong,
    Flags : CULong,
    ObjectType : GUID,
    InheritedObjectType : GUID,
    SidStart : CULong,
);

alias SYSTEM_AUDIT_OBJECT_ACE = Struct__SYSTEM_AUDIT_OBJECT_ACE;

alias PSYSTEM_AUDIT_OBJECT_ACE = Pointer[Struct__SYSTEM_AUDIT_OBJECT_ACE];

record Struct__SYSTEM_ALARM_OBJECT_ACE (
    Header : ACE_HEADER,
    Mask : CULong,
    Flags : CULong,
    ObjectType : GUID,
    InheritedObjectType : GUID,
    SidStart : CULong,
);

alias SYSTEM_ALARM_OBJECT_ACE = Struct__SYSTEM_ALARM_OBJECT_ACE;

alias PSYSTEM_ALARM_OBJECT_ACE = Pointer[Struct__SYSTEM_ALARM_OBJECT_ACE];

record Struct__ACCESS_ALLOWED_CALLBACK_ACE (
    Header : ACE_HEADER,
    Mask : CULong,
    SidStart : CULong,
);

alias ACCESS_ALLOWED_CALLBACK_ACE = Struct__ACCESS_ALLOWED_CALLBACK_ACE;

alias PACCESS_ALLOWED_CALLBACK_ACE = Pointer[Struct__ACCESS_ALLOWED_CALLBACK_ACE];

record Struct__ACCESS_DENIED_CALLBACK_ACE (
    Header : ACE_HEADER,
    Mask : CULong,
    SidStart : CULong,
);

alias ACCESS_DENIED_CALLBACK_ACE = Struct__ACCESS_DENIED_CALLBACK_ACE;

alias PACCESS_DENIED_CALLBACK_ACE = Pointer[Struct__ACCESS_DENIED_CALLBACK_ACE];

record Struct__SYSTEM_AUDIT_CALLBACK_ACE (
    Header : ACE_HEADER,
    Mask : CULong,
    SidStart : CULong,
);

alias SYSTEM_AUDIT_CALLBACK_ACE = Struct__SYSTEM_AUDIT_CALLBACK_ACE;

alias PSYSTEM_AUDIT_CALLBACK_ACE = Pointer[Struct__SYSTEM_AUDIT_CALLBACK_ACE];

record Struct__SYSTEM_ALARM_CALLBACK_ACE (
    Header : ACE_HEADER,
    Mask : CULong,
    SidStart : CULong,
);

alias SYSTEM_ALARM_CALLBACK_ACE = Struct__SYSTEM_ALARM_CALLBACK_ACE;

alias PSYSTEM_ALARM_CALLBACK_ACE = Pointer[Struct__SYSTEM_ALARM_CALLBACK_ACE];

record Struct__ACCESS_ALLOWED_CALLBACK_OBJECT_ACE (
    Header : ACE_HEADER,
    Mask : CULong,
    Flags : CULong,
    ObjectType : GUID,
    InheritedObjectType : GUID,
    SidStart : CULong,
);

alias ACCESS_ALLOWED_CALLBACK_OBJECT_ACE = Struct__ACCESS_ALLOWED_CALLBACK_OBJECT_ACE;

alias PACCESS_ALLOWED_CALLBACK_OBJECT_ACE = Pointer[Struct__ACCESS_ALLOWED_CALLBACK_OBJECT_ACE];

record Struct__ACCESS_DENIED_CALLBACK_OBJECT_ACE (
    Header : ACE_HEADER,
    Mask : CULong,
    Flags : CULong,
    ObjectType : GUID,
    InheritedObjectType : GUID,
    SidStart : CULong,
);

alias ACCESS_DENIED_CALLBACK_OBJECT_ACE = Struct__ACCESS_DENIED_CALLBACK_OBJECT_ACE;

alias PACCESS_DENIED_CALLBACK_OBJECT_ACE = Pointer[Struct__ACCESS_DENIED_CALLBACK_OBJECT_ACE];

record Struct__SYSTEM_AUDIT_CALLBACK_OBJECT_ACE (
    Header : ACE_HEADER,
    Mask : CULong,
    Flags : CULong,
    ObjectType : GUID,
    InheritedObjectType : GUID,
    SidStart : CULong,
);

alias SYSTEM_AUDIT_CALLBACK_OBJECT_ACE = Struct__SYSTEM_AUDIT_CALLBACK_OBJECT_ACE;

alias PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE = Pointer[Struct__SYSTEM_AUDIT_CALLBACK_OBJECT_ACE];

record Struct__SYSTEM_ALARM_CALLBACK_OBJECT_ACE (
    Header : ACE_HEADER,
    Mask : CULong,
    Flags : CULong,
    ObjectType : GUID,
    InheritedObjectType : GUID,
    SidStart : CULong,
);

alias SYSTEM_ALARM_CALLBACK_OBJECT_ACE = Struct__SYSTEM_ALARM_CALLBACK_OBJECT_ACE;

alias PSYSTEM_ALARM_CALLBACK_OBJECT_ACE = Pointer[Struct__SYSTEM_ALARM_CALLBACK_OBJECT_ACE];

alias AclRevisionInformation = 1;
alias AclSizeInformation = 2;

alias ACL_INFORMATION_CLASS = Int;

record Struct__ACL_REVISION_INFORMATION (
    AclRevision : CULong,
);

alias ACL_REVISION_INFORMATION = Struct__ACL_REVISION_INFORMATION;

alias PACL_REVISION_INFORMATION = Pointer[ACL_REVISION_INFORMATION];

record Struct__ACL_SIZE_INFORMATION (
    AceCount : CULong,
    AclBytesInUse : CULong,
    AclBytesFree : CULong,
);

alias ACL_SIZE_INFORMATION = Struct__ACL_SIZE_INFORMATION;

alias PACL_SIZE_INFORMATION = Pointer[ACL_SIZE_INFORMATION];

alias SECURITY_DESCRIPTOR_CONTROL = UShort;

alias PSECURITY_DESCRIPTOR_CONTROL = Pointer[UShort];

record Struct__SECURITY_DESCRIPTOR_RELATIVE (
    Revision : CUChar,
    Sbz1 : CUChar,
    Control : UShort,
    Owner : CULong,
    Group : CULong,
    Sacl : CULong,
    Dacl : CULong,
);

alias SECURITY_DESCRIPTOR_RELATIVE = Struct__SECURITY_DESCRIPTOR_RELATIVE;

alias PISECURITY_DESCRIPTOR_RELATIVE = Pointer[Struct__SECURITY_DESCRIPTOR_RELATIVE];

record Struct__SECURITY_DESCRIPTOR (
    Revision : CUChar,
    Sbz1 : CUChar,
    Control : UShort,
    Owner : PSID,
    Group : PSID,
    Sacl : PACL,
    Dacl : PACL,
);

alias SECURITY_DESCRIPTOR = Struct__SECURITY_DESCRIPTOR;

alias PISECURITY_DESCRIPTOR = Pointer[Struct__SECURITY_DESCRIPTOR];

record Struct__OBJECT_TYPE_LIST (
    Level : UShort,
    Sbz : UShort,
    ObjectType : Pointer[GUID],
);

alias OBJECT_TYPE_LIST = Struct__OBJECT_TYPE_LIST;

alias POBJECT_TYPE_LIST = Pointer[Struct__OBJECT_TYPE_LIST];

alias AuditEventObjectAccess = 0;
alias AuditEventDirectoryServiceAccess = 1;

alias AUDIT_EVENT_TYPE = Int;

alias PAUDIT_EVENT_TYPE = Pointer[Int];

record Struct__PRIVILEGE_SET (
    PrivilegeCount : CULong,
    Control : CULong,
    Privilege : Array[LUID_AND_ATTRIBUTES,1],
);

alias PRIVILEGE_SET = Struct__PRIVILEGE_SET;

alias PPRIVILEGE_SET = Pointer[Struct__PRIVILEGE_SET];

alias SecurityAnonymous = 0;
alias SecurityIdentification = 1;
alias SecurityImpersonation = 2;
alias SecurityDelegation = 3;

alias SECURITY_IMPERSONATION_LEVEL = Int;

alias PSECURITY_IMPERSONATION_LEVEL = Pointer[Int];

alias TokenPrimary = 1;
alias TokenImpersonation = 2;

alias TOKEN_TYPE = Int;

alias PTOKEN_TYPE = Pointer[TOKEN_TYPE];

alias TokenElevationTypeDefault = 1;
alias TokenElevationTypeFull = 2;
alias TokenElevationTypeLimited = 3;

alias TOKEN_ELEVATION_TYPE = Int;

alias PTOKEN_ELEVATION_TYPE = Pointer[Int];

alias TokenUser = 1;
alias TokenGroups = 2;
alias TokenPrivileges = 3;
alias TokenOwner = 4;
alias TokenPrimaryGroup = 5;
alias TokenDefaultDacl = 6;
alias TokenSource = 7;
alias TokenType = 8;
alias TokenImpersonationLevel = 9;
alias TokenStatistics = 10;
alias TokenRestrictedSids = 11;
alias TokenSessionId = 12;
alias TokenGroupsAndPrivileges = 13;
alias TokenSessionReference = 14;
alias TokenSandBoxInert = 15;
alias TokenAuditPolicy = 16;
alias TokenOrigin = 17;
alias TokenElevationType = 18;
alias TokenLinkedToken = 19;
alias TokenElevation = 20;
alias TokenHasRestrictions = 21;
alias TokenAccessInformation = 22;
alias TokenVirtualizationAllowed = 23;
alias TokenVirtualizationEnabled = 24;
alias TokenIntegrityLevel = 25;
alias TokenUIAccess = 26;
alias TokenMandatoryPolicy = 27;
alias TokenLogonSid = 28;
alias MaxTokenInfoClass = 29;

alias TOKEN_INFORMATION_CLASS = Int;

alias PTOKEN_INFORMATION_CLASS = Pointer[Int];

record Struct__TOKEN_USER (
    User : SID_AND_ATTRIBUTES,
);

alias TOKEN_USER = Struct__TOKEN_USER;

alias PTOKEN_USER = Pointer[Struct__TOKEN_USER];

record Struct__TOKEN_GROUPS (
    GroupCount : CULong,
    Groups : Array[SID_AND_ATTRIBUTES,1],
);

alias TOKEN_GROUPS = Struct__TOKEN_GROUPS;

alias PTOKEN_GROUPS = Pointer[Struct__TOKEN_GROUPS];

record Struct__TOKEN_PRIVILEGES (
    PrivilegeCount : CULong,
    Privileges : Array[LUID_AND_ATTRIBUTES,1],
);

alias TOKEN_PRIVILEGES = Struct__TOKEN_PRIVILEGES;

alias PTOKEN_PRIVILEGES = Pointer[Struct__TOKEN_PRIVILEGES];

record Struct__TOKEN_OWNER (
    Owner : PSID,
);

alias TOKEN_OWNER = Struct__TOKEN_OWNER;

alias PTOKEN_OWNER = Pointer[Struct__TOKEN_OWNER];

record Struct__TOKEN_PRIMARY_GROUP (
    PrimaryGroup : PSID,
);

alias TOKEN_PRIMARY_GROUP = Struct__TOKEN_PRIMARY_GROUP;

alias PTOKEN_PRIMARY_GROUP = Pointer[Struct__TOKEN_PRIMARY_GROUP];

record Struct__TOKEN_DEFAULT_DACL (
    DefaultDacl : PACL,
);

alias TOKEN_DEFAULT_DACL = Struct__TOKEN_DEFAULT_DACL;

alias PTOKEN_DEFAULT_DACL = Pointer[Struct__TOKEN_DEFAULT_DACL];

record Struct__TOKEN_GROUPS_AND_PRIVILEGES (
    SidCount : CULong,
    SidLength : CULong,
    Sids : PSID_AND_ATTRIBUTES,
    RestrictedSidCount : CULong,
    RestrictedSidLength : CULong,
    RestrictedSids : PSID_AND_ATTRIBUTES,
    PrivilegeCount : CULong,
    PrivilegeLength : CULong,
    Privileges : PLUID_AND_ATTRIBUTES,
    AuthenticationId : LUID,
);

alias TOKEN_GROUPS_AND_PRIVILEGES = Struct__TOKEN_GROUPS_AND_PRIVILEGES;

alias PTOKEN_GROUPS_AND_PRIVILEGES = Pointer[Struct__TOKEN_GROUPS_AND_PRIVILEGES];

record Struct__TOKEN_AUDIT_POLICY (
    PerUserPolicy : Array[CUChar,27],
);

alias TOKEN_AUDIT_POLICY = Struct__TOKEN_AUDIT_POLICY;

alias PTOKEN_AUDIT_POLICY = Pointer[Struct__TOKEN_AUDIT_POLICY];

record Struct__TOKEN_SOURCE (
    SourceName : Array[CChar,8],
    SourceIdentifier : LUID,
);

alias TOKEN_SOURCE = Struct__TOKEN_SOURCE;

alias PTOKEN_SOURCE = Pointer[Struct__TOKEN_SOURCE];

record Struct__TOKEN_STATISTICS (
    TokenId : LUID,
    AuthenticationId : LUID,
    ExpirationTime : LARGE_INTEGER,
    TokenType : TOKEN_TYPE,
    ImpersonationLevel : SECURITY_IMPERSONATION_LEVEL,
    DynamicCharged : CULong,
    DynamicAvailable : CULong,
    GroupCount : CULong,
    PrivilegeCount : CULong,
    ModifiedId : LUID,
);

alias TOKEN_STATISTICS = Struct__TOKEN_STATISTICS;

alias PTOKEN_STATISTICS = Pointer[Struct__TOKEN_STATISTICS];

record Struct__TOKEN_CONTROL (
    TokenId : LUID,
    AuthenticationId : LUID,
    ModifiedId : LUID,
    TokenSource : TOKEN_SOURCE,
);

alias TOKEN_CONTROL = Struct__TOKEN_CONTROL;

alias PTOKEN_CONTROL = Pointer[Struct__TOKEN_CONTROL];

record Struct__TOKEN_ORIGIN (
    OriginatingLogonSession : LUID,
);

alias TOKEN_ORIGIN = Struct__TOKEN_ORIGIN;

alias PTOKEN_ORIGIN = Pointer[Struct__TOKEN_ORIGIN];

alias SECURITY_CONTEXT_TRACKING_MODE = CUChar;

alias PSECURITY_CONTEXT_TRACKING_MODE = Pointer[CUChar];

record Struct__SECURITY_QUALITY_OF_SERVICE (
    Length : CULong,
    ImpersonationLevel : SECURITY_IMPERSONATION_LEVEL,
    ContextTrackingMode : CUChar,
    EffectiveOnly : CUChar,
);

alias SECURITY_QUALITY_OF_SERVICE = Struct__SECURITY_QUALITY_OF_SERVICE;

alias PSECURITY_QUALITY_OF_SERVICE = Pointer[Struct__SECURITY_QUALITY_OF_SERVICE];

record Struct__SE_IMPERSONATION_STATE (
    Token : PACCESS_TOKEN,
    CopyOnOpen : CUChar,
    EffectiveOnly : CUChar,
    Level : SECURITY_IMPERSONATION_LEVEL,
);

alias SE_IMPERSONATION_STATE = Struct__SE_IMPERSONATION_STATE;

alias PSE_IMPERSONATION_STATE = Pointer[Struct__SE_IMPERSONATION_STATE];

alias SECURITY_INFORMATION = CULong;

alias PSECURITY_INFORMATION = Pointer[CULong];

record Struct__JOB_SET_ARRAY (
    JobHandle : HANDLE,
    MemberLevel : CULong,
    Flags : CULong,
);

alias JOB_SET_ARRAY = Struct__JOB_SET_ARRAY;

alias PJOB_SET_ARRAY = Pointer[Struct__JOB_SET_ARRAY];

record Struct__NT_TIB (
    ExceptionList : OpaquePointer,
    StackBase : PVOID,
    StackLimit : PVOID,
    SubSystemTib : PVOID,
    unnamed_field4 : AUnionType,
    ArbitraryUserPointer : PVOID,
    Self : Pointer[Struct__NT_TIB],
);

alias NT_TIB = Struct__NT_TIB;

alias PNT_TIB = Pointer[NT_TIB];

record Struct__NT_TIB32 (
    ExceptionList : CULong,
    StackBase : CULong,
    StackLimit : CULong,
    SubSystemTib : CULong,
    unnamed_field4 : AUnionType,
    ArbitraryUserPointer : CULong,
    Self : CULong,
);

alias NT_TIB32 = Struct__NT_TIB32;

alias PNT_TIB32 = Pointer[Struct__NT_TIB32];

record Struct__NT_TIB64 (
    ExceptionList : UInt64,
    StackBase : UInt64,
    StackLimit : UInt64,
    SubSystemTib : UInt64,
    unnamed_field4 : AUnionType,
    ArbitraryUserPointer : UInt64,
    Self : UInt64,
);

alias NT_TIB64 = Struct__NT_TIB64;

alias PNT_TIB64 = Pointer[Struct__NT_TIB64];

record Struct__QUOTA_LIMITS (
    PagedPoolLimit : UInt64,
    NonPagedPoolLimit : UInt64,
    MinimumWorkingSetSize : UInt64,
    MaximumWorkingSetSize : UInt64,
    PagefileLimit : UInt64,
    TimeLimit : LARGE_INTEGER,
);

alias QUOTA_LIMITS = Struct__QUOTA_LIMITS;

alias PQUOTA_LIMITS = Pointer[Struct__QUOTA_LIMITS];

alias RATE_QUOTA_LIMIT = AUnionType;

alias PRATE_QUOTA_LIMIT = OpaquePointer;

record Struct__QUOTA_LIMITS_EX (
    PagedPoolLimit : UInt64,
    NonPagedPoolLimit : UInt64,
    MinimumWorkingSetSize : UInt64,
    MaximumWorkingSetSize : UInt64,
    PagefileLimit : UInt64,
    TimeLimit : LARGE_INTEGER,
    WorkingSetLimit : UInt64,
    Reserved2 : UInt64,
    Reserved3 : UInt64,
    Reserved4 : UInt64,
    Flags : CULong,
    CpuRateLimit : RATE_QUOTA_LIMIT,
);

alias QUOTA_LIMITS_EX = Struct__QUOTA_LIMITS_EX;

alias PQUOTA_LIMITS_EX = Pointer[Struct__QUOTA_LIMITS_EX];

record Struct__IO_COUNTERS (
    ReadOperationCount : UInt64,
    WriteOperationCount : UInt64,
    OtherOperationCount : UInt64,
    ReadTransferCount : UInt64,
    WriteTransferCount : UInt64,
    OtherTransferCount : UInt64,
);

alias IO_COUNTERS = Struct__IO_COUNTERS;

alias PIO_COUNTERS = Pointer[IO_COUNTERS];

alias PMCCounter = 0;
alias MaxHardwareCounterType = 1;

alias HARDWARE_COUNTER_TYPE = Int;

alias PHARDWARE_COUNTER_TYPE = Pointer[Int];

record Struct__JOBOBJECT_BASIC_ACCOUNTING_INFORMATION (
    TotalUserTime : LARGE_INTEGER,
    TotalKernelTime : LARGE_INTEGER,
    ThisPeriodTotalUserTime : LARGE_INTEGER,
    ThisPeriodTotalKernelTime : LARGE_INTEGER,
    TotalPageFaultCount : CULong,
    TotalProcesses : CULong,
    ActiveProcesses : CULong,
    TotalTerminatedProcesses : CULong,
);

alias JOBOBJECT_BASIC_ACCOUNTING_INFORMATION = Struct__JOBOBJECT_BASIC_ACCOUNTING_INFORMATION;

alias PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION = Pointer[Struct__JOBOBJECT_BASIC_ACCOUNTING_INFORMATION];

record Struct__JOBOBJECT_BASIC_LIMIT_INFORMATION (
    PerProcessUserTimeLimit : LARGE_INTEGER,
    PerJobUserTimeLimit : LARGE_INTEGER,
    LimitFlags : CULong,
    MinimumWorkingSetSize : UInt64,
    MaximumWorkingSetSize : UInt64,
    ActiveProcessLimit : CULong,
    Affinity : UInt64,
    PriorityClass : CULong,
    SchedulingClass : CULong,
);

alias JOBOBJECT_BASIC_LIMIT_INFORMATION = Struct__JOBOBJECT_BASIC_LIMIT_INFORMATION;

alias PJOBOBJECT_BASIC_LIMIT_INFORMATION = Pointer[Struct__JOBOBJECT_BASIC_LIMIT_INFORMATION];

record Struct__JOBOBJECT_EXTENDED_LIMIT_INFORMATION (
    BasicLimitInformation : JOBOBJECT_BASIC_LIMIT_INFORMATION,
    IoInfo : IO_COUNTERS,
    ProcessMemoryLimit : UInt64,
    JobMemoryLimit : UInt64,
    PeakProcessMemoryUsed : UInt64,
    PeakJobMemoryUsed : UInt64,
);

alias JOBOBJECT_EXTENDED_LIMIT_INFORMATION = Struct__JOBOBJECT_EXTENDED_LIMIT_INFORMATION;

alias PJOBOBJECT_EXTENDED_LIMIT_INFORMATION = Pointer[Struct__JOBOBJECT_EXTENDED_LIMIT_INFORMATION];

record Struct__JOBOBJECT_BASIC_PROCESS_ID_LIST (
    NumberOfAssignedProcesses : CULong,
    NumberOfProcessIdsInList : CULong,
    ProcessIdList : Array[UInt64,1],
);

alias JOBOBJECT_BASIC_PROCESS_ID_LIST = Struct__JOBOBJECT_BASIC_PROCESS_ID_LIST;

alias PJOBOBJECT_BASIC_PROCESS_ID_LIST = Pointer[Struct__JOBOBJECT_BASIC_PROCESS_ID_LIST];

record Struct__JOBOBJECT_BASIC_UI_RESTRICTIONS (
    UIRestrictionsClass : CULong,
);

alias JOBOBJECT_BASIC_UI_RESTRICTIONS = Struct__JOBOBJECT_BASIC_UI_RESTRICTIONS;

alias PJOBOBJECT_BASIC_UI_RESTRICTIONS = Pointer[Struct__JOBOBJECT_BASIC_UI_RESTRICTIONS];

record Struct__JOBOBJECT_SECURITY_LIMIT_INFORMATION (
    SecurityLimitFlags : CULong,
    JobToken : HANDLE,
    SidsToDisable : PTOKEN_GROUPS,
    PrivilegesToDelete : PTOKEN_PRIVILEGES,
    RestrictedSids : PTOKEN_GROUPS,
);

alias JOBOBJECT_SECURITY_LIMIT_INFORMATION = Struct__JOBOBJECT_SECURITY_LIMIT_INFORMATION;

alias PJOBOBJECT_SECURITY_LIMIT_INFORMATION = Pointer[Struct__JOBOBJECT_SECURITY_LIMIT_INFORMATION];

record Struct__JOBOBJECT_END_OF_JOB_TIME_INFORMATION (
    EndOfJobTimeAction : CULong,
);

alias JOBOBJECT_END_OF_JOB_TIME_INFORMATION = Struct__JOBOBJECT_END_OF_JOB_TIME_INFORMATION;

alias PJOBOBJECT_END_OF_JOB_TIME_INFORMATION = Pointer[Struct__JOBOBJECT_END_OF_JOB_TIME_INFORMATION];

record Struct__JOBOBJECT_ASSOCIATE_COMPLETION_PORT (
    CompletionKey : PVOID,
    CompletionPort : HANDLE,
);

alias JOBOBJECT_ASSOCIATE_COMPLETION_PORT = Struct__JOBOBJECT_ASSOCIATE_COMPLETION_PORT;

alias PJOBOBJECT_ASSOCIATE_COMPLETION_PORT = Pointer[Struct__JOBOBJECT_ASSOCIATE_COMPLETION_PORT];

record Struct__JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION (
    BasicInfo : JOBOBJECT_BASIC_ACCOUNTING_INFORMATION,
    IoInfo : IO_COUNTERS,
);

alias JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION = Struct__JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;

alias PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION = Pointer[Struct__JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION];

record Struct__JOBOBJECT_JOBSET_INFORMATION (
    MemberLevel : CULong,
);

alias JOBOBJECT_JOBSET_INFORMATION = Struct__JOBOBJECT_JOBSET_INFORMATION;

alias PJOBOBJECT_JOBSET_INFORMATION = Pointer[Struct__JOBOBJECT_JOBSET_INFORMATION];

alias JobObjectBasicAccountingInformation = 1;
alias JobObjectBasicLimitInformation = 2;
alias JobObjectBasicProcessIdList = 3;
alias JobObjectBasicUIRestrictions = 4;
alias JobObjectSecurityLimitInformation = 5;
alias JobObjectEndOfJobTimeInformation = 6;
alias JobObjectAssociateCompletionPortInformation = 7;
alias JobObjectBasicAndIoAccountingInformation = 8;
alias JobObjectExtendedLimitInformation = 9;
alias JobObjectJobSetInformation = 10;
alias JobObjectGroupInformation = 11;
alias MaxJobObjectInfoClass = 12;

alias JOBOBJECTINFOCLASS = Int;

alias RelationProcessorCore = 0;
alias RelationNumaNode = 1;
alias RelationCache = 2;
alias RelationProcessorPackage = 3;
alias RelationGroup = 4;
alias RelationAll = 65535;

alias LOGICAL_PROCESSOR_RELATIONSHIP = Int;

alias CacheUnified = 0;
alias CacheInstruction = 1;
alias CacheData = 2;
alias CacheTrace = 3;

alias PROCESSOR_CACHE_TYPE = Int;

record Struct__CACHE_DESCRIPTOR (
    Level : CUChar,
    Associativity : CUChar,
    LineSize : UShort,
    Size : CULong,
    Type : PROCESSOR_CACHE_TYPE,
);

alias CACHE_DESCRIPTOR = Struct__CACHE_DESCRIPTOR;

alias PCACHE_DESCRIPTOR = Pointer[Struct__CACHE_DESCRIPTOR];

record Struct__SYSTEM_LOGICAL_PROCESSOR_INFORMATION (
    ProcessorMask : UInt64,
    Relationship : LOGICAL_PROCESSOR_RELATIONSHIP,
    unnamed_field2 : AUnionType,
);

alias SYSTEM_LOGICAL_PROCESSOR_INFORMATION = Struct__SYSTEM_LOGICAL_PROCESSOR_INFORMATION;

alias PSYSTEM_LOGICAL_PROCESSOR_INFORMATION = Pointer[Struct__SYSTEM_LOGICAL_PROCESSOR_INFORMATION];

record Struct__MEMORY_BASIC_INFORMATION (
    BaseAddress : PVOID,
    AllocationBase : PVOID,
    AllocationProtect : CULong,
    RegionSize : UInt64,
    State : CULong,
    Protect : CULong,
    Type : CULong,
);

alias MEMORY_BASIC_INFORMATION = Struct__MEMORY_BASIC_INFORMATION;

alias PMEMORY_BASIC_INFORMATION = Pointer[Struct__MEMORY_BASIC_INFORMATION];

record Struct__MEMORY_BASIC_INFORMATION32 (
    BaseAddress : CULong,
    AllocationBase : CULong,
    AllocationProtect : CULong,
    RegionSize : CULong,
    State : CULong,
    Protect : CULong,
    Type : CULong,
);

alias MEMORY_BASIC_INFORMATION32 = Struct__MEMORY_BASIC_INFORMATION32;

alias PMEMORY_BASIC_INFORMATION32 = Pointer[Struct__MEMORY_BASIC_INFORMATION32];

record Struct__MEMORY_BASIC_INFORMATION64 (
    BaseAddress : UInt64,
    AllocationBase : UInt64,
    AllocationProtect : CULong,
    __alignment1 : CULong,
    RegionSize : UInt64,
    State : CULong,
    Protect : CULong,
    Type : CULong,
    __alignment2 : CULong,
);

alias MEMORY_BASIC_INFORMATION64 = Struct__MEMORY_BASIC_INFORMATION64;

alias PMEMORY_BASIC_INFORMATION64 = Pointer[Struct__MEMORY_BASIC_INFORMATION64];

record Struct__FILE_NOTIFY_INFORMATION (
    NextEntryOffset : CULong,
    Action : CULong,
    FileNameLength : CULong,
    FileName : Array[UShort,1],
);

alias FILE_NOTIFY_INFORMATION = Struct__FILE_NOTIFY_INFORMATION;

alias PFILE_NOTIFY_INFORMATION = Pointer[Struct__FILE_NOTIFY_INFORMATION];

alias FILE_SEGMENT_ELEMENT = AUnionType;

alias PFILE_SEGMENT_ELEMENT = OpaquePointer;

record Struct__REPARSE_GUID_DATA_BUFFER (
    ReparseTag : CULong,
    ReparseDataLength : UShort,
    Reserved : UShort,
    ReparseGuid : GUID,
    GenericReparseBuffer : UnnamedRecord2,
);

record UnnamedRecord2 (
    DataBuffer : Array[CUChar,1],
);

alias REPARSE_GUID_DATA_BUFFER = Struct__REPARSE_GUID_DATA_BUFFER;

alias PREPARSE_GUID_DATA_BUFFER = Pointer[Struct__REPARSE_GUID_DATA_BUFFER];

alias PowerSystemUnspecified = 0;
alias PowerSystemWorking = 1;
alias PowerSystemSleeping1 = 2;
alias PowerSystemSleeping2 = 3;
alias PowerSystemSleeping3 = 4;
alias PowerSystemHibernate = 5;
alias PowerSystemShutdown = 6;
alias PowerSystemMaximum = 7;

alias SYSTEM_POWER_STATE = Int;

alias PSYSTEM_POWER_STATE = Pointer[Int];

alias PowerActionNone = 0;
alias PowerActionReserved = 1;
alias PowerActionSleep = 2;
alias PowerActionHibernate = 3;
alias PowerActionShutdown = 4;
alias PowerActionShutdownReset = 5;
alias PowerActionShutdownOff = 6;
alias PowerActionWarmEject = 7;

alias POWER_ACTION = Int;

alias PPOWER_ACTION = Pointer[Int];

alias PowerDeviceUnspecified = 0;
alias PowerDeviceD0 = 1;
alias PowerDeviceD1 = 2;
alias PowerDeviceD2 = 3;
alias PowerDeviceD3 = 4;
alias PowerDeviceMaximum = 5;

alias DEVICE_POWER_STATE = Int;

alias PDEVICE_POWER_STATE = Pointer[Int];

alias PowerMonitorOff = 0;
alias PowerMonitorOn = 1;
alias PowerMonitorDim = 2;

alias MONITOR_DISPLAY_STATE = Int;

alias PMONITOR_DISPLAY_STATE = Pointer[Int];

alias EXECUTION_STATE = CULong;

alias LT_DONT_CARE = 0;
alias LT_LOWEST_LATENCY = 1;

alias LATENCY_TIME = Int;

record Struct_CM_Power_Data_s (
    PD_Size : CULong,
    PD_MostRecentPowerState : DEVICE_POWER_STATE,
    PD_Capabilities : CULong,
    PD_D1Latency : CULong,
    PD_D2Latency : CULong,
    PD_D3Latency : CULong,
    PD_PowerStateMapping : Array[DEVICE_POWER_STATE,7],
    PD_DeepestSystemWake : SYSTEM_POWER_STATE,
);

alias CM_POWER_DATA = Struct_CM_Power_Data_s;

alias PCM_POWER_DATA = Pointer[Struct_CM_Power_Data_s];

alias SystemPowerPolicyAc = 0;
alias SystemPowerPolicyDc = 1;
alias VerifySystemPolicyAc = 2;
alias VerifySystemPolicyDc = 3;
alias SystemPowerCapabilities = 4;
alias SystemBatteryState = 5;
alias SystemPowerStateHandler = 6;
alias ProcessorStateHandler = 7;
alias SystemPowerPolicyCurrent = 8;
alias AdministratorPowerPolicy = 9;
alias SystemReserveHiberFile = 10;
alias ProcessorInformation = 11;
alias SystemPowerInformation = 12;
alias ProcessorStateHandler2 = 13;
alias LastWakeTime = 14;
alias LastSleepTime = 15;
alias SystemExecutionState = 16;
alias SystemPowerStateNotifyHandler = 17;
alias ProcessorPowerPolicyAc = 18;
alias ProcessorPowerPolicyDc = 19;
alias VerifyProcessorPowerPolicyAc = 20;
alias VerifyProcessorPowerPolicyDc = 21;
alias ProcessorPowerPolicyCurrent = 22;
alias SystemPowerStateLogging = 23;
alias SystemPowerLoggingEntry = 24;

alias POWER_INFORMATION_LEVEL = Int;

record UnnamedStruct7 (
    Granularity : CULong,
    Capacity : CULong,
);

alias BATTERY_REPORTING_SCALE = UnnamedStruct7;

alias PBATTERY_REPORTING_SCALE = Pointer[UnnamedStruct7];

record UnnamedStruct8 (
    Action : POWER_ACTION,
    Flags : CULong,
    EventCode : CULong,
);

alias POWER_ACTION_POLICY = UnnamedStruct8;

alias PPOWER_ACTION_POLICY = Pointer[UnnamedStruct8];

record UnnamedStruct9 (
    Enable : CUChar,
    Spare : Array[CUChar,3],
    BatteryLevel : CULong,
    PowerPolicy : POWER_ACTION_POLICY,
    MinSystemState : SYSTEM_POWER_STATE,
);

alias SYSTEM_POWER_LEVEL = UnnamedStruct9;

alias PSYSTEM_POWER_LEVEL = Pointer[UnnamedStruct9];

record Struct__SYSTEM_POWER_POLICY (
    Revision : CULong,
    PowerButton : POWER_ACTION_POLICY,
    SleepButton : POWER_ACTION_POLICY,
    LidClose : POWER_ACTION_POLICY,
    LidOpenWake : SYSTEM_POWER_STATE,
    Reserved : CULong,
    Idle : POWER_ACTION_POLICY,
    IdleTimeout : CULong,
    IdleSensitivity : CUChar,
    DynamicThrottle : CUChar,
    Spare2 : Array[CUChar,2],
    MinSleep : SYSTEM_POWER_STATE,
    MaxSleep : SYSTEM_POWER_STATE,
    ReducedLatencySleep : SYSTEM_POWER_STATE,
    WinLogonFlags : CULong,
    Spare3 : CULong,
    DozeS4Timeout : CULong,
    BroadcastCapacityResolution : CULong,
    DischargePolicy : Array[SYSTEM_POWER_LEVEL,4],
    VideoTimeout : CULong,
    VideoDimDisplay : CUChar,
    VideoReserved : Array[CULong,3],
    SpindownTimeout : CULong,
    OptimizeForPower : CUChar,
    FanThrottleTolerance : CUChar,
    ForcedThrottle : CUChar,
    MinThrottle : CUChar,
    OverThrottled : POWER_ACTION_POLICY,
);

alias SYSTEM_POWER_POLICY = Struct__SYSTEM_POWER_POLICY;

alias PSYSTEM_POWER_POLICY = Pointer[Struct__SYSTEM_POWER_POLICY];

record Struct__PROCESSOR_POWER_POLICY_INFO (
    TimeCheck : CULong,
    DemoteLimit : CULong,
    PromoteLimit : CULong,
    DemotePercent : CUChar,
    PromotePercent : CUChar,
    Spare : Array[CUChar,2],
    AllowDemotion : CULong,
    AllowPromotion : CULong,
    Reserved : CULong,
);

alias PROCESSOR_POWER_POLICY_INFO = Struct__PROCESSOR_POWER_POLICY_INFO;

alias PPROCESSOR_POWER_POLICY_INFO = Pointer[Struct__PROCESSOR_POWER_POLICY_INFO];

record Struct__PROCESSOR_POWER_POLICY (
    Revision : CULong,
    DynamicThrottle : CUChar,
    Spare : Array[CUChar,3],
    DisableCStates : CULong,
    Reserved : CULong,
    PolicyCount : CULong,
    Policy : Array[PROCESSOR_POWER_POLICY_INFO,3],
);

alias PROCESSOR_POWER_POLICY = Struct__PROCESSOR_POWER_POLICY;

alias PPROCESSOR_POWER_POLICY = Pointer[Struct__PROCESSOR_POWER_POLICY];

record Struct__ADMINISTRATOR_POWER_POLICY (
    MinSleep : SYSTEM_POWER_STATE,
    MaxSleep : SYSTEM_POWER_STATE,
    MinVideoTimeout : CULong,
    MaxVideoTimeout : CULong,
    MinSpindownTimeout : CULong,
    MaxSpindownTimeout : CULong,
);

alias ADMINISTRATOR_POWER_POLICY = Struct__ADMINISTRATOR_POWER_POLICY;

alias PADMINISTRATOR_POWER_POLICY = Pointer[Struct__ADMINISTRATOR_POWER_POLICY];

record UnnamedStruct10 (
    PowerButtonPresent : CUChar,
    SleepButtonPresent : CUChar,
    LidPresent : CUChar,
    SystemS1 : CUChar,
    SystemS2 : CUChar,
    SystemS3 : CUChar,
    SystemS4 : CUChar,
    SystemS5 : CUChar,
    HiberFilePresent : CUChar,
    FullWake : CUChar,
    VideoDimPresent : CUChar,
    ApmPresent : CUChar,
    UpsPresent : CUChar,
    ThermalControl : CUChar,
    ProcessorThrottle : CUChar,
    ProcessorMinThrottle : CUChar,
    ProcessorMaxThrottle : CUChar,
    FastSystemS4 : CUChar,
    spare2 : Array[CUChar,3],
    DiskSpinDown : CUChar,
    spare3 : Array[CUChar,8],
    SystemBatteriesPresent : CUChar,
    BatteriesAreShortTerm : CUChar,
    BatteryScale : Array[BATTERY_REPORTING_SCALE,3],
    AcOnLineWake : SYSTEM_POWER_STATE,
    SoftLidWake : SYSTEM_POWER_STATE,
    RtcWake : SYSTEM_POWER_STATE,
    MinDeviceWakeState : SYSTEM_POWER_STATE,
    DefaultLowLatencyWake : SYSTEM_POWER_STATE,
);

alias SYSTEM_POWER_CAPABILITIES = UnnamedStruct10;

alias PSYSTEM_POWER_CAPABILITIES = Pointer[UnnamedStruct10];

record UnnamedStruct11 (
    AcOnLine : CUChar,
    BatteryPresent : CUChar,
    Charging : CUChar,
    Discharging : CUChar,
    Spare1 : Array[CUChar,4],
    MaxCapacity : CULong,
    RemainingCapacity : CULong,
    Rate : CULong,
    EstimatedTime : CULong,
    DefaultAlert1 : CULong,
    DefaultAlert2 : CULong,
);

alias SYSTEM_BATTERY_STATE = UnnamedStruct11;

alias PSYSTEM_BATTERY_STATE = Pointer[UnnamedStruct11];

record Struct__IMAGE_DOS_HEADER (
    e_magic : UShort,
    e_cblp : UShort,
    e_cp : UShort,
    e_crlc : UShort,
    e_cparhdr : UShort,
    e_minalloc : UShort,
    e_maxalloc : UShort,
    e_ss : UShort,
    e_sp : UShort,
    e_csum : UShort,
    e_ip : UShort,
    e_cs : UShort,
    e_lfarlc : UShort,
    e_ovno : UShort,
    e_res : Array[UShort,4],
    e_oemid : UShort,
    e_oeminfo : UShort,
    e_res2 : Array[UShort,10],
    e_lfanew : CLong,
);

alias IMAGE_DOS_HEADER = Struct__IMAGE_DOS_HEADER;

alias PIMAGE_DOS_HEADER = Pointer[Struct__IMAGE_DOS_HEADER];

record Struct__IMAGE_OS2_HEADER (
    ne_magic : UShort,
    ne_ver : CChar,
    ne_rev : CChar,
    ne_enttab : UShort,
    ne_cbenttab : UShort,
    ne_crc : CLong,
    ne_flags : UShort,
    ne_autodata : UShort,
    ne_heap : UShort,
    ne_stack : UShort,
    ne_csip : CLong,
    ne_sssp : CLong,
    ne_cseg : UShort,
    ne_cmod : UShort,
    ne_cbnrestab : UShort,
    ne_segtab : UShort,
    ne_rsrctab : UShort,
    ne_restab : UShort,
    ne_modtab : UShort,
    ne_imptab : UShort,
    ne_nrestab : CLong,
    ne_cmovent : UShort,
    ne_align : UShort,
    ne_cres : UShort,
    ne_exetyp : CUChar,
    ne_flagsothers : CUChar,
    ne_pretthunks : UShort,
    ne_psegrefbytes : UShort,
    ne_swaparea : UShort,
    ne_expver : UShort,
);

alias IMAGE_OS2_HEADER = Struct__IMAGE_OS2_HEADER;

alias PIMAGE_OS2_HEADER = Pointer[Struct__IMAGE_OS2_HEADER];

record Struct__IMAGE_VXD_HEADER (
    e32_magic : UShort,
    e32_border : CUChar,
    e32_worder : CUChar,
    e32_level : CULong,
    e32_cpu : UShort,
    e32_os : UShort,
    e32_ver : CULong,
    e32_mflags : CULong,
    e32_mpages : CULong,
    e32_startobj : CULong,
    e32_eip : CULong,
    e32_stackobj : CULong,
    e32_esp : CULong,
    e32_pagesize : CULong,
    e32_lastpagesize : CULong,
    e32_fixupsize : CULong,
    e32_fixupsum : CULong,
    e32_ldrsize : CULong,
    e32_ldrsum : CULong,
    e32_objtab : CULong,
    e32_objcnt : CULong,
    e32_objmap : CULong,
    e32_itermap : CULong,
    e32_rsrctab : CULong,
    e32_rsrccnt : CULong,
    e32_restab : CULong,
    e32_enttab : CULong,
    e32_dirtab : CULong,
    e32_dircnt : CULong,
    e32_fpagetab : CULong,
    e32_frectab : CULong,
    e32_impmod : CULong,
    e32_impmodcnt : CULong,
    e32_impproc : CULong,
    e32_pagesum : CULong,
    e32_datapage : CULong,
    e32_preload : CULong,
    e32_nrestab : CULong,
    e32_cbnrestab : CULong,
    e32_nressum : CULong,
    e32_autodata : CULong,
    e32_debuginfo : CULong,
    e32_debuglen : CULong,
    e32_instpreload : CULong,
    e32_instdemand : CULong,
    e32_heapsize : CULong,
    e32_res3 : Array[CUChar,12],
    e32_winresoff : CULong,
    e32_winreslen : CULong,
    e32_devid : UShort,
    e32_ddkver : UShort,
);

alias IMAGE_VXD_HEADER = Struct__IMAGE_VXD_HEADER;

alias PIMAGE_VXD_HEADER = Pointer[Struct__IMAGE_VXD_HEADER];

record Struct__IMAGE_FILE_HEADER (
    Machine : UShort,
    NumberOfSections : UShort,
    TimeDateStamp : CULong,
    PointerToSymbolTable : CULong,
    NumberOfSymbols : CULong,
    SizeOfOptionalHeader : UShort,
    Characteristics : UShort,
);

alias IMAGE_FILE_HEADER = Struct__IMAGE_FILE_HEADER;

alias PIMAGE_FILE_HEADER = Pointer[Struct__IMAGE_FILE_HEADER];

record Struct__IMAGE_DATA_DIRECTORY (
    VirtualAddress : CULong,
    Size : CULong,
);

alias IMAGE_DATA_DIRECTORY = Struct__IMAGE_DATA_DIRECTORY;

alias PIMAGE_DATA_DIRECTORY = Pointer[Struct__IMAGE_DATA_DIRECTORY];

record Struct__IMAGE_OPTIONAL_HEADER (
    Magic : UShort,
    MajorLinkerVersion : CUChar,
    MinorLinkerVersion : CUChar,
    SizeOfCode : CULong,
    SizeOfInitializedData : CULong,
    SizeOfUninitializedData : CULong,
    AddressOfEntryPoint : CULong,
    BaseOfCode : CULong,
    BaseOfData : CULong,
    ImageBase : CULong,
    SectionAlignment : CULong,
    FileAlignment : CULong,
    MajorOperatingSystemVersion : UShort,
    MinorOperatingSystemVersion : UShort,
    MajorImageVersion : UShort,
    MinorImageVersion : UShort,
    MajorSubsystemVersion : UShort,
    MinorSubsystemVersion : UShort,
    Win32VersionValue : CULong,
    SizeOfImage : CULong,
    SizeOfHeaders : CULong,
    CheckSum : CULong,
    Subsystem : UShort,
    DllCharacteristics : UShort,
    SizeOfStackReserve : CULong,
    SizeOfStackCommit : CULong,
    SizeOfHeapReserve : CULong,
    SizeOfHeapCommit : CULong,
    LoaderFlags : CULong,
    NumberOfRvaAndSizes : CULong,
    DataDirectory : Array[IMAGE_DATA_DIRECTORY,16],
);

alias IMAGE_OPTIONAL_HEADER32 = Struct__IMAGE_OPTIONAL_HEADER;

alias PIMAGE_OPTIONAL_HEADER32 = Pointer[Struct__IMAGE_OPTIONAL_HEADER];

record Struct__IMAGE_ROM_OPTIONAL_HEADER (
    Magic : UShort,
    MajorLinkerVersion : CUChar,
    MinorLinkerVersion : CUChar,
    SizeOfCode : CULong,
    SizeOfInitializedData : CULong,
    SizeOfUninitializedData : CULong,
    AddressOfEntryPoint : CULong,
    BaseOfCode : CULong,
    BaseOfData : CULong,
    BaseOfBss : CULong,
    GprMask : CULong,
    CprMask : Array[CULong,4],
    GpValue : CULong,
);

alias IMAGE_ROM_OPTIONAL_HEADER = Struct__IMAGE_ROM_OPTIONAL_HEADER;

alias PIMAGE_ROM_OPTIONAL_HEADER = Pointer[Struct__IMAGE_ROM_OPTIONAL_HEADER];

record Struct__IMAGE_OPTIONAL_HEADER64 (
    Magic : UShort,
    MajorLinkerVersion : CUChar,
    MinorLinkerVersion : CUChar,
    SizeOfCode : CULong,
    SizeOfInitializedData : CULong,
    SizeOfUninitializedData : CULong,
    AddressOfEntryPoint : CULong,
    BaseOfCode : CULong,
    ImageBase : UInt64,
    SectionAlignment : CULong,
    FileAlignment : CULong,
    MajorOperatingSystemVersion : UShort,
    MinorOperatingSystemVersion : UShort,
    MajorImageVersion : UShort,
    MinorImageVersion : UShort,
    MajorSubsystemVersion : UShort,
    MinorSubsystemVersion : UShort,
    Win32VersionValue : CULong,
    SizeOfImage : CULong,
    SizeOfHeaders : CULong,
    CheckSum : CULong,
    Subsystem : UShort,
    DllCharacteristics : UShort,
    SizeOfStackReserve : UInt64,
    SizeOfStackCommit : UInt64,
    SizeOfHeapReserve : UInt64,
    SizeOfHeapCommit : UInt64,
    LoaderFlags : CULong,
    NumberOfRvaAndSizes : CULong,
    DataDirectory : Array[IMAGE_DATA_DIRECTORY,16],
);

alias IMAGE_OPTIONAL_HEADER64 = Struct__IMAGE_OPTIONAL_HEADER64;

alias PIMAGE_OPTIONAL_HEADER64 = Pointer[Struct__IMAGE_OPTIONAL_HEADER64];

alias IMAGE_OPTIONAL_HEADER = IMAGE_OPTIONAL_HEADER64;

alias PIMAGE_OPTIONAL_HEADER = PIMAGE_OPTIONAL_HEADER64;

record Struct__IMAGE_NT_HEADERS64 (
    Signature : CULong,
    FileHeader : IMAGE_FILE_HEADER,
    OptionalHeader : IMAGE_OPTIONAL_HEADER64,
);

alias IMAGE_NT_HEADERS64 = Struct__IMAGE_NT_HEADERS64;

alias PIMAGE_NT_HEADERS64 = Pointer[Struct__IMAGE_NT_HEADERS64];

record Struct__IMAGE_NT_HEADERS (
    Signature : CULong,
    FileHeader : IMAGE_FILE_HEADER,
    OptionalHeader : IMAGE_OPTIONAL_HEADER32,
);

alias IMAGE_NT_HEADERS32 = Struct__IMAGE_NT_HEADERS;

alias PIMAGE_NT_HEADERS32 = Pointer[Struct__IMAGE_NT_HEADERS];

record Struct__IMAGE_ROM_HEADERS (
    FileHeader : IMAGE_FILE_HEADER,
    OptionalHeader : IMAGE_ROM_OPTIONAL_HEADER,
);

alias IMAGE_ROM_HEADERS = Struct__IMAGE_ROM_HEADERS;

alias PIMAGE_ROM_HEADERS = Pointer[Struct__IMAGE_ROM_HEADERS];

alias IMAGE_NT_HEADERS = IMAGE_NT_HEADERS64;

alias PIMAGE_NT_HEADERS = PIMAGE_NT_HEADERS64;

record Struct_ANON_OBJECT_HEADER (
    Sig1 : UShort,
    Sig2 : UShort,
    Version : UShort,
    Machine : UShort,
    TimeDateStamp : CULong,
    ClassID : CLSID,
    SizeOfData : CULong,
);

alias ANON_OBJECT_HEADER = Struct_ANON_OBJECT_HEADER;

record Struct__IMAGE_SECTION_HEADER (
    Name : Array[CUChar,8],
    Misc : AUnionType,
    VirtualAddress : CULong,
    SizeOfRawData : CULong,
    PointerToRawData : CULong,
    PointerToRelocations : CULong,
    PointerToLinenumbers : CULong,
    NumberOfRelocations : UShort,
    NumberOfLinenumbers : UShort,
    Characteristics : CULong,
);

alias IMAGE_SECTION_HEADER = Struct__IMAGE_SECTION_HEADER;

alias PIMAGE_SECTION_HEADER = Pointer[Struct__IMAGE_SECTION_HEADER];

record Struct__IMAGE_SYMBOL (
    N : AUnionType,
    Value : CULong,
    SectionNumber : Short,
    Type : UShort,
    StorageClass : CUChar,
    NumberOfAuxSymbols : CUChar,
);

alias IMAGE_SYMBOL = Struct__IMAGE_SYMBOL;

alias PIMAGE_SYMBOL = Pointer[IMAGE_SYMBOL];

alias IMAGE_AUX_SYMBOL = AUnionType;

alias PIMAGE_AUX_SYMBOL = Pointer[IMAGE_AUX_SYMBOL];

alias IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1;

alias IMAGE_AUX_SYMBOL_TYPE = Int;

record Struct_IMAGE_AUX_SYMBOL_TOKEN_DEF (
    bAuxType : CUChar,
    bReserved : CUChar,
    SymbolTableIndex : CULong,
    rgbReserved : Array[CUChar,12],
);

alias IMAGE_AUX_SYMBOL_TOKEN_DEF = Struct_IMAGE_AUX_SYMBOL_TOKEN_DEF;

alias PIMAGE_AUX_SYMBOL_TOKEN_DEF = Pointer[IMAGE_AUX_SYMBOL_TOKEN_DEF];

record Struct__IMAGE_RELOCATION (
    unnamed_field0 : AUnionType,
    SymbolTableIndex : CULong,
    Type : UShort,
);

alias IMAGE_RELOCATION = Struct__IMAGE_RELOCATION;

alias PIMAGE_RELOCATION = Pointer[IMAGE_RELOCATION];

record Struct__IMAGE_LINENUMBER (
    Type : AUnionType,
    Linenumber : UShort,
);

alias IMAGE_LINENUMBER = Struct__IMAGE_LINENUMBER;

alias PIMAGE_LINENUMBER = Pointer[IMAGE_LINENUMBER];

record Struct__IMAGE_BASE_RELOCATION (
    VirtualAddress : CULong,
    SizeOfBlock : CULong,
);

alias IMAGE_BASE_RELOCATION = Struct__IMAGE_BASE_RELOCATION;

alias PIMAGE_BASE_RELOCATION = Pointer[IMAGE_BASE_RELOCATION];

record Struct__IMAGE_ARCHIVE_MEMBER_HEADER (
    Name : Array[CUChar,16],
    Date : Array[CUChar,12],
    UserID : Array[CUChar,6],
    GroupID : Array[CUChar,6],
    Mode : Array[CUChar,8],
    Size : Array[CUChar,10],
    EndHeader : Array[CUChar,2],
);

alias IMAGE_ARCHIVE_MEMBER_HEADER = Struct__IMAGE_ARCHIVE_MEMBER_HEADER;

alias PIMAGE_ARCHIVE_MEMBER_HEADER = Pointer[Struct__IMAGE_ARCHIVE_MEMBER_HEADER];

record Struct__IMAGE_EXPORT_DIRECTORY (
    Characteristics : CULong,
    TimeDateStamp : CULong,
    MajorVersion : UShort,
    MinorVersion : UShort,
    Name : CULong,
    Base : CULong,
    NumberOfFunctions : CULong,
    NumberOfNames : CULong,
    AddressOfFunctions : CULong,
    AddressOfNames : CULong,
    AddressOfNameOrdinals : CULong,
);

alias IMAGE_EXPORT_DIRECTORY = Struct__IMAGE_EXPORT_DIRECTORY;

alias PIMAGE_EXPORT_DIRECTORY = Pointer[Struct__IMAGE_EXPORT_DIRECTORY];

record Struct__IMAGE_IMPORT_BY_NAME (
    Hint : UShort,
    Name : Array[CUChar,1],
);

alias IMAGE_IMPORT_BY_NAME = Struct__IMAGE_IMPORT_BY_NAME;

alias PIMAGE_IMPORT_BY_NAME = Pointer[Struct__IMAGE_IMPORT_BY_NAME];

record Struct__IMAGE_THUNK_DATA64 (
    u1 : AUnionType,
);

alias IMAGE_THUNK_DATA64 = Struct__IMAGE_THUNK_DATA64;

alias PIMAGE_THUNK_DATA64 = Pointer[IMAGE_THUNK_DATA64];

record Struct__IMAGE_THUNK_DATA32 (
    u1 : AUnionType,
);

alias IMAGE_THUNK_DATA32 = Struct__IMAGE_THUNK_DATA32;

alias PIMAGE_THUNK_DATA32 = Pointer[IMAGE_THUNK_DATA32];

alias PIMAGE_TLS_CALLBACK = CCodePointer[(RawPointer,CULong,RawPointer),()];

record Struct__IMAGE_TLS_DIRECTORY64 (
    StartAddressOfRawData : UInt64,
    EndAddressOfRawData : UInt64,
    AddressOfIndex : UInt64,
    AddressOfCallBacks : UInt64,
    SizeOfZeroFill : CULong,
    Characteristics : CULong,
);

alias IMAGE_TLS_DIRECTORY64 = Struct__IMAGE_TLS_DIRECTORY64;

alias PIMAGE_TLS_DIRECTORY64 = Pointer[IMAGE_TLS_DIRECTORY64];

record Struct__IMAGE_TLS_DIRECTORY32 (
    StartAddressOfRawData : CULong,
    EndAddressOfRawData : CULong,
    AddressOfIndex : CULong,
    AddressOfCallBacks : CULong,
    SizeOfZeroFill : CULong,
    Characteristics : CULong,
);

alias IMAGE_TLS_DIRECTORY32 = Struct__IMAGE_TLS_DIRECTORY32;

alias PIMAGE_TLS_DIRECTORY32 = Pointer[IMAGE_TLS_DIRECTORY32];

alias IMAGE_THUNK_DATA = IMAGE_THUNK_DATA64;

alias PIMAGE_THUNK_DATA = PIMAGE_THUNK_DATA64;

alias IMAGE_TLS_DIRECTORY = IMAGE_TLS_DIRECTORY64;

alias PIMAGE_TLS_DIRECTORY = PIMAGE_TLS_DIRECTORY64;

record Struct__IMAGE_IMPORT_DESCRIPTOR (
    unnamed_field0 : AUnionType,
    TimeDateStamp : CULong,
    ForwarderChain : CULong,
    Name : CULong,
    FirstThunk : CULong,
);

alias IMAGE_IMPORT_DESCRIPTOR = Struct__IMAGE_IMPORT_DESCRIPTOR;

alias PIMAGE_IMPORT_DESCRIPTOR = Pointer[IMAGE_IMPORT_DESCRIPTOR];

record Struct__IMAGE_BOUND_IMPORT_DESCRIPTOR (
    TimeDateStamp : CULong,
    OffsetModuleName : UShort,
    NumberOfModuleForwarderRefs : UShort,
);

alias IMAGE_BOUND_IMPORT_DESCRIPTOR = Struct__IMAGE_BOUND_IMPORT_DESCRIPTOR;

alias PIMAGE_BOUND_IMPORT_DESCRIPTOR = Pointer[Struct__IMAGE_BOUND_IMPORT_DESCRIPTOR];

record Struct__IMAGE_BOUND_FORWARDER_REF (
    TimeDateStamp : CULong,
    OffsetModuleName : UShort,
    Reserved : UShort,
);

alias IMAGE_BOUND_FORWARDER_REF = Struct__IMAGE_BOUND_FORWARDER_REF;

alias PIMAGE_BOUND_FORWARDER_REF = Pointer[Struct__IMAGE_BOUND_FORWARDER_REF];

record Struct__IMAGE_RESOURCE_DIRECTORY (
    Characteristics : CULong,
    TimeDateStamp : CULong,
    MajorVersion : UShort,
    MinorVersion : UShort,
    NumberOfNamedEntries : UShort,
    NumberOfIdEntries : UShort,
);

alias IMAGE_RESOURCE_DIRECTORY = Struct__IMAGE_RESOURCE_DIRECTORY;

alias PIMAGE_RESOURCE_DIRECTORY = Pointer[Struct__IMAGE_RESOURCE_DIRECTORY];

record Struct__IMAGE_RESOURCE_DIRECTORY_ENTRY (
    unnamed_field0 : AUnionType,
    unnamed_field1 : AUnionType,
);

alias IMAGE_RESOURCE_DIRECTORY_ENTRY = Struct__IMAGE_RESOURCE_DIRECTORY_ENTRY;

alias PIMAGE_RESOURCE_DIRECTORY_ENTRY = Pointer[Struct__IMAGE_RESOURCE_DIRECTORY_ENTRY];

record Struct__IMAGE_RESOURCE_DIRECTORY_STRING (
    Length : UShort,
    NameString : Array[CChar,1],
);

alias IMAGE_RESOURCE_DIRECTORY_STRING = Struct__IMAGE_RESOURCE_DIRECTORY_STRING;

alias PIMAGE_RESOURCE_DIRECTORY_STRING = Pointer[Struct__IMAGE_RESOURCE_DIRECTORY_STRING];

record Struct__IMAGE_RESOURCE_DIR_STRING_U (
    Length : UShort,
    NameString : Array[UShort,1],
);

alias IMAGE_RESOURCE_DIR_STRING_U = Struct__IMAGE_RESOURCE_DIR_STRING_U;

alias PIMAGE_RESOURCE_DIR_STRING_U = Pointer[Struct__IMAGE_RESOURCE_DIR_STRING_U];

record Struct__IMAGE_RESOURCE_DATA_ENTRY (
    OffsetToData : CULong,
    Size : CULong,
    CodePage : CULong,
    Reserved : CULong,
);

alias IMAGE_RESOURCE_DATA_ENTRY = Struct__IMAGE_RESOURCE_DATA_ENTRY;

alias PIMAGE_RESOURCE_DATA_ENTRY = Pointer[Struct__IMAGE_RESOURCE_DATA_ENTRY];

record UnnamedStruct12 (
    Size : CULong,
    TimeDateStamp : CULong,
    MajorVersion : UShort,
    MinorVersion : UShort,
    GlobalFlagsClear : CULong,
    GlobalFlagsSet : CULong,
    CriticalSectionDefaultTimeout : CULong,
    DeCommitFreeBlockThreshold : CULong,
    DeCommitTotalFreeThreshold : CULong,
    LockPrefixTable : CULong,
    MaximumAllocationSize : CULong,
    VirtualMemoryThreshold : CULong,
    ProcessHeapFlags : CULong,
    ProcessAffinityMask : CULong,
    CSDVersion : UShort,
    Reserved1 : UShort,
    EditList : CULong,
    SecurityCookie : CULong,
    SEHandlerTable : CULong,
    SEHandlerCount : CULong,
);

alias IMAGE_LOAD_CONFIG_DIRECTORY32 = UnnamedStruct12;

alias PIMAGE_LOAD_CONFIG_DIRECTORY32 = Pointer[UnnamedStruct12];

record UnnamedStruct13 (
    Size : CULong,
    TimeDateStamp : CULong,
    MajorVersion : UShort,
    MinorVersion : UShort,
    GlobalFlagsClear : CULong,
    GlobalFlagsSet : CULong,
    CriticalSectionDefaultTimeout : CULong,
    DeCommitFreeBlockThreshold : UInt64,
    DeCommitTotalFreeThreshold : UInt64,
    LockPrefixTable : UInt64,
    MaximumAllocationSize : UInt64,
    VirtualMemoryThreshold : UInt64,
    ProcessAffinityMask : UInt64,
    ProcessHeapFlags : CULong,
    CSDVersion : UShort,
    Reserved1 : UShort,
    EditList : UInt64,
    SecurityCookie : UInt64,
    SEHandlerTable : UInt64,
    SEHandlerCount : UInt64,
);

alias IMAGE_LOAD_CONFIG_DIRECTORY64 = UnnamedStruct13;

alias PIMAGE_LOAD_CONFIG_DIRECTORY64 = Pointer[UnnamedStruct13];

alias IMAGE_LOAD_CONFIG_DIRECTORY = IMAGE_LOAD_CONFIG_DIRECTORY64;

alias PIMAGE_LOAD_CONFIG_DIRECTORY = PIMAGE_LOAD_CONFIG_DIRECTORY64;

record Struct__IMAGE_CE_RUNTIME_FUNCTION_ENTRY (
    FuncStart : CULong,
    PrologLen : CULong,
    FuncLen : CULong,
    ThirtyTwoBit : CULong,
    ExceptionFlag : CULong,
);

alias IMAGE_CE_RUNTIME_FUNCTION_ENTRY = Struct__IMAGE_CE_RUNTIME_FUNCTION_ENTRY;

alias PIMAGE_CE_RUNTIME_FUNCTION_ENTRY = Pointer[Struct__IMAGE_CE_RUNTIME_FUNCTION_ENTRY];

record Struct__IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY (
    BeginAddress : UInt64,
    EndAddress : UInt64,
    ExceptionHandler : UInt64,
    HandlerData : UInt64,
    PrologEndAddress : UInt64,
);

alias IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY = Struct__IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;

alias PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY = Pointer[Struct__IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY];

record Struct__IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY (
    BeginAddress : CULong,
    EndAddress : CULong,
    ExceptionHandler : CULong,
    HandlerData : CULong,
    PrologEndAddress : CULong,
);

alias IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY = Struct__IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;

alias PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY = Pointer[Struct__IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY];

record Struct__IMAGE_RUNTIME_FUNCTION_ENTRY (
    BeginAddress : CULong,
    EndAddress : CULong,
    UnwindInfoAddress : CULong,
);

alias _IMAGE_RUNTIME_FUNCTION_ENTRY = Struct__IMAGE_RUNTIME_FUNCTION_ENTRY;

alias _PIMAGE_RUNTIME_FUNCTION_ENTRY = Pointer[Struct__IMAGE_RUNTIME_FUNCTION_ENTRY];

alias IMAGE_IA64_RUNTIME_FUNCTION_ENTRY = _IMAGE_RUNTIME_FUNCTION_ENTRY;

alias PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY = _PIMAGE_RUNTIME_FUNCTION_ENTRY;

alias IMAGE_RUNTIME_FUNCTION_ENTRY = _IMAGE_RUNTIME_FUNCTION_ENTRY;

alias PIMAGE_RUNTIME_FUNCTION_ENTRY = _PIMAGE_RUNTIME_FUNCTION_ENTRY;

record Struct__IMAGE_DEBUG_DIRECTORY (
    Characteristics : CULong,
    TimeDateStamp : CULong,
    MajorVersion : UShort,
    MinorVersion : UShort,
    Type : CULong,
    SizeOfData : CULong,
    AddressOfRawData : CULong,
    PointerToRawData : CULong,
);

alias IMAGE_DEBUG_DIRECTORY = Struct__IMAGE_DEBUG_DIRECTORY;

alias PIMAGE_DEBUG_DIRECTORY = Pointer[Struct__IMAGE_DEBUG_DIRECTORY];

record Struct__IMAGE_COFF_SYMBOLS_HEADER (
    NumberOfSymbols : CULong,
    LvaToFirstSymbol : CULong,
    NumberOfLinenumbers : CULong,
    LvaToFirstLinenumber : CULong,
    RvaToFirstByteOfCode : CULong,
    RvaToLastByteOfCode : CULong,
    RvaToFirstByteOfData : CULong,
    RvaToLastByteOfData : CULong,
);

alias IMAGE_COFF_SYMBOLS_HEADER = Struct__IMAGE_COFF_SYMBOLS_HEADER;

alias PIMAGE_COFF_SYMBOLS_HEADER = Pointer[Struct__IMAGE_COFF_SYMBOLS_HEADER];

record Struct__FPO_DATA (
    ulOffStart : CULong,
    cbProcSize : CULong,
    cdwLocals : CULong,
    cdwParams : UShort,
    cbProlog : UShort,
    cbRegs : UShort,
    fHasSEH : UShort,
    fUseBP : UShort,
    reserved : UShort,
    cbFrame : UShort,
);

alias FPO_DATA = Struct__FPO_DATA;

alias PFPO_DATA = Pointer[Struct__FPO_DATA];

record Struct__IMAGE_DEBUG_MISC (
    DataType : CULong,
    Length : CULong,
    Unicode : CUChar,
    Reserved : Array[CUChar,3],
    Data : Array[CUChar,1],
);

alias IMAGE_DEBUG_MISC = Struct__IMAGE_DEBUG_MISC;

alias PIMAGE_DEBUG_MISC = Pointer[Struct__IMAGE_DEBUG_MISC];

record Struct__IMAGE_FUNCTION_ENTRY (
    StartingAddress : CULong,
    EndingAddress : CULong,
    EndOfPrologue : CULong,
);

alias IMAGE_FUNCTION_ENTRY = Struct__IMAGE_FUNCTION_ENTRY;

alias PIMAGE_FUNCTION_ENTRY = Pointer[Struct__IMAGE_FUNCTION_ENTRY];

record Struct__IMAGE_FUNCTION_ENTRY64 (
    StartingAddress : UInt64,
    EndingAddress : UInt64,
    unnamed_field2 : AUnionType,
);

alias IMAGE_FUNCTION_ENTRY64 = Struct__IMAGE_FUNCTION_ENTRY64;

alias PIMAGE_FUNCTION_ENTRY64 = Pointer[Struct__IMAGE_FUNCTION_ENTRY64];

record Struct__IMAGE_SEPARATE_DEBUG_HEADER (
    Signature : UShort,
    Flags : UShort,
    Machine : UShort,
    Characteristics : UShort,
    TimeDateStamp : CULong,
    CheckSum : CULong,
    ImageBase : CULong,
    SizeOfImage : CULong,
    NumberOfSections : CULong,
    ExportedNamesSize : CULong,
    DebugDirectorySize : CULong,
    SectionAlignment : CULong,
    Reserved : Array[CULong,2],
);

alias IMAGE_SEPARATE_DEBUG_HEADER = Struct__IMAGE_SEPARATE_DEBUG_HEADER;

alias PIMAGE_SEPARATE_DEBUG_HEADER = Pointer[Struct__IMAGE_SEPARATE_DEBUG_HEADER];

record Struct__NON_PAGED_DEBUG_INFO (
    Signature : UShort,
    Flags : UShort,
    Size : CULong,
    Machine : UShort,
    Characteristics : UShort,
    TimeDateStamp : CULong,
    CheckSum : CULong,
    SizeOfImage : CULong,
    ImageBase : UInt64,
);

alias NON_PAGED_DEBUG_INFO = Struct__NON_PAGED_DEBUG_INFO;

alias PNON_PAGED_DEBUG_INFO = Pointer[Struct__NON_PAGED_DEBUG_INFO];

record Struct__ImageArchitectureHeader (
    AmaskValue : UInt,
    Adummy1 : Int,
    AmaskShift : UInt,
    Adummy2 : Int,
    FirstEntryRVA : CULong,
);

alias IMAGE_ARCHITECTURE_HEADER = Struct__ImageArchitectureHeader;

alias PIMAGE_ARCHITECTURE_HEADER = Pointer[Struct__ImageArchitectureHeader];

record Struct__ImageArchitectureEntry (
    FixupInstRVA : CULong,
    NewInst : CULong,
);

alias IMAGE_ARCHITECTURE_ENTRY = Struct__ImageArchitectureEntry;

alias PIMAGE_ARCHITECTURE_ENTRY = Pointer[Struct__ImageArchitectureEntry];

record Struct_IMPORT_OBJECT_HEADER (
    Sig1 : UShort,
    Sig2 : UShort,
    Version : UShort,
    Machine : UShort,
    TimeDateStamp : CULong,
    SizeOfData : CULong,
    unnamed_field6 : AUnionType,
    Type : UShort,
    NameType : UShort,
    Reserved : UShort,
);

alias IMPORT_OBJECT_HEADER = Struct_IMPORT_OBJECT_HEADER;

alias IMPORT_OBJECT_CODE = 0;
alias IMPORT_OBJECT_DATA = 1;
alias IMPORT_OBJECT_CONST = 2;

alias IMPORT_OBJECT_TYPE = Int;

alias IMPORT_OBJECT_ORDINAL = 0;
alias IMPORT_OBJECT_NAME = 1;
alias IMPORT_OBJECT_NAME_NO_PREFIX = 2;
alias IMPORT_OBJECT_NAME_UNDECORATE = 3;

alias IMPORT_OBJECT_NAME_TYPE = Int;

alias COMIMAGE_FLAGS_ILONLY = 1;
alias COMIMAGE_FLAGS_32BITREQUIRED = 2;
alias COMIMAGE_FLAGS_IL_LIBRARY = 4;
alias COMIMAGE_FLAGS_STRONGNAMESIGNED = 8;
alias COMIMAGE_FLAGS_TRACKDEBUGDATA = 65536;
alias COR_VERSION_MAJOR_V2 = 2;
alias COR_VERSION_MAJOR = 2;
alias COR_VERSION_MINOR = 0;
alias COR_DELETED_NAME_LENGTH = 8;
alias COR_VTABLEGAP_NAME_LENGTH = 8;
alias NATIVE_TYPE_MAX_CB = 1;
alias COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 255;
alias IMAGE_COR_MIH_METHODRVA = 1;
alias IMAGE_COR_MIH_EHRVA = 2;
alias IMAGE_COR_MIH_BASICBLOCK = 8;
alias COR_VTABLE_32BIT = 1;
alias COR_VTABLE_64BIT = 2;
alias COR_VTABLE_FROM_UNMANAGED = 4;
alias COR_VTABLE_CALL_MOST_DERIVED = 16;
alias IMAGE_COR_EATJ_THUNK_SIZE = 32;
alias MAX_CLASS_NAME = 1024;
alias MAX_PACKAGE_NAME = 1024;

alias ReplacesCorHdrNumericDefines = Int;

record Struct_IMAGE_COR20_HEADER (
    cb : CULong,
    MajorRuntimeVersion : UShort,
    MinorRuntimeVersion : UShort,
    MetaData : IMAGE_DATA_DIRECTORY,
    Flags : CULong,
    EntryPointToken : CULong,
    Resources : IMAGE_DATA_DIRECTORY,
    StrongNameSignature : IMAGE_DATA_DIRECTORY,
    CodeManagerTable : IMAGE_DATA_DIRECTORY,
    VTableFixups : IMAGE_DATA_DIRECTORY,
    ExportAddressTableJumps : IMAGE_DATA_DIRECTORY,
    ManagedNativeHeader : IMAGE_DATA_DIRECTORY,
);

alias IMAGE_COR20_HEADER = Struct_IMAGE_COR20_HEADER;

alias PIMAGE_COR20_HEADER = Pointer[Struct_IMAGE_COR20_HEADER];

alias PSLIST_ENTRY = Pointer[Struct__SLIST_ENTRY];

record Struct__SLIST_ENTRY (
    Next : PSLIST_ENTRY,
);

alias SLIST_ENTRY = Struct__SLIST_ENTRY;

record Struct__SLIST_HEADER (
    Alignment : UInt64,
    Region : UInt64,
);

alias SLIST_HEADER = Struct__SLIST_HEADER;

alias PSLIST_HEADER = Pointer[Struct__SLIST_HEADER];

external RtlInitializeSListHead(
    ListHead : PSLIST_HEADER);

external RtlFirstEntrySList(
    ListHead : Pointer[SLIST_HEADER]) PSLIST_ENTRY;

external RtlInterlockedPopEntrySList(
    ListHead : PSLIST_HEADER) PSLIST_ENTRY;

external RtlInterlockedPushEntrySList(
    ListHead : PSLIST_HEADER,
    ListEntry : PSLIST_ENTRY) PSLIST_ENTRY;

external RtlInterlockedFlushSList(
    ListHead : PSLIST_HEADER) PSLIST_ENTRY;

external RtlQueryDepthSList(
    ListHead : PSLIST_HEADER) UShort;

external RtlCaptureContext(
    ContextRecord : PCONTEXT);

external RtlCompareMemory(
    Source1 : RawPointer,
    Source2 : RawPointer,
    Length : UInt64) UInt64;

external RtlUnwind(
    TargetFrame : PVOID,
    TargetIp : PVOID,
    ExceptionRecord : PEXCEPTION_RECORD,
    ReturnValue : PVOID);

external RtlSecureZeroMemory(
    ptr : PVOID,
    cnt : UInt64) PVOID;

record Struct__MESSAGE_RESOURCE_ENTRY (
    Length : UShort,
    Flags : UShort,
    Text : Array[CUChar,1],
);

alias MESSAGE_RESOURCE_ENTRY = Struct__MESSAGE_RESOURCE_ENTRY;

alias PMESSAGE_RESOURCE_ENTRY = Pointer[Struct__MESSAGE_RESOURCE_ENTRY];

record Struct__MESSAGE_RESOURCE_BLOCK (
    LowId : CULong,
    HighId : CULong,
    OffsetToEntries : CULong,
);

alias MESSAGE_RESOURCE_BLOCK = Struct__MESSAGE_RESOURCE_BLOCK;

alias PMESSAGE_RESOURCE_BLOCK = Pointer[Struct__MESSAGE_RESOURCE_BLOCK];

record Struct__MESSAGE_RESOURCE_DATA (
    NumberOfBlocks : CULong,
    Blocks : Array[MESSAGE_RESOURCE_BLOCK,1],
);

alias MESSAGE_RESOURCE_DATA = Struct__MESSAGE_RESOURCE_DATA;

alias PMESSAGE_RESOURCE_DATA = Pointer[Struct__MESSAGE_RESOURCE_DATA];

record Struct__OSVERSIONINFOA (
    dwOSVersionInfoSize : CULong,
    dwMajorVersion : CULong,
    dwMinorVersion : CULong,
    dwBuildNumber : CULong,
    dwPlatformId : CULong,
    szCSDVersion : Array[CChar,128],
);

alias OSVERSIONINFOA = Struct__OSVERSIONINFOA;

alias POSVERSIONINFOA = Pointer[Struct__OSVERSIONINFOA];

alias LPOSVERSIONINFOA = Pointer[Struct__OSVERSIONINFOA];

record Struct__OSVERSIONINFOW (
    dwOSVersionInfoSize : CULong,
    dwMajorVersion : CULong,
    dwMinorVersion : CULong,
    dwBuildNumber : CULong,
    dwPlatformId : CULong,
    szCSDVersion : Array[UShort,128],
);

alias OSVERSIONINFOW = Struct__OSVERSIONINFOW;

alias POSVERSIONINFOW = Pointer[Struct__OSVERSIONINFOW];

alias LPOSVERSIONINFOW = Pointer[Struct__OSVERSIONINFOW];

alias RTL_OSVERSIONINFOW = Struct__OSVERSIONINFOW;

alias PRTL_OSVERSIONINFOW = Pointer[Struct__OSVERSIONINFOW];

alias OSVERSIONINFO = OSVERSIONINFOA;

alias POSVERSIONINFO = POSVERSIONINFOA;

alias LPOSVERSIONINFO = LPOSVERSIONINFOA;

record Struct__OSVERSIONINFOEXA (
    dwOSVersionInfoSize : CULong,
    dwMajorVersion : CULong,
    dwMinorVersion : CULong,
    dwBuildNumber : CULong,
    dwPlatformId : CULong,
    szCSDVersion : Array[CChar,128],
    wServicePackMajor : UShort,
    wServicePackMinor : UShort,
    wSuiteMask : UShort,
    wProductType : CUChar,
    wReserved : CUChar,
);

alias OSVERSIONINFOEXA = Struct__OSVERSIONINFOEXA;

alias POSVERSIONINFOEXA = Pointer[Struct__OSVERSIONINFOEXA];

alias LPOSVERSIONINFOEXA = Pointer[Struct__OSVERSIONINFOEXA];

record Struct__OSVERSIONINFOEXW (
    dwOSVersionInfoSize : CULong,
    dwMajorVersion : CULong,
    dwMinorVersion : CULong,
    dwBuildNumber : CULong,
    dwPlatformId : CULong,
    szCSDVersion : Array[UShort,128],
    wServicePackMajor : UShort,
    wServicePackMinor : UShort,
    wSuiteMask : UShort,
    wProductType : CUChar,
    wReserved : CUChar,
);

alias OSVERSIONINFOEXW = Struct__OSVERSIONINFOEXW;

alias POSVERSIONINFOEXW = Pointer[Struct__OSVERSIONINFOEXW];

alias LPOSVERSIONINFOEXW = Pointer[Struct__OSVERSIONINFOEXW];

alias RTL_OSVERSIONINFOEXW = Struct__OSVERSIONINFOEXW;

alias PRTL_OSVERSIONINFOEXW = Pointer[Struct__OSVERSIONINFOEXW];

alias OSVERSIONINFOEX = OSVERSIONINFOEXA;

alias POSVERSIONINFOEX = POSVERSIONINFOEXA;

alias LPOSVERSIONINFOEX = LPOSVERSIONINFOEXA;

external VerSetConditionMask(
    ConditionMask : UInt64,
    TypeMask : CULong,
    Condition : CUChar) UInt64;

record Struct__RTL_CRITICAL_SECTION_DEBUG (
    Type : UShort,
    CreatorBackTraceIndex : UShort,
    CriticalSection : Pointer[Struct__RTL_CRITICAL_SECTION],
    ProcessLocksList : LIST_ENTRY,
    EntryCount : CULong,
    ContentionCount : CULong,
    Flags : CULong,
    CreatorBackTraceIndexHigh : UShort,
    SpareWORD : UShort,
);

alias RTL_CRITICAL_SECTION_DEBUG = Struct__RTL_CRITICAL_SECTION_DEBUG;

alias PRTL_CRITICAL_SECTION_DEBUG = Pointer[Struct__RTL_CRITICAL_SECTION_DEBUG];

alias RTL_RESOURCE_DEBUG = Struct__RTL_CRITICAL_SECTION_DEBUG;

alias PRTL_RESOURCE_DEBUG = Pointer[Struct__RTL_CRITICAL_SECTION_DEBUG];

record Struct__RTL_CRITICAL_SECTION (
    DebugInfo : PRTL_CRITICAL_SECTION_DEBUG,
    LockCount : CLong,
    RecursionCount : CLong,
    OwningThread : HANDLE,
    LockSemaphore : HANDLE,
    SpinCount : UInt64,
);

alias RTL_CRITICAL_SECTION = Struct__RTL_CRITICAL_SECTION;

alias PRTL_CRITICAL_SECTION = Pointer[Struct__RTL_CRITICAL_SECTION];

alias RTL_VERIFIER_DLL_LOAD_CALLBACK = CCodePointer[(Pointer[UShort],RawPointer,UInt64,RawPointer),()];

alias RTL_VERIFIER_DLL_UNLOAD_CALLBACK = CCodePointer[(Pointer[UShort],RawPointer,UInt64,RawPointer),()];

alias RTL_VERIFIER_NTDLLHEAPFREE_CALLBACK = CCodePointer[(RawPointer,UInt64),()];

record Struct__RTL_VERIFIER_THUNK_DESCRIPTOR (
    ThunkName : PCHAR,
    ThunkOldAddress : PVOID,
    ThunkNewAddress : PVOID,
);

alias RTL_VERIFIER_THUNK_DESCRIPTOR = Struct__RTL_VERIFIER_THUNK_DESCRIPTOR;

alias PRTL_VERIFIER_THUNK_DESCRIPTOR = Pointer[Struct__RTL_VERIFIER_THUNK_DESCRIPTOR];

record Struct__RTL_VERIFIER_DLL_DESCRIPTOR (
    DllName : PWCHAR,
    DllFlags : CULong,
    DllAddress : PVOID,
    DllThunks : PRTL_VERIFIER_THUNK_DESCRIPTOR,
);

alias RTL_VERIFIER_DLL_DESCRIPTOR = Struct__RTL_VERIFIER_DLL_DESCRIPTOR;

alias PRTL_VERIFIER_DLL_DESCRIPTOR = Pointer[Struct__RTL_VERIFIER_DLL_DESCRIPTOR];

record Struct__RTL_VERIFIER_PROVIDER_DESCRIPTOR (
    Length : CULong,
    ProviderDlls : PRTL_VERIFIER_DLL_DESCRIPTOR,
    ProviderDllLoadCallback : RTL_VERIFIER_DLL_LOAD_CALLBACK,
    ProviderDllUnloadCallback : RTL_VERIFIER_DLL_UNLOAD_CALLBACK,
    VerifierImage : PWSTR,
    VerifierFlags : CULong,
    VerifierDebug : CULong,
    RtlpGetStackTraceAddress : PVOID,
    RtlpDebugPageHeapCreate : PVOID,
    RtlpDebugPageHeapDestroy : PVOID,
    ProviderNtdllHeapFreeCallback : RTL_VERIFIER_NTDLLHEAPFREE_CALLBACK,
);

alias RTL_VERIFIER_PROVIDER_DESCRIPTOR = Struct__RTL_VERIFIER_PROVIDER_DESCRIPTOR;

alias PRTL_VERIFIER_PROVIDER_DESCRIPTOR = Pointer[Struct__RTL_VERIFIER_PROVIDER_DESCRIPTOR];

external RtlApplicationVerifierStop(
    Code : UInt64,
    Message : PSTR,
    Param1 : UInt64,
    Description1 : PSTR,
    Param2 : UInt64,
    Description2 : PSTR,
    Param3 : UInt64,
    Description3 : PSTR,
    Param4 : UInt64,
    Description4 : PSTR);

alias PVECTORED_EXCEPTION_HANDLER = CCodePointer[(Pointer[Struct__EXCEPTION_POINTERS]),(CLong)];

alias HeapCompatibilityInformation = 0;

alias HEAP_INFORMATION_CLASS = Int;

external RtlSetHeapInformation(
    HeapHandle : PVOID,
    HeapInformationClass : HEAP_INFORMATION_CLASS,
    HeapInformation : PVOID,
    HeapInformationLength : UInt64) CULong;

external RtlQueryHeapInformation(
    HeapHandle : PVOID,
    HeapInformationClass : HEAP_INFORMATION_CLASS,
    HeapInformation : PVOID,
    HeapInformationLength : UInt64,
    ReturnLength : PSIZE_T) CULong;

external RtlMultipleAllocateHeap(
    HeapHandle : PVOID,
    Flags : CULong,
    Size : UInt64,
    Count : CULong,
    Array : Pointer[PVOID]) CULong;

external RtlMultipleFreeHeap(
    HeapHandle : PVOID,
    Flags : CULong,
    Count : CULong,
    Array : Pointer[PVOID]) CULong;

alias WAITORTIMERCALLBACKFUNC = CCodePointer[(RawPointer,CUChar),()];

alias WORKERCALLBACKFUNC = CCodePointer[(RawPointer),()];

alias APC_CALLBACK_FUNCTION = CCodePointer[(CULong,RawPointer,RawPointer),()];

alias PFLS_CALLBACK_FUNCTION = CCodePointer[(RawPointer),()];

alias ActivationContextBasicInformation = 1;
alias ActivationContextDetailedInformation = 2;
alias AssemblyDetailedInformationInActivationContext = 3;
alias FileInformationInAssemblyOfAssemblyInActivationContext = 4;
alias MaxActivationContextInfoClass = 5;
alias AssemblyDetailedInformationInActivationContxt = 3;
alias FileInformationInAssemblyOfAssemblyInActivationContxt = 4;

alias ACTIVATION_CONTEXT_INFO_CLASS = Int;

record Struct__ACTIVATION_CONTEXT_QUERY_INDEX (
    ulAssemblyIndex : CULong,
    ulFileIndexInAssembly : CULong,
);

alias ACTIVATION_CONTEXT_QUERY_INDEX = Struct__ACTIVATION_CONTEXT_QUERY_INDEX;

alias PACTIVATION_CONTEXT_QUERY_INDEX = Pointer[Struct__ACTIVATION_CONTEXT_QUERY_INDEX];

alias PCACTIVATION_CONTEXT_QUERY_INDEX = Pointer[Struct__ACTIVATION_CONTEXT_QUERY_INDEX];

record Struct__ASSEMBLY_FILE_DETAILED_INFORMATION (
    ulFlags : CULong,
    ulFilenameLength : CULong,
    ulPathLength : CULong,
    lpFileName : PCWSTR,
    lpFilePath : PCWSTR,
);

alias ASSEMBLY_FILE_DETAILED_INFORMATION = Struct__ASSEMBLY_FILE_DETAILED_INFORMATION;

alias PASSEMBLY_FILE_DETAILED_INFORMATION = Pointer[Struct__ASSEMBLY_FILE_DETAILED_INFORMATION];

alias PCASSEMBLY_FILE_DETAILED_INFORMATION = Pointer[ASSEMBLY_FILE_DETAILED_INFORMATION];

record Struct__ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION (
    ulFlags : CULong,
    ulEncodedAssemblyIdentityLength : CULong,
    ulManifestPathType : CULong,
    ulManifestPathLength : CULong,
    liManifestLastWriteTime : LARGE_INTEGER,
    ulPolicyPathType : CULong,
    ulPolicyPathLength : CULong,
    liPolicyLastWriteTime : LARGE_INTEGER,
    ulMetadataSatelliteRosterIndex : CULong,
    ulManifestVersionMajor : CULong,
    ulManifestVersionMinor : CULong,
    ulPolicyVersionMajor : CULong,
    ulPolicyVersionMinor : CULong,
    ulAssemblyDirectoryNameLength : CULong,
    lpAssemblyEncodedAssemblyIdentity : PCWSTR,
    lpAssemblyManifestPath : PCWSTR,
    lpAssemblyPolicyPath : PCWSTR,
    lpAssemblyDirectoryName : PCWSTR,
    ulFileCount : CULong,
);

alias ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION = Struct__ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;

alias PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION = Pointer[Struct__ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION];

alias PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION = Pointer[Struct__ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION];

record Struct__ACTIVATION_CONTEXT_DETAILED_INFORMATION (
    dwFlags : CULong,
    ulFormatVersion : CULong,
    ulAssemblyCount : CULong,
    ulRootManifestPathType : CULong,
    ulRootManifestPathChars : CULong,
    ulRootConfigurationPathType : CULong,
    ulRootConfigurationPathChars : CULong,
    ulAppDirPathType : CULong,
    ulAppDirPathChars : CULong,
    lpRootManifestPath : PCWSTR,
    lpRootConfigurationPath : PCWSTR,
    lpAppDirPath : PCWSTR,
);

alias ACTIVATION_CONTEXT_DETAILED_INFORMATION = Struct__ACTIVATION_CONTEXT_DETAILED_INFORMATION;

alias PACTIVATION_CONTEXT_DETAILED_INFORMATION = Pointer[Struct__ACTIVATION_CONTEXT_DETAILED_INFORMATION];

alias PCACTIVATION_CONTEXT_DETAILED_INFORMATION = Pointer[Struct__ACTIVATION_CONTEXT_DETAILED_INFORMATION];

record Struct__EVENTLOGRECORD (
    Length : CULong,
    Reserved : CULong,
    RecordNumber : CULong,
    TimeGenerated : CULong,
    TimeWritten : CULong,
    EventID : CULong,
    EventType : UShort,
    NumStrings : UShort,
    EventCategory : UShort,
    ReservedFlags : UShort,
    ClosingRecordNumber : CULong,
    StringOffset : CULong,
    UserSidLength : CULong,
    UserSidOffset : CULong,
    DataLength : CULong,
    DataOffset : CULong,
);

alias EVENTLOGRECORD = Struct__EVENTLOGRECORD;

alias PEVENTLOGRECORD = Pointer[Struct__EVENTLOGRECORD];

record Struct__EVENTSFORLOGFILE (
    ulSize : CULong,
    szLogicalLogFile : Array[UShort,256],
    ulNumRecords : CULong,
    pEventLogRecords : Array[EVENTLOGRECORD,0],
);

alias EVENTSFORLOGFILE = Struct__EVENTSFORLOGFILE;

alias PEVENTSFORLOGFILE = Pointer[Struct__EVENTSFORLOGFILE];

record Struct__PACKEDEVENTINFO (
    ulSize : CULong,
    ulNumEventsForLogFile : CULong,
    ulOffsets : Array[CULong,0],
);

alias PACKEDEVENTINFO = Struct__PACKEDEVENTINFO;

alias PPACKEDEVENTINFO = Pointer[Struct__PACKEDEVENTINFO];

alias DriverType = 1;
alias FileSystemType = 2;
alias Win32ServiceOwnProcess = 16;
alias Win32ServiceShareProcess = 32;
alias AdapterType = 4;
alias RecognizerType = 8;

alias SERVICE_NODE_TYPE = Int;

alias BootLoad = 0;
alias SystemLoad = 1;
alias AutoLoad = 2;
alias DemandLoad = 3;
alias DisableLoad = 4;

alias SERVICE_LOAD_TYPE = Int;

alias IgnoreError = 0;
alias NormalError = 1;
alias SevereError = 2;
alias CriticalError = 3;

alias SERVICE_ERROR_TYPE = Int;

record Struct__TAPE_ERASE (
    Type : CULong,
    Immediate : CUChar,
);

alias TAPE_ERASE = Struct__TAPE_ERASE;

alias PTAPE_ERASE = Pointer[Struct__TAPE_ERASE];

record Struct__TAPE_PREPARE (
    Operation : CULong,
    Immediate : CUChar,
);

alias TAPE_PREPARE = Struct__TAPE_PREPARE;

alias PTAPE_PREPARE = Pointer[Struct__TAPE_PREPARE];

record Struct__TAPE_WRITE_MARKS (
    Type : CULong,
    Count : CULong,
    Immediate : CUChar,
);

alias TAPE_WRITE_MARKS = Struct__TAPE_WRITE_MARKS;

alias PTAPE_WRITE_MARKS = Pointer[Struct__TAPE_WRITE_MARKS];

record Struct__TAPE_GET_POSITION (
    Type : CULong,
    Partition : CULong,
    Offset : LARGE_INTEGER,
);

alias TAPE_GET_POSITION = Struct__TAPE_GET_POSITION;

alias PTAPE_GET_POSITION = Pointer[Struct__TAPE_GET_POSITION];

record Struct__TAPE_SET_POSITION (
    Method : CULong,
    Partition : CULong,
    Offset : LARGE_INTEGER,
    Immediate : CUChar,
);

alias TAPE_SET_POSITION = Struct__TAPE_SET_POSITION;

alias PTAPE_SET_POSITION = Pointer[Struct__TAPE_SET_POSITION];

record Struct__TAPE_GET_DRIVE_PARAMETERS (
    ECC : CUChar,
    Compression : CUChar,
    DataPadding : CUChar,
    ReportSetmarks : CUChar,
    DefaultBlockSize : CULong,
    MaximumBlockSize : CULong,
    MinimumBlockSize : CULong,
    MaximumPartitionCount : CULong,
    FeaturesLow : CULong,
    FeaturesHigh : CULong,
    EOTWarningZoneSize : CULong,
);

alias TAPE_GET_DRIVE_PARAMETERS = Struct__TAPE_GET_DRIVE_PARAMETERS;

alias PTAPE_GET_DRIVE_PARAMETERS = Pointer[Struct__TAPE_GET_DRIVE_PARAMETERS];

record Struct__TAPE_SET_DRIVE_PARAMETERS (
    ECC : CUChar,
    Compression : CUChar,
    DataPadding : CUChar,
    ReportSetmarks : CUChar,
    EOTWarningZoneSize : CULong,
);

alias TAPE_SET_DRIVE_PARAMETERS = Struct__TAPE_SET_DRIVE_PARAMETERS;

alias PTAPE_SET_DRIVE_PARAMETERS = Pointer[Struct__TAPE_SET_DRIVE_PARAMETERS];

record Struct__TAPE_GET_MEDIA_PARAMETERS (
    Capacity : LARGE_INTEGER,
    Remaining : LARGE_INTEGER,
    BlockSize : CULong,
    PartitionCount : CULong,
    WriteProtected : CUChar,
);

alias TAPE_GET_MEDIA_PARAMETERS = Struct__TAPE_GET_MEDIA_PARAMETERS;

alias PTAPE_GET_MEDIA_PARAMETERS = Pointer[Struct__TAPE_GET_MEDIA_PARAMETERS];

record Struct__TAPE_SET_MEDIA_PARAMETERS (
    BlockSize : CULong,
);

alias TAPE_SET_MEDIA_PARAMETERS = Struct__TAPE_SET_MEDIA_PARAMETERS;

alias PTAPE_SET_MEDIA_PARAMETERS = Pointer[Struct__TAPE_SET_MEDIA_PARAMETERS];

record Struct__TAPE_CREATE_PARTITION (
    Method : CULong,
    Count : CULong,
    Size : CULong,
);

alias TAPE_CREATE_PARTITION = Struct__TAPE_CREATE_PARTITION;

alias PTAPE_CREATE_PARTITION = Pointer[Struct__TAPE_CREATE_PARTITION];

record Struct__TAPE_WMI_OPERATIONS (
    Method : CULong,
    DataBufferSize : CULong,
    DataBuffer : PVOID,
);

alias TAPE_WMI_OPERATIONS = Struct__TAPE_WMI_OPERATIONS;

alias PTAPE_WMI_OPERATIONS = Pointer[Struct__TAPE_WMI_OPERATIONS];

alias TapeDriveProblemNone = 0;
alias TapeDriveReadWriteWarning = 1;
alias TapeDriveReadWriteError = 2;
alias TapeDriveReadWarning = 3;
alias TapeDriveWriteWarning = 4;
alias TapeDriveReadError = 5;
alias TapeDriveWriteError = 6;
alias TapeDriveHardwareError = 7;
alias TapeDriveUnsupportedMedia = 8;
alias TapeDriveScsiConnectionError = 9;
alias TapeDriveTimetoClean = 10;
alias TapeDriveCleanDriveNow = 11;
alias TapeDriveMediaLifeExpired = 12;
alias TapeDriveSnappedTape = 13;

alias TAPE_DRIVE_PROBLEM_TYPE = Int;

external NtCurrentTeb() OpaquePointer;

external GetCurrentFiber() PVOID;

external GetFiberData() PVOID;

alias WPARAM = UInt64;

alias LPARAM = Int64;

alias LRESULT = Int64;

record Struct_HWND__ (
    unused : Int,
);

alias HWND = Pointer[Struct_HWND__];

record Struct_HHOOK__ (
    unused : Int,
);

alias HHOOK = Pointer[Struct_HHOOK__];

alias ATOM = UShort;

alias SPHANDLE = Pointer[HANDLE];

alias LPHANDLE = Pointer[HANDLE];

alias HGLOBAL = HANDLE;

alias HLOCAL = HANDLE;

alias GLOBALHANDLE = HANDLE;

alias LOCALHANDLE = HANDLE;

alias FARPROC = CCodePointer[(),(Int64)];

alias NEARPROC = CCodePointer[(),(Int64)];

alias PROC = CCodePointer[(),(Int64)];

alias HGDIOBJ = RawPointer;

record Struct_HKEY__ (
    unused : Int,
);

alias HKEY = Pointer[Struct_HKEY__];

alias PHKEY = Pointer[HKEY];

record Struct_HACCEL__ (
    unused : Int,
);

alias HACCEL = Pointer[Struct_HACCEL__];

record Struct_HBITMAP__ (
    unused : Int,
);

alias HBITMAP = Pointer[Struct_HBITMAP__];

record Struct_HBRUSH__ (
    unused : Int,
);

alias HBRUSH = Pointer[Struct_HBRUSH__];

record Struct_HCOLORSPACE__ (
    unused : Int,
);

alias HCOLORSPACE = Pointer[Struct_HCOLORSPACE__];

record Struct_HDC__ (
    unused : Int,
);

alias HDC = Pointer[Struct_HDC__];

record Struct_HGLRC__ (
    unused : Int,
);

alias HGLRC = Pointer[Struct_HGLRC__];

record Struct_HDESK__ (
    unused : Int,
);

alias HDESK = Pointer[Struct_HDESK__];

record Struct_HENHMETAFILE__ (
    unused : Int,
);

alias HENHMETAFILE = Pointer[Struct_HENHMETAFILE__];

record Struct_HFONT__ (
    unused : Int,
);

alias HFONT = Pointer[Struct_HFONT__];

record Struct_HICON__ (
    unused : Int,
);

alias HICON = Pointer[Struct_HICON__];

record Struct_HMENU__ (
    unused : Int,
);

alias HMENU = Pointer[Struct_HMENU__];

record Struct_HMETAFILE__ (
    unused : Int,
);

alias HMETAFILE = Pointer[Struct_HMETAFILE__];

record Struct_HINSTANCE__ (
    unused : Int,
);

alias HINSTANCE = Pointer[Struct_HINSTANCE__];

alias HMODULE = HINSTANCE;

record Struct_HPALETTE__ (
    unused : Int,
);

alias HPALETTE = Pointer[Struct_HPALETTE__];

record Struct_HPEN__ (
    unused : Int,
);

alias HPEN = Pointer[Struct_HPEN__];

record Struct_HRGN__ (
    unused : Int,
);

alias HRGN = Pointer[Struct_HRGN__];

record Struct_HRSRC__ (
    unused : Int,
);

alias HRSRC = Pointer[Struct_HRSRC__];

record Struct_HSTR__ (
    unused : Int,
);

alias HSTR = Pointer[Struct_HSTR__];

record Struct_HTASK__ (
    unused : Int,
);

alias HTASK = Pointer[Struct_HTASK__];

record Struct_HWINSTA__ (
    unused : Int,
);

alias HWINSTA = Pointer[Struct_HWINSTA__];

record Struct_HKL__ (
    unused : Int,
);

alias HKL = Pointer[Struct_HKL__];

record Struct_HMONITOR__ (
    unused : Int,
);

alias HMONITOR = Pointer[Struct_HMONITOR__];

record Struct_HWINEVENTHOOK__ (
    unused : Int,
);

alias HWINEVENTHOOK = Pointer[Struct_HWINEVENTHOOK__];

record Struct_HUMPD__ (
    unused : Int,
);

alias HUMPD = Pointer[Struct_HUMPD__];

alias HFILE = Int;

alias HCURSOR = HICON;

alias COLORREF = CULong;

alias LPCOLORREF = Pointer[CULong];

record Struct_tagRECT (
    left : CLong,
    top : CLong,
    right : CLong,
    bottom : CLong,
);

alias RECT = Struct_tagRECT;

alias PRECT = Pointer[Struct_tagRECT];

alias NPRECT = Pointer[Struct_tagRECT];

alias LPRECT = Pointer[Struct_tagRECT];

alias LPCRECT = Pointer[RECT];

record Struct__RECTL (
    left : CLong,
    top : CLong,
    right : CLong,
    bottom : CLong,
);

alias RECTL = Struct__RECTL;

alias PRECTL = Pointer[Struct__RECTL];

alias LPRECTL = Pointer[Struct__RECTL];

alias LPCRECTL = Pointer[RECTL];

record Struct_tagPOINT (
    x : CLong,
    y : CLong,
);

alias POINT = Struct_tagPOINT;

alias PPOINT = Pointer[Struct_tagPOINT];

alias NPPOINT = Pointer[Struct_tagPOINT];

alias LPPOINT = Pointer[Struct_tagPOINT];

record Struct__POINTL (
    x : CLong,
    y : CLong,
);

alias POINTL = Struct__POINTL;

alias PPOINTL = Pointer[Struct__POINTL];

record Struct_tagSIZE (
    cx : CLong,
    cy : CLong,
);

alias SIZE = Struct_tagSIZE;

alias PSIZE = Pointer[Struct_tagSIZE];

alias LPSIZE = Pointer[Struct_tagSIZE];

alias SIZEL = SIZE;

alias PSIZEL = Pointer[SIZE];

alias LPSIZEL = Pointer[SIZE];

record Struct_tagPOINTS (
    x : Short,
    y : Short,
);

alias POINTS = Struct_tagPOINTS;

alias PPOINTS = Pointer[Struct_tagPOINTS];

alias LPPOINTS = Pointer[Struct_tagPOINTS];

record Struct__FILETIME (
    dwLowDateTime : CULong,
    dwHighDateTime : CULong,
);

alias FILETIME = Struct__FILETIME;

alias PFILETIME = Pointer[Struct__FILETIME];

alias LPFILETIME = Pointer[Struct__FILETIME];

record Struct__OVERLAPPED (
    Internal : UInt64,
    InternalHigh : UInt64,
    unnamed_field2 : AUnionType,
    hEvent : HANDLE,
);

alias OVERLAPPED = Struct__OVERLAPPED;

alias LPOVERLAPPED = Pointer[Struct__OVERLAPPED];

record Struct__SECURITY_ATTRIBUTES (
    nLength : CULong,
    lpSecurityDescriptor : LPVOID,
    bInheritHandle : Int,
);

alias SECURITY_ATTRIBUTES = Struct__SECURITY_ATTRIBUTES;

alias PSECURITY_ATTRIBUTES = Pointer[Struct__SECURITY_ATTRIBUTES];

alias LPSECURITY_ATTRIBUTES = Pointer[Struct__SECURITY_ATTRIBUTES];

record Struct__PROCESS_INFORMATION (
    hProcess : HANDLE,
    hThread : HANDLE,
    dwProcessId : CULong,
    dwThreadId : CULong,
);

alias PROCESS_INFORMATION = Struct__PROCESS_INFORMATION;

alias PPROCESS_INFORMATION = Pointer[Struct__PROCESS_INFORMATION];

alias LPPROCESS_INFORMATION = Pointer[Struct__PROCESS_INFORMATION];

record Struct__SYSTEMTIME (
    wYear : UShort,
    wMonth : UShort,
    wDayOfWeek : UShort,
    wDay : UShort,
    wHour : UShort,
    wMinute : UShort,
    wSecond : UShort,
    wMilliseconds : UShort,
);

alias SYSTEMTIME = Struct__SYSTEMTIME;

alias PSYSTEMTIME = Pointer[Struct__SYSTEMTIME];

alias LPSYSTEMTIME = Pointer[Struct__SYSTEMTIME];

alias PTHREAD_START_ROUTINE = CCodePointer[(RawPointer),(CULong)];

alias LPTHREAD_START_ROUTINE = PTHREAD_START_ROUTINE;

alias PFIBER_START_ROUTINE = CCodePointer[(RawPointer),()];

alias LPFIBER_START_ROUTINE = PFIBER_START_ROUTINE;

alias CRITICAL_SECTION = RTL_CRITICAL_SECTION;

alias PCRITICAL_SECTION = PRTL_CRITICAL_SECTION;

alias LPCRITICAL_SECTION = PRTL_CRITICAL_SECTION;

alias CRITICAL_SECTION_DEBUG = RTL_CRITICAL_SECTION_DEBUG;

alias PCRITICAL_SECTION_DEBUG = PRTL_CRITICAL_SECTION_DEBUG;

alias LPCRITICAL_SECTION_DEBUG = PRTL_CRITICAL_SECTION_DEBUG;

external EncodePointer(
    Ptr : PVOID) PVOID;

external DecodePointer(
    Ptr : PVOID) PVOID;

external EncodeSystemPointer(
    Ptr : PVOID) PVOID;

external DecodeSystemPointer(
    Ptr : PVOID) PVOID;

alias LPLDT_ENTRY = LPVOID;

record Struct__COMMPROP (
    wPacketLength : UShort,
    wPacketVersion : UShort,
    dwServiceMask : CULong,
    dwReserved1 : CULong,
    dwMaxTxQueue : CULong,
    dwMaxRxQueue : CULong,
    dwMaxBaud : CULong,
    dwProvSubType : CULong,
    dwProvCapabilities : CULong,
    dwSettableParams : CULong,
    dwSettableBaud : CULong,
    wSettableData : UShort,
    wSettableStopParity : UShort,
    dwCurrentTxQueue : CULong,
    dwCurrentRxQueue : CULong,
    dwProvSpec1 : CULong,
    dwProvSpec2 : CULong,
    wcProvChar : Array[UShort,1],
);

alias COMMPROP = Struct__COMMPROP;

alias LPCOMMPROP = Pointer[Struct__COMMPROP];

record Struct__COMSTAT (
    fCtsHold : CULong,
    fDsrHold : CULong,
    fRlsdHold : CULong,
    fXoffHold : CULong,
    fXoffSent : CULong,
    fEof : CULong,
    fTxim : CULong,
    fReserved : CULong,
    cbInQue : CULong,
    cbOutQue : CULong,
);

alias COMSTAT = Struct__COMSTAT;

alias LPCOMSTAT = Pointer[Struct__COMSTAT];

record Struct__DCB (
    DCBlength : CULong,
    BaudRate : CULong,
    fBinary : CULong,
    fParity : CULong,
    fOutxCtsFlow : CULong,
    fOutxDsrFlow : CULong,
    fDtrControl : CULong,
    fDsrSensitivity : CULong,
    fTXContinueOnXoff : CULong,
    fOutX : CULong,
    fInX : CULong,
    fErrorChar : CULong,
    fNull : CULong,
    fRtsControl : CULong,
    fAbortOnError : CULong,
    fDummy2 : CULong,
    wReserved : UShort,
    XonLim : UShort,
    XoffLim : UShort,
    ByteSize : CUChar,
    Parity : CUChar,
    StopBits : CUChar,
    XonChar : CChar,
    XoffChar : CChar,
    ErrorChar : CChar,
    EofChar : CChar,
    EvtChar : CChar,
    wReserved1 : UShort,
);

alias DCB = Struct__DCB;

alias LPDCB = Pointer[Struct__DCB];

record Struct__COMMTIMEOUTS (
    ReadIntervalTimeout : CULong,
    ReadTotalTimeoutMultiplier : CULong,
    ReadTotalTimeoutConstant : CULong,
    WriteTotalTimeoutMultiplier : CULong,
    WriteTotalTimeoutConstant : CULong,
);

alias COMMTIMEOUTS = Struct__COMMTIMEOUTS;

alias LPCOMMTIMEOUTS = Pointer[Struct__COMMTIMEOUTS];

record Struct__COMMCONFIG (
    dwSize : CULong,
    wVersion : UShort,
    wReserved : UShort,
    dcb : DCB,
    dwProviderSubType : CULong,
    dwProviderOffset : CULong,
    dwProviderSize : CULong,
    wcProviderData : Array[UShort,1],
);

alias COMMCONFIG = Struct__COMMCONFIG;

alias LPCOMMCONFIG = Pointer[Struct__COMMCONFIG];

record Struct__SYSTEM_INFO (
    unnamed_field0 : AUnionType,
    dwPageSize : CULong,
    lpMinimumApplicationAddress : LPVOID,
    lpMaximumApplicationAddress : LPVOID,
    dwActiveProcessorMask : UInt64,
    dwNumberOfProcessors : CULong,
    dwProcessorType : CULong,
    dwAllocationGranularity : CULong,
    wProcessorLevel : UShort,
    wProcessorRevision : UShort,
);

alias SYSTEM_INFO = Struct__SYSTEM_INFO;

alias LPSYSTEM_INFO = Pointer[Struct__SYSTEM_INFO];

record Struct__MEMORYSTATUS (
    dwLength : CULong,
    dwMemoryLoad : CULong,
    dwTotalPhys : UInt64,
    dwAvailPhys : UInt64,
    dwTotalPageFile : UInt64,
    dwAvailPageFile : UInt64,
    dwTotalVirtual : UInt64,
    dwAvailVirtual : UInt64,
);

alias MEMORYSTATUS = Struct__MEMORYSTATUS;

alias LPMEMORYSTATUS = Pointer[Struct__MEMORYSTATUS];

record Struct__EXCEPTION_DEBUG_INFO (
    ExceptionRecord : EXCEPTION_RECORD,
    dwFirstChance : CULong,
);

alias EXCEPTION_DEBUG_INFO = Struct__EXCEPTION_DEBUG_INFO;

alias LPEXCEPTION_DEBUG_INFO = Pointer[Struct__EXCEPTION_DEBUG_INFO];

record Struct__CREATE_THREAD_DEBUG_INFO (
    hThread : HANDLE,
    lpThreadLocalBase : LPVOID,
    lpStartAddress : LPTHREAD_START_ROUTINE,
);

alias CREATE_THREAD_DEBUG_INFO = Struct__CREATE_THREAD_DEBUG_INFO;

alias LPCREATE_THREAD_DEBUG_INFO = Pointer[Struct__CREATE_THREAD_DEBUG_INFO];

record Struct__CREATE_PROCESS_DEBUG_INFO (
    hFile : HANDLE,
    hProcess : HANDLE,
    hThread : HANDLE,
    lpBaseOfImage : LPVOID,
    dwDebugInfoFileOffset : CULong,
    nDebugInfoSize : CULong,
    lpThreadLocalBase : LPVOID,
    lpStartAddress : LPTHREAD_START_ROUTINE,
    lpImageName : LPVOID,
    fUnicode : UShort,
);

alias CREATE_PROCESS_DEBUG_INFO = Struct__CREATE_PROCESS_DEBUG_INFO;

alias LPCREATE_PROCESS_DEBUG_INFO = Pointer[Struct__CREATE_PROCESS_DEBUG_INFO];

record Struct__EXIT_THREAD_DEBUG_INFO (
    dwExitCode : CULong,
);

alias EXIT_THREAD_DEBUG_INFO = Struct__EXIT_THREAD_DEBUG_INFO;

alias LPEXIT_THREAD_DEBUG_INFO = Pointer[Struct__EXIT_THREAD_DEBUG_INFO];

record Struct__EXIT_PROCESS_DEBUG_INFO (
    dwExitCode : CULong,
);

alias EXIT_PROCESS_DEBUG_INFO = Struct__EXIT_PROCESS_DEBUG_INFO;

alias LPEXIT_PROCESS_DEBUG_INFO = Pointer[Struct__EXIT_PROCESS_DEBUG_INFO];

record Struct__LOAD_DLL_DEBUG_INFO (
    hFile : HANDLE,
    lpBaseOfDll : LPVOID,
    dwDebugInfoFileOffset : CULong,
    nDebugInfoSize : CULong,
    lpImageName : LPVOID,
    fUnicode : UShort,
);

alias LOAD_DLL_DEBUG_INFO = Struct__LOAD_DLL_DEBUG_INFO;

alias LPLOAD_DLL_DEBUG_INFO = Pointer[Struct__LOAD_DLL_DEBUG_INFO];

record Struct__UNLOAD_DLL_DEBUG_INFO (
    lpBaseOfDll : LPVOID,
);

alias UNLOAD_DLL_DEBUG_INFO = Struct__UNLOAD_DLL_DEBUG_INFO;

alias LPUNLOAD_DLL_DEBUG_INFO = Pointer[Struct__UNLOAD_DLL_DEBUG_INFO];

record Struct__OUTPUT_DEBUG_STRING_INFO (
    lpDebugStringData : LPSTR,
    fUnicode : UShort,
    nDebugStringLength : UShort,
);

alias OUTPUT_DEBUG_STRING_INFO = Struct__OUTPUT_DEBUG_STRING_INFO;

alias LPOUTPUT_DEBUG_STRING_INFO = Pointer[Struct__OUTPUT_DEBUG_STRING_INFO];

record Struct__RIP_INFO (
    dwError : CULong,
    dwType : CULong,
);

alias RIP_INFO = Struct__RIP_INFO;

alias LPRIP_INFO = Pointer[Struct__RIP_INFO];

record Struct__DEBUG_EVENT (
    dwDebugEventCode : CULong,
    dwProcessId : CULong,
    dwThreadId : CULong,
    u : AUnionType,
);

alias DEBUG_EVENT = Struct__DEBUG_EVENT;

alias LPDEBUG_EVENT = Pointer[Struct__DEBUG_EVENT];

alias LPCONTEXT = PCONTEXT;

alias LPEXCEPTION_RECORD = PEXCEPTION_RECORD;

alias LPEXCEPTION_POINTERS = PEXCEPTION_POINTERS;

record Struct__OFSTRUCT (
    cBytes : CUChar,
    fFixedDisk : CUChar,
    nErrCode : UShort,
    Reserved1 : UShort,
    Reserved2 : UShort,
    szPathName : Array[CChar,128],
);

alias OFSTRUCT = Struct__OFSTRUCT;

alias LPOFSTRUCT = Pointer[Struct__OFSTRUCT];

alias POFSTRUCT = Pointer[Struct__OFSTRUCT];

external InitializeSListHead(
    ListHead : PSLIST_HEADER);

external InterlockedPopEntrySList(
    ListHead : PSLIST_HEADER) PSLIST_ENTRY;

external InterlockedPushEntrySList(
    ListHead : PSLIST_HEADER,
    ListEntry : PSLIST_ENTRY) PSLIST_ENTRY;

external InterlockedFlushSList(
    ListHead : PSLIST_HEADER) PSLIST_ENTRY;

external QueryDepthSList(
    ListHead : PSLIST_HEADER) UShort;

external FreeResource(
    hResData : HGLOBAL) Int;

external LockResource(
    hResData : HGLOBAL) LPVOID;

external WinMain(
    hInstance : HINSTANCE,
    hPrevInstance : HINSTANCE,
    lpCmdLine : LPSTR,
    nShowCmd : Int) Int;

external wWinMain(
    hInstance : HINSTANCE,
    hPrevInstance : HINSTANCE,
    lpCmdLine : LPWSTR,
    nShowCmd : Int) Int;

external FreeLibrary(
    hLibModule : HMODULE) Int;

external FreeLibraryAndExitThread(
    hLibModule : HMODULE,
    dwExitCode : CULong);

external DisableThreadLibraryCalls(
    hLibModule : HMODULE) Int;

external GetProcAddress(
    hModule : HMODULE,
    lpProcName : LPCSTR) FARPROC;

external GetVersion() CULong;

external GlobalAlloc(
    uFlags : UInt,
    dwBytes : UInt64) HGLOBAL;

external GlobalReAlloc(
    hMem : HGLOBAL,
    dwBytes : UInt64,
    uFlags : UInt) HGLOBAL;

external GlobalSize(
    hMem : HGLOBAL) UInt64;

external GlobalFlags(
    hMem : HGLOBAL) UInt;

external GlobalLock(
    hMem : HGLOBAL) LPVOID;

external GlobalHandle(
    pMem : LPCVOID) HGLOBAL;

external GlobalUnlock(
    hMem : HGLOBAL) Int;

external GlobalFree(
    hMem : HGLOBAL) HGLOBAL;

external GlobalCompact(
    dwMinFree : CULong) UInt64;

external GlobalFix(
    hMem : HGLOBAL);

external GlobalUnfix(
    hMem : HGLOBAL);

external GlobalWire(
    hMem : HGLOBAL) LPVOID;

external GlobalUnWire(
    hMem : HGLOBAL) Int;

external GlobalMemoryStatus(
    lpBuffer : LPMEMORYSTATUS);

record Struct__MEMORYSTATUSEX (
    dwLength : CULong,
    dwMemoryLoad : CULong,
    ullTotalPhys : UInt64,
    ullAvailPhys : UInt64,
    ullTotalPageFile : UInt64,
    ullAvailPageFile : UInt64,
    ullTotalVirtual : UInt64,
    ullAvailVirtual : UInt64,
    ullAvailExtendedVirtual : UInt64,
);

alias MEMORYSTATUSEX = Struct__MEMORYSTATUSEX;

alias LPMEMORYSTATUSEX = Pointer[Struct__MEMORYSTATUSEX];

external GlobalMemoryStatusEx(
    lpBuffer : LPMEMORYSTATUSEX) Int;

external LocalAlloc(
    uFlags : UInt,
    uBytes : UInt64) HLOCAL;

external LocalReAlloc(
    hMem : HLOCAL,
    uBytes : UInt64,
    uFlags : UInt) HLOCAL;

external LocalLock(
    hMem : HLOCAL) LPVOID;

external LocalHandle(
    pMem : LPCVOID) HLOCAL;

external LocalUnlock(
    hMem : HLOCAL) Int;

external LocalSize(
    hMem : HLOCAL) UInt64;

external LocalFlags(
    hMem : HLOCAL) UInt;

external LocalFree(
    hMem : HLOCAL) HLOCAL;

external LocalShrink(
    hMem : HLOCAL,
    cbNewSize : UInt) UInt64;

external LocalCompact(
    uMinFree : UInt) UInt64;

external FlushInstructionCache(
    hProcess : HANDLE,
    lpBaseAddress : LPCVOID,
    dwSize : UInt64) Int;

external VirtualAlloc(
    lpAddress : LPVOID,
    dwSize : UInt64,
    flAllocationType : CULong,
    flProtect : CULong) LPVOID;

external VirtualFree(
    lpAddress : LPVOID,
    dwSize : UInt64,
    dwFreeType : CULong) Int;

external VirtualProtect(
    lpAddress : LPVOID,
    dwSize : UInt64,
    flNewProtect : CULong,
    lpflOldProtect : PDWORD) Int;

external VirtualQuery(
    lpAddress : LPCVOID,
    lpBuffer : PMEMORY_BASIC_INFORMATION,
    dwLength : UInt64) UInt64;

external VirtualAllocEx(
    hProcess : HANDLE,
    lpAddress : LPVOID,
    dwSize : UInt64,
    flAllocationType : CULong,
    flProtect : CULong) LPVOID;

external GetWriteWatch(
    dwFlags : CULong,
    lpBaseAddress : PVOID,
    dwRegionSize : UInt64,
    lpAddresses : Pointer[PVOID],
    lpdwCount : Pointer[UInt64],
    lpdwGranularity : PULONG) UInt;

external ResetWriteWatch(
    lpBaseAddress : LPVOID,
    dwRegionSize : UInt64) UInt;

external GetLargePageMinimum() UInt64;

external EnumSystemFirmwareTables(
    FirmwareTableProviderSignature : CULong,
    pFirmwareTableEnumBuffer : PVOID,
    BufferSize : CULong) UInt;

external GetSystemFirmwareTable(
    FirmwareTableProviderSignature : CULong,
    FirmwareTableID : CULong,
    pFirmwareTableBuffer : PVOID,
    BufferSize : CULong) UInt;

external VirtualFreeEx(
    hProcess : HANDLE,
    lpAddress : LPVOID,
    dwSize : UInt64,
    dwFreeType : CULong) Int;

external VirtualProtectEx(
    hProcess : HANDLE,
    lpAddress : LPVOID,
    dwSize : UInt64,
    flNewProtect : CULong,
    lpflOldProtect : PDWORD) Int;

external VirtualQueryEx(
    hProcess : HANDLE,
    lpAddress : LPCVOID,
    lpBuffer : PMEMORY_BASIC_INFORMATION,
    dwLength : UInt64) UInt64;

external HeapCreate(
    flOptions : CULong,
    dwInitialSize : UInt64,
    dwMaximumSize : UInt64) HANDLE;

external HeapDestroy(
    hHeap : HANDLE) Int;

external HeapAlloc(
    hHeap : HANDLE,
    dwFlags : CULong,
    dwBytes : UInt64) LPVOID;

external HeapReAlloc(
    hHeap : HANDLE,
    dwFlags : CULong,
    lpMem : LPVOID,
    dwBytes : UInt64) LPVOID;

external HeapFree(
    hHeap : HANDLE,
    dwFlags : CULong,
    lpMem : LPVOID) Int;

external HeapSize(
    hHeap : HANDLE,
    dwFlags : CULong,
    lpMem : LPCVOID) UInt64;

external HeapValidate(
    hHeap : HANDLE,
    dwFlags : CULong,
    lpMem : LPCVOID) Int;

external HeapCompact(
    hHeap : HANDLE,
    dwFlags : CULong) UInt64;

external GetProcessHeap() HANDLE;

external GetProcessHeaps(
    NumberOfHeaps : CULong,
    ProcessHeaps : PHANDLE) CULong;

record Struct__PROCESS_HEAP_ENTRY (
    lpData : PVOID,
    cbData : CULong,
    cbOverhead : CUChar,
    iRegionIndex : CUChar,
    wFlags : UShort,
    unnamed_field5 : AUnionType,
);

alias PROCESS_HEAP_ENTRY = Struct__PROCESS_HEAP_ENTRY;

alias LPPROCESS_HEAP_ENTRY = Pointer[Struct__PROCESS_HEAP_ENTRY];

alias PPROCESS_HEAP_ENTRY = Pointer[Struct__PROCESS_HEAP_ENTRY];

external HeapLock(
    hHeap : HANDLE) Int;

external HeapUnlock(
    hHeap : HANDLE) Int;

external HeapWalk(
    hHeap : HANDLE,
    lpEntry : LPPROCESS_HEAP_ENTRY) Int;

external HeapSetInformation(
    HeapHandle : HANDLE,
    HeapInformationClass : HEAP_INFORMATION_CLASS,
    HeapInformation : PVOID,
    HeapInformationLength : UInt64) Int;

external HeapQueryInformation(
    HeapHandle : HANDLE,
    HeapInformationClass : HEAP_INFORMATION_CLASS,
    HeapInformation : PVOID,
    HeapInformationLength : UInt64,
    ReturnLength : PSIZE_T) Int;

external GetBinaryTypeA(
    lpApplicationName : LPCSTR,
    lpBinaryType : LPDWORD) Int;

external GetBinaryTypeW(
    lpApplicationName : LPCWSTR,
    lpBinaryType : LPDWORD) Int;

external GetShortPathNameA(
    lpszLongPath : LPCSTR,
    lpszShortPath : LPSTR,
    cchBuffer : CULong) CULong;

external GetShortPathNameW(
    lpszLongPath : LPCWSTR,
    lpszShortPath : LPWSTR,
    cchBuffer : CULong) CULong;

external GetLongPathNameA(
    lpszShortPath : LPCSTR,
    lpszLongPath : LPSTR,
    cchBuffer : CULong) CULong;

external GetLongPathNameW(
    lpszShortPath : LPCWSTR,
    lpszLongPath : LPWSTR,
    cchBuffer : CULong) CULong;

external GetProcessAffinityMask(
    hProcess : HANDLE,
    lpProcessAffinityMask : PDWORD_PTR,
    lpSystemAffinityMask : PDWORD_PTR) Int;

external SetProcessAffinityMask(
    hProcess : HANDLE,
    dwProcessAffinityMask : UInt64) Int;

external GetProcessDEPPolicy(
    hProcess : HANDLE,
    lpFlags : LPDWORD,
    lpPermanent : PBOOL) Int;

external SetProcessDEPPolicy(
    dwFlags : CULong) Int;

external GetProcessHandleCount(
    hProcess : HANDLE,
    pdwHandleCount : PDWORD) Int;

external GetProcessTimes(
    hProcess : HANDLE,
    lpCreationTime : LPFILETIME,
    lpExitTime : LPFILETIME,
    lpKernelTime : LPFILETIME,
    lpUserTime : LPFILETIME) Int;

external GetProcessIoCounters(
    hProcess : HANDLE,
    lpIoCounters : PIO_COUNTERS) Int;

external GetProcessWorkingSetSize(
    hProcess : HANDLE,
    lpMinimumWorkingSetSize : PSIZE_T,
    lpMaximumWorkingSetSize : PSIZE_T) Int;

external GetProcessWorkingSetSizeEx(
    hProcess : HANDLE,
    lpMinimumWorkingSetSize : PSIZE_T,
    lpMaximumWorkingSetSize : PSIZE_T,
    Flags : PDWORD) Int;

external SetProcessWorkingSetSize(
    hProcess : HANDLE,
    dwMinimumWorkingSetSize : UInt64,
    dwMaximumWorkingSetSize : UInt64) Int;

external SetProcessWorkingSetSizeEx(
    hProcess : HANDLE,
    dwMinimumWorkingSetSize : UInt64,
    dwMaximumWorkingSetSize : UInt64,
    Flags : CULong) Int;

external OpenProcess(
    dwDesiredAccess : CULong,
    bInheritHandle : Int,
    dwProcessId : CULong) HANDLE;

external GetCurrentProcess() HANDLE;

external GetCurrentProcessId() CULong;

external ExitProcess(
    uExitCode : UInt);

external TerminateProcess(
    hProcess : HANDLE,
    uExitCode : UInt) Int;

external GetExitCodeProcess(
    hProcess : HANDLE,
    lpExitCode : LPDWORD) Int;

external FatalExit(
    ExitCode : Int);

external GetEnvironmentStrings() LPCH;

external GetEnvironmentStringsW() LPWCH;

external SetEnvironmentStringsA(
    NewEnvironment : LPCH) Int;

external SetEnvironmentStringsW(
    NewEnvironment : LPWCH) Int;

external FreeEnvironmentStringsA(
    argument0 : LPCH) Int;

external FreeEnvironmentStringsW(
    argument0 : LPWCH) Int;

external RaiseException(
    dwExceptionCode : CULong,
    dwExceptionFlags : CULong,
    nNumberOfArguments : CULong,
    lpArguments : Pointer[UInt64]);

external UnhandledExceptionFilter(
    ExceptionInfo : Pointer[Struct__EXCEPTION_POINTERS]) CLong;

alias PTOP_LEVEL_EXCEPTION_FILTER = CCodePointer[(Pointer[Struct__EXCEPTION_POINTERS]),(CLong)];

alias LPTOP_LEVEL_EXCEPTION_FILTER = PTOP_LEVEL_EXCEPTION_FILTER;

external SetUnhandledExceptionFilter(
    lpTopLevelExceptionFilter : LPTOP_LEVEL_EXCEPTION_FILTER) LPTOP_LEVEL_EXCEPTION_FILTER;

external CreateFiber(
    dwStackSize : UInt64,
    lpStartAddress : LPFIBER_START_ROUTINE,
    lpParameter : LPVOID) LPVOID;

external CreateFiberEx(
    dwStackCommitSize : UInt64,
    dwStackReserveSize : UInt64,
    dwFlags : CULong,
    lpStartAddress : LPFIBER_START_ROUTINE,
    lpParameter : LPVOID) LPVOID;

external DeleteFiber(
    lpFiber : LPVOID);

external ConvertThreadToFiber(
    lpParameter : LPVOID) LPVOID;

external ConvertThreadToFiberEx(
    lpParameter : LPVOID,
    dwFlags : CULong) LPVOID;

external ConvertFiberToThread() Int;

external SwitchToFiber(
    lpFiber : LPVOID);

external SwitchToThread() Int;

external CreateThread(
    lpThreadAttributes : LPSECURITY_ATTRIBUTES,
    dwStackSize : UInt64,
    lpStartAddress : LPTHREAD_START_ROUTINE,
    lpParameter : LPVOID,
    dwCreationFlags : CULong,
    lpThreadId : LPDWORD) HANDLE;

external CreateRemoteThread(
    hProcess : HANDLE,
    lpThreadAttributes : LPSECURITY_ATTRIBUTES,
    dwStackSize : UInt64,
    lpStartAddress : LPTHREAD_START_ROUTINE,
    lpParameter : LPVOID,
    dwCreationFlags : CULong,
    lpThreadId : LPDWORD) HANDLE;

external GetCurrentThread() HANDLE;

external GetCurrentThreadId() CULong;

external SetThreadStackGuarantee(
    StackSizeInBytes : PULONG) Int;

external GetProcessIdOfThread(
    Thread : HANDLE) CULong;

external GetThreadId(
    Thread : HANDLE) CULong;

external GetProcessId(
    Process : HANDLE) CULong;

external GetCurrentProcessorNumber() CULong;

external SetThreadAffinityMask(
    hThread : HANDLE,
    dwThreadAffinityMask : UInt64) UInt64;

external SetThreadIdealProcessor(
    hThread : HANDLE,
    dwIdealProcessor : CULong) CULong;

external SetProcessPriorityBoost(
    hProcess : HANDLE,
    bDisablePriorityBoost : Int) Int;

external GetProcessPriorityBoost(
    hProcess : HANDLE,
    pDisablePriorityBoost : PBOOL) Int;

external RequestWakeupLatency(
    latency : LATENCY_TIME) Int;

external IsSystemResumeAutomatic() Int;

external OpenThread(
    dwDesiredAccess : CULong,
    bInheritHandle : Int,
    dwThreadId : CULong) HANDLE;

external SetThreadPriority(
    hThread : HANDLE,
    nPriority : Int) Int;

external SetThreadPriorityBoost(
    hThread : HANDLE,
    bDisablePriorityBoost : Int) Int;

external GetThreadPriorityBoost(
    hThread : HANDLE,
    pDisablePriorityBoost : PBOOL) Int;

external GetThreadPriority(
    hThread : HANDLE) Int;

external GetThreadTimes(
    hThread : HANDLE,
    lpCreationTime : LPFILETIME,
    lpExitTime : LPFILETIME,
    lpKernelTime : LPFILETIME,
    lpUserTime : LPFILETIME) Int;

external GetThreadIOPendingFlag(
    hThread : HANDLE,
    lpIOIsPending : PBOOL) Int;

external ExitThread(
    dwExitCode : CULong);

external TerminateThread(
    hThread : HANDLE,
    dwExitCode : CULong) Int;

external GetExitCodeThread(
    hThread : HANDLE,
    lpExitCode : LPDWORD) Int;

external GetThreadSelectorEntry(
    hThread : HANDLE,
    dwSelector : CULong,
    lpSelectorEntry : LPLDT_ENTRY) Int;

external SetThreadExecutionState(
    esFlags : CULong) CULong;

external GetLastError() CULong;

external SetLastError(
    dwErrCode : CULong);

external GetOverlappedResult(
    hFile : HANDLE,
    lpOverlapped : LPOVERLAPPED,
    lpNumberOfBytesTransferred : LPDWORD,
    bWait : Int) Int;

external CreateIoCompletionPort(
    FileHandle : HANDLE,
    ExistingCompletionPort : HANDLE,
    CompletionKey : UInt64,
    NumberOfConcurrentThreads : CULong) HANDLE;

external GetQueuedCompletionStatus(
    CompletionPort : HANDLE,
    lpNumberOfBytesTransferred : LPDWORD,
    lpCompletionKey : PULONG_PTR,
    lpOverlapped : Pointer[LPOVERLAPPED],
    dwMilliseconds : CULong) Int;

external PostQueuedCompletionStatus(
    CompletionPort : HANDLE,
    dwNumberOfBytesTransferred : CULong,
    dwCompletionKey : UInt64,
    lpOverlapped : LPOVERLAPPED) Int;

external SetErrorMode(
    uMode : UInt) UInt;

external ReadProcessMemory(
    hProcess : HANDLE,
    lpBaseAddress : LPCVOID,
    lpBuffer : LPVOID,
    nSize : UInt64,
    lpNumberOfBytesRead : Pointer[UInt64]) Int;

external WriteProcessMemory(
    hProcess : HANDLE,
    lpBaseAddress : LPVOID,
    lpBuffer : LPCVOID,
    nSize : UInt64,
    lpNumberOfBytesWritten : Pointer[UInt64]) Int;

external GetThreadContext(
    hThread : HANDLE,
    lpContext : LPCONTEXT) Int;

external SetThreadContext(
    hThread : HANDLE,
    lpContext : Pointer[CONTEXT]) Int;

external SuspendThread(
    hThread : HANDLE) CULong;

external ResumeThread(
    hThread : HANDLE) CULong;

alias PAPCFUNC = CCodePointer[(UInt64),()];

external QueueUserAPC(
    pfnAPC : PAPCFUNC,
    hThread : HANDLE,
    dwData : UInt64) CULong;

external IsDebuggerPresent() Int;

external CheckRemoteDebuggerPresent(
    hProcess : HANDLE,
    pbDebuggerPresent : PBOOL) Int;

external DebugBreak();

external WaitForDebugEvent(
    lpDebugEvent : LPDEBUG_EVENT,
    dwMilliseconds : CULong) Int;

external ContinueDebugEvent(
    dwProcessId : CULong,
    dwThreadId : CULong,
    dwContinueStatus : CULong) Int;

external DebugActiveProcess(
    dwProcessId : CULong) Int;

external DebugActiveProcessStop(
    dwProcessId : CULong) Int;

external DebugSetProcessKillOnExit(
    KillOnExit : Int) Int;

external DebugBreakProcess(
    Process : HANDLE) Int;

external InitializeCriticalSection(
    lpCriticalSection : LPCRITICAL_SECTION);

external EnterCriticalSection(
    lpCriticalSection : LPCRITICAL_SECTION);

external LeaveCriticalSection(
    lpCriticalSection : LPCRITICAL_SECTION);

external InitializeCriticalSectionAndSpinCount(
    lpCriticalSection : LPCRITICAL_SECTION,
    dwSpinCount : CULong) Int;

external SetCriticalSectionSpinCount(
    lpCriticalSection : LPCRITICAL_SECTION,
    dwSpinCount : CULong) CULong;

external TryEnterCriticalSection(
    lpCriticalSection : LPCRITICAL_SECTION) Int;

external DeleteCriticalSection(
    lpCriticalSection : LPCRITICAL_SECTION);

external SetEvent(
    hEvent : HANDLE) Int;

external ResetEvent(
    hEvent : HANDLE) Int;

external PulseEvent(
    hEvent : HANDLE) Int;

external ReleaseSemaphore(
    hSemaphore : HANDLE,
    lReleaseCount : CLong,
    lpPreviousCount : LPLONG) Int;

external ReleaseMutex(
    hMutex : HANDLE) Int;

external WaitForSingleObject(
    hHandle : HANDLE,
    dwMilliseconds : CULong) CULong;

external WaitForMultipleObjects(
    nCount : CULong,
    lpHandles : Pointer[HANDLE],
    bWaitAll : Int,
    dwMilliseconds : CULong) CULong;

external Sleep(
    dwMilliseconds : CULong);

external LoadResource(
    hModule : HMODULE,
    hResInfo : HRSRC) HGLOBAL;

external SizeofResource(
    hModule : HMODULE,
    hResInfo : HRSRC) CULong;

external GlobalDeleteAtom(
    nAtom : UShort) UShort;

external InitAtomTable(
    nSize : CULong) Int;

external DeleteAtom(
    nAtom : UShort) UShort;

external SetHandleCount(
    uNumber : UInt) UInt;

external GetLogicalDrives() CULong;

external LockFile(
    hFile : HANDLE,
    dwFileOffsetLow : CULong,
    dwFileOffsetHigh : CULong,
    nNumberOfBytesToLockLow : CULong,
    nNumberOfBytesToLockHigh : CULong) Int;

external UnlockFile(
    hFile : HANDLE,
    dwFileOffsetLow : CULong,
    dwFileOffsetHigh : CULong,
    nNumberOfBytesToUnlockLow : CULong,
    nNumberOfBytesToUnlockHigh : CULong) Int;

external LockFileEx(
    hFile : HANDLE,
    dwFlags : CULong,
    dwReserved : CULong,
    nNumberOfBytesToLockLow : CULong,
    nNumberOfBytesToLockHigh : CULong,
    lpOverlapped : LPOVERLAPPED) Int;

external UnlockFileEx(
    hFile : HANDLE,
    dwReserved : CULong,
    nNumberOfBytesToUnlockLow : CULong,
    nNumberOfBytesToUnlockHigh : CULong,
    lpOverlapped : LPOVERLAPPED) Int;

record Struct__BY_HANDLE_FILE_INFORMATION (
    dwFileAttributes : CULong,
    ftCreationTime : FILETIME,
    ftLastAccessTime : FILETIME,
    ftLastWriteTime : FILETIME,
    dwVolumeSerialNumber : CULong,
    nFileSizeHigh : CULong,
    nFileSizeLow : CULong,
    nNumberOfLinks : CULong,
    nFileIndexHigh : CULong,
    nFileIndexLow : CULong,
);

alias BY_HANDLE_FILE_INFORMATION = Struct__BY_HANDLE_FILE_INFORMATION;

alias PBY_HANDLE_FILE_INFORMATION = Pointer[Struct__BY_HANDLE_FILE_INFORMATION];

alias LPBY_HANDLE_FILE_INFORMATION = Pointer[Struct__BY_HANDLE_FILE_INFORMATION];

external GetFileInformationByHandle(
    hFile : HANDLE,
    lpFileInformation : LPBY_HANDLE_FILE_INFORMATION) Int;

external GetFileType(
    hFile : HANDLE) CULong;

external GetFileSize(
    hFile : HANDLE,
    lpFileSizeHigh : LPDWORD) CULong;

external GetFileSizeEx(
    hFile : HANDLE,
    lpFileSize : PLARGE_INTEGER) Int;

external GetStdHandle(
    nStdHandle : CULong) HANDLE;

external SetStdHandle(
    nStdHandle : CULong,
    hHandle : HANDLE) Int;

external WriteFile(
    hFile : HANDLE,
    lpBuffer : LPCVOID,
    nNumberOfBytesToWrite : CULong,
    lpNumberOfBytesWritten : LPDWORD,
    lpOverlapped : LPOVERLAPPED) Int;

external ReadFile(
    hFile : HANDLE,
    lpBuffer : LPVOID,
    nNumberOfBytesToRead : CULong,
    lpNumberOfBytesRead : LPDWORD,
    lpOverlapped : LPOVERLAPPED) Int;

external FlushFileBuffers(
    hFile : HANDLE) Int;

external DeviceIoControl(
    hDevice : HANDLE,
    dwIoControlCode : CULong,
    lpInBuffer : LPVOID,
    nInBufferSize : CULong,
    lpOutBuffer : LPVOID,
    nOutBufferSize : CULong,
    lpBytesReturned : LPDWORD,
    lpOverlapped : LPOVERLAPPED) Int;

external RequestDeviceWakeup(
    hDevice : HANDLE) Int;

external CancelDeviceWakeupRequest(
    hDevice : HANDLE) Int;

external GetDevicePowerState(
    hDevice : HANDLE,
    pfOn : Pointer[Int]) Int;

external SetMessageWaitingIndicator(
    hMsgIndicator : HANDLE,
    ulMsgCount : CULong) Int;

external SetEndOfFile(
    hFile : HANDLE) Int;

external SetFilePointer(
    hFile : HANDLE,
    lDistanceToMove : CLong,
    lpDistanceToMoveHigh : PLONG,
    dwMoveMethod : CULong) CULong;

external SetFilePointerEx(
    hFile : HANDLE,
    liDistanceToMove : LARGE_INTEGER,
    lpNewFilePointer : PLARGE_INTEGER,
    dwMoveMethod : CULong) Int;

external FindClose(
    hFindFile : HANDLE) Int;

external GetFileTime(
    hFile : HANDLE,
    lpCreationTime : LPFILETIME,
    lpLastAccessTime : LPFILETIME,
    lpLastWriteTime : LPFILETIME) Int;

external SetFileTime(
    hFile : HANDLE,
    lpCreationTime : Pointer[FILETIME],
    lpLastAccessTime : Pointer[FILETIME],
    lpLastWriteTime : Pointer[FILETIME]) Int;

external SetFileValidData(
    hFile : HANDLE,
    ValidDataLength : Int64) Int;

external SetFileShortNameA(
    hFile : HANDLE,
    lpShortName : LPCSTR) Int;

external SetFileShortNameW(
    hFile : HANDLE,
    lpShortName : LPCWSTR) Int;

external CloseHandle(
    hObject : HANDLE) Int;

external DuplicateHandle(
    hSourceProcessHandle : HANDLE,
    hSourceHandle : HANDLE,
    hTargetProcessHandle : HANDLE,
    lpTargetHandle : LPHANDLE,
    dwDesiredAccess : CULong,
    bInheritHandle : Int,
    dwOptions : CULong) Int;

external GetHandleInformation(
    hObject : HANDLE,
    lpdwFlags : LPDWORD) Int;

external SetHandleInformation(
    hObject : HANDLE,
    dwMask : CULong,
    dwFlags : CULong) Int;

external LoadModule(
    lpModuleName : LPCSTR,
    lpParameterBlock : LPVOID) CULong;

external WinExec(
    lpCmdLine : LPCSTR,
    uCmdShow : UInt) UInt;

external ClearCommBreak(
    hFile : HANDLE) Int;

external ClearCommError(
    hFile : HANDLE,
    lpErrors : LPDWORD,
    lpStat : LPCOMSTAT) Int;

external SetupComm(
    hFile : HANDLE,
    dwInQueue : CULong,
    dwOutQueue : CULong) Int;

external EscapeCommFunction(
    hFile : HANDLE,
    dwFunc : CULong) Int;

external GetCommConfig(
    hCommDev : HANDLE,
    lpCC : LPCOMMCONFIG,
    lpdwSize : LPDWORD) Int;

external GetCommMask(
    hFile : HANDLE,
    lpEvtMask : LPDWORD) Int;

external GetCommProperties(
    hFile : HANDLE,
    lpCommProp : LPCOMMPROP) Int;

external GetCommModemStatus(
    hFile : HANDLE,
    lpModemStat : LPDWORD) Int;

external GetCommState(
    hFile : HANDLE,
    lpDCB : LPDCB) Int;

external GetCommTimeouts(
    hFile : HANDLE,
    lpCommTimeouts : LPCOMMTIMEOUTS) Int;

external PurgeComm(
    hFile : HANDLE,
    dwFlags : CULong) Int;

external SetCommBreak(
    hFile : HANDLE) Int;

external SetCommConfig(
    hCommDev : HANDLE,
    lpCC : LPCOMMCONFIG,
    dwSize : CULong) Int;

external SetCommMask(
    hFile : HANDLE,
    dwEvtMask : CULong) Int;

external SetCommState(
    hFile : HANDLE,
    lpDCB : LPDCB) Int;

external SetCommTimeouts(
    hFile : HANDLE,
    lpCommTimeouts : LPCOMMTIMEOUTS) Int;

external TransmitCommChar(
    hFile : HANDLE,
    cChar : CChar) Int;

external WaitCommEvent(
    hFile : HANDLE,
    lpEvtMask : LPDWORD,
    lpOverlapped : LPOVERLAPPED) Int;

external SetTapePosition(
    hDevice : HANDLE,
    dwPositionMethod : CULong,
    dwPartition : CULong,
    dwOffsetLow : CULong,
    dwOffsetHigh : CULong,
    bImmediate : Int) CULong;

external GetTapePosition(
    hDevice : HANDLE,
    dwPositionType : CULong,
    lpdwPartition : LPDWORD,
    lpdwOffsetLow : LPDWORD,
    lpdwOffsetHigh : LPDWORD) CULong;

external PrepareTape(
    hDevice : HANDLE,
    dwOperation : CULong,
    bImmediate : Int) CULong;

external EraseTape(
    hDevice : HANDLE,
    dwEraseType : CULong,
    bImmediate : Int) CULong;

external CreateTapePartition(
    hDevice : HANDLE,
    dwPartitionMethod : CULong,
    dwCount : CULong,
    dwSize : CULong) CULong;

external WriteTapemark(
    hDevice : HANDLE,
    dwTapemarkType : CULong,
    dwTapemarkCount : CULong,
    bImmediate : Int) CULong;

external GetTapeStatus(
    hDevice : HANDLE) CULong;

external GetTapeParameters(
    hDevice : HANDLE,
    dwOperation : CULong,
    lpdwSize : LPDWORD,
    lpTapeInformation : LPVOID) CULong;

external SetTapeParameters(
    hDevice : HANDLE,
    dwOperation : CULong,
    lpTapeInformation : LPVOID) CULong;

external Beep(
    dwFreq : CULong,
    dwDuration : CULong) Int;

external MulDiv(
    nNumber : Int,
    nNumerator : Int,
    nDenominator : Int) Int;

external GetSystemTime(
    lpSystemTime : LPSYSTEMTIME);

external GetSystemTimeAsFileTime(
    lpSystemTimeAsFileTime : LPFILETIME);

external SetSystemTime(
    lpSystemTime : Pointer[SYSTEMTIME]) Int;

external GetLocalTime(
    lpSystemTime : LPSYSTEMTIME);

external SetLocalTime(
    lpSystemTime : Pointer[SYSTEMTIME]) Int;

external GetSystemInfo(
    lpSystemInfo : LPSYSTEM_INFO);

external SetSystemFileCacheSize(
    MinimumFileCacheSize : UInt64,
    MaximumFileCacheSize : UInt64,
    Flags : CULong) Int;

external GetSystemFileCacheSize(
    lpMinimumFileCacheSize : PSIZE_T,
    lpMaximumFileCacheSize : PSIZE_T,
    lpFlags : PDWORD) Int;

external GetSystemRegistryQuota(
    pdwQuotaAllowed : PDWORD,
    pdwQuotaUsed : PDWORD) Int;

external GetSystemTimes(
    lpIdleTime : LPFILETIME,
    lpKernelTime : LPFILETIME,
    lpUserTime : LPFILETIME) Int;

external GetNativeSystemInfo(
    lpSystemInfo : LPSYSTEM_INFO);

external IsProcessorFeaturePresent(
    ProcessorFeature : CULong) Int;

record Struct__TIME_ZONE_INFORMATION (
    Bias : CLong,
    StandardName : Array[UShort,32],
    StandardDate : SYSTEMTIME,
    StandardBias : CLong,
    DaylightName : Array[UShort,32],
    DaylightDate : SYSTEMTIME,
    DaylightBias : CLong,
);

alias TIME_ZONE_INFORMATION = Struct__TIME_ZONE_INFORMATION;

alias PTIME_ZONE_INFORMATION = Pointer[Struct__TIME_ZONE_INFORMATION];

alias LPTIME_ZONE_INFORMATION = Pointer[Struct__TIME_ZONE_INFORMATION];

external SystemTimeToTzSpecificLocalTime(
    lpTimeZoneInformation : LPTIME_ZONE_INFORMATION,
    lpUniversalTime : LPSYSTEMTIME,
    lpLocalTime : LPSYSTEMTIME) Int;

external TzSpecificLocalTimeToSystemTime(
    lpTimeZoneInformation : LPTIME_ZONE_INFORMATION,
    lpLocalTime : LPSYSTEMTIME,
    lpUniversalTime : LPSYSTEMTIME) Int;

external GetTimeZoneInformation(
    lpTimeZoneInformation : LPTIME_ZONE_INFORMATION) CULong;

external SetTimeZoneInformation(
    lpTimeZoneInformation : Pointer[TIME_ZONE_INFORMATION]) Int;

external SystemTimeToFileTime(
    lpSystemTime : Pointer[SYSTEMTIME],
    lpFileTime : LPFILETIME) Int;

external FileTimeToLocalFileTime(
    lpFileTime : Pointer[FILETIME],
    lpLocalFileTime : LPFILETIME) Int;

external LocalFileTimeToFileTime(
    lpLocalFileTime : Pointer[FILETIME],
    lpFileTime : LPFILETIME) Int;

external FileTimeToSystemTime(
    lpFileTime : Pointer[FILETIME],
    lpSystemTime : LPSYSTEMTIME) Int;

external CompareFileTime(
    lpFileTime1 : Pointer[FILETIME],
    lpFileTime2 : Pointer[FILETIME]) CLong;

external FileTimeToDosDateTime(
    lpFileTime : Pointer[FILETIME],
    lpFatDate : LPWORD,
    lpFatTime : LPWORD) Int;

external DosDateTimeToFileTime(
    wFatDate : UShort,
    wFatTime : UShort,
    lpFileTime : LPFILETIME) Int;

external GetTickCount() CULong;

external SetSystemTimeAdjustment(
    dwTimeAdjustment : CULong,
    bTimeAdjustmentDisabled : Int) Int;

external GetSystemTimeAdjustment(
    lpTimeAdjustment : PDWORD,
    lpTimeIncrement : PDWORD,
    lpTimeAdjustmentDisabled : PBOOL) Int;

external FormatMessageA(
    dwFlags : CULong,
    lpSource : LPCVOID,
    dwMessageId : CULong,
    dwLanguageId : CULong,
    lpBuffer : LPSTR,
    nSize : CULong,
    Arguments : Pointer[va_list]) CULong;

external FormatMessageW(
    dwFlags : CULong,
    lpSource : LPCVOID,
    dwMessageId : CULong,
    dwLanguageId : CULong,
    lpBuffer : LPWSTR,
    nSize : CULong,
    Arguments : Pointer[va_list]) CULong;

external CreatePipe(
    hReadPipe : PHANDLE,
    hWritePipe : PHANDLE,
    lpPipeAttributes : LPSECURITY_ATTRIBUTES,
    nSize : CULong) Int;

external ConnectNamedPipe(
    hNamedPipe : HANDLE,
    lpOverlapped : LPOVERLAPPED) Int;

external DisconnectNamedPipe(
    hNamedPipe : HANDLE) Int;

external SetNamedPipeHandleState(
    hNamedPipe : HANDLE,
    lpMode : LPDWORD,
    lpMaxCollectionCount : LPDWORD,
    lpCollectDataTimeout : LPDWORD) Int;

external GetNamedPipeInfo(
    hNamedPipe : HANDLE,
    lpFlags : LPDWORD,
    lpOutBufferSize : LPDWORD,
    lpInBufferSize : LPDWORD,
    lpMaxInstances : LPDWORD) Int;

external PeekNamedPipe(
    hNamedPipe : HANDLE,
    lpBuffer : LPVOID,
    nBufferSize : CULong,
    lpBytesRead : LPDWORD,
    lpTotalBytesAvail : LPDWORD,
    lpBytesLeftThisMessage : LPDWORD) Int;

external TransactNamedPipe(
    hNamedPipe : HANDLE,
    lpInBuffer : LPVOID,
    nInBufferSize : CULong,
    lpOutBuffer : LPVOID,
    nOutBufferSize : CULong,
    lpBytesRead : LPDWORD,
    lpOverlapped : LPOVERLAPPED) Int;

external CreateMailslotA(
    lpName : LPCSTR,
    nMaxMessageSize : CULong,
    lReadTimeout : CULong,
    lpSecurityAttributes : LPSECURITY_ATTRIBUTES) HANDLE;

external CreateMailslotW(
    lpName : LPCWSTR,
    nMaxMessageSize : CULong,
    lReadTimeout : CULong,
    lpSecurityAttributes : LPSECURITY_ATTRIBUTES) HANDLE;

external GetMailslotInfo(
    hMailslot : HANDLE,
    lpMaxMessageSize : LPDWORD,
    lpNextSize : LPDWORD,
    lpMessageCount : LPDWORD,
    lpReadTimeout : LPDWORD) Int;

external SetMailslotInfo(
    hMailslot : HANDLE,
    lReadTimeout : CULong) Int;

external MapViewOfFile(
    hFileMappingObject : HANDLE,
    dwDesiredAccess : CULong,
    dwFileOffsetHigh : CULong,
    dwFileOffsetLow : CULong,
    dwNumberOfBytesToMap : UInt64) LPVOID;

external FlushViewOfFile(
    lpBaseAddress : LPCVOID,
    dwNumberOfBytesToFlush : UInt64) Int;

external UnmapViewOfFile(
    lpBaseAddress : LPCVOID) Int;

external EncryptFileA(
    lpFileName : LPCSTR) Int;

external EncryptFileW(
    lpFileName : LPCWSTR) Int;

external DecryptFileA(
    lpFileName : LPCSTR,
    dwReserved : CULong) Int;

external DecryptFileW(
    lpFileName : LPCWSTR,
    dwReserved : CULong) Int;

external FileEncryptionStatusA(
    lpFileName : LPCSTR,
    lpStatus : LPDWORD) Int;

external FileEncryptionStatusW(
    lpFileName : LPCWSTR,
    lpStatus : LPDWORD) Int;

alias PFE_EXPORT_FUNC = CCodePointer[(Pointer[CUChar],RawPointer,CULong),(CULong)];

alias PFE_IMPORT_FUNC = CCodePointer[(Pointer[CUChar],RawPointer,Pointer[CULong]),(CULong)];

external OpenEncryptedFileRawA(
    lpFileName : LPCSTR,
    ulFlags : CULong,
    pvContext : Pointer[PVOID]) CULong;

external OpenEncryptedFileRawW(
    lpFileName : LPCWSTR,
    ulFlags : CULong,
    pvContext : Pointer[PVOID]) CULong;

external ReadEncryptedFileRaw(
    pfExportCallback : PFE_EXPORT_FUNC,
    pvCallbackContext : PVOID,
    pvContext : PVOID) CULong;

external WriteEncryptedFileRaw(
    pfImportCallback : PFE_IMPORT_FUNC,
    pvCallbackContext : PVOID,
    pvContext : PVOID) CULong;

external CloseEncryptedFileRaw(
    pvContext : PVOID);

external lstrcmpA(
    lpString1 : LPCSTR,
    lpString2 : LPCSTR) Int;

external lstrcmpW(
    lpString1 : LPCWSTR,
    lpString2 : LPCWSTR) Int;

external lstrcmpiA(
    lpString1 : LPCSTR,
    lpString2 : LPCSTR) Int;

external lstrcmpiW(
    lpString1 : LPCWSTR,
    lpString2 : LPCWSTR) Int;

external lstrcpynA(
    lpString1 : LPSTR,
    lpString2 : LPCSTR,
    iMaxLength : Int) LPSTR;

external lstrcpynW(
    lpString1 : LPWSTR,
    lpString2 : LPCWSTR,
    iMaxLength : Int) LPWSTR;

external lstrcpyA(
    lpString1 : LPSTR,
    lpString2 : LPCSTR) LPSTR;

external lstrcpyW(
    lpString1 : LPWSTR,
    lpString2 : LPCWSTR) LPWSTR;

external lstrcatA(
    lpString1 : LPSTR,
    lpString2 : LPCSTR) LPSTR;

external lstrcatW(
    lpString1 : LPWSTR,
    lpString2 : LPCWSTR) LPWSTR;

external lstrlenA(
    lpString : LPCSTR) Int;

external lstrlenW(
    lpString : LPCWSTR) Int;

external OpenFile(
    lpFileName : LPCSTR,
    lpReOpenBuff : LPOFSTRUCT,
    uStyle : UInt) Int;

external _lopen(
    lpPathName : LPCSTR,
    iReadWrite : Int) Int;

external _lcreat(
    lpPathName : LPCSTR,
    iAttribute : Int) Int;

external _lread(
    hFile : Int,
    lpBuffer : LPVOID,
    uBytes : UInt) UInt;

external _lwrite(
    hFile : Int,
    lpBuffer : LPCCH,
    uBytes : UInt) UInt;

external _hread(
    hFile : Int,
    lpBuffer : LPVOID,
    lBytes : CLong) CLong;

external _hwrite(
    hFile : Int,
    lpBuffer : LPCCH,
    lBytes : CLong) CLong;

external _lclose(
    hFile : Int) Int;

external _llseek(
    hFile : Int,
    lOffset : CLong,
    iOrigin : Int) CLong;

external IsTextUnicode(
    lpv : RawPointer,
    iSize : Int,
    lpiResult : LPINT) Int;

external FlsAlloc(
    lpCallback : PFLS_CALLBACK_FUNCTION) CULong;

external FlsGetValue(
    dwFlsIndex : CULong) PVOID;

external FlsSetValue(
    dwFlsIndex : CULong,
    lpFlsData : PVOID) Int;

external FlsFree(
    dwFlsIndex : CULong) Int;

external TlsAlloc() CULong;

external TlsGetValue(
    dwTlsIndex : CULong) LPVOID;

external TlsSetValue(
    dwTlsIndex : CULong,
    lpTlsValue : LPVOID) Int;

external TlsFree(
    dwTlsIndex : CULong) Int;

alias LPOVERLAPPED_COMPLETION_ROUTINE = CCodePointer[(CULong,CULong,Pointer[Struct__OVERLAPPED]),()];

external SleepEx(
    dwMilliseconds : CULong,
    bAlertable : Int) CULong;

external WaitForSingleObjectEx(
    hHandle : HANDLE,
    dwMilliseconds : CULong,
    bAlertable : Int) CULong;

external WaitForMultipleObjectsEx(
    nCount : CULong,
    lpHandles : Pointer[HANDLE],
    bWaitAll : Int,
    dwMilliseconds : CULong,
    bAlertable : Int) CULong;

external SignalObjectAndWait(
    hObjectToSignal : HANDLE,
    hObjectToWaitOn : HANDLE,
    dwMilliseconds : CULong,
    bAlertable : Int) CULong;

external ReadFileEx(
    hFile : HANDLE,
    lpBuffer : LPVOID,
    nNumberOfBytesToRead : CULong,
    lpOverlapped : LPOVERLAPPED,
    lpCompletionRoutine : LPOVERLAPPED_COMPLETION_ROUTINE) Int;

external WriteFileEx(
    hFile : HANDLE,
    lpBuffer : LPCVOID,
    nNumberOfBytesToWrite : CULong,
    lpOverlapped : LPOVERLAPPED,
    lpCompletionRoutine : LPOVERLAPPED_COMPLETION_ROUTINE) Int;

external BackupRead(
    hFile : HANDLE,
    lpBuffer : LPBYTE,
    nNumberOfBytesToRead : CULong,
    lpNumberOfBytesRead : LPDWORD,
    bAbort : Int,
    bProcessSecurity : Int,
    lpContext : Pointer[LPVOID]) Int;

external BackupSeek(
    hFile : HANDLE,
    dwLowBytesToSeek : CULong,
    dwHighBytesToSeek : CULong,
    lpdwLowByteSeeked : LPDWORD,
    lpdwHighByteSeeked : LPDWORD,
    lpContext : Pointer[LPVOID]) Int;

external BackupWrite(
    hFile : HANDLE,
    lpBuffer : LPBYTE,
    nNumberOfBytesToWrite : CULong,
    lpNumberOfBytesWritten : LPDWORD,
    bAbort : Int,
    bProcessSecurity : Int,
    lpContext : Pointer[LPVOID]) Int;

record Struct__WIN32_STREAM_ID (
    dwStreamId : CULong,
    dwStreamAttributes : CULong,
    Size : LARGE_INTEGER,
    dwStreamNameSize : CULong,
    cStreamName : Array[UShort,1],
);

alias WIN32_STREAM_ID = Struct__WIN32_STREAM_ID;

alias LPWIN32_STREAM_ID = Pointer[Struct__WIN32_STREAM_ID];

external ReadFileScatter(
    hFile : HANDLE,
    aSegmentArray : Pointer[FILE_SEGMENT_ELEMENT],
    nNumberOfBytesToRead : CULong,
    lpReserved : LPDWORD,
    lpOverlapped : LPOVERLAPPED) Int;

external WriteFileGather(
    hFile : HANDLE,
    aSegmentArray : Pointer[FILE_SEGMENT_ELEMENT],
    nNumberOfBytesToWrite : CULong,
    lpReserved : LPDWORD,
    lpOverlapped : LPOVERLAPPED) Int;

record Struct__STARTUPINFOA (
    cb : CULong,
    lpReserved : LPSTR,
    lpDesktop : LPSTR,
    lpTitle : LPSTR,
    dwX : CULong,
    dwY : CULong,
    dwXSize : CULong,
    dwYSize : CULong,
    dwXCountChars : CULong,
    dwYCountChars : CULong,
    dwFillAttribute : CULong,
    dwFlags : CULong,
    wShowWindow : UShort,
    cbReserved2 : UShort,
    lpReserved2 : LPBYTE,
    hStdInput : HANDLE,
    hStdOutput : HANDLE,
    hStdError : HANDLE,
);

alias STARTUPINFOA = Struct__STARTUPINFOA;

alias LPSTARTUPINFOA = Pointer[Struct__STARTUPINFOA];

record Struct__STARTUPINFOW (
    cb : CULong,
    lpReserved : LPWSTR,
    lpDesktop : LPWSTR,
    lpTitle : LPWSTR,
    dwX : CULong,
    dwY : CULong,
    dwXSize : CULong,
    dwYSize : CULong,
    dwXCountChars : CULong,
    dwYCountChars : CULong,
    dwFillAttribute : CULong,
    dwFlags : CULong,
    wShowWindow : UShort,
    cbReserved2 : UShort,
    lpReserved2 : LPBYTE,
    hStdInput : HANDLE,
    hStdOutput : HANDLE,
    hStdError : HANDLE,
);

alias STARTUPINFOW = Struct__STARTUPINFOW;

alias LPSTARTUPINFOW = Pointer[Struct__STARTUPINFOW];

alias STARTUPINFO = STARTUPINFOA;

alias LPSTARTUPINFO = LPSTARTUPINFOA;

record Struct__WIN32_FIND_DATAA (
    dwFileAttributes : CULong,
    ftCreationTime : FILETIME,
    ftLastAccessTime : FILETIME,
    ftLastWriteTime : FILETIME,
    nFileSizeHigh : CULong,
    nFileSizeLow : CULong,
    dwReserved0 : CULong,
    dwReserved1 : CULong,
    cFileName : Array[CChar,260],
    cAlternateFileName : Array[CChar,14],
);

alias WIN32_FIND_DATAA = Struct__WIN32_FIND_DATAA;

alias PWIN32_FIND_DATAA = Pointer[Struct__WIN32_FIND_DATAA];

alias LPWIN32_FIND_DATAA = Pointer[Struct__WIN32_FIND_DATAA];

record Struct__WIN32_FIND_DATAW (
    dwFileAttributes : CULong,
    ftCreationTime : FILETIME,
    ftLastAccessTime : FILETIME,
    ftLastWriteTime : FILETIME,
    nFileSizeHigh : CULong,
    nFileSizeLow : CULong,
    dwReserved0 : CULong,
    dwReserved1 : CULong,
    cFileName : Array[UShort,260],
    cAlternateFileName : Array[UShort,14],
);

alias WIN32_FIND_DATAW = Struct__WIN32_FIND_DATAW;

alias PWIN32_FIND_DATAW = Pointer[Struct__WIN32_FIND_DATAW];

alias LPWIN32_FIND_DATAW = Pointer[Struct__WIN32_FIND_DATAW];

alias WIN32_FIND_DATA = WIN32_FIND_DATAA;

alias PWIN32_FIND_DATA = PWIN32_FIND_DATAA;

alias LPWIN32_FIND_DATA = LPWIN32_FIND_DATAA;

record Struct__WIN32_FILE_ATTRIBUTE_DATA (
    dwFileAttributes : CULong,
    ftCreationTime : FILETIME,
    ftLastAccessTime : FILETIME,
    ftLastWriteTime : FILETIME,
    nFileSizeHigh : CULong,
    nFileSizeLow : CULong,
);

alias WIN32_FILE_ATTRIBUTE_DATA = Struct__WIN32_FILE_ATTRIBUTE_DATA;

alias LPWIN32_FILE_ATTRIBUTE_DATA = Pointer[Struct__WIN32_FILE_ATTRIBUTE_DATA];

external CreateMutexA(
    lpMutexAttributes : LPSECURITY_ATTRIBUTES,
    bInitialOwner : Int,
    lpName : LPCSTR) HANDLE;

external CreateMutexW(
    lpMutexAttributes : LPSECURITY_ATTRIBUTES,
    bInitialOwner : Int,
    lpName : LPCWSTR) HANDLE;

external OpenMutexA(
    dwDesiredAccess : CULong,
    bInheritHandle : Int,
    lpName : LPCSTR) HANDLE;

external OpenMutexW(
    dwDesiredAccess : CULong,
    bInheritHandle : Int,
    lpName : LPCWSTR) HANDLE;

external CreateEventA(
    lpEventAttributes : LPSECURITY_ATTRIBUTES,
    bManualReset : Int,
    bInitialState : Int,
    lpName : LPCSTR) HANDLE;

external CreateEventW(
    lpEventAttributes : LPSECURITY_ATTRIBUTES,
    bManualReset : Int,
    bInitialState : Int,
    lpName : LPCWSTR) HANDLE;

external OpenEventA(
    dwDesiredAccess : CULong,
    bInheritHandle : Int,
    lpName : LPCSTR) HANDLE;

external OpenEventW(
    dwDesiredAccess : CULong,
    bInheritHandle : Int,
    lpName : LPCWSTR) HANDLE;

external CreateSemaphoreA(
    lpSemaphoreAttributes : LPSECURITY_ATTRIBUTES,
    lInitialCount : CLong,
    lMaximumCount : CLong,
    lpName : LPCSTR) HANDLE;

external CreateSemaphoreW(
    lpSemaphoreAttributes : LPSECURITY_ATTRIBUTES,
    lInitialCount : CLong,
    lMaximumCount : CLong,
    lpName : LPCWSTR) HANDLE;

external OpenSemaphoreA(
    dwDesiredAccess : CULong,
    bInheritHandle : Int,
    lpName : LPCSTR) HANDLE;

external OpenSemaphoreW(
    dwDesiredAccess : CULong,
    bInheritHandle : Int,
    lpName : LPCWSTR) HANDLE;

alias PTIMERAPCROUTINE = CCodePointer[(RawPointer,CULong,CULong),()];

external CreateWaitableTimerA(
    lpTimerAttributes : LPSECURITY_ATTRIBUTES,
    bManualReset : Int,
    lpTimerName : LPCSTR) HANDLE;

external CreateWaitableTimerW(
    lpTimerAttributes : LPSECURITY_ATTRIBUTES,
    bManualReset : Int,
    lpTimerName : LPCWSTR) HANDLE;

external OpenWaitableTimerA(
    dwDesiredAccess : CULong,
    bInheritHandle : Int,
    lpTimerName : LPCSTR) HANDLE;

external OpenWaitableTimerW(
    dwDesiredAccess : CULong,
    bInheritHandle : Int,
    lpTimerName : LPCWSTR) HANDLE;

external SetWaitableTimer(
    hTimer : HANDLE,
    lpDueTime : Pointer[LARGE_INTEGER],
    lPeriod : CLong,
    pfnCompletionRoutine : PTIMERAPCROUTINE,
    lpArgToCompletionRoutine : LPVOID,
    fResume : Int) Int;

external CancelWaitableTimer(
    hTimer : HANDLE) Int;

external CreateFileMappingA(
    hFile : HANDLE,
    lpFileMappingAttributes : LPSECURITY_ATTRIBUTES,
    flProtect : CULong,
    dwMaximumSizeHigh : CULong,
    dwMaximumSizeLow : CULong,
    lpName : LPCSTR) HANDLE;

external CreateFileMappingW(
    hFile : HANDLE,
    lpFileMappingAttributes : LPSECURITY_ATTRIBUTES,
    flProtect : CULong,
    dwMaximumSizeHigh : CULong,
    dwMaximumSizeLow : CULong,
    lpName : LPCWSTR) HANDLE;

external OpenFileMappingA(
    dwDesiredAccess : CULong,
    bInheritHandle : Int,
    lpName : LPCSTR) HANDLE;

external OpenFileMappingW(
    dwDesiredAccess : CULong,
    bInheritHandle : Int,
    lpName : LPCWSTR) HANDLE;

external GetLogicalDriveStringsA(
    nBufferLength : CULong,
    lpBuffer : LPSTR) CULong;

external GetLogicalDriveStringsW(
    nBufferLength : CULong,
    lpBuffer : LPWSTR) CULong;

alias LowMemoryResourceNotification = 0;
alias HighMemoryResourceNotification = 1;

alias MEMORY_RESOURCE_NOTIFICATION_TYPE = Int;

external CreateMemoryResourceNotification(
    NotificationType : MEMORY_RESOURCE_NOTIFICATION_TYPE) HANDLE;

external QueryMemoryResourceNotification(
    ResourceNotificationHandle : HANDLE,
    ResourceState : PBOOL) Int;

external LoadLibraryA(
    lpLibFileName : LPCSTR) HMODULE;

external LoadLibraryW(
    lpLibFileName : LPCWSTR) HMODULE;

external LoadLibraryExA(
    lpLibFileName : LPCSTR,
    hFile : HANDLE,
    dwFlags : CULong) HMODULE;

external LoadLibraryExW(
    lpLibFileName : LPCWSTR,
    hFile : HANDLE,
    dwFlags : CULong) HMODULE;

external GetModuleFileNameA(
    hModule : HMODULE,
    lpFilename : LPCH,
    nSize : CULong) CULong;

external GetModuleFileNameW(
    hModule : HMODULE,
    lpFilename : LPWCH,
    nSize : CULong) CULong;

external GetModuleHandleA(
    lpModuleName : LPCSTR) HMODULE;

external GetModuleHandleW(
    lpModuleName : LPCWSTR) HMODULE;

alias PGET_MODULE_HANDLE_EXA = CCodePointer[(CULong,Pointer[CChar],Pointer[Pointer[Struct_HINSTANCE__]]),(Int)];

alias PGET_MODULE_HANDLE_EXW = CCodePointer[(CULong,Pointer[UShort],Pointer[Pointer[Struct_HINSTANCE__]]),(Int)];

external GetModuleHandleExA(
    dwFlags : CULong,
    lpModuleName : LPCSTR,
    phModule : Pointer[HMODULE]) Int;

external GetModuleHandleExW(
    dwFlags : CULong,
    lpModuleName : LPCWSTR,
    phModule : Pointer[HMODULE]) Int;

external NeedCurrentDirectoryForExePathA(
    ExeName : LPCSTR) Int;

external NeedCurrentDirectoryForExePathW(
    ExeName : LPCWSTR) Int;

external CreateProcessA(
    lpApplicationName : LPCSTR,
    lpCommandLine : LPSTR,
    lpProcessAttributes : LPSECURITY_ATTRIBUTES,
    lpThreadAttributes : LPSECURITY_ATTRIBUTES,
    bInheritHandles : Int,
    dwCreationFlags : CULong,
    lpEnvironment : LPVOID,
    lpCurrentDirectory : LPCSTR,
    lpStartupInfo : LPSTARTUPINFOA,
    lpProcessInformation : LPPROCESS_INFORMATION) Int;

external CreateProcessW(
    lpApplicationName : LPCWSTR,
    lpCommandLine : LPWSTR,
    lpProcessAttributes : LPSECURITY_ATTRIBUTES,
    lpThreadAttributes : LPSECURITY_ATTRIBUTES,
    bInheritHandles : Int,
    dwCreationFlags : CULong,
    lpEnvironment : LPVOID,
    lpCurrentDirectory : LPCWSTR,
    lpStartupInfo : LPSTARTUPINFOW,
    lpProcessInformation : LPPROCESS_INFORMATION) Int;

external AddLocalAlternateComputerNameA(
    lpDnsFQHostname : LPCSTR,
    ulFlags : CULong) CULong;

external AddLocalAlternateComputerNameW(
    lpDnsFQHostname : LPCWSTR,
    ulFlags : CULong) CULong;

external SetProcessShutdownParameters(
    dwLevel : CULong,
    dwFlags : CULong) Int;

external GetProcessShutdownParameters(
    lpdwLevel : LPDWORD,
    lpdwFlags : LPDWORD) Int;

external GetProcessVersion(
    ProcessId : CULong) CULong;

external FatalAppExitA(
    uAction : UInt,
    lpMessageText : LPCSTR);

external FatalAppExitW(
    uAction : UInt,
    lpMessageText : LPCWSTR);

external GetStartupInfoA(
    lpStartupInfo : LPSTARTUPINFOA);

external GetStartupInfoW(
    lpStartupInfo : LPSTARTUPINFOW);

external GetCommandLineA() LPSTR;

external GetCommandLineW() LPWSTR;

external GetEnvironmentVariableA(
    lpName : LPCSTR,
    lpBuffer : LPSTR,
    nSize : CULong) CULong;

external GetEnvironmentVariableW(
    lpName : LPCWSTR,
    lpBuffer : LPWSTR,
    nSize : CULong) CULong;

external SetEnvironmentVariableA(
    lpName : LPCSTR,
    lpValue : LPCSTR) Int;

external SetEnvironmentVariableW(
    lpName : LPCWSTR,
    lpValue : LPCWSTR) Int;

external ExpandEnvironmentStringsA(
    lpSrc : LPCSTR,
    lpDst : LPSTR,
    nSize : CULong) CULong;

external ExpandEnvironmentStringsW(
    lpSrc : LPCWSTR,
    lpDst : LPWSTR,
    nSize : CULong) CULong;

external GetFirmwareEnvironmentVariableA(
    lpName : LPCSTR,
    lpGuid : LPCSTR,
    pBuffer : PVOID,
    nSize : CULong) CULong;

external GetFirmwareEnvironmentVariableW(
    lpName : LPCWSTR,
    lpGuid : LPCWSTR,
    pBuffer : PVOID,
    nSize : CULong) CULong;

external SetFirmwareEnvironmentVariableA(
    lpName : LPCSTR,
    lpGuid : LPCSTR,
    pValue : PVOID,
    nSize : CULong) Int;

external SetFirmwareEnvironmentVariableW(
    lpName : LPCWSTR,
    lpGuid : LPCWSTR,
    pValue : PVOID,
    nSize : CULong) Int;

external OutputDebugStringA(
    lpOutputString : LPCSTR);

external OutputDebugStringW(
    lpOutputString : LPCWSTR);

external FindResourceA(
    hModule : HMODULE,
    lpName : LPCSTR,
    lpType : LPCSTR) HRSRC;

external FindResourceW(
    hModule : HMODULE,
    lpName : LPCWSTR,
    lpType : LPCWSTR) HRSRC;

external FindResourceExA(
    hModule : HMODULE,
    lpType : LPCSTR,
    lpName : LPCSTR,
    wLanguage : UShort) HRSRC;

external FindResourceExW(
    hModule : HMODULE,
    lpType : LPCWSTR,
    lpName : LPCWSTR,
    wLanguage : UShort) HRSRC;

alias AlwaysOff = 0;
alias AlwaysOn = 1;
alias OptIn = 2;
alias OptOut = 3;

alias DEP_SYSTEM_POLICY_TYPE = Int;

external GetSystemDEPPolicy() DEP_SYSTEM_POLICY_TYPE;

alias ENUMRESTYPEPROCA = CCodePointer[(Pointer[Struct_HINSTANCE__],Pointer[CChar],Int64),(Int)];

alias ENUMRESTYPEPROCW = CCodePointer[(Pointer[Struct_HINSTANCE__],Pointer[UShort],Int64),(Int)];

alias ENUMRESNAMEPROCA = CCodePointer[(Pointer[Struct_HINSTANCE__],Pointer[CChar],Pointer[CChar],Int64),(Int)];

alias ENUMRESNAMEPROCW = CCodePointer[(Pointer[Struct_HINSTANCE__],Pointer[UShort],Pointer[UShort],Int64),(Int)];

alias ENUMRESLANGPROCA = CCodePointer[(Pointer[Struct_HINSTANCE__],Pointer[CChar],Pointer[CChar],UShort,Int64),(Int)];

alias ENUMRESLANGPROCW = CCodePointer[(Pointer[Struct_HINSTANCE__],Pointer[UShort],Pointer[UShort],UShort,Int64),(Int)];

external EnumResourceTypesA(
    hModule : HMODULE,
    lpEnumFunc : ENUMRESTYPEPROCA,
    lParam : Int64) Int;

external EnumResourceTypesW(
    hModule : HMODULE,
    lpEnumFunc : ENUMRESTYPEPROCW,
    lParam : Int64) Int;

external EnumResourceNamesA(
    hModule : HMODULE,
    lpType : LPCSTR,
    lpEnumFunc : ENUMRESNAMEPROCA,
    lParam : Int64) Int;

external EnumResourceNamesW(
    hModule : HMODULE,
    lpType : LPCWSTR,
    lpEnumFunc : ENUMRESNAMEPROCW,
    lParam : Int64) Int;

external EnumResourceLanguagesA(
    hModule : HMODULE,
    lpType : LPCSTR,
    lpName : LPCSTR,
    lpEnumFunc : ENUMRESLANGPROCA,
    lParam : Int64) Int;

external EnumResourceLanguagesW(
    hModule : HMODULE,
    lpType : LPCWSTR,
    lpName : LPCWSTR,
    lpEnumFunc : ENUMRESLANGPROCW,
    lParam : Int64) Int;

external BeginUpdateResourceA(
    pFileName : LPCSTR,
    bDeleteExistingResources : Int) HANDLE;

external BeginUpdateResourceW(
    pFileName : LPCWSTR,
    bDeleteExistingResources : Int) HANDLE;

external UpdateResourceA(
    hUpdate : HANDLE,
    lpType : LPCSTR,
    lpName : LPCSTR,
    wLanguage : UShort,
    lpData : LPVOID,
    cb : CULong) Int;

external UpdateResourceW(
    hUpdate : HANDLE,
    lpType : LPCWSTR,
    lpName : LPCWSTR,
    wLanguage : UShort,
    lpData : LPVOID,
    cb : CULong) Int;

external EndUpdateResourceA(
    hUpdate : HANDLE,
    fDiscard : Int) Int;

external EndUpdateResourceW(
    hUpdate : HANDLE,
    fDiscard : Int) Int;

external GlobalAddAtomA(
    lpString : LPCSTR) UShort;

external GlobalAddAtomW(
    lpString : LPCWSTR) UShort;

external GlobalFindAtomA(
    lpString : LPCSTR) UShort;

external GlobalFindAtomW(
    lpString : LPCWSTR) UShort;

external GlobalGetAtomNameA(
    nAtom : UShort,
    lpBuffer : LPSTR,
    nSize : Int) UInt;

external GlobalGetAtomNameW(
    nAtom : UShort,
    lpBuffer : LPWSTR,
    nSize : Int) UInt;

external AddAtomA(
    lpString : LPCSTR) UShort;

external AddAtomW(
    lpString : LPCWSTR) UShort;

external FindAtomA(
    lpString : LPCSTR) UShort;

external FindAtomW(
    lpString : LPCWSTR) UShort;

external GetAtomNameA(
    nAtom : UShort,
    lpBuffer : LPSTR,
    nSize : Int) UInt;

external GetAtomNameW(
    nAtom : UShort,
    lpBuffer : LPWSTR,
    nSize : Int) UInt;

external GetProfileIntA(
    lpAppName : LPCSTR,
    lpKeyName : LPCSTR,
    nDefault : Int) UInt;

external GetProfileIntW(
    lpAppName : LPCWSTR,
    lpKeyName : LPCWSTR,
    nDefault : Int) UInt;

external GetProfileStringA(
    lpAppName : LPCSTR,
    lpKeyName : LPCSTR,
    lpDefault : LPCSTR,
    lpReturnedString : LPSTR,
    nSize : CULong) CULong;

external GetProfileStringW(
    lpAppName : LPCWSTR,
    lpKeyName : LPCWSTR,
    lpDefault : LPCWSTR,
    lpReturnedString : LPWSTR,
    nSize : CULong) CULong;

external WriteProfileStringA(
    lpAppName : LPCSTR,
    lpKeyName : LPCSTR,
    lpString : LPCSTR) Int;

external WriteProfileStringW(
    lpAppName : LPCWSTR,
    lpKeyName : LPCWSTR,
    lpString : LPCWSTR) Int;

external GetProfileSectionA(
    lpAppName : LPCSTR,
    lpReturnedString : LPSTR,
    nSize : CULong) CULong;

external GetProfileSectionW(
    lpAppName : LPCWSTR,
    lpReturnedString : LPWSTR,
    nSize : CULong) CULong;

external WriteProfileSectionA(
    lpAppName : LPCSTR,
    lpString : LPCSTR) Int;

external WriteProfileSectionW(
    lpAppName : LPCWSTR,
    lpString : LPCWSTR) Int;

external GetPrivateProfileIntA(
    lpAppName : LPCSTR,
    lpKeyName : LPCSTR,
    nDefault : Int,
    lpFileName : LPCSTR) UInt;

external GetPrivateProfileIntW(
    lpAppName : LPCWSTR,
    lpKeyName : LPCWSTR,
    nDefault : Int,
    lpFileName : LPCWSTR) UInt;

external GetPrivateProfileStringA(
    lpAppName : LPCSTR,
    lpKeyName : LPCSTR,
    lpDefault : LPCSTR,
    lpReturnedString : LPSTR,
    nSize : CULong,
    lpFileName : LPCSTR) CULong;

external GetPrivateProfileStringW(
    lpAppName : LPCWSTR,
    lpKeyName : LPCWSTR,
    lpDefault : LPCWSTR,
    lpReturnedString : LPWSTR,
    nSize : CULong,
    lpFileName : LPCWSTR) CULong;

external WritePrivateProfileStringA(
    lpAppName : LPCSTR,
    lpKeyName : LPCSTR,
    lpString : LPCSTR,
    lpFileName : LPCSTR) Int;

external WritePrivateProfileStringW(
    lpAppName : LPCWSTR,
    lpKeyName : LPCWSTR,
    lpString : LPCWSTR,
    lpFileName : LPCWSTR) Int;

external GetPrivateProfileSectionA(
    lpAppName : LPCSTR,
    lpReturnedString : LPSTR,
    nSize : CULong,
    lpFileName : LPCSTR) CULong;

external GetPrivateProfileSectionW(
    lpAppName : LPCWSTR,
    lpReturnedString : LPWSTR,
    nSize : CULong,
    lpFileName : LPCWSTR) CULong;

external WritePrivateProfileSectionA(
    lpAppName : LPCSTR,
    lpString : LPCSTR,
    lpFileName : LPCSTR) Int;

external WritePrivateProfileSectionW(
    lpAppName : LPCWSTR,
    lpString : LPCWSTR,
    lpFileName : LPCWSTR) Int;

external GetPrivateProfileSectionNamesA(
    lpszReturnBuffer : LPSTR,
    nSize : CULong,
    lpFileName : LPCSTR) CULong;

external GetPrivateProfileSectionNamesW(
    lpszReturnBuffer : LPWSTR,
    nSize : CULong,
    lpFileName : LPCWSTR) CULong;

external GetPrivateProfileStructA(
    lpszSection : LPCSTR,
    lpszKey : LPCSTR,
    lpStruct : LPVOID,
    uSizeStruct : UInt,
    szFile : LPCSTR) Int;

external GetPrivateProfileStructW(
    lpszSection : LPCWSTR,
    lpszKey : LPCWSTR,
    lpStruct : LPVOID,
    uSizeStruct : UInt,
    szFile : LPCWSTR) Int;

external WritePrivateProfileStructA(
    lpszSection : LPCSTR,
    lpszKey : LPCSTR,
    lpStruct : LPVOID,
    uSizeStruct : UInt,
    szFile : LPCSTR) Int;

external WritePrivateProfileStructW(
    lpszSection : LPCWSTR,
    lpszKey : LPCWSTR,
    lpStruct : LPVOID,
    uSizeStruct : UInt,
    szFile : LPCWSTR) Int;

external GetDriveTypeA(
    lpRootPathName : LPCSTR) UInt;

external GetDriveTypeW(
    lpRootPathName : LPCWSTR) UInt;

external GetSystemDirectoryA(
    lpBuffer : LPSTR,
    uSize : UInt) UInt;

external GetSystemDirectoryW(
    lpBuffer : LPWSTR,
    uSize : UInt) UInt;

external GetTempPathA(
    nBufferLength : CULong,
    lpBuffer : LPSTR) CULong;

external GetTempPathW(
    nBufferLength : CULong,
    lpBuffer : LPWSTR) CULong;

external GetTempFileNameA(
    lpPathName : LPCSTR,
    lpPrefixString : LPCSTR,
    uUnique : UInt,
    lpTempFileName : LPSTR) UInt;

external GetTempFileNameW(
    lpPathName : LPCWSTR,
    lpPrefixString : LPCWSTR,
    uUnique : UInt,
    lpTempFileName : LPWSTR) UInt;

external GetWindowsDirectoryA(
    lpBuffer : LPSTR,
    uSize : UInt) UInt;

external GetWindowsDirectoryW(
    lpBuffer : LPWSTR,
    uSize : UInt) UInt;

external GetSystemWindowsDirectoryA(
    lpBuffer : LPSTR,
    uSize : UInt) UInt;

external GetSystemWindowsDirectoryW(
    lpBuffer : LPWSTR,
    uSize : UInt) UInt;

external GetSystemWow64DirectoryA(
    lpBuffer : LPSTR,
    uSize : UInt) UInt;

external GetSystemWow64DirectoryW(
    lpBuffer : LPWSTR,
    uSize : UInt) UInt;

external Wow64EnableWow64FsRedirection(
    Wow64FsEnableRedirection : CUChar) CUChar;

external Wow64DisableWow64FsRedirection(
    OldValue : Pointer[PVOID]) Int;

external Wow64RevertWow64FsRedirection(
    OlValue : PVOID) Int;

alias PGET_SYSTEM_WOW64_DIRECTORY_A = CCodePointer[(Pointer[CChar],UInt),(UInt)];

alias PGET_SYSTEM_WOW64_DIRECTORY_W = CCodePointer[(Pointer[UShort],UInt),(UInt)];

external SetCurrentDirectoryA(
    lpPathName : LPCSTR) Int;

external SetCurrentDirectoryW(
    lpPathName : LPCWSTR) Int;

external GetCurrentDirectoryA(
    nBufferLength : CULong,
    lpBuffer : LPSTR) CULong;

external GetCurrentDirectoryW(
    nBufferLength : CULong,
    lpBuffer : LPWSTR) CULong;

external SetDllDirectoryA(
    lpPathName : LPCSTR) Int;

external SetDllDirectoryW(
    lpPathName : LPCWSTR) Int;

external GetDllDirectoryA(
    nBufferLength : CULong,
    lpBuffer : LPSTR) CULong;

external GetDllDirectoryW(
    nBufferLength : CULong,
    lpBuffer : LPWSTR) CULong;

external GetDiskFreeSpaceA(
    lpRootPathName : LPCSTR,
    lpSectorsPerCluster : LPDWORD,
    lpBytesPerSector : LPDWORD,
    lpNumberOfFreeClusters : LPDWORD,
    lpTotalNumberOfClusters : LPDWORD) Int;

external GetDiskFreeSpaceW(
    lpRootPathName : LPCWSTR,
    lpSectorsPerCluster : LPDWORD,
    lpBytesPerSector : LPDWORD,
    lpNumberOfFreeClusters : LPDWORD,
    lpTotalNumberOfClusters : LPDWORD) Int;

external GetDiskFreeSpaceExA(
    lpDirectoryName : LPCSTR,
    lpFreeBytesAvailableToCaller : PULARGE_INTEGER,
    lpTotalNumberOfBytes : PULARGE_INTEGER,
    lpTotalNumberOfFreeBytes : PULARGE_INTEGER) Int;

external GetDiskFreeSpaceExW(
    lpDirectoryName : LPCWSTR,
    lpFreeBytesAvailableToCaller : PULARGE_INTEGER,
    lpTotalNumberOfBytes : PULARGE_INTEGER,
    lpTotalNumberOfFreeBytes : PULARGE_INTEGER) Int;

external CreateDirectoryA(
    lpPathName : LPCSTR,
    lpSecurityAttributes : LPSECURITY_ATTRIBUTES) Int;

external CreateDirectoryW(
    lpPathName : LPCWSTR,
    lpSecurityAttributes : LPSECURITY_ATTRIBUTES) Int;

external CreateDirectoryExA(
    lpTemplateDirectory : LPCSTR,
    lpNewDirectory : LPCSTR,
    lpSecurityAttributes : LPSECURITY_ATTRIBUTES) Int;

external CreateDirectoryExW(
    lpTemplateDirectory : LPCWSTR,
    lpNewDirectory : LPCWSTR,
    lpSecurityAttributes : LPSECURITY_ATTRIBUTES) Int;

external RemoveDirectoryA(
    lpPathName : LPCSTR) Int;

external RemoveDirectoryW(
    lpPathName : LPCWSTR) Int;

external GetFullPathNameA(
    lpFileName : LPCSTR,
    nBufferLength : CULong,
    lpBuffer : LPSTR,
    lpFilePart : Pointer[LPSTR]) CULong;

external GetFullPathNameW(
    lpFileName : LPCWSTR,
    nBufferLength : CULong,
    lpBuffer : LPWSTR,
    lpFilePart : Pointer[LPWSTR]) CULong;

external DefineDosDeviceA(
    dwFlags : CULong,
    lpDeviceName : LPCSTR,
    lpTargetPath : LPCSTR) Int;

external DefineDosDeviceW(
    dwFlags : CULong,
    lpDeviceName : LPCWSTR,
    lpTargetPath : LPCWSTR) Int;

external QueryDosDeviceA(
    lpDeviceName : LPCSTR,
    lpTargetPath : LPSTR,
    ucchMax : CULong) CULong;

external QueryDosDeviceW(
    lpDeviceName : LPCWSTR,
    lpTargetPath : LPWSTR,
    ucchMax : CULong) CULong;

external CreateFileA(
    lpFileName : LPCSTR,
    dwDesiredAccess : CULong,
    dwShareMode : CULong,
    lpSecurityAttributes : LPSECURITY_ATTRIBUTES,
    dwCreationDisposition : CULong,
    dwFlagsAndAttributes : CULong,
    hTemplateFile : HANDLE) HANDLE;

external CreateFileW(
    lpFileName : LPCWSTR,
    dwDesiredAccess : CULong,
    dwShareMode : CULong,
    lpSecurityAttributes : LPSECURITY_ATTRIBUTES,
    dwCreationDisposition : CULong,
    dwFlagsAndAttributes : CULong,
    hTemplateFile : HANDLE) HANDLE;

external ReOpenFile(
    hOriginalFile : HANDLE,
    dwDesiredAccess : CULong,
    dwShareMode : CULong,
    dwFlagsAndAttributes : CULong) HANDLE;

external SetFileAttributesA(
    lpFileName : LPCSTR,
    dwFileAttributes : CULong) Int;

external SetFileAttributesW(
    lpFileName : LPCWSTR,
    dwFileAttributes : CULong) Int;

external GetFileAttributesA(
    lpFileName : LPCSTR) CULong;

external GetFileAttributesW(
    lpFileName : LPCWSTR) CULong;

alias GetFileExInfoStandard = 0;
alias GetFileExMaxInfoLevel = 1;

alias GET_FILEEX_INFO_LEVELS = Int;

external GetFileAttributesExA(
    lpFileName : LPCSTR,
    fInfoLevelId : GET_FILEEX_INFO_LEVELS,
    lpFileInformation : LPVOID) Int;

external GetFileAttributesExW(
    lpFileName : LPCWSTR,
    fInfoLevelId : GET_FILEEX_INFO_LEVELS,
    lpFileInformation : LPVOID) Int;

external GetCompressedFileSizeA(
    lpFileName : LPCSTR,
    lpFileSizeHigh : LPDWORD) CULong;

external GetCompressedFileSizeW(
    lpFileName : LPCWSTR,
    lpFileSizeHigh : LPDWORD) CULong;

external DeleteFileA(
    lpFileName : LPCSTR) Int;

external DeleteFileW(
    lpFileName : LPCWSTR) Int;

external CheckNameLegalDOS8Dot3A(
    lpName : LPCSTR,
    lpOemName : LPSTR,
    OemNameSize : CULong,
    pbNameContainsSpaces : PBOOL,
    pbNameLegal : PBOOL) Int;

external CheckNameLegalDOS8Dot3W(
    lpName : LPCWSTR,
    lpOemName : LPSTR,
    OemNameSize : CULong,
    pbNameContainsSpaces : PBOOL,
    pbNameLegal : PBOOL) Int;

alias FindExInfoStandard = 0;
alias FindExInfoMaxInfoLevel = 1;

alias FINDEX_INFO_LEVELS = Int;

alias FindExSearchNameMatch = 0;
alias FindExSearchLimitToDirectories = 1;
alias FindExSearchLimitToDevices = 2;
alias FindExSearchMaxSearchOp = 3;

alias FINDEX_SEARCH_OPS = Int;

external FindFirstFileExA(
    lpFileName : LPCSTR,
    fInfoLevelId : FINDEX_INFO_LEVELS,
    lpFindFileData : LPVOID,
    fSearchOp : FINDEX_SEARCH_OPS,
    lpSearchFilter : LPVOID,
    dwAdditionalFlags : CULong) HANDLE;

external FindFirstFileExW(
    lpFileName : LPCWSTR,
    fInfoLevelId : FINDEX_INFO_LEVELS,
    lpFindFileData : LPVOID,
    fSearchOp : FINDEX_SEARCH_OPS,
    lpSearchFilter : LPVOID,
    dwAdditionalFlags : CULong) HANDLE;

external FindFirstFileA(
    lpFileName : LPCSTR,
    lpFindFileData : LPWIN32_FIND_DATAA) HANDLE;

external FindFirstFileW(
    lpFileName : LPCWSTR,
    lpFindFileData : LPWIN32_FIND_DATAW) HANDLE;

external FindNextFileA(
    hFindFile : HANDLE,
    lpFindFileData : LPWIN32_FIND_DATAA) Int;

external FindNextFileW(
    hFindFile : HANDLE,
    lpFindFileData : LPWIN32_FIND_DATAW) Int;

external SearchPathA(
    lpPath : LPCSTR,
    lpFileName : LPCSTR,
    lpExtension : LPCSTR,
    nBufferLength : CULong,
    lpBuffer : LPSTR,
    lpFilePart : Pointer[LPSTR]) CULong;

external SearchPathW(
    lpPath : LPCWSTR,
    lpFileName : LPCWSTR,
    lpExtension : LPCWSTR,
    nBufferLength : CULong,
    lpBuffer : LPWSTR,
    lpFilePart : Pointer[LPWSTR]) CULong;

external CopyFileA(
    lpExistingFileName : LPCSTR,
    lpNewFileName : LPCSTR,
    bFailIfExists : Int) Int;

external CopyFileW(
    lpExistingFileName : LPCWSTR,
    lpNewFileName : LPCWSTR,
    bFailIfExists : Int) Int;

alias LPPROGRESS_ROUTINE = CCodePointer[(AUnionType,AUnionType,AUnionType,AUnionType,CULong,CULong,RawPointer,RawPointer,RawPointer),(CULong)];

external CopyFileExA(
    lpExistingFileName : LPCSTR,
    lpNewFileName : LPCSTR,
    lpProgressRoutine : LPPROGRESS_ROUTINE,
    lpData : LPVOID,
    pbCancel : LPBOOL,
    dwCopyFlags : CULong) Int;

external CopyFileExW(
    lpExistingFileName : LPCWSTR,
    lpNewFileName : LPCWSTR,
    lpProgressRoutine : LPPROGRESS_ROUTINE,
    lpData : LPVOID,
    pbCancel : LPBOOL,
    dwCopyFlags : CULong) Int;

external MoveFileA(
    lpExistingFileName : LPCSTR,
    lpNewFileName : LPCSTR) Int;

external MoveFileW(
    lpExistingFileName : LPCWSTR,
    lpNewFileName : LPCWSTR) Int;

external MoveFileExA(
    lpExistingFileName : LPCSTR,
    lpNewFileName : LPCSTR,
    dwFlags : CULong) Int;

external MoveFileExW(
    lpExistingFileName : LPCWSTR,
    lpNewFileName : LPCWSTR,
    dwFlags : CULong) Int;

external MoveFileWithProgressA(
    lpExistingFileName : LPCSTR,
    lpNewFileName : LPCSTR,
    lpProgressRoutine : LPPROGRESS_ROUTINE,
    lpData : LPVOID,
    dwFlags : CULong) Int;

external MoveFileWithProgressW(
    lpExistingFileName : LPCWSTR,
    lpNewFileName : LPCWSTR,
    lpProgressRoutine : LPPROGRESS_ROUTINE,
    lpData : LPVOID,
    dwFlags : CULong) Int;

external ReplaceFileA(
    lpReplacedFileName : LPCSTR,
    lpReplacementFileName : LPCSTR,
    lpBackupFileName : LPCSTR,
    dwReplaceFlags : CULong,
    lpExclude : LPVOID,
    lpReserved : LPVOID) Int;

external ReplaceFileW(
    lpReplacedFileName : LPCWSTR,
    lpReplacementFileName : LPCWSTR,
    lpBackupFileName : LPCWSTR,
    dwReplaceFlags : CULong,
    lpExclude : LPVOID,
    lpReserved : LPVOID) Int;

external CreateHardLinkA(
    lpFileName : LPCSTR,
    lpExistingFileName : LPCSTR,
    lpSecurityAttributes : LPSECURITY_ATTRIBUTES) Int;

external CreateHardLinkW(
    lpFileName : LPCWSTR,
    lpExistingFileName : LPCWSTR,
    lpSecurityAttributes : LPSECURITY_ATTRIBUTES) Int;

alias FindStreamInfoStandard = 0;
alias FindStreamInfoMaxInfoLevel = 1;

alias STREAM_INFO_LEVELS = Int;

record Struct__WIN32_FIND_STREAM_DATA (
    StreamSize : LARGE_INTEGER,
    cStreamName : Array[UShort,296],
);

alias WIN32_FIND_STREAM_DATA = Struct__WIN32_FIND_STREAM_DATA;

alias PWIN32_FIND_STREAM_DATA = Pointer[Struct__WIN32_FIND_STREAM_DATA];

external FindFirstStreamW(
    lpFileName : LPCWSTR,
    InfoLevel : STREAM_INFO_LEVELS,
    lpFindStreamData : LPVOID,
    dwFlags : CULong) HANDLE;

external FindNextStreamW(
    hFindStream : HANDLE,
    lpFindStreamData : LPVOID) Int;

external CreateNamedPipeA(
    lpName : LPCSTR,
    dwOpenMode : CULong,
    dwPipeMode : CULong,
    nMaxInstances : CULong,
    nOutBufferSize : CULong,
    nInBufferSize : CULong,
    nDefaultTimeOut : CULong,
    lpSecurityAttributes : LPSECURITY_ATTRIBUTES) HANDLE;

external CreateNamedPipeW(
    lpName : LPCWSTR,
    dwOpenMode : CULong,
    dwPipeMode : CULong,
    nMaxInstances : CULong,
    nOutBufferSize : CULong,
    nInBufferSize : CULong,
    nDefaultTimeOut : CULong,
    lpSecurityAttributes : LPSECURITY_ATTRIBUTES) HANDLE;

external GetNamedPipeHandleStateA(
    hNamedPipe : HANDLE,
    lpState : LPDWORD,
    lpCurInstances : LPDWORD,
    lpMaxCollectionCount : LPDWORD,
    lpCollectDataTimeout : LPDWORD,
    lpUserName : LPSTR,
    nMaxUserNameSize : CULong) Int;

external GetNamedPipeHandleStateW(
    hNamedPipe : HANDLE,
    lpState : LPDWORD,
    lpCurInstances : LPDWORD,
    lpMaxCollectionCount : LPDWORD,
    lpCollectDataTimeout : LPDWORD,
    lpUserName : LPWSTR,
    nMaxUserNameSize : CULong) Int;

external CallNamedPipeA(
    lpNamedPipeName : LPCSTR,
    lpInBuffer : LPVOID,
    nInBufferSize : CULong,
    lpOutBuffer : LPVOID,
    nOutBufferSize : CULong,
    lpBytesRead : LPDWORD,
    nTimeOut : CULong) Int;

external CallNamedPipeW(
    lpNamedPipeName : LPCWSTR,
    lpInBuffer : LPVOID,
    nInBufferSize : CULong,
    lpOutBuffer : LPVOID,
    nOutBufferSize : CULong,
    lpBytesRead : LPDWORD,
    nTimeOut : CULong) Int;

external WaitNamedPipeA(
    lpNamedPipeName : LPCSTR,
    nTimeOut : CULong) Int;

external WaitNamedPipeW(
    lpNamedPipeName : LPCWSTR,
    nTimeOut : CULong) Int;

external SetVolumeLabelA(
    lpRootPathName : LPCSTR,
    lpVolumeName : LPCSTR) Int;

external SetVolumeLabelW(
    lpRootPathName : LPCWSTR,
    lpVolumeName : LPCWSTR) Int;

external SetFileApisToOEM();

external SetFileApisToANSI();

external AreFileApisANSI() Int;

external GetVolumeInformationA(
    lpRootPathName : LPCSTR,
    lpVolumeNameBuffer : LPSTR,
    nVolumeNameSize : CULong,
    lpVolumeSerialNumber : LPDWORD,
    lpMaximumComponentLength : LPDWORD,
    lpFileSystemFlags : LPDWORD,
    lpFileSystemNameBuffer : LPSTR,
    nFileSystemNameSize : CULong) Int;

external GetVolumeInformationW(
    lpRootPathName : LPCWSTR,
    lpVolumeNameBuffer : LPWSTR,
    nVolumeNameSize : CULong,
    lpVolumeSerialNumber : LPDWORD,
    lpMaximumComponentLength : LPDWORD,
    lpFileSystemFlags : LPDWORD,
    lpFileSystemNameBuffer : LPWSTR,
    nFileSystemNameSize : CULong) Int;

external CancelIo(
    hFile : HANDLE) Int;

external ClearEventLogA(
    hEventLog : HANDLE,
    lpBackupFileName : LPCSTR) Int;

external ClearEventLogW(
    hEventLog : HANDLE,
    lpBackupFileName : LPCWSTR) Int;

external BackupEventLogA(
    hEventLog : HANDLE,
    lpBackupFileName : LPCSTR) Int;

external BackupEventLogW(
    hEventLog : HANDLE,
    lpBackupFileName : LPCWSTR) Int;

external CloseEventLog(
    hEventLog : HANDLE) Int;

external DeregisterEventSource(
    hEventLog : HANDLE) Int;

external NotifyChangeEventLog(
    hEventLog : HANDLE,
    hEvent : HANDLE) Int;

external GetNumberOfEventLogRecords(
    hEventLog : HANDLE,
    NumberOfRecords : PDWORD) Int;

external GetOldestEventLogRecord(
    hEventLog : HANDLE,
    OldestRecord : PDWORD) Int;

external OpenEventLogA(
    lpUNCServerName : LPCSTR,
    lpSourceName : LPCSTR) HANDLE;

external OpenEventLogW(
    lpUNCServerName : LPCWSTR,
    lpSourceName : LPCWSTR) HANDLE;

external RegisterEventSourceA(
    lpUNCServerName : LPCSTR,
    lpSourceName : LPCSTR) HANDLE;

external RegisterEventSourceW(
    lpUNCServerName : LPCWSTR,
    lpSourceName : LPCWSTR) HANDLE;

external OpenBackupEventLogA(
    lpUNCServerName : LPCSTR,
    lpFileName : LPCSTR) HANDLE;

external OpenBackupEventLogW(
    lpUNCServerName : LPCWSTR,
    lpFileName : LPCWSTR) HANDLE;

external ReadEventLogA(
    hEventLog : HANDLE,
    dwReadFlags : CULong,
    dwRecordOffset : CULong,
    lpBuffer : LPVOID,
    nNumberOfBytesToRead : CULong,
    pnBytesRead : Pointer[CULong],
    pnMinNumberOfBytesNeeded : Pointer[CULong]) Int;

external ReadEventLogW(
    hEventLog : HANDLE,
    dwReadFlags : CULong,
    dwRecordOffset : CULong,
    lpBuffer : LPVOID,
    nNumberOfBytesToRead : CULong,
    pnBytesRead : Pointer[CULong],
    pnMinNumberOfBytesNeeded : Pointer[CULong]) Int;

external ReportEventA(
    hEventLog : HANDLE,
    wType : UShort,
    wCategory : UShort,
    dwEventID : CULong,
    lpUserSid : PSID,
    wNumStrings : UShort,
    dwDataSize : CULong,
    lpStrings : Pointer[LPCSTR],
    lpRawData : LPVOID) Int;

external ReportEventW(
    hEventLog : HANDLE,
    wType : UShort,
    wCategory : UShort,
    dwEventID : CULong,
    lpUserSid : PSID,
    wNumStrings : UShort,
    dwDataSize : CULong,
    lpStrings : Pointer[LPCWSTR],
    lpRawData : LPVOID) Int;

record Struct__EVENTLOG_FULL_INFORMATION (
    dwFull : CULong,
);

alias EVENTLOG_FULL_INFORMATION = Struct__EVENTLOG_FULL_INFORMATION;

alias LPEVENTLOG_FULL_INFORMATION = Pointer[Struct__EVENTLOG_FULL_INFORMATION];

external GetEventLogInformation(
    hEventLog : HANDLE,
    dwInfoLevel : CULong,
    lpBuffer : LPVOID,
    cbBufSize : CULong,
    pcbBytesNeeded : LPDWORD) Int;

external DuplicateToken(
    ExistingTokenHandle : HANDLE,
    ImpersonationLevel : SECURITY_IMPERSONATION_LEVEL,
    DuplicateTokenHandle : PHANDLE) Int;

external GetKernelObjectSecurity(
    Handle : HANDLE,
    RequestedInformation : CULong,
    pSecurityDescriptor : PSECURITY_DESCRIPTOR,
    nLength : CULong,
    lpnLengthNeeded : LPDWORD) Int;

external ImpersonateNamedPipeClient(
    hNamedPipe : HANDLE) Int;

external ImpersonateSelf(
    ImpersonationLevel : SECURITY_IMPERSONATION_LEVEL) Int;

external RevertToSelf() Int;

external SetThreadToken(
    Thread : PHANDLE,
    Token : HANDLE) Int;

external AccessCheck(
    pSecurityDescriptor : PSECURITY_DESCRIPTOR,
    ClientToken : HANDLE,
    DesiredAccess : CULong,
    GenericMapping : PGENERIC_MAPPING,
    PrivilegeSet : PPRIVILEGE_SET,
    PrivilegeSetLength : LPDWORD,
    GrantedAccess : LPDWORD,
    AccessStatus : LPBOOL) Int;

external AccessCheckByType(
    pSecurityDescriptor : PSECURITY_DESCRIPTOR,
    PrincipalSelfSid : PSID,
    ClientToken : HANDLE,
    DesiredAccess : CULong,
    ObjectTypeList : POBJECT_TYPE_LIST,
    ObjectTypeListLength : CULong,
    GenericMapping : PGENERIC_MAPPING,
    PrivilegeSet : PPRIVILEGE_SET,
    PrivilegeSetLength : LPDWORD,
    GrantedAccess : LPDWORD,
    AccessStatus : LPBOOL) Int;

external AccessCheckByTypeResultList(
    pSecurityDescriptor : PSECURITY_DESCRIPTOR,
    PrincipalSelfSid : PSID,
    ClientToken : HANDLE,
    DesiredAccess : CULong,
    ObjectTypeList : POBJECT_TYPE_LIST,
    ObjectTypeListLength : CULong,
    GenericMapping : PGENERIC_MAPPING,
    PrivilegeSet : PPRIVILEGE_SET,
    PrivilegeSetLength : LPDWORD,
    GrantedAccessList : LPDWORD,
    AccessStatusList : LPDWORD) Int;

external OpenProcessToken(
    ProcessHandle : HANDLE,
    DesiredAccess : CULong,
    TokenHandle : PHANDLE) Int;

external OpenThreadToken(
    ThreadHandle : HANDLE,
    DesiredAccess : CULong,
    OpenAsSelf : Int,
    TokenHandle : PHANDLE) Int;

external GetTokenInformation(
    TokenHandle : HANDLE,
    TokenInformationClass : TOKEN_INFORMATION_CLASS,
    TokenInformation : LPVOID,
    TokenInformationLength : CULong,
    ReturnLength : PDWORD) Int;

external SetTokenInformation(
    TokenHandle : HANDLE,
    TokenInformationClass : TOKEN_INFORMATION_CLASS,
    TokenInformation : LPVOID,
    TokenInformationLength : CULong) Int;

external AdjustTokenPrivileges(
    TokenHandle : HANDLE,
    DisableAllPrivileges : Int,
    NewState : PTOKEN_PRIVILEGES,
    BufferLength : CULong,
    PreviousState : PTOKEN_PRIVILEGES,
    ReturnLength : PDWORD) Int;

external AdjustTokenGroups(
    TokenHandle : HANDLE,
    ResetToDefault : Int,
    NewState : PTOKEN_GROUPS,
    BufferLength : CULong,
    PreviousState : PTOKEN_GROUPS,
    ReturnLength : PDWORD) Int;

external PrivilegeCheck(
    ClientToken : HANDLE,
    RequiredPrivileges : PPRIVILEGE_SET,
    pfResult : LPBOOL) Int;

external AccessCheckAndAuditAlarmA(
    SubsystemName : LPCSTR,
    HandleId : LPVOID,
    ObjectTypeName : LPSTR,
    ObjectName : LPSTR,
    SecurityDescriptor : PSECURITY_DESCRIPTOR,
    DesiredAccess : CULong,
    GenericMapping : PGENERIC_MAPPING,
    ObjectCreation : Int,
    GrantedAccess : LPDWORD,
    AccessStatus : LPBOOL,
    pfGenerateOnClose : LPBOOL) Int;

external AccessCheckAndAuditAlarmW(
    SubsystemName : LPCWSTR,
    HandleId : LPVOID,
    ObjectTypeName : LPWSTR,
    ObjectName : LPWSTR,
    SecurityDescriptor : PSECURITY_DESCRIPTOR,
    DesiredAccess : CULong,
    GenericMapping : PGENERIC_MAPPING,
    ObjectCreation : Int,
    GrantedAccess : LPDWORD,
    AccessStatus : LPBOOL,
    pfGenerateOnClose : LPBOOL) Int;

external AccessCheckByTypeAndAuditAlarmA(
    SubsystemName : LPCSTR,
    HandleId : LPVOID,
    ObjectTypeName : LPCSTR,
    ObjectName : LPCSTR,
    SecurityDescriptor : PSECURITY_DESCRIPTOR,
    PrincipalSelfSid : PSID,
    DesiredAccess : CULong,
    AuditType : AUDIT_EVENT_TYPE,
    Flags : CULong,
    ObjectTypeList : POBJECT_TYPE_LIST,
    ObjectTypeListLength : CULong,
    GenericMapping : PGENERIC_MAPPING,
    ObjectCreation : Int,
    GrantedAccess : LPDWORD,
    AccessStatus : LPBOOL,
    pfGenerateOnClose : LPBOOL) Int;

external AccessCheckByTypeAndAuditAlarmW(
    SubsystemName : LPCWSTR,
    HandleId : LPVOID,
    ObjectTypeName : LPCWSTR,
    ObjectName : LPCWSTR,
    SecurityDescriptor : PSECURITY_DESCRIPTOR,
    PrincipalSelfSid : PSID,
    DesiredAccess : CULong,
    AuditType : AUDIT_EVENT_TYPE,
    Flags : CULong,
    ObjectTypeList : POBJECT_TYPE_LIST,
    ObjectTypeListLength : CULong,
    GenericMapping : PGENERIC_MAPPING,
    ObjectCreation : Int,
    GrantedAccess : LPDWORD,
    AccessStatus : LPBOOL,
    pfGenerateOnClose : LPBOOL) Int;

external AccessCheckByTypeResultListAndAuditAlarmA(
    SubsystemName : LPCSTR,
    HandleId : LPVOID,
    ObjectTypeName : LPCSTR,
    ObjectName : LPCSTR,
    SecurityDescriptor : PSECURITY_DESCRIPTOR,
    PrincipalSelfSid : PSID,
    DesiredAccess : CULong,
    AuditType : AUDIT_EVENT_TYPE,
    Flags : CULong,
    ObjectTypeList : POBJECT_TYPE_LIST,
    ObjectTypeListLength : CULong,
    GenericMapping : PGENERIC_MAPPING,
    ObjectCreation : Int,
    GrantedAccess : LPDWORD,
    AccessStatusList : LPDWORD,
    pfGenerateOnClose : LPBOOL) Int;

external AccessCheckByTypeResultListAndAuditAlarmW(
    SubsystemName : LPCWSTR,
    HandleId : LPVOID,
    ObjectTypeName : LPCWSTR,
    ObjectName : LPCWSTR,
    SecurityDescriptor : PSECURITY_DESCRIPTOR,
    PrincipalSelfSid : PSID,
    DesiredAccess : CULong,
    AuditType : AUDIT_EVENT_TYPE,
    Flags : CULong,
    ObjectTypeList : POBJECT_TYPE_LIST,
    ObjectTypeListLength : CULong,
    GenericMapping : PGENERIC_MAPPING,
    ObjectCreation : Int,
    GrantedAccess : LPDWORD,
    AccessStatusList : LPDWORD,
    pfGenerateOnClose : LPBOOL) Int;

external AccessCheckByTypeResultListAndAuditAlarmByHandleA(
    SubsystemName : LPCSTR,
    HandleId : LPVOID,
    ClientToken : HANDLE,
    ObjectTypeName : LPCSTR,
    ObjectName : LPCSTR,
    SecurityDescriptor : PSECURITY_DESCRIPTOR,
    PrincipalSelfSid : PSID,
    DesiredAccess : CULong,
    AuditType : AUDIT_EVENT_TYPE,
    Flags : CULong,
    ObjectTypeList : POBJECT_TYPE_LIST,
    ObjectTypeListLength : CULong,
    GenericMapping : PGENERIC_MAPPING,
    ObjectCreation : Int,
    GrantedAccess : LPDWORD,
    AccessStatusList : LPDWORD,
    pfGenerateOnClose : LPBOOL) Int;

external AccessCheckByTypeResultListAndAuditAlarmByHandleW(
    SubsystemName : LPCWSTR,
    HandleId : LPVOID,
    ClientToken : HANDLE,
    ObjectTypeName : LPCWSTR,
    ObjectName : LPCWSTR,
    SecurityDescriptor : PSECURITY_DESCRIPTOR,
    PrincipalSelfSid : PSID,
    DesiredAccess : CULong,
    AuditType : AUDIT_EVENT_TYPE,
    Flags : CULong,
    ObjectTypeList : POBJECT_TYPE_LIST,
    ObjectTypeListLength : CULong,
    GenericMapping : PGENERIC_MAPPING,
    ObjectCreation : Int,
    GrantedAccess : LPDWORD,
    AccessStatusList : LPDWORD,
    pfGenerateOnClose : LPBOOL) Int;

external ObjectOpenAuditAlarmA(
    SubsystemName : LPCSTR,
    HandleId : LPVOID,
    ObjectTypeName : LPSTR,
    ObjectName : LPSTR,
    pSecurityDescriptor : PSECURITY_DESCRIPTOR,
    ClientToken : HANDLE,
    DesiredAccess : CULong,
    GrantedAccess : CULong,
    Privileges : PPRIVILEGE_SET,
    ObjectCreation : Int,
    AccessGranted : Int,
    GenerateOnClose : LPBOOL) Int;

external ObjectOpenAuditAlarmW(
    SubsystemName : LPCWSTR,
    HandleId : LPVOID,
    ObjectTypeName : LPWSTR,
    ObjectName : LPWSTR,
    pSecurityDescriptor : PSECURITY_DESCRIPTOR,
    ClientToken : HANDLE,
    DesiredAccess : CULong,
    GrantedAccess : CULong,
    Privileges : PPRIVILEGE_SET,
    ObjectCreation : Int,
    AccessGranted : Int,
    GenerateOnClose : LPBOOL) Int;

external ObjectPrivilegeAuditAlarmA(
    SubsystemName : LPCSTR,
    HandleId : LPVOID,
    ClientToken : HANDLE,
    DesiredAccess : CULong,
    Privileges : PPRIVILEGE_SET,
    AccessGranted : Int) Int;

external ObjectPrivilegeAuditAlarmW(
    SubsystemName : LPCWSTR,
    HandleId : LPVOID,
    ClientToken : HANDLE,
    DesiredAccess : CULong,
    Privileges : PPRIVILEGE_SET,
    AccessGranted : Int) Int;

external ObjectCloseAuditAlarmA(
    SubsystemName : LPCSTR,
    HandleId : LPVOID,
    GenerateOnClose : Int) Int;

external ObjectCloseAuditAlarmW(
    SubsystemName : LPCWSTR,
    HandleId : LPVOID,
    GenerateOnClose : Int) Int;

external ObjectDeleteAuditAlarmA(
    SubsystemName : LPCSTR,
    HandleId : LPVOID,
    GenerateOnClose : Int) Int;

external ObjectDeleteAuditAlarmW(
    SubsystemName : LPCWSTR,
    HandleId : LPVOID,
    GenerateOnClose : Int) Int;

external PrivilegedServiceAuditAlarmA(
    SubsystemName : LPCSTR,
    ServiceName : LPCSTR,
    ClientToken : HANDLE,
    Privileges : PPRIVILEGE_SET,
    AccessGranted : Int) Int;

external PrivilegedServiceAuditAlarmW(
    SubsystemName : LPCWSTR,
    ServiceName : LPCWSTR,
    ClientToken : HANDLE,
    Privileges : PPRIVILEGE_SET,
    AccessGranted : Int) Int;

external IsWellKnownSid(
    pSid : PSID,
    WellKnownSidType : WELL_KNOWN_SID_TYPE) Int;

external CreateWellKnownSid(
    WellKnownSidType : WELL_KNOWN_SID_TYPE,
    DomainSid : PSID,
    pSid : PSID,
    cbSid : Pointer[CULong]) Int;

external EqualDomainSid(
    pSid1 : PSID,
    pSid2 : PSID,
    pfEqual : Pointer[Int]) Int;

external GetWindowsAccountDomainSid(
    pSid : PSID,
    pDomainSid : PSID,
    cbDomainSid : Pointer[CULong]) Int;

external IsValidSid(
    pSid : PSID) Int;

external EqualSid(
    pSid1 : PSID,
    pSid2 : PSID) Int;

external EqualPrefixSid(
    pSid1 : PSID,
    pSid2 : PSID) Int;

external GetSidLengthRequired(
    nSubAuthorityCount : CUChar) CULong;

external AllocateAndInitializeSid(
    pIdentifierAuthority : PSID_IDENTIFIER_AUTHORITY,
    nSubAuthorityCount : CUChar,
    nSubAuthority0 : CULong,
    nSubAuthority1 : CULong,
    nSubAuthority2 : CULong,
    nSubAuthority3 : CULong,
    nSubAuthority4 : CULong,
    nSubAuthority5 : CULong,
    nSubAuthority6 : CULong,
    nSubAuthority7 : CULong,
    pSid : Pointer[PSID]) Int;

external FreeSid(
    pSid : PSID) PVOID;

external InitializeSid(
    Sid : PSID,
    pIdentifierAuthority : PSID_IDENTIFIER_AUTHORITY,
    nSubAuthorityCount : CUChar) Int;

external GetSidIdentifierAuthority(
    pSid : PSID) PSID_IDENTIFIER_AUTHORITY;

external GetSidSubAuthority(
    pSid : PSID,
    nSubAuthority : CULong) PDWORD;

external GetSidSubAuthorityCount(
    pSid : PSID) PUCHAR;

external GetLengthSid(
    pSid : PSID) CULong;

external CopySid(
    nDestinationSidLength : CULong,
    pDestinationSid : PSID,
    pSourceSid : PSID) Int;

external AreAllAccessesGranted(
    GrantedAccess : CULong,
    DesiredAccess : CULong) Int;

external AreAnyAccessesGranted(
    GrantedAccess : CULong,
    DesiredAccess : CULong) Int;

external MapGenericMask(
    AccessMask : PDWORD,
    GenericMapping : PGENERIC_MAPPING);

external IsValidAcl(
    pAcl : PACL) Int;

external InitializeAcl(
    pAcl : PACL,
    nAclLength : CULong,
    dwAclRevision : CULong) Int;

external GetAclInformation(
    pAcl : PACL,
    pAclInformation : LPVOID,
    nAclInformationLength : CULong,
    dwAclInformationClass : ACL_INFORMATION_CLASS) Int;

external SetAclInformation(
    pAcl : PACL,
    pAclInformation : LPVOID,
    nAclInformationLength : CULong,
    dwAclInformationClass : ACL_INFORMATION_CLASS) Int;

external AddAce(
    pAcl : PACL,
    dwAceRevision : CULong,
    dwStartingAceIndex : CULong,
    pAceList : LPVOID,
    nAceListLength : CULong) Int;

external DeleteAce(
    pAcl : PACL,
    dwAceIndex : CULong) Int;

external GetAce(
    pAcl : PACL,
    dwAceIndex : CULong,
    pAce : Pointer[LPVOID]) Int;

external AddAccessAllowedAce(
    pAcl : PACL,
    dwAceRevision : CULong,
    AccessMask : CULong,
    pSid : PSID) Int;

external AddAccessAllowedAceEx(
    pAcl : PACL,
    dwAceRevision : CULong,
    AceFlags : CULong,
    AccessMask : CULong,
    pSid : PSID) Int;

external AddAccessDeniedAce(
    pAcl : PACL,
    dwAceRevision : CULong,
    AccessMask : CULong,
    pSid : PSID) Int;

external AddAccessDeniedAceEx(
    pAcl : PACL,
    dwAceRevision : CULong,
    AceFlags : CULong,
    AccessMask : CULong,
    pSid : PSID) Int;

external AddAuditAccessAce(
    pAcl : PACL,
    dwAceRevision : CULong,
    dwAccessMask : CULong,
    pSid : PSID,
    bAuditSuccess : Int,
    bAuditFailure : Int) Int;

external AddAuditAccessAceEx(
    pAcl : PACL,
    dwAceRevision : CULong,
    AceFlags : CULong,
    dwAccessMask : CULong,
    pSid : PSID,
    bAuditSuccess : Int,
    bAuditFailure : Int) Int;

external AddAccessAllowedObjectAce(
    pAcl : PACL,
    dwAceRevision : CULong,
    AceFlags : CULong,
    AccessMask : CULong,
    ObjectTypeGuid : Pointer[GUID],
    InheritedObjectTypeGuid : Pointer[GUID],
    pSid : PSID) Int;

external AddAccessDeniedObjectAce(
    pAcl : PACL,
    dwAceRevision : CULong,
    AceFlags : CULong,
    AccessMask : CULong,
    ObjectTypeGuid : Pointer[GUID],
    InheritedObjectTypeGuid : Pointer[GUID],
    pSid : PSID) Int;

external AddAuditAccessObjectAce(
    pAcl : PACL,
    dwAceRevision : CULong,
    AceFlags : CULong,
    AccessMask : CULong,
    ObjectTypeGuid : Pointer[GUID],
    InheritedObjectTypeGuid : Pointer[GUID],
    pSid : PSID,
    bAuditSuccess : Int,
    bAuditFailure : Int) Int;

external FindFirstFreeAce(
    pAcl : PACL,
    pAce : Pointer[LPVOID]) Int;

external InitializeSecurityDescriptor(
    pSecurityDescriptor : PSECURITY_DESCRIPTOR,
    dwRevision : CULong) Int;

external IsValidSecurityDescriptor(
    pSecurityDescriptor : PSECURITY_DESCRIPTOR) Int;

external GetSecurityDescriptorLength(
    pSecurityDescriptor : PSECURITY_DESCRIPTOR) CULong;

external GetSecurityDescriptorControl(
    pSecurityDescriptor : PSECURITY_DESCRIPTOR,
    pControl : PSECURITY_DESCRIPTOR_CONTROL,
    lpdwRevision : LPDWORD) Int;

external SetSecurityDescriptorControl(
    pSecurityDescriptor : PSECURITY_DESCRIPTOR,
    ControlBitsOfInterest : UShort,
    ControlBitsToSet : UShort) Int;

external SetSecurityDescriptorDacl(
    pSecurityDescriptor : PSECURITY_DESCRIPTOR,
    bDaclPresent : Int,
    pDacl : PACL,
    bDaclDefaulted : Int) Int;

external GetSecurityDescriptorDacl(
    pSecurityDescriptor : PSECURITY_DESCRIPTOR,
    lpbDaclPresent : LPBOOL,
    pDacl : Pointer[PACL],
    lpbDaclDefaulted : LPBOOL) Int;

external SetSecurityDescriptorSacl(
    pSecurityDescriptor : PSECURITY_DESCRIPTOR,
    bSaclPresent : Int,
    pSacl : PACL,
    bSaclDefaulted : Int) Int;

external GetSecurityDescriptorSacl(
    pSecurityDescriptor : PSECURITY_DESCRIPTOR,
    lpbSaclPresent : LPBOOL,
    pSacl : Pointer[PACL],
    lpbSaclDefaulted : LPBOOL) Int;

external SetSecurityDescriptorOwner(
    pSecurityDescriptor : PSECURITY_DESCRIPTOR,
    pOwner : PSID,
    bOwnerDefaulted : Int) Int;

external GetSecurityDescriptorOwner(
    pSecurityDescriptor : PSECURITY_DESCRIPTOR,
    pOwner : Pointer[PSID],
    lpbOwnerDefaulted : LPBOOL) Int;

external SetSecurityDescriptorGroup(
    pSecurityDescriptor : PSECURITY_DESCRIPTOR,
    pGroup : PSID,
    bGroupDefaulted : Int) Int;

external GetSecurityDescriptorGroup(
    pSecurityDescriptor : PSECURITY_DESCRIPTOR,
    pGroup : Pointer[PSID],
    lpbGroupDefaulted : LPBOOL) Int;

external SetSecurityDescriptorRMControl(
    SecurityDescriptor : PSECURITY_DESCRIPTOR,
    RMControl : PUCHAR) CULong;

external GetSecurityDescriptorRMControl(
    SecurityDescriptor : PSECURITY_DESCRIPTOR,
    RMControl : PUCHAR) CULong;

external CreatePrivateObjectSecurity(
    ParentDescriptor : PSECURITY_DESCRIPTOR,
    CreatorDescriptor : PSECURITY_DESCRIPTOR,
    NewDescriptor : Pointer[PSECURITY_DESCRIPTOR],
    IsDirectoryObject : Int,
    Token : HANDLE,
    GenericMapping : PGENERIC_MAPPING) Int;

external ConvertToAutoInheritPrivateObjectSecurity(
    ParentDescriptor : PSECURITY_DESCRIPTOR,
    CurrentSecurityDescriptor : PSECURITY_DESCRIPTOR,
    NewSecurityDescriptor : Pointer[PSECURITY_DESCRIPTOR],
    ObjectType : Pointer[GUID],
    IsDirectoryObject : CUChar,
    GenericMapping : PGENERIC_MAPPING) Int;

external CreatePrivateObjectSecurityEx(
    ParentDescriptor : PSECURITY_DESCRIPTOR,
    CreatorDescriptor : PSECURITY_DESCRIPTOR,
    NewDescriptor : Pointer[PSECURITY_DESCRIPTOR],
    ObjectType : Pointer[GUID],
    IsContainerObject : Int,
    AutoInheritFlags : CULong,
    Token : HANDLE,
    GenericMapping : PGENERIC_MAPPING) Int;

external CreatePrivateObjectSecurityWithMultipleInheritance(
    ParentDescriptor : PSECURITY_DESCRIPTOR,
    CreatorDescriptor : PSECURITY_DESCRIPTOR,
    NewDescriptor : Pointer[PSECURITY_DESCRIPTOR],
    ObjectTypes : Pointer[Pointer[GUID]],
    GuidCount : CULong,
    IsContainerObject : Int,
    AutoInheritFlags : CULong,
    Token : HANDLE,
    GenericMapping : PGENERIC_MAPPING) Int;

external SetPrivateObjectSecurity(
    SecurityInformation : CULong,
    ModificationDescriptor : PSECURITY_DESCRIPTOR,
    ObjectsSecurityDescriptor : Pointer[PSECURITY_DESCRIPTOR],
    GenericMapping : PGENERIC_MAPPING,
    Token : HANDLE) Int;

external SetPrivateObjectSecurityEx(
    SecurityInformation : CULong,
    ModificationDescriptor : PSECURITY_DESCRIPTOR,
    ObjectsSecurityDescriptor : Pointer[PSECURITY_DESCRIPTOR],
    AutoInheritFlags : CULong,
    GenericMapping : PGENERIC_MAPPING,
    Token : HANDLE) Int;

external GetPrivateObjectSecurity(
    ObjectDescriptor : PSECURITY_DESCRIPTOR,
    SecurityInformation : CULong,
    ResultantDescriptor : PSECURITY_DESCRIPTOR,
    DescriptorLength : CULong,
    ReturnLength : PDWORD) Int;

external DestroyPrivateObjectSecurity(
    ObjectDescriptor : Pointer[PSECURITY_DESCRIPTOR]) Int;

external MakeSelfRelativeSD(
    pAbsoluteSecurityDescriptor : PSECURITY_DESCRIPTOR,
    pSelfRelativeSecurityDescriptor : PSECURITY_DESCRIPTOR,
    lpdwBufferLength : LPDWORD) Int;

external MakeAbsoluteSD(
    pSelfRelativeSecurityDescriptor : PSECURITY_DESCRIPTOR,
    pAbsoluteSecurityDescriptor : PSECURITY_DESCRIPTOR,
    lpdwAbsoluteSecurityDescriptorSize : LPDWORD,
    pDacl : PACL,
    lpdwDaclSize : LPDWORD,
    pSacl : PACL,
    lpdwSaclSize : LPDWORD,
    pOwner : PSID,
    lpdwOwnerSize : LPDWORD,
    pPrimaryGroup : PSID,
    lpdwPrimaryGroupSize : LPDWORD) Int;

external MakeAbsoluteSD2(
    pSelfRelativeSecurityDescriptor : PSECURITY_DESCRIPTOR,
    lpdwBufferSize : LPDWORD) Int;

external SetFileSecurityA(
    lpFileName : LPCSTR,
    SecurityInformation : CULong,
    pSecurityDescriptor : PSECURITY_DESCRIPTOR) Int;

external SetFileSecurityW(
    lpFileName : LPCWSTR,
    SecurityInformation : CULong,
    pSecurityDescriptor : PSECURITY_DESCRIPTOR) Int;

external GetFileSecurityA(
    lpFileName : LPCSTR,
    RequestedInformation : CULong,
    pSecurityDescriptor : PSECURITY_DESCRIPTOR,
    nLength : CULong,
    lpnLengthNeeded : LPDWORD) Int;

external GetFileSecurityW(
    lpFileName : LPCWSTR,
    RequestedInformation : CULong,
    pSecurityDescriptor : PSECURITY_DESCRIPTOR,
    nLength : CULong,
    lpnLengthNeeded : LPDWORD) Int;

external SetKernelObjectSecurity(
    Handle : HANDLE,
    SecurityInformation : CULong,
    SecurityDescriptor : PSECURITY_DESCRIPTOR) Int;

external FindFirstChangeNotificationA(
    lpPathName : LPCSTR,
    bWatchSubtree : Int,
    dwNotifyFilter : CULong) HANDLE;

external FindFirstChangeNotificationW(
    lpPathName : LPCWSTR,
    bWatchSubtree : Int,
    dwNotifyFilter : CULong) HANDLE;

external FindNextChangeNotification(
    hChangeHandle : HANDLE) Int;

external FindCloseChangeNotification(
    hChangeHandle : HANDLE) Int;

external ReadDirectoryChangesW(
    hDirectory : HANDLE,
    lpBuffer : LPVOID,
    nBufferLength : CULong,
    bWatchSubtree : Int,
    dwNotifyFilter : CULong,
    lpBytesReturned : LPDWORD,
    lpOverlapped : LPOVERLAPPED,
    lpCompletionRoutine : LPOVERLAPPED_COMPLETION_ROUTINE) Int;

external VirtualLock(
    lpAddress : LPVOID,
    dwSize : UInt64) Int;

external VirtualUnlock(
    lpAddress : LPVOID,
    dwSize : UInt64) Int;

external MapViewOfFileEx(
    hFileMappingObject : HANDLE,
    dwDesiredAccess : CULong,
    dwFileOffsetHigh : CULong,
    dwFileOffsetLow : CULong,
    dwNumberOfBytesToMap : UInt64,
    lpBaseAddress : LPVOID) LPVOID;

external SetPriorityClass(
    hProcess : HANDLE,
    dwPriorityClass : CULong) Int;

external GetPriorityClass(
    hProcess : HANDLE) CULong;

external IsBadReadPtr(
    lp : RawPointer,
    ucb : UInt64) Int;

external IsBadWritePtr(
    lp : LPVOID,
    ucb : UInt64) Int;

external IsBadHugeReadPtr(
    lp : RawPointer,
    ucb : UInt64) Int;

external IsBadHugeWritePtr(
    lp : LPVOID,
    ucb : UInt64) Int;

external IsBadCodePtr(
    lpfn : FARPROC) Int;

external IsBadStringPtrA(
    lpsz : LPCSTR,
    ucchMax : UInt64) Int;

external IsBadStringPtrW(
    lpsz : LPCWSTR,
    ucchMax : UInt64) Int;

external LookupAccountSidA(
    lpSystemName : LPCSTR,
    Sid : PSID,
    Name : LPSTR,
    cchName : LPDWORD,
    ReferencedDomainName : LPSTR,
    cchReferencedDomainName : LPDWORD,
    peUse : PSID_NAME_USE) Int;

external LookupAccountSidW(
    lpSystemName : LPCWSTR,
    Sid : PSID,
    Name : LPWSTR,
    cchName : LPDWORD,
    ReferencedDomainName : LPWSTR,
    cchReferencedDomainName : LPDWORD,
    peUse : PSID_NAME_USE) Int;

external LookupAccountNameA(
    lpSystemName : LPCSTR,
    lpAccountName : LPCSTR,
    Sid : PSID,
    cbSid : LPDWORD,
    ReferencedDomainName : LPSTR,
    cchReferencedDomainName : LPDWORD,
    peUse : PSID_NAME_USE) Int;

external LookupAccountNameW(
    lpSystemName : LPCWSTR,
    lpAccountName : LPCWSTR,
    Sid : PSID,
    cbSid : LPDWORD,
    ReferencedDomainName : LPWSTR,
    cchReferencedDomainName : LPDWORD,
    peUse : PSID_NAME_USE) Int;

external LookupPrivilegeValueA(
    lpSystemName : LPCSTR,
    lpName : LPCSTR,
    lpLuid : PLUID) Int;

external LookupPrivilegeValueW(
    lpSystemName : LPCWSTR,
    lpName : LPCWSTR,
    lpLuid : PLUID) Int;

external LookupPrivilegeNameA(
    lpSystemName : LPCSTR,
    lpLuid : PLUID,
    lpName : LPSTR,
    cchName : LPDWORD) Int;

external LookupPrivilegeNameW(
    lpSystemName : LPCWSTR,
    lpLuid : PLUID,
    lpName : LPWSTR,
    cchName : LPDWORD) Int;

external LookupPrivilegeDisplayNameA(
    lpSystemName : LPCSTR,
    lpName : LPCSTR,
    lpDisplayName : LPSTR,
    cchDisplayName : LPDWORD,
    lpLanguageId : LPDWORD) Int;

external LookupPrivilegeDisplayNameW(
    lpSystemName : LPCWSTR,
    lpName : LPCWSTR,
    lpDisplayName : LPWSTR,
    cchDisplayName : LPDWORD,
    lpLanguageId : LPDWORD) Int;

external AllocateLocallyUniqueId(
    Luid : PLUID) Int;

external BuildCommDCBA(
    lpDef : LPCSTR,
    lpDCB : LPDCB) Int;

external BuildCommDCBW(
    lpDef : LPCWSTR,
    lpDCB : LPDCB) Int;

external BuildCommDCBAndTimeoutsA(
    lpDef : LPCSTR,
    lpDCB : LPDCB,
    lpCommTimeouts : LPCOMMTIMEOUTS) Int;

external BuildCommDCBAndTimeoutsW(
    lpDef : LPCWSTR,
    lpDCB : LPDCB,
    lpCommTimeouts : LPCOMMTIMEOUTS) Int;

external CommConfigDialogA(
    lpszName : LPCSTR,
    hWnd : HWND,
    lpCC : LPCOMMCONFIG) Int;

external CommConfigDialogW(
    lpszName : LPCWSTR,
    hWnd : HWND,
    lpCC : LPCOMMCONFIG) Int;

external GetDefaultCommConfigA(
    lpszName : LPCSTR,
    lpCC : LPCOMMCONFIG,
    lpdwSize : LPDWORD) Int;

external GetDefaultCommConfigW(
    lpszName : LPCWSTR,
    lpCC : LPCOMMCONFIG,
    lpdwSize : LPDWORD) Int;

external SetDefaultCommConfigA(
    lpszName : LPCSTR,
    lpCC : LPCOMMCONFIG,
    dwSize : CULong) Int;

external SetDefaultCommConfigW(
    lpszName : LPCWSTR,
    lpCC : LPCOMMCONFIG,
    dwSize : CULong) Int;

external GetComputerNameA(
    lpBuffer : LPSTR,
    nSize : LPDWORD) Int;

external GetComputerNameW(
    lpBuffer : LPWSTR,
    nSize : LPDWORD) Int;

external SetComputerNameA(
    lpComputerName : LPCSTR) Int;

external SetComputerNameW(
    lpComputerName : LPCWSTR) Int;

alias ComputerNameNetBIOS = 0;
alias ComputerNameDnsHostname = 1;
alias ComputerNameDnsDomain = 2;
alias ComputerNameDnsFullyQualified = 3;
alias ComputerNamePhysicalNetBIOS = 4;
alias ComputerNamePhysicalDnsHostname = 5;
alias ComputerNamePhysicalDnsDomain = 6;
alias ComputerNamePhysicalDnsFullyQualified = 7;
alias ComputerNameMax = 8;

alias COMPUTER_NAME_FORMAT = Int;

external GetComputerNameExA(
    NameType : COMPUTER_NAME_FORMAT,
    lpBuffer : LPSTR,
    nSize : LPDWORD) Int;

external GetComputerNameExW(
    NameType : COMPUTER_NAME_FORMAT,
    lpBuffer : LPWSTR,
    nSize : LPDWORD) Int;

external SetComputerNameExA(
    NameType : COMPUTER_NAME_FORMAT,
    lpBuffer : LPCSTR) Int;

external SetComputerNameExW(
    NameType : COMPUTER_NAME_FORMAT,
    lpBuffer : LPCWSTR) Int;

external DnsHostnameToComputerNameA(
    Hostname : LPCSTR,
    ComputerName : LPSTR,
    nSize : LPDWORD) Int;

external DnsHostnameToComputerNameW(
    Hostname : LPCWSTR,
    ComputerName : LPWSTR,
    nSize : LPDWORD) Int;

external GetUserNameA(
    lpBuffer : LPSTR,
    pcbBuffer : LPDWORD) Int;

external GetUserNameW(
    lpBuffer : LPWSTR,
    pcbBuffer : LPDWORD) Int;

external LogonUserA(
    lpszUsername : LPCSTR,
    lpszDomain : LPCSTR,
    lpszPassword : LPCSTR,
    dwLogonType : CULong,
    dwLogonProvider : CULong,
    phToken : PHANDLE) Int;

external LogonUserW(
    lpszUsername : LPCWSTR,
    lpszDomain : LPCWSTR,
    lpszPassword : LPCWSTR,
    dwLogonType : CULong,
    dwLogonProvider : CULong,
    phToken : PHANDLE) Int;

external LogonUserExA(
    lpszUsername : LPCSTR,
    lpszDomain : LPCSTR,
    lpszPassword : LPCSTR,
    dwLogonType : CULong,
    dwLogonProvider : CULong,
    phToken : PHANDLE,
    ppLogonSid : Pointer[PSID],
    ppProfileBuffer : Pointer[PVOID],
    pdwProfileLength : LPDWORD,
    pQuotaLimits : PQUOTA_LIMITS) Int;

external LogonUserExW(
    lpszUsername : LPCWSTR,
    lpszDomain : LPCWSTR,
    lpszPassword : LPCWSTR,
    dwLogonType : CULong,
    dwLogonProvider : CULong,
    phToken : PHANDLE,
    ppLogonSid : Pointer[PSID],
    ppProfileBuffer : Pointer[PVOID],
    pdwProfileLength : LPDWORD,
    pQuotaLimits : PQUOTA_LIMITS) Int;

external ImpersonateLoggedOnUser(
    hToken : HANDLE) Int;

external CreateProcessAsUserA(
    hToken : HANDLE,
    lpApplicationName : LPCSTR,
    lpCommandLine : LPSTR,
    lpProcessAttributes : LPSECURITY_ATTRIBUTES,
    lpThreadAttributes : LPSECURITY_ATTRIBUTES,
    bInheritHandles : Int,
    dwCreationFlags : CULong,
    lpEnvironment : LPVOID,
    lpCurrentDirectory : LPCSTR,
    lpStartupInfo : LPSTARTUPINFOA,
    lpProcessInformation : LPPROCESS_INFORMATION) Int;

external CreateProcessAsUserW(
    hToken : HANDLE,
    lpApplicationName : LPCWSTR,
    lpCommandLine : LPWSTR,
    lpProcessAttributes : LPSECURITY_ATTRIBUTES,
    lpThreadAttributes : LPSECURITY_ATTRIBUTES,
    bInheritHandles : Int,
    dwCreationFlags : CULong,
    lpEnvironment : LPVOID,
    lpCurrentDirectory : LPCWSTR,
    lpStartupInfo : LPSTARTUPINFOW,
    lpProcessInformation : LPPROCESS_INFORMATION) Int;

external CreateProcessWithLogonW(
    lpUsername : LPCWSTR,
    lpDomain : LPCWSTR,
    lpPassword : LPCWSTR,
    dwLogonFlags : CULong,
    lpApplicationName : LPCWSTR,
    lpCommandLine : LPWSTR,
    dwCreationFlags : CULong,
    lpEnvironment : LPVOID,
    lpCurrentDirectory : LPCWSTR,
    lpStartupInfo : LPSTARTUPINFOW,
    lpProcessInformation : LPPROCESS_INFORMATION) Int;

external CreateProcessWithTokenW(
    hToken : HANDLE,
    dwLogonFlags : CULong,
    lpApplicationName : LPCWSTR,
    lpCommandLine : LPWSTR,
    dwCreationFlags : CULong,
    lpEnvironment : LPVOID,
    lpCurrentDirectory : LPCWSTR,
    lpStartupInfo : LPSTARTUPINFOW,
    lpProcessInformation : LPPROCESS_INFORMATION) Int;

external ImpersonateAnonymousToken(
    ThreadHandle : HANDLE) Int;

external DuplicateTokenEx(
    hExistingToken : HANDLE,
    dwDesiredAccess : CULong,
    lpTokenAttributes : LPSECURITY_ATTRIBUTES,
    ImpersonationLevel : SECURITY_IMPERSONATION_LEVEL,
    TokenType : TOKEN_TYPE,
    phNewToken : PHANDLE) Int;

external CreateRestrictedToken(
    ExistingTokenHandle : HANDLE,
    Flags : CULong,
    DisableSidCount : CULong,
    SidsToDisable : PSID_AND_ATTRIBUTES,
    DeletePrivilegeCount : CULong,
    PrivilegesToDelete : PLUID_AND_ATTRIBUTES,
    RestrictedSidCount : CULong,
    SidsToRestrict : PSID_AND_ATTRIBUTES,
    NewTokenHandle : PHANDLE) Int;

external IsTokenRestricted(
    TokenHandle : HANDLE) Int;

external IsTokenUntrusted(
    TokenHandle : HANDLE) Int;

external CheckTokenMembership(
    TokenHandle : HANDLE,
    SidToCheck : PSID,
    IsMember : PBOOL) Int;

alias WAITORTIMERCALLBACK = WAITORTIMERCALLBACKFUNC;

external RegisterWaitForSingleObject(
    phNewWaitObject : PHANDLE,
    hObject : HANDLE,
    Callback : WAITORTIMERCALLBACK,
    Context : PVOID,
    dwMilliseconds : CULong,
    dwFlags : CULong) Int;

external RegisterWaitForSingleObjectEx(
    hObject : HANDLE,
    Callback : WAITORTIMERCALLBACK,
    Context : PVOID,
    dwMilliseconds : CULong,
    dwFlags : CULong) HANDLE;

external UnregisterWait(
    WaitHandle : HANDLE) Int;

external UnregisterWaitEx(
    WaitHandle : HANDLE,
    CompletionEvent : HANDLE) Int;

external QueueUserWorkItem(
    Function : LPTHREAD_START_ROUTINE,
    Context : PVOID,
    Flags : CULong) Int;

external BindIoCompletionCallback(
    FileHandle : HANDLE,
    Function : LPOVERLAPPED_COMPLETION_ROUTINE,
    Flags : CULong) Int;

external CreateTimerQueue() HANDLE;

external CreateTimerQueueTimer(
    phNewTimer : PHANDLE,
    TimerQueue : HANDLE,
    Callback : WAITORTIMERCALLBACK,
    Parameter : PVOID,
    DueTime : CULong,
    Period : CULong,
    Flags : CULong) Int;

external ChangeTimerQueueTimer(
    TimerQueue : HANDLE,
    Timer : HANDLE,
    DueTime : CULong,
    Period : CULong) Int;

external DeleteTimerQueueTimer(
    TimerQueue : HANDLE,
    Timer : HANDLE,
    CompletionEvent : HANDLE) Int;

external DeleteTimerQueueEx(
    TimerQueue : HANDLE,
    CompletionEvent : HANDLE) Int;

external SetTimerQueueTimer(
    TimerQueue : HANDLE,
    Callback : WAITORTIMERCALLBACK,
    Parameter : PVOID,
    DueTime : CULong,
    Period : CULong,
    PreferIo : Int) HANDLE;

external CancelTimerQueueTimer(
    TimerQueue : HANDLE,
    Timer : HANDLE) Int;

external DeleteTimerQueue(
    TimerQueue : HANDLE) Int;

record Struct_tagHW_PROFILE_INFOA (
    dwDockInfo : CULong,
    szHwProfileGuid : Array[CChar,39],
    szHwProfileName : Array[CChar,80],
);

alias HW_PROFILE_INFOA = Struct_tagHW_PROFILE_INFOA;

alias LPHW_PROFILE_INFOA = Pointer[Struct_tagHW_PROFILE_INFOA];

record Struct_tagHW_PROFILE_INFOW (
    dwDockInfo : CULong,
    szHwProfileGuid : Array[UShort,39],
    szHwProfileName : Array[UShort,80],
);

alias HW_PROFILE_INFOW = Struct_tagHW_PROFILE_INFOW;

alias LPHW_PROFILE_INFOW = Pointer[Struct_tagHW_PROFILE_INFOW];

alias HW_PROFILE_INFO = HW_PROFILE_INFOA;

alias LPHW_PROFILE_INFO = LPHW_PROFILE_INFOA;

external GetCurrentHwProfileA(
    lpHwProfileInfo : LPHW_PROFILE_INFOA) Int;

external GetCurrentHwProfileW(
    lpHwProfileInfo : LPHW_PROFILE_INFOW) Int;

external QueryPerformanceCounter(
    lpPerformanceCount : Pointer[LARGE_INTEGER]) Int;

external QueryPerformanceFrequency(
    lpFrequency : Pointer[LARGE_INTEGER]) Int;

external GetVersionExA(
    lpVersionInformation : LPOSVERSIONINFOA) Int;

external GetVersionExW(
    lpVersionInformation : LPOSVERSIONINFOW) Int;

external VerifyVersionInfoA(
    lpVersionInformation : LPOSVERSIONINFOEXA,
    dwTypeMask : CULong,
    dwlConditionMask : UInt64) Int;

external VerifyVersionInfoW(
    lpVersionInformation : LPOSVERSIONINFOEXW,
    dwTypeMask : CULong,
    dwlConditionMask : UInt64) Int;

record Struct__SYSTEM_POWER_STATUS (
    ACLineStatus : CUChar,
    BatteryFlag : CUChar,
    BatteryLifePercent : CUChar,
    Reserved1 : CUChar,
    BatteryLifeTime : CULong,
    BatteryFullLifeTime : CULong,
);

alias SYSTEM_POWER_STATUS = Struct__SYSTEM_POWER_STATUS;

alias LPSYSTEM_POWER_STATUS = Pointer[Struct__SYSTEM_POWER_STATUS];

external GetSystemPowerStatus(
    lpSystemPowerStatus : LPSYSTEM_POWER_STATUS) Int;

external SetSystemPowerState(
    fSuspend : Int,
    fForce : Int) Int;

external AllocateUserPhysicalPages(
    hProcess : HANDLE,
    NumberOfPages : PULONG_PTR,
    PageArray : PULONG_PTR) Int;

external FreeUserPhysicalPages(
    hProcess : HANDLE,
    NumberOfPages : PULONG_PTR,
    PageArray : PULONG_PTR) Int;

external MapUserPhysicalPages(
    VirtualAddress : PVOID,
    NumberOfPages : UInt64,
    PageArray : PULONG_PTR) Int;

external MapUserPhysicalPagesScatter(
    VirtualAddresses : Pointer[PVOID],
    NumberOfPages : UInt64,
    PageArray : PULONG_PTR) Int;

external CreateJobObjectA(
    lpJobAttributes : LPSECURITY_ATTRIBUTES,
    lpName : LPCSTR) HANDLE;

external CreateJobObjectW(
    lpJobAttributes : LPSECURITY_ATTRIBUTES,
    lpName : LPCWSTR) HANDLE;

external OpenJobObjectA(
    dwDesiredAccess : CULong,
    bInheritHandle : Int,
    lpName : LPCSTR) HANDLE;

external OpenJobObjectW(
    dwDesiredAccess : CULong,
    bInheritHandle : Int,
    lpName : LPCWSTR) HANDLE;

external AssignProcessToJobObject(
    hJob : HANDLE,
    hProcess : HANDLE) Int;

external TerminateJobObject(
    hJob : HANDLE,
    uExitCode : UInt) Int;

external QueryInformationJobObject(
    hJob : HANDLE,
    JobObjectInformationClass : JOBOBJECTINFOCLASS,
    lpJobObjectInformation : LPVOID,
    cbJobObjectInformationLength : CULong,
    lpReturnLength : LPDWORD) Int;

external SetInformationJobObject(
    hJob : HANDLE,
    JobObjectInformationClass : JOBOBJECTINFOCLASS,
    lpJobObjectInformation : LPVOID,
    cbJobObjectInformationLength : CULong) Int;

external IsProcessInJob(
    ProcessHandle : HANDLE,
    JobHandle : HANDLE,
    Result : PBOOL) Int;

external CreateJobSet(
    NumJob : CULong,
    UserJobSet : PJOB_SET_ARRAY,
    Flags : CULong) Int;

external AddVectoredExceptionHandler(
    First : CULong,
    Handler : PVECTORED_EXCEPTION_HANDLER) PVOID;

external RemoveVectoredExceptionHandler(
    Handle : PVOID) CULong;

external AddVectoredContinueHandler(
    First : CULong,
    Handler : PVECTORED_EXCEPTION_HANDLER) PVOID;

external RemoveVectoredContinueHandler(
    Handle : PVOID) CULong;

external FindFirstVolumeA(
    lpszVolumeName : LPSTR,
    cchBufferLength : CULong) HANDLE;

external FindFirstVolumeW(
    lpszVolumeName : LPWSTR,
    cchBufferLength : CULong) HANDLE;

external FindNextVolumeA(
    hFindVolume : HANDLE,
    lpszVolumeName : LPSTR,
    cchBufferLength : CULong) Int;

external FindNextVolumeW(
    hFindVolume : HANDLE,
    lpszVolumeName : LPWSTR,
    cchBufferLength : CULong) Int;

external FindVolumeClose(
    hFindVolume : HANDLE) Int;

external FindFirstVolumeMountPointA(
    lpszRootPathName : LPCSTR,
    lpszVolumeMountPoint : LPSTR,
    cchBufferLength : CULong) HANDLE;

external FindFirstVolumeMountPointW(
    lpszRootPathName : LPCWSTR,
    lpszVolumeMountPoint : LPWSTR,
    cchBufferLength : CULong) HANDLE;

external FindNextVolumeMountPointA(
    hFindVolumeMountPoint : HANDLE,
    lpszVolumeMountPoint : LPSTR,
    cchBufferLength : CULong) Int;

external FindNextVolumeMountPointW(
    hFindVolumeMountPoint : HANDLE,
    lpszVolumeMountPoint : LPWSTR,
    cchBufferLength : CULong) Int;

external FindVolumeMountPointClose(
    hFindVolumeMountPoint : HANDLE) Int;

external SetVolumeMountPointA(
    lpszVolumeMountPoint : LPCSTR,
    lpszVolumeName : LPCSTR) Int;

external SetVolumeMountPointW(
    lpszVolumeMountPoint : LPCWSTR,
    lpszVolumeName : LPCWSTR) Int;

external DeleteVolumeMountPointA(
    lpszVolumeMountPoint : LPCSTR) Int;

external DeleteVolumeMountPointW(
    lpszVolumeMountPoint : LPCWSTR) Int;

external GetVolumeNameForVolumeMountPointA(
    lpszVolumeMountPoint : LPCSTR,
    lpszVolumeName : LPSTR,
    cchBufferLength : CULong) Int;

external GetVolumeNameForVolumeMountPointW(
    lpszVolumeMountPoint : LPCWSTR,
    lpszVolumeName : LPWSTR,
    cchBufferLength : CULong) Int;

external GetVolumePathNameA(
    lpszFileName : LPCSTR,
    lpszVolumePathName : LPSTR,
    cchBufferLength : CULong) Int;

external GetVolumePathNameW(
    lpszFileName : LPCWSTR,
    lpszVolumePathName : LPWSTR,
    cchBufferLength : CULong) Int;

external GetVolumePathNamesForVolumeNameA(
    lpszVolumeName : LPCSTR,
    lpszVolumePathNames : LPCH,
    cchBufferLength : CULong,
    lpcchReturnLength : PDWORD) Int;

external GetVolumePathNamesForVolumeNameW(
    lpszVolumeName : LPCWSTR,
    lpszVolumePathNames : LPWCH,
    cchBufferLength : CULong,
    lpcchReturnLength : PDWORD) Int;

record Struct_tagACTCTXA (
    cbSize : CULong,
    dwFlags : CULong,
    lpSource : LPCSTR,
    wProcessorArchitecture : UShort,
    wLangId : UShort,
    lpAssemblyDirectory : LPCSTR,
    lpResourceName : LPCSTR,
    lpApplicationName : LPCSTR,
    hModule : HMODULE,
);

alias ACTCTXA = Struct_tagACTCTXA;

alias PACTCTXA = Pointer[Struct_tagACTCTXA];

record Struct_tagACTCTXW (
    cbSize : CULong,
    dwFlags : CULong,
    lpSource : LPCWSTR,
    wProcessorArchitecture : UShort,
    wLangId : UShort,
    lpAssemblyDirectory : LPCWSTR,
    lpResourceName : LPCWSTR,
    lpApplicationName : LPCWSTR,
    hModule : HMODULE,
);

alias ACTCTXW = Struct_tagACTCTXW;

alias PACTCTXW = Pointer[Struct_tagACTCTXW];

alias PCACTCTXA = Pointer[ACTCTXA];

alias PCACTCTXW = Pointer[ACTCTXW];

alias ACTCTX = ACTCTXA;

alias PACTCTX = PACTCTXA;

alias PCACTCTX = PCACTCTXA;

external CreateActCtxA(
    pActCtx : PCACTCTXA) HANDLE;

external CreateActCtxW(
    pActCtx : PCACTCTXW) HANDLE;

external AddRefActCtx(
    hActCtx : HANDLE);

external ReleaseActCtx(
    hActCtx : HANDLE);

external ZombifyActCtx(
    hActCtx : HANDLE) Int;

external ActivateActCtx(
    hActCtx : HANDLE,
    lpCookie : Pointer[UInt64]) Int;

external DeactivateActCtx(
    dwFlags : CULong,
    ulCookie : UInt64) Int;

external GetCurrentActCtx(
    lphActCtx : Pointer[HANDLE]) Int;

record Struct_tagACTCTX_SECTION_KEYED_DATA_2600 (
    cbSize : CULong,
    ulDataFormatVersion : CULong,
    lpData : PVOID,
    ulLength : CULong,
    lpSectionGlobalData : PVOID,
    ulSectionGlobalDataLength : CULong,
    lpSectionBase : PVOID,
    ulSectionTotalLength : CULong,
    hActCtx : HANDLE,
    ulAssemblyRosterIndex : CULong,
);

alias ACTCTX_SECTION_KEYED_DATA_2600 = Struct_tagACTCTX_SECTION_KEYED_DATA_2600;

alias PACTCTX_SECTION_KEYED_DATA_2600 = Pointer[Struct_tagACTCTX_SECTION_KEYED_DATA_2600];

alias PCACTCTX_SECTION_KEYED_DATA_2600 = Pointer[ACTCTX_SECTION_KEYED_DATA_2600];

record Struct_tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA (
    lpInformation : PVOID,
    lpSectionBase : PVOID,
    ulSectionLength : CULong,
    lpSectionGlobalDataBase : PVOID,
    ulSectionGlobalDataLength : CULong,
);

alias ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = Struct_tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;

alias PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = Pointer[Struct_tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA];

alias PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = Pointer[ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA];

record Struct_tagACTCTX_SECTION_KEYED_DATA (
    cbSize : CULong,
    ulDataFormatVersion : CULong,
    lpData : PVOID,
    ulLength : CULong,
    lpSectionGlobalData : PVOID,
    ulSectionGlobalDataLength : CULong,
    lpSectionBase : PVOID,
    ulSectionTotalLength : CULong,
    hActCtx : HANDLE,
    ulAssemblyRosterIndex : CULong,
    ulFlags : CULong,
    AssemblyMetadata : ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA,
);

alias ACTCTX_SECTION_KEYED_DATA = Struct_tagACTCTX_SECTION_KEYED_DATA;

alias PACTCTX_SECTION_KEYED_DATA = Pointer[Struct_tagACTCTX_SECTION_KEYED_DATA];

alias PCACTCTX_SECTION_KEYED_DATA = Pointer[ACTCTX_SECTION_KEYED_DATA];

external FindActCtxSectionStringA(
    dwFlags : CULong,
    lpExtensionGuid : Pointer[GUID],
    ulSectionId : CULong,
    lpStringToFind : LPCSTR,
    ReturnedData : PACTCTX_SECTION_KEYED_DATA) Int;

external FindActCtxSectionStringW(
    dwFlags : CULong,
    lpExtensionGuid : Pointer[GUID],
    ulSectionId : CULong,
    lpStringToFind : LPCWSTR,
    ReturnedData : PACTCTX_SECTION_KEYED_DATA) Int;

external FindActCtxSectionGuid(
    dwFlags : CULong,
    lpExtensionGuid : Pointer[GUID],
    ulSectionId : CULong,
    lpGuidToFind : Pointer[GUID],
    ReturnedData : PACTCTX_SECTION_KEYED_DATA) Int;

record Struct__ACTIVATION_CONTEXT_BASIC_INFORMATION (
    hActCtx : HANDLE,
    dwFlags : CULong,
);

alias ACTIVATION_CONTEXT_BASIC_INFORMATION = Struct__ACTIVATION_CONTEXT_BASIC_INFORMATION;

alias PACTIVATION_CONTEXT_BASIC_INFORMATION = Pointer[Struct__ACTIVATION_CONTEXT_BASIC_INFORMATION];

alias PCACTIVATION_CONTEXT_BASIC_INFORMATION = Pointer[Struct__ACTIVATION_CONTEXT_BASIC_INFORMATION];

external QueryActCtxW(
    dwFlags : CULong,
    hActCtx : HANDLE,
    pvSubInstance : PVOID,
    ulInfoClass : CULong,
    pvBuffer : PVOID,
    cbBuffer : UInt64,
    pcbWrittenOrRequired : Pointer[UInt64]) Int;

alias PQUERYACTCTXW_FUNC = CCodePointer[(CULong,RawPointer,RawPointer,CULong,RawPointer,UInt64,Pointer[UInt64]),(Int)];

external ProcessIdToSessionId(
    dwProcessId : CULong,
    pSessionId : Pointer[CULong]) Int;

external WTSGetActiveConsoleSessionId() CULong;

external IsWow64Process(
    hProcess : HANDLE,
    Wow64Process : PBOOL) Int;

external GetLogicalProcessorInformation(
    Buffer : PSYSTEM_LOGICAL_PROCESSOR_INFORMATION,
    ReturnedLength : PDWORD) Int;

external GetNumaHighestNodeNumber(
    HighestNodeNumber : PULONG) Int;

external GetNumaProcessorNode(
    Processor : CUChar,
    NodeNumber : PUCHAR) Int;

external GetNumaNodeProcessorMask(
    Node : CUChar,
    ProcessorMask : PULONGLONG) Int;

external GetNumaAvailableMemoryNode(
    Node : CUChar,
    AvailableBytes : PULONGLONG) Int;

record Struct__DRAWPATRECT (
    ptPosition : POINT,
    ptSize : POINT,
    wStyle : UShort,
    wPattern : UShort,
);

alias DRAWPATRECT = Struct__DRAWPATRECT;

alias PDRAWPATRECT = Pointer[Struct__DRAWPATRECT];

record Struct__PSINJECTDATA (
    DataBytes : CULong,
    InjectionPoint : UShort,
    PageNumber : UShort,
);

alias PSINJECTDATA = Struct__PSINJECTDATA;

alias PPSINJECTDATA = Pointer[Struct__PSINJECTDATA];

record Struct__PSFEATURE_OUTPUT (
    bPageIndependent : Int,
    bSetPageDevice : Int,
);

alias PSFEATURE_OUTPUT = Struct__PSFEATURE_OUTPUT;

alias PPSFEATURE_OUTPUT = Pointer[Struct__PSFEATURE_OUTPUT];

record Struct__PSFEATURE_CUSTPAPER (
    lOrientation : CLong,
    lWidth : CLong,
    lHeight : CLong,
    lWidthOffset : CLong,
    lHeightOffset : CLong,
);

alias PSFEATURE_CUSTPAPER = Struct__PSFEATURE_CUSTPAPER;

alias PPSFEATURE_CUSTPAPER = Pointer[Struct__PSFEATURE_CUSTPAPER];

record Struct_tagXFORM (
    eM11 : Float,
    eM12 : Float,
    eM21 : Float,
    eM22 : Float,
    eDx : Float,
    eDy : Float,
);

alias XFORM = Struct_tagXFORM;

alias PXFORM = Pointer[Struct_tagXFORM];

alias LPXFORM = Pointer[Struct_tagXFORM];

record Struct_tagBITMAP (
    bmType : CLong,
    bmWidth : CLong,
    bmHeight : CLong,
    bmWidthBytes : CLong,
    bmPlanes : UShort,
    bmBitsPixel : UShort,
    bmBits : LPVOID,
);

alias BITMAP = Struct_tagBITMAP;

alias PBITMAP = Pointer[Struct_tagBITMAP];

alias NPBITMAP = Pointer[Struct_tagBITMAP];

alias LPBITMAP = Pointer[Struct_tagBITMAP];

record Struct_tagRGBTRIPLE (
    rgbtBlue : CUChar,
    rgbtGreen : CUChar,
    rgbtRed : CUChar,
);

alias RGBTRIPLE = Struct_tagRGBTRIPLE;

record Struct_tagRGBQUAD (
    rgbBlue : CUChar,
    rgbGreen : CUChar,
    rgbRed : CUChar,
    rgbReserved : CUChar,
);

alias RGBQUAD = Struct_tagRGBQUAD;

alias LPRGBQUAD = Pointer[RGBQUAD];

alias LCSCSTYPE = CLong;

alias LCSGAMUTMATCH = CLong;

alias FXPT16DOT16 = CLong;

alias LPFXPT16DOT16 = Pointer[CLong];

alias FXPT2DOT30 = CLong;

alias LPFXPT2DOT30 = Pointer[CLong];

record Struct_tagCIEXYZ (
    ciexyzX : CLong,
    ciexyzY : CLong,
    ciexyzZ : CLong,
);

alias CIEXYZ = Struct_tagCIEXYZ;

alias LPCIEXYZ = Pointer[CIEXYZ];

record Struct_tagICEXYZTRIPLE (
    ciexyzRed : CIEXYZ,
    ciexyzGreen : CIEXYZ,
    ciexyzBlue : CIEXYZ,
);

alias CIEXYZTRIPLE = Struct_tagICEXYZTRIPLE;

alias LPCIEXYZTRIPLE = Pointer[CIEXYZTRIPLE];

record Struct_tagLOGCOLORSPACEA (
    lcsSignature : CULong,
    lcsVersion : CULong,
    lcsSize : CULong,
    lcsCSType : CLong,
    lcsIntent : CLong,
    lcsEndpoints : CIEXYZTRIPLE,
    lcsGammaRed : CULong,
    lcsGammaGreen : CULong,
    lcsGammaBlue : CULong,
    lcsFilename : Array[CChar,260],
);

alias LOGCOLORSPACEA = Struct_tagLOGCOLORSPACEA;

alias LPLOGCOLORSPACEA = Pointer[Struct_tagLOGCOLORSPACEA];

record Struct_tagLOGCOLORSPACEW (
    lcsSignature : CULong,
    lcsVersion : CULong,
    lcsSize : CULong,
    lcsCSType : CLong,
    lcsIntent : CLong,
    lcsEndpoints : CIEXYZTRIPLE,
    lcsGammaRed : CULong,
    lcsGammaGreen : CULong,
    lcsGammaBlue : CULong,
    lcsFilename : Array[UShort,260],
);

alias LOGCOLORSPACEW = Struct_tagLOGCOLORSPACEW;

alias LPLOGCOLORSPACEW = Pointer[Struct_tagLOGCOLORSPACEW];

alias LOGCOLORSPACE = LOGCOLORSPACEA;

alias LPLOGCOLORSPACE = LPLOGCOLORSPACEA;

record Struct_tagBITMAPCOREHEADER (
    bcSize : CULong,
    bcWidth : UShort,
    bcHeight : UShort,
    bcPlanes : UShort,
    bcBitCount : UShort,
);

alias BITMAPCOREHEADER = Struct_tagBITMAPCOREHEADER;

alias LPBITMAPCOREHEADER = Pointer[Struct_tagBITMAPCOREHEADER];

alias PBITMAPCOREHEADER = Pointer[Struct_tagBITMAPCOREHEADER];

record Struct_tagBITMAPINFOHEADER (
    biSize : CULong,
    biWidth : CLong,
    biHeight : CLong,
    biPlanes : UShort,
    biBitCount : UShort,
    biCompression : CULong,
    biSizeImage : CULong,
    biXPelsPerMeter : CLong,
    biYPelsPerMeter : CLong,
    biClrUsed : CULong,
    biClrImportant : CULong,
);

alias BITMAPINFOHEADER = Struct_tagBITMAPINFOHEADER;

alias LPBITMAPINFOHEADER = Pointer[Struct_tagBITMAPINFOHEADER];

alias PBITMAPINFOHEADER = Pointer[Struct_tagBITMAPINFOHEADER];

record UnnamedStruct14 (
    bV4Size : CULong,
    bV4Width : CLong,
    bV4Height : CLong,
    bV4Planes : UShort,
    bV4BitCount : UShort,
    bV4V4Compression : CULong,
    bV4SizeImage : CULong,
    bV4XPelsPerMeter : CLong,
    bV4YPelsPerMeter : CLong,
    bV4ClrUsed : CULong,
    bV4ClrImportant : CULong,
    bV4RedMask : CULong,
    bV4GreenMask : CULong,
    bV4BlueMask : CULong,
    bV4AlphaMask : CULong,
    bV4CSType : CULong,
    bV4Endpoints : CIEXYZTRIPLE,
    bV4GammaRed : CULong,
    bV4GammaGreen : CULong,
    bV4GammaBlue : CULong,
);

alias BITMAPV4HEADER = UnnamedStruct14;

alias LPBITMAPV4HEADER = Pointer[UnnamedStruct14];

alias PBITMAPV4HEADER = Pointer[UnnamedStruct14];

record UnnamedStruct15 (
    bV5Size : CULong,
    bV5Width : CLong,
    bV5Height : CLong,
    bV5Planes : UShort,
    bV5BitCount : UShort,
    bV5Compression : CULong,
    bV5SizeImage : CULong,
    bV5XPelsPerMeter : CLong,
    bV5YPelsPerMeter : CLong,
    bV5ClrUsed : CULong,
    bV5ClrImportant : CULong,
    bV5RedMask : CULong,
    bV5GreenMask : CULong,
    bV5BlueMask : CULong,
    bV5AlphaMask : CULong,
    bV5CSType : CULong,
    bV5Endpoints : CIEXYZTRIPLE,
    bV5GammaRed : CULong,
    bV5GammaGreen : CULong,
    bV5GammaBlue : CULong,
    bV5Intent : CULong,
    bV5ProfileData : CULong,
    bV5ProfileSize : CULong,
    bV5Reserved : CULong,
);

alias BITMAPV5HEADER = UnnamedStruct15;

alias LPBITMAPV5HEADER = Pointer[UnnamedStruct15];

alias PBITMAPV5HEADER = Pointer[UnnamedStruct15];

record Struct_tagBITMAPINFO (
    bmiHeader : BITMAPINFOHEADER,
    bmiColors : Array[RGBQUAD,1],
);

alias BITMAPINFO = Struct_tagBITMAPINFO;

alias LPBITMAPINFO = Pointer[Struct_tagBITMAPINFO];

alias PBITMAPINFO = Pointer[Struct_tagBITMAPINFO];

record Struct_tagBITMAPCOREINFO (
    bmciHeader : BITMAPCOREHEADER,
    bmciColors : Array[RGBTRIPLE,1],
);

alias BITMAPCOREINFO = Struct_tagBITMAPCOREINFO;

alias LPBITMAPCOREINFO = Pointer[Struct_tagBITMAPCOREINFO];

alias PBITMAPCOREINFO = Pointer[Struct_tagBITMAPCOREINFO];

record Struct_tagBITMAPFILEHEADER (
    bfType : UShort,
    bfSize : CULong,
    bfReserved1 : UShort,
    bfReserved2 : UShort,
    bfOffBits : CULong,
);

alias BITMAPFILEHEADER = Struct_tagBITMAPFILEHEADER;

alias LPBITMAPFILEHEADER = Pointer[Struct_tagBITMAPFILEHEADER];

alias PBITMAPFILEHEADER = Pointer[Struct_tagBITMAPFILEHEADER];

record Struct_tagFONTSIGNATURE (
    fsUsb : Array[CULong,4],
    fsCsb : Array[CULong,2],
);

alias FONTSIGNATURE = Struct_tagFONTSIGNATURE;

alias PFONTSIGNATURE = Pointer[Struct_tagFONTSIGNATURE];

alias LPFONTSIGNATURE = Pointer[Struct_tagFONTSIGNATURE];

record Struct_tagCHARSETINFO (
    ciCharset : UInt,
    ciACP : UInt,
    fs : FONTSIGNATURE,
);

alias CHARSETINFO = Struct_tagCHARSETINFO;

alias PCHARSETINFO = Pointer[Struct_tagCHARSETINFO];

alias NPCHARSETINFO = Pointer[Struct_tagCHARSETINFO];

alias LPCHARSETINFO = Pointer[Struct_tagCHARSETINFO];

record Struct_tagLOCALESIGNATURE (
    lsUsb : Array[CULong,4],
    lsCsbDefault : Array[CULong,2],
    lsCsbSupported : Array[CULong,2],
);

alias LOCALESIGNATURE = Struct_tagLOCALESIGNATURE;

alias PLOCALESIGNATURE = Pointer[Struct_tagLOCALESIGNATURE];

alias LPLOCALESIGNATURE = Pointer[Struct_tagLOCALESIGNATURE];

record Struct_tagHANDLETABLE (
    objectHandle : Array[HGDIOBJ,1],
);

alias HANDLETABLE = Struct_tagHANDLETABLE;

alias PHANDLETABLE = Pointer[Struct_tagHANDLETABLE];

alias LPHANDLETABLE = Pointer[Struct_tagHANDLETABLE];

record Struct_tagMETARECORD (
    rdSize : CULong,
    rdFunction : UShort,
    rdParm : Array[UShort,1],
);

alias METARECORD = Struct_tagMETARECORD;

alias PMETARECORD = Pointer[Struct_tagMETARECORD];

alias LPMETARECORD = Pointer[Struct_tagMETARECORD];

record Struct_tagMETAFILEPICT (
    mm : CLong,
    xExt : CLong,
    yExt : CLong,
    hMF : HMETAFILE,
);

alias METAFILEPICT = Struct_tagMETAFILEPICT;

alias LPMETAFILEPICT = Pointer[Struct_tagMETAFILEPICT];

record Struct_tagMETAHEADER (
    mtType : UShort,
    mtHeaderSize : UShort,
    mtVersion : UShort,
    mtSize : CULong,
    mtNoObjects : UShort,
    mtMaxRecord : CULong,
    mtNoParameters : UShort,
);

alias METAHEADER = Struct_tagMETAHEADER;

alias PMETAHEADER = Pointer[Struct_tagMETAHEADER];

alias LPMETAHEADER = Pointer[Struct_tagMETAHEADER];

record Struct_tagENHMETARECORD (
    iType : CULong,
    nSize : CULong,
    dParm : Array[CULong,1],
);

alias ENHMETARECORD = Struct_tagENHMETARECORD;

alias PENHMETARECORD = Pointer[Struct_tagENHMETARECORD];

alias LPENHMETARECORD = Pointer[Struct_tagENHMETARECORD];

record Struct_tagENHMETAHEADER (
    iType : CULong,
    nSize : CULong,
    rclBounds : RECTL,
    rclFrame : RECTL,
    dSignature : CULong,
    nVersion : CULong,
    nBytes : CULong,
    nRecords : CULong,
    nHandles : UShort,
    sReserved : UShort,
    nDescription : CULong,
    offDescription : CULong,
    nPalEntries : CULong,
    szlDevice : SIZEL,
    szlMillimeters : SIZEL,
    cbPixelFormat : CULong,
    offPixelFormat : CULong,
    bOpenGL : CULong,
    szlMicrometers : SIZEL,
);

alias ENHMETAHEADER = Struct_tagENHMETAHEADER;

alias PENHMETAHEADER = Pointer[Struct_tagENHMETAHEADER];

alias LPENHMETAHEADER = Pointer[Struct_tagENHMETAHEADER];

alias BCHAR = CUChar;

record Struct_tagTEXTMETRICA (
    tmHeight : CLong,
    tmAscent : CLong,
    tmDescent : CLong,
    tmInternalLeading : CLong,
    tmExternalLeading : CLong,
    tmAveCharWidth : CLong,
    tmMaxCharWidth : CLong,
    tmWeight : CLong,
    tmOverhang : CLong,
    tmDigitizedAspectX : CLong,
    tmDigitizedAspectY : CLong,
    tmFirstChar : CUChar,
    tmLastChar : CUChar,
    tmDefaultChar : CUChar,
    tmBreakChar : CUChar,
    tmItalic : CUChar,
    tmUnderlined : CUChar,
    tmStruckOut : CUChar,
    tmPitchAndFamily : CUChar,
    tmCharSet : CUChar,
);

alias TEXTMETRICA = Struct_tagTEXTMETRICA;

alias PTEXTMETRICA = Pointer[Struct_tagTEXTMETRICA];

alias NPTEXTMETRICA = Pointer[Struct_tagTEXTMETRICA];

alias LPTEXTMETRICA = Pointer[Struct_tagTEXTMETRICA];

record Struct_tagTEXTMETRICW (
    tmHeight : CLong,
    tmAscent : CLong,
    tmDescent : CLong,
    tmInternalLeading : CLong,
    tmExternalLeading : CLong,
    tmAveCharWidth : CLong,
    tmMaxCharWidth : CLong,
    tmWeight : CLong,
    tmOverhang : CLong,
    tmDigitizedAspectX : CLong,
    tmDigitizedAspectY : CLong,
    tmFirstChar : UShort,
    tmLastChar : UShort,
    tmDefaultChar : UShort,
    tmBreakChar : UShort,
    tmItalic : CUChar,
    tmUnderlined : CUChar,
    tmStruckOut : CUChar,
    tmPitchAndFamily : CUChar,
    tmCharSet : CUChar,
);

alias TEXTMETRICW = Struct_tagTEXTMETRICW;

alias PTEXTMETRICW = Pointer[Struct_tagTEXTMETRICW];

alias NPTEXTMETRICW = Pointer[Struct_tagTEXTMETRICW];

alias LPTEXTMETRICW = Pointer[Struct_tagTEXTMETRICW];

alias TEXTMETRIC = TEXTMETRICA;

alias PTEXTMETRIC = PTEXTMETRICA;

alias NPTEXTMETRIC = NPTEXTMETRICA;

alias LPTEXTMETRIC = LPTEXTMETRICA;

record Struct_tagNEWTEXTMETRICA (
    tmHeight : CLong,
    tmAscent : CLong,
    tmDescent : CLong,
    tmInternalLeading : CLong,
    tmExternalLeading : CLong,
    tmAveCharWidth : CLong,
    tmMaxCharWidth : CLong,
    tmWeight : CLong,
    tmOverhang : CLong,
    tmDigitizedAspectX : CLong,
    tmDigitizedAspectY : CLong,
    tmFirstChar : CUChar,
    tmLastChar : CUChar,
    tmDefaultChar : CUChar,
    tmBreakChar : CUChar,
    tmItalic : CUChar,
    tmUnderlined : CUChar,
    tmStruckOut : CUChar,
    tmPitchAndFamily : CUChar,
    tmCharSet : CUChar,
    ntmFlags : CULong,
    ntmSizeEM : UInt,
    ntmCellHeight : UInt,
    ntmAvgWidth : UInt,
);

alias NEWTEXTMETRICA = Struct_tagNEWTEXTMETRICA;

alias PNEWTEXTMETRICA = Pointer[Struct_tagNEWTEXTMETRICA];

alias NPNEWTEXTMETRICA = Pointer[Struct_tagNEWTEXTMETRICA];

alias LPNEWTEXTMETRICA = Pointer[Struct_tagNEWTEXTMETRICA];

record Struct_tagNEWTEXTMETRICW (
    tmHeight : CLong,
    tmAscent : CLong,
    tmDescent : CLong,
    tmInternalLeading : CLong,
    tmExternalLeading : CLong,
    tmAveCharWidth : CLong,
    tmMaxCharWidth : CLong,
    tmWeight : CLong,
    tmOverhang : CLong,
    tmDigitizedAspectX : CLong,
    tmDigitizedAspectY : CLong,
    tmFirstChar : UShort,
    tmLastChar : UShort,
    tmDefaultChar : UShort,
    tmBreakChar : UShort,
    tmItalic : CUChar,
    tmUnderlined : CUChar,
    tmStruckOut : CUChar,
    tmPitchAndFamily : CUChar,
    tmCharSet : CUChar,
    ntmFlags : CULong,
    ntmSizeEM : UInt,
    ntmCellHeight : UInt,
    ntmAvgWidth : UInt,
);

alias NEWTEXTMETRICW = Struct_tagNEWTEXTMETRICW;

alias PNEWTEXTMETRICW = Pointer[Struct_tagNEWTEXTMETRICW];

alias NPNEWTEXTMETRICW = Pointer[Struct_tagNEWTEXTMETRICW];

alias LPNEWTEXTMETRICW = Pointer[Struct_tagNEWTEXTMETRICW];

alias NEWTEXTMETRIC = NEWTEXTMETRICA;

alias PNEWTEXTMETRIC = PNEWTEXTMETRICA;

alias NPNEWTEXTMETRIC = NPNEWTEXTMETRICA;

alias LPNEWTEXTMETRIC = LPNEWTEXTMETRICA;

record Struct_tagNEWTEXTMETRICEXA (
    ntmTm : NEWTEXTMETRICA,
    ntmFontSig : FONTSIGNATURE,
);

alias NEWTEXTMETRICEXA = Struct_tagNEWTEXTMETRICEXA;

record Struct_tagNEWTEXTMETRICEXW (
    ntmTm : NEWTEXTMETRICW,
    ntmFontSig : FONTSIGNATURE,
);

alias NEWTEXTMETRICEXW = Struct_tagNEWTEXTMETRICEXW;

alias NEWTEXTMETRICEX = NEWTEXTMETRICEXA;

record Struct_tagPELARRAY (
    paXCount : CLong,
    paYCount : CLong,
    paXExt : CLong,
    paYExt : CLong,
    paRGBs : CUChar,
);

alias PELARRAY = Struct_tagPELARRAY;

alias PPELARRAY = Pointer[Struct_tagPELARRAY];

alias NPPELARRAY = Pointer[Struct_tagPELARRAY];

alias LPPELARRAY = Pointer[Struct_tagPELARRAY];

record Struct_tagLOGBRUSH (
    lbStyle : UInt,
    lbColor : CULong,
    lbHatch : UInt64,
);

alias LOGBRUSH = Struct_tagLOGBRUSH;

alias PLOGBRUSH = Pointer[Struct_tagLOGBRUSH];

alias NPLOGBRUSH = Pointer[Struct_tagLOGBRUSH];

alias LPLOGBRUSH = Pointer[Struct_tagLOGBRUSH];

record Struct_tagLOGBRUSH32 (
    lbStyle : UInt,
    lbColor : CULong,
    lbHatch : CULong,
);

alias LOGBRUSH32 = Struct_tagLOGBRUSH32;

alias PLOGBRUSH32 = Pointer[Struct_tagLOGBRUSH32];

alias NPLOGBRUSH32 = Pointer[Struct_tagLOGBRUSH32];

alias LPLOGBRUSH32 = Pointer[Struct_tagLOGBRUSH32];

alias PATTERN = LOGBRUSH;

alias PPATTERN = Pointer[PATTERN];

alias NPPATTERN = Pointer[PATTERN];

alias LPPATTERN = Pointer[PATTERN];

record Struct_tagLOGPEN (
    lopnStyle : UInt,
    lopnWidth : POINT,
    lopnColor : CULong,
);

alias LOGPEN = Struct_tagLOGPEN;

alias PLOGPEN = Pointer[Struct_tagLOGPEN];

alias NPLOGPEN = Pointer[Struct_tagLOGPEN];

alias LPLOGPEN = Pointer[Struct_tagLOGPEN];

record Struct_tagEXTLOGPEN (
    elpPenStyle : CULong,
    elpWidth : CULong,
    elpBrushStyle : UInt,
    elpColor : CULong,
    elpHatch : UInt64,
    elpNumEntries : CULong,
    elpStyleEntry : Array[CULong,1],
);

alias EXTLOGPEN = Struct_tagEXTLOGPEN;

alias PEXTLOGPEN = Pointer[Struct_tagEXTLOGPEN];

alias NPEXTLOGPEN = Pointer[Struct_tagEXTLOGPEN];

alias LPEXTLOGPEN = Pointer[Struct_tagEXTLOGPEN];

record Struct_tagPALETTEENTRY (
    peRed : CUChar,
    peGreen : CUChar,
    peBlue : CUChar,
    peFlags : CUChar,
);

alias PALETTEENTRY = Struct_tagPALETTEENTRY;

alias PPALETTEENTRY = Pointer[Struct_tagPALETTEENTRY];

alias LPPALETTEENTRY = Pointer[Struct_tagPALETTEENTRY];

record Struct_tagLOGPALETTE (
    palVersion : UShort,
    palNumEntries : UShort,
    palPalEntry : Array[PALETTEENTRY,1],
);

alias LOGPALETTE = Struct_tagLOGPALETTE;

alias PLOGPALETTE = Pointer[Struct_tagLOGPALETTE];

alias NPLOGPALETTE = Pointer[Struct_tagLOGPALETTE];

alias LPLOGPALETTE = Pointer[Struct_tagLOGPALETTE];

record Struct_tagLOGFONTA (
    lfHeight : CLong,
    lfWidth : CLong,
    lfEscapement : CLong,
    lfOrientation : CLong,
    lfWeight : CLong,
    lfItalic : CUChar,
    lfUnderline : CUChar,
    lfStrikeOut : CUChar,
    lfCharSet : CUChar,
    lfOutPrecision : CUChar,
    lfClipPrecision : CUChar,
    lfQuality : CUChar,
    lfPitchAndFamily : CUChar,
    lfFaceName : Array[CChar,32],
);

alias LOGFONTA = Struct_tagLOGFONTA;

alias PLOGFONTA = Pointer[Struct_tagLOGFONTA];

alias NPLOGFONTA = Pointer[Struct_tagLOGFONTA];

alias LPLOGFONTA = Pointer[Struct_tagLOGFONTA];

record Struct_tagLOGFONTW (
    lfHeight : CLong,
    lfWidth : CLong,
    lfEscapement : CLong,
    lfOrientation : CLong,
    lfWeight : CLong,
    lfItalic : CUChar,
    lfUnderline : CUChar,
    lfStrikeOut : CUChar,
    lfCharSet : CUChar,
    lfOutPrecision : CUChar,
    lfClipPrecision : CUChar,
    lfQuality : CUChar,
    lfPitchAndFamily : CUChar,
    lfFaceName : Array[UShort,32],
);

alias LOGFONTW = Struct_tagLOGFONTW;

alias PLOGFONTW = Pointer[Struct_tagLOGFONTW];

alias NPLOGFONTW = Pointer[Struct_tagLOGFONTW];

alias LPLOGFONTW = Pointer[Struct_tagLOGFONTW];

alias LOGFONT = LOGFONTA;

alias PLOGFONT = PLOGFONTA;

alias NPLOGFONT = NPLOGFONTA;

alias LPLOGFONT = LPLOGFONTA;

record Struct_tagENUMLOGFONTA (
    elfLogFont : LOGFONTA,
    elfFullName : Array[CUChar,64],
    elfStyle : Array[CUChar,32],
);

alias ENUMLOGFONTA = Struct_tagENUMLOGFONTA;

alias LPENUMLOGFONTA = Pointer[Struct_tagENUMLOGFONTA];

record Struct_tagENUMLOGFONTW (
    elfLogFont : LOGFONTW,
    elfFullName : Array[UShort,64],
    elfStyle : Array[UShort,32],
);

alias ENUMLOGFONTW = Struct_tagENUMLOGFONTW;

alias LPENUMLOGFONTW = Pointer[Struct_tagENUMLOGFONTW];

alias ENUMLOGFONT = ENUMLOGFONTA;

alias LPENUMLOGFONT = LPENUMLOGFONTA;

record Struct_tagENUMLOGFONTEXA (
    elfLogFont : LOGFONTA,
    elfFullName : Array[CUChar,64],
    elfStyle : Array[CUChar,32],
    elfScript : Array[CUChar,32],
);

alias ENUMLOGFONTEXA = Struct_tagENUMLOGFONTEXA;

alias LPENUMLOGFONTEXA = Pointer[Struct_tagENUMLOGFONTEXA];

record Struct_tagENUMLOGFONTEXW (
    elfLogFont : LOGFONTW,
    elfFullName : Array[UShort,64],
    elfStyle : Array[UShort,32],
    elfScript : Array[UShort,32],
);

alias ENUMLOGFONTEXW = Struct_tagENUMLOGFONTEXW;

alias LPENUMLOGFONTEXW = Pointer[Struct_tagENUMLOGFONTEXW];

alias ENUMLOGFONTEX = ENUMLOGFONTEXA;

alias LPENUMLOGFONTEX = LPENUMLOGFONTEXA;

record Struct_tagPANOSE (
    bFamilyType : CUChar,
    bSerifStyle : CUChar,
    bWeight : CUChar,
    bProportion : CUChar,
    bContrast : CUChar,
    bStrokeVariation : CUChar,
    bArmStyle : CUChar,
    bLetterform : CUChar,
    bMidline : CUChar,
    bXHeight : CUChar,
);

alias PANOSE = Struct_tagPANOSE;

alias LPPANOSE = Pointer[Struct_tagPANOSE];

record Struct_tagEXTLOGFONTA (
    elfLogFont : LOGFONTA,
    elfFullName : Array[CUChar,64],
    elfStyle : Array[CUChar,32],
    elfVersion : CULong,
    elfStyleSize : CULong,
    elfMatch : CULong,
    elfReserved : CULong,
    elfVendorId : Array[CUChar,4],
    elfCulture : CULong,
    elfPanose : PANOSE,
);

alias EXTLOGFONTA = Struct_tagEXTLOGFONTA;

alias PEXTLOGFONTA = Pointer[Struct_tagEXTLOGFONTA];

alias NPEXTLOGFONTA = Pointer[Struct_tagEXTLOGFONTA];

alias LPEXTLOGFONTA = Pointer[Struct_tagEXTLOGFONTA];

record Struct_tagEXTLOGFONTW (
    elfLogFont : LOGFONTW,
    elfFullName : Array[UShort,64],
    elfStyle : Array[UShort,32],
    elfVersion : CULong,
    elfStyleSize : CULong,
    elfMatch : CULong,
    elfReserved : CULong,
    elfVendorId : Array[CUChar,4],
    elfCulture : CULong,
    elfPanose : PANOSE,
);

alias EXTLOGFONTW = Struct_tagEXTLOGFONTW;

alias PEXTLOGFONTW = Pointer[Struct_tagEXTLOGFONTW];

alias NPEXTLOGFONTW = Pointer[Struct_tagEXTLOGFONTW];

alias LPEXTLOGFONTW = Pointer[Struct_tagEXTLOGFONTW];

alias EXTLOGFONT = EXTLOGFONTA;

alias PEXTLOGFONT = PEXTLOGFONTA;

alias NPEXTLOGFONT = NPEXTLOGFONTA;

alias LPEXTLOGFONT = LPEXTLOGFONTA;

record Struct__devicemodeA (
    dmDeviceName : Array[CUChar,32],
    dmSpecVersion : UShort,
    dmDriverVersion : UShort,
    dmSize : UShort,
    dmDriverExtra : UShort,
    dmFields : CULong,
    unnamed_field6 : AUnionType,
    dmColor : Short,
    dmDuplex : Short,
    dmYResolution : Short,
    dmTTOption : Short,
    dmCollate : Short,
    dmFormName : Array[CUChar,32],
    dmLogPixels : UShort,
    dmBitsPerPel : CULong,
    dmPelsWidth : CULong,
    dmPelsHeight : CULong,
    unnamed_field17 : AUnionType,
    dmDisplayFrequency : CULong,
    dmICMMethod : CULong,
    dmICMIntent : CULong,
    dmMediaType : CULong,
    dmDitherType : CULong,
    dmReserved1 : CULong,
    dmReserved2 : CULong,
    dmPanningWidth : CULong,
    dmPanningHeight : CULong,
);

alias DEVMODEA = Struct__devicemodeA;

alias PDEVMODEA = Pointer[Struct__devicemodeA];

alias NPDEVMODEA = Pointer[Struct__devicemodeA];

alias LPDEVMODEA = Pointer[Struct__devicemodeA];

record Struct__devicemodeW (
    dmDeviceName : Array[UShort,32],
    dmSpecVersion : UShort,
    dmDriverVersion : UShort,
    dmSize : UShort,
    dmDriverExtra : UShort,
    dmFields : CULong,
    unnamed_field6 : AUnionType,
    dmColor : Short,
    dmDuplex : Short,
    dmYResolution : Short,
    dmTTOption : Short,
    dmCollate : Short,
    dmFormName : Array[UShort,32],
    dmLogPixels : UShort,
    dmBitsPerPel : CULong,
    dmPelsWidth : CULong,
    dmPelsHeight : CULong,
    unnamed_field17 : AUnionType,
    dmDisplayFrequency : CULong,
    dmICMMethod : CULong,
    dmICMIntent : CULong,
    dmMediaType : CULong,
    dmDitherType : CULong,
    dmReserved1 : CULong,
    dmReserved2 : CULong,
    dmPanningWidth : CULong,
    dmPanningHeight : CULong,
);

alias DEVMODEW = Struct__devicemodeW;

alias PDEVMODEW = Pointer[Struct__devicemodeW];

alias NPDEVMODEW = Pointer[Struct__devicemodeW];

alias LPDEVMODEW = Pointer[Struct__devicemodeW];

alias DEVMODE = DEVMODEA;

alias PDEVMODE = PDEVMODEA;

alias NPDEVMODE = NPDEVMODEA;

alias LPDEVMODE = LPDEVMODEA;

record Struct__DISPLAY_DEVICEA (
    cb : CULong,
    DeviceName : Array[CChar,32],
    DeviceString : Array[CChar,128],
    StateFlags : CULong,
    DeviceID : Array[CChar,128],
    DeviceKey : Array[CChar,128],
);

alias DISPLAY_DEVICEA = Struct__DISPLAY_DEVICEA;

alias PDISPLAY_DEVICEA = Pointer[Struct__DISPLAY_DEVICEA];

alias LPDISPLAY_DEVICEA = Pointer[Struct__DISPLAY_DEVICEA];

record Struct__DISPLAY_DEVICEW (
    cb : CULong,
    DeviceName : Array[UShort,32],
    DeviceString : Array[UShort,128],
    StateFlags : CULong,
    DeviceID : Array[UShort,128],
    DeviceKey : Array[UShort,128],
);

alias DISPLAY_DEVICEW = Struct__DISPLAY_DEVICEW;

alias PDISPLAY_DEVICEW = Pointer[Struct__DISPLAY_DEVICEW];

alias LPDISPLAY_DEVICEW = Pointer[Struct__DISPLAY_DEVICEW];

alias DISPLAY_DEVICE = DISPLAY_DEVICEA;

alias PDISPLAY_DEVICE = PDISPLAY_DEVICEA;

alias LPDISPLAY_DEVICE = LPDISPLAY_DEVICEA;

record Struct__RGNDATAHEADER (
    dwSize : CULong,
    iType : CULong,
    nCount : CULong,
    nRgnSize : CULong,
    rcBound : RECT,
);

alias RGNDATAHEADER = Struct__RGNDATAHEADER;

alias PRGNDATAHEADER = Pointer[Struct__RGNDATAHEADER];

record Struct__RGNDATA (
    rdh : RGNDATAHEADER,
    Buffer : Array[CChar,1],
);

alias RGNDATA = Struct__RGNDATA;

alias PRGNDATA = Pointer[Struct__RGNDATA];

alias NPRGNDATA = Pointer[Struct__RGNDATA];

alias LPRGNDATA = Pointer[Struct__RGNDATA];

record Struct__ABC (
    abcA : Int,
    abcB : UInt,
    abcC : Int,
);

alias ABC = Struct__ABC;

alias PABC = Pointer[Struct__ABC];

alias NPABC = Pointer[Struct__ABC];

alias LPABC = Pointer[Struct__ABC];

record Struct__ABCFLOAT (
    abcfA : Float,
    abcfB : Float,
    abcfC : Float,
);

alias ABCFLOAT = Struct__ABCFLOAT;

alias PABCFLOAT = Pointer[Struct__ABCFLOAT];

alias NPABCFLOAT = Pointer[Struct__ABCFLOAT];

alias LPABCFLOAT = Pointer[Struct__ABCFLOAT];

record Struct__OUTLINETEXTMETRICA (
    otmSize : UInt,
    otmTextMetrics : TEXTMETRICA,
    otmFiller : CUChar,
    otmPanoseNumber : PANOSE,
    otmfsSelection : UInt,
    otmfsType : UInt,
    otmsCharSlopeRise : Int,
    otmsCharSlopeRun : Int,
    otmItalicAngle : Int,
    otmEMSquare : UInt,
    otmAscent : Int,
    otmDescent : Int,
    otmLineGap : UInt,
    otmsCapEmHeight : UInt,
    otmsXHeight : UInt,
    otmrcFontBox : RECT,
    otmMacAscent : Int,
    otmMacDescent : Int,
    otmMacLineGap : UInt,
    otmusMinimumPPEM : UInt,
    otmptSubscriptSize : POINT,
    otmptSubscriptOffset : POINT,
    otmptSuperscriptSize : POINT,
    otmptSuperscriptOffset : POINT,
    otmsStrikeoutSize : UInt,
    otmsStrikeoutPosition : Int,
    otmsUnderscoreSize : Int,
    otmsUnderscorePosition : Int,
    otmpFamilyName : PSTR,
    otmpFaceName : PSTR,
    otmpStyleName : PSTR,
    otmpFullName : PSTR,
);

alias OUTLINETEXTMETRICA = Struct__OUTLINETEXTMETRICA;

alias POUTLINETEXTMETRICA = Pointer[Struct__OUTLINETEXTMETRICA];

alias NPOUTLINETEXTMETRICA = Pointer[Struct__OUTLINETEXTMETRICA];

alias LPOUTLINETEXTMETRICA = Pointer[Struct__OUTLINETEXTMETRICA];

record Struct__OUTLINETEXTMETRICW (
    otmSize : UInt,
    otmTextMetrics : TEXTMETRICW,
    otmFiller : CUChar,
    otmPanoseNumber : PANOSE,
    otmfsSelection : UInt,
    otmfsType : UInt,
    otmsCharSlopeRise : Int,
    otmsCharSlopeRun : Int,
    otmItalicAngle : Int,
    otmEMSquare : UInt,
    otmAscent : Int,
    otmDescent : Int,
    otmLineGap : UInt,
    otmsCapEmHeight : UInt,
    otmsXHeight : UInt,
    otmrcFontBox : RECT,
    otmMacAscent : Int,
    otmMacDescent : Int,
    otmMacLineGap : UInt,
    otmusMinimumPPEM : UInt,
    otmptSubscriptSize : POINT,
    otmptSubscriptOffset : POINT,
    otmptSuperscriptSize : POINT,
    otmptSuperscriptOffset : POINT,
    otmsStrikeoutSize : UInt,
    otmsStrikeoutPosition : Int,
    otmsUnderscoreSize : Int,
    otmsUnderscorePosition : Int,
    otmpFamilyName : PSTR,
    otmpFaceName : PSTR,
    otmpStyleName : PSTR,
    otmpFullName : PSTR,
);

alias OUTLINETEXTMETRICW = Struct__OUTLINETEXTMETRICW;

alias POUTLINETEXTMETRICW = Pointer[Struct__OUTLINETEXTMETRICW];

alias NPOUTLINETEXTMETRICW = Pointer[Struct__OUTLINETEXTMETRICW];

alias LPOUTLINETEXTMETRICW = Pointer[Struct__OUTLINETEXTMETRICW];

alias OUTLINETEXTMETRIC = OUTLINETEXTMETRICA;

alias POUTLINETEXTMETRIC = POUTLINETEXTMETRICA;

alias NPOUTLINETEXTMETRIC = NPOUTLINETEXTMETRICA;

alias LPOUTLINETEXTMETRIC = LPOUTLINETEXTMETRICA;

record Struct_tagPOLYTEXTA (
    x : Int,
    y : Int,
    n : UInt,
    lpstr : LPCSTR,
    uiFlags : UInt,
    rcl : RECT,
    pdx : Pointer[Int],
);

alias POLYTEXTA = Struct_tagPOLYTEXTA;

alias PPOLYTEXTA = Pointer[Struct_tagPOLYTEXTA];

alias NPPOLYTEXTA = Pointer[Struct_tagPOLYTEXTA];

alias LPPOLYTEXTA = Pointer[Struct_tagPOLYTEXTA];

record Struct_tagPOLYTEXTW (
    x : Int,
    y : Int,
    n : UInt,
    lpstr : LPCWSTR,
    uiFlags : UInt,
    rcl : RECT,
    pdx : Pointer[Int],
);

alias POLYTEXTW = Struct_tagPOLYTEXTW;

alias PPOLYTEXTW = Pointer[Struct_tagPOLYTEXTW];

alias NPPOLYTEXTW = Pointer[Struct_tagPOLYTEXTW];

alias LPPOLYTEXTW = Pointer[Struct_tagPOLYTEXTW];

alias POLYTEXT = POLYTEXTA;

alias PPOLYTEXT = PPOLYTEXTA;

alias NPPOLYTEXT = NPPOLYTEXTA;

alias LPPOLYTEXT = LPPOLYTEXTA;

record Struct__FIXED (
    fract : UShort,
    value : Short,
);

alias FIXED = Struct__FIXED;

record Struct__MAT2 (
    eM11 : FIXED,
    eM12 : FIXED,
    eM21 : FIXED,
    eM22 : FIXED,
);

alias MAT2 = Struct__MAT2;

alias LPMAT2 = Pointer[Struct__MAT2];

record Struct__GLYPHMETRICS (
    gmBlackBoxX : UInt,
    gmBlackBoxY : UInt,
    gmptGlyphOrigin : POINT,
    gmCellIncX : Short,
    gmCellIncY : Short,
);

alias GLYPHMETRICS = Struct__GLYPHMETRICS;

alias LPGLYPHMETRICS = Pointer[Struct__GLYPHMETRICS];

record Struct_tagPOINTFX (
    x : FIXED,
    y : FIXED,
);

alias POINTFX = Struct_tagPOINTFX;

alias LPPOINTFX = Pointer[Struct_tagPOINTFX];

record Struct_tagTTPOLYCURVE (
    wType : UShort,
    cpfx : UShort,
    apfx : Array[POINTFX,1],
);

alias TTPOLYCURVE = Struct_tagTTPOLYCURVE;

alias LPTTPOLYCURVE = Pointer[Struct_tagTTPOLYCURVE];

record Struct_tagTTPOLYGONHEADER (
    cb : CULong,
    dwType : CULong,
    pfxStart : POINTFX,
);

alias TTPOLYGONHEADER = Struct_tagTTPOLYGONHEADER;

alias LPTTPOLYGONHEADER = Pointer[Struct_tagTTPOLYGONHEADER];

record Struct_tagGCP_RESULTSA (
    lStructSize : CULong,
    lpOutString : LPSTR,
    lpOrder : Pointer[UInt],
    lpDx : Pointer[Int],
    lpCaretPos : Pointer[Int],
    lpClass : LPSTR,
    lpGlyphs : LPWSTR,
    nGlyphs : UInt,
    nMaxFit : Int,
);

alias GCP_RESULTSA = Struct_tagGCP_RESULTSA;

alias LPGCP_RESULTSA = Pointer[Struct_tagGCP_RESULTSA];

record Struct_tagGCP_RESULTSW (
    lStructSize : CULong,
    lpOutString : LPWSTR,
    lpOrder : Pointer[UInt],
    lpDx : Pointer[Int],
    lpCaretPos : Pointer[Int],
    lpClass : LPSTR,
    lpGlyphs : LPWSTR,
    nGlyphs : UInt,
    nMaxFit : Int,
);

alias GCP_RESULTSW = Struct_tagGCP_RESULTSW;

alias LPGCP_RESULTSW = Pointer[Struct_tagGCP_RESULTSW];

alias GCP_RESULTS = GCP_RESULTSA;

alias LPGCP_RESULTS = LPGCP_RESULTSA;

record Struct__RASTERIZER_STATUS (
    nSize : Short,
    wFlags : Short,
    nLanguageID : Short,
);

alias RASTERIZER_STATUS = Struct__RASTERIZER_STATUS;

alias LPRASTERIZER_STATUS = Pointer[Struct__RASTERIZER_STATUS];

record Struct_tagPIXELFORMATDESCRIPTOR (
    nSize : UShort,
    nVersion : UShort,
    dwFlags : CULong,
    iPixelType : CUChar,
    cColorBits : CUChar,
    cRedBits : CUChar,
    cRedShift : CUChar,
    cGreenBits : CUChar,
    cGreenShift : CUChar,
    cBlueBits : CUChar,
    cBlueShift : CUChar,
    cAlphaBits : CUChar,
    cAlphaShift : CUChar,
    cAccumBits : CUChar,
    cAccumRedBits : CUChar,
    cAccumGreenBits : CUChar,
    cAccumBlueBits : CUChar,
    cAccumAlphaBits : CUChar,
    cDepthBits : CUChar,
    cStencilBits : CUChar,
    cAuxBuffers : CUChar,
    iLayerType : CUChar,
    bReserved : CUChar,
    dwLayerMask : CULong,
    dwVisibleMask : CULong,
    dwDamageMask : CULong,
);

alias PIXELFORMATDESCRIPTOR = Struct_tagPIXELFORMATDESCRIPTOR;

alias PPIXELFORMATDESCRIPTOR = Pointer[Struct_tagPIXELFORMATDESCRIPTOR];

alias LPPIXELFORMATDESCRIPTOR = Pointer[Struct_tagPIXELFORMATDESCRIPTOR];

alias OLDFONTENUMPROCA = CCodePointer[(Pointer[Struct_tagLOGFONTA],Pointer[Struct_tagTEXTMETRICA],CULong,Int64),(Int)];

alias OLDFONTENUMPROCW = CCodePointer[(Pointer[Struct_tagLOGFONTW],Pointer[Struct_tagTEXTMETRICW],CULong,Int64),(Int)];

alias FONTENUMPROCA = OLDFONTENUMPROCA;

alias FONTENUMPROCW = OLDFONTENUMPROCW;

alias FONTENUMPROC = FONTENUMPROCA;

alias GOBJENUMPROC = CCodePointer[(RawPointer,Int64),(Int)];

alias LINEDDAPROC = CCodePointer[(Int,Int,Int64),()];

external AddFontResourceA(
    argument0 : LPCSTR) Int;

external AddFontResourceW(
    argument0 : LPCWSTR) Int;

external AnimatePalette(
    hPal : HPALETTE,
    iStartIndex : UInt,
    cEntries : UInt,
    ppe : Pointer[PALETTEENTRY]) Int;

external Arc(
    hdc : HDC,
    x1 : Int,
    y1 : Int,
    x2 : Int,
    y2 : Int,
    x3 : Int,
    y3 : Int,
    x4 : Int,
    y4 : Int) Int;

external BitBlt(
    hdc : HDC,
    x : Int,
    y : Int,
    cx : Int,
    cy : Int,
    hdcSrc : HDC,
    x1 : Int,
    y1 : Int,
    rop : CULong) Int;

external CancelDC(
    hdc : HDC) Int;

external Chord(
    hdc : HDC,
    x1 : Int,
    y1 : Int,
    x2 : Int,
    y2 : Int,
    x3 : Int,
    y3 : Int,
    x4 : Int,
    y4 : Int) Int;

external ChoosePixelFormat(
    hdc : HDC,
    ppfd : Pointer[PIXELFORMATDESCRIPTOR]) Int;

external CloseMetaFile(
    hdc : HDC) HMETAFILE;

external CombineRgn(
    hrgnDst : HRGN,
    hrgnSrc1 : HRGN,
    hrgnSrc2 : HRGN,
    iMode : Int) Int;

external CopyMetaFileA(
    argument0 : HMETAFILE,
    argument1 : LPCSTR) HMETAFILE;

external CopyMetaFileW(
    argument0 : HMETAFILE,
    argument1 : LPCWSTR) HMETAFILE;

external CreateBitmap(
    nWidth : Int,
    nHeight : Int,
    nPlanes : UInt,
    nBitCount : UInt,
    lpBits : RawPointer) HBITMAP;

external CreateBitmapIndirect(
    pbm : Pointer[BITMAP]) HBITMAP;

external CreateBrushIndirect(
    plbrush : Pointer[LOGBRUSH]) HBRUSH;

external CreateCompatibleBitmap(
    hdc : HDC,
    cx : Int,
    cy : Int) HBITMAP;

external CreateDiscardableBitmap(
    hdc : HDC,
    cx : Int,
    cy : Int) HBITMAP;

external CreateCompatibleDC(
    hdc : HDC) HDC;

external CreateDCA(
    pwszDriver : LPCSTR,
    pwszDevice : LPCSTR,
    pszPort : LPCSTR,
    pdm : Pointer[DEVMODEA]) HDC;

external CreateDCW(
    pwszDriver : LPCWSTR,
    pwszDevice : LPCWSTR,
    pszPort : LPCWSTR,
    pdm : Pointer[DEVMODEW]) HDC;

external CreateDIBitmap(
    hdc : HDC,
    pbmih : Pointer[BITMAPINFOHEADER],
    flInit : CULong,
    pjBits : RawPointer,
    pbmi : Pointer[BITMAPINFO],
    iUsage : UInt) HBITMAP;

external CreateDIBPatternBrush(
    h : HGLOBAL,
    iUsage : UInt) HBRUSH;

external CreateDIBPatternBrushPt(
    lpPackedDIB : RawPointer,
    iUsage : UInt) HBRUSH;

external CreateEllipticRgn(
    x1 : Int,
    y1 : Int,
    x2 : Int,
    y2 : Int) HRGN;

external CreateEllipticRgnIndirect(
    lprect : Pointer[RECT]) HRGN;

external CreateFontIndirectA(
    lplf : Pointer[LOGFONTA]) HFONT;

external CreateFontIndirectW(
    lplf : Pointer[LOGFONTW]) HFONT;

external CreateFontA(
    cHeight : Int,
    cWidth : Int,
    cEscapement : Int,
    cOrientation : Int,
    cWeight : Int,
    bItalic : CULong,
    bUnderline : CULong,
    bStrikeOut : CULong,
    iCharSet : CULong,
    iOutPrecision : CULong,
    iClipPrecision : CULong,
    iQuality : CULong,
    iPitchAndFamily : CULong,
    pszFaceName : LPCSTR) HFONT;

external CreateFontW(
    cHeight : Int,
    cWidth : Int,
    cEscapement : Int,
    cOrientation : Int,
    cWeight : Int,
    bItalic : CULong,
    bUnderline : CULong,
    bStrikeOut : CULong,
    iCharSet : CULong,
    iOutPrecision : CULong,
    iClipPrecision : CULong,
    iQuality : CULong,
    iPitchAndFamily : CULong,
    pszFaceName : LPCWSTR) HFONT;

external CreateHatchBrush(
    iHatch : Int,
    color : CULong) HBRUSH;

external CreateICA(
    pszDriver : LPCSTR,
    pszDevice : LPCSTR,
    pszPort : LPCSTR,
    pdm : Pointer[DEVMODEA]) HDC;

external CreateICW(
    pszDriver : LPCWSTR,
    pszDevice : LPCWSTR,
    pszPort : LPCWSTR,
    pdm : Pointer[DEVMODEW]) HDC;

external CreateMetaFileA(
    pszFile : LPCSTR) HDC;

external CreateMetaFileW(
    pszFile : LPCWSTR) HDC;

external CreatePalette(
    plpal : Pointer[LOGPALETTE]) HPALETTE;

external CreatePen(
    iStyle : Int,
    cWidth : Int,
    color : CULong) HPEN;

external CreatePenIndirect(
    plpen : Pointer[LOGPEN]) HPEN;

external CreatePolyPolygonRgn(
    pptl : Pointer[POINT],
    pc : Pointer[Int],
    cPoly : Int,
    iMode : Int) HRGN;

external CreatePatternBrush(
    hbm : HBITMAP) HBRUSH;

external CreateRectRgn(
    x1 : Int,
    y1 : Int,
    x2 : Int,
    y2 : Int) HRGN;

external CreateRectRgnIndirect(
    lprect : Pointer[RECT]) HRGN;

external CreateRoundRectRgn(
    x1 : Int,
    y1 : Int,
    x2 : Int,
    y2 : Int,
    w : Int,
    h : Int) HRGN;

external CreateScalableFontResourceA(
    fdwHidden : CULong,
    lpszFont : LPCSTR,
    lpszFile : LPCSTR,
    lpszPath : LPCSTR) Int;

external CreateScalableFontResourceW(
    fdwHidden : CULong,
    lpszFont : LPCWSTR,
    lpszFile : LPCWSTR,
    lpszPath : LPCWSTR) Int;

external CreateSolidBrush(
    color : CULong) HBRUSH;

external DeleteDC(
    hdc : HDC) Int;

external DeleteMetaFile(
    hmf : HMETAFILE) Int;

external DeleteObject(
    ho : HGDIOBJ) Int;

external DescribePixelFormat(
    hdc : HDC,
    iPixelFormat : Int,
    nBytes : UInt,
    ppfd : LPPIXELFORMATDESCRIPTOR) Int;

alias LPFNDEVMODE = CCodePointer[(Pointer[Struct_HWND__],Pointer[Struct_HINSTANCE__],Pointer[Struct__devicemodeA],Pointer[CChar],Pointer[CChar],Pointer[Struct__devicemodeA],Pointer[CChar],UInt),(UInt)];

alias LPFNDEVCAPS = CCodePointer[(Pointer[CChar],Pointer[CChar],UInt,Pointer[CChar],Pointer[Struct__devicemodeA]),(CULong)];

external DeviceCapabilitiesA(
    pDevice : LPCSTR,
    pPort : LPCSTR,
    fwCapability : UShort,
    pOutput : LPSTR,
    pDevMode : Pointer[DEVMODEA]) Int;

external DeviceCapabilitiesW(
    pDevice : LPCWSTR,
    pPort : LPCWSTR,
    fwCapability : UShort,
    pOutput : LPWSTR,
    pDevMode : Pointer[DEVMODEW]) Int;

external DrawEscape(
    hdc : HDC,
    iEscape : Int,
    cjIn : Int,
    lpIn : LPCSTR) Int;

external Ellipse(
    hdc : HDC,
    left : Int,
    top : Int,
    right : Int,
    bottom : Int) Int;

external EnumFontFamiliesExA(
    hdc : HDC,
    lpLogfont : LPLOGFONTA,
    lpProc : FONTENUMPROCA,
    lParam : Int64,
    dwFlags : CULong) Int;

external EnumFontFamiliesExW(
    hdc : HDC,
    lpLogfont : LPLOGFONTW,
    lpProc : FONTENUMPROCW,
    lParam : Int64,
    dwFlags : CULong) Int;

external EnumFontFamiliesA(
    hdc : HDC,
    lpLogfont : LPCSTR,
    lpProc : FONTENUMPROCA,
    lParam : Int64) Int;

external EnumFontFamiliesW(
    hdc : HDC,
    lpLogfont : LPCWSTR,
    lpProc : FONTENUMPROCW,
    lParam : Int64) Int;

external EnumFontsA(
    hdc : HDC,
    lpLogfont : LPCSTR,
    lpProc : FONTENUMPROCA,
    lParam : Int64) Int;

external EnumFontsW(
    hdc : HDC,
    lpLogfont : LPCWSTR,
    lpProc : FONTENUMPROCW,
    lParam : Int64) Int;

external EnumObjects(
    hdc : HDC,
    nType : Int,
    lpFunc : GOBJENUMPROC,
    lParam : Int64) Int;

external EqualRgn(
    hrgn1 : HRGN,
    hrgn2 : HRGN) Int;

external Escape(
    hdc : HDC,
    iEscape : Int,
    cjIn : Int,
    pvIn : LPCSTR,
    pvOut : LPVOID) Int;

external ExtEscape(
    hdc : HDC,
    iEscape : Int,
    cjInput : Int,
    lpInData : LPCSTR,
    cjOutput : Int,
    lpOutData : LPSTR) Int;

external ExcludeClipRect(
    hdc : HDC,
    left : Int,
    top : Int,
    right : Int,
    bottom : Int) Int;

external ExtCreateRegion(
    lpx : Pointer[XFORM],
    nCount : CULong,
    lpData : Pointer[RGNDATA]) HRGN;

external ExtFloodFill(
    hdc : HDC,
    x : Int,
    y : Int,
    color : CULong,
    type : UInt) Int;

external FillRgn(
    hdc : HDC,
    hrgn : HRGN,
    hbr : HBRUSH) Int;

external FloodFill(
    hdc : HDC,
    x : Int,
    y : Int,
    color : CULong) Int;

external FrameRgn(
    hdc : HDC,
    hrgn : HRGN,
    hbr : HBRUSH,
    w : Int,
    h : Int) Int;

external GetROP2(
    hdc : HDC) Int;

external GetAspectRatioFilterEx(
    hdc : HDC,
    lpsize : LPSIZE) Int;

external GetBkColor(
    hdc : HDC) CULong;

external GetDCBrushColor(
    hdc : HDC) CULong;

external GetDCPenColor(
    hdc : HDC) CULong;

external GetBkMode(
    hdc : HDC) Int;

external GetBitmapBits(
    hbit : HBITMAP,
    cb : CLong,
    lpvBits : LPVOID) CLong;

external GetBitmapDimensionEx(
    hbit : HBITMAP,
    lpsize : LPSIZE) Int;

external GetBoundsRect(
    hdc : HDC,
    lprect : LPRECT,
    flags : UInt) UInt;

external GetBrushOrgEx(
    hdc : HDC,
    lppt : LPPOINT) Int;

external GetCharWidthA(
    hdc : HDC,
    iFirst : UInt,
    iLast : UInt,
    lpBuffer : LPINT) Int;

external GetCharWidthW(
    hdc : HDC,
    iFirst : UInt,
    iLast : UInt,
    lpBuffer : LPINT) Int;

external GetCharWidth32A(
    hdc : HDC,
    iFirst : UInt,
    iLast : UInt,
    lpBuffer : LPINT) Int;

external GetCharWidth32W(
    hdc : HDC,
    iFirst : UInt,
    iLast : UInt,
    lpBuffer : LPINT) Int;

external GetCharWidthFloatA(
    hdc : HDC,
    iFirst : UInt,
    iLast : UInt,
    lpBuffer : PFLOAT) Int;

external GetCharWidthFloatW(
    hdc : HDC,
    iFirst : UInt,
    iLast : UInt,
    lpBuffer : PFLOAT) Int;

external GetCharABCWidthsA(
    hdc : HDC,
    wFirst : UInt,
    wLast : UInt,
    lpABC : LPABC) Int;

external GetCharABCWidthsW(
    hdc : HDC,
    wFirst : UInt,
    wLast : UInt,
    lpABC : LPABC) Int;

external GetCharABCWidthsFloatA(
    hdc : HDC,
    iFirst : UInt,
    iLast : UInt,
    lpABC : LPABCFLOAT) Int;

external GetCharABCWidthsFloatW(
    hdc : HDC,
    iFirst : UInt,
    iLast : UInt,
    lpABC : LPABCFLOAT) Int;

external GetClipBox(
    hdc : HDC,
    lprect : LPRECT) Int;

external GetClipRgn(
    hdc : HDC,
    hrgn : HRGN) Int;

external GetMetaRgn(
    hdc : HDC,
    hrgn : HRGN) Int;

external GetCurrentObject(
    hdc : HDC,
    type : UInt) HGDIOBJ;

external GetCurrentPositionEx(
    hdc : HDC,
    lppt : LPPOINT) Int;

external GetDeviceCaps(
    hdc : HDC,
    index : Int) Int;

external GetDIBits(
    hdc : HDC,
    hbm : HBITMAP,
    start : UInt,
    cLines : UInt,
    lpvBits : LPVOID,
    lpbmi : LPBITMAPINFO,
    usage : UInt) Int;

external GetFontData(
    hdc : HDC,
    dwTable : CULong,
    dwOffset : CULong,
    pvBuffer : PVOID,
    cjBuffer : CULong) CULong;

external GetGlyphOutlineA(
    hdc : HDC,
    uChar : UInt,
    fuFormat : UInt,
    lpgm : LPGLYPHMETRICS,
    cjBuffer : CULong,
    pvBuffer : LPVOID,
    lpmat2 : Pointer[MAT2]) CULong;

external GetGlyphOutlineW(
    hdc : HDC,
    uChar : UInt,
    fuFormat : UInt,
    lpgm : LPGLYPHMETRICS,
    cjBuffer : CULong,
    pvBuffer : LPVOID,
    lpmat2 : Pointer[MAT2]) CULong;

external GetGraphicsMode(
    hdc : HDC) Int;

external GetMapMode(
    hdc : HDC) Int;

external GetMetaFileBitsEx(
    hMF : HMETAFILE,
    cbBuffer : UInt,
    lpData : LPVOID) UInt;

external GetMetaFileA(
    lpName : LPCSTR) HMETAFILE;

external GetMetaFileW(
    lpName : LPCWSTR) HMETAFILE;

external GetNearestColor(
    hdc : HDC,
    color : CULong) CULong;

external GetNearestPaletteIndex(
    h : HPALETTE,
    color : CULong) UInt;

external GetObjectType(
    h : HGDIOBJ) CULong;

external GetOutlineTextMetricsA(
    hdc : HDC,
    cjCopy : UInt,
    potm : LPOUTLINETEXTMETRICA) UInt;

external GetOutlineTextMetricsW(
    hdc : HDC,
    cjCopy : UInt,
    potm : LPOUTLINETEXTMETRICW) UInt;

external GetPaletteEntries(
    hpal : HPALETTE,
    iStart : UInt,
    cEntries : UInt,
    pPalEntries : LPPALETTEENTRY) UInt;

external GetPixel(
    hdc : HDC,
    x : Int,
    y : Int) CULong;

external GetPixelFormat(
    hdc : HDC) Int;

external GetPolyFillMode(
    hdc : HDC) Int;

external GetRasterizerCaps(
    lpraststat : LPRASTERIZER_STATUS,
    cjBytes : UInt) Int;

external GetRandomRgn(
    hdc : HDC,
    hrgn : HRGN,
    i : Int) Int;

external GetRegionData(
    hrgn : HRGN,
    nCount : CULong,
    lpRgnData : LPRGNDATA) CULong;

external GetRgnBox(
    hrgn : HRGN,
    lprc : LPRECT) Int;

external GetStockObject(
    i : Int) HGDIOBJ;

external GetStretchBltMode(
    hdc : HDC) Int;

external GetSystemPaletteEntries(
    hdc : HDC,
    iStart : UInt,
    cEntries : UInt,
    pPalEntries : LPPALETTEENTRY) UInt;

external GetSystemPaletteUse(
    hdc : HDC) UInt;

external GetTextCharacterExtra(
    hdc : HDC) Int;

external GetTextAlign(
    hdc : HDC) UInt;

external GetTextColor(
    hdc : HDC) CULong;

external GetTextExtentPointA(
    hdc : HDC,
    lpString : LPCSTR,
    c : Int,
    lpsz : LPSIZE) Int;

external GetTextExtentPointW(
    hdc : HDC,
    lpString : LPCWSTR,
    c : Int,
    lpsz : LPSIZE) Int;

external GetTextExtentPoint32A(
    hdc : HDC,
    lpString : LPCSTR,
    c : Int,
    psizl : LPSIZE) Int;

external GetTextExtentPoint32W(
    hdc : HDC,
    lpString : LPCWSTR,
    c : Int,
    psizl : LPSIZE) Int;

external GetTextExtentExPointA(
    hdc : HDC,
    lpszString : LPCSTR,
    cchString : Int,
    nMaxExtent : Int,
    lpnFit : LPINT,
    lpnDx : LPINT,
    lpSize : LPSIZE) Int;

external GetTextExtentExPointW(
    hdc : HDC,
    lpszString : LPCWSTR,
    cchString : Int,
    nMaxExtent : Int,
    lpnFit : LPINT,
    lpnDx : LPINT,
    lpSize : LPSIZE) Int;

external GetTextCharset(
    hdc : HDC) Int;

external GetTextCharsetInfo(
    hdc : HDC,
    lpSig : LPFONTSIGNATURE,
    dwFlags : CULong) Int;

external TranslateCharsetInfo(
    lpSrc : Pointer[CULong],
    lpCs : LPCHARSETINFO,
    dwFlags : CULong) Int;

external GetFontLanguageInfo(
    hdc : HDC) CULong;

external GetCharacterPlacementA(
    hdc : HDC,
    lpString : LPCSTR,
    nCount : Int,
    nMexExtent : Int,
    lpResults : LPGCP_RESULTSA,
    dwFlags : CULong) CULong;

external GetCharacterPlacementW(
    hdc : HDC,
    lpString : LPCWSTR,
    nCount : Int,
    nMexExtent : Int,
    lpResults : LPGCP_RESULTSW,
    dwFlags : CULong) CULong;

record Struct_tagWCRANGE (
    wcLow : UShort,
    cGlyphs : UShort,
);

alias WCRANGE = Struct_tagWCRANGE;

alias PWCRANGE = Pointer[Struct_tagWCRANGE];

alias LPWCRANGE = Pointer[Struct_tagWCRANGE];

record Struct_tagGLYPHSET (
    cbThis : CULong,
    flAccel : CULong,
    cGlyphsSupported : CULong,
    cRanges : CULong,
    ranges : Array[WCRANGE,1],
);

alias GLYPHSET = Struct_tagGLYPHSET;

alias PGLYPHSET = Pointer[Struct_tagGLYPHSET];

alias LPGLYPHSET = Pointer[Struct_tagGLYPHSET];

external GetFontUnicodeRanges(
    hdc : HDC,
    lpgs : LPGLYPHSET) CULong;

external GetGlyphIndicesA(
    hdc : HDC,
    lpstr : LPCSTR,
    c : Int,
    pgi : LPWORD,
    fl : CULong) CULong;

external GetGlyphIndicesW(
    hdc : HDC,
    lpstr : LPCWSTR,
    c : Int,
    pgi : LPWORD,
    fl : CULong) CULong;

external GetTextExtentPointI(
    hdc : HDC,
    pgiIn : LPWORD,
    cgi : Int,
    psize : LPSIZE) Int;

external GetTextExtentExPointI(
    hdc : HDC,
    lpwszString : LPWORD,
    cwchString : Int,
    nMaxExtent : Int,
    lpnFit : LPINT,
    lpnDx : LPINT,
    lpSize : LPSIZE) Int;

external GetCharWidthI(
    hdc : HDC,
    giFirst : UInt,
    cgi : UInt,
    pgi : LPWORD,
    piWidths : LPINT) Int;

external GetCharABCWidthsI(
    hdc : HDC,
    giFirst : UInt,
    cgi : UInt,
    pgi : LPWORD,
    pabc : LPABC) Int;

record Struct_tagDESIGNVECTOR (
    dvReserved : CULong,
    dvNumAxes : CULong,
    dvValues : Array[CLong,16],
);

alias DESIGNVECTOR = Struct_tagDESIGNVECTOR;

alias PDESIGNVECTOR = Pointer[Struct_tagDESIGNVECTOR];

alias LPDESIGNVECTOR = Pointer[Struct_tagDESIGNVECTOR];

external AddFontResourceExA(
    name : LPCSTR,
    fl : CULong,
    res : PVOID) Int;

external AddFontResourceExW(
    name : LPCWSTR,
    fl : CULong,
    res : PVOID) Int;

external RemoveFontResourceExA(
    name : LPCSTR,
    fl : CULong,
    pdv : PVOID) Int;

external RemoveFontResourceExW(
    name : LPCWSTR,
    fl : CULong,
    pdv : PVOID) Int;

external AddFontMemResourceEx(
    pFileView : PVOID,
    cjSize : CULong,
    pvResrved : PVOID,
    pNumFonts : Pointer[CULong]) HANDLE;

external RemoveFontMemResourceEx(
    h : HANDLE) Int;

record Struct_tagAXISINFOA (
    axMinValue : CLong,
    axMaxValue : CLong,
    axAxisName : Array[CUChar,16],
);

alias AXISINFOA = Struct_tagAXISINFOA;

alias PAXISINFOA = Pointer[Struct_tagAXISINFOA];

alias LPAXISINFOA = Pointer[Struct_tagAXISINFOA];

record Struct_tagAXISINFOW (
    axMinValue : CLong,
    axMaxValue : CLong,
    axAxisName : Array[UShort,16],
);

alias AXISINFOW = Struct_tagAXISINFOW;

alias PAXISINFOW = Pointer[Struct_tagAXISINFOW];

alias LPAXISINFOW = Pointer[Struct_tagAXISINFOW];

alias AXISINFO = AXISINFOA;

alias PAXISINFO = PAXISINFOA;

alias LPAXISINFO = LPAXISINFOA;

record Struct_tagAXESLISTA (
    axlReserved : CULong,
    axlNumAxes : CULong,
    axlAxisInfo : Array[AXISINFOA,16],
);

alias AXESLISTA = Struct_tagAXESLISTA;

alias PAXESLISTA = Pointer[Struct_tagAXESLISTA];

alias LPAXESLISTA = Pointer[Struct_tagAXESLISTA];

record Struct_tagAXESLISTW (
    axlReserved : CULong,
    axlNumAxes : CULong,
    axlAxisInfo : Array[AXISINFOW,16],
);

alias AXESLISTW = Struct_tagAXESLISTW;

alias PAXESLISTW = Pointer[Struct_tagAXESLISTW];

alias LPAXESLISTW = Pointer[Struct_tagAXESLISTW];

alias AXESLIST = AXESLISTA;

alias PAXESLIST = PAXESLISTA;

alias LPAXESLIST = LPAXESLISTA;

record Struct_tagENUMLOGFONTEXDVA (
    elfEnumLogfontEx : ENUMLOGFONTEXA,
    elfDesignVector : DESIGNVECTOR,
);

alias ENUMLOGFONTEXDVA = Struct_tagENUMLOGFONTEXDVA;

alias PENUMLOGFONTEXDVA = Pointer[Struct_tagENUMLOGFONTEXDVA];

alias LPENUMLOGFONTEXDVA = Pointer[Struct_tagENUMLOGFONTEXDVA];

record Struct_tagENUMLOGFONTEXDVW (
    elfEnumLogfontEx : ENUMLOGFONTEXW,
    elfDesignVector : DESIGNVECTOR,
);

alias ENUMLOGFONTEXDVW = Struct_tagENUMLOGFONTEXDVW;

alias PENUMLOGFONTEXDVW = Pointer[Struct_tagENUMLOGFONTEXDVW];

alias LPENUMLOGFONTEXDVW = Pointer[Struct_tagENUMLOGFONTEXDVW];

alias ENUMLOGFONTEXDV = ENUMLOGFONTEXDVA;

alias PENUMLOGFONTEXDV = PENUMLOGFONTEXDVA;

alias LPENUMLOGFONTEXDV = LPENUMLOGFONTEXDVA;

external CreateFontIndirectExA(
    argument0 : Pointer[ENUMLOGFONTEXDVA]) HFONT;

external CreateFontIndirectExW(
    argument0 : Pointer[ENUMLOGFONTEXDVW]) HFONT;

record Struct_tagENUMTEXTMETRICA (
    etmNewTextMetricEx : NEWTEXTMETRICEXA,
    etmAxesList : AXESLISTA,
);

alias ENUMTEXTMETRICA = Struct_tagENUMTEXTMETRICA;

alias PENUMTEXTMETRICA = Pointer[Struct_tagENUMTEXTMETRICA];

alias LPENUMTEXTMETRICA = Pointer[Struct_tagENUMTEXTMETRICA];

record Struct_tagENUMTEXTMETRICW (
    etmNewTextMetricEx : NEWTEXTMETRICEXW,
    etmAxesList : AXESLISTW,
);

alias ENUMTEXTMETRICW = Struct_tagENUMTEXTMETRICW;

alias PENUMTEXTMETRICW = Pointer[Struct_tagENUMTEXTMETRICW];

alias LPENUMTEXTMETRICW = Pointer[Struct_tagENUMTEXTMETRICW];

alias ENUMTEXTMETRIC = ENUMTEXTMETRICA;

alias PENUMTEXTMETRIC = PENUMTEXTMETRICA;

alias LPENUMTEXTMETRIC = LPENUMTEXTMETRICA;

external GetViewportExtEx(
    hdc : HDC,
    lpsize : LPSIZE) Int;

external GetViewportOrgEx(
    hdc : HDC,
    lppoint : LPPOINT) Int;

external GetWindowExtEx(
    hdc : HDC,
    lpsize : LPSIZE) Int;

external GetWindowOrgEx(
    hdc : HDC,
    lppoint : LPPOINT) Int;

external IntersectClipRect(
    hdc : HDC,
    left : Int,
    top : Int,
    right : Int,
    bottom : Int) Int;

external InvertRgn(
    hdc : HDC,
    hrgn : HRGN) Int;

external LineDDA(
    xStart : Int,
    yStart : Int,
    xEnd : Int,
    yEnd : Int,
    lpProc : LINEDDAPROC,
    data : Int64) Int;

external LineTo(
    hdc : HDC,
    x : Int,
    y : Int) Int;

external MaskBlt(
    hdcDest : HDC,
    xDest : Int,
    yDest : Int,
    width : Int,
    height : Int,
    hdcSrc : HDC,
    xSrc : Int,
    ySrc : Int,
    hbmMask : HBITMAP,
    xMask : Int,
    yMask : Int,
    rop : CULong) Int;

external PlgBlt(
    hdcDest : HDC,
    lpPoint : Pointer[POINT],
    hdcSrc : HDC,
    xSrc : Int,
    ySrc : Int,
    width : Int,
    height : Int,
    hbmMask : HBITMAP,
    xMask : Int,
    yMask : Int) Int;

external OffsetClipRgn(
    hdc : HDC,
    x : Int,
    y : Int) Int;

external OffsetRgn(
    hrgn : HRGN,
    x : Int,
    y : Int) Int;

external PatBlt(
    hdc : HDC,
    x : Int,
    y : Int,
    w : Int,
    h : Int,
    rop : CULong) Int;

external Pie(
    hdc : HDC,
    left : Int,
    top : Int,
    right : Int,
    bottom : Int,
    xr1 : Int,
    yr1 : Int,
    xr2 : Int,
    yr2 : Int) Int;

external PlayMetaFile(
    hdc : HDC,
    hmf : HMETAFILE) Int;

external PaintRgn(
    hdc : HDC,
    hrgn : HRGN) Int;

external PolyPolygon(
    hdc : HDC,
    apt : Pointer[POINT],
    asz : Pointer[Int],
    csz : Int) Int;

external PtInRegion(
    hrgn : HRGN,
    x : Int,
    y : Int) Int;

external PtVisible(
    hdc : HDC,
    x : Int,
    y : Int) Int;

external RectInRegion(
    hrgn : HRGN,
    lprect : Pointer[RECT]) Int;

external RectVisible(
    hdc : HDC,
    lprect : Pointer[RECT]) Int;

external Rectangle(
    hdc : HDC,
    left : Int,
    top : Int,
    right : Int,
    bottom : Int) Int;

external RestoreDC(
    hdc : HDC,
    nSavedDC : Int) Int;

external ResetDCA(
    hdc : HDC,
    lpdm : Pointer[DEVMODEA]) HDC;

external ResetDCW(
    hdc : HDC,
    lpdm : Pointer[DEVMODEW]) HDC;

external RealizePalette(
    hdc : HDC) UInt;

external RemoveFontResourceA(
    lpFileName : LPCSTR) Int;

external RemoveFontResourceW(
    lpFileName : LPCWSTR) Int;

external RoundRect(
    hdc : HDC,
    left : Int,
    top : Int,
    right : Int,
    bottom : Int,
    width : Int,
    height : Int) Int;

external ResizePalette(
    hpal : HPALETTE,
    n : UInt) Int;

external SaveDC(
    hdc : HDC) Int;

external SelectClipRgn(
    hdc : HDC,
    hrgn : HRGN) Int;

external ExtSelectClipRgn(
    hdc : HDC,
    hrgn : HRGN,
    mode : Int) Int;

external SetMetaRgn(
    hdc : HDC) Int;

external SelectObject(
    hdc : HDC,
    h : HGDIOBJ) HGDIOBJ;

external SelectPalette(
    hdc : HDC,
    hPal : HPALETTE,
    bForceBkgd : Int) HPALETTE;

external SetBkColor(
    hdc : HDC,
    color : CULong) CULong;

external SetDCBrushColor(
    hdc : HDC,
    color : CULong) CULong;

external SetDCPenColor(
    hdc : HDC,
    color : CULong) CULong;

external SetBkMode(
    hdc : HDC,
    mode : Int) Int;

external SetBitmapBits(
    hbm : HBITMAP,
    cb : CULong,
    pvBits : RawPointer) CLong;

external SetBoundsRect(
    hdc : HDC,
    lprect : Pointer[RECT],
    flags : UInt) UInt;

external SetDIBits(
    hdc : HDC,
    hbm : HBITMAP,
    start : UInt,
    cLines : UInt,
    lpBits : RawPointer,
    lpbmi : Pointer[BITMAPINFO],
    ColorUse : UInt) Int;

external SetDIBitsToDevice(
    hdc : HDC,
    xDest : Int,
    yDest : Int,
    w : CULong,
    h : CULong,
    xSrc : Int,
    ySrc : Int,
    StartScan : UInt,
    cLines : UInt,
    lpvBits : RawPointer,
    lpbmi : Pointer[BITMAPINFO],
    ColorUse : UInt) Int;

external SetMapperFlags(
    hdc : HDC,
    flags : CULong) CULong;

external SetGraphicsMode(
    hdc : HDC,
    iMode : Int) Int;

external SetMapMode(
    hdc : HDC,
    iMode : Int) Int;

external SetLayout(
    hdc : HDC,
    l : CULong) CULong;

external GetLayout(
    hdc : HDC) CULong;

external SetMetaFileBitsEx(
    cbBuffer : UInt,
    lpData : Pointer[CUChar]) HMETAFILE;

external SetPaletteEntries(
    hpal : HPALETTE,
    iStart : UInt,
    cEntries : UInt,
    pPalEntries : Pointer[PALETTEENTRY]) UInt;

external SetPixel(
    hdc : HDC,
    x : Int,
    y : Int,
    color : CULong) CULong;

external SetPixelV(
    hdc : HDC,
    x : Int,
    y : Int,
    color : CULong) Int;

external SetPixelFormat(
    hdc : HDC,
    format : Int,
    ppfd : Pointer[PIXELFORMATDESCRIPTOR]) Int;

external SetPolyFillMode(
    hdc : HDC,
    mode : Int) Int;

external StretchBlt(
    hdcDest : HDC,
    xDest : Int,
    yDest : Int,
    wDest : Int,
    hDest : Int,
    hdcSrc : HDC,
    xSrc : Int,
    ySrc : Int,
    wSrc : Int,
    hSrc : Int,
    rop : CULong) Int;

external SetRectRgn(
    hrgn : HRGN,
    left : Int,
    top : Int,
    right : Int,
    bottom : Int) Int;

external StretchDIBits(
    hdc : HDC,
    xDest : Int,
    yDest : Int,
    DestWidth : Int,
    DestHeight : Int,
    xSrc : Int,
    ySrc : Int,
    SrcWidth : Int,
    SrcHeight : Int,
    lpBits : RawPointer,
    lpbmi : Pointer[BITMAPINFO],
    iUsage : UInt,
    rop : CULong) Int;

external SetROP2(
    hdc : HDC,
    rop2 : Int) Int;

external SetStretchBltMode(
    hdc : HDC,
    mode : Int) Int;

external SetSystemPaletteUse(
    hdc : HDC,
    use : UInt) UInt;

external SetTextCharacterExtra(
    hdc : HDC,
    extra : Int) Int;

external SetTextColor(
    hdc : HDC,
    color : CULong) CULong;

external SetTextAlign(
    hdc : HDC,
    align : UInt) UInt;

external SetTextJustification(
    hdc : HDC,
    extra : Int,
    count : Int) Int;

external UpdateColors(
    hdc : HDC) Int;

alias COLOR16 = UShort;

record Struct__TRIVERTEX (
    x : CLong,
    y : CLong,
    Red : UShort,
    Green : UShort,
    Blue : UShort,
    Alpha : UShort,
);

alias TRIVERTEX = Struct__TRIVERTEX;

alias PTRIVERTEX = Pointer[Struct__TRIVERTEX];

alias LPTRIVERTEX = Pointer[Struct__TRIVERTEX];

record Struct__GRADIENT_TRIANGLE (
    Vertex1 : CULong,
    Vertex2 : CULong,
    Vertex3 : CULong,
);

alias GRADIENT_TRIANGLE = Struct__GRADIENT_TRIANGLE;

alias PGRADIENT_TRIANGLE = Pointer[Struct__GRADIENT_TRIANGLE];

alias LPGRADIENT_TRIANGLE = Pointer[Struct__GRADIENT_TRIANGLE];

record Struct__GRADIENT_RECT (
    UpperLeft : CULong,
    LowerRight : CULong,
);

alias GRADIENT_RECT = Struct__GRADIENT_RECT;

alias PGRADIENT_RECT = Pointer[Struct__GRADIENT_RECT];

alias LPGRADIENT_RECT = Pointer[Struct__GRADIENT_RECT];

record Struct__BLENDFUNCTION (
    BlendOp : CUChar,
    BlendFlags : CUChar,
    SourceConstantAlpha : CUChar,
    AlphaFormat : CUChar,
);

alias BLENDFUNCTION = Struct__BLENDFUNCTION;

alias PBLENDFUNCTION = Pointer[Struct__BLENDFUNCTION];

external AlphaBlend(
    hdcDest : HDC,
    xoriginDest : Int,
    yoriginDest : Int,
    wDest : Int,
    hDest : Int,
    hdcSrc : HDC,
    xoriginSrc : Int,
    yoriginSrc : Int,
    wSrc : Int,
    hSrc : Int,
    ftn : BLENDFUNCTION) Int;

external TransparentBlt(
    hdcDest : HDC,
    xoriginDest : Int,
    yoriginDest : Int,
    wDest : Int,
    hDest : Int,
    hdcSrc : HDC,
    xoriginSrc : Int,
    yoriginSrc : Int,
    wSrc : Int,
    hSrc : Int,
    crTransparent : UInt) Int;

external GradientFill(
    hdc : HDC,
    pVertex : PTRIVERTEX,
    nVertex : CULong,
    pMesh : PVOID,
    nMesh : CULong,
    ulMode : CULong) Int;

external PlayMetaFileRecord(
    hdc : HDC,
    lpHandleTable : LPHANDLETABLE,
    lpMR : LPMETARECORD,
    noObjs : UInt) Int;

alias MFENUMPROC = CCodePointer[(Pointer[Struct_HDC__],Pointer[Struct_tagHANDLETABLE],Pointer[Struct_tagMETARECORD],Int,Int64),(Int)];

external EnumMetaFile(
    hdc : HDC,
    hmf : HMETAFILE,
    proc : MFENUMPROC,
    param : Int64) Int;

alias ENHMFENUMPROC = CCodePointer[(Pointer[Struct_HDC__],Pointer[Struct_tagHANDLETABLE],Pointer[Struct_tagENHMETARECORD],Int,Int64),(Int)];

external CloseEnhMetaFile(
    hdc : HDC) HENHMETAFILE;

external CopyEnhMetaFileA(
    hEnh : HENHMETAFILE,
    lpFileName : LPCSTR) HENHMETAFILE;

external CopyEnhMetaFileW(
    hEnh : HENHMETAFILE,
    lpFileName : LPCWSTR) HENHMETAFILE;

external CreateEnhMetaFileA(
    hdc : HDC,
    lpFilename : LPCSTR,
    lprc : Pointer[RECT],
    lpDesc : LPCSTR) HDC;

external CreateEnhMetaFileW(
    hdc : HDC,
    lpFilename : LPCWSTR,
    lprc : Pointer[RECT],
    lpDesc : LPCWSTR) HDC;

external DeleteEnhMetaFile(
    hmf : HENHMETAFILE) Int;

external EnumEnhMetaFile(
    hdc : HDC,
    hmf : HENHMETAFILE,
    proc : ENHMFENUMPROC,
    param : LPVOID,
    lpRect : Pointer[RECT]) Int;

external GetEnhMetaFileA(
    lpName : LPCSTR) HENHMETAFILE;

external GetEnhMetaFileW(
    lpName : LPCWSTR) HENHMETAFILE;

external GetEnhMetaFileBits(
    hEMF : HENHMETAFILE,
    nSize : UInt,
    lpData : LPBYTE) UInt;

external GetEnhMetaFileDescriptionA(
    hemf : HENHMETAFILE,
    cchBuffer : UInt,
    lpDescription : LPSTR) UInt;

external GetEnhMetaFileDescriptionW(
    hemf : HENHMETAFILE,
    cchBuffer : UInt,
    lpDescription : LPWSTR) UInt;

external GetEnhMetaFileHeader(
    hemf : HENHMETAFILE,
    nSize : UInt,
    lpEnhMetaHeader : LPENHMETAHEADER) UInt;

external GetEnhMetaFilePaletteEntries(
    hemf : HENHMETAFILE,
    nNumEntries : UInt,
    lpPaletteEntries : LPPALETTEENTRY) UInt;

external GetEnhMetaFilePixelFormat(
    hemf : HENHMETAFILE,
    cbBuffer : UInt,
    ppfd : Pointer[PIXELFORMATDESCRIPTOR]) UInt;

external GetWinMetaFileBits(
    hemf : HENHMETAFILE,
    cbData16 : UInt,
    pData16 : LPBYTE,
    iMapMode : Int,
    hdcRef : HDC) UInt;

external PlayEnhMetaFile(
    hdc : HDC,
    hmf : HENHMETAFILE,
    lprect : Pointer[RECT]) Int;

external PlayEnhMetaFileRecord(
    hdc : HDC,
    pht : LPHANDLETABLE,
    pmr : Pointer[ENHMETARECORD],
    cht : UInt) Int;

external SetEnhMetaFileBits(
    nSize : UInt,
    pb : Pointer[CUChar]) HENHMETAFILE;

external SetWinMetaFileBits(
    nSize : UInt,
    lpMeta16Data : Pointer[CUChar],
    hdcRef : HDC,
    lpMFP : Pointer[METAFILEPICT]) HENHMETAFILE;

external GdiComment(
    hdc : HDC,
    nSize : UInt,
    lpData : Pointer[CUChar]) Int;

external GetTextMetricsA(
    hdc : HDC,
    lptm : LPTEXTMETRICA) Int;

external GetTextMetricsW(
    hdc : HDC,
    lptm : LPTEXTMETRICW) Int;

record Struct_tagDIBSECTION (
    dsBm : BITMAP,
    dsBmih : BITMAPINFOHEADER,
    dsBitfields : Array[CULong,3],
    dshSection : HANDLE,
    dsOffset : CULong,
);

alias DIBSECTION = Struct_tagDIBSECTION;

alias LPDIBSECTION = Pointer[Struct_tagDIBSECTION];

alias PDIBSECTION = Pointer[Struct_tagDIBSECTION];

external AngleArc(
    hdc : HDC,
    x : Int,
    y : Int,
    r : CULong,
    StartAngle : Float,
    SweepAngle : Float) Int;

external PolyPolyline(
    hdc : HDC,
    apt : Pointer[POINT],
    asz : Pointer[CULong],
    csz : CULong) Int;

external GetWorldTransform(
    hdc : HDC,
    lpxf : LPXFORM) Int;

external SetWorldTransform(
    hdc : HDC,
    lpxf : Pointer[XFORM]) Int;

external ModifyWorldTransform(
    hdc : HDC,
    lpxf : Pointer[XFORM],
    mode : CULong) Int;

external CombineTransform(
    lpxfOut : LPXFORM,
    lpxf1 : Pointer[XFORM],
    lpxf2 : Pointer[XFORM]) Int;

external CreateDIBSection(
    hdc : HDC,
    lpbmi : Pointer[BITMAPINFO],
    usage : UInt,
    ppvBits : Pointer[RawPointer],
    hSection : HANDLE,
    offset : CULong) HBITMAP;

external GetDIBColorTable(
    hdc : HDC,
    iStart : UInt,
    cEntries : UInt,
    prgbq : Pointer[RGBQUAD]) UInt;

external SetDIBColorTable(
    hdc : HDC,
    iStart : UInt,
    cEntries : UInt,
    prgbq : Pointer[RGBQUAD]) UInt;

record Struct_tagCOLORADJUSTMENT (
    caSize : UShort,
    caFlags : UShort,
    caIlluminantIndex : UShort,
    caRedGamma : UShort,
    caGreenGamma : UShort,
    caBlueGamma : UShort,
    caReferenceBlack : UShort,
    caReferenceWhite : UShort,
    caContrast : Short,
    caBrightness : Short,
    caColorfulness : Short,
    caRedGreenTint : Short,
);

alias COLORADJUSTMENT = Struct_tagCOLORADJUSTMENT;

alias PCOLORADJUSTMENT = Pointer[Struct_tagCOLORADJUSTMENT];

alias LPCOLORADJUSTMENT = Pointer[Struct_tagCOLORADJUSTMENT];

external SetColorAdjustment(
    hdc : HDC,
    lpca : Pointer[COLORADJUSTMENT]) Int;

external GetColorAdjustment(
    hdc : HDC,
    lpca : LPCOLORADJUSTMENT) Int;

external CreateHalftonePalette(
    hdc : HDC) HPALETTE;

alias ABORTPROC = CCodePointer[(Pointer[Struct_HDC__],Int),(Int)];

record Struct__DOCINFOA (
    cbSize : Int,
    lpszDocName : LPCSTR,
    lpszOutput : LPCSTR,
    lpszDatatype : LPCSTR,
    fwType : CULong,
);

alias DOCINFOA = Struct__DOCINFOA;

alias LPDOCINFOA = Pointer[Struct__DOCINFOA];

record Struct__DOCINFOW (
    cbSize : Int,
    lpszDocName : LPCWSTR,
    lpszOutput : LPCWSTR,
    lpszDatatype : LPCWSTR,
    fwType : CULong,
);

alias DOCINFOW = Struct__DOCINFOW;

alias LPDOCINFOW = Pointer[Struct__DOCINFOW];

alias DOCINFO = DOCINFOA;

alias LPDOCINFO = LPDOCINFOA;

external StartDocA(
    hdc : HDC,
    lpdi : Pointer[DOCINFOA]) Int;

external StartDocW(
    hdc : HDC,
    lpdi : Pointer[DOCINFOW]) Int;

external EndDoc(
    hdc : HDC) Int;

external StartPage(
    hdc : HDC) Int;

external EndPage(
    hdc : HDC) Int;

external AbortDoc(
    hdc : HDC) Int;

external SetAbortProc(
    hdc : HDC,
    proc : ABORTPROC) Int;

external AbortPath(
    hdc : HDC) Int;

external ArcTo(
    hdc : HDC,
    left : Int,
    top : Int,
    right : Int,
    bottom : Int,
    xr1 : Int,
    yr1 : Int,
    xr2 : Int,
    yr2 : Int) Int;

external BeginPath(
    hdc : HDC) Int;

external CloseFigure(
    hdc : HDC) Int;

external EndPath(
    hdc : HDC) Int;

external FillPath(
    hdc : HDC) Int;

external FlattenPath(
    hdc : HDC) Int;

external GetPath(
    hdc : HDC,
    apt : LPPOINT,
    aj : LPBYTE,
    cpt : Int) Int;

external PathToRegion(
    hdc : HDC) HRGN;

external PolyDraw(
    hdc : HDC,
    apt : Pointer[POINT],
    aj : Pointer[CUChar],
    cpt : Int) Int;

external SelectClipPath(
    hdc : HDC,
    mode : Int) Int;

external SetArcDirection(
    hdc : HDC,
    dir : Int) Int;

external SetMiterLimit(
    hdc : HDC,
    limit : Float,
    old : PFLOAT) Int;

external StrokeAndFillPath(
    hdc : HDC) Int;

external StrokePath(
    hdc : HDC) Int;

external WidenPath(
    hdc : HDC) Int;

external ExtCreatePen(
    iPenStyle : CULong,
    cWidth : CULong,
    plbrush : Pointer[LOGBRUSH],
    cStyle : CULong,
    pstyle : Pointer[CULong]) HPEN;

external GetMiterLimit(
    hdc : HDC,
    plimit : PFLOAT) Int;

external GetArcDirection(
    hdc : HDC) Int;

external GetObjectA(
    h : HANDLE,
    c : Int,
    pv : LPVOID) Int;

external GetObjectW(
    h : HANDLE,
    c : Int,
    pv : LPVOID) Int;

external MoveToEx(
    hdc : HDC,
    x : Int,
    y : Int,
    lppt : LPPOINT) Int;

external TextOutA(
    hdc : HDC,
    x : Int,
    y : Int,
    lpString : LPCSTR,
    c : Int) Int;

external TextOutW(
    hdc : HDC,
    x : Int,
    y : Int,
    lpString : LPCWSTR,
    c : Int) Int;

external ExtTextOutA(
    hdc : HDC,
    x : Int,
    y : Int,
    options : UInt,
    lprect : Pointer[RECT],
    lpString : LPCSTR,
    c : UInt,
    lpDx : Pointer[Int]) Int;

external ExtTextOutW(
    hdc : HDC,
    x : Int,
    y : Int,
    options : UInt,
    lprect : Pointer[RECT],
    lpString : LPCWSTR,
    c : UInt,
    lpDx : Pointer[Int]) Int;

external PolyTextOutA(
    hdc : HDC,
    ppt : Pointer[POLYTEXTA],
    nstrings : Int) Int;

external PolyTextOutW(
    hdc : HDC,
    ppt : Pointer[POLYTEXTW],
    nstrings : Int) Int;

external CreatePolygonRgn(
    pptl : Pointer[POINT],
    cPoint : Int,
    iMode : Int) HRGN;

external DPtoLP(
    hdc : HDC,
    lppt : LPPOINT,
    c : Int) Int;

external LPtoDP(
    hdc : HDC,
    lppt : LPPOINT,
    c : Int) Int;

external Polygon(
    hdc : HDC,
    apt : Pointer[POINT],
    cpt : Int) Int;

external Polyline(
    hdc : HDC,
    apt : Pointer[POINT],
    cpt : Int) Int;

external PolyBezier(
    hdc : HDC,
    apt : Pointer[POINT],
    cpt : CULong) Int;

external PolyBezierTo(
    hdc : HDC,
    apt : Pointer[POINT],
    cpt : CULong) Int;

external PolylineTo(
    hdc : HDC,
    apt : Pointer[POINT],
    cpt : CULong) Int;

external SetViewportExtEx(
    hdc : HDC,
    x : Int,
    y : Int,
    lpsz : LPSIZE) Int;

external SetViewportOrgEx(
    hdc : HDC,
    x : Int,
    y : Int,
    lppt : LPPOINT) Int;

external SetWindowExtEx(
    hdc : HDC,
    x : Int,
    y : Int,
    lpsz : LPSIZE) Int;

external SetWindowOrgEx(
    hdc : HDC,
    x : Int,
    y : Int,
    lppt : LPPOINT) Int;

external OffsetViewportOrgEx(
    hdc : HDC,
    x : Int,
    y : Int,
    lppt : LPPOINT) Int;

external OffsetWindowOrgEx(
    hdc : HDC,
    x : Int,
    y : Int,
    lppt : LPPOINT) Int;

external ScaleViewportExtEx(
    hdc : HDC,
    xn : Int,
    dx : Int,
    yn : Int,
    yd : Int,
    lpsz : LPSIZE) Int;

external ScaleWindowExtEx(
    hdc : HDC,
    xn : Int,
    xd : Int,
    yn : Int,
    yd : Int,
    lpsz : LPSIZE) Int;

external SetBitmapDimensionEx(
    hbm : HBITMAP,
    w : Int,
    h : Int,
    lpsz : LPSIZE) Int;

external SetBrushOrgEx(
    hdc : HDC,
    x : Int,
    y : Int,
    lppt : LPPOINT) Int;

external GetTextFaceA(
    hdc : HDC,
    c : Int,
    lpName : LPSTR) Int;

external GetTextFaceW(
    hdc : HDC,
    c : Int,
    lpName : LPWSTR) Int;

record Struct_tagKERNINGPAIR (
    wFirst : UShort,
    wSecond : UShort,
    iKernAmount : Int,
);

alias KERNINGPAIR = Struct_tagKERNINGPAIR;

alias LPKERNINGPAIR = Pointer[Struct_tagKERNINGPAIR];

external GetKerningPairsA(
    hdc : HDC,
    nPairs : CULong,
    lpKernPair : LPKERNINGPAIR) CULong;

external GetKerningPairsW(
    hdc : HDC,
    nPairs : CULong,
    lpKernPair : LPKERNINGPAIR) CULong;

external GetDCOrgEx(
    hdc : HDC,
    lppt : LPPOINT) Int;

external FixBrushOrgEx(
    hdc : HDC,
    x : Int,
    y : Int,
    ptl : LPPOINT) Int;

external UnrealizeObject(
    h : HGDIOBJ) Int;

external GdiFlush() Int;

external GdiSetBatchLimit(
    dw : CULong) CULong;

external GdiGetBatchLimit() CULong;

alias ICMENUMPROCA = CCodePointer[(Pointer[CChar],Int64),(Int)];

alias ICMENUMPROCW = CCodePointer[(Pointer[UShort],Int64),(Int)];

external SetICMMode(
    hdc : HDC,
    mode : Int) Int;

external CheckColorsInGamut(
    hdc : HDC,
    lpRGBTriple : LPVOID,
    dlpBuffer : LPVOID,
    nCount : CULong) Int;

external GetColorSpace(
    hdc : HDC) HCOLORSPACE;

external GetLogColorSpaceA(
    hColorSpace : HCOLORSPACE,
    lpBuffer : LPLOGCOLORSPACEA,
    nSize : CULong) Int;

external GetLogColorSpaceW(
    hColorSpace : HCOLORSPACE,
    lpBuffer : LPLOGCOLORSPACEW,
    nSize : CULong) Int;

external CreateColorSpaceA(
    lplcs : LPLOGCOLORSPACEA) HCOLORSPACE;

external CreateColorSpaceW(
    lplcs : LPLOGCOLORSPACEW) HCOLORSPACE;

external SetColorSpace(
    hdc : HDC,
    hcs : HCOLORSPACE) HCOLORSPACE;

external DeleteColorSpace(
    hcs : HCOLORSPACE) Int;

external GetICMProfileA(
    hdc : HDC,
    pBufSize : LPDWORD,
    pszFilename : LPSTR) Int;

external GetICMProfileW(
    hdc : HDC,
    pBufSize : LPDWORD,
    pszFilename : LPWSTR) Int;

external SetICMProfileA(
    hdc : HDC,
    lpFileName : LPSTR) Int;

external SetICMProfileW(
    hdc : HDC,
    lpFileName : LPWSTR) Int;

external GetDeviceGammaRamp(
    hdc : HDC,
    lpRamp : LPVOID) Int;

external SetDeviceGammaRamp(
    hdc : HDC,
    lpRamp : LPVOID) Int;

external ColorMatchToTarget(
    hdc : HDC,
    hdcTarget : HDC,
    action : CULong) Int;

external EnumICMProfilesA(
    hdc : HDC,
    proc : ICMENUMPROCA,
    param : Int64) Int;

external EnumICMProfilesW(
    hdc : HDC,
    proc : ICMENUMPROCW,
    param : Int64) Int;

external UpdateICMRegKeyA(
    reserved : CULong,
    lpszCMID : LPSTR,
    lpszFileName : LPSTR,
    command : UInt) Int;

external UpdateICMRegKeyW(
    reserved : CULong,
    lpszCMID : LPWSTR,
    lpszFileName : LPWSTR,
    command : UInt) Int;

external ColorCorrectPalette(
    hdc : HDC,
    hPal : HPALETTE,
    deFirst : CULong,
    num : CULong) Int;

record Struct_tagEMR (
    iType : CULong,
    nSize : CULong,
);

alias EMR = Struct_tagEMR;

alias PEMR = Pointer[Struct_tagEMR];

record Struct_tagEMRTEXT (
    ptlReference : POINTL,
    nChars : CULong,
    offString : CULong,
    fOptions : CULong,
    rcl : RECTL,
    offDx : CULong,
);

alias EMRTEXT = Struct_tagEMRTEXT;

alias PEMRTEXT = Pointer[Struct_tagEMRTEXT];

record Struct_tagABORTPATH (
    emr : EMR,
);

alias EMRABORTPATH = Struct_tagABORTPATH;

alias PEMRABORTPATH = Pointer[Struct_tagABORTPATH];

alias EMRBEGINPATH = Struct_tagABORTPATH;

alias PEMRBEGINPATH = Pointer[Struct_tagABORTPATH];

alias EMRENDPATH = Struct_tagABORTPATH;

alias PEMRENDPATH = Pointer[Struct_tagABORTPATH];

alias EMRCLOSEFIGURE = Struct_tagABORTPATH;

alias PEMRCLOSEFIGURE = Pointer[Struct_tagABORTPATH];

alias EMRFLATTENPATH = Struct_tagABORTPATH;

alias PEMRFLATTENPATH = Pointer[Struct_tagABORTPATH];

alias EMRWIDENPATH = Struct_tagABORTPATH;

alias PEMRWIDENPATH = Pointer[Struct_tagABORTPATH];

alias EMRSETMETARGN = Struct_tagABORTPATH;

alias PEMRSETMETARGN = Pointer[Struct_tagABORTPATH];

alias EMRSAVEDC = Struct_tagABORTPATH;

alias PEMRSAVEDC = Pointer[Struct_tagABORTPATH];

alias EMRREALIZEPALETTE = Struct_tagABORTPATH;

alias PEMRREALIZEPALETTE = Pointer[Struct_tagABORTPATH];

record Struct_tagEMRSELECTCLIPPATH (
    emr : EMR,
    iMode : CULong,
);

alias EMRSELECTCLIPPATH = Struct_tagEMRSELECTCLIPPATH;

alias PEMRSELECTCLIPPATH = Pointer[Struct_tagEMRSELECTCLIPPATH];

alias EMRSETBKMODE = Struct_tagEMRSELECTCLIPPATH;

alias PEMRSETBKMODE = Pointer[Struct_tagEMRSELECTCLIPPATH];

alias EMRSETMAPMODE = Struct_tagEMRSELECTCLIPPATH;

alias PEMRSETMAPMODE = Pointer[Struct_tagEMRSELECTCLIPPATH];

alias EMRSETLAYOUT = Struct_tagEMRSELECTCLIPPATH;

alias PEMRSETLAYOUT = Pointer[Struct_tagEMRSELECTCLIPPATH];

alias EMRSETPOLYFILLMODE = Struct_tagEMRSELECTCLIPPATH;

alias PEMRSETPOLYFILLMODE = Pointer[Struct_tagEMRSELECTCLIPPATH];

alias EMRSETROP2 = Struct_tagEMRSELECTCLIPPATH;

alias PEMRSETROP2 = Pointer[Struct_tagEMRSELECTCLIPPATH];

alias EMRSETSTRETCHBLTMODE = Struct_tagEMRSELECTCLIPPATH;

alias PEMRSETSTRETCHBLTMODE = Pointer[Struct_tagEMRSELECTCLIPPATH];

alias EMRSETICMMODE = Struct_tagEMRSELECTCLIPPATH;

alias PEMRSETICMMODE = Pointer[Struct_tagEMRSELECTCLIPPATH];

alias EMRSETTEXTALIGN = Struct_tagEMRSELECTCLIPPATH;

alias PEMRSETTEXTALIGN = Pointer[Struct_tagEMRSELECTCLIPPATH];

record Struct_tagEMRSETMITERLIMIT (
    emr : EMR,
    eMiterLimit : Float,
);

alias EMRSETMITERLIMIT = Struct_tagEMRSETMITERLIMIT;

alias PEMRSETMITERLIMIT = Pointer[Struct_tagEMRSETMITERLIMIT];

record Struct_tagEMRRESTOREDC (
    emr : EMR,
    iRelative : CLong,
);

alias EMRRESTOREDC = Struct_tagEMRRESTOREDC;

alias PEMRRESTOREDC = Pointer[Struct_tagEMRRESTOREDC];

record Struct_tagEMRSETARCDIRECTION (
    emr : EMR,
    iArcDirection : CULong,
);

alias EMRSETARCDIRECTION = Struct_tagEMRSETARCDIRECTION;

alias PEMRSETARCDIRECTION = Pointer[Struct_tagEMRSETARCDIRECTION];

record Struct_tagEMRSETMAPPERFLAGS (
    emr : EMR,
    dwFlags : CULong,
);

alias EMRSETMAPPERFLAGS = Struct_tagEMRSETMAPPERFLAGS;

alias PEMRSETMAPPERFLAGS = Pointer[Struct_tagEMRSETMAPPERFLAGS];

record Struct_tagEMRSETTEXTCOLOR (
    emr : EMR,
    crColor : CULong,
);

alias EMRSETBKCOLOR = Struct_tagEMRSETTEXTCOLOR;

alias PEMRSETBKCOLOR = Pointer[Struct_tagEMRSETTEXTCOLOR];

alias EMRSETTEXTCOLOR = Struct_tagEMRSETTEXTCOLOR;

alias PEMRSETTEXTCOLOR = Pointer[Struct_tagEMRSETTEXTCOLOR];

record Struct_tagEMRSELECTOBJECT (
    emr : EMR,
    ihObject : CULong,
);

alias EMRSELECTOBJECT = Struct_tagEMRSELECTOBJECT;

alias PEMRSELECTOBJECT = Pointer[Struct_tagEMRSELECTOBJECT];

alias EMRDELETEOBJECT = Struct_tagEMRSELECTOBJECT;

alias PEMRDELETEOBJECT = Pointer[Struct_tagEMRSELECTOBJECT];

record Struct_tagEMRSELECTPALETTE (
    emr : EMR,
    ihPal : CULong,
);

alias EMRSELECTPALETTE = Struct_tagEMRSELECTPALETTE;

alias PEMRSELECTPALETTE = Pointer[Struct_tagEMRSELECTPALETTE];

record Struct_tagEMRRESIZEPALETTE (
    emr : EMR,
    ihPal : CULong,
    cEntries : CULong,
);

alias EMRRESIZEPALETTE = Struct_tagEMRRESIZEPALETTE;

alias PEMRRESIZEPALETTE = Pointer[Struct_tagEMRRESIZEPALETTE];

record Struct_tagEMRSETPALETTEENTRIES (
    emr : EMR,
    ihPal : CULong,
    iStart : CULong,
    cEntries : CULong,
    aPalEntries : Array[PALETTEENTRY,1],
);

alias EMRSETPALETTEENTRIES = Struct_tagEMRSETPALETTEENTRIES;

alias PEMRSETPALETTEENTRIES = Pointer[Struct_tagEMRSETPALETTEENTRIES];

record Struct_tagEMRSETCOLORADJUSTMENT (
    emr : EMR,
    ColorAdjustment : COLORADJUSTMENT,
);

alias EMRSETCOLORADJUSTMENT = Struct_tagEMRSETCOLORADJUSTMENT;

alias PEMRSETCOLORADJUSTMENT = Pointer[Struct_tagEMRSETCOLORADJUSTMENT];

record Struct_tagEMRGDICOMMENT (
    emr : EMR,
    cbData : CULong,
    Data : Array[CUChar,1],
);

alias EMRGDICOMMENT = Struct_tagEMRGDICOMMENT;

alias PEMRGDICOMMENT = Pointer[Struct_tagEMRGDICOMMENT];

record Struct_tagEMREOF (
    emr : EMR,
    nPalEntries : CULong,
    offPalEntries : CULong,
    nSizeLast : CULong,
);

alias EMREOF = Struct_tagEMREOF;

alias PEMREOF = Pointer[Struct_tagEMREOF];

record Struct_tagEMRLINETO (
    emr : EMR,
    ptl : POINTL,
);

alias EMRLINETO = Struct_tagEMRLINETO;

alias PEMRLINETO = Pointer[Struct_tagEMRLINETO];

alias EMRMOVETOEX = Struct_tagEMRLINETO;

alias PEMRMOVETOEX = Pointer[Struct_tagEMRLINETO];

record Struct_tagEMROFFSETCLIPRGN (
    emr : EMR,
    ptlOffset : POINTL,
);

alias EMROFFSETCLIPRGN = Struct_tagEMROFFSETCLIPRGN;

alias PEMROFFSETCLIPRGN = Pointer[Struct_tagEMROFFSETCLIPRGN];

record Struct_tagEMRFILLPATH (
    emr : EMR,
    rclBounds : RECTL,
);

alias EMRFILLPATH = Struct_tagEMRFILLPATH;

alias PEMRFILLPATH = Pointer[Struct_tagEMRFILLPATH];

alias EMRSTROKEANDFILLPATH = Struct_tagEMRFILLPATH;

alias PEMRSTROKEANDFILLPATH = Pointer[Struct_tagEMRFILLPATH];

alias EMRSTROKEPATH = Struct_tagEMRFILLPATH;

alias PEMRSTROKEPATH = Pointer[Struct_tagEMRFILLPATH];

record Struct_tagEMREXCLUDECLIPRECT (
    emr : EMR,
    rclClip : RECTL,
);

alias EMREXCLUDECLIPRECT = Struct_tagEMREXCLUDECLIPRECT;

alias PEMREXCLUDECLIPRECT = Pointer[Struct_tagEMREXCLUDECLIPRECT];

alias EMRINTERSECTCLIPRECT = Struct_tagEMREXCLUDECLIPRECT;

alias PEMRINTERSECTCLIPRECT = Pointer[Struct_tagEMREXCLUDECLIPRECT];

record Struct_tagEMRSETVIEWPORTORGEX (
    emr : EMR,
    ptlOrigin : POINTL,
);

alias EMRSETVIEWPORTORGEX = Struct_tagEMRSETVIEWPORTORGEX;

alias PEMRSETVIEWPORTORGEX = Pointer[Struct_tagEMRSETVIEWPORTORGEX];

alias EMRSETWINDOWORGEX = Struct_tagEMRSETVIEWPORTORGEX;

alias PEMRSETWINDOWORGEX = Pointer[Struct_tagEMRSETVIEWPORTORGEX];

alias EMRSETBRUSHORGEX = Struct_tagEMRSETVIEWPORTORGEX;

alias PEMRSETBRUSHORGEX = Pointer[Struct_tagEMRSETVIEWPORTORGEX];

record Struct_tagEMRSETVIEWPORTEXTEX (
    emr : EMR,
    szlExtent : SIZEL,
);

alias EMRSETVIEWPORTEXTEX = Struct_tagEMRSETVIEWPORTEXTEX;

alias PEMRSETVIEWPORTEXTEX = Pointer[Struct_tagEMRSETVIEWPORTEXTEX];

alias EMRSETWINDOWEXTEX = Struct_tagEMRSETVIEWPORTEXTEX;

alias PEMRSETWINDOWEXTEX = Pointer[Struct_tagEMRSETVIEWPORTEXTEX];

record Struct_tagEMRSCALEVIEWPORTEXTEX (
    emr : EMR,
    xNum : CLong,
    xDenom : CLong,
    yNum : CLong,
    yDenom : CLong,
);

alias EMRSCALEVIEWPORTEXTEX = Struct_tagEMRSCALEVIEWPORTEXTEX;

alias PEMRSCALEVIEWPORTEXTEX = Pointer[Struct_tagEMRSCALEVIEWPORTEXTEX];

alias EMRSCALEWINDOWEXTEX = Struct_tagEMRSCALEVIEWPORTEXTEX;

alias PEMRSCALEWINDOWEXTEX = Pointer[Struct_tagEMRSCALEVIEWPORTEXTEX];

record Struct_tagEMRSETWORLDTRANSFORM (
    emr : EMR,
    xform : XFORM,
);

alias EMRSETWORLDTRANSFORM = Struct_tagEMRSETWORLDTRANSFORM;

alias PEMRSETWORLDTRANSFORM = Pointer[Struct_tagEMRSETWORLDTRANSFORM];

record Struct_tagEMRMODIFYWORLDTRANSFORM (
    emr : EMR,
    xform : XFORM,
    iMode : CULong,
);

alias EMRMODIFYWORLDTRANSFORM = Struct_tagEMRMODIFYWORLDTRANSFORM;

alias PEMRMODIFYWORLDTRANSFORM = Pointer[Struct_tagEMRMODIFYWORLDTRANSFORM];

record Struct_tagEMRSETPIXELV (
    emr : EMR,
    ptlPixel : POINTL,
    crColor : CULong,
);

alias EMRSETPIXELV = Struct_tagEMRSETPIXELV;

alias PEMRSETPIXELV = Pointer[Struct_tagEMRSETPIXELV];

record Struct_tagEMREXTFLOODFILL (
    emr : EMR,
    ptlStart : POINTL,
    crColor : CULong,
    iMode : CULong,
);

alias EMREXTFLOODFILL = Struct_tagEMREXTFLOODFILL;

alias PEMREXTFLOODFILL = Pointer[Struct_tagEMREXTFLOODFILL];

record Struct_tagEMRELLIPSE (
    emr : EMR,
    rclBox : RECTL,
);

alias EMRELLIPSE = Struct_tagEMRELLIPSE;

alias PEMRELLIPSE = Pointer[Struct_tagEMRELLIPSE];

alias EMRRECTANGLE = Struct_tagEMRELLIPSE;

alias PEMRRECTANGLE = Pointer[Struct_tagEMRELLIPSE];

record Struct_tagEMRROUNDRECT (
    emr : EMR,
    rclBox : RECTL,
    szlCorner : SIZEL,
);

alias EMRROUNDRECT = Struct_tagEMRROUNDRECT;

alias PEMRROUNDRECT = Pointer[Struct_tagEMRROUNDRECT];

record Struct_tagEMRARC (
    emr : EMR,
    rclBox : RECTL,
    ptlStart : POINTL,
    ptlEnd : POINTL,
);

alias EMRARC = Struct_tagEMRARC;

alias PEMRARC = Pointer[Struct_tagEMRARC];

alias EMRARCTO = Struct_tagEMRARC;

alias PEMRARCTO = Pointer[Struct_tagEMRARC];

alias EMRCHORD = Struct_tagEMRARC;

alias PEMRCHORD = Pointer[Struct_tagEMRARC];

alias EMRPIE = Struct_tagEMRARC;

alias PEMRPIE = Pointer[Struct_tagEMRARC];

record Struct_tagEMRANGLEARC (
    emr : EMR,
    ptlCenter : POINTL,
    nRadius : CULong,
    eStartAngle : Float,
    eSweepAngle : Float,
);

alias EMRANGLEARC = Struct_tagEMRANGLEARC;

alias PEMRANGLEARC = Pointer[Struct_tagEMRANGLEARC];

record Struct_tagEMRPOLYLINE (
    emr : EMR,
    rclBounds : RECTL,
    cptl : CULong,
    aptl : Array[POINTL,1],
);

alias EMRPOLYLINE = Struct_tagEMRPOLYLINE;

alias PEMRPOLYLINE = Pointer[Struct_tagEMRPOLYLINE];

alias EMRPOLYBEZIER = Struct_tagEMRPOLYLINE;

alias PEMRPOLYBEZIER = Pointer[Struct_tagEMRPOLYLINE];

alias EMRPOLYGON = Struct_tagEMRPOLYLINE;

alias PEMRPOLYGON = Pointer[Struct_tagEMRPOLYLINE];

alias EMRPOLYBEZIERTO = Struct_tagEMRPOLYLINE;

alias PEMRPOLYBEZIERTO = Pointer[Struct_tagEMRPOLYLINE];

alias EMRPOLYLINETO = Struct_tagEMRPOLYLINE;

alias PEMRPOLYLINETO = Pointer[Struct_tagEMRPOLYLINE];

record Struct_tagEMRPOLYLINE16 (
    emr : EMR,
    rclBounds : RECTL,
    cpts : CULong,
    apts : Array[POINTS,1],
);

alias EMRPOLYLINE16 = Struct_tagEMRPOLYLINE16;

alias PEMRPOLYLINE16 = Pointer[Struct_tagEMRPOLYLINE16];

alias EMRPOLYBEZIER16 = Struct_tagEMRPOLYLINE16;

alias PEMRPOLYBEZIER16 = Pointer[Struct_tagEMRPOLYLINE16];

alias EMRPOLYGON16 = Struct_tagEMRPOLYLINE16;

alias PEMRPOLYGON16 = Pointer[Struct_tagEMRPOLYLINE16];

alias EMRPOLYBEZIERTO16 = Struct_tagEMRPOLYLINE16;

alias PEMRPOLYBEZIERTO16 = Pointer[Struct_tagEMRPOLYLINE16];

alias EMRPOLYLINETO16 = Struct_tagEMRPOLYLINE16;

alias PEMRPOLYLINETO16 = Pointer[Struct_tagEMRPOLYLINE16];

record Struct_tagEMRPOLYDRAW (
    emr : EMR,
    rclBounds : RECTL,
    cptl : CULong,
    aptl : Array[POINTL,1],
    abTypes : Array[CUChar,1],
);

alias EMRPOLYDRAW = Struct_tagEMRPOLYDRAW;

alias PEMRPOLYDRAW = Pointer[Struct_tagEMRPOLYDRAW];

record Struct_tagEMRPOLYDRAW16 (
    emr : EMR,
    rclBounds : RECTL,
    cpts : CULong,
    apts : Array[POINTS,1],
    abTypes : Array[CUChar,1],
);

alias EMRPOLYDRAW16 = Struct_tagEMRPOLYDRAW16;

alias PEMRPOLYDRAW16 = Pointer[Struct_tagEMRPOLYDRAW16];

record Struct_tagEMRPOLYPOLYLINE (
    emr : EMR,
    rclBounds : RECTL,
    nPolys : CULong,
    cptl : CULong,
    aPolyCounts : Array[CULong,1],
    aptl : Array[POINTL,1],
);

alias EMRPOLYPOLYLINE = Struct_tagEMRPOLYPOLYLINE;

alias PEMRPOLYPOLYLINE = Pointer[Struct_tagEMRPOLYPOLYLINE];

alias EMRPOLYPOLYGON = Struct_tagEMRPOLYPOLYLINE;

alias PEMRPOLYPOLYGON = Pointer[Struct_tagEMRPOLYPOLYLINE];

record Struct_tagEMRPOLYPOLYLINE16 (
    emr : EMR,
    rclBounds : RECTL,
    nPolys : CULong,
    cpts : CULong,
    aPolyCounts : Array[CULong,1],
    apts : Array[POINTS,1],
);

alias EMRPOLYPOLYLINE16 = Struct_tagEMRPOLYPOLYLINE16;

alias PEMRPOLYPOLYLINE16 = Pointer[Struct_tagEMRPOLYPOLYLINE16];

alias EMRPOLYPOLYGON16 = Struct_tagEMRPOLYPOLYLINE16;

alias PEMRPOLYPOLYGON16 = Pointer[Struct_tagEMRPOLYPOLYLINE16];

record Struct_tagEMRINVERTRGN (
    emr : EMR,
    rclBounds : RECTL,
    cbRgnData : CULong,
    RgnData : Array[CUChar,1],
);

alias EMRINVERTRGN = Struct_tagEMRINVERTRGN;

alias PEMRINVERTRGN = Pointer[Struct_tagEMRINVERTRGN];

alias EMRPAINTRGN = Struct_tagEMRINVERTRGN;

alias PEMRPAINTRGN = Pointer[Struct_tagEMRINVERTRGN];

record Struct_tagEMRFILLRGN (
    emr : EMR,
    rclBounds : RECTL,
    cbRgnData : CULong,
    ihBrush : CULong,
    RgnData : Array[CUChar,1],
);

alias EMRFILLRGN = Struct_tagEMRFILLRGN;

alias PEMRFILLRGN = Pointer[Struct_tagEMRFILLRGN];

record Struct_tagEMRFRAMERGN (
    emr : EMR,
    rclBounds : RECTL,
    cbRgnData : CULong,
    ihBrush : CULong,
    szlStroke : SIZEL,
    RgnData : Array[CUChar,1],
);

alias EMRFRAMERGN = Struct_tagEMRFRAMERGN;

alias PEMRFRAMERGN = Pointer[Struct_tagEMRFRAMERGN];

record Struct_tagEMREXTSELECTCLIPRGN (
    emr : EMR,
    cbRgnData : CULong,
    iMode : CULong,
    RgnData : Array[CUChar,1],
);

alias EMREXTSELECTCLIPRGN = Struct_tagEMREXTSELECTCLIPRGN;

alias PEMREXTSELECTCLIPRGN = Pointer[Struct_tagEMREXTSELECTCLIPRGN];

record Struct_tagEMREXTTEXTOUTA (
    emr : EMR,
    rclBounds : RECTL,
    iGraphicsMode : CULong,
    exScale : Float,
    eyScale : Float,
    emrtext : EMRTEXT,
);

alias EMREXTTEXTOUTA = Struct_tagEMREXTTEXTOUTA;

alias PEMREXTTEXTOUTA = Pointer[Struct_tagEMREXTTEXTOUTA];

alias EMREXTTEXTOUTW = Struct_tagEMREXTTEXTOUTA;

alias PEMREXTTEXTOUTW = Pointer[Struct_tagEMREXTTEXTOUTA];

record Struct_tagEMRPOLYTEXTOUTA (
    emr : EMR,
    rclBounds : RECTL,
    iGraphicsMode : CULong,
    exScale : Float,
    eyScale : Float,
    cStrings : CLong,
    aemrtext : Array[EMRTEXT,1],
);

alias EMRPOLYTEXTOUTA = Struct_tagEMRPOLYTEXTOUTA;

alias PEMRPOLYTEXTOUTA = Pointer[Struct_tagEMRPOLYTEXTOUTA];

alias EMRPOLYTEXTOUTW = Struct_tagEMRPOLYTEXTOUTA;

alias PEMRPOLYTEXTOUTW = Pointer[Struct_tagEMRPOLYTEXTOUTA];

record Struct_tagEMRBITBLT (
    emr : EMR,
    rclBounds : RECTL,
    xDest : CLong,
    yDest : CLong,
    cxDest : CLong,
    cyDest : CLong,
    dwRop : CULong,
    xSrc : CLong,
    ySrc : CLong,
    xformSrc : XFORM,
    crBkColorSrc : CULong,
    iUsageSrc : CULong,
    offBmiSrc : CULong,
    cbBmiSrc : CULong,
    offBitsSrc : CULong,
    cbBitsSrc : CULong,
);

alias EMRBITBLT = Struct_tagEMRBITBLT;

alias PEMRBITBLT = Pointer[Struct_tagEMRBITBLT];

record Struct_tagEMRSTRETCHBLT (
    emr : EMR,
    rclBounds : RECTL,
    xDest : CLong,
    yDest : CLong,
    cxDest : CLong,
    cyDest : CLong,
    dwRop : CULong,
    xSrc : CLong,
    ySrc : CLong,
    xformSrc : XFORM,
    crBkColorSrc : CULong,
    iUsageSrc : CULong,
    offBmiSrc : CULong,
    cbBmiSrc : CULong,
    offBitsSrc : CULong,
    cbBitsSrc : CULong,
    cxSrc : CLong,
    cySrc : CLong,
);

alias EMRSTRETCHBLT = Struct_tagEMRSTRETCHBLT;

alias PEMRSTRETCHBLT = Pointer[Struct_tagEMRSTRETCHBLT];

record Struct_tagEMRMASKBLT (
    emr : EMR,
    rclBounds : RECTL,
    xDest : CLong,
    yDest : CLong,
    cxDest : CLong,
    cyDest : CLong,
    dwRop : CULong,
    xSrc : CLong,
    ySrc : CLong,
    xformSrc : XFORM,
    crBkColorSrc : CULong,
    iUsageSrc : CULong,
    offBmiSrc : CULong,
    cbBmiSrc : CULong,
    offBitsSrc : CULong,
    cbBitsSrc : CULong,
    xMask : CLong,
    yMask : CLong,
    iUsageMask : CULong,
    offBmiMask : CULong,
    cbBmiMask : CULong,
    offBitsMask : CULong,
    cbBitsMask : CULong,
);

alias EMRMASKBLT = Struct_tagEMRMASKBLT;

alias PEMRMASKBLT = Pointer[Struct_tagEMRMASKBLT];

record Struct_tagEMRPLGBLT (
    emr : EMR,
    rclBounds : RECTL,
    aptlDest : Array[POINTL,3],
    xSrc : CLong,
    ySrc : CLong,
    cxSrc : CLong,
    cySrc : CLong,
    xformSrc : XFORM,
    crBkColorSrc : CULong,
    iUsageSrc : CULong,
    offBmiSrc : CULong,
    cbBmiSrc : CULong,
    offBitsSrc : CULong,
    cbBitsSrc : CULong,
    xMask : CLong,
    yMask : CLong,
    iUsageMask : CULong,
    offBmiMask : CULong,
    cbBmiMask : CULong,
    offBitsMask : CULong,
    cbBitsMask : CULong,
);

alias EMRPLGBLT = Struct_tagEMRPLGBLT;

alias PEMRPLGBLT = Pointer[Struct_tagEMRPLGBLT];

record Struct_tagEMRSETDIBITSTODEVICE (
    emr : EMR,
    rclBounds : RECTL,
    xDest : CLong,
    yDest : CLong,
    xSrc : CLong,
    ySrc : CLong,
    cxSrc : CLong,
    cySrc : CLong,
    offBmiSrc : CULong,
    cbBmiSrc : CULong,
    offBitsSrc : CULong,
    cbBitsSrc : CULong,
    iUsageSrc : CULong,
    iStartScan : CULong,
    cScans : CULong,
);

alias EMRSETDIBITSTODEVICE = Struct_tagEMRSETDIBITSTODEVICE;

alias PEMRSETDIBITSTODEVICE = Pointer[Struct_tagEMRSETDIBITSTODEVICE];

record Struct_tagEMRSTRETCHDIBITS (
    emr : EMR,
    rclBounds : RECTL,
    xDest : CLong,
    yDest : CLong,
    xSrc : CLong,
    ySrc : CLong,
    cxSrc : CLong,
    cySrc : CLong,
    offBmiSrc : CULong,
    cbBmiSrc : CULong,
    offBitsSrc : CULong,
    cbBitsSrc : CULong,
    iUsageSrc : CULong,
    dwRop : CULong,
    cxDest : CLong,
    cyDest : CLong,
);

alias EMRSTRETCHDIBITS = Struct_tagEMRSTRETCHDIBITS;

alias PEMRSTRETCHDIBITS = Pointer[Struct_tagEMRSTRETCHDIBITS];

record Struct_tagEMREXTCREATEFONTINDIRECTW (
    emr : EMR,
    ihFont : CULong,
    elfw : EXTLOGFONTW,
);

alias EMREXTCREATEFONTINDIRECTW = Struct_tagEMREXTCREATEFONTINDIRECTW;

alias PEMREXTCREATEFONTINDIRECTW = Pointer[Struct_tagEMREXTCREATEFONTINDIRECTW];

record Struct_tagEMRCREATEPALETTE (
    emr : EMR,
    ihPal : CULong,
    lgpl : LOGPALETTE,
);

alias EMRCREATEPALETTE = Struct_tagEMRCREATEPALETTE;

alias PEMRCREATEPALETTE = Pointer[Struct_tagEMRCREATEPALETTE];

record Struct_tagEMRCREATEPEN (
    emr : EMR,
    ihPen : CULong,
    lopn : LOGPEN,
);

alias EMRCREATEPEN = Struct_tagEMRCREATEPEN;

alias PEMRCREATEPEN = Pointer[Struct_tagEMRCREATEPEN];

record Struct_tagEMREXTCREATEPEN (
    emr : EMR,
    ihPen : CULong,
    offBmi : CULong,
    cbBmi : CULong,
    offBits : CULong,
    cbBits : CULong,
    elp : EXTLOGPEN,
);

alias EMREXTCREATEPEN = Struct_tagEMREXTCREATEPEN;

alias PEMREXTCREATEPEN = Pointer[Struct_tagEMREXTCREATEPEN];

record Struct_tagEMRCREATEBRUSHINDIRECT (
    emr : EMR,
    ihBrush : CULong,
    lb : LOGBRUSH32,
);

alias EMRCREATEBRUSHINDIRECT = Struct_tagEMRCREATEBRUSHINDIRECT;

alias PEMRCREATEBRUSHINDIRECT = Pointer[Struct_tagEMRCREATEBRUSHINDIRECT];

record Struct_tagEMRCREATEMONOBRUSH (
    emr : EMR,
    ihBrush : CULong,
    iUsage : CULong,
    offBmi : CULong,
    cbBmi : CULong,
    offBits : CULong,
    cbBits : CULong,
);

alias EMRCREATEMONOBRUSH = Struct_tagEMRCREATEMONOBRUSH;

alias PEMRCREATEMONOBRUSH = Pointer[Struct_tagEMRCREATEMONOBRUSH];

record Struct_tagEMRCREATEDIBPATTERNBRUSHPT (
    emr : EMR,
    ihBrush : CULong,
    iUsage : CULong,
    offBmi : CULong,
    cbBmi : CULong,
    offBits : CULong,
    cbBits : CULong,
);

alias EMRCREATEDIBPATTERNBRUSHPT = Struct_tagEMRCREATEDIBPATTERNBRUSHPT;

alias PEMRCREATEDIBPATTERNBRUSHPT = Pointer[Struct_tagEMRCREATEDIBPATTERNBRUSHPT];

record Struct_tagEMRFORMAT (
    dSignature : CULong,
    nVersion : CULong,
    cbData : CULong,
    offData : CULong,
);

alias EMRFORMAT = Struct_tagEMRFORMAT;

alias PEMRFORMAT = Pointer[Struct_tagEMRFORMAT];

record Struct_tagEMRGLSRECORD (
    emr : EMR,
    cbData : CULong,
    Data : Array[CUChar,1],
);

alias EMRGLSRECORD = Struct_tagEMRGLSRECORD;

alias PEMRGLSRECORD = Pointer[Struct_tagEMRGLSRECORD];

record Struct_tagEMRGLSBOUNDEDRECORD (
    emr : EMR,
    rclBounds : RECTL,
    cbData : CULong,
    Data : Array[CUChar,1],
);

alias EMRGLSBOUNDEDRECORD = Struct_tagEMRGLSBOUNDEDRECORD;

alias PEMRGLSBOUNDEDRECORD = Pointer[Struct_tagEMRGLSBOUNDEDRECORD];

record Struct_tagEMRPIXELFORMAT (
    emr : EMR,
    pfd : PIXELFORMATDESCRIPTOR,
);

alias EMRPIXELFORMAT = Struct_tagEMRPIXELFORMAT;

alias PEMRPIXELFORMAT = Pointer[Struct_tagEMRPIXELFORMAT];

record Struct_tagEMRCREATECOLORSPACE (
    emr : EMR,
    ihCS : CULong,
    lcs : LOGCOLORSPACEA,
);

alias EMRCREATECOLORSPACE = Struct_tagEMRCREATECOLORSPACE;

alias PEMRCREATECOLORSPACE = Pointer[Struct_tagEMRCREATECOLORSPACE];

record Struct_tagEMRSETCOLORSPACE (
    emr : EMR,
    ihCS : CULong,
);

alias EMRSETCOLORSPACE = Struct_tagEMRSETCOLORSPACE;

alias PEMRSETCOLORSPACE = Pointer[Struct_tagEMRSETCOLORSPACE];

alias EMRSELECTCOLORSPACE = Struct_tagEMRSETCOLORSPACE;

alias PEMRSELECTCOLORSPACE = Pointer[Struct_tagEMRSETCOLORSPACE];

alias EMRDELETECOLORSPACE = Struct_tagEMRSETCOLORSPACE;

alias PEMRDELETECOLORSPACE = Pointer[Struct_tagEMRSETCOLORSPACE];

record Struct_tagEMREXTESCAPE (
    emr : EMR,
    iEscape : Int,
    cbEscData : Int,
    EscData : Array[CUChar,1],
);

alias EMREXTESCAPE = Struct_tagEMREXTESCAPE;

alias PEMREXTESCAPE = Pointer[Struct_tagEMREXTESCAPE];

alias EMRDRAWESCAPE = Struct_tagEMREXTESCAPE;

alias PEMRDRAWESCAPE = Pointer[Struct_tagEMREXTESCAPE];

record Struct_tagEMRNAMEDESCAPE (
    emr : EMR,
    iEscape : Int,
    cbDriver : Int,
    cbEscData : Int,
    EscData : Array[CUChar,1],
);

alias EMRNAMEDESCAPE = Struct_tagEMRNAMEDESCAPE;

alias PEMRNAMEDESCAPE = Pointer[Struct_tagEMRNAMEDESCAPE];

record Struct_tagEMRSETICMPROFILE (
    emr : EMR,
    dwFlags : CULong,
    cbName : CULong,
    cbData : CULong,
    Data : Array[CUChar,1],
);

alias EMRSETICMPROFILE = Struct_tagEMRSETICMPROFILE;

alias PEMRSETICMPROFILE = Pointer[Struct_tagEMRSETICMPROFILE];

alias EMRSETICMPROFILEA = Struct_tagEMRSETICMPROFILE;

alias PEMRSETICMPROFILEA = Pointer[Struct_tagEMRSETICMPROFILE];

alias EMRSETICMPROFILEW = Struct_tagEMRSETICMPROFILE;

alias PEMRSETICMPROFILEW = Pointer[Struct_tagEMRSETICMPROFILE];

record Struct_tagEMRCREATECOLORSPACEW (
    emr : EMR,
    ihCS : CULong,
    lcs : LOGCOLORSPACEW,
    dwFlags : CULong,
    cbData : CULong,
    Data : Array[CUChar,1],
);

alias EMRCREATECOLORSPACEW = Struct_tagEMRCREATECOLORSPACEW;

alias PEMRCREATECOLORSPACEW = Pointer[Struct_tagEMRCREATECOLORSPACEW];

record Struct_tagCOLORMATCHTOTARGET (
    emr : EMR,
    dwAction : CULong,
    dwFlags : CULong,
    cbName : CULong,
    cbData : CULong,
    Data : Array[CUChar,1],
);

alias EMRCOLORMATCHTOTARGET = Struct_tagCOLORMATCHTOTARGET;

alias PEMRCOLORMATCHTOTARGET = Pointer[Struct_tagCOLORMATCHTOTARGET];

record Struct_tagCOLORCORRECTPALETTE (
    emr : EMR,
    ihPalette : CULong,
    nFirstEntry : CULong,
    nPalEntries : CULong,
    nReserved : CULong,
);

alias EMRCOLORCORRECTPALETTE = Struct_tagCOLORCORRECTPALETTE;

alias PEMRCOLORCORRECTPALETTE = Pointer[Struct_tagCOLORCORRECTPALETTE];

record Struct_tagEMRALPHABLEND (
    emr : EMR,
    rclBounds : RECTL,
    xDest : CLong,
    yDest : CLong,
    cxDest : CLong,
    cyDest : CLong,
    dwRop : CULong,
    xSrc : CLong,
    ySrc : CLong,
    xformSrc : XFORM,
    crBkColorSrc : CULong,
    iUsageSrc : CULong,
    offBmiSrc : CULong,
    cbBmiSrc : CULong,
    offBitsSrc : CULong,
    cbBitsSrc : CULong,
    cxSrc : CLong,
    cySrc : CLong,
);

alias EMRALPHABLEND = Struct_tagEMRALPHABLEND;

alias PEMRALPHABLEND = Pointer[Struct_tagEMRALPHABLEND];

record Struct_tagEMRGRADIENTFILL (
    emr : EMR,
    rclBounds : RECTL,
    nVer : CULong,
    nTri : CULong,
    ulMode : CULong,
    Ver : Array[TRIVERTEX,1],
);

alias EMRGRADIENTFILL = Struct_tagEMRGRADIENTFILL;

alias PEMRGRADIENTFILL = Pointer[Struct_tagEMRGRADIENTFILL];

record Struct_tagEMRTRANSPARENTBLT (
    emr : EMR,
    rclBounds : RECTL,
    xDest : CLong,
    yDest : CLong,
    cxDest : CLong,
    cyDest : CLong,
    dwRop : CULong,
    xSrc : CLong,
    ySrc : CLong,
    xformSrc : XFORM,
    crBkColorSrc : CULong,
    iUsageSrc : CULong,
    offBmiSrc : CULong,
    cbBmiSrc : CULong,
    offBitsSrc : CULong,
    cbBitsSrc : CULong,
    cxSrc : CLong,
    cySrc : CLong,
);

alias EMRTRANSPARENTBLT = Struct_tagEMRTRANSPARENTBLT;

alias PEMRTRANSPARENTBLT = Pointer[Struct_tagEMRTRANSPARENTBLT];

external wglCopyContext(
    argument0 : HGLRC,
    argument1 : HGLRC,
    argument2 : UInt) Int;

external wglCreateContext(
    argument0 : HDC) HGLRC;

external wglCreateLayerContext(
    argument0 : HDC,
    argument1 : Int) HGLRC;

external wglDeleteContext(
    argument0 : HGLRC) Int;

external wglGetCurrentContext() HGLRC;

external wglGetCurrentDC() HDC;

external wglGetProcAddress(
    argument0 : LPCSTR) PROC;

external wglMakeCurrent(
    argument0 : HDC,
    argument1 : HGLRC) Int;

external wglShareLists(
    argument0 : HGLRC,
    argument1 : HGLRC) Int;

external wglUseFontBitmapsA(
    argument0 : HDC,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong) Int;

external wglUseFontBitmapsW(
    argument0 : HDC,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong) Int;

external SwapBuffers(
    argument0 : HDC) Int;

record Struct__POINTFLOAT (
    x : Float,
    y : Float,
);

alias POINTFLOAT = Struct__POINTFLOAT;

alias PPOINTFLOAT = Pointer[Struct__POINTFLOAT];

record Struct__GLYPHMETRICSFLOAT (
    gmfBlackBoxX : Float,
    gmfBlackBoxY : Float,
    gmfptGlyphOrigin : POINTFLOAT,
    gmfCellIncX : Float,
    gmfCellIncY : Float,
);

alias GLYPHMETRICSFLOAT = Struct__GLYPHMETRICSFLOAT;

alias PGLYPHMETRICSFLOAT = Pointer[Struct__GLYPHMETRICSFLOAT];

alias LPGLYPHMETRICSFLOAT = Pointer[Struct__GLYPHMETRICSFLOAT];

external wglUseFontOutlinesA(
    argument0 : HDC,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : Float,
    argument5 : Float,
    argument6 : Int,
    argument7 : LPGLYPHMETRICSFLOAT) Int;

external wglUseFontOutlinesW(
    argument0 : HDC,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : Float,
    argument5 : Float,
    argument6 : Int,
    argument7 : LPGLYPHMETRICSFLOAT) Int;

record Struct_tagLAYERPLANEDESCRIPTOR (
    nSize : UShort,
    nVersion : UShort,
    dwFlags : CULong,
    iPixelType : CUChar,
    cColorBits : CUChar,
    cRedBits : CUChar,
    cRedShift : CUChar,
    cGreenBits : CUChar,
    cGreenShift : CUChar,
    cBlueBits : CUChar,
    cBlueShift : CUChar,
    cAlphaBits : CUChar,
    cAlphaShift : CUChar,
    cAccumBits : CUChar,
    cAccumRedBits : CUChar,
    cAccumGreenBits : CUChar,
    cAccumBlueBits : CUChar,
    cAccumAlphaBits : CUChar,
    cDepthBits : CUChar,
    cStencilBits : CUChar,
    cAuxBuffers : CUChar,
    iLayerPlane : CUChar,
    bReserved : CUChar,
    crTransparent : CULong,
);

alias LAYERPLANEDESCRIPTOR = Struct_tagLAYERPLANEDESCRIPTOR;

alias PLAYERPLANEDESCRIPTOR = Pointer[Struct_tagLAYERPLANEDESCRIPTOR];

alias LPLAYERPLANEDESCRIPTOR = Pointer[Struct_tagLAYERPLANEDESCRIPTOR];

external wglDescribeLayerPlane(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : UInt,
    argument4 : LPLAYERPLANEDESCRIPTOR) Int;

external wglSetLayerPaletteEntries(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Pointer[CULong]) Int;

external wglGetLayerPaletteEntries(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Pointer[CULong]) Int;

external wglRealizeLayerPalette(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int) Int;

external wglSwapLayerBuffers(
    argument0 : HDC,
    argument1 : UInt) Int;

record Struct__WGLSWAP (
    hdc : HDC,
    uiFlags : UInt,
);

alias WGLSWAP = Struct__WGLSWAP;

alias PWGLSWAP = Pointer[Struct__WGLSWAP];

alias LPWGLSWAP = Pointer[Struct__WGLSWAP];

external wglSwapMultipleBuffers(
    argument0 : UInt,
    argument1 : Pointer[WGLSWAP]) CULong;

alias HDWP = HANDLE;

alias MENUTEMPLATEA = Void;

alias MENUTEMPLATEW = Void;

alias LPMENUTEMPLATEA = PVOID;

alias LPMENUTEMPLATEW = PVOID;

alias MENUTEMPLATE = Void;

alias LPMENUTEMPLATE = LPMENUTEMPLATEA;

alias WNDPROC = CCodePointer[(Pointer[Struct_HWND__],UInt,UInt64,Int64),(Int64)];

alias DLGPROC = CCodePointer[(Pointer[Struct_HWND__],UInt,UInt64,Int64),(Int64)];

alias TIMERPROC = CCodePointer[(Pointer[Struct_HWND__],UInt,UInt64,CULong),()];

alias GRAYSTRINGPROC = CCodePointer[(Pointer[Struct_HDC__],Int64,Int),(Int)];

alias WNDENUMPROC = CCodePointer[(Pointer[Struct_HWND__],Int64),(Int)];

alias HOOKPROC = CCodePointer[(Int,UInt64,Int64),(Int64)];

alias SENDASYNCPROC = CCodePointer[(Pointer[Struct_HWND__],UInt,UInt64,Int64),()];

alias PROPENUMPROCA = CCodePointer[(Pointer[Struct_HWND__],Pointer[CChar],RawPointer),(Int)];

alias PROPENUMPROCW = CCodePointer[(Pointer[Struct_HWND__],Pointer[UShort],RawPointer),(Int)];

alias PROPENUMPROCEXA = CCodePointer[(Pointer[Struct_HWND__],Pointer[CChar],RawPointer,UInt64),(Int)];

alias PROPENUMPROCEXW = CCodePointer[(Pointer[Struct_HWND__],Pointer[UShort],RawPointer,UInt64),(Int)];

alias EDITWORDBREAKPROCA = CCodePointer[(Pointer[CChar],Int,Int,Int),(Int)];

alias EDITWORDBREAKPROCW = CCodePointer[(Pointer[UShort],Int,Int,Int),(Int)];

alias DRAWSTATEPROC = CCodePointer[(Pointer[Struct_HDC__],Int64,UInt64,Int,Int),(Int)];

alias PROPENUMPROC = PROPENUMPROCA;

alias PROPENUMPROCEX = PROPENUMPROCEXA;

alias EDITWORDBREAKPROC = EDITWORDBREAKPROCA;

alias NAMEENUMPROCA = CCodePointer[(Pointer[CChar],Int64),(Int)];

alias NAMEENUMPROCW = CCodePointer[(Pointer[UShort],Int64),(Int)];

alias WINSTAENUMPROCA = NAMEENUMPROCA;

alias DESKTOPENUMPROCA = NAMEENUMPROCA;

alias WINSTAENUMPROCW = NAMEENUMPROCW;

alias DESKTOPENUMPROCW = NAMEENUMPROCW;

alias WINSTAENUMPROC = WINSTAENUMPROCA;

alias DESKTOPENUMPROC = DESKTOPENUMPROCA;

external wvsprintfA(
    argument0 : LPSTR,
    argument1 : LPCSTR,
    arglist : va_list) Int;

external wvsprintfW(
    argument0 : LPWSTR,
    argument1 : LPCWSTR,
    arglist : va_list) Int;

external wsprintfA(
    argument0 : LPSTR,
    argument1 : LPCSTR,
    ...) Int;

external wsprintfW(
    argument0 : LPWSTR,
    argument1 : LPCWSTR,
    ...) Int;

record Struct_tagCBT_CREATEWNDA (
    lpcs : Pointer[Struct_tagCREATESTRUCTA],
    hwndInsertAfter : HWND,
);

alias CBT_CREATEWNDA = Struct_tagCBT_CREATEWNDA;

alias LPCBT_CREATEWNDA = Pointer[Struct_tagCBT_CREATEWNDA];

record Struct_tagCBT_CREATEWNDW (
    lpcs : Pointer[Struct_tagCREATESTRUCTW],
    hwndInsertAfter : HWND,
);

alias CBT_CREATEWNDW = Struct_tagCBT_CREATEWNDW;

alias LPCBT_CREATEWNDW = Pointer[Struct_tagCBT_CREATEWNDW];

alias CBT_CREATEWND = CBT_CREATEWNDA;

alias LPCBT_CREATEWND = LPCBT_CREATEWNDA;

record Struct_tagCBTACTIVATESTRUCT (
    fMouse : Int,
    hWndActive : HWND,
);

alias CBTACTIVATESTRUCT = Struct_tagCBTACTIVATESTRUCT;

alias LPCBTACTIVATESTRUCT = Pointer[Struct_tagCBTACTIVATESTRUCT];

record Struct_tagWTSSESSION_NOTIFICATION (
    cbSize : CULong,
    dwSessionId : CULong,
);

alias WTSSESSION_NOTIFICATION = Struct_tagWTSSESSION_NOTIFICATION;

alias PWTSSESSION_NOTIFICATION = Pointer[Struct_tagWTSSESSION_NOTIFICATION];

record UnnamedStruct16 (
    hwnd : HWND,
    rc : RECT,
);

alias SHELLHOOKINFO = UnnamedStruct16;

alias LPSHELLHOOKINFO = Pointer[UnnamedStruct16];

record Struct_tagEVENTMSG (
    message : UInt,
    paramL : UInt,
    paramH : UInt,
    time : CULong,
    hwnd : HWND,
);

alias EVENTMSG = Struct_tagEVENTMSG;

alias PEVENTMSGMSG = Pointer[Struct_tagEVENTMSG];

alias NPEVENTMSGMSG = Pointer[Struct_tagEVENTMSG];

alias LPEVENTMSGMSG = Pointer[Struct_tagEVENTMSG];

alias PEVENTMSG = Pointer[Struct_tagEVENTMSG];

alias NPEVENTMSG = Pointer[Struct_tagEVENTMSG];

alias LPEVENTMSG = Pointer[Struct_tagEVENTMSG];

record Struct_tagCWPSTRUCT (
    lParam : Int64,
    wParam : UInt64,
    message : UInt,
    hwnd : HWND,
);

alias CWPSTRUCT = Struct_tagCWPSTRUCT;

alias PCWPSTRUCT = Pointer[Struct_tagCWPSTRUCT];

alias NPCWPSTRUCT = Pointer[Struct_tagCWPSTRUCT];

alias LPCWPSTRUCT = Pointer[Struct_tagCWPSTRUCT];

record Struct_tagCWPRETSTRUCT (
    lResult : Int64,
    lParam : Int64,
    wParam : UInt64,
    message : UInt,
    hwnd : HWND,
);

alias CWPRETSTRUCT = Struct_tagCWPRETSTRUCT;

alias PCWPRETSTRUCT = Pointer[Struct_tagCWPRETSTRUCT];

alias NPCWPRETSTRUCT = Pointer[Struct_tagCWPRETSTRUCT];

alias LPCWPRETSTRUCT = Pointer[Struct_tagCWPRETSTRUCT];

record Struct_tagKBDLLHOOKSTRUCT (
    vkCode : CULong,
    scanCode : CULong,
    flags : CULong,
    time : CULong,
    dwExtraInfo : UInt64,
);

alias KBDLLHOOKSTRUCT = Struct_tagKBDLLHOOKSTRUCT;

alias LPKBDLLHOOKSTRUCT = Pointer[Struct_tagKBDLLHOOKSTRUCT];

alias PKBDLLHOOKSTRUCT = Pointer[Struct_tagKBDLLHOOKSTRUCT];

record Struct_tagMSLLHOOKSTRUCT (
    pt : POINT,
    mouseData : CULong,
    flags : CULong,
    time : CULong,
    dwExtraInfo : UInt64,
);

alias MSLLHOOKSTRUCT = Struct_tagMSLLHOOKSTRUCT;

alias LPMSLLHOOKSTRUCT = Pointer[Struct_tagMSLLHOOKSTRUCT];

alias PMSLLHOOKSTRUCT = Pointer[Struct_tagMSLLHOOKSTRUCT];

record Struct_tagDEBUGHOOKINFO (
    idThread : CULong,
    idThreadInstaller : CULong,
    lParam : Int64,
    wParam : UInt64,
    code : Int,
);

alias DEBUGHOOKINFO = Struct_tagDEBUGHOOKINFO;

alias PDEBUGHOOKINFO = Pointer[Struct_tagDEBUGHOOKINFO];

alias NPDEBUGHOOKINFO = Pointer[Struct_tagDEBUGHOOKINFO];

alias LPDEBUGHOOKINFO = Pointer[Struct_tagDEBUGHOOKINFO];

record Struct_tagMOUSEHOOKSTRUCT (
    pt : POINT,
    hwnd : HWND,
    wHitTestCode : UInt,
    dwExtraInfo : UInt64,
);

alias MOUSEHOOKSTRUCT = Struct_tagMOUSEHOOKSTRUCT;

alias LPMOUSEHOOKSTRUCT = Pointer[Struct_tagMOUSEHOOKSTRUCT];

alias PMOUSEHOOKSTRUCT = Pointer[Struct_tagMOUSEHOOKSTRUCT];

record Struct_tagMOUSEHOOKSTRUCTEX (
    _unnamed : MOUSEHOOKSTRUCT,
    mouseData : CULong,
);

alias MOUSEHOOKSTRUCTEX = Struct_tagMOUSEHOOKSTRUCTEX;

alias LPMOUSEHOOKSTRUCTEX = Pointer[Struct_tagMOUSEHOOKSTRUCTEX];

alias PMOUSEHOOKSTRUCTEX = Pointer[Struct_tagMOUSEHOOKSTRUCTEX];

record Struct_tagHARDWAREHOOKSTRUCT (
    hwnd : HWND,
    message : UInt,
    wParam : UInt64,
    lParam : Int64,
);

alias HARDWAREHOOKSTRUCT = Struct_tagHARDWAREHOOKSTRUCT;

alias LPHARDWAREHOOKSTRUCT = Pointer[Struct_tagHARDWAREHOOKSTRUCT];

alias PHARDWAREHOOKSTRUCT = Pointer[Struct_tagHARDWAREHOOKSTRUCT];

external LoadKeyboardLayoutA(
    pwszKLID : LPCSTR,
    Flags : UInt) HKL;

external LoadKeyboardLayoutW(
    pwszKLID : LPCWSTR,
    Flags : UInt) HKL;

external ActivateKeyboardLayout(
    hkl : HKL,
    Flags : UInt) HKL;

external ToUnicodeEx(
    wVirtKey : UInt,
    wScanCode : UInt,
    lpKeyState : Pointer[CUChar],
    pwszBuff : LPWSTR,
    cchBuff : Int,
    wFlags : UInt,
    dwhkl : HKL) Int;

external UnloadKeyboardLayout(
    hkl : HKL) Int;

external GetKeyboardLayoutNameA(
    pwszKLID : LPSTR) Int;

external GetKeyboardLayoutNameW(
    pwszKLID : LPWSTR) Int;

external GetKeyboardLayoutList(
    nBuff : Int,
    lpList : Pointer[HKL]) Int;

external GetKeyboardLayout(
    idThread : CULong) HKL;

record Struct_tagMOUSEMOVEPOINT (
    x : Int,
    y : Int,
    time : CULong,
    dwExtraInfo : UInt64,
);

alias MOUSEMOVEPOINT = Struct_tagMOUSEMOVEPOINT;

alias PMOUSEMOVEPOINT = Pointer[Struct_tagMOUSEMOVEPOINT];

alias LPMOUSEMOVEPOINT = Pointer[Struct_tagMOUSEMOVEPOINT];

external GetMouseMovePointsEx(
    cbSize : UInt,
    lppt : LPMOUSEMOVEPOINT,
    lpptBuf : LPMOUSEMOVEPOINT,
    nBufPoints : Int,
    resolution : CULong) Int;

external CreateDesktopA(
    lpszDesktop : LPCSTR,
    lpszDevice : LPCSTR,
    pDevmode : LPDEVMODEA,
    dwFlags : CULong,
    dwDesiredAccess : CULong,
    lpsa : LPSECURITY_ATTRIBUTES) HDESK;

external CreateDesktopW(
    lpszDesktop : LPCWSTR,
    lpszDevice : LPCWSTR,
    pDevmode : LPDEVMODEW,
    dwFlags : CULong,
    dwDesiredAccess : CULong,
    lpsa : LPSECURITY_ATTRIBUTES) HDESK;

external OpenDesktopA(
    lpszDesktop : LPCSTR,
    dwFlags : CULong,
    fInherit : Int,
    dwDesiredAccess : CULong) HDESK;

external OpenDesktopW(
    lpszDesktop : LPCWSTR,
    dwFlags : CULong,
    fInherit : Int,
    dwDesiredAccess : CULong) HDESK;

external OpenInputDesktop(
    dwFlags : CULong,
    fInherit : Int,
    dwDesiredAccess : CULong) HDESK;

external EnumDesktopsA(
    hwinsta : HWINSTA,
    lpEnumFunc : DESKTOPENUMPROCA,
    lParam : Int64) Int;

external EnumDesktopsW(
    hwinsta : HWINSTA,
    lpEnumFunc : DESKTOPENUMPROCW,
    lParam : Int64) Int;

external EnumDesktopWindows(
    hDesktop : HDESK,
    lpfn : WNDENUMPROC,
    lParam : Int64) Int;

external SwitchDesktop(
    hDesktop : HDESK) Int;

external SetThreadDesktop(
    hDesktop : HDESK) Int;

external CloseDesktop(
    hDesktop : HDESK) Int;

external GetThreadDesktop(
    dwThreadId : CULong) HDESK;

external CreateWindowStationA(
    lpwinsta : LPCSTR,
    dwFlags : CULong,
    dwDesiredAccess : CULong,
    lpsa : LPSECURITY_ATTRIBUTES) HWINSTA;

external CreateWindowStationW(
    lpwinsta : LPCWSTR,
    dwFlags : CULong,
    dwDesiredAccess : CULong,
    lpsa : LPSECURITY_ATTRIBUTES) HWINSTA;

external OpenWindowStationA(
    lpszWinSta : LPCSTR,
    fInherit : Int,
    dwDesiredAccess : CULong) HWINSTA;

external OpenWindowStationW(
    lpszWinSta : LPCWSTR,
    fInherit : Int,
    dwDesiredAccess : CULong) HWINSTA;

external EnumWindowStationsA(
    lpEnumFunc : WINSTAENUMPROCA,
    lParam : Int64) Int;

external EnumWindowStationsW(
    lpEnumFunc : WINSTAENUMPROCW,
    lParam : Int64) Int;

external CloseWindowStation(
    hWinSta : HWINSTA) Int;

external SetProcessWindowStation(
    hWinSta : HWINSTA) Int;

external GetProcessWindowStation() HWINSTA;

external SetUserObjectSecurity(
    hObj : HANDLE,
    pSIRequested : PSECURITY_INFORMATION,
    pSID : PSECURITY_DESCRIPTOR) Int;

external GetUserObjectSecurity(
    hObj : HANDLE,
    pSIRequested : PSECURITY_INFORMATION,
    pSID : PSECURITY_DESCRIPTOR,
    nLength : CULong,
    lpnLengthNeeded : LPDWORD) Int;

record Struct_tagUSEROBJECTFLAGS (
    fInherit : Int,
    fReserved : Int,
    dwFlags : CULong,
);

alias USEROBJECTFLAGS = Struct_tagUSEROBJECTFLAGS;

alias PUSEROBJECTFLAGS = Pointer[Struct_tagUSEROBJECTFLAGS];

external GetUserObjectInformationA(
    hObj : HANDLE,
    nIndex : Int,
    pvInfo : PVOID,
    nLength : CULong,
    lpnLengthNeeded : LPDWORD) Int;

external GetUserObjectInformationW(
    hObj : HANDLE,
    nIndex : Int,
    pvInfo : PVOID,
    nLength : CULong,
    lpnLengthNeeded : LPDWORD) Int;

external SetUserObjectInformationA(
    hObj : HANDLE,
    nIndex : Int,
    pvInfo : PVOID,
    nLength : CULong) Int;

external SetUserObjectInformationW(
    hObj : HANDLE,
    nIndex : Int,
    pvInfo : PVOID,
    nLength : CULong) Int;

record Struct_tagWNDCLASSEXA (
    cbSize : UInt,
    style : UInt,
    lpfnWndProc : WNDPROC,
    cbClsExtra : Int,
    cbWndExtra : Int,
    hInstance : HINSTANCE,
    hIcon : HICON,
    hCursor : HCURSOR,
    hbrBackground : HBRUSH,
    lpszMenuName : LPCSTR,
    lpszClassName : LPCSTR,
    hIconSm : HICON,
);

alias WNDCLASSEXA = Struct_tagWNDCLASSEXA;

alias PWNDCLASSEXA = Pointer[Struct_tagWNDCLASSEXA];

alias NPWNDCLASSEXA = Pointer[Struct_tagWNDCLASSEXA];

alias LPWNDCLASSEXA = Pointer[Struct_tagWNDCLASSEXA];

record Struct_tagWNDCLASSEXW (
    cbSize : UInt,
    style : UInt,
    lpfnWndProc : WNDPROC,
    cbClsExtra : Int,
    cbWndExtra : Int,
    hInstance : HINSTANCE,
    hIcon : HICON,
    hCursor : HCURSOR,
    hbrBackground : HBRUSH,
    lpszMenuName : LPCWSTR,
    lpszClassName : LPCWSTR,
    hIconSm : HICON,
);

alias WNDCLASSEXW = Struct_tagWNDCLASSEXW;

alias PWNDCLASSEXW = Pointer[Struct_tagWNDCLASSEXW];

alias NPWNDCLASSEXW = Pointer[Struct_tagWNDCLASSEXW];

alias LPWNDCLASSEXW = Pointer[Struct_tagWNDCLASSEXW];

alias WNDCLASSEX = WNDCLASSEXA;

alias PWNDCLASSEX = PWNDCLASSEXA;

alias NPWNDCLASSEX = NPWNDCLASSEXA;

alias LPWNDCLASSEX = LPWNDCLASSEXA;

record Struct_tagWNDCLASSA (
    style : UInt,
    lpfnWndProc : WNDPROC,
    cbClsExtra : Int,
    cbWndExtra : Int,
    hInstance : HINSTANCE,
    hIcon : HICON,
    hCursor : HCURSOR,
    hbrBackground : HBRUSH,
    lpszMenuName : LPCSTR,
    lpszClassName : LPCSTR,
);

alias WNDCLASSA = Struct_tagWNDCLASSA;

alias PWNDCLASSA = Pointer[Struct_tagWNDCLASSA];

alias NPWNDCLASSA = Pointer[Struct_tagWNDCLASSA];

alias LPWNDCLASSA = Pointer[Struct_tagWNDCLASSA];

record Struct_tagWNDCLASSW (
    style : UInt,
    lpfnWndProc : WNDPROC,
    cbClsExtra : Int,
    cbWndExtra : Int,
    hInstance : HINSTANCE,
    hIcon : HICON,
    hCursor : HCURSOR,
    hbrBackground : HBRUSH,
    lpszMenuName : LPCWSTR,
    lpszClassName : LPCWSTR,
);

alias WNDCLASSW = Struct_tagWNDCLASSW;

alias PWNDCLASSW = Pointer[Struct_tagWNDCLASSW];

alias NPWNDCLASSW = Pointer[Struct_tagWNDCLASSW];

alias LPWNDCLASSW = Pointer[Struct_tagWNDCLASSW];

alias WNDCLASS = WNDCLASSA;

alias PWNDCLASS = PWNDCLASSA;

alias NPWNDCLASS = NPWNDCLASSA;

alias LPWNDCLASS = LPWNDCLASSA;

external IsHungAppWindow(
    hwnd : HWND) Int;

external DisableProcessWindowsGhosting();

record Struct_tagMSG (
    hwnd : HWND,
    message : UInt,
    wParam : UInt64,
    lParam : Int64,
    time : CULong,
    pt : POINT,
);

alias MSG = Struct_tagMSG;

alias PMSG = Pointer[Struct_tagMSG];

alias NPMSG = Pointer[Struct_tagMSG];

alias LPMSG = Pointer[Struct_tagMSG];

record Struct_tagMINMAXINFO (
    ptReserved : POINT,
    ptMaxSize : POINT,
    ptMaxPosition : POINT,
    ptMinTrackSize : POINT,
    ptMaxTrackSize : POINT,
);

alias MINMAXINFO = Struct_tagMINMAXINFO;

alias PMINMAXINFO = Pointer[Struct_tagMINMAXINFO];

alias LPMINMAXINFO = Pointer[Struct_tagMINMAXINFO];

record Struct_tagCOPYDATASTRUCT (
    dwData : UInt64,
    cbData : CULong,
    lpData : PVOID,
);

alias COPYDATASTRUCT = Struct_tagCOPYDATASTRUCT;

alias PCOPYDATASTRUCT = Pointer[Struct_tagCOPYDATASTRUCT];

record Struct_tagMDINEXTMENU (
    hmenuIn : HMENU,
    hmenuNext : HMENU,
    hwndNext : HWND,
);

alias MDINEXTMENU = Struct_tagMDINEXTMENU;

alias PMDINEXTMENU = Pointer[Struct_tagMDINEXTMENU];

alias LPMDINEXTMENU = Pointer[Struct_tagMDINEXTMENU];

external RegisterWindowMessageA(
    lpString : LPCSTR) UInt;

external RegisterWindowMessageW(
    lpString : LPCWSTR) UInt;

record Struct_tagWINDOWPOS (
    hwnd : HWND,
    hwndInsertAfter : HWND,
    x : Int,
    y : Int,
    cx : Int,
    cy : Int,
    flags : UInt,
);

alias WINDOWPOS = Struct_tagWINDOWPOS;

alias LPWINDOWPOS = Pointer[Struct_tagWINDOWPOS];

alias PWINDOWPOS = Pointer[Struct_tagWINDOWPOS];

record Struct_tagNCCALCSIZE_PARAMS (
    rgrc : Array[RECT,3],
    lppos : PWINDOWPOS,
);

alias NCCALCSIZE_PARAMS = Struct_tagNCCALCSIZE_PARAMS;

alias LPNCCALCSIZE_PARAMS = Pointer[Struct_tagNCCALCSIZE_PARAMS];

record Struct_tagTRACKMOUSEEVENT (
    cbSize : CULong,
    dwFlags : CULong,
    hwndTrack : HWND,
    dwHoverTime : CULong,
);

alias TRACKMOUSEEVENT = Struct_tagTRACKMOUSEEVENT;

alias LPTRACKMOUSEEVENT = Pointer[Struct_tagTRACKMOUSEEVENT];

external TrackMouseEvent(
    lpEventTrack : LPTRACKMOUSEEVENT) Int;

external DrawEdge(
    hdc : HDC,
    qrc : LPRECT,
    edge : UInt,
    grfFlags : UInt) Int;

external DrawFrameControl(
    argument0 : HDC,
    argument1 : LPRECT,
    argument2 : UInt,
    argument3 : UInt) Int;

external DrawCaption(
    hwnd : HWND,
    hdc : HDC,
    lprect : Pointer[RECT],
    flags : UInt) Int;

external DrawAnimatedRects(
    hwnd : HWND,
    idAni : Int,
    lprcFrom : Pointer[RECT],
    lprcTo : Pointer[RECT]) Int;

record Struct_tagACCEL (
    fVirt : CUChar,
    key : UShort,
    cmd : UShort,
);

alias ACCEL = Struct_tagACCEL;

alias LPACCEL = Pointer[Struct_tagACCEL];

record Struct_tagPAINTSTRUCT (
    hdc : HDC,
    fErase : Int,
    rcPaint : RECT,
    fRestore : Int,
    fIncUpdate : Int,
    rgbReserved : Array[CUChar,32],
);

alias PAINTSTRUCT = Struct_tagPAINTSTRUCT;

alias PPAINTSTRUCT = Pointer[Struct_tagPAINTSTRUCT];

alias NPPAINTSTRUCT = Pointer[Struct_tagPAINTSTRUCT];

alias LPPAINTSTRUCT = Pointer[Struct_tagPAINTSTRUCT];

record Struct_tagCREATESTRUCTA (
    lpCreateParams : LPVOID,
    hInstance : HINSTANCE,
    hMenu : HMENU,
    hwndParent : HWND,
    cy : Int,
    cx : Int,
    y : Int,
    x : Int,
    style : CLong,
    lpszName : LPCSTR,
    lpszClass : LPCSTR,
    dwExStyle : CULong,
);

alias CREATESTRUCTA = Struct_tagCREATESTRUCTA;

alias LPCREATESTRUCTA = Pointer[Struct_tagCREATESTRUCTA];

record Struct_tagCREATESTRUCTW (
    lpCreateParams : LPVOID,
    hInstance : HINSTANCE,
    hMenu : HMENU,
    hwndParent : HWND,
    cy : Int,
    cx : Int,
    y : Int,
    x : Int,
    style : CLong,
    lpszName : LPCWSTR,
    lpszClass : LPCWSTR,
    dwExStyle : CULong,
);

alias CREATESTRUCTW = Struct_tagCREATESTRUCTW;

alias LPCREATESTRUCTW = Pointer[Struct_tagCREATESTRUCTW];

alias CREATESTRUCT = CREATESTRUCTA;

alias LPCREATESTRUCT = LPCREATESTRUCTA;

record Struct_tagWINDOWPLACEMENT (
    length : UInt,
    flags : UInt,
    showCmd : UInt,
    ptMinPosition : POINT,
    ptMaxPosition : POINT,
    rcNormalPosition : RECT,
);

alias WINDOWPLACEMENT = Struct_tagWINDOWPLACEMENT;

alias PWINDOWPLACEMENT = Pointer[WINDOWPLACEMENT];

alias LPWINDOWPLACEMENT = Pointer[WINDOWPLACEMENT];

record Struct_tagNMHDR (
    hwndFrom : HWND,
    idFrom : UInt64,
    code : UInt,
);

alias NMHDR = Struct_tagNMHDR;

alias LPNMHDR = Pointer[NMHDR];

record Struct_tagSTYLESTRUCT (
    styleOld : CULong,
    styleNew : CULong,
);

alias STYLESTRUCT = Struct_tagSTYLESTRUCT;

alias LPSTYLESTRUCT = Pointer[Struct_tagSTYLESTRUCT];

record Struct_tagMEASUREITEMSTRUCT (
    CtlType : UInt,
    CtlID : UInt,
    itemID : UInt,
    itemWidth : UInt,
    itemHeight : UInt,
    itemData : UInt64,
);

alias MEASUREITEMSTRUCT = Struct_tagMEASUREITEMSTRUCT;

alias PMEASUREITEMSTRUCT = Pointer[Struct_tagMEASUREITEMSTRUCT];

alias LPMEASUREITEMSTRUCT = Pointer[Struct_tagMEASUREITEMSTRUCT];

record Struct_tagDRAWITEMSTRUCT (
    CtlType : UInt,
    CtlID : UInt,
    itemID : UInt,
    itemAction : UInt,
    itemState : UInt,
    hwndItem : HWND,
    hDC : HDC,
    rcItem : RECT,
    itemData : UInt64,
);

alias DRAWITEMSTRUCT = Struct_tagDRAWITEMSTRUCT;

alias PDRAWITEMSTRUCT = Pointer[Struct_tagDRAWITEMSTRUCT];

alias LPDRAWITEMSTRUCT = Pointer[Struct_tagDRAWITEMSTRUCT];

record Struct_tagDELETEITEMSTRUCT (
    CtlType : UInt,
    CtlID : UInt,
    itemID : UInt,
    hwndItem : HWND,
    itemData : UInt64,
);

alias DELETEITEMSTRUCT = Struct_tagDELETEITEMSTRUCT;

alias PDELETEITEMSTRUCT = Pointer[Struct_tagDELETEITEMSTRUCT];

alias LPDELETEITEMSTRUCT = Pointer[Struct_tagDELETEITEMSTRUCT];

record Struct_tagCOMPAREITEMSTRUCT (
    CtlType : UInt,
    CtlID : UInt,
    hwndItem : HWND,
    itemID1 : UInt,
    itemData1 : UInt64,
    itemID2 : UInt,
    itemData2 : UInt64,
    dwLocaleId : CULong,
);

alias COMPAREITEMSTRUCT = Struct_tagCOMPAREITEMSTRUCT;

alias PCOMPAREITEMSTRUCT = Pointer[Struct_tagCOMPAREITEMSTRUCT];

alias LPCOMPAREITEMSTRUCT = Pointer[Struct_tagCOMPAREITEMSTRUCT];

external GetMessageA(
    lpMsg : LPMSG,
    hWnd : HWND,
    wMsgFilterMin : UInt,
    wMsgFilterMax : UInt) Int;

external GetMessageW(
    lpMsg : LPMSG,
    hWnd : HWND,
    wMsgFilterMin : UInt,
    wMsgFilterMax : UInt) Int;

external TranslateMessage(
    lpMsg : Pointer[MSG]) Int;

external DispatchMessageA(
    lpMsg : Pointer[MSG]) Int64;

external DispatchMessageW(
    lpMsg : Pointer[MSG]) Int64;

external SetMessageQueue(
    cMessagesMax : Int) Int;

external PeekMessageA(
    lpMsg : LPMSG,
    hWnd : HWND,
    wMsgFilterMin : UInt,
    wMsgFilterMax : UInt,
    wRemoveMsg : UInt) Int;

external PeekMessageW(
    lpMsg : LPMSG,
    hWnd : HWND,
    wMsgFilterMin : UInt,
    wMsgFilterMax : UInt,
    wRemoveMsg : UInt) Int;

external RegisterHotKey(
    hWnd : HWND,
    id : Int,
    fsModifiers : UInt,
    vk : UInt) Int;

external UnregisterHotKey(
    hWnd : HWND,
    id : Int) Int;

external ExitWindowsEx(
    uFlags : UInt,
    dwReason : CULong) Int;

external SwapMouseButton(
    fSwap : Int) Int;

external GetMessagePos() CULong;

external GetMessageTime() CLong;

external GetMessageExtraInfo() Int64;

external IsWow64Message() Int;

external SetMessageExtraInfo(
    lParam : Int64) Int64;

external SendMessageA(
    hWnd : HWND,
    Msg : UInt,
    wParam : UInt64,
    lParam : Int64) Int64;

external SendMessageW(
    hWnd : HWND,
    Msg : UInt,
    wParam : UInt64,
    lParam : Int64) Int64;

external SendMessageTimeoutA(
    hWnd : HWND,
    Msg : UInt,
    wParam : UInt64,
    lParam : Int64,
    fuFlags : UInt,
    uTimeout : UInt,
    lpdwResult : PDWORD_PTR) Int64;

external SendMessageTimeoutW(
    hWnd : HWND,
    Msg : UInt,
    wParam : UInt64,
    lParam : Int64,
    fuFlags : UInt,
    uTimeout : UInt,
    lpdwResult : PDWORD_PTR) Int64;

external SendNotifyMessageA(
    hWnd : HWND,
    Msg : UInt,
    wParam : UInt64,
    lParam : Int64) Int;

external SendNotifyMessageW(
    hWnd : HWND,
    Msg : UInt,
    wParam : UInt64,
    lParam : Int64) Int;

external SendMessageCallbackA(
    hWnd : HWND,
    Msg : UInt,
    wParam : UInt64,
    lParam : Int64,
    lpResultCallBack : SENDASYNCPROC,
    dwData : UInt64) Int;

external SendMessageCallbackW(
    hWnd : HWND,
    Msg : UInt,
    wParam : UInt64,
    lParam : Int64,
    lpResultCallBack : SENDASYNCPROC,
    dwData : UInt64) Int;

record UnnamedStruct17 (
    cbSize : UInt,
    hdesk : HDESK,
    hwnd : HWND,
    luid : LUID,
);

alias BSMINFO = UnnamedStruct17;

alias PBSMINFO = Pointer[UnnamedStruct17];

external BroadcastSystemMessageExA(
    flags : CULong,
    lpInfo : LPDWORD,
    Msg : UInt,
    wParam : UInt64,
    lParam : Int64,
    pbsmInfo : PBSMINFO) CLong;

external BroadcastSystemMessageExW(
    flags : CULong,
    lpInfo : LPDWORD,
    Msg : UInt,
    wParam : UInt64,
    lParam : Int64,
    pbsmInfo : PBSMINFO) CLong;

external BroadcastSystemMessageA(
    flags : CULong,
    lpInfo : LPDWORD,
    Msg : UInt,
    wParam : UInt64,
    lParam : Int64) CLong;

external BroadcastSystemMessageW(
    flags : CULong,
    lpInfo : LPDWORD,
    Msg : UInt,
    wParam : UInt64,
    lParam : Int64) CLong;

alias HDEVNOTIFY = PVOID;

alias PHDEVNOTIFY = Pointer[HDEVNOTIFY];

external RegisterDeviceNotificationA(
    hRecipient : HANDLE,
    NotificationFilter : LPVOID,
    Flags : CULong) HDEVNOTIFY;

external RegisterDeviceNotificationW(
    hRecipient : HANDLE,
    NotificationFilter : LPVOID,
    Flags : CULong) HDEVNOTIFY;

external UnregisterDeviceNotification(
    Handle : HDEVNOTIFY) Int;

external PostMessageA(
    hWnd : HWND,
    Msg : UInt,
    wParam : UInt64,
    lParam : Int64) Int;

external PostMessageW(
    hWnd : HWND,
    Msg : UInt,
    wParam : UInt64,
    lParam : Int64) Int;

external PostThreadMessageA(
    idThread : CULong,
    Msg : UInt,
    wParam : UInt64,
    lParam : Int64) Int;

external PostThreadMessageW(
    idThread : CULong,
    Msg : UInt,
    wParam : UInt64,
    lParam : Int64) Int;

external AttachThreadInput(
    idAttach : CULong,
    idAttachTo : CULong,
    fAttach : Int) Int;

external ReplyMessage(
    lResult : Int64) Int;

external WaitMessage() Int;

external WaitForInputIdle(
    hProcess : HANDLE,
    dwMilliseconds : CULong) CULong;

external DefWindowProcA(
    hWnd : HWND,
    Msg : UInt,
    wParam : UInt64,
    lParam : Int64) Int64;

external DefWindowProcW(
    hWnd : HWND,
    Msg : UInt,
    wParam : UInt64,
    lParam : Int64) Int64;

external PostQuitMessage(
    nExitCode : Int);

external CallWindowProcA(
    lpPrevWndFunc : WNDPROC,
    hWnd : HWND,
    Msg : UInt,
    wParam : UInt64,
    lParam : Int64) Int64;

external CallWindowProcW(
    lpPrevWndFunc : WNDPROC,
    hWnd : HWND,
    Msg : UInt,
    wParam : UInt64,
    lParam : Int64) Int64;

external InSendMessage() Int;

external InSendMessageEx(
    lpReserved : LPVOID) CULong;

external GetDoubleClickTime() UInt;

external SetDoubleClickTime(
    argument0 : UInt) Int;

external RegisterClassA(
    lpWndClass : Pointer[WNDCLASSA]) UShort;

external RegisterClassW(
    lpWndClass : Pointer[WNDCLASSW]) UShort;

external UnregisterClassA(
    lpClassName : LPCSTR,
    hInstance : HINSTANCE) Int;

external UnregisterClassW(
    lpClassName : LPCWSTR,
    hInstance : HINSTANCE) Int;

external GetClassInfoA(
    hInstance : HINSTANCE,
    lpClassName : LPCSTR,
    lpWndClass : LPWNDCLASSA) Int;

external GetClassInfoW(
    hInstance : HINSTANCE,
    lpClassName : LPCWSTR,
    lpWndClass : LPWNDCLASSW) Int;

external RegisterClassExA(
    argument0 : Pointer[WNDCLASSEXA]) UShort;

external RegisterClassExW(
    argument0 : Pointer[WNDCLASSEXW]) UShort;

external GetClassInfoExA(
    hInstance : HINSTANCE,
    lpszClass : LPCSTR,
    lpwcx : LPWNDCLASSEXA) Int;

external GetClassInfoExW(
    hInstance : HINSTANCE,
    lpszClass : LPCWSTR,
    lpwcx : LPWNDCLASSEXW) Int;

alias PREGISTERCLASSNAMEW = CCodePointer[(Pointer[UShort]),(CUChar)];

external CreateWindowExA(
    dwExStyle : CULong,
    lpClassName : LPCSTR,
    lpWindowName : LPCSTR,
    dwStyle : CULong,
    X : Int,
    Y : Int,
    nWidth : Int,
    nHeight : Int,
    hWndParent : HWND,
    hMenu : HMENU,
    hInstance : HINSTANCE,
    lpParam : LPVOID) HWND;

external CreateWindowExW(
    dwExStyle : CULong,
    lpClassName : LPCWSTR,
    lpWindowName : LPCWSTR,
    dwStyle : CULong,
    X : Int,
    Y : Int,
    nWidth : Int,
    nHeight : Int,
    hWndParent : HWND,
    hMenu : HMENU,
    hInstance : HINSTANCE,
    lpParam : LPVOID) HWND;

external IsWindow(
    hWnd : HWND) Int;

external IsMenu(
    hMenu : HMENU) Int;

external IsChild(
    hWndParent : HWND,
    hWnd : HWND) Int;

external DestroyWindow(
    hWnd : HWND) Int;

external ShowWindow(
    hWnd : HWND,
    nCmdShow : Int) Int;

external AnimateWindow(
    hWnd : HWND,
    dwTime : CULong,
    dwFlags : CULong) Int;

external UpdateLayeredWindow(
    hWnd : HWND,
    hdcDst : HDC,
    pptDst : Pointer[POINT],
    psize : Pointer[SIZE],
    hdcSrc : HDC,
    pptSrc : Pointer[POINT],
    crKey : CULong,
    pblend : Pointer[BLENDFUNCTION],
    dwFlags : CULong) Int;

record Struct_tagUPDATELAYEREDWINDOWINFO (
    cbSize : CULong,
    hdcDst : HDC,
    pptDst : Pointer[POINT],
    psize : Pointer[SIZE],
    hdcSrc : HDC,
    pptSrc : Pointer[POINT],
    crKey : CULong,
    pblend : Pointer[BLENDFUNCTION],
    dwFlags : CULong,
    prcDirty : Pointer[RECT],
);

alias UPDATELAYEREDWINDOWINFO = Struct_tagUPDATELAYEREDWINDOWINFO;

alias PUPDATELAYEREDWINDOWINFO = Pointer[Struct_tagUPDATELAYEREDWINDOWINFO];

external UpdateLayeredWindowIndirect(
    hWnd : HWND,
    pULWInfo : Pointer[UPDATELAYEREDWINDOWINFO]) Int;

external GetLayeredWindowAttributes(
    hwnd : HWND,
    pcrKey : Pointer[CULong],
    pbAlpha : Pointer[CUChar],
    pdwFlags : Pointer[CULong]) Int;

external PrintWindow(
    hwnd : HWND,
    hdcBlt : HDC,
    nFlags : UInt) Int;

external SetLayeredWindowAttributes(
    hwnd : HWND,
    crKey : CULong,
    bAlpha : CUChar,
    dwFlags : CULong) Int;

external ShowWindowAsync(
    hWnd : HWND,
    nCmdShow : Int) Int;

external FlashWindow(
    hWnd : HWND,
    bInvert : Int) Int;

record UnnamedStruct18 (
    cbSize : UInt,
    hwnd : HWND,
    dwFlags : CULong,
    uCount : UInt,
    dwTimeout : CULong,
);

alias FLASHWINFO = UnnamedStruct18;

alias PFLASHWINFO = Pointer[UnnamedStruct18];

external FlashWindowEx(
    pfwi : PFLASHWINFO) Int;

external ShowOwnedPopups(
    hWnd : HWND,
    fShow : Int) Int;

external OpenIcon(
    hWnd : HWND) Int;

external CloseWindow(
    hWnd : HWND) Int;

external MoveWindow(
    hWnd : HWND,
    X : Int,
    Y : Int,
    nWidth : Int,
    nHeight : Int,
    bRepaint : Int) Int;

external SetWindowPos(
    hWnd : HWND,
    hWndInsertAfter : HWND,
    X : Int,
    Y : Int,
    cx : Int,
    cy : Int,
    uFlags : UInt) Int;

external GetWindowPlacement(
    hWnd : HWND,
    lpwndpl : Pointer[WINDOWPLACEMENT]) Int;

external SetWindowPlacement(
    hWnd : HWND,
    lpwndpl : Pointer[WINDOWPLACEMENT]) Int;

external BeginDeferWindowPos(
    nNumWindows : Int) HDWP;

external DeferWindowPos(
    hWinPosInfo : HDWP,
    hWnd : HWND,
    hWndInsertAfter : HWND,
    x : Int,
    y : Int,
    cx : Int,
    cy : Int,
    uFlags : UInt) HDWP;

external EndDeferWindowPos(
    hWinPosInfo : HDWP) Int;

external IsWindowVisible(
    hWnd : HWND) Int;

external IsIconic(
    hWnd : HWND) Int;

external AnyPopup() Int;

external BringWindowToTop(
    hWnd : HWND) Int;

external IsZoomed(
    hWnd : HWND) Int;

record UnnamedStruct19 (
    style : CULong,
    dwExtendedStyle : CULong,
    cdit : UShort,
    x : Short,
    y : Short,
    cx : Short,
    cy : Short,
);

alias DLGTEMPLATE = UnnamedStruct19;

alias LPDLGTEMPLATEA = Pointer[DLGTEMPLATE];

alias LPDLGTEMPLATEW = Pointer[DLGTEMPLATE];

alias LPDLGTEMPLATE = LPDLGTEMPLATEA;

alias LPCDLGTEMPLATEA = Pointer[DLGTEMPLATE];

alias LPCDLGTEMPLATEW = Pointer[DLGTEMPLATE];

alias LPCDLGTEMPLATE = LPCDLGTEMPLATEA;

record UnnamedStruct20 (
    style : CULong,
    dwExtendedStyle : CULong,
    x : Short,
    y : Short,
    cx : Short,
    cy : Short,
    id : UShort,
);

alias DLGITEMTEMPLATE = UnnamedStruct20;

alias PDLGITEMTEMPLATEA = Pointer[DLGITEMTEMPLATE];

alias PDLGITEMTEMPLATEW = Pointer[DLGITEMTEMPLATE];

alias PDLGITEMTEMPLATE = PDLGITEMTEMPLATEA;

alias LPDLGITEMTEMPLATEA = Pointer[DLGITEMTEMPLATE];

alias LPDLGITEMTEMPLATEW = Pointer[DLGITEMTEMPLATE];

alias LPDLGITEMTEMPLATE = LPDLGITEMTEMPLATEA;

external CreateDialogParamA(
    hInstance : HINSTANCE,
    lpTemplateName : LPCSTR,
    hWndParent : HWND,
    lpDialogFunc : DLGPROC,
    dwInitParam : Int64) HWND;

external CreateDialogParamW(
    hInstance : HINSTANCE,
    lpTemplateName : LPCWSTR,
    hWndParent : HWND,
    lpDialogFunc : DLGPROC,
    dwInitParam : Int64) HWND;

external CreateDialogIndirectParamA(
    hInstance : HINSTANCE,
    lpTemplate : LPCDLGTEMPLATEA,
    hWndParent : HWND,
    lpDialogFunc : DLGPROC,
    dwInitParam : Int64) HWND;

external CreateDialogIndirectParamW(
    hInstance : HINSTANCE,
    lpTemplate : LPCDLGTEMPLATEW,
    hWndParent : HWND,
    lpDialogFunc : DLGPROC,
    dwInitParam : Int64) HWND;

external DialogBoxParamA(
    hInstance : HINSTANCE,
    lpTemplateName : LPCSTR,
    hWndParent : HWND,
    lpDialogFunc : DLGPROC,
    dwInitParam : Int64) Int64;

external DialogBoxParamW(
    hInstance : HINSTANCE,
    lpTemplateName : LPCWSTR,
    hWndParent : HWND,
    lpDialogFunc : DLGPROC,
    dwInitParam : Int64) Int64;

external DialogBoxIndirectParamA(
    hInstance : HINSTANCE,
    hDialogTemplate : LPCDLGTEMPLATEA,
    hWndParent : HWND,
    lpDialogFunc : DLGPROC,
    dwInitParam : Int64) Int64;

external DialogBoxIndirectParamW(
    hInstance : HINSTANCE,
    hDialogTemplate : LPCDLGTEMPLATEW,
    hWndParent : HWND,
    lpDialogFunc : DLGPROC,
    dwInitParam : Int64) Int64;

external EndDialog(
    hDlg : HWND,
    nResult : Int64) Int;

external GetDlgItem(
    hDlg : HWND,
    nIDDlgItem : Int) HWND;

external SetDlgItemInt(
    hDlg : HWND,
    nIDDlgItem : Int,
    uValue : UInt,
    bSigned : Int) Int;

external GetDlgItemInt(
    hDlg : HWND,
    nIDDlgItem : Int,
    lpTranslated : Pointer[Int],
    bSigned : Int) UInt;

external SetDlgItemTextA(
    hDlg : HWND,
    nIDDlgItem : Int,
    lpString : LPCSTR) Int;

external SetDlgItemTextW(
    hDlg : HWND,
    nIDDlgItem : Int,
    lpString : LPCWSTR) Int;

external GetDlgItemTextA(
    hDlg : HWND,
    nIDDlgItem : Int,
    lpString : LPSTR,
    cchMax : Int) UInt;

external GetDlgItemTextW(
    hDlg : HWND,
    nIDDlgItem : Int,
    lpString : LPWSTR,
    cchMax : Int) UInt;

external CheckDlgButton(
    hDlg : HWND,
    nIDButton : Int,
    uCheck : UInt) Int;

external CheckRadioButton(
    hDlg : HWND,
    nIDFirstButton : Int,
    nIDLastButton : Int,
    nIDCheckButton : Int) Int;

external IsDlgButtonChecked(
    hDlg : HWND,
    nIDButton : Int) UInt;

external SendDlgItemMessageA(
    hDlg : HWND,
    nIDDlgItem : Int,
    Msg : UInt,
    wParam : UInt64,
    lParam : Int64) Int64;

external SendDlgItemMessageW(
    hDlg : HWND,
    nIDDlgItem : Int,
    Msg : UInt,
    wParam : UInt64,
    lParam : Int64) Int64;

external GetNextDlgGroupItem(
    hDlg : HWND,
    hCtl : HWND,
    bPrevious : Int) HWND;

external GetNextDlgTabItem(
    hDlg : HWND,
    hCtl : HWND,
    bPrevious : Int) HWND;

external GetDlgCtrlID(
    hWnd : HWND) Int;

external GetDialogBaseUnits() CLong;

external DefDlgProcA(
    hDlg : HWND,
    Msg : UInt,
    wParam : UInt64,
    lParam : Int64) Int64;

external DefDlgProcW(
    hDlg : HWND,
    Msg : UInt,
    wParam : UInt64,
    lParam : Int64) Int64;

external CallMsgFilterA(
    lpMsg : LPMSG,
    nCode : Int) Int;

external CallMsgFilterW(
    lpMsg : LPMSG,
    nCode : Int) Int;

external OpenClipboard(
    hWndNewOwner : HWND) Int;

external CloseClipboard() Int;

external GetClipboardSequenceNumber() CULong;

external GetClipboardOwner() HWND;

external SetClipboardViewer(
    hWndNewViewer : HWND) HWND;

external GetClipboardViewer() HWND;

external ChangeClipboardChain(
    hWndRemove : HWND,
    hWndNewNext : HWND) Int;

external SetClipboardData(
    uFormat : UInt,
    hMem : HANDLE) HANDLE;

external GetClipboardData(
    uFormat : UInt) HANDLE;

external RegisterClipboardFormatA(
    lpszFormat : LPCSTR) UInt;

external RegisterClipboardFormatW(
    lpszFormat : LPCWSTR) UInt;

external CountClipboardFormats() Int;

external EnumClipboardFormats(
    format : UInt) UInt;

external GetClipboardFormatNameA(
    format : UInt,
    lpszFormatName : LPSTR,
    cchMaxCount : Int) Int;

external GetClipboardFormatNameW(
    format : UInt,
    lpszFormatName : LPWSTR,
    cchMaxCount : Int) Int;

external EmptyClipboard() Int;

external IsClipboardFormatAvailable(
    format : UInt) Int;

external GetPriorityClipboardFormat(
    paFormatPriorityList : Pointer[UInt],
    cFormats : Int) Int;

external GetOpenClipboardWindow() HWND;

external CharToOemA(
    lpszSrc : LPCSTR,
    lpszDst : LPSTR) Int;

external CharToOemW(
    lpszSrc : LPCWSTR,
    lpszDst : LPSTR) Int;

external OemToCharA(
    lpszSrc : LPCSTR,
    lpszDst : LPSTR) Int;

external OemToCharW(
    lpszSrc : LPCSTR,
    lpszDst : LPWSTR) Int;

external CharToOemBuffA(
    lpszSrc : LPCSTR,
    lpszDst : LPSTR,
    cchDstLength : CULong) Int;

external CharToOemBuffW(
    lpszSrc : LPCWSTR,
    lpszDst : LPSTR,
    cchDstLength : CULong) Int;

external OemToCharBuffA(
    lpszSrc : LPCSTR,
    lpszDst : LPSTR,
    cchDstLength : CULong) Int;

external OemToCharBuffW(
    lpszSrc : LPCSTR,
    lpszDst : LPWSTR,
    cchDstLength : CULong) Int;

external CharUpperA(
    lpsz : LPSTR) LPSTR;

external CharUpperW(
    lpsz : LPWSTR) LPWSTR;

external CharUpperBuffA(
    lpsz : LPSTR,
    cchLength : CULong) CULong;

external CharUpperBuffW(
    lpsz : LPWSTR,
    cchLength : CULong) CULong;

external CharLowerA(
    lpsz : LPSTR) LPSTR;

external CharLowerW(
    lpsz : LPWSTR) LPWSTR;

external CharLowerBuffA(
    lpsz : LPSTR,
    cchLength : CULong) CULong;

external CharLowerBuffW(
    lpsz : LPWSTR,
    cchLength : CULong) CULong;

external CharNextA(
    lpsz : LPCSTR) LPSTR;

external CharNextW(
    lpsz : LPCWSTR) LPWSTR;

external CharPrevA(
    lpszStart : LPCSTR,
    lpszCurrent : LPCSTR) LPSTR;

external CharPrevW(
    lpszStart : LPCWSTR,
    lpszCurrent : LPCWSTR) LPWSTR;

external CharNextExA(
    CodePage : UShort,
    lpCurrentChar : LPCSTR,
    dwFlags : CULong) LPSTR;

external CharPrevExA(
    CodePage : UShort,
    lpStart : LPCSTR,
    lpCurrentChar : LPCSTR,
    dwFlags : CULong) LPSTR;

external IsCharAlphaA(
    ch : CChar) Int;

external IsCharAlphaW(
    ch : UShort) Int;

external IsCharAlphaNumericA(
    ch : CChar) Int;

external IsCharAlphaNumericW(
    ch : UShort) Int;

external IsCharUpperA(
    ch : CChar) Int;

external IsCharUpperW(
    ch : UShort) Int;

external IsCharLowerA(
    ch : CChar) Int;

external IsCharLowerW(
    ch : UShort) Int;

external SetFocus(
    hWnd : HWND) HWND;

external GetActiveWindow() HWND;

external GetFocus() HWND;

external GetKBCodePage() UInt;

external GetKeyState(
    nVirtKey : Int) Short;

external GetAsyncKeyState(
    vKey : Int) Short;

external GetKeyboardState(
    lpKeyState : PBYTE) Int;

external SetKeyboardState(
    lpKeyState : LPBYTE) Int;

external GetKeyNameTextA(
    lParam : CLong,
    lpString : LPSTR,
    cchSize : Int) Int;

external GetKeyNameTextW(
    lParam : CLong,
    lpString : LPWSTR,
    cchSize : Int) Int;

external GetKeyboardType(
    nTypeFlag : Int) Int;

external ToAscii(
    uVirtKey : UInt,
    uScanCode : UInt,
    lpKeyState : Pointer[CUChar],
    lpChar : LPWORD,
    uFlags : UInt) Int;

external ToAsciiEx(
    uVirtKey : UInt,
    uScanCode : UInt,
    lpKeyState : Pointer[CUChar],
    lpChar : LPWORD,
    uFlags : UInt,
    dwhkl : HKL) Int;

external ToUnicode(
    wVirtKey : UInt,
    wScanCode : UInt,
    lpKeyState : Pointer[CUChar],
    pwszBuff : LPWSTR,
    cchBuff : Int,
    wFlags : UInt) Int;

external OemKeyScan(
    wOemChar : UShort) CULong;

external VkKeyScanA(
    ch : CChar) Short;

external VkKeyScanW(
    ch : UShort) Short;

external VkKeyScanExA(
    ch : CChar,
    dwhkl : HKL) Short;

external VkKeyScanExW(
    ch : UShort,
    dwhkl : HKL) Short;

external keybd_event(
    bVk : CUChar,
    bScan : CUChar,
    dwFlags : CULong,
    dwExtraInfo : UInt64);

external mouse_event(
    dwFlags : CULong,
    dx : CULong,
    dy : CULong,
    dwData : CULong,
    dwExtraInfo : UInt64);

record Struct_tagMOUSEINPUT (
    dx : CLong,
    dy : CLong,
    mouseData : CULong,
    dwFlags : CULong,
    time : CULong,
    dwExtraInfo : UInt64,
);

alias MOUSEINPUT = Struct_tagMOUSEINPUT;

alias PMOUSEINPUT = Pointer[Struct_tagMOUSEINPUT];

alias LPMOUSEINPUT = Pointer[Struct_tagMOUSEINPUT];

record Struct_tagKEYBDINPUT (
    wVk : UShort,
    wScan : UShort,
    dwFlags : CULong,
    time : CULong,
    dwExtraInfo : UInt64,
);

alias KEYBDINPUT = Struct_tagKEYBDINPUT;

alias PKEYBDINPUT = Pointer[Struct_tagKEYBDINPUT];

alias LPKEYBDINPUT = Pointer[Struct_tagKEYBDINPUT];

record Struct_tagHARDWAREINPUT (
    uMsg : CULong,
    wParamL : UShort,
    wParamH : UShort,
);

alias HARDWAREINPUT = Struct_tagHARDWAREINPUT;

alias PHARDWAREINPUT = Pointer[Struct_tagHARDWAREINPUT];

alias LPHARDWAREINPUT = Pointer[Struct_tagHARDWAREINPUT];

record Struct_tagINPUT (
    type : CULong,
    unnamed_field1 : AUnionType,
);

alias INPUT = Struct_tagINPUT;

alias PINPUT = Pointer[Struct_tagINPUT];

alias LPINPUT = Pointer[Struct_tagINPUT];

external SendInput(
    cInputs : UInt,
    pInputs : LPINPUT,
    cbSize : Int) UInt;

record Struct_tagLASTINPUTINFO (
    cbSize : UInt,
    dwTime : CULong,
);

alias LASTINPUTINFO = Struct_tagLASTINPUTINFO;

alias PLASTINPUTINFO = Pointer[Struct_tagLASTINPUTINFO];

external GetLastInputInfo(
    plii : PLASTINPUTINFO) Int;

external MapVirtualKeyA(
    uCode : UInt,
    uMapType : UInt) UInt;

external MapVirtualKeyW(
    uCode : UInt,
    uMapType : UInt) UInt;

external MapVirtualKeyExA(
    uCode : UInt,
    uMapType : UInt,
    dwhkl : HKL) UInt;

external MapVirtualKeyExW(
    uCode : UInt,
    uMapType : UInt,
    dwhkl : HKL) UInt;

external GetInputState() Int;

external GetQueueStatus(
    flags : UInt) CULong;

external GetCapture() HWND;

external SetCapture(
    hWnd : HWND) HWND;

external ReleaseCapture() Int;

external MsgWaitForMultipleObjects(
    nCount : CULong,
    pHandles : Pointer[HANDLE],
    fWaitAll : Int,
    dwMilliseconds : CULong,
    dwWakeMask : CULong) CULong;

external MsgWaitForMultipleObjectsEx(
    nCount : CULong,
    pHandles : Pointer[HANDLE],
    dwMilliseconds : CULong,
    dwWakeMask : CULong,
    dwFlags : CULong) CULong;

external SetTimer(
    hWnd : HWND,
    nIDEvent : UInt64,
    uElapse : UInt,
    lpTimerFunc : TIMERPROC) UInt64;

external KillTimer(
    hWnd : HWND,
    uIDEvent : UInt64) Int;

external IsWindowUnicode(
    hWnd : HWND) Int;

external EnableWindow(
    hWnd : HWND,
    bEnable : Int) Int;

external IsWindowEnabled(
    hWnd : HWND) Int;

external LoadAcceleratorsA(
    hInstance : HINSTANCE,
    lpTableName : LPCSTR) HACCEL;

external LoadAcceleratorsW(
    hInstance : HINSTANCE,
    lpTableName : LPCWSTR) HACCEL;

external CreateAcceleratorTableA(
    paccel : LPACCEL,
    cAccel : Int) HACCEL;

external CreateAcceleratorTableW(
    paccel : LPACCEL,
    cAccel : Int) HACCEL;

external DestroyAcceleratorTable(
    hAccel : HACCEL) Int;

external CopyAcceleratorTableA(
    hAccelSrc : HACCEL,
    lpAccelDst : LPACCEL,
    cAccelEntries : Int) Int;

external CopyAcceleratorTableW(
    hAccelSrc : HACCEL,
    lpAccelDst : LPACCEL,
    cAccelEntries : Int) Int;

external TranslateAcceleratorA(
    hWnd : HWND,
    hAccTable : HACCEL,
    lpMsg : LPMSG) Int;

external TranslateAcceleratorW(
    hWnd : HWND,
    hAccTable : HACCEL,
    lpMsg : LPMSG) Int;

external GetSystemMetrics(
    nIndex : Int) Int;

external LoadMenuA(
    hInstance : HINSTANCE,
    lpMenuName : LPCSTR) HMENU;

external LoadMenuW(
    hInstance : HINSTANCE,
    lpMenuName : LPCWSTR) HMENU;

external LoadMenuIndirectA(
    lpMenuTemplate : RawPointer) HMENU;

external LoadMenuIndirectW(
    lpMenuTemplate : RawPointer) HMENU;

external GetMenu(
    hWnd : HWND) HMENU;

external SetMenu(
    hWnd : HWND,
    hMenu : HMENU) Int;

external ChangeMenuA(
    hMenu : HMENU,
    cmd : UInt,
    lpszNewItem : LPCSTR,
    cmdInsert : UInt,
    flags : UInt) Int;

external ChangeMenuW(
    hMenu : HMENU,
    cmd : UInt,
    lpszNewItem : LPCWSTR,
    cmdInsert : UInt,
    flags : UInt) Int;

external HiliteMenuItem(
    hWnd : HWND,
    hMenu : HMENU,
    uIDHiliteItem : UInt,
    uHilite : UInt) Int;

external GetMenuStringA(
    hMenu : HMENU,
    uIDItem : UInt,
    lpString : LPSTR,
    cchMax : Int,
    flags : UInt) Int;

external GetMenuStringW(
    hMenu : HMENU,
    uIDItem : UInt,
    lpString : LPWSTR,
    cchMax : Int,
    flags : UInt) Int;

external GetMenuState(
    hMenu : HMENU,
    uId : UInt,
    uFlags : UInt) UInt;

external DrawMenuBar(
    hWnd : HWND) Int;

external GetSystemMenu(
    hWnd : HWND,
    bRevert : Int) HMENU;

external CreateMenu() HMENU;

external CreatePopupMenu() HMENU;

external DestroyMenu(
    hMenu : HMENU) Int;

external CheckMenuItem(
    hMenu : HMENU,
    uIDCheckItem : UInt,
    uCheck : UInt) CULong;

external EnableMenuItem(
    hMenu : HMENU,
    uIDEnableItem : UInt,
    uEnable : UInt) Int;

external GetSubMenu(
    hMenu : HMENU,
    nPos : Int) HMENU;

external GetMenuItemID(
    hMenu : HMENU,
    nPos : Int) UInt;

external GetMenuItemCount(
    hMenu : HMENU) Int;

external InsertMenuA(
    hMenu : HMENU,
    uPosition : UInt,
    uFlags : UInt,
    uIDNewItem : UInt64,
    lpNewItem : LPCSTR) Int;

external InsertMenuW(
    hMenu : HMENU,
    uPosition : UInt,
    uFlags : UInt,
    uIDNewItem : UInt64,
    lpNewItem : LPCWSTR) Int;

external AppendMenuA(
    hMenu : HMENU,
    uFlags : UInt,
    uIDNewItem : UInt64,
    lpNewItem : LPCSTR) Int;

external AppendMenuW(
    hMenu : HMENU,
    uFlags : UInt,
    uIDNewItem : UInt64,
    lpNewItem : LPCWSTR) Int;

external ModifyMenuA(
    hMnu : HMENU,
    uPosition : UInt,
    uFlags : UInt,
    uIDNewItem : UInt64,
    lpNewItem : LPCSTR) Int;

external ModifyMenuW(
    hMnu : HMENU,
    uPosition : UInt,
    uFlags : UInt,
    uIDNewItem : UInt64,
    lpNewItem : LPCWSTR) Int;

external RemoveMenu(
    hMenu : HMENU,
    uPosition : UInt,
    uFlags : UInt) Int;

external DeleteMenu(
    hMenu : HMENU,
    uPosition : UInt,
    uFlags : UInt) Int;

external SetMenuItemBitmaps(
    hMenu : HMENU,
    uPosition : UInt,
    uFlags : UInt,
    hBitmapUnchecked : HBITMAP,
    hBitmapChecked : HBITMAP) Int;

external GetMenuCheckMarkDimensions() CLong;

external TrackPopupMenu(
    hMenu : HMENU,
    uFlags : UInt,
    x : Int,
    y : Int,
    nReserved : Int,
    hWnd : HWND,
    prcRect : Pointer[RECT]) Int;

record Struct_tagTPMPARAMS (
    cbSize : UInt,
    rcExclude : RECT,
);

alias TPMPARAMS = Struct_tagTPMPARAMS;

alias LPTPMPARAMS = Pointer[TPMPARAMS];

external TrackPopupMenuEx(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : Int,
    argument3 : Int,
    argument4 : HWND,
    argument5 : LPTPMPARAMS) Int;

record Struct_tagMENUINFO (
    cbSize : CULong,
    fMask : CULong,
    dwStyle : CULong,
    cyMax : UInt,
    hbrBack : HBRUSH,
    dwContextHelpID : CULong,
    dwMenuData : UInt64,
);

alias MENUINFO = Struct_tagMENUINFO;

alias LPMENUINFO = Pointer[Struct_tagMENUINFO];

alias LPCMENUINFO = Pointer[MENUINFO];

external GetMenuInfo(
    argument0 : HMENU,
    argument1 : LPMENUINFO) Int;

external SetMenuInfo(
    argument0 : HMENU,
    argument1 : LPCMENUINFO) Int;

external EndMenu() Int;

record Struct_tagMENUGETOBJECTINFO (
    dwFlags : CULong,
    uPos : UInt,
    hmenu : HMENU,
    riid : PVOID,
    pvObj : PVOID,
);

alias MENUGETOBJECTINFO = Struct_tagMENUGETOBJECTINFO;

alias PMENUGETOBJECTINFO = Pointer[Struct_tagMENUGETOBJECTINFO];

record Struct_tagMENUITEMINFOA (
    cbSize : UInt,
    fMask : UInt,
    fType : UInt,
    fState : UInt,
    wID : UInt,
    hSubMenu : HMENU,
    hbmpChecked : HBITMAP,
    hbmpUnchecked : HBITMAP,
    dwItemData : UInt64,
    dwTypeData : LPSTR,
    cch : UInt,
    hbmpItem : HBITMAP,
);

alias MENUITEMINFOA = Struct_tagMENUITEMINFOA;

alias LPMENUITEMINFOA = Pointer[Struct_tagMENUITEMINFOA];

record Struct_tagMENUITEMINFOW (
    cbSize : UInt,
    fMask : UInt,
    fType : UInt,
    fState : UInt,
    wID : UInt,
    hSubMenu : HMENU,
    hbmpChecked : HBITMAP,
    hbmpUnchecked : HBITMAP,
    dwItemData : UInt64,
    dwTypeData : LPWSTR,
    cch : UInt,
    hbmpItem : HBITMAP,
);

alias MENUITEMINFOW = Struct_tagMENUITEMINFOW;

alias LPMENUITEMINFOW = Pointer[Struct_tagMENUITEMINFOW];

alias MENUITEMINFO = MENUITEMINFOA;

alias LPMENUITEMINFO = LPMENUITEMINFOA;

alias LPCMENUITEMINFOA = Pointer[MENUITEMINFOA];

alias LPCMENUITEMINFOW = Pointer[MENUITEMINFOW];

alias LPCMENUITEMINFO = LPCMENUITEMINFOA;

external InsertMenuItemA(
    hmenu : HMENU,
    item : UInt,
    fByPosition : Int,
    lpmi : LPCMENUITEMINFOA) Int;

external InsertMenuItemW(
    hmenu : HMENU,
    item : UInt,
    fByPosition : Int,
    lpmi : LPCMENUITEMINFOW) Int;

external GetMenuItemInfoA(
    hmenu : HMENU,
    item : UInt,
    fByPosition : Int,
    lpmii : LPMENUITEMINFOA) Int;

external GetMenuItemInfoW(
    hmenu : HMENU,
    item : UInt,
    fByPosition : Int,
    lpmii : LPMENUITEMINFOW) Int;

external SetMenuItemInfoA(
    hmenu : HMENU,
    item : UInt,
    fByPositon : Int,
    lpmii : LPCMENUITEMINFOA) Int;

external SetMenuItemInfoW(
    hmenu : HMENU,
    item : UInt,
    fByPositon : Int,
    lpmii : LPCMENUITEMINFOW) Int;

external GetMenuDefaultItem(
    hMenu : HMENU,
    fByPos : UInt,
    gmdiFlags : UInt) UInt;

external SetMenuDefaultItem(
    hMenu : HMENU,
    uItem : UInt,
    fByPos : UInt) Int;

external GetMenuItemRect(
    hWnd : HWND,
    hMenu : HMENU,
    uItem : UInt,
    lprcItem : LPRECT) Int;

external MenuItemFromPoint(
    hWnd : HWND,
    hMenu : HMENU,
    ptScreen : POINT) Int;

record Struct_tagDROPSTRUCT (
    hwndSource : HWND,
    hwndSink : HWND,
    wFmt : CULong,
    dwData : UInt64,
    ptDrop : POINT,
    dwControlData : CULong,
);

alias DROPSTRUCT = Struct_tagDROPSTRUCT;

alias PDROPSTRUCT = Pointer[Struct_tagDROPSTRUCT];

alias LPDROPSTRUCT = Pointer[Struct_tagDROPSTRUCT];

external DragObject(
    hwndParent : HWND,
    hwndFrom : HWND,
    fmt : UInt,
    data : UInt64,
    hcur : HCURSOR) CULong;

external DragDetect(
    hwnd : HWND,
    pt : POINT) Int;

external DrawIcon(
    hDC : HDC,
    X : Int,
    Y : Int,
    hIcon : HICON) Int;

record Struct_tagDRAWTEXTPARAMS (
    cbSize : UInt,
    iTabLength : Int,
    iLeftMargin : Int,
    iRightMargin : Int,
    uiLengthDrawn : UInt,
);

alias DRAWTEXTPARAMS = Struct_tagDRAWTEXTPARAMS;

alias LPDRAWTEXTPARAMS = Pointer[Struct_tagDRAWTEXTPARAMS];

external DrawTextA(
    hdc : HDC,
    lpchText : LPCSTR,
    cchText : Int,
    lprc : LPRECT,
    format : UInt) Int;

external DrawTextW(
    hdc : HDC,
    lpchText : LPCWSTR,
    cchText : Int,
    lprc : LPRECT,
    format : UInt) Int;

external DrawTextExA(
    hdc : HDC,
    lpchText : LPSTR,
    cchText : Int,
    lprc : LPRECT,
    format : UInt,
    lpdtp : LPDRAWTEXTPARAMS) Int;

external DrawTextExW(
    hdc : HDC,
    lpchText : LPWSTR,
    cchText : Int,
    lprc : LPRECT,
    format : UInt,
    lpdtp : LPDRAWTEXTPARAMS) Int;

external GrayStringA(
    hDC : HDC,
    hBrush : HBRUSH,
    lpOutputFunc : GRAYSTRINGPROC,
    lpData : Int64,
    nCount : Int,
    X : Int,
    Y : Int,
    nWidth : Int,
    nHeight : Int) Int;

external GrayStringW(
    hDC : HDC,
    hBrush : HBRUSH,
    lpOutputFunc : GRAYSTRINGPROC,
    lpData : Int64,
    nCount : Int,
    X : Int,
    Y : Int,
    nWidth : Int,
    nHeight : Int) Int;

external DrawStateA(
    hdc : HDC,
    hbrFore : HBRUSH,
    qfnCallBack : DRAWSTATEPROC,
    lData : Int64,
    wData : UInt64,
    x : Int,
    y : Int,
    cx : Int,
    cy : Int,
    uFlags : UInt) Int;

external DrawStateW(
    hdc : HDC,
    hbrFore : HBRUSH,
    qfnCallBack : DRAWSTATEPROC,
    lData : Int64,
    wData : UInt64,
    x : Int,
    y : Int,
    cx : Int,
    cy : Int,
    uFlags : UInt) Int;

external TabbedTextOutA(
    hdc : HDC,
    x : Int,
    y : Int,
    lpString : LPCSTR,
    chCount : Int,
    nTabPositions : Int,
    lpnTabStopPositions : Pointer[Int],
    nTabOrigin : Int) CLong;

external TabbedTextOutW(
    hdc : HDC,
    x : Int,
    y : Int,
    lpString : LPCWSTR,
    chCount : Int,
    nTabPositions : Int,
    lpnTabStopPositions : Pointer[Int],
    nTabOrigin : Int) CLong;

external GetTabbedTextExtentA(
    hdc : HDC,
    lpString : LPCSTR,
    chCount : Int,
    nTabPositions : Int,
    lpnTabStopPositions : Pointer[Int]) CULong;

external GetTabbedTextExtentW(
    hdc : HDC,
    lpString : LPCWSTR,
    chCount : Int,
    nTabPositions : Int,
    lpnTabStopPositions : Pointer[Int]) CULong;

external UpdateWindow(
    hWnd : HWND) Int;

external SetActiveWindow(
    hWnd : HWND) HWND;

external GetForegroundWindow() HWND;

external PaintDesktop(
    hdc : HDC) Int;

external SwitchToThisWindow(
    hwnd : HWND,
    fUnknown : Int);

external SetForegroundWindow(
    hWnd : HWND) Int;

external AllowSetForegroundWindow(
    dwProcessId : CULong) Int;

external LockSetForegroundWindow(
    uLockCode : UInt) Int;

external WindowFromDC(
    hDC : HDC) HWND;

external GetDC(
    hWnd : HWND) HDC;

external GetDCEx(
    hWnd : HWND,
    hrgnClip : HRGN,
    flags : CULong) HDC;

external GetWindowDC(
    hWnd : HWND) HDC;

external ReleaseDC(
    hWnd : HWND,
    hDC : HDC) Int;

external BeginPaint(
    hWnd : HWND,
    lpPaint : LPPAINTSTRUCT) HDC;

external EndPaint(
    hWnd : HWND,
    lpPaint : Pointer[PAINTSTRUCT]) Int;

external GetUpdateRect(
    hWnd : HWND,
    lpRect : LPRECT,
    bErase : Int) Int;

external GetUpdateRgn(
    hWnd : HWND,
    hRgn : HRGN,
    bErase : Int) Int;

external SetWindowRgn(
    hWnd : HWND,
    hRgn : HRGN,
    bRedraw : Int) Int;

external GetWindowRgn(
    hWnd : HWND,
    hRgn : HRGN) Int;

external GetWindowRgnBox(
    hWnd : HWND,
    lprc : LPRECT) Int;

external ExcludeUpdateRgn(
    hDC : HDC,
    hWnd : HWND) Int;

external InvalidateRect(
    hWnd : HWND,
    lpRect : Pointer[RECT],
    bErase : Int) Int;

external ValidateRect(
    hWnd : HWND,
    lpRect : Pointer[RECT]) Int;

external InvalidateRgn(
    hWnd : HWND,
    hRgn : HRGN,
    bErase : Int) Int;

external ValidateRgn(
    hWnd : HWND,
    hRgn : HRGN) Int;

external RedrawWindow(
    hWnd : HWND,
    lprcUpdate : Pointer[RECT],
    hrgnUpdate : HRGN,
    flags : UInt) Int;

external LockWindowUpdate(
    hWndLock : HWND) Int;

external ScrollWindow(
    hWnd : HWND,
    XAmount : Int,
    YAmount : Int,
    lpRect : Pointer[RECT],
    lpClipRect : Pointer[RECT]) Int;

external ScrollDC(
    hDC : HDC,
    dx : Int,
    dy : Int,
    lprcScroll : Pointer[RECT],
    lprcClip : Pointer[RECT],
    hrgnUpdate : HRGN,
    lprcUpdate : LPRECT) Int;

external ScrollWindowEx(
    hWnd : HWND,
    dx : Int,
    dy : Int,
    prcScroll : Pointer[RECT],
    prcClip : Pointer[RECT],
    hrgnUpdate : HRGN,
    prcUpdate : LPRECT,
    flags : UInt) Int;

external SetScrollPos(
    hWnd : HWND,
    nBar : Int,
    nPos : Int,
    bRedraw : Int) Int;

external GetScrollPos(
    hWnd : HWND,
    nBar : Int) Int;

external SetScrollRange(
    hWnd : HWND,
    nBar : Int,
    nMinPos : Int,
    nMaxPos : Int,
    bRedraw : Int) Int;

external GetScrollRange(
    hWnd : HWND,
    nBar : Int,
    lpMinPos : LPINT,
    lpMaxPos : LPINT) Int;

external ShowScrollBar(
    hWnd : HWND,
    wBar : Int,
    bShow : Int) Int;

external EnableScrollBar(
    hWnd : HWND,
    wSBflags : UInt,
    wArrows : UInt) Int;

external SetPropA(
    hWnd : HWND,
    lpString : LPCSTR,
    hData : HANDLE) Int;

external SetPropW(
    hWnd : HWND,
    lpString : LPCWSTR,
    hData : HANDLE) Int;

external GetPropA(
    hWnd : HWND,
    lpString : LPCSTR) HANDLE;

external GetPropW(
    hWnd : HWND,
    lpString : LPCWSTR) HANDLE;

external RemovePropA(
    hWnd : HWND,
    lpString : LPCSTR) HANDLE;

external RemovePropW(
    hWnd : HWND,
    lpString : LPCWSTR) HANDLE;

external EnumPropsExA(
    hWnd : HWND,
    lpEnumFunc : PROPENUMPROCEXA,
    lParam : Int64) Int;

external EnumPropsExW(
    hWnd : HWND,
    lpEnumFunc : PROPENUMPROCEXW,
    lParam : Int64) Int;

external EnumPropsA(
    hWnd : HWND,
    lpEnumFunc : PROPENUMPROCA) Int;

external EnumPropsW(
    hWnd : HWND,
    lpEnumFunc : PROPENUMPROCW) Int;

external SetWindowTextA(
    hWnd : HWND,
    lpString : LPCSTR) Int;

external SetWindowTextW(
    hWnd : HWND,
    lpString : LPCWSTR) Int;

external GetWindowTextA(
    hWnd : HWND,
    lpString : LPSTR,
    nMaxCount : Int) Int;

external GetWindowTextW(
    hWnd : HWND,
    lpString : LPWSTR,
    nMaxCount : Int) Int;

external GetWindowTextLengthA(
    hWnd : HWND) Int;

external GetWindowTextLengthW(
    hWnd : HWND) Int;

external GetClientRect(
    hWnd : HWND,
    lpRect : LPRECT) Int;

external GetWindowRect(
    hWnd : HWND,
    lpRect : LPRECT) Int;

external AdjustWindowRect(
    lpRect : LPRECT,
    dwStyle : CULong,
    bMenu : Int) Int;

external AdjustWindowRectEx(
    lpRect : LPRECT,
    dwStyle : CULong,
    bMenu : Int,
    dwExStyle : CULong) Int;

record Struct_tagHELPINFO (
    cbSize : UInt,
    iContextType : Int,
    iCtrlId : Int,
    hItemHandle : HANDLE,
    dwContextId : UInt64,
    MousePos : POINT,
);

alias HELPINFO = Struct_tagHELPINFO;

alias LPHELPINFO = Pointer[Struct_tagHELPINFO];

external SetWindowContextHelpId(
    argument0 : HWND,
    argument1 : CULong) Int;

external GetWindowContextHelpId(
    argument0 : HWND) CULong;

external SetMenuContextHelpId(
    argument0 : HMENU,
    argument1 : CULong) Int;

external GetMenuContextHelpId(
    argument0 : HMENU) CULong;

external MessageBoxA(
    hWnd : HWND,
    lpText : LPCSTR,
    lpCaption : LPCSTR,
    uType : UInt) Int;

external MessageBoxW(
    hWnd : HWND,
    lpText : LPCWSTR,
    lpCaption : LPCWSTR,
    uType : UInt) Int;

external MessageBoxExA(
    hWnd : HWND,
    lpText : LPCSTR,
    lpCaption : LPCSTR,
    uType : UInt,
    wLanguageId : UShort) Int;

external MessageBoxExW(
    hWnd : HWND,
    lpText : LPCWSTR,
    lpCaption : LPCWSTR,
    uType : UInt,
    wLanguageId : UShort) Int;

alias MSGBOXCALLBACK = CCodePointer[(Pointer[Struct_tagHELPINFO]),()];

record Struct_tagMSGBOXPARAMSA (
    cbSize : UInt,
    hwndOwner : HWND,
    hInstance : HINSTANCE,
    lpszText : LPCSTR,
    lpszCaption : LPCSTR,
    dwStyle : CULong,
    lpszIcon : LPCSTR,
    dwContextHelpId : UInt64,
    lpfnMsgBoxCallback : MSGBOXCALLBACK,
    dwLanguageId : CULong,
);

alias MSGBOXPARAMSA = Struct_tagMSGBOXPARAMSA;

alias PMSGBOXPARAMSA = Pointer[Struct_tagMSGBOXPARAMSA];

alias LPMSGBOXPARAMSA = Pointer[Struct_tagMSGBOXPARAMSA];

record Struct_tagMSGBOXPARAMSW (
    cbSize : UInt,
    hwndOwner : HWND,
    hInstance : HINSTANCE,
    lpszText : LPCWSTR,
    lpszCaption : LPCWSTR,
    dwStyle : CULong,
    lpszIcon : LPCWSTR,
    dwContextHelpId : UInt64,
    lpfnMsgBoxCallback : MSGBOXCALLBACK,
    dwLanguageId : CULong,
);

alias MSGBOXPARAMSW = Struct_tagMSGBOXPARAMSW;

alias PMSGBOXPARAMSW = Pointer[Struct_tagMSGBOXPARAMSW];

alias LPMSGBOXPARAMSW = Pointer[Struct_tagMSGBOXPARAMSW];

alias MSGBOXPARAMS = MSGBOXPARAMSA;

alias PMSGBOXPARAMS = PMSGBOXPARAMSA;

alias LPMSGBOXPARAMS = LPMSGBOXPARAMSA;

external MessageBoxIndirectA(
    lpmbp : Pointer[MSGBOXPARAMSA]) Int;

external MessageBoxIndirectW(
    lpmbp : Pointer[MSGBOXPARAMSW]) Int;

external MessageBeep(
    uType : UInt) Int;

external ShowCursor(
    bShow : Int) Int;

external SetCursorPos(
    X : Int,
    Y : Int) Int;

external SetCursor(
    hCursor : HCURSOR) HCURSOR;

external GetCursorPos(
    lpPoint : LPPOINT) Int;

external ClipCursor(
    lpRect : Pointer[RECT]) Int;

external GetClipCursor(
    lpRect : LPRECT) Int;

external GetCursor() HCURSOR;

external CreateCaret(
    hWnd : HWND,
    hBitmap : HBITMAP,
    nWidth : Int,
    nHeight : Int) Int;

external GetCaretBlinkTime() UInt;

external SetCaretBlinkTime(
    uMSeconds : UInt) Int;

external DestroyCaret() Int;

external HideCaret(
    hWnd : HWND) Int;

external ShowCaret(
    hWnd : HWND) Int;

external SetCaretPos(
    X : Int,
    Y : Int) Int;

external GetCaretPos(
    lpPoint : LPPOINT) Int;

external ClientToScreen(
    hWnd : HWND,
    lpPoint : LPPOINT) Int;

external ScreenToClient(
    hWnd : HWND,
    lpPoint : LPPOINT) Int;

external MapWindowPoints(
    hWndFrom : HWND,
    hWndTo : HWND,
    lpPoints : LPPOINT,
    cPoints : UInt) Int;

external WindowFromPoint(
    Point : POINT) HWND;

external ChildWindowFromPoint(
    hWndParent : HWND,
    Point : POINT) HWND;

external ChildWindowFromPointEx(
    hwnd : HWND,
    pt : POINT,
    flags : UInt) HWND;

external GetSysColor(
    nIndex : Int) CULong;

external GetSysColorBrush(
    nIndex : Int) HBRUSH;

external SetSysColors(
    cElements : Int,
    lpaElements : Pointer[Int],
    lpaRgbValues : Pointer[CULong]) Int;

external DrawFocusRect(
    hDC : HDC,
    lprc : Pointer[RECT]) Int;

external FillRect(
    hDC : HDC,
    lprc : Pointer[RECT],
    hbr : HBRUSH) Int;

external FrameRect(
    hDC : HDC,
    lprc : Pointer[RECT],
    hbr : HBRUSH) Int;

external InvertRect(
    hDC : HDC,
    lprc : Pointer[RECT]) Int;

external SetRect(
    lprc : LPRECT,
    xLeft : Int,
    yTop : Int,
    xRight : Int,
    yBottom : Int) Int;

external SetRectEmpty(
    lprc : LPRECT) Int;

external CopyRect(
    lprcDst : LPRECT,
    lprcSrc : Pointer[RECT]) Int;

external InflateRect(
    lprc : LPRECT,
    dx : Int,
    dy : Int) Int;

external IntersectRect(
    lprcDst : LPRECT,
    lprcSrc1 : Pointer[RECT],
    lprcSrc2 : Pointer[RECT]) Int;

external UnionRect(
    lprcDst : LPRECT,
    lprcSrc1 : Pointer[RECT],
    lprcSrc2 : Pointer[RECT]) Int;

external SubtractRect(
    lprcDst : LPRECT,
    lprcSrc1 : Pointer[RECT],
    lprcSrc2 : Pointer[RECT]) Int;

external OffsetRect(
    lprc : LPRECT,
    dx : Int,
    dy : Int) Int;

external IsRectEmpty(
    lprc : Pointer[RECT]) Int;

external EqualRect(
    lprc1 : Pointer[RECT],
    lprc2 : Pointer[RECT]) Int;

external PtInRect(
    lprc : Pointer[RECT],
    pt : POINT) Int;

external GetWindowWord(
    hWnd : HWND,
    nIndex : Int) UShort;

external SetWindowWord(
    hWnd : HWND,
    nIndex : Int,
    wNewWord : UShort) UShort;

external GetWindowLongA(
    hWnd : HWND,
    nIndex : Int) CLong;

external GetWindowLongW(
    hWnd : HWND,
    nIndex : Int) CLong;

external SetWindowLongA(
    hWnd : HWND,
    nIndex : Int,
    dwNewLong : CLong) CLong;

external SetWindowLongW(
    hWnd : HWND,
    nIndex : Int,
    dwNewLong : CLong) CLong;

external GetWindowLongPtrA(
    hWnd : HWND,
    nIndex : Int) Int64;

external GetWindowLongPtrW(
    hWnd : HWND,
    nIndex : Int) Int64;

external SetWindowLongPtrA(
    hWnd : HWND,
    nIndex : Int,
    dwNewLong : Int64) Int64;

external SetWindowLongPtrW(
    hWnd : HWND,
    nIndex : Int,
    dwNewLong : Int64) Int64;

external GetClassWord(
    hWnd : HWND,
    nIndex : Int) UShort;

external SetClassWord(
    hWnd : HWND,
    nIndex : Int,
    wNewWord : UShort) UShort;

external GetClassLongA(
    hWnd : HWND,
    nIndex : Int) CULong;

external GetClassLongW(
    hWnd : HWND,
    nIndex : Int) CULong;

external SetClassLongA(
    hWnd : HWND,
    nIndex : Int,
    dwNewLong : CLong) CULong;

external SetClassLongW(
    hWnd : HWND,
    nIndex : Int,
    dwNewLong : CLong) CULong;

external GetClassLongPtrA(
    hWnd : HWND,
    nIndex : Int) UInt64;

external GetClassLongPtrW(
    hWnd : HWND,
    nIndex : Int) UInt64;

external SetClassLongPtrA(
    hWnd : HWND,
    nIndex : Int,
    dwNewLong : Int64) UInt64;

external SetClassLongPtrW(
    hWnd : HWND,
    nIndex : Int,
    dwNewLong : Int64) UInt64;

external GetProcessDefaultLayout(
    pdwDefaultLayout : Pointer[CULong]) Int;

external SetProcessDefaultLayout(
    dwDefaultLayout : CULong) Int;

external GetDesktopWindow() HWND;

external GetParent(
    hWnd : HWND) HWND;

external SetParent(
    hWndChild : HWND,
    hWndNewParent : HWND) HWND;

external EnumChildWindows(
    hWndParent : HWND,
    lpEnumFunc : WNDENUMPROC,
    lParam : Int64) Int;

external FindWindowA(
    lpClassName : LPCSTR,
    lpWindowName : LPCSTR) HWND;

external FindWindowW(
    lpClassName : LPCWSTR,
    lpWindowName : LPCWSTR) HWND;

external FindWindowExA(
    hWndParent : HWND,
    hWndChildAfter : HWND,
    lpszClass : LPCSTR,
    lpszWindow : LPCSTR) HWND;

external FindWindowExW(
    hWndParent : HWND,
    hWndChildAfter : HWND,
    lpszClass : LPCWSTR,
    lpszWindow : LPCWSTR) HWND;

external GetShellWindow() HWND;

external RegisterShellHookWindow(
    hwnd : HWND) Int;

external DeregisterShellHookWindow(
    hwnd : HWND) Int;

external EnumWindows(
    lpEnumFunc : WNDENUMPROC,
    lParam : Int64) Int;

external EnumThreadWindows(
    dwThreadId : CULong,
    lpfn : WNDENUMPROC,
    lParam : Int64) Int;

external GetClassNameA(
    hWnd : HWND,
    lpClassName : LPSTR,
    nMaxCount : Int) Int;

external GetClassNameW(
    hWnd : HWND,
    lpClassName : LPWSTR,
    nMaxCount : Int) Int;

external GetTopWindow(
    hWnd : HWND) HWND;

external GetWindowThreadProcessId(
    hWnd : HWND,
    lpdwProcessId : LPDWORD) CULong;

external IsGUIThread(
    bConvert : Int) Int;

external GetLastActivePopup(
    hWnd : HWND) HWND;

external GetWindow(
    hWnd : HWND,
    uCmd : UInt) HWND;

external SetWindowsHookA(
    nFilterType : Int,
    pfnFilterProc : HOOKPROC) HHOOK;

external SetWindowsHookW(
    nFilterType : Int,
    pfnFilterProc : HOOKPROC) HHOOK;

external UnhookWindowsHook(
    nCode : Int,
    pfnFilterProc : HOOKPROC) Int;

external SetWindowsHookExA(
    idHook : Int,
    lpfn : HOOKPROC,
    hmod : HINSTANCE,
    dwThreadId : CULong) HHOOK;

external SetWindowsHookExW(
    idHook : Int,
    lpfn : HOOKPROC,
    hmod : HINSTANCE,
    dwThreadId : CULong) HHOOK;

external UnhookWindowsHookEx(
    hhk : HHOOK) Int;

external CallNextHookEx(
    hhk : HHOOK,
    nCode : Int,
    wParam : UInt64,
    lParam : Int64) Int64;

external CheckMenuRadioItem(
    hmenu : HMENU,
    first : UInt,
    last : UInt,
    check : UInt,
    flags : UInt) Int;

record UnnamedStruct21 (
    versionNumber : UShort,
    offset : UShort,
);

alias MENUITEMTEMPLATEHEADER = UnnamedStruct21;

alias PMENUITEMTEMPLATEHEADER = Pointer[UnnamedStruct21];

record UnnamedStruct22 (
    mtOption : UShort,
    mtID : UShort,
    mtString : Array[UShort,1],
);

alias MENUITEMTEMPLATE = UnnamedStruct22;

alias PMENUITEMTEMPLATE = Pointer[UnnamedStruct22];

external LoadBitmapA(
    hInstance : HINSTANCE,
    lpBitmapName : LPCSTR) HBITMAP;

external LoadBitmapW(
    hInstance : HINSTANCE,
    lpBitmapName : LPCWSTR) HBITMAP;

external LoadCursorA(
    hInstance : HINSTANCE,
    lpCursorName : LPCSTR) HCURSOR;

external LoadCursorW(
    hInstance : HINSTANCE,
    lpCursorName : LPCWSTR) HCURSOR;

external LoadCursorFromFileA(
    lpFileName : LPCSTR) HCURSOR;

external LoadCursorFromFileW(
    lpFileName : LPCWSTR) HCURSOR;

external CreateCursor(
    hInst : HINSTANCE,
    xHotSpot : Int,
    yHotSpot : Int,
    nWidth : Int,
    nHeight : Int,
    pvANDPlane : RawPointer,
    pvXORPlane : RawPointer) HCURSOR;

external DestroyCursor(
    hCursor : HCURSOR) Int;

external SetSystemCursor(
    hcur : HCURSOR,
    id : CULong) Int;

record Struct__ICONINFO (
    fIcon : Int,
    xHotspot : CULong,
    yHotspot : CULong,
    hbmMask : HBITMAP,
    hbmColor : HBITMAP,
);

alias ICONINFO = Struct__ICONINFO;

alias PICONINFO = Pointer[ICONINFO];

external LoadIconA(
    hInstance : HINSTANCE,
    lpIconName : LPCSTR) HICON;

external LoadIconW(
    hInstance : HINSTANCE,
    lpIconName : LPCWSTR) HICON;

external PrivateExtractIconsA(
    szFileName : LPCSTR,
    nIconIndex : Int,
    cxIcon : Int,
    cyIcon : Int,
    phicon : Pointer[HICON],
    piconid : Pointer[UInt],
    nIcons : UInt,
    flags : UInt) UInt;

external PrivateExtractIconsW(
    szFileName : LPCWSTR,
    nIconIndex : Int,
    cxIcon : Int,
    cyIcon : Int,
    phicon : Pointer[HICON],
    piconid : Pointer[UInt],
    nIcons : UInt,
    flags : UInt) UInt;

external CreateIcon(
    hInstance : HINSTANCE,
    nWidth : Int,
    nHeight : Int,
    cPlanes : CUChar,
    cBitsPixel : CUChar,
    lpbANDbits : Pointer[CUChar],
    lpbXORbits : Pointer[CUChar]) HICON;

external DestroyIcon(
    hIcon : HICON) Int;

external LookupIconIdFromDirectory(
    presbits : PBYTE,
    fIcon : Int) Int;

external LookupIconIdFromDirectoryEx(
    presbits : PBYTE,
    fIcon : Int,
    cxDesired : Int,
    cyDesired : Int,
    Flags : UInt) Int;

external CreateIconFromResource(
    presbits : PBYTE,
    dwResSize : CULong,
    fIcon : Int,
    dwVer : CULong) HICON;

external CreateIconFromResourceEx(
    presbits : PBYTE,
    dwResSize : CULong,
    fIcon : Int,
    dwVer : CULong,
    cxDesired : Int,
    cyDesired : Int,
    Flags : UInt) HICON;

record Struct_tagCURSORSHAPE (
    xHotSpot : Int,
    yHotSpot : Int,
    cx : Int,
    cy : Int,
    cbWidth : Int,
    Planes : CUChar,
    BitsPixel : CUChar,
);

alias CURSORSHAPE = Struct_tagCURSORSHAPE;

alias LPCURSORSHAPE = Pointer[Struct_tagCURSORSHAPE];

external LoadImageA(
    hInst : HINSTANCE,
    name : LPCSTR,
    type : UInt,
    cx : Int,
    cy : Int,
    fuLoad : UInt) HANDLE;

external LoadImageW(
    hInst : HINSTANCE,
    name : LPCWSTR,
    type : UInt,
    cx : Int,
    cy : Int,
    fuLoad : UInt) HANDLE;

external CopyImage(
    h : HANDLE,
    type : UInt,
    cx : Int,
    cy : Int,
    flags : UInt) HANDLE;

external DrawIconEx(
    hdc : HDC,
    xLeft : Int,
    yTop : Int,
    hIcon : HICON,
    cxWidth : Int,
    cyWidth : Int,
    istepIfAniCur : UInt,
    hbrFlickerFreeDraw : HBRUSH,
    diFlags : UInt) Int;

external CreateIconIndirect(
    piconinfo : PICONINFO) HICON;

external CopyIcon(
    hIcon : HICON) HICON;

external GetIconInfo(
    hIcon : HICON,
    piconinfo : PICONINFO) Int;

external LoadStringA(
    hInstance : HINSTANCE,
    uID : UInt,
    lpBuffer : LPSTR,
    cchBufferMax : Int) Int;

external LoadStringW(
    hInstance : HINSTANCE,
    uID : UInt,
    lpBuffer : LPWSTR,
    cchBufferMax : Int) Int;

external IsDialogMessageA(
    hDlg : HWND,
    lpMsg : LPMSG) Int;

external IsDialogMessageW(
    hDlg : HWND,
    lpMsg : LPMSG) Int;

external MapDialogRect(
    hDlg : HWND,
    lpRect : LPRECT) Int;

external DlgDirListA(
    hDlg : HWND,
    lpPathSpec : LPSTR,
    nIDListBox : Int,
    nIDStaticPath : Int,
    uFileType : UInt) Int;

external DlgDirListW(
    hDlg : HWND,
    lpPathSpec : LPWSTR,
    nIDListBox : Int,
    nIDStaticPath : Int,
    uFileType : UInt) Int;

external DlgDirSelectExA(
    hwndDlg : HWND,
    lpString : LPSTR,
    chCount : Int,
    idListBox : Int) Int;

external DlgDirSelectExW(
    hwndDlg : HWND,
    lpString : LPWSTR,
    chCount : Int,
    idListBox : Int) Int;

external DlgDirListComboBoxA(
    hDlg : HWND,
    lpPathSpec : LPSTR,
    nIDComboBox : Int,
    nIDStaticPath : Int,
    uFiletype : UInt) Int;

external DlgDirListComboBoxW(
    hDlg : HWND,
    lpPathSpec : LPWSTR,
    nIDComboBox : Int,
    nIDStaticPath : Int,
    uFiletype : UInt) Int;

external DlgDirSelectComboBoxExA(
    hwndDlg : HWND,
    lpString : LPSTR,
    cchOut : Int,
    idComboBox : Int) Int;

external DlgDirSelectComboBoxExW(
    hwndDlg : HWND,
    lpString : LPWSTR,
    cchOut : Int,
    idComboBox : Int) Int;

record Struct_tagSCROLLINFO (
    cbSize : UInt,
    fMask : UInt,
    nMin : Int,
    nMax : Int,
    nPage : UInt,
    nPos : Int,
    nTrackPos : Int,
);

alias SCROLLINFO = Struct_tagSCROLLINFO;

alias LPSCROLLINFO = Pointer[Struct_tagSCROLLINFO];

alias LPCSCROLLINFO = Pointer[SCROLLINFO];

external SetScrollInfo(
    hwnd : HWND,
    nBar : Int,
    lpsi : LPCSCROLLINFO,
    redraw : Int) Int;

external GetScrollInfo(
    hwnd : HWND,
    nBar : Int,
    lpsi : LPSCROLLINFO) Int;

record Struct_tagMDICREATESTRUCTA (
    szClass : LPCSTR,
    szTitle : LPCSTR,
    hOwner : HANDLE,
    x : Int,
    y : Int,
    cx : Int,
    cy : Int,
    style : CULong,
    lParam : Int64,
);

alias MDICREATESTRUCTA = Struct_tagMDICREATESTRUCTA;

alias LPMDICREATESTRUCTA = Pointer[Struct_tagMDICREATESTRUCTA];

record Struct_tagMDICREATESTRUCTW (
    szClass : LPCWSTR,
    szTitle : LPCWSTR,
    hOwner : HANDLE,
    x : Int,
    y : Int,
    cx : Int,
    cy : Int,
    style : CULong,
    lParam : Int64,
);

alias MDICREATESTRUCTW = Struct_tagMDICREATESTRUCTW;

alias LPMDICREATESTRUCTW = Pointer[Struct_tagMDICREATESTRUCTW];

alias MDICREATESTRUCT = MDICREATESTRUCTA;

alias LPMDICREATESTRUCT = LPMDICREATESTRUCTA;

record Struct_tagCLIENTCREATESTRUCT (
    hWindowMenu : HANDLE,
    idFirstChild : UInt,
);

alias CLIENTCREATESTRUCT = Struct_tagCLIENTCREATESTRUCT;

alias LPCLIENTCREATESTRUCT = Pointer[Struct_tagCLIENTCREATESTRUCT];

external DefFrameProcA(
    hWnd : HWND,
    hWndMDIClient : HWND,
    uMsg : UInt,
    wParam : UInt64,
    lParam : Int64) Int64;

external DefFrameProcW(
    hWnd : HWND,
    hWndMDIClient : HWND,
    uMsg : UInt,
    wParam : UInt64,
    lParam : Int64) Int64;

external DefMDIChildProcA(
    hWnd : HWND,
    uMsg : UInt,
    wParam : UInt64,
    lParam : Int64) Int64;

external DefMDIChildProcW(
    hWnd : HWND,
    uMsg : UInt,
    wParam : UInt64,
    lParam : Int64) Int64;

external TranslateMDISysAccel(
    hWndClient : HWND,
    lpMsg : LPMSG) Int;

external ArrangeIconicWindows(
    hWnd : HWND) UInt;

external CreateMDIWindowA(
    lpClassName : LPCSTR,
    lpWindowName : LPCSTR,
    dwStyle : CULong,
    X : Int,
    Y : Int,
    nWidth : Int,
    nHeight : Int,
    hWndParent : HWND,
    hInstance : HINSTANCE,
    lParam : Int64) HWND;

external CreateMDIWindowW(
    lpClassName : LPCWSTR,
    lpWindowName : LPCWSTR,
    dwStyle : CULong,
    X : Int,
    Y : Int,
    nWidth : Int,
    nHeight : Int,
    hWndParent : HWND,
    hInstance : HINSTANCE,
    lParam : Int64) HWND;

external TileWindows(
    hwndParent : HWND,
    wHow : UInt,
    lpRect : Pointer[RECT],
    cKids : UInt,
    lpKids : Pointer[HWND]) UShort;

external CascadeWindows(
    hwndParent : HWND,
    wHow : UInt,
    lpRect : Pointer[RECT],
    cKids : UInt,
    lpKids : Pointer[HWND]) UShort;

alias HELPPOLY = CULong;

record Struct_tagMULTIKEYHELPA (
    mkSize : CULong,
    mkKeylist : CChar,
    szKeyphrase : Array[CChar,1],
);

alias MULTIKEYHELPA = Struct_tagMULTIKEYHELPA;

alias PMULTIKEYHELPA = Pointer[Struct_tagMULTIKEYHELPA];

alias LPMULTIKEYHELPA = Pointer[Struct_tagMULTIKEYHELPA];

record Struct_tagMULTIKEYHELPW (
    mkSize : CULong,
    mkKeylist : UShort,
    szKeyphrase : Array[UShort,1],
);

alias MULTIKEYHELPW = Struct_tagMULTIKEYHELPW;

alias PMULTIKEYHELPW = Pointer[Struct_tagMULTIKEYHELPW];

alias LPMULTIKEYHELPW = Pointer[Struct_tagMULTIKEYHELPW];

alias MULTIKEYHELP = MULTIKEYHELPA;

alias PMULTIKEYHELP = PMULTIKEYHELPA;

alias LPMULTIKEYHELP = LPMULTIKEYHELPA;

record Struct_tagHELPWININFOA (
    wStructSize : Int,
    x : Int,
    y : Int,
    dx : Int,
    dy : Int,
    wMax : Int,
    rgchMember : Array[CChar,2],
);

alias HELPWININFOA = Struct_tagHELPWININFOA;

alias PHELPWININFOA = Pointer[Struct_tagHELPWININFOA];

alias LPHELPWININFOA = Pointer[Struct_tagHELPWININFOA];

record Struct_tagHELPWININFOW (
    wStructSize : Int,
    x : Int,
    y : Int,
    dx : Int,
    dy : Int,
    wMax : Int,
    rgchMember : Array[UShort,2],
);

alias HELPWININFOW = Struct_tagHELPWININFOW;

alias PHELPWININFOW = Pointer[Struct_tagHELPWININFOW];

alias LPHELPWININFOW = Pointer[Struct_tagHELPWININFOW];

alias HELPWININFO = HELPWININFOA;

alias PHELPWININFO = PHELPWININFOA;

alias LPHELPWININFO = LPHELPWININFOA;

external WinHelpA(
    hWndMain : HWND,
    lpszHelp : LPCSTR,
    uCommand : UInt,
    dwData : UInt64) Int;

external WinHelpW(
    hWndMain : HWND,
    lpszHelp : LPCWSTR,
    uCommand : UInt,
    dwData : UInt64) Int;

external GetGuiResources(
    hProcess : HANDLE,
    uiFlags : CULong) CULong;

record Struct_tagNONCLIENTMETRICSA (
    cbSize : UInt,
    iBorderWidth : Int,
    iScrollWidth : Int,
    iScrollHeight : Int,
    iCaptionWidth : Int,
    iCaptionHeight : Int,
    lfCaptionFont : LOGFONTA,
    iSmCaptionWidth : Int,
    iSmCaptionHeight : Int,
    lfSmCaptionFont : LOGFONTA,
    iMenuWidth : Int,
    iMenuHeight : Int,
    lfMenuFont : LOGFONTA,
    lfStatusFont : LOGFONTA,
    lfMessageFont : LOGFONTA,
);

alias NONCLIENTMETRICSA = Struct_tagNONCLIENTMETRICSA;

alias PNONCLIENTMETRICSA = Pointer[Struct_tagNONCLIENTMETRICSA];

alias LPNONCLIENTMETRICSA = Pointer[Struct_tagNONCLIENTMETRICSA];

record Struct_tagNONCLIENTMETRICSW (
    cbSize : UInt,
    iBorderWidth : Int,
    iScrollWidth : Int,
    iScrollHeight : Int,
    iCaptionWidth : Int,
    iCaptionHeight : Int,
    lfCaptionFont : LOGFONTW,
    iSmCaptionWidth : Int,
    iSmCaptionHeight : Int,
    lfSmCaptionFont : LOGFONTW,
    iMenuWidth : Int,
    iMenuHeight : Int,
    lfMenuFont : LOGFONTW,
    lfStatusFont : LOGFONTW,
    lfMessageFont : LOGFONTW,
);

alias NONCLIENTMETRICSW = Struct_tagNONCLIENTMETRICSW;

alias PNONCLIENTMETRICSW = Pointer[Struct_tagNONCLIENTMETRICSW];

alias LPNONCLIENTMETRICSW = Pointer[Struct_tagNONCLIENTMETRICSW];

alias NONCLIENTMETRICS = NONCLIENTMETRICSA;

alias PNONCLIENTMETRICS = PNONCLIENTMETRICSA;

alias LPNONCLIENTMETRICS = LPNONCLIENTMETRICSA;

record Struct_tagMINIMIZEDMETRICS (
    cbSize : UInt,
    iWidth : Int,
    iHorzGap : Int,
    iVertGap : Int,
    iArrange : Int,
);

alias MINIMIZEDMETRICS = Struct_tagMINIMIZEDMETRICS;

alias PMINIMIZEDMETRICS = Pointer[Struct_tagMINIMIZEDMETRICS];

alias LPMINIMIZEDMETRICS = Pointer[Struct_tagMINIMIZEDMETRICS];

record Struct_tagICONMETRICSA (
    cbSize : UInt,
    iHorzSpacing : Int,
    iVertSpacing : Int,
    iTitleWrap : Int,
    lfFont : LOGFONTA,
);

alias ICONMETRICSA = Struct_tagICONMETRICSA;

alias PICONMETRICSA = Pointer[Struct_tagICONMETRICSA];

alias LPICONMETRICSA = Pointer[Struct_tagICONMETRICSA];

record Struct_tagICONMETRICSW (
    cbSize : UInt,
    iHorzSpacing : Int,
    iVertSpacing : Int,
    iTitleWrap : Int,
    lfFont : LOGFONTW,
);

alias ICONMETRICSW = Struct_tagICONMETRICSW;

alias PICONMETRICSW = Pointer[Struct_tagICONMETRICSW];

alias LPICONMETRICSW = Pointer[Struct_tagICONMETRICSW];

alias ICONMETRICS = ICONMETRICSA;

alias PICONMETRICS = PICONMETRICSA;

alias LPICONMETRICS = LPICONMETRICSA;

record Struct_tagANIMATIONINFO (
    cbSize : UInt,
    iMinAnimate : Int,
);

alias ANIMATIONINFO = Struct_tagANIMATIONINFO;

alias LPANIMATIONINFO = Pointer[Struct_tagANIMATIONINFO];

record Struct_tagSERIALKEYSA (
    cbSize : UInt,
    dwFlags : CULong,
    lpszActivePort : LPSTR,
    lpszPort : LPSTR,
    iBaudRate : UInt,
    iPortState : UInt,
    iActive : UInt,
);

alias SERIALKEYSA = Struct_tagSERIALKEYSA;

alias LPSERIALKEYSA = Pointer[Struct_tagSERIALKEYSA];

record Struct_tagSERIALKEYSW (
    cbSize : UInt,
    dwFlags : CULong,
    lpszActivePort : LPWSTR,
    lpszPort : LPWSTR,
    iBaudRate : UInt,
    iPortState : UInt,
    iActive : UInt,
);

alias SERIALKEYSW = Struct_tagSERIALKEYSW;

alias LPSERIALKEYSW = Pointer[Struct_tagSERIALKEYSW];

alias SERIALKEYS = SERIALKEYSA;

alias LPSERIALKEYS = LPSERIALKEYSA;

record Struct_tagHIGHCONTRASTA (
    cbSize : UInt,
    dwFlags : CULong,
    lpszDefaultScheme : LPSTR,
);

alias HIGHCONTRASTA = Struct_tagHIGHCONTRASTA;

alias LPHIGHCONTRASTA = Pointer[Struct_tagHIGHCONTRASTA];

record Struct_tagHIGHCONTRASTW (
    cbSize : UInt,
    dwFlags : CULong,
    lpszDefaultScheme : LPWSTR,
);

alias HIGHCONTRASTW = Struct_tagHIGHCONTRASTW;

alias LPHIGHCONTRASTW = Pointer[Struct_tagHIGHCONTRASTW];

alias HIGHCONTRAST = HIGHCONTRASTA;

alias LPHIGHCONTRAST = LPHIGHCONTRASTA;

record Struct__VIDEOPARAMETERS (
    Guid : GUID,
    dwOffset : CULong,
    dwCommand : CULong,
    dwFlags : CULong,
    dwMode : CULong,
    dwTVStandard : CULong,
    dwAvailableModes : CULong,
    dwAvailableTVStandard : CULong,
    dwFlickerFilter : CULong,
    dwOverScanX : CULong,
    dwOverScanY : CULong,
    dwMaxUnscaledX : CULong,
    dwMaxUnscaledY : CULong,
    dwPositionX : CULong,
    dwPositionY : CULong,
    dwBrightness : CULong,
    dwContrast : CULong,
    dwCPType : CULong,
    dwCPCommand : CULong,
    dwCPStandard : CULong,
    dwCPKey : CULong,
    bCP_APSTriggerBits : CULong,
    bOEMCopyProtection : Array[CUChar,256],
);

alias VIDEOPARAMETERS = Struct__VIDEOPARAMETERS;

alias PVIDEOPARAMETERS = Pointer[Struct__VIDEOPARAMETERS];

alias LPVIDEOPARAMETERS = Pointer[Struct__VIDEOPARAMETERS];

external ChangeDisplaySettingsA(
    lpDevMode : LPDEVMODEA,
    dwFlags : CULong) CLong;

external ChangeDisplaySettingsW(
    lpDevMode : LPDEVMODEW,
    dwFlags : CULong) CLong;

external ChangeDisplaySettingsExA(
    lpszDeviceName : LPCSTR,
    lpDevMode : LPDEVMODEA,
    hwnd : HWND,
    dwflags : CULong,
    lParam : LPVOID) CLong;

external ChangeDisplaySettingsExW(
    lpszDeviceName : LPCWSTR,
    lpDevMode : LPDEVMODEW,
    hwnd : HWND,
    dwflags : CULong,
    lParam : LPVOID) CLong;

external EnumDisplaySettingsA(
    lpszDeviceName : LPCSTR,
    iModeNum : CULong,
    lpDevMode : LPDEVMODEA) Int;

external EnumDisplaySettingsW(
    lpszDeviceName : LPCWSTR,
    iModeNum : CULong,
    lpDevMode : LPDEVMODEW) Int;

external EnumDisplaySettingsExA(
    lpszDeviceName : LPCSTR,
    iModeNum : CULong,
    lpDevMode : LPDEVMODEA,
    dwFlags : CULong) Int;

external EnumDisplaySettingsExW(
    lpszDeviceName : LPCWSTR,
    iModeNum : CULong,
    lpDevMode : LPDEVMODEW,
    dwFlags : CULong) Int;

external EnumDisplayDevicesA(
    lpDevice : LPCSTR,
    iDevNum : CULong,
    lpDisplayDevice : PDISPLAY_DEVICEA,
    dwFlags : CULong) Int;

external EnumDisplayDevicesW(
    lpDevice : LPCWSTR,
    iDevNum : CULong,
    lpDisplayDevice : PDISPLAY_DEVICEW,
    dwFlags : CULong) Int;

external SystemParametersInfoA(
    uiAction : UInt,
    uiParam : UInt,
    pvParam : PVOID,
    fWinIni : UInt) Int;

external SystemParametersInfoW(
    uiAction : UInt,
    uiParam : UInt,
    pvParam : PVOID,
    fWinIni : UInt) Int;

record Struct_tagFILTERKEYS (
    cbSize : UInt,
    dwFlags : CULong,
    iWaitMSec : CULong,
    iDelayMSec : CULong,
    iRepeatMSec : CULong,
    iBounceMSec : CULong,
);

alias FILTERKEYS = Struct_tagFILTERKEYS;

alias LPFILTERKEYS = Pointer[Struct_tagFILTERKEYS];

record Struct_tagSTICKYKEYS (
    cbSize : UInt,
    dwFlags : CULong,
);

alias STICKYKEYS = Struct_tagSTICKYKEYS;

alias LPSTICKYKEYS = Pointer[Struct_tagSTICKYKEYS];

record Struct_tagMOUSEKEYS (
    cbSize : UInt,
    dwFlags : CULong,
    iMaxSpeed : CULong,
    iTimeToMaxSpeed : CULong,
    iCtrlSpeed : CULong,
    dwReserved1 : CULong,
    dwReserved2 : CULong,
);

alias MOUSEKEYS = Struct_tagMOUSEKEYS;

alias LPMOUSEKEYS = Pointer[Struct_tagMOUSEKEYS];

record Struct_tagACCESSTIMEOUT (
    cbSize : UInt,
    dwFlags : CULong,
    iTimeOutMSec : CULong,
);

alias ACCESSTIMEOUT = Struct_tagACCESSTIMEOUT;

alias LPACCESSTIMEOUT = Pointer[Struct_tagACCESSTIMEOUT];

record Struct_tagSOUNDSENTRYA (
    cbSize : UInt,
    dwFlags : CULong,
    iFSTextEffect : CULong,
    iFSTextEffectMSec : CULong,
    iFSTextEffectColorBits : CULong,
    iFSGrafEffect : CULong,
    iFSGrafEffectMSec : CULong,
    iFSGrafEffectColor : CULong,
    iWindowsEffect : CULong,
    iWindowsEffectMSec : CULong,
    lpszWindowsEffectDLL : LPSTR,
    iWindowsEffectOrdinal : CULong,
);

alias SOUNDSENTRYA = Struct_tagSOUNDSENTRYA;

alias LPSOUNDSENTRYA = Pointer[Struct_tagSOUNDSENTRYA];

record Struct_tagSOUNDSENTRYW (
    cbSize : UInt,
    dwFlags : CULong,
    iFSTextEffect : CULong,
    iFSTextEffectMSec : CULong,
    iFSTextEffectColorBits : CULong,
    iFSGrafEffect : CULong,
    iFSGrafEffectMSec : CULong,
    iFSGrafEffectColor : CULong,
    iWindowsEffect : CULong,
    iWindowsEffectMSec : CULong,
    lpszWindowsEffectDLL : LPWSTR,
    iWindowsEffectOrdinal : CULong,
);

alias SOUNDSENTRYW = Struct_tagSOUNDSENTRYW;

alias LPSOUNDSENTRYW = Pointer[Struct_tagSOUNDSENTRYW];

alias SOUNDSENTRY = SOUNDSENTRYA;

alias LPSOUNDSENTRY = LPSOUNDSENTRYA;

record Struct_tagTOGGLEKEYS (
    cbSize : UInt,
    dwFlags : CULong,
);

alias TOGGLEKEYS = Struct_tagTOGGLEKEYS;

alias LPTOGGLEKEYS = Pointer[Struct_tagTOGGLEKEYS];

external SetDebugErrorLevel(
    dwLevel : CULong);

external SetLastErrorEx(
    dwErrCode : CULong,
    dwType : CULong);

external InternalGetWindowText(
    hWnd : HWND,
    pString : LPWSTR,
    cchMaxCount : Int) Int;

external EndTask(
    hWnd : HWND,
    fShutDown : Int,
    fForce : Int) Int;

external MonitorFromPoint(
    pt : POINT,
    dwFlags : CULong) HMONITOR;

external MonitorFromRect(
    lprc : LPCRECT,
    dwFlags : CULong) HMONITOR;

external MonitorFromWindow(
    hwnd : HWND,
    dwFlags : CULong) HMONITOR;

record Struct_tagMONITORINFO (
    cbSize : CULong,
    rcMonitor : RECT,
    rcWork : RECT,
    dwFlags : CULong,
);

alias MONITORINFO = Struct_tagMONITORINFO;

alias LPMONITORINFO = Pointer[Struct_tagMONITORINFO];

record Struct_tagMONITORINFOEXA (
    unnamed_field0 : UnnamedRecord3,
    szDevice : Array[CChar,32],
);

record UnnamedRecord3 (
    cbSize : CULong,
    rcMonitor : RECT,
    rcWork : RECT,
    dwFlags : CULong,
);

alias MONITORINFOEXA = Struct_tagMONITORINFOEXA;

alias LPMONITORINFOEXA = Pointer[Struct_tagMONITORINFOEXA];

record Struct_tagMONITORINFOEXW (
    unnamed_field0 : UnnamedRecord4,
    szDevice : Array[UShort,32],
);

record UnnamedRecord4 (
    cbSize : CULong,
    rcMonitor : RECT,
    rcWork : RECT,
    dwFlags : CULong,
);

alias MONITORINFOEXW = Struct_tagMONITORINFOEXW;

alias LPMONITORINFOEXW = Pointer[Struct_tagMONITORINFOEXW];

alias MONITORINFOEX = MONITORINFOEXA;

alias LPMONITORINFOEX = LPMONITORINFOEXA;

external GetMonitorInfoA(
    hMonitor : HMONITOR,
    lpmi : LPMONITORINFO) Int;

external GetMonitorInfoW(
    hMonitor : HMONITOR,
    lpmi : LPMONITORINFO) Int;

alias MONITORENUMPROC = CCodePointer[(Pointer[Struct_HMONITOR__],Pointer[Struct_HDC__],Pointer[Struct_tagRECT],Int64),(Int)];

external EnumDisplayMonitors(
    hdc : HDC,
    lprcClip : LPCRECT,
    lpfnEnum : MONITORENUMPROC,
    dwData : Int64) Int;

external NotifyWinEvent(
    event : CULong,
    hwnd : HWND,
    idObject : CLong,
    idChild : CLong);

alias WINEVENTPROC = CCodePointer[(Pointer[Struct_HWINEVENTHOOK__],CULong,Pointer[Struct_HWND__],CLong,CLong,CULong,CULong),()];

external SetWinEventHook(
    eventMin : CULong,
    eventMax : CULong,
    hmodWinEventProc : HMODULE,
    pfnWinEventProc : WINEVENTPROC,
    idProcess : CULong,
    idThread : CULong,
    dwFlags : CULong) HWINEVENTHOOK;

external IsWinEventHookInstalled(
    event : CULong) Int;

external UnhookWinEvent(
    hWinEventHook : HWINEVENTHOOK) Int;

record Struct_tagGUITHREADINFO (
    cbSize : CULong,
    flags : CULong,
    hwndActive : HWND,
    hwndFocus : HWND,
    hwndCapture : HWND,
    hwndMenuOwner : HWND,
    hwndMoveSize : HWND,
    hwndCaret : HWND,
    rcCaret : RECT,
);

alias GUITHREADINFO = Struct_tagGUITHREADINFO;

alias PGUITHREADINFO = Pointer[Struct_tagGUITHREADINFO];

alias LPGUITHREADINFO = Pointer[Struct_tagGUITHREADINFO];

external GetGUIThreadInfo(
    idThread : CULong,
    pgui : PGUITHREADINFO) Int;

external GetWindowModuleFileNameA(
    hwnd : HWND,
    pszFileName : LPSTR,
    cchFileNameMax : UInt) UInt;

external GetWindowModuleFileNameW(
    hwnd : HWND,
    pszFileName : LPWSTR,
    cchFileNameMax : UInt) UInt;

record Struct_tagCURSORINFO (
    cbSize : CULong,
    flags : CULong,
    hCursor : HCURSOR,
    ptScreenPos : POINT,
);

alias CURSORINFO = Struct_tagCURSORINFO;

alias PCURSORINFO = Pointer[Struct_tagCURSORINFO];

alias LPCURSORINFO = Pointer[Struct_tagCURSORINFO];

external GetCursorInfo(
    pci : PCURSORINFO) Int;

record Struct_tagWINDOWINFO (
    cbSize : CULong,
    rcWindow : RECT,
    rcClient : RECT,
    dwStyle : CULong,
    dwExStyle : CULong,
    dwWindowStatus : CULong,
    cxWindowBorders : UInt,
    cyWindowBorders : UInt,
    atomWindowType : UShort,
    wCreatorVersion : UShort,
);

alias WINDOWINFO = Struct_tagWINDOWINFO;

alias PWINDOWINFO = Pointer[Struct_tagWINDOWINFO];

alias LPWINDOWINFO = Pointer[Struct_tagWINDOWINFO];

external GetWindowInfo(
    hwnd : HWND,
    pwi : PWINDOWINFO) Int;

record Struct_tagTITLEBARINFO (
    cbSize : CULong,
    rcTitleBar : RECT,
    rgstate : Array[CULong,6],
);

alias TITLEBARINFO = Struct_tagTITLEBARINFO;

alias PTITLEBARINFO = Pointer[Struct_tagTITLEBARINFO];

alias LPTITLEBARINFO = Pointer[Struct_tagTITLEBARINFO];

external GetTitleBarInfo(
    hwnd : HWND,
    pti : PTITLEBARINFO) Int;

record Struct_tagMENUBARINFO (
    cbSize : CULong,
    rcBar : RECT,
    hMenu : HMENU,
    hwndMenu : HWND,
    fBarFocused : Int,
    fFocused : Int,
);

alias MENUBARINFO = Struct_tagMENUBARINFO;

alias PMENUBARINFO = Pointer[Struct_tagMENUBARINFO];

alias LPMENUBARINFO = Pointer[Struct_tagMENUBARINFO];

external GetMenuBarInfo(
    hwnd : HWND,
    idObject : CLong,
    idItem : CLong,
    pmbi : PMENUBARINFO) Int;

record Struct_tagSCROLLBARINFO (
    cbSize : CULong,
    rcScrollBar : RECT,
    dxyLineButton : Int,
    xyThumbTop : Int,
    xyThumbBottom : Int,
    reserved : Int,
    rgstate : Array[CULong,6],
);

alias SCROLLBARINFO = Struct_tagSCROLLBARINFO;

alias PSCROLLBARINFO = Pointer[Struct_tagSCROLLBARINFO];

alias LPSCROLLBARINFO = Pointer[Struct_tagSCROLLBARINFO];

external GetScrollBarInfo(
    hwnd : HWND,
    idObject : CLong,
    psbi : PSCROLLBARINFO) Int;

record Struct_tagCOMBOBOXINFO (
    cbSize : CULong,
    rcItem : RECT,
    rcButton : RECT,
    stateButton : CULong,
    hwndCombo : HWND,
    hwndItem : HWND,
    hwndList : HWND,
);

alias COMBOBOXINFO = Struct_tagCOMBOBOXINFO;

alias PCOMBOBOXINFO = Pointer[Struct_tagCOMBOBOXINFO];

alias LPCOMBOBOXINFO = Pointer[Struct_tagCOMBOBOXINFO];

external GetComboBoxInfo(
    hwndCombo : HWND,
    pcbi : PCOMBOBOXINFO) Int;

external GetAncestor(
    hwnd : HWND,
    gaFlags : UInt) HWND;

external RealChildWindowFromPoint(
    hwndParent : HWND,
    ptParentClientCoords : POINT) HWND;

external RealGetWindowClassA(
    hwnd : HWND,
    ptszClassName : LPSTR,
    cchClassNameMax : UInt) UInt;

external RealGetWindowClassW(
    hwnd : HWND,
    ptszClassName : LPWSTR,
    cchClassNameMax : UInt) UInt;

record Struct_tagALTTABINFO (
    cbSize : CULong,
    cItems : Int,
    cColumns : Int,
    cRows : Int,
    iColFocus : Int,
    iRowFocus : Int,
    cxItem : Int,
    cyItem : Int,
    ptStart : POINT,
);

alias ALTTABINFO = Struct_tagALTTABINFO;

alias PALTTABINFO = Pointer[Struct_tagALTTABINFO];

alias LPALTTABINFO = Pointer[Struct_tagALTTABINFO];

external GetAltTabInfoA(
    hwnd : HWND,
    iItem : Int,
    pati : PALTTABINFO,
    pszItemText : LPSTR,
    cchItemText : UInt) Int;

external GetAltTabInfoW(
    hwnd : HWND,
    iItem : Int,
    pati : PALTTABINFO,
    pszItemText : LPWSTR,
    cchItemText : UInt) Int;

external GetListBoxInfo(
    hwnd : HWND) CULong;

external LockWorkStation() Int;

external UserHandleGrantAccess(
    hUserHandle : HANDLE,
    hJob : HANDLE,
    bGrant : Int) Int;

record Struct_HRAWINPUT__ (
    unused : Int,
);

alias HRAWINPUT = Pointer[Struct_HRAWINPUT__];

record Struct_tagRAWINPUTHEADER (
    dwType : CULong,
    dwSize : CULong,
    hDevice : HANDLE,
    wParam : UInt64,
);

alias RAWINPUTHEADER = Struct_tagRAWINPUTHEADER;

alias PRAWINPUTHEADER = Pointer[Struct_tagRAWINPUTHEADER];

alias LPRAWINPUTHEADER = Pointer[Struct_tagRAWINPUTHEADER];

record Struct_tagRAWMOUSE (
    usFlags : UShort,
    unnamed_field1 : AUnionType,
    ulRawButtons : CULong,
    lLastX : CLong,
    lLastY : CLong,
    ulExtraInformation : CULong,
);

alias RAWMOUSE = Struct_tagRAWMOUSE;

alias PRAWMOUSE = Pointer[Struct_tagRAWMOUSE];

alias LPRAWMOUSE = Pointer[Struct_tagRAWMOUSE];

record Struct_tagRAWKEYBOARD (
    MakeCode : UShort,
    Flags : UShort,
    Reserved : UShort,
    VKey : UShort,
    Message : UInt,
    ExtraInformation : CULong,
);

alias RAWKEYBOARD = Struct_tagRAWKEYBOARD;

alias PRAWKEYBOARD = Pointer[Struct_tagRAWKEYBOARD];

alias LPRAWKEYBOARD = Pointer[Struct_tagRAWKEYBOARD];

record Struct_tagRAWHID (
    dwSizeHid : CULong,
    dwCount : CULong,
    bRawData : Array[CUChar,1],
);

alias RAWHID = Struct_tagRAWHID;

alias PRAWHID = Pointer[Struct_tagRAWHID];

alias LPRAWHID = Pointer[Struct_tagRAWHID];

record Struct_tagRAWINPUT (
    header : RAWINPUTHEADER,
    data : AUnionType,
);

alias RAWINPUT = Struct_tagRAWINPUT;

alias PRAWINPUT = Pointer[Struct_tagRAWINPUT];

alias LPRAWINPUT = Pointer[Struct_tagRAWINPUT];

external GetRawInputData(
    hRawInput : HRAWINPUT,
    uiCommand : UInt,
    pData : LPVOID,
    pcbSize : PUINT,
    cbSizeHeader : UInt) UInt;

record Struct_tagRID_DEVICE_INFO_MOUSE (
    dwId : CULong,
    dwNumberOfButtons : CULong,
    dwSampleRate : CULong,
);

alias RID_DEVICE_INFO_MOUSE = Struct_tagRID_DEVICE_INFO_MOUSE;

alias PRID_DEVICE_INFO_MOUSE = Pointer[Struct_tagRID_DEVICE_INFO_MOUSE];

record Struct_tagRID_DEVICE_INFO_KEYBOARD (
    dwType : CULong,
    dwSubType : CULong,
    dwKeyboardMode : CULong,
    dwNumberOfFunctionKeys : CULong,
    dwNumberOfIndicators : CULong,
    dwNumberOfKeysTotal : CULong,
);

alias RID_DEVICE_INFO_KEYBOARD = Struct_tagRID_DEVICE_INFO_KEYBOARD;

alias PRID_DEVICE_INFO_KEYBOARD = Pointer[Struct_tagRID_DEVICE_INFO_KEYBOARD];

record Struct_tagRID_DEVICE_INFO_HID (
    dwVendorId : CULong,
    dwProductId : CULong,
    dwVersionNumber : CULong,
    usUsagePage : UShort,
    usUsage : UShort,
);

alias RID_DEVICE_INFO_HID = Struct_tagRID_DEVICE_INFO_HID;

alias PRID_DEVICE_INFO_HID = Pointer[Struct_tagRID_DEVICE_INFO_HID];

record Struct_tagRID_DEVICE_INFO (
    cbSize : CULong,
    dwType : CULong,
    unnamed_field2 : AUnionType,
);

alias RID_DEVICE_INFO = Struct_tagRID_DEVICE_INFO;

alias PRID_DEVICE_INFO = Pointer[Struct_tagRID_DEVICE_INFO];

alias LPRID_DEVICE_INFO = Pointer[Struct_tagRID_DEVICE_INFO];

external GetRawInputDeviceInfoA(
    hDevice : HANDLE,
    uiCommand : UInt,
    pData : LPVOID,
    pcbSize : PUINT) UInt;

external GetRawInputDeviceInfoW(
    hDevice : HANDLE,
    uiCommand : UInt,
    pData : LPVOID,
    pcbSize : PUINT) UInt;

external GetRawInputBuffer(
    pData : PRAWINPUT,
    pcbSize : PUINT,
    cbSizeHeader : UInt) UInt;

record Struct_tagRAWINPUTDEVICE (
    usUsagePage : UShort,
    usUsage : UShort,
    dwFlags : CULong,
    hwndTarget : HWND,
);

alias RAWINPUTDEVICE = Struct_tagRAWINPUTDEVICE;

alias PRAWINPUTDEVICE = Pointer[Struct_tagRAWINPUTDEVICE];

alias LPRAWINPUTDEVICE = Pointer[Struct_tagRAWINPUTDEVICE];

alias PCRAWINPUTDEVICE = Pointer[RAWINPUTDEVICE];

external RegisterRawInputDevices(
    pRawInputDevices : PCRAWINPUTDEVICE,
    uiNumDevices : UInt,
    cbSize : UInt) Int;

external GetRegisteredRawInputDevices(
    pRawInputDevices : PRAWINPUTDEVICE,
    puiNumDevices : PUINT,
    cbSize : UInt) UInt;

record Struct_tagRAWINPUTDEVICELIST (
    hDevice : HANDLE,
    dwType : CULong,
);

alias RAWINPUTDEVICELIST = Struct_tagRAWINPUTDEVICELIST;

alias PRAWINPUTDEVICELIST = Pointer[Struct_tagRAWINPUTDEVICELIST];

external GetRawInputDeviceList(
    pRawInputDeviceList : PRAWINPUTDEVICELIST,
    puiNumDevices : PUINT,
    cbSize : UInt) UInt;

external DefRawInputProc(
    paRawInput : Pointer[PRAWINPUT],
    nInput : Int,
    cbSizeHeader : UInt) Int64;

alias LGRPID = CULong;

alias LCTYPE = CULong;

alias CALTYPE = CULong;

alias CALID = CULong;

record Struct__cpinfo (
    MaxCharSize : UInt,
    DefaultChar : Array[CUChar,2],
    LeadByte : Array[CUChar,12],
);

alias CPINFO = Struct__cpinfo;

alias LPCPINFO = Pointer[Struct__cpinfo];

record Struct__cpinfoexA (
    MaxCharSize : UInt,
    DefaultChar : Array[CUChar,2],
    LeadByte : Array[CUChar,12],
    UnicodeDefaultChar : UShort,
    CodePage : UInt,
    CodePageName : Array[CChar,260],
);

alias CPINFOEXA = Struct__cpinfoexA;

alias LPCPINFOEXA = Pointer[Struct__cpinfoexA];

record Struct__cpinfoexW (
    MaxCharSize : UInt,
    DefaultChar : Array[CUChar,2],
    LeadByte : Array[CUChar,12],
    UnicodeDefaultChar : UShort,
    CodePage : UInt,
    CodePageName : Array[UShort,260],
);

alias CPINFOEXW = Struct__cpinfoexW;

alias LPCPINFOEXW = Pointer[Struct__cpinfoexW];

alias CPINFOEX = CPINFOEXA;

alias LPCPINFOEX = LPCPINFOEXA;

record Struct__numberfmtA (
    NumDigits : UInt,
    LeadingZero : UInt,
    Grouping : UInt,
    lpDecimalSep : LPSTR,
    lpThousandSep : LPSTR,
    NegativeOrder : UInt,
);

alias NUMBERFMTA = Struct__numberfmtA;

alias LPNUMBERFMTA = Pointer[Struct__numberfmtA];

record Struct__numberfmtW (
    NumDigits : UInt,
    LeadingZero : UInt,
    Grouping : UInt,
    lpDecimalSep : LPWSTR,
    lpThousandSep : LPWSTR,
    NegativeOrder : UInt,
);

alias NUMBERFMTW = Struct__numberfmtW;

alias LPNUMBERFMTW = Pointer[Struct__numberfmtW];

alias NUMBERFMT = NUMBERFMTA;

alias LPNUMBERFMT = LPNUMBERFMTA;

record Struct__currencyfmtA (
    NumDigits : UInt,
    LeadingZero : UInt,
    Grouping : UInt,
    lpDecimalSep : LPSTR,
    lpThousandSep : LPSTR,
    NegativeOrder : UInt,
    PositiveOrder : UInt,
    lpCurrencySymbol : LPSTR,
);

alias CURRENCYFMTA = Struct__currencyfmtA;

alias LPCURRENCYFMTA = Pointer[Struct__currencyfmtA];

record Struct__currencyfmtW (
    NumDigits : UInt,
    LeadingZero : UInt,
    Grouping : UInt,
    lpDecimalSep : LPWSTR,
    lpThousandSep : LPWSTR,
    NegativeOrder : UInt,
    PositiveOrder : UInt,
    lpCurrencySymbol : LPWSTR,
);

alias CURRENCYFMTW = Struct__currencyfmtW;

alias LPCURRENCYFMTW = Pointer[Struct__currencyfmtW];

alias CURRENCYFMT = CURRENCYFMTA;

alias LPCURRENCYFMT = LPCURRENCYFMTA;

alias COMPARE_STRING = 1;

alias NLS_FUNCTION = CULong;

record Struct__nlsversioninfo (
    dwNLSVersionInfoSize : CULong,
    dwNLSVersion : CULong,
    dwDefinedVersion : CULong,
);

alias NLSVERSIONINFO = Struct__nlsversioninfo;

alias LPNLSVERSIONINFO = Pointer[Struct__nlsversioninfo];

alias GEOID = CLong;

alias GEOTYPE = CULong;

alias GEOCLASS = CULong;

alias GEO_NATION = 1;
alias GEO_LATITUDE = 2;
alias GEO_LONGITUDE = 3;
alias GEO_ISO2 = 4;
alias GEO_ISO3 = 5;
alias GEO_RFC1766 = 6;
alias GEO_LCID = 7;
alias GEO_FRIENDLYNAME = 8;
alias GEO_OFFICIALNAME = 9;
alias GEO_TIMEZONES = 10;
alias GEO_OFFICIALLANGUAGES = 11;

alias GEOCLASS_NATION = 16;
alias GEOCLASS_REGION = 14;

alias NormalizationOther = 0;
alias NormalizationC = 1;
alias NormalizationD = 2;
alias NormalizationKC = 5;
alias NormalizationKD = 6;

alias NORM_FORM = Int;

alias LANGUAGEGROUP_ENUMPROCA = CCodePointer[(CULong,Pointer[CChar],Pointer[CChar],CULong,Int64),(Int)];

alias LANGGROUPLOCALE_ENUMPROCA = CCodePointer[(CULong,CULong,Pointer[CChar],Int64),(Int)];

alias UILANGUAGE_ENUMPROCA = CCodePointer[(Pointer[CChar],Int64),(Int)];

alias LOCALE_ENUMPROCA = CCodePointer[(Pointer[CChar]),(Int)];

alias CODEPAGE_ENUMPROCA = CCodePointer[(Pointer[CChar]),(Int)];

alias DATEFMT_ENUMPROCA = CCodePointer[(Pointer[CChar]),(Int)];

alias DATEFMT_ENUMPROCEXA = CCodePointer[(Pointer[CChar],CULong),(Int)];

alias TIMEFMT_ENUMPROCA = CCodePointer[(Pointer[CChar]),(Int)];

alias CALINFO_ENUMPROCA = CCodePointer[(Pointer[CChar]),(Int)];

alias CALINFO_ENUMPROCEXA = CCodePointer[(Pointer[CChar],CULong),(Int)];

alias LANGUAGEGROUP_ENUMPROCW = CCodePointer[(CULong,Pointer[UShort],Pointer[UShort],CULong,Int64),(Int)];

alias LANGGROUPLOCALE_ENUMPROCW = CCodePointer[(CULong,CULong,Pointer[UShort],Int64),(Int)];

alias UILANGUAGE_ENUMPROCW = CCodePointer[(Pointer[UShort],Int64),(Int)];

alias LOCALE_ENUMPROCW = CCodePointer[(Pointer[UShort]),(Int)];

alias CODEPAGE_ENUMPROCW = CCodePointer[(Pointer[UShort]),(Int)];

alias DATEFMT_ENUMPROCW = CCodePointer[(Pointer[UShort]),(Int)];

alias DATEFMT_ENUMPROCEXW = CCodePointer[(Pointer[UShort],CULong),(Int)];

alias TIMEFMT_ENUMPROCW = CCodePointer[(Pointer[UShort]),(Int)];

alias CALINFO_ENUMPROCW = CCodePointer[(Pointer[UShort]),(Int)];

alias CALINFO_ENUMPROCEXW = CCodePointer[(Pointer[UShort],CULong),(Int)];

alias GEO_ENUMPROC = CCodePointer[(CLong),(Int)];

external IsValidCodePage(
    CodePage : UInt) Int;

external GetACP() UInt;

external GetOEMCP() UInt;

external GetCPInfo(
    CodePage : UInt,
    lpCPInfo : LPCPINFO) Int;

external GetCPInfoExA(
    CodePage : UInt,
    dwFlags : CULong,
    lpCPInfoEx : LPCPINFOEXA) Int;

external GetCPInfoExW(
    CodePage : UInt,
    dwFlags : CULong,
    lpCPInfoEx : LPCPINFOEXW) Int;

external IsDBCSLeadByte(
    TestChar : CUChar) Int;

external IsDBCSLeadByteEx(
    CodePage : UInt,
    TestChar : CUChar) Int;

external MultiByteToWideChar(
    CodePage : UInt,
    dwFlags : CULong,
    lpMultiByteStr : LPCSTR,
    cbMultiByte : Int,
    lpWideCharStr : LPWSTR,
    cchWideChar : Int) Int;

external WideCharToMultiByte(
    CodePage : UInt,
    dwFlags : CULong,
    lpWideCharStr : LPCWSTR,
    cchWideChar : Int,
    lpMultiByteStr : LPSTR,
    cbMultiByte : Int,
    lpDefaultChar : LPCSTR,
    lpUsedDefaultChar : LPBOOL) Int;

external CompareStringA(
    Locale : CULong,
    dwCmpFlags : CULong,
    lpString1 : LPCSTR,
    cchCount1 : Int,
    lpString2 : LPCSTR,
    cchCount2 : Int) Int;

external CompareStringW(
    Locale : CULong,
    dwCmpFlags : CULong,
    lpString1 : LPCWSTR,
    cchCount1 : Int,
    lpString2 : LPCWSTR,
    cchCount2 : Int) Int;

external LCMapStringA(
    Locale : CULong,
    dwMapFlags : CULong,
    lpSrcStr : LPCSTR,
    cchSrc : Int,
    lpDestStr : LPSTR,
    cchDest : Int) Int;

external LCMapStringW(
    Locale : CULong,
    dwMapFlags : CULong,
    lpSrcStr : LPCWSTR,
    cchSrc : Int,
    lpDestStr : LPWSTR,
    cchDest : Int) Int;

external GetLocaleInfoA(
    Locale : CULong,
    LCType : CULong,
    lpLCData : LPSTR,
    cchData : Int) Int;

external GetLocaleInfoW(
    Locale : CULong,
    LCType : CULong,
    lpLCData : LPWSTR,
    cchData : Int) Int;

external SetLocaleInfoA(
    Locale : CULong,
    LCType : CULong,
    lpLCData : LPCSTR) Int;

external SetLocaleInfoW(
    Locale : CULong,
    LCType : CULong,
    lpLCData : LPCWSTR) Int;

external GetCalendarInfoA(
    Locale : CULong,
    Calendar : CULong,
    CalType : CULong,
    lpCalData : LPSTR,
    cchData : Int,
    lpValue : LPDWORD) Int;

external GetCalendarInfoW(
    Locale : CULong,
    Calendar : CULong,
    CalType : CULong,
    lpCalData : LPWSTR,
    cchData : Int,
    lpValue : LPDWORD) Int;

external SetCalendarInfoA(
    Locale : CULong,
    Calendar : CULong,
    CalType : CULong,
    lpCalData : LPCSTR) Int;

external SetCalendarInfoW(
    Locale : CULong,
    Calendar : CULong,
    CalType : CULong,
    lpCalData : LPCWSTR) Int;

external GetTimeFormatA(
    Locale : CULong,
    dwFlags : CULong,
    lpTime : Pointer[SYSTEMTIME],
    lpFormat : LPCSTR,
    lpTimeStr : LPSTR,
    cchTime : Int) Int;

external GetTimeFormatW(
    Locale : CULong,
    dwFlags : CULong,
    lpTime : Pointer[SYSTEMTIME],
    lpFormat : LPCWSTR,
    lpTimeStr : LPWSTR,
    cchTime : Int) Int;

external GetDateFormatA(
    Locale : CULong,
    dwFlags : CULong,
    lpDate : Pointer[SYSTEMTIME],
    lpFormat : LPCSTR,
    lpDateStr : LPSTR,
    cchDate : Int) Int;

external GetDateFormatW(
    Locale : CULong,
    dwFlags : CULong,
    lpDate : Pointer[SYSTEMTIME],
    lpFormat : LPCWSTR,
    lpDateStr : LPWSTR,
    cchDate : Int) Int;

external GetNumberFormatA(
    Locale : CULong,
    dwFlags : CULong,
    lpValue : LPCSTR,
    lpFormat : Pointer[NUMBERFMTA],
    lpNumberStr : LPSTR,
    cchNumber : Int) Int;

external GetNumberFormatW(
    Locale : CULong,
    dwFlags : CULong,
    lpValue : LPCWSTR,
    lpFormat : Pointer[NUMBERFMTW],
    lpNumberStr : LPWSTR,
    cchNumber : Int) Int;

external GetCurrencyFormatA(
    Locale : CULong,
    dwFlags : CULong,
    lpValue : LPCSTR,
    lpFormat : Pointer[CURRENCYFMTA],
    lpCurrencyStr : LPSTR,
    cchCurrency : Int) Int;

external GetCurrencyFormatW(
    Locale : CULong,
    dwFlags : CULong,
    lpValue : LPCWSTR,
    lpFormat : Pointer[CURRENCYFMTW],
    lpCurrencyStr : LPWSTR,
    cchCurrency : Int) Int;

external EnumCalendarInfoA(
    lpCalInfoEnumProc : CALINFO_ENUMPROCA,
    Locale : CULong,
    Calendar : CULong,
    CalType : CULong) Int;

external EnumCalendarInfoW(
    lpCalInfoEnumProc : CALINFO_ENUMPROCW,
    Locale : CULong,
    Calendar : CULong,
    CalType : CULong) Int;

external EnumCalendarInfoExA(
    lpCalInfoEnumProcEx : CALINFO_ENUMPROCEXA,
    Locale : CULong,
    Calendar : CULong,
    CalType : CULong) Int;

external EnumCalendarInfoExW(
    lpCalInfoEnumProcEx : CALINFO_ENUMPROCEXW,
    Locale : CULong,
    Calendar : CULong,
    CalType : CULong) Int;

external EnumTimeFormatsA(
    lpTimeFmtEnumProc : TIMEFMT_ENUMPROCA,
    Locale : CULong,
    dwFlags : CULong) Int;

external EnumTimeFormatsW(
    lpTimeFmtEnumProc : TIMEFMT_ENUMPROCW,
    Locale : CULong,
    dwFlags : CULong) Int;

external EnumDateFormatsA(
    lpDateFmtEnumProc : DATEFMT_ENUMPROCA,
    Locale : CULong,
    dwFlags : CULong) Int;

external EnumDateFormatsW(
    lpDateFmtEnumProc : DATEFMT_ENUMPROCW,
    Locale : CULong,
    dwFlags : CULong) Int;

external EnumDateFormatsExA(
    lpDateFmtEnumProcEx : DATEFMT_ENUMPROCEXA,
    Locale : CULong,
    dwFlags : CULong) Int;

external EnumDateFormatsExW(
    lpDateFmtEnumProcEx : DATEFMT_ENUMPROCEXW,
    Locale : CULong,
    dwFlags : CULong) Int;

external IsValidLanguageGroup(
    LanguageGroup : CULong,
    dwFlags : CULong) Int;

external GetNLSVersion(
    Function : CULong,
    Locale : CULong,
    lpVersionInformation : LPNLSVERSIONINFO) Int;

external IsNLSDefinedString(
    Function : CULong,
    dwFlags : CULong,
    lpVersionInformation : LPNLSVERSIONINFO,
    lpString : LPCWSTR,
    cchStr : Int) Int;

external IsValidLocale(
    Locale : CULong,
    dwFlags : CULong) Int;

external GetGeoInfoA(
    Location : CLong,
    GeoType : CULong,
    lpGeoData : LPSTR,
    cchData : Int,
    LangId : UShort) Int;

external GetGeoInfoW(
    Location : CLong,
    GeoType : CULong,
    lpGeoData : LPWSTR,
    cchData : Int,
    LangId : UShort) Int;

external EnumSystemGeoID(
    GeoClass : CULong,
    ParentGeoId : CLong,
    lpGeoEnumProc : GEO_ENUMPROC) Int;

external GetUserGeoID(
    GeoClass : CULong) CLong;

external SetUserGeoID(
    GeoId : CLong) Int;

external ConvertDefaultLocale(
    Locale : CULong) CULong;

external GetThreadLocale() CULong;

external SetThreadLocale(
    Locale : CULong) Int;

external GetSystemDefaultUILanguage() UShort;

external GetUserDefaultUILanguage() UShort;

external GetSystemDefaultLangID() UShort;

external GetUserDefaultLangID() UShort;

external GetSystemDefaultLCID() CULong;

external GetUserDefaultLCID() CULong;

external GetStringTypeExA(
    Locale : CULong,
    dwInfoType : CULong,
    lpSrcStr : LPCSTR,
    cchSrc : Int,
    lpCharType : LPWORD) Int;

external GetStringTypeExW(
    Locale : CULong,
    dwInfoType : CULong,
    lpSrcStr : LPCWSTR,
    cchSrc : Int,
    lpCharType : LPWORD) Int;

external GetStringTypeA(
    Locale : CULong,
    dwInfoType : CULong,
    lpSrcStr : LPCSTR,
    cchSrc : Int,
    lpCharType : LPWORD) Int;

external GetStringTypeW(
    dwInfoType : CULong,
    lpSrcStr : LPCWSTR,
    cchSrc : Int,
    lpCharType : LPWORD) Int;

external FoldStringA(
    dwMapFlags : CULong,
    lpSrcStr : LPCSTR,
    cchSrc : Int,
    lpDestStr : LPSTR,
    cchDest : Int) Int;

external FoldStringW(
    dwMapFlags : CULong,
    lpSrcStr : LPCWSTR,
    cchSrc : Int,
    lpDestStr : LPWSTR,
    cchDest : Int) Int;

external EnumSystemLanguageGroupsA(
    lpLanguageGroupEnumProc : LANGUAGEGROUP_ENUMPROCA,
    dwFlags : CULong,
    lParam : Int64) Int;

external EnumSystemLanguageGroupsW(
    lpLanguageGroupEnumProc : LANGUAGEGROUP_ENUMPROCW,
    dwFlags : CULong,
    lParam : Int64) Int;

external EnumLanguageGroupLocalesA(
    lpLangGroupLocaleEnumProc : LANGGROUPLOCALE_ENUMPROCA,
    LanguageGroup : CULong,
    dwFlags : CULong,
    lParam : Int64) Int;

external EnumLanguageGroupLocalesW(
    lpLangGroupLocaleEnumProc : LANGGROUPLOCALE_ENUMPROCW,
    LanguageGroup : CULong,
    dwFlags : CULong,
    lParam : Int64) Int;

external EnumUILanguagesA(
    lpUILanguageEnumProc : UILANGUAGE_ENUMPROCA,
    dwFlags : CULong,
    lParam : Int64) Int;

external EnumUILanguagesW(
    lpUILanguageEnumProc : UILANGUAGE_ENUMPROCW,
    dwFlags : CULong,
    lParam : Int64) Int;

external EnumSystemLocalesA(
    lpLocaleEnumProc : LOCALE_ENUMPROCA,
    dwFlags : CULong) Int;

external EnumSystemLocalesW(
    lpLocaleEnumProc : LOCALE_ENUMPROCW,
    dwFlags : CULong) Int;

external EnumSystemCodePagesA(
    lpCodePageEnumProc : CODEPAGE_ENUMPROCA,
    dwFlags : CULong) Int;

external EnumSystemCodePagesW(
    lpCodePageEnumProc : CODEPAGE_ENUMPROCW,
    dwFlags : CULong) Int;

external IsNormalizedString(
    NormForm : NORM_FORM,
    lpString : LPCWSTR,
    cwLength : Int) Int;

external NormalizeString(
    NormForm : NORM_FORM,
    lpSrcString : LPCWSTR,
    cwSrcLength : Int,
    lpDstString : LPWSTR,
    cwDstLength : Int) Int;

external IdnToAscii(
    dwFlags : CULong,
    lpUnicodeCharStr : LPCWSTR,
    cchUnicodeChar : Int,
    lpASCIICharStr : LPWSTR,
    cchASCIIChar : Int) Int;

external IdnToNameprepUnicode(
    dwFlags : CULong,
    lpUnicodeCharStr : LPCWSTR,
    cchUnicodeChar : Int,
    lpNameprepCharStr : LPWSTR,
    cchNameprepChar : Int) Int;

external IdnToUnicode(
    dwFlags : CULong,
    lpASCIICharStr : LPCWSTR,
    cchASCIIChar : Int,
    lpUnicodeCharStr : LPWSTR,
    cchUnicodeChar : Int) Int;

external SetThreadUILanguage(
    LangId : UShort) UShort;

record Struct__COORD (
    X : Short,
    Y : Short,
);

alias COORD = Struct__COORD;

alias PCOORD = Pointer[Struct__COORD];

record Struct__SMALL_RECT (
    Left : Short,
    Top : Short,
    Right : Short,
    Bottom : Short,
);

alias SMALL_RECT = Struct__SMALL_RECT;

alias PSMALL_RECT = Pointer[Struct__SMALL_RECT];

record Struct__KEY_EVENT_RECORD (
    bKeyDown : Int,
    wRepeatCount : UShort,
    wVirtualKeyCode : UShort,
    wVirtualScanCode : UShort,
    uChar : AUnionType,
    dwControlKeyState : CULong,
);

alias KEY_EVENT_RECORD = Struct__KEY_EVENT_RECORD;

alias PKEY_EVENT_RECORD = Pointer[Struct__KEY_EVENT_RECORD];

record Struct__MOUSE_EVENT_RECORD (
    dwMousePosition : COORD,
    dwButtonState : CULong,
    dwControlKeyState : CULong,
    dwEventFlags : CULong,
);

alias MOUSE_EVENT_RECORD = Struct__MOUSE_EVENT_RECORD;

alias PMOUSE_EVENT_RECORD = Pointer[Struct__MOUSE_EVENT_RECORD];

record Struct__WINDOW_BUFFER_SIZE_RECORD (
    dwSize : COORD,
);

alias WINDOW_BUFFER_SIZE_RECORD = Struct__WINDOW_BUFFER_SIZE_RECORD;

alias PWINDOW_BUFFER_SIZE_RECORD = Pointer[Struct__WINDOW_BUFFER_SIZE_RECORD];

record Struct__MENU_EVENT_RECORD (
    dwCommandId : UInt,
);

alias MENU_EVENT_RECORD = Struct__MENU_EVENT_RECORD;

alias PMENU_EVENT_RECORD = Pointer[Struct__MENU_EVENT_RECORD];

record Struct__FOCUS_EVENT_RECORD (
    bSetFocus : Int,
);

alias FOCUS_EVENT_RECORD = Struct__FOCUS_EVENT_RECORD;

alias PFOCUS_EVENT_RECORD = Pointer[Struct__FOCUS_EVENT_RECORD];

record Struct__INPUT_RECORD (
    EventType : UShort,
    Event : AUnionType,
);

alias INPUT_RECORD = Struct__INPUT_RECORD;

alias PINPUT_RECORD = Pointer[Struct__INPUT_RECORD];

record Struct__CHAR_INFO (
    Char : AUnionType,
    Attributes : UShort,
);

alias CHAR_INFO = Struct__CHAR_INFO;

alias PCHAR_INFO = Pointer[Struct__CHAR_INFO];

record Struct__CONSOLE_SCREEN_BUFFER_INFO (
    dwSize : COORD,
    dwCursorPosition : COORD,
    wAttributes : UShort,
    srWindow : SMALL_RECT,
    dwMaximumWindowSize : COORD,
);

alias CONSOLE_SCREEN_BUFFER_INFO = Struct__CONSOLE_SCREEN_BUFFER_INFO;

alias PCONSOLE_SCREEN_BUFFER_INFO = Pointer[Struct__CONSOLE_SCREEN_BUFFER_INFO];

record Struct__CONSOLE_CURSOR_INFO (
    dwSize : CULong,
    bVisible : Int,
);

alias CONSOLE_CURSOR_INFO = Struct__CONSOLE_CURSOR_INFO;

alias PCONSOLE_CURSOR_INFO = Pointer[Struct__CONSOLE_CURSOR_INFO];

record Struct__CONSOLE_FONT_INFO (
    nFont : CULong,
    dwFontSize : COORD,
);

alias CONSOLE_FONT_INFO = Struct__CONSOLE_FONT_INFO;

alias PCONSOLE_FONT_INFO = Pointer[Struct__CONSOLE_FONT_INFO];

record Struct__CONSOLE_SELECTION_INFO (
    dwFlags : CULong,
    dwSelectionAnchor : COORD,
    srSelection : SMALL_RECT,
);

alias CONSOLE_SELECTION_INFO = Struct__CONSOLE_SELECTION_INFO;

alias PCONSOLE_SELECTION_INFO = Pointer[Struct__CONSOLE_SELECTION_INFO];

alias PHANDLER_ROUTINE = CCodePointer[(CULong),(Int)];

external PeekConsoleInputA(
    hConsoleInput : HANDLE,
    lpBuffer : PINPUT_RECORD,
    nLength : CULong,
    lpNumberOfEventsRead : LPDWORD) Int;

external PeekConsoleInputW(
    hConsoleInput : HANDLE,
    lpBuffer : PINPUT_RECORD,
    nLength : CULong,
    lpNumberOfEventsRead : LPDWORD) Int;

external ReadConsoleInputA(
    hConsoleInput : HANDLE,
    lpBuffer : PINPUT_RECORD,
    nLength : CULong,
    lpNumberOfEventsRead : LPDWORD) Int;

external ReadConsoleInputW(
    hConsoleInput : HANDLE,
    lpBuffer : PINPUT_RECORD,
    nLength : CULong,
    lpNumberOfEventsRead : LPDWORD) Int;

external WriteConsoleInputA(
    hConsoleInput : HANDLE,
    lpBuffer : Pointer[INPUT_RECORD],
    nLength : CULong,
    lpNumberOfEventsWritten : LPDWORD) Int;

external WriteConsoleInputW(
    hConsoleInput : HANDLE,
    lpBuffer : Pointer[INPUT_RECORD],
    nLength : CULong,
    lpNumberOfEventsWritten : LPDWORD) Int;

external ReadConsoleOutputA(
    hConsoleOutput : HANDLE,
    lpBuffer : PCHAR_INFO,
    dwBufferSize : COORD,
    dwBufferCoord : COORD,
    lpReadRegion : PSMALL_RECT) Int;

external ReadConsoleOutputW(
    hConsoleOutput : HANDLE,
    lpBuffer : PCHAR_INFO,
    dwBufferSize : COORD,
    dwBufferCoord : COORD,
    lpReadRegion : PSMALL_RECT) Int;

external WriteConsoleOutputA(
    hConsoleOutput : HANDLE,
    lpBuffer : Pointer[CHAR_INFO],
    dwBufferSize : COORD,
    dwBufferCoord : COORD,
    lpWriteRegion : PSMALL_RECT) Int;

external WriteConsoleOutputW(
    hConsoleOutput : HANDLE,
    lpBuffer : Pointer[CHAR_INFO],
    dwBufferSize : COORD,
    dwBufferCoord : COORD,
    lpWriteRegion : PSMALL_RECT) Int;

external ReadConsoleOutputCharacterA(
    hConsoleOutput : HANDLE,
    lpCharacter : LPSTR,
    nLength : CULong,
    dwReadCoord : COORD,
    lpNumberOfCharsRead : LPDWORD) Int;

external ReadConsoleOutputCharacterW(
    hConsoleOutput : HANDLE,
    lpCharacter : LPWSTR,
    nLength : CULong,
    dwReadCoord : COORD,
    lpNumberOfCharsRead : LPDWORD) Int;

external ReadConsoleOutputAttribute(
    hConsoleOutput : HANDLE,
    lpAttribute : LPWORD,
    nLength : CULong,
    dwReadCoord : COORD,
    lpNumberOfAttrsRead : LPDWORD) Int;

external WriteConsoleOutputCharacterA(
    hConsoleOutput : HANDLE,
    lpCharacter : LPCSTR,
    nLength : CULong,
    dwWriteCoord : COORD,
    lpNumberOfCharsWritten : LPDWORD) Int;

external WriteConsoleOutputCharacterW(
    hConsoleOutput : HANDLE,
    lpCharacter : LPCWSTR,
    nLength : CULong,
    dwWriteCoord : COORD,
    lpNumberOfCharsWritten : LPDWORD) Int;

external WriteConsoleOutputAttribute(
    hConsoleOutput : HANDLE,
    lpAttribute : Pointer[UShort],
    nLength : CULong,
    dwWriteCoord : COORD,
    lpNumberOfAttrsWritten : LPDWORD) Int;

external FillConsoleOutputCharacterA(
    hConsoleOutput : HANDLE,
    cCharacter : CChar,
    nLength : CULong,
    dwWriteCoord : COORD,
    lpNumberOfCharsWritten : LPDWORD) Int;

external FillConsoleOutputCharacterW(
    hConsoleOutput : HANDLE,
    cCharacter : UShort,
    nLength : CULong,
    dwWriteCoord : COORD,
    lpNumberOfCharsWritten : LPDWORD) Int;

external FillConsoleOutputAttribute(
    hConsoleOutput : HANDLE,
    wAttribute : UShort,
    nLength : CULong,
    dwWriteCoord : COORD,
    lpNumberOfAttrsWritten : LPDWORD) Int;

external GetConsoleMode(
    hConsoleHandle : HANDLE,
    lpMode : LPDWORD) Int;

external GetNumberOfConsoleInputEvents(
    hConsoleInput : HANDLE,
    lpNumberOfEvents : LPDWORD) Int;

external GetConsoleScreenBufferInfo(
    hConsoleOutput : HANDLE,
    lpConsoleScreenBufferInfo : PCONSOLE_SCREEN_BUFFER_INFO) Int;

external GetLargestConsoleWindowSize(
    hConsoleOutput : HANDLE) COORD;

external GetConsoleCursorInfo(
    hConsoleOutput : HANDLE,
    lpConsoleCursorInfo : PCONSOLE_CURSOR_INFO) Int;

external GetCurrentConsoleFont(
    hConsoleOutput : HANDLE,
    bMaximumWindow : Int,
    lpConsoleCurrentFont : PCONSOLE_FONT_INFO) Int;

external GetConsoleFontSize(
    hConsoleOutput : HANDLE,
    nFont : CULong) COORD;

external GetConsoleSelectionInfo(
    lpConsoleSelectionInfo : PCONSOLE_SELECTION_INFO) Int;

external GetNumberOfConsoleMouseButtons(
    lpNumberOfMouseButtons : LPDWORD) Int;

external SetConsoleMode(
    hConsoleHandle : HANDLE,
    dwMode : CULong) Int;

external SetConsoleActiveScreenBuffer(
    hConsoleOutput : HANDLE) Int;

external FlushConsoleInputBuffer(
    hConsoleInput : HANDLE) Int;

external SetConsoleScreenBufferSize(
    hConsoleOutput : HANDLE,
    dwSize : COORD) Int;

external SetConsoleCursorPosition(
    hConsoleOutput : HANDLE,
    dwCursorPosition : COORD) Int;

external SetConsoleCursorInfo(
    hConsoleOutput : HANDLE,
    lpConsoleCursorInfo : Pointer[CONSOLE_CURSOR_INFO]) Int;

external ScrollConsoleScreenBufferA(
    hConsoleOutput : HANDLE,
    lpScrollRectangle : Pointer[SMALL_RECT],
    lpClipRectangle : Pointer[SMALL_RECT],
    dwDestinationOrigin : COORD,
    lpFill : Pointer[CHAR_INFO]) Int;

external ScrollConsoleScreenBufferW(
    hConsoleOutput : HANDLE,
    lpScrollRectangle : Pointer[SMALL_RECT],
    lpClipRectangle : Pointer[SMALL_RECT],
    dwDestinationOrigin : COORD,
    lpFill : Pointer[CHAR_INFO]) Int;

external SetConsoleWindowInfo(
    hConsoleOutput : HANDLE,
    bAbsolute : Int,
    lpConsoleWindow : Pointer[SMALL_RECT]) Int;

external SetConsoleTextAttribute(
    hConsoleOutput : HANDLE,
    wAttributes : UShort) Int;

external SetConsoleCtrlHandler(
    HandlerRoutine : PHANDLER_ROUTINE,
    Add : Int) Int;

external GenerateConsoleCtrlEvent(
    dwCtrlEvent : CULong,
    dwProcessGroupId : CULong) Int;

external AllocConsole() Int;

external FreeConsole() Int;

external AttachConsole(
    dwProcessId : CULong) Int;

external GetConsoleTitleA(
    lpConsoleTitle : LPSTR,
    nSize : CULong) CULong;

external GetConsoleTitleW(
    lpConsoleTitle : LPWSTR,
    nSize : CULong) CULong;

external SetConsoleTitleA(
    lpConsoleTitle : LPCSTR) Int;

external SetConsoleTitleW(
    lpConsoleTitle : LPCWSTR) Int;

external ReadConsoleA(
    hConsoleInput : HANDLE,
    lpBuffer : LPVOID,
    nNumberOfCharsToRead : CULong,
    lpNumberOfCharsRead : LPDWORD,
    lpReserved : LPVOID) Int;

external ReadConsoleW(
    hConsoleInput : HANDLE,
    lpBuffer : LPVOID,
    nNumberOfCharsToRead : CULong,
    lpNumberOfCharsRead : LPDWORD,
    lpReserved : LPVOID) Int;

external WriteConsoleA(
    hConsoleOutput : HANDLE,
    lpBuffer : RawPointer,
    nNumberOfCharsToWrite : CULong,
    lpNumberOfCharsWritten : LPDWORD,
    lpReserved : LPVOID) Int;

external WriteConsoleW(
    hConsoleOutput : HANDLE,
    lpBuffer : RawPointer,
    nNumberOfCharsToWrite : CULong,
    lpNumberOfCharsWritten : LPDWORD,
    lpReserved : LPVOID) Int;

external CreateConsoleScreenBuffer(
    dwDesiredAccess : CULong,
    dwShareMode : CULong,
    lpSecurityAttributes : Pointer[SECURITY_ATTRIBUTES],
    dwFlags : CULong,
    lpScreenBufferData : LPVOID) HANDLE;

external GetConsoleCP() UInt;

external SetConsoleCP(
    wCodePageID : UInt) Int;

external GetConsoleOutputCP() UInt;

external SetConsoleOutputCP(
    wCodePageID : UInt) Int;

external GetConsoleDisplayMode(
    lpModeFlags : LPDWORD) Int;

external GetConsoleWindow() HWND;

external GetConsoleProcessList(
    lpdwProcessList : LPDWORD,
    dwProcessCount : CULong) CULong;

external AddConsoleAliasA(
    Source : LPSTR,
    Target : LPSTR,
    ExeName : LPSTR) Int;

external AddConsoleAliasW(
    Source : LPWSTR,
    Target : LPWSTR,
    ExeName : LPWSTR) Int;

external GetConsoleAliasA(
    Source : LPSTR,
    TargetBuffer : LPSTR,
    TargetBufferLength : CULong,
    ExeName : LPSTR) CULong;

external GetConsoleAliasW(
    Source : LPWSTR,
    TargetBuffer : LPWSTR,
    TargetBufferLength : CULong,
    ExeName : LPWSTR) CULong;

external GetConsoleAliasesLengthA(
    ExeName : LPSTR) CULong;

external GetConsoleAliasesLengthW(
    ExeName : LPWSTR) CULong;

external GetConsoleAliasExesLengthA() CULong;

external GetConsoleAliasExesLengthW() CULong;

external GetConsoleAliasesA(
    AliasBuffer : LPSTR,
    AliasBufferLength : CULong,
    ExeName : LPSTR) CULong;

external GetConsoleAliasesW(
    AliasBuffer : LPWSTR,
    AliasBufferLength : CULong,
    ExeName : LPWSTR) CULong;

external GetConsoleAliasExesA(
    ExeNameBuffer : LPSTR,
    ExeNameBufferLength : CULong) CULong;

external GetConsoleAliasExesW(
    ExeNameBuffer : LPWSTR,
    ExeNameBufferLength : CULong) CULong;

record Struct_tagVS_FIXEDFILEINFO (
    dwSignature : CULong,
    dwStrucVersion : CULong,
    dwFileVersionMS : CULong,
    dwFileVersionLS : CULong,
    dwProductVersionMS : CULong,
    dwProductVersionLS : CULong,
    dwFileFlagsMask : CULong,
    dwFileFlags : CULong,
    dwFileOS : CULong,
    dwFileType : CULong,
    dwFileSubtype : CULong,
    dwFileDateMS : CULong,
    dwFileDateLS : CULong,
);

alias VS_FIXEDFILEINFO = Struct_tagVS_FIXEDFILEINFO;

external VerFindFileA(
    uFlags : CULong,
    szFileName : LPSTR,
    szWinDir : LPSTR,
    szAppDir : LPSTR,
    szCurDir : LPSTR,
    lpuCurDirLen : PUINT,
    szDestDir : LPSTR,
    lpuDestDirLen : PUINT) CULong;

external VerFindFileW(
    uFlags : CULong,
    szFileName : LPWSTR,
    szWinDir : LPWSTR,
    szAppDir : LPWSTR,
    szCurDir : LPWSTR,
    lpuCurDirLen : PUINT,
    szDestDir : LPWSTR,
    lpuDestDirLen : PUINT) CULong;

external VerInstallFileA(
    uFlags : CULong,
    szSrcFileName : LPSTR,
    szDestFileName : LPSTR,
    szSrcDir : LPSTR,
    szDestDir : LPSTR,
    szCurDir : LPSTR,
    szTmpFile : LPSTR,
    lpuTmpFileLen : PUINT) CULong;

external VerInstallFileW(
    uFlags : CULong,
    szSrcFileName : LPWSTR,
    szDestFileName : LPWSTR,
    szSrcDir : LPWSTR,
    szDestDir : LPWSTR,
    szCurDir : LPWSTR,
    szTmpFile : LPWSTR,
    lpuTmpFileLen : PUINT) CULong;

external GetFileVersionInfoSizeA(
    lptstrFilename : LPCSTR,
    lpdwHandle : LPDWORD) CULong;

external GetFileVersionInfoSizeW(
    lptstrFilename : LPCWSTR,
    lpdwHandle : LPDWORD) CULong;

external GetFileVersionInfoA(
    lptstrFilename : LPCSTR,
    dwHandle : CULong,
    dwLen : CULong,
    lpData : LPVOID) Int;

external GetFileVersionInfoW(
    lptstrFilename : LPCWSTR,
    dwHandle : CULong,
    dwLen : CULong,
    lpData : LPVOID) Int;

external VerLanguageNameA(
    wLang : CULong,
    szLang : LPSTR,
    nSize : CULong) CULong;

external VerLanguageNameW(
    wLang : CULong,
    szLang : LPWSTR,
    nSize : CULong) CULong;

external VerQueryValueA(
    pBlock : LPVOID,
    lpSubBlock : LPCSTR,
    lplpBuffer : Pointer[LPVOID],
    puLen : PUINT) Int;

external VerQueryValueW(
    pBlock : LPVOID,
    lpSubBlock : LPCWSTR,
    lplpBuffer : Pointer[LPVOID],
    puLen : PUINT) Int;

alias REGSAM = CULong;

record Struct_val_context (
    valuelen : Int,
    value_context : LPVOID,
    val_buff_ptr : LPVOID,
);

alias PVALCONTEXT = Pointer[Struct_val_context];

record Struct_pvalueA (
    pv_valuename : LPSTR,
    pv_valuelen : Int,
    pv_value_context : LPVOID,
    pv_type : CULong,
);

alias PVALUEA = Struct_pvalueA;

alias PPVALUEA = Pointer[Struct_pvalueA];

record Struct_pvalueW (
    pv_valuename : LPWSTR,
    pv_valuelen : Int,
    pv_value_context : LPVOID,
    pv_type : CULong,
);

alias PVALUEW = Struct_pvalueW;

alias PPVALUEW = Pointer[Struct_pvalueW];

alias PVALUE = PVALUEA;

alias PPVALUE = PPVALUEA;

alias PQUERYHANDLER = CCodePointer[(RawPointer,Pointer[Struct_val_context],CULong,RawPointer,Pointer[CULong],CULong),(CULong)];

record Struct_provider_info (
    pi_R0_1val : PQUERYHANDLER,
    pi_R0_allvals : PQUERYHANDLER,
    pi_R3_1val : PQUERYHANDLER,
    pi_R3_allvals : PQUERYHANDLER,
    pi_flags : CULong,
    pi_key_context : LPVOID,
);

alias REG_PROVIDER = Struct_provider_info;

alias PPROVIDER = Pointer[Struct_provider_info];

record Struct_value_entA (
    ve_valuename : LPSTR,
    ve_valuelen : CULong,
    ve_valueptr : UInt64,
    ve_type : CULong,
);

alias VALENTA = Struct_value_entA;

alias PVALENTA = Pointer[Struct_value_entA];

record Struct_value_entW (
    ve_valuename : LPWSTR,
    ve_valuelen : CULong,
    ve_valueptr : UInt64,
    ve_type : CULong,
);

alias VALENTW = Struct_value_entW;

alias PVALENTW = Pointer[Struct_value_entW];

alias VALENT = VALENTA;

alias PVALENT = PVALENTA;

external RegCloseKey(
    hKey : HKEY) CLong;

external RegOverridePredefKey(
    hKey : HKEY,
    hNewHKey : HKEY) CLong;

external RegOpenUserClassesRoot(
    hToken : HANDLE,
    dwOptions : CULong,
    samDesired : CULong,
    phkResult : PHKEY) CLong;

external RegOpenCurrentUser(
    samDesired : CULong,
    phkResult : PHKEY) CLong;

external RegDisablePredefinedCache() CLong;

external RegConnectRegistryA(
    lpMachineName : LPCSTR,
    hKey : HKEY,
    phkResult : PHKEY) CLong;

external RegConnectRegistryW(
    lpMachineName : LPCWSTR,
    hKey : HKEY,
    phkResult : PHKEY) CLong;

external RegConnectRegistryExA(
    lpMachineName : LPCSTR,
    hKey : HKEY,
    Flags : CULong,
    phkResult : PHKEY) CLong;

external RegConnectRegistryExW(
    lpMachineName : LPCWSTR,
    hKey : HKEY,
    Flags : CULong,
    phkResult : PHKEY) CLong;

external RegCreateKeyA(
    hKey : HKEY,
    lpSubKey : LPCSTR,
    phkResult : PHKEY) CLong;

external RegCreateKeyW(
    hKey : HKEY,
    lpSubKey : LPCWSTR,
    phkResult : PHKEY) CLong;

external RegCreateKeyExA(
    hKey : HKEY,
    lpSubKey : LPCSTR,
    Reserved : CULong,
    lpClass : LPSTR,
    dwOptions : CULong,
    samDesired : CULong,
    lpSecurityAttributes : LPSECURITY_ATTRIBUTES,
    phkResult : PHKEY,
    lpdwDisposition : LPDWORD) CLong;

external RegCreateKeyExW(
    hKey : HKEY,
    lpSubKey : LPCWSTR,
    Reserved : CULong,
    lpClass : LPWSTR,
    dwOptions : CULong,
    samDesired : CULong,
    lpSecurityAttributes : LPSECURITY_ATTRIBUTES,
    phkResult : PHKEY,
    lpdwDisposition : LPDWORD) CLong;

external RegDeleteKeyA(
    hKey : HKEY,
    lpSubKey : LPCSTR) CLong;

external RegDeleteKeyW(
    hKey : HKEY,
    lpSubKey : LPCWSTR) CLong;

external RegDeleteKeyExA(
    hKey : HKEY,
    lpSubKey : LPCSTR,
    samDesired : CULong,
    Reserved : CULong) CLong;

external RegDeleteKeyExW(
    hKey : HKEY,
    lpSubKey : LPCWSTR,
    samDesired : CULong,
    Reserved : CULong) CLong;

external RegDisableReflectionKey(
    hBase : HKEY) CLong;

external RegEnableReflectionKey(
    hBase : HKEY) CLong;

external RegQueryReflectionKey(
    hBase : HKEY,
    bIsReflectionDisabled : Pointer[Int]) CLong;

external RegDeleteValueA(
    hKey : HKEY,
    lpValueName : LPCSTR) CLong;

external RegDeleteValueW(
    hKey : HKEY,
    lpValueName : LPCWSTR) CLong;

external RegEnumKeyA(
    hKey : HKEY,
    dwIndex : CULong,
    lpName : LPSTR,
    cchName : CULong) CLong;

external RegEnumKeyW(
    hKey : HKEY,
    dwIndex : CULong,
    lpName : LPWSTR,
    cchName : CULong) CLong;

external RegEnumKeyExA(
    hKey : HKEY,
    dwIndex : CULong,
    lpName : LPSTR,
    lpcchName : LPDWORD,
    lpReserved : LPDWORD,
    lpClass : LPSTR,
    lpcchClass : LPDWORD,
    lpftLastWriteTime : PFILETIME) CLong;

external RegEnumKeyExW(
    hKey : HKEY,
    dwIndex : CULong,
    lpName : LPWSTR,
    lpcchName : LPDWORD,
    lpReserved : LPDWORD,
    lpClass : LPWSTR,
    lpcchClass : LPDWORD,
    lpftLastWriteTime : PFILETIME) CLong;

external RegEnumValueA(
    hKey : HKEY,
    dwIndex : CULong,
    lpValueName : LPSTR,
    lpcchValueName : LPDWORD,
    lpReserved : LPDWORD,
    lpType : LPDWORD,
    lpData : LPBYTE,
    lpcbData : LPDWORD) CLong;

external RegEnumValueW(
    hKey : HKEY,
    dwIndex : CULong,
    lpValueName : LPWSTR,
    lpcchValueName : LPDWORD,
    lpReserved : LPDWORD,
    lpType : LPDWORD,
    lpData : LPBYTE,
    lpcbData : LPDWORD) CLong;

external RegFlushKey(
    hKey : HKEY) CLong;

external RegGetKeySecurity(
    hKey : HKEY,
    SecurityInformation : CULong,
    pSecurityDescriptor : PSECURITY_DESCRIPTOR,
    lpcbSecurityDescriptor : LPDWORD) CLong;

external RegLoadKeyA(
    hKey : HKEY,
    lpSubKey : LPCSTR,
    lpFile : LPCSTR) CLong;

external RegLoadKeyW(
    hKey : HKEY,
    lpSubKey : LPCWSTR,
    lpFile : LPCWSTR) CLong;

external RegNotifyChangeKeyValue(
    hKey : HKEY,
    bWatchSubtree : Int,
    dwNotifyFilter : CULong,
    hEvent : HANDLE,
    fAsynchronous : Int) CLong;

external RegOpenKeyA(
    hKey : HKEY,
    lpSubKey : LPCSTR,
    phkResult : PHKEY) CLong;

external RegOpenKeyW(
    hKey : HKEY,
    lpSubKey : LPCWSTR,
    phkResult : PHKEY) CLong;

external RegOpenKeyExA(
    hKey : HKEY,
    lpSubKey : LPCSTR,
    ulOptions : CULong,
    samDesired : CULong,
    phkResult : PHKEY) CLong;

external RegOpenKeyExW(
    hKey : HKEY,
    lpSubKey : LPCWSTR,
    ulOptions : CULong,
    samDesired : CULong,
    phkResult : PHKEY) CLong;

external RegQueryInfoKeyA(
    hKey : HKEY,
    lpClass : LPSTR,
    lpcchClass : LPDWORD,
    lpReserved : LPDWORD,
    lpcSubKeys : LPDWORD,
    lpcbMaxSubKeyLen : LPDWORD,
    lpcbMaxClassLen : LPDWORD,
    lpcValues : LPDWORD,
    lpcbMaxValueNameLen : LPDWORD,
    lpcbMaxValueLen : LPDWORD,
    lpcbSecurityDescriptor : LPDWORD,
    lpftLastWriteTime : PFILETIME) CLong;

external RegQueryInfoKeyW(
    hKey : HKEY,
    lpClass : LPWSTR,
    lpcchClass : LPDWORD,
    lpReserved : LPDWORD,
    lpcSubKeys : LPDWORD,
    lpcbMaxSubKeyLen : LPDWORD,
    lpcbMaxClassLen : LPDWORD,
    lpcValues : LPDWORD,
    lpcbMaxValueNameLen : LPDWORD,
    lpcbMaxValueLen : LPDWORD,
    lpcbSecurityDescriptor : LPDWORD,
    lpftLastWriteTime : PFILETIME) CLong;

external RegQueryValueA(
    hKey : HKEY,
    lpSubKey : LPCSTR,
    lpData : LPSTR,
    lpcbData : PLONG) CLong;

external RegQueryValueW(
    hKey : HKEY,
    lpSubKey : LPCWSTR,
    lpData : LPWSTR,
    lpcbData : PLONG) CLong;

external RegQueryMultipleValuesA(
    hKey : HKEY,
    val_list : PVALENTA,
    num_vals : CULong,
    lpValueBuf : LPSTR,
    ldwTotsize : LPDWORD) CLong;

external RegQueryMultipleValuesW(
    hKey : HKEY,
    val_list : PVALENTW,
    num_vals : CULong,
    lpValueBuf : LPWSTR,
    ldwTotsize : LPDWORD) CLong;

external RegQueryValueExA(
    hKey : HKEY,
    lpValueName : LPCSTR,
    lpReserved : LPDWORD,
    lpType : LPDWORD,
    lpData : LPBYTE,
    lpcbData : LPDWORD) CLong;

external RegQueryValueExW(
    hKey : HKEY,
    lpValueName : LPCWSTR,
    lpReserved : LPDWORD,
    lpType : LPDWORD,
    lpData : LPBYTE,
    lpcbData : LPDWORD) CLong;

external RegReplaceKeyA(
    hKey : HKEY,
    lpSubKey : LPCSTR,
    lpNewFile : LPCSTR,
    lpOldFile : LPCSTR) CLong;

external RegReplaceKeyW(
    hKey : HKEY,
    lpSubKey : LPCWSTR,
    lpNewFile : LPCWSTR,
    lpOldFile : LPCWSTR) CLong;

external RegRestoreKeyA(
    hKey : HKEY,
    lpFile : LPCSTR,
    dwFlags : CULong) CLong;

external RegRestoreKeyW(
    hKey : HKEY,
    lpFile : LPCWSTR,
    dwFlags : CULong) CLong;

external RegSaveKeyA(
    hKey : HKEY,
    lpFile : LPCSTR,
    lpSecurityAttributes : LPSECURITY_ATTRIBUTES) CLong;

external RegSaveKeyW(
    hKey : HKEY,
    lpFile : LPCWSTR,
    lpSecurityAttributes : LPSECURITY_ATTRIBUTES) CLong;

external RegSetKeySecurity(
    hKey : HKEY,
    SecurityInformation : CULong,
    pSecurityDescriptor : PSECURITY_DESCRIPTOR) CLong;

external RegSetValueA(
    hKey : HKEY,
    lpSubKey : LPCSTR,
    dwType : CULong,
    lpData : LPCSTR,
    cbData : CULong) CLong;

external RegSetValueW(
    hKey : HKEY,
    lpSubKey : LPCWSTR,
    dwType : CULong,
    lpData : LPCWSTR,
    cbData : CULong) CLong;

external RegSetValueExA(
    hKey : HKEY,
    lpValueName : LPCSTR,
    Reserved : CULong,
    dwType : CULong,
    lpData : Pointer[CUChar],
    cbData : CULong) CLong;

external RegSetValueExW(
    hKey : HKEY,
    lpValueName : LPCWSTR,
    Reserved : CULong,
    dwType : CULong,
    lpData : Pointer[CUChar],
    cbData : CULong) CLong;

external RegUnLoadKeyA(
    hKey : HKEY,
    lpSubKey : LPCSTR) CLong;

external RegUnLoadKeyW(
    hKey : HKEY,
    lpSubKey : LPCWSTR) CLong;

external RegGetValueA(
    hkey : HKEY,
    lpSubKey : LPCSTR,
    lpValue : LPCSTR,
    dwFlags : CULong,
    pdwType : LPDWORD,
    pvData : PVOID,
    pcbData : LPDWORD) CLong;

external RegGetValueW(
    hkey : HKEY,
    lpSubKey : LPCWSTR,
    lpValue : LPCWSTR,
    dwFlags : CULong,
    pdwType : LPDWORD,
    pvData : PVOID,
    pcbData : LPDWORD) CLong;

external InitiateSystemShutdownA(
    lpMachineName : LPSTR,
    lpMessage : LPSTR,
    dwTimeout : CULong,
    bForceAppsClosed : Int,
    bRebootAfterShutdown : Int) Int;

external InitiateSystemShutdownW(
    lpMachineName : LPWSTR,
    lpMessage : LPWSTR,
    dwTimeout : CULong,
    bForceAppsClosed : Int,
    bRebootAfterShutdown : Int) Int;

external AbortSystemShutdownA(
    lpMachineName : LPSTR) Int;

external AbortSystemShutdownW(
    lpMachineName : LPWSTR) Int;

external InitiateSystemShutdownExA(
    lpMachineName : LPSTR,
    lpMessage : LPSTR,
    dwTimeout : CULong,
    bForceAppsClosed : Int,
    bRebootAfterShutdown : Int,
    dwReason : CULong) Int;

external InitiateSystemShutdownExW(
    lpMachineName : LPWSTR,
    lpMessage : LPWSTR,
    dwTimeout : CULong,
    bForceAppsClosed : Int,
    bRebootAfterShutdown : Int,
    dwReason : CULong) Int;

external RegSaveKeyExA(
    hKey : HKEY,
    lpFile : LPCSTR,
    lpSecurityAttributes : LPSECURITY_ATTRIBUTES,
    Flags : CULong) CLong;

external RegSaveKeyExW(
    hKey : HKEY,
    lpFile : LPCWSTR,
    lpSecurityAttributes : LPSECURITY_ATTRIBUTES,
    Flags : CULong) CLong;

external Wow64Win32ApiEntry(
    dwFuncNumber : CULong,
    dwFlag : CULong,
    dwRes : CULong) CLong;

record Struct__NETRESOURCEA (
    dwScope : CULong,
    dwType : CULong,
    dwDisplayType : CULong,
    dwUsage : CULong,
    lpLocalName : LPSTR,
    lpRemoteName : LPSTR,
    lpComment : LPSTR,
    lpProvider : LPSTR,
);

alias NETRESOURCEA = Struct__NETRESOURCEA;

alias LPNETRESOURCEA = Pointer[Struct__NETRESOURCEA];

record Struct__NETRESOURCEW (
    dwScope : CULong,
    dwType : CULong,
    dwDisplayType : CULong,
    dwUsage : CULong,
    lpLocalName : LPWSTR,
    lpRemoteName : LPWSTR,
    lpComment : LPWSTR,
    lpProvider : LPWSTR,
);

alias NETRESOURCEW = Struct__NETRESOURCEW;

alias LPNETRESOURCEW = Pointer[Struct__NETRESOURCEW];

alias NETRESOURCE = NETRESOURCEA;

alias LPNETRESOURCE = LPNETRESOURCEA;

external WNetAddConnectionA(
    lpRemoteName : LPCSTR,
    lpPassword : LPCSTR,
    lpLocalName : LPCSTR) CULong;

external WNetAddConnectionW(
    lpRemoteName : LPCWSTR,
    lpPassword : LPCWSTR,
    lpLocalName : LPCWSTR) CULong;

external WNetAddConnection2A(
    lpNetResource : LPNETRESOURCEA,
    lpPassword : LPCSTR,
    lpUserName : LPCSTR,
    dwFlags : CULong) CULong;

external WNetAddConnection2W(
    lpNetResource : LPNETRESOURCEW,
    lpPassword : LPCWSTR,
    lpUserName : LPCWSTR,
    dwFlags : CULong) CULong;

external WNetAddConnection3A(
    hwndOwner : HWND,
    lpNetResource : LPNETRESOURCEA,
    lpPassword : LPCSTR,
    lpUserName : LPCSTR,
    dwFlags : CULong) CULong;

external WNetAddConnection3W(
    hwndOwner : HWND,
    lpNetResource : LPNETRESOURCEW,
    lpPassword : LPCWSTR,
    lpUserName : LPCWSTR,
    dwFlags : CULong) CULong;

external WNetCancelConnectionA(
    lpName : LPCSTR,
    fForce : Int) CULong;

external WNetCancelConnectionW(
    lpName : LPCWSTR,
    fForce : Int) CULong;

external WNetCancelConnection2A(
    lpName : LPCSTR,
    dwFlags : CULong,
    fForce : Int) CULong;

external WNetCancelConnection2W(
    lpName : LPCWSTR,
    dwFlags : CULong,
    fForce : Int) CULong;

external WNetGetConnectionA(
    lpLocalName : LPCSTR,
    lpRemoteName : LPSTR,
    lpnLength : LPDWORD) CULong;

external WNetGetConnectionW(
    lpLocalName : LPCWSTR,
    lpRemoteName : LPWSTR,
    lpnLength : LPDWORD) CULong;

external WNetRestoreConnectionA(
    hwndParent : HWND,
    lpDevice : LPCSTR) CULong;

external WNetRestoreConnectionW(
    hwndParent : HWND,
    lpDevice : LPCWSTR) CULong;

external WNetUseConnectionA(
    hwndOwner : HWND,
    lpNetResource : LPNETRESOURCEA,
    lpPassword : LPCSTR,
    lpUserID : LPCSTR,
    dwFlags : CULong,
    lpAccessName : LPSTR,
    lpBufferSize : LPDWORD,
    lpResult : LPDWORD) CULong;

external WNetUseConnectionW(
    hwndOwner : HWND,
    lpNetResource : LPNETRESOURCEW,
    lpPassword : LPCWSTR,
    lpUserID : LPCWSTR,
    dwFlags : CULong,
    lpAccessName : LPWSTR,
    lpBufferSize : LPDWORD,
    lpResult : LPDWORD) CULong;

external WNetConnectionDialog(
    hwnd : HWND,
    dwType : CULong) CULong;

external WNetDisconnectDialog(
    hwnd : HWND,
    dwType : CULong) CULong;

record Struct__CONNECTDLGSTRUCTA (
    cbStructure : CULong,
    hwndOwner : HWND,
    lpConnRes : LPNETRESOURCEA,
    dwFlags : CULong,
    dwDevNum : CULong,
);

alias CONNECTDLGSTRUCTA = Struct__CONNECTDLGSTRUCTA;

alias LPCONNECTDLGSTRUCTA = Pointer[Struct__CONNECTDLGSTRUCTA];

record Struct__CONNECTDLGSTRUCTW (
    cbStructure : CULong,
    hwndOwner : HWND,
    lpConnRes : LPNETRESOURCEW,
    dwFlags : CULong,
    dwDevNum : CULong,
);

alias CONNECTDLGSTRUCTW = Struct__CONNECTDLGSTRUCTW;

alias LPCONNECTDLGSTRUCTW = Pointer[Struct__CONNECTDLGSTRUCTW];

alias CONNECTDLGSTRUCT = CONNECTDLGSTRUCTA;

alias LPCONNECTDLGSTRUCT = LPCONNECTDLGSTRUCTA;

external WNetConnectionDialog1A(
    lpConnDlgStruct : LPCONNECTDLGSTRUCTA) CULong;

external WNetConnectionDialog1W(
    lpConnDlgStruct : LPCONNECTDLGSTRUCTW) CULong;

record Struct__DISCDLGSTRUCTA (
    cbStructure : CULong,
    hwndOwner : HWND,
    lpLocalName : LPSTR,
    lpRemoteName : LPSTR,
    dwFlags : CULong,
);

alias DISCDLGSTRUCTA = Struct__DISCDLGSTRUCTA;

alias LPDISCDLGSTRUCTA = Pointer[Struct__DISCDLGSTRUCTA];

record Struct__DISCDLGSTRUCTW (
    cbStructure : CULong,
    hwndOwner : HWND,
    lpLocalName : LPWSTR,
    lpRemoteName : LPWSTR,
    dwFlags : CULong,
);

alias DISCDLGSTRUCTW = Struct__DISCDLGSTRUCTW;

alias LPDISCDLGSTRUCTW = Pointer[Struct__DISCDLGSTRUCTW];

alias DISCDLGSTRUCT = DISCDLGSTRUCTA;

alias LPDISCDLGSTRUCT = LPDISCDLGSTRUCTA;

external WNetDisconnectDialog1A(
    lpConnDlgStruct : LPDISCDLGSTRUCTA) CULong;

external WNetDisconnectDialog1W(
    lpConnDlgStruct : LPDISCDLGSTRUCTW) CULong;

external WNetOpenEnumA(
    dwScope : CULong,
    dwType : CULong,
    dwUsage : CULong,
    lpNetResource : LPNETRESOURCEA,
    lphEnum : LPHANDLE) CULong;

external WNetOpenEnumW(
    dwScope : CULong,
    dwType : CULong,
    dwUsage : CULong,
    lpNetResource : LPNETRESOURCEW,
    lphEnum : LPHANDLE) CULong;

external WNetEnumResourceA(
    hEnum : HANDLE,
    lpcCount : LPDWORD,
    lpBuffer : LPVOID,
    lpBufferSize : LPDWORD) CULong;

external WNetEnumResourceW(
    hEnum : HANDLE,
    lpcCount : LPDWORD,
    lpBuffer : LPVOID,
    lpBufferSize : LPDWORD) CULong;

external WNetCloseEnum(
    hEnum : HANDLE) CULong;

external WNetGetResourceParentA(
    lpNetResource : LPNETRESOURCEA,
    lpBuffer : LPVOID,
    lpcbBuffer : LPDWORD) CULong;

external WNetGetResourceParentW(
    lpNetResource : LPNETRESOURCEW,
    lpBuffer : LPVOID,
    lpcbBuffer : LPDWORD) CULong;

external WNetGetResourceInformationA(
    lpNetResource : LPNETRESOURCEA,
    lpBuffer : LPVOID,
    lpcbBuffer : LPDWORD,
    lplpSystem : Pointer[LPSTR]) CULong;

external WNetGetResourceInformationW(
    lpNetResource : LPNETRESOURCEW,
    lpBuffer : LPVOID,
    lpcbBuffer : LPDWORD,
    lplpSystem : Pointer[LPWSTR]) CULong;

record Struct__UNIVERSAL_NAME_INFOA (
    lpUniversalName : LPSTR,
);

alias UNIVERSAL_NAME_INFOA = Struct__UNIVERSAL_NAME_INFOA;

alias LPUNIVERSAL_NAME_INFOA = Pointer[Struct__UNIVERSAL_NAME_INFOA];

record Struct__UNIVERSAL_NAME_INFOW (
    lpUniversalName : LPWSTR,
);

alias UNIVERSAL_NAME_INFOW = Struct__UNIVERSAL_NAME_INFOW;

alias LPUNIVERSAL_NAME_INFOW = Pointer[Struct__UNIVERSAL_NAME_INFOW];

alias UNIVERSAL_NAME_INFO = UNIVERSAL_NAME_INFOA;

alias LPUNIVERSAL_NAME_INFO = LPUNIVERSAL_NAME_INFOA;

record Struct__REMOTE_NAME_INFOA (
    lpUniversalName : LPSTR,
    lpConnectionName : LPSTR,
    lpRemainingPath : LPSTR,
);

alias REMOTE_NAME_INFOA = Struct__REMOTE_NAME_INFOA;

alias LPREMOTE_NAME_INFOA = Pointer[Struct__REMOTE_NAME_INFOA];

record Struct__REMOTE_NAME_INFOW (
    lpUniversalName : LPWSTR,
    lpConnectionName : LPWSTR,
    lpRemainingPath : LPWSTR,
);

alias REMOTE_NAME_INFOW = Struct__REMOTE_NAME_INFOW;

alias LPREMOTE_NAME_INFOW = Pointer[Struct__REMOTE_NAME_INFOW];

alias REMOTE_NAME_INFO = REMOTE_NAME_INFOA;

alias LPREMOTE_NAME_INFO = LPREMOTE_NAME_INFOA;

external WNetGetUniversalNameA(
    lpLocalPath : LPCSTR,
    dwInfoLevel : CULong,
    lpBuffer : LPVOID,
    lpBufferSize : LPDWORD) CULong;

external WNetGetUniversalNameW(
    lpLocalPath : LPCWSTR,
    dwInfoLevel : CULong,
    lpBuffer : LPVOID,
    lpBufferSize : LPDWORD) CULong;

external WNetGetUserA(
    lpName : LPCSTR,
    lpUserName : LPSTR,
    lpnLength : LPDWORD) CULong;

external WNetGetUserW(
    lpName : LPCWSTR,
    lpUserName : LPWSTR,
    lpnLength : LPDWORD) CULong;

external WNetGetProviderNameA(
    dwNetType : CULong,
    lpProviderName : LPSTR,
    lpBufferSize : LPDWORD) CULong;

external WNetGetProviderNameW(
    dwNetType : CULong,
    lpProviderName : LPWSTR,
    lpBufferSize : LPDWORD) CULong;

record Struct__NETINFOSTRUCT (
    cbStructure : CULong,
    dwProviderVersion : CULong,
    dwStatus : CULong,
    dwCharacteristics : CULong,
    dwHandle : UInt64,
    wNetType : UShort,
    dwPrinters : CULong,
    dwDrives : CULong,
);

alias NETINFOSTRUCT = Struct__NETINFOSTRUCT;

alias LPNETINFOSTRUCT = Pointer[Struct__NETINFOSTRUCT];

external WNetGetNetworkInformationA(
    lpProvider : LPCSTR,
    lpNetInfoStruct : LPNETINFOSTRUCT) CULong;

external WNetGetNetworkInformationW(
    lpProvider : LPCWSTR,
    lpNetInfoStruct : LPNETINFOSTRUCT) CULong;

alias PFNGETPROFILEPATHA = CCodePointer[(Pointer[CChar],Pointer[CChar],UInt),(UInt)];

alias PFNGETPROFILEPATHW = CCodePointer[(Pointer[UShort],Pointer[UShort],UInt),(UInt)];

alias PFNRECONCILEPROFILEA = CCodePointer[(Pointer[CChar],Pointer[CChar],CULong),(UInt)];

alias PFNRECONCILEPROFILEW = CCodePointer[(Pointer[UShort],Pointer[UShort],CULong),(UInt)];

alias PFNPROCESSPOLICIESA = CCodePointer[(Pointer[Struct_HWND__],Pointer[CChar],Pointer[CChar],Pointer[CChar],CULong),(Int)];

alias PFNPROCESSPOLICIESW = CCodePointer[(Pointer[Struct_HWND__],Pointer[UShort],Pointer[UShort],Pointer[UShort],CULong),(Int)];

external WNetGetLastErrorA(
    lpError : LPDWORD,
    lpErrorBuf : LPSTR,
    nErrorBufSize : CULong,
    lpNameBuf : LPSTR,
    nNameBufSize : CULong) CULong;

external WNetGetLastErrorW(
    lpError : LPDWORD,
    lpErrorBuf : LPWSTR,
    nErrorBufSize : CULong,
    lpNameBuf : LPWSTR,
    nNameBufSize : CULong) CULong;

record Struct__NETCONNECTINFOSTRUCT (
    cbStructure : CULong,
    dwFlags : CULong,
    dwSpeed : CULong,
    dwDelay : CULong,
    dwOptDataSize : CULong,
);

alias NETCONNECTINFOSTRUCT = Struct__NETCONNECTINFOSTRUCT;

alias LPNETCONNECTINFOSTRUCT = Pointer[Struct__NETCONNECTINFOSTRUCT];

external MultinetGetConnectionPerformanceA(
    lpNetResource : LPNETRESOURCEA,
    lpNetConnectInfoStruct : LPNETCONNECTINFOSTRUCT) CULong;

external MultinetGetConnectionPerformanceW(
    lpNetResource : LPNETRESOURCEW,
    lpNetConnectInfoStruct : LPNETCONNECTINFOSTRUCT) CULong;

record UnnamedStruct23 (
    bAppReturnCode : UShort,
    reserved : UShort,
    fBusy : UShort,
    fAck : UShort,
);

alias DDEACK = UnnamedStruct23;

record UnnamedStruct24 (
    reserved : UShort,
    fDeferUpd : UShort,
    fAckReq : UShort,
    cfFormat : Short,
);

alias DDEADVISE = UnnamedStruct24;

record UnnamedStruct25 (
    unused : UShort,
    fResponse : UShort,
    fRelease : UShort,
    reserved : UShort,
    fAckReq : UShort,
    cfFormat : Short,
    Value : Array[CUChar,1],
);

alias DDEDATA = UnnamedStruct25;

record UnnamedStruct26 (
    unused : UShort,
    fRelease : UShort,
    fReserved : UShort,
    cfFormat : Short,
    Value : Array[CUChar,1],
);

alias DDEPOKE = UnnamedStruct26;

record UnnamedStruct27 (
    unused : UShort,
    fRelease : UShort,
    fDeferUpd : UShort,
    fAckReq : UShort,
    cfFormat : Short,
);

alias DDELN = UnnamedStruct27;

record UnnamedStruct28 (
    unused : UShort,
    fAck : UShort,
    fRelease : UShort,
    fReserved : UShort,
    fAckReq : UShort,
    cfFormat : Short,
    rgb : Array[CUChar,1],
);

alias DDEUP = UnnamedStruct28;

external DdeSetQualityOfService(
    hwndClient : HWND,
    pqosNew : Pointer[SECURITY_QUALITY_OF_SERVICE],
    pqosPrev : PSECURITY_QUALITY_OF_SERVICE) Int;

external ImpersonateDdeClientWindow(
    hWndClient : HWND,
    hWndServer : HWND) Int;

external PackDDElParam(
    msg : UInt,
    uiLo : UInt64,
    uiHi : UInt64) Int64;

external UnpackDDElParam(
    msg : UInt,
    lParam : Int64,
    puiLo : PUINT_PTR,
    puiHi : PUINT_PTR) Int;

external FreeDDElParam(
    msg : UInt,
    lParam : Int64) Int;

external ReuseDDElParam(
    lParam : Int64,
    msgIn : UInt,
    msgOut : UInt,
    uiLo : UInt64,
    uiHi : UInt64) Int64;

record Struct_HCONVLIST__ (
    unused : Int,
);

alias HCONVLIST = Pointer[Struct_HCONVLIST__];

record Struct_HCONV__ (
    unused : Int,
);

alias HCONV = Pointer[Struct_HCONV__];

record Struct_HSZ__ (
    unused : Int,
);

alias HSZ = Pointer[Struct_HSZ__];

record Struct_HDDEDATA__ (
    unused : Int,
);

alias HDDEDATA = Pointer[Struct_HDDEDATA__];

record Struct_tagHSZPAIR (
    hszSvc : HSZ,
    hszTopic : HSZ,
);

alias HSZPAIR = Struct_tagHSZPAIR;

alias PHSZPAIR = Pointer[Struct_tagHSZPAIR];

record Struct_tagCONVCONTEXT (
    cb : UInt,
    wFlags : UInt,
    wCountryID : UInt,
    iCodePage : Int,
    dwLangID : CULong,
    dwSecurity : CULong,
    qos : SECURITY_QUALITY_OF_SERVICE,
);

alias CONVCONTEXT = Struct_tagCONVCONTEXT;

alias PCONVCONTEXT = Pointer[Struct_tagCONVCONTEXT];

record Struct_tagCONVINFO (
    cb : CULong,
    hUser : UInt64,
    hConvPartner : HCONV,
    hszSvcPartner : HSZ,
    hszServiceReq : HSZ,
    hszTopic : HSZ,
    hszItem : HSZ,
    wFmt : UInt,
    wType : UInt,
    wStatus : UInt,
    wConvst : UInt,
    wLastError : UInt,
    hConvList : HCONVLIST,
    ConvCtxt : CONVCONTEXT,
    hwnd : HWND,
    hwndPartner : HWND,
);

alias CONVINFO = Struct_tagCONVINFO;

alias PCONVINFO = Pointer[Struct_tagCONVINFO];

alias PFNCALLBACK = CCodePointer[(UInt,UInt,Pointer[Struct_HCONV__],Pointer[Struct_HSZ__],Pointer[Struct_HSZ__],Pointer[Struct_HDDEDATA__],UInt64,UInt64),(Pointer[Struct_HDDEDATA__])];

external DdeInitializeA(
    pidInst : LPDWORD,
    pfnCallback : PFNCALLBACK,
    afCmd : CULong,
    ulRes : CULong) UInt;

external DdeInitializeW(
    pidInst : LPDWORD,
    pfnCallback : PFNCALLBACK,
    afCmd : CULong,
    ulRes : CULong) UInt;

external DdeUninitialize(
    idInst : CULong) Int;

external DdeConnectList(
    idInst : CULong,
    hszService : HSZ,
    hszTopic : HSZ,
    hConvList : HCONVLIST,
    pCC : PCONVCONTEXT) HCONVLIST;

external DdeQueryNextServer(
    hConvList : HCONVLIST,
    hConvPrev : HCONV) HCONV;

external DdeDisconnectList(
    hConvList : HCONVLIST) Int;

external DdeConnect(
    idInst : CULong,
    hszService : HSZ,
    hszTopic : HSZ,
    pCC : PCONVCONTEXT) HCONV;

external DdeDisconnect(
    hConv : HCONV) Int;

external DdeReconnect(
    hConv : HCONV) HCONV;

external DdeQueryConvInfo(
    hConv : HCONV,
    idTransaction : CULong,
    pConvInfo : PCONVINFO) UInt;

external DdeSetUserHandle(
    hConv : HCONV,
    id : CULong,
    hUser : UInt64) Int;

external DdeAbandonTransaction(
    idInst : CULong,
    hConv : HCONV,
    idTransaction : CULong) Int;

external DdePostAdvise(
    idInst : CULong,
    hszTopic : HSZ,
    hszItem : HSZ) Int;

external DdeEnableCallback(
    idInst : CULong,
    hConv : HCONV,
    wCmd : UInt) Int;

external DdeImpersonateClient(
    hConv : HCONV) Int;

external DdeNameService(
    idInst : CULong,
    hsz1 : HSZ,
    hsz2 : HSZ,
    afCmd : UInt) HDDEDATA;

external DdeClientTransaction(
    pData : LPBYTE,
    cbData : CULong,
    hConv : HCONV,
    hszItem : HSZ,
    wFmt : UInt,
    wType : UInt,
    dwTimeout : CULong,
    pdwResult : LPDWORD) HDDEDATA;

external DdeCreateDataHandle(
    idInst : CULong,
    pSrc : LPBYTE,
    cb : CULong,
    cbOff : CULong,
    hszItem : HSZ,
    wFmt : UInt,
    afCmd : UInt) HDDEDATA;

external DdeAddData(
    hData : HDDEDATA,
    pSrc : LPBYTE,
    cb : CULong,
    cbOff : CULong) HDDEDATA;

external DdeGetData(
    hData : HDDEDATA,
    pDst : LPBYTE,
    cbMax : CULong,
    cbOff : CULong) CULong;

external DdeAccessData(
    hData : HDDEDATA,
    pcbDataSize : LPDWORD) LPBYTE;

external DdeUnaccessData(
    hData : HDDEDATA) Int;

external DdeFreeDataHandle(
    hData : HDDEDATA) Int;

external DdeGetLastError(
    idInst : CULong) UInt;

external DdeCreateStringHandleA(
    idInst : CULong,
    psz : LPCSTR,
    iCodePage : Int) HSZ;

external DdeCreateStringHandleW(
    idInst : CULong,
    psz : LPCWSTR,
    iCodePage : Int) HSZ;

external DdeQueryStringA(
    idInst : CULong,
    hsz : HSZ,
    psz : LPSTR,
    cchMax : CULong,
    iCodePage : Int) CULong;

external DdeQueryStringW(
    idInst : CULong,
    hsz : HSZ,
    psz : LPWSTR,
    cchMax : CULong,
    iCodePage : Int) CULong;

external DdeFreeStringHandle(
    idInst : CULong,
    hsz : HSZ) Int;

external DdeKeepStringHandle(
    idInst : CULong,
    hsz : HSZ) Int;

external DdeCmpStringHandles(
    hsz1 : HSZ,
    hsz2 : HSZ) Int;

record Struct_tagDDEML_MSG_HOOK_DATA (
    uiLo : UInt64,
    uiHi : UInt64,
    cbData : CULong,
    Data : Array[CULong,8],
);

alias DDEML_MSG_HOOK_DATA = Struct_tagDDEML_MSG_HOOK_DATA;

alias PDDEML_MSG_HOOK_DATA = Pointer[Struct_tagDDEML_MSG_HOOK_DATA];

record Struct_tagMONMSGSTRUCT (
    cb : UInt,
    hwndTo : HWND,
    dwTime : CULong,
    hTask : HANDLE,
    wMsg : UInt,
    wParam : UInt64,
    lParam : Int64,
    dmhd : DDEML_MSG_HOOK_DATA,
);

alias MONMSGSTRUCT = Struct_tagMONMSGSTRUCT;

alias PMONMSGSTRUCT = Pointer[Struct_tagMONMSGSTRUCT];

record Struct_tagMONCBSTRUCT (
    cb : UInt,
    dwTime : CULong,
    hTask : HANDLE,
    dwRet : CULong,
    wType : UInt,
    wFmt : UInt,
    hConv : HCONV,
    hsz1 : HSZ,
    hsz2 : HSZ,
    hData : HDDEDATA,
    dwData1 : UInt64,
    dwData2 : UInt64,
    cc : CONVCONTEXT,
    cbData : CULong,
    Data : Array[CULong,8],
);

alias MONCBSTRUCT = Struct_tagMONCBSTRUCT;

alias PMONCBSTRUCT = Pointer[Struct_tagMONCBSTRUCT];

record Struct_tagMONHSZSTRUCTA (
    cb : UInt,
    fsAction : Int,
    dwTime : CULong,
    hsz : HSZ,
    hTask : HANDLE,
    str : Array[CChar,1],
);

alias MONHSZSTRUCTA = Struct_tagMONHSZSTRUCTA;

alias PMONHSZSTRUCTA = Pointer[Struct_tagMONHSZSTRUCTA];

record Struct_tagMONHSZSTRUCTW (
    cb : UInt,
    fsAction : Int,
    dwTime : CULong,
    hsz : HSZ,
    hTask : HANDLE,
    str : Array[UShort,1],
);

alias MONHSZSTRUCTW = Struct_tagMONHSZSTRUCTW;

alias PMONHSZSTRUCTW = Pointer[Struct_tagMONHSZSTRUCTW];

alias MONHSZSTRUCT = MONHSZSTRUCTA;

alias PMONHSZSTRUCT = PMONHSZSTRUCTA;

record Struct_tagMONERRSTRUCT (
    cb : UInt,
    wLastError : UInt,
    dwTime : CULong,
    hTask : HANDLE,
);

alias MONERRSTRUCT = Struct_tagMONERRSTRUCT;

alias PMONERRSTRUCT = Pointer[Struct_tagMONERRSTRUCT];

record Struct_tagMONLINKSTRUCT (
    cb : UInt,
    dwTime : CULong,
    hTask : HANDLE,
    fEstablished : Int,
    fNoData : Int,
    hszSvc : HSZ,
    hszTopic : HSZ,
    hszItem : HSZ,
    wFmt : UInt,
    fServer : Int,
    hConvServer : HCONV,
    hConvClient : HCONV,
);

alias MONLINKSTRUCT = Struct_tagMONLINKSTRUCT;

alias PMONLINKSTRUCT = Pointer[Struct_tagMONLINKSTRUCT];

record Struct_tagMONCONVSTRUCT (
    cb : UInt,
    fConnect : Int,
    dwTime : CULong,
    hTask : HANDLE,
    hszSvc : HSZ,
    hszTopic : HSZ,
    hConvClient : HCONV,
    hConvServer : HCONV,
);

alias MONCONVSTRUCT = Struct_tagMONCONVSTRUCT;

alias PMONCONVSTRUCT = Pointer[Struct_tagMONCONVSTRUCT];

record Struct_tagCRGB (
    bRed : CUChar,
    bGreen : CUChar,
    bBlue : CUChar,
    bExtra : CUChar,
);

alias CRGB = Struct_tagCRGB;

external LZStart() Int;

external LZDone();

external CopyLZFile(
    argument0 : Int,
    argument1 : Int) CLong;

external LZCopy(
    argument0 : Int,
    argument1 : Int) CLong;

external LZInit(
    argument0 : Int) Int;

external GetExpandedNameA(
    argument0 : LPSTR,
    argument1 : LPSTR) Int;

external GetExpandedNameW(
    argument0 : LPWSTR,
    argument1 : LPWSTR) Int;

external LZOpenFileA(
    argument0 : LPSTR,
    argument1 : LPOFSTRUCT,
    argument2 : UShort) Int;

external LZOpenFileW(
    argument0 : LPWSTR,
    argument1 : LPOFSTRUCT,
    argument2 : UShort) Int;

external LZSeek(
    argument0 : Int,
    argument1 : CLong,
    argument2 : Int) CLong;

external LZRead(
    argument0 : Int,
    argument1 : LPSTR,
    argument2 : Int) Int;

external LZClose(
    argument0 : Int);

alias MMVERSION = UInt;

alias MMRESULT = UInt;

alias LPUINT = Pointer[UInt];

record Struct_mmtime_tag (
    wType : UInt,
    u : AUnionType,
);

alias MMTIME = Struct_mmtime_tag;

alias PMMTIME = Pointer[Struct_mmtime_tag];

alias NPMMTIME = Pointer[Struct_mmtime_tag];

alias LPMMTIME = Pointer[Struct_mmtime_tag];

record Struct_HDRVR__ (
    unused : Int,
);

alias HDRVR = Pointer[Struct_HDRVR__];

record Struct_DRVCONFIGINFOEX (
    dwDCISize : CULong,
    lpszDCISectionName : LPCWSTR,
    lpszDCIAliasName : LPCWSTR,
    dnDevNode : CULong,
);

alias DRVCONFIGINFOEX = Struct_DRVCONFIGINFOEX;

alias PDRVCONFIGINFOEX = Pointer[Struct_DRVCONFIGINFOEX];

alias NPDRVCONFIGINFOEX = Pointer[Struct_DRVCONFIGINFOEX];

alias LPDRVCONFIGINFOEX = Pointer[Struct_DRVCONFIGINFOEX];

record Struct_tagDRVCONFIGINFO (
    dwDCISize : CULong,
    lpszDCISectionName : LPCWSTR,
    lpszDCIAliasName : LPCWSTR,
);

alias DRVCONFIGINFO = Struct_tagDRVCONFIGINFO;

alias PDRVCONFIGINFO = Pointer[Struct_tagDRVCONFIGINFO];

alias NPDRVCONFIGINFO = Pointer[Struct_tagDRVCONFIGINFO];

alias LPDRVCONFIGINFO = Pointer[Struct_tagDRVCONFIGINFO];

alias DRIVERPROC = CCodePointer[(UInt64,Pointer[Struct_HDRVR__],UInt,Int64,Int64),(Int64)];

external CloseDriver(
    hDriver : HDRVR,
    lParam1 : Int64,
    lParam2 : Int64) Int64;

external OpenDriver(
    szDriverName : LPCWSTR,
    szSectionName : LPCWSTR,
    lParam2 : Int64) HDRVR;

external SendDriverMessage(
    hDriver : HDRVR,
    message : UInt,
    lParam1 : Int64,
    lParam2 : Int64) Int64;

external DrvGetModuleHandle(
    hDriver : HDRVR) HMODULE;

external GetDriverModuleHandle(
    hDriver : HDRVR) HMODULE;

external DefDriverProc(
    dwDriverIdentifier : UInt64,
    hdrvr : HDRVR,
    uMsg : UInt,
    lParam1 : Int64,
    lParam2 : Int64) Int64;

alias LPDRVCALLBACK = CCodePointer[(Pointer[Struct_HDRVR__],UInt,UInt64,UInt64,UInt64),()];

alias PDRVCALLBACK = CCodePointer[(Pointer[Struct_HDRVR__],UInt,UInt64,UInt64,UInt64),()];

external sndPlaySoundA(
    pszSound : LPCSTR,
    fuSound : UInt) Int;

external sndPlaySoundW(
    pszSound : LPCWSTR,
    fuSound : UInt) Int;

external PlaySoundA(
    pszSound : LPCSTR,
    hmod : HMODULE,
    fdwSound : CULong) Int;

external PlaySoundW(
    pszSound : LPCWSTR,
    hmod : HMODULE,
    fdwSound : CULong) Int;

record Struct_HWAVE__ (
    unused : Int,
);

alias HWAVE = Pointer[Struct_HWAVE__];

record Struct_HWAVEIN__ (
    unused : Int,
);

alias HWAVEIN = Pointer[Struct_HWAVEIN__];

record Struct_HWAVEOUT__ (
    unused : Int,
);

alias HWAVEOUT = Pointer[Struct_HWAVEOUT__];

alias LPHWAVEIN = Pointer[HWAVEIN];

alias LPHWAVEOUT = Pointer[HWAVEOUT];

alias LPWAVECALLBACK = CCodePointer[(Pointer[Struct_HDRVR__],UInt,UInt64,UInt64,UInt64),()];

record Struct_wavehdr_tag (
    lpData : LPSTR,
    dwBufferLength : CULong,
    dwBytesRecorded : CULong,
    dwUser : UInt64,
    dwFlags : CULong,
    dwLoops : CULong,
    lpNext : Pointer[Struct_wavehdr_tag],
    reserved : UInt64,
);

alias WAVEHDR = Struct_wavehdr_tag;

alias PWAVEHDR = Pointer[Struct_wavehdr_tag];

alias NPWAVEHDR = Pointer[Struct_wavehdr_tag];

alias LPWAVEHDR = Pointer[Struct_wavehdr_tag];

record Struct_tagWAVEOUTCAPSA (
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[CChar,32],
    dwFormats : CULong,
    wChannels : UShort,
    wReserved1 : UShort,
    dwSupport : CULong,
);

alias WAVEOUTCAPSA = Struct_tagWAVEOUTCAPSA;

alias PWAVEOUTCAPSA = Pointer[Struct_tagWAVEOUTCAPSA];

alias NPWAVEOUTCAPSA = Pointer[Struct_tagWAVEOUTCAPSA];

alias LPWAVEOUTCAPSA = Pointer[Struct_tagWAVEOUTCAPSA];

record Struct_tagWAVEOUTCAPSW (
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[UShort,32],
    dwFormats : CULong,
    wChannels : UShort,
    wReserved1 : UShort,
    dwSupport : CULong,
);

alias WAVEOUTCAPSW = Struct_tagWAVEOUTCAPSW;

alias PWAVEOUTCAPSW = Pointer[Struct_tagWAVEOUTCAPSW];

alias NPWAVEOUTCAPSW = Pointer[Struct_tagWAVEOUTCAPSW];

alias LPWAVEOUTCAPSW = Pointer[Struct_tagWAVEOUTCAPSW];

alias WAVEOUTCAPS = WAVEOUTCAPSA;

alias PWAVEOUTCAPS = PWAVEOUTCAPSA;

alias NPWAVEOUTCAPS = NPWAVEOUTCAPSA;

alias LPWAVEOUTCAPS = LPWAVEOUTCAPSA;

record Struct_tagWAVEOUTCAPS2A (
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[CChar,32],
    dwFormats : CULong,
    wChannels : UShort,
    wReserved1 : UShort,
    dwSupport : CULong,
    ManufacturerGuid : GUID,
    ProductGuid : GUID,
    NameGuid : GUID,
);

alias WAVEOUTCAPS2A = Struct_tagWAVEOUTCAPS2A;

alias PWAVEOUTCAPS2A = Pointer[Struct_tagWAVEOUTCAPS2A];

alias NPWAVEOUTCAPS2A = Pointer[Struct_tagWAVEOUTCAPS2A];

alias LPWAVEOUTCAPS2A = Pointer[Struct_tagWAVEOUTCAPS2A];

record Struct_tagWAVEOUTCAPS2W (
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[UShort,32],
    dwFormats : CULong,
    wChannels : UShort,
    wReserved1 : UShort,
    dwSupport : CULong,
    ManufacturerGuid : GUID,
    ProductGuid : GUID,
    NameGuid : GUID,
);

alias WAVEOUTCAPS2W = Struct_tagWAVEOUTCAPS2W;

alias PWAVEOUTCAPS2W = Pointer[Struct_tagWAVEOUTCAPS2W];

alias NPWAVEOUTCAPS2W = Pointer[Struct_tagWAVEOUTCAPS2W];

alias LPWAVEOUTCAPS2W = Pointer[Struct_tagWAVEOUTCAPS2W];

alias WAVEOUTCAPS2 = WAVEOUTCAPS2A;

alias PWAVEOUTCAPS2 = PWAVEOUTCAPS2A;

alias NPWAVEOUTCAPS2 = NPWAVEOUTCAPS2A;

alias LPWAVEOUTCAPS2 = LPWAVEOUTCAPS2A;

record Struct_tagWAVEINCAPSA (
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[CChar,32],
    dwFormats : CULong,
    wChannels : UShort,
    wReserved1 : UShort,
);

alias WAVEINCAPSA = Struct_tagWAVEINCAPSA;

alias PWAVEINCAPSA = Pointer[Struct_tagWAVEINCAPSA];

alias NPWAVEINCAPSA = Pointer[Struct_tagWAVEINCAPSA];

alias LPWAVEINCAPSA = Pointer[Struct_tagWAVEINCAPSA];

record Struct_tagWAVEINCAPSW (
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[UShort,32],
    dwFormats : CULong,
    wChannels : UShort,
    wReserved1 : UShort,
);

alias WAVEINCAPSW = Struct_tagWAVEINCAPSW;

alias PWAVEINCAPSW = Pointer[Struct_tagWAVEINCAPSW];

alias NPWAVEINCAPSW = Pointer[Struct_tagWAVEINCAPSW];

alias LPWAVEINCAPSW = Pointer[Struct_tagWAVEINCAPSW];

alias WAVEINCAPS = WAVEINCAPSA;

alias PWAVEINCAPS = PWAVEINCAPSA;

alias NPWAVEINCAPS = NPWAVEINCAPSA;

alias LPWAVEINCAPS = LPWAVEINCAPSA;

record Struct_tagWAVEINCAPS2A (
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[CChar,32],
    dwFormats : CULong,
    wChannels : UShort,
    wReserved1 : UShort,
    ManufacturerGuid : GUID,
    ProductGuid : GUID,
    NameGuid : GUID,
);

alias WAVEINCAPS2A = Struct_tagWAVEINCAPS2A;

alias PWAVEINCAPS2A = Pointer[Struct_tagWAVEINCAPS2A];

alias NPWAVEINCAPS2A = Pointer[Struct_tagWAVEINCAPS2A];

alias LPWAVEINCAPS2A = Pointer[Struct_tagWAVEINCAPS2A];

record Struct_tagWAVEINCAPS2W (
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[UShort,32],
    dwFormats : CULong,
    wChannels : UShort,
    wReserved1 : UShort,
    ManufacturerGuid : GUID,
    ProductGuid : GUID,
    NameGuid : GUID,
);

alias WAVEINCAPS2W = Struct_tagWAVEINCAPS2W;

alias PWAVEINCAPS2W = Pointer[Struct_tagWAVEINCAPS2W];

alias NPWAVEINCAPS2W = Pointer[Struct_tagWAVEINCAPS2W];

alias LPWAVEINCAPS2W = Pointer[Struct_tagWAVEINCAPS2W];

alias WAVEINCAPS2 = WAVEINCAPS2A;

alias PWAVEINCAPS2 = PWAVEINCAPS2A;

alias NPWAVEINCAPS2 = NPWAVEINCAPS2A;

alias LPWAVEINCAPS2 = LPWAVEINCAPS2A;

record Struct_waveformat_tag (
    wFormatTag : UShort,
    nChannels : UShort,
    nSamplesPerSec : CULong,
    nAvgBytesPerSec : CULong,
    nBlockAlign : UShort,
);

alias WAVEFORMAT = Struct_waveformat_tag;

alias PWAVEFORMAT = Pointer[Struct_waveformat_tag];

alias NPWAVEFORMAT = Pointer[Struct_waveformat_tag];

alias LPWAVEFORMAT = Pointer[Struct_waveformat_tag];

record Struct_pcmwaveformat_tag (
    wf : WAVEFORMAT,
    wBitsPerSample : UShort,
);

alias PCMWAVEFORMAT = Struct_pcmwaveformat_tag;

alias PPCMWAVEFORMAT = Pointer[Struct_pcmwaveformat_tag];

alias NPPCMWAVEFORMAT = Pointer[Struct_pcmwaveformat_tag];

alias LPPCMWAVEFORMAT = Pointer[Struct_pcmwaveformat_tag];

record Struct_tWAVEFORMATEX (
    wFormatTag : UShort,
    nChannels : UShort,
    nSamplesPerSec : CULong,
    nAvgBytesPerSec : CULong,
    nBlockAlign : UShort,
    wBitsPerSample : UShort,
    cbSize : UShort,
);

alias WAVEFORMATEX = Struct_tWAVEFORMATEX;

alias PWAVEFORMATEX = Pointer[Struct_tWAVEFORMATEX];

alias NPWAVEFORMATEX = Pointer[Struct_tWAVEFORMATEX];

alias LPWAVEFORMATEX = Pointer[Struct_tWAVEFORMATEX];

alias LPCWAVEFORMATEX = Pointer[WAVEFORMATEX];

external waveOutGetNumDevs() UInt;

external waveOutGetDevCapsA(
    uDeviceID : UInt64,
    pwoc : LPWAVEOUTCAPSA,
    cbwoc : UInt) UInt;

external waveOutGetDevCapsW(
    uDeviceID : UInt64,
    pwoc : LPWAVEOUTCAPSW,
    cbwoc : UInt) UInt;

external waveOutGetVolume(
    hwo : HWAVEOUT,
    pdwVolume : LPDWORD) UInt;

external waveOutSetVolume(
    hwo : HWAVEOUT,
    dwVolume : CULong) UInt;

external waveOutGetErrorTextA(
    mmrError : UInt,
    pszText : LPSTR,
    cchText : UInt) UInt;

external waveOutGetErrorTextW(
    mmrError : UInt,
    pszText : LPWSTR,
    cchText : UInt) UInt;

external waveOutOpen(
    phwo : LPHWAVEOUT,
    uDeviceID : UInt,
    pwfx : LPCWAVEFORMATEX,
    dwCallback : UInt64,
    dwInstance : UInt64,
    fdwOpen : CULong) UInt;

external waveOutClose(
    hwo : HWAVEOUT) UInt;

external waveOutPrepareHeader(
    hwo : HWAVEOUT,
    pwh : LPWAVEHDR,
    cbwh : UInt) UInt;

external waveOutUnprepareHeader(
    hwo : HWAVEOUT,
    pwh : LPWAVEHDR,
    cbwh : UInt) UInt;

external waveOutWrite(
    hwo : HWAVEOUT,
    pwh : LPWAVEHDR,
    cbwh : UInt) UInt;

external waveOutPause(
    hwo : HWAVEOUT) UInt;

external waveOutRestart(
    hwo : HWAVEOUT) UInt;

external waveOutReset(
    hwo : HWAVEOUT) UInt;

external waveOutBreakLoop(
    hwo : HWAVEOUT) UInt;

external waveOutGetPosition(
    hwo : HWAVEOUT,
    pmmt : LPMMTIME,
    cbmmt : UInt) UInt;

external waveOutGetPitch(
    hwo : HWAVEOUT,
    pdwPitch : LPDWORD) UInt;

external waveOutSetPitch(
    hwo : HWAVEOUT,
    dwPitch : CULong) UInt;

external waveOutGetPlaybackRate(
    hwo : HWAVEOUT,
    pdwRate : LPDWORD) UInt;

external waveOutSetPlaybackRate(
    hwo : HWAVEOUT,
    dwRate : CULong) UInt;

external waveOutGetID(
    hwo : HWAVEOUT,
    puDeviceID : LPUINT) UInt;

external waveOutMessage(
    hwo : HWAVEOUT,
    uMsg : UInt,
    dw1 : UInt64,
    dw2 : UInt64) UInt;

external waveInGetNumDevs() UInt;

external waveInGetDevCapsA(
    uDeviceID : UInt64,
    pwic : LPWAVEINCAPSA,
    cbwic : UInt) UInt;

external waveInGetDevCapsW(
    uDeviceID : UInt64,
    pwic : LPWAVEINCAPSW,
    cbwic : UInt) UInt;

external waveInGetErrorTextA(
    mmrError : UInt,
    pszText : LPSTR,
    cchText : UInt) UInt;

external waveInGetErrorTextW(
    mmrError : UInt,
    pszText : LPWSTR,
    cchText : UInt) UInt;

external waveInOpen(
    phwi : LPHWAVEIN,
    uDeviceID : UInt,
    pwfx : LPCWAVEFORMATEX,
    dwCallback : UInt64,
    dwInstance : UInt64,
    fdwOpen : CULong) UInt;

external waveInClose(
    hwi : HWAVEIN) UInt;

external waveInPrepareHeader(
    hwi : HWAVEIN,
    pwh : LPWAVEHDR,
    cbwh : UInt) UInt;

external waveInUnprepareHeader(
    hwi : HWAVEIN,
    pwh : LPWAVEHDR,
    cbwh : UInt) UInt;

external waveInAddBuffer(
    hwi : HWAVEIN,
    pwh : LPWAVEHDR,
    cbwh : UInt) UInt;

external waveInStart(
    hwi : HWAVEIN) UInt;

external waveInStop(
    hwi : HWAVEIN) UInt;

external waveInReset(
    hwi : HWAVEIN) UInt;

external waveInGetPosition(
    hwi : HWAVEIN,
    pmmt : LPMMTIME,
    cbmmt : UInt) UInt;

external waveInGetID(
    hwi : HWAVEIN,
    puDeviceID : LPUINT) UInt;

external waveInMessage(
    hwi : HWAVEIN,
    uMsg : UInt,
    dw1 : UInt64,
    dw2 : UInt64) UInt;

record Struct_HMIDI__ (
    unused : Int,
);

alias HMIDI = Pointer[Struct_HMIDI__];

record Struct_HMIDIIN__ (
    unused : Int,
);

alias HMIDIIN = Pointer[Struct_HMIDIIN__];

record Struct_HMIDIOUT__ (
    unused : Int,
);

alias HMIDIOUT = Pointer[Struct_HMIDIOUT__];

record Struct_HMIDISTRM__ (
    unused : Int,
);

alias HMIDISTRM = Pointer[Struct_HMIDISTRM__];

alias LPHMIDI = Pointer[HMIDI];

alias LPHMIDIIN = Pointer[HMIDIIN];

alias LPHMIDIOUT = Pointer[HMIDIOUT];

alias LPHMIDISTRM = Pointer[HMIDISTRM];

alias LPMIDICALLBACK = CCodePointer[(Pointer[Struct_HDRVR__],UInt,UInt64,UInt64,UInt64),()];

alias PATCHARRAY = Array[UShort,128];

alias LPPATCHARRAY = Pointer[UShort];

alias KEYARRAY = Array[UShort,128];

alias LPKEYARRAY = Pointer[UShort];

record Struct_tagMIDIOUTCAPSA (
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[CChar,32],
    wTechnology : UShort,
    wVoices : UShort,
    wNotes : UShort,
    wChannelMask : UShort,
    dwSupport : CULong,
);

alias MIDIOUTCAPSA = Struct_tagMIDIOUTCAPSA;

alias PMIDIOUTCAPSA = Pointer[Struct_tagMIDIOUTCAPSA];

alias NPMIDIOUTCAPSA = Pointer[Struct_tagMIDIOUTCAPSA];

alias LPMIDIOUTCAPSA = Pointer[Struct_tagMIDIOUTCAPSA];

record Struct_tagMIDIOUTCAPSW (
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[UShort,32],
    wTechnology : UShort,
    wVoices : UShort,
    wNotes : UShort,
    wChannelMask : UShort,
    dwSupport : CULong,
);

alias MIDIOUTCAPSW = Struct_tagMIDIOUTCAPSW;

alias PMIDIOUTCAPSW = Pointer[Struct_tagMIDIOUTCAPSW];

alias NPMIDIOUTCAPSW = Pointer[Struct_tagMIDIOUTCAPSW];

alias LPMIDIOUTCAPSW = Pointer[Struct_tagMIDIOUTCAPSW];

alias MIDIOUTCAPS = MIDIOUTCAPSA;

alias PMIDIOUTCAPS = PMIDIOUTCAPSA;

alias NPMIDIOUTCAPS = NPMIDIOUTCAPSA;

alias LPMIDIOUTCAPS = LPMIDIOUTCAPSA;

record Struct_tagMIDIOUTCAPS2A (
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[CChar,32],
    wTechnology : UShort,
    wVoices : UShort,
    wNotes : UShort,
    wChannelMask : UShort,
    dwSupport : CULong,
    ManufacturerGuid : GUID,
    ProductGuid : GUID,
    NameGuid : GUID,
);

alias MIDIOUTCAPS2A = Struct_tagMIDIOUTCAPS2A;

alias PMIDIOUTCAPS2A = Pointer[Struct_tagMIDIOUTCAPS2A];

alias NPMIDIOUTCAPS2A = Pointer[Struct_tagMIDIOUTCAPS2A];

alias LPMIDIOUTCAPS2A = Pointer[Struct_tagMIDIOUTCAPS2A];

record Struct_tagMIDIOUTCAPS2W (
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[UShort,32],
    wTechnology : UShort,
    wVoices : UShort,
    wNotes : UShort,
    wChannelMask : UShort,
    dwSupport : CULong,
    ManufacturerGuid : GUID,
    ProductGuid : GUID,
    NameGuid : GUID,
);

alias MIDIOUTCAPS2W = Struct_tagMIDIOUTCAPS2W;

alias PMIDIOUTCAPS2W = Pointer[Struct_tagMIDIOUTCAPS2W];

alias NPMIDIOUTCAPS2W = Pointer[Struct_tagMIDIOUTCAPS2W];

alias LPMIDIOUTCAPS2W = Pointer[Struct_tagMIDIOUTCAPS2W];

alias MIDIOUTCAPS2 = MIDIOUTCAPS2A;

alias PMIDIOUTCAPS2 = PMIDIOUTCAPS2A;

alias NPMIDIOUTCAPS2 = NPMIDIOUTCAPS2A;

alias LPMIDIOUTCAPS2 = LPMIDIOUTCAPS2A;

record Struct_tagMIDIINCAPSA (
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[CChar,32],
    dwSupport : CULong,
);

alias MIDIINCAPSA = Struct_tagMIDIINCAPSA;

alias PMIDIINCAPSA = Pointer[Struct_tagMIDIINCAPSA];

alias NPMIDIINCAPSA = Pointer[Struct_tagMIDIINCAPSA];

alias LPMIDIINCAPSA = Pointer[Struct_tagMIDIINCAPSA];

record Struct_tagMIDIINCAPSW (
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[UShort,32],
    dwSupport : CULong,
);

alias MIDIINCAPSW = Struct_tagMIDIINCAPSW;

alias PMIDIINCAPSW = Pointer[Struct_tagMIDIINCAPSW];

alias NPMIDIINCAPSW = Pointer[Struct_tagMIDIINCAPSW];

alias LPMIDIINCAPSW = Pointer[Struct_tagMIDIINCAPSW];

alias MIDIINCAPS = MIDIINCAPSA;

alias PMIDIINCAPS = PMIDIINCAPSA;

alias NPMIDIINCAPS = NPMIDIINCAPSA;

alias LPMIDIINCAPS = LPMIDIINCAPSA;

record Struct_tagMIDIINCAPS2A (
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[CChar,32],
    dwSupport : CULong,
    ManufacturerGuid : GUID,
    ProductGuid : GUID,
    NameGuid : GUID,
);

alias MIDIINCAPS2A = Struct_tagMIDIINCAPS2A;

alias PMIDIINCAPS2A = Pointer[Struct_tagMIDIINCAPS2A];

alias NPMIDIINCAPS2A = Pointer[Struct_tagMIDIINCAPS2A];

alias LPMIDIINCAPS2A = Pointer[Struct_tagMIDIINCAPS2A];

record Struct_tagMIDIINCAPS2W (
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[UShort,32],
    dwSupport : CULong,
    ManufacturerGuid : GUID,
    ProductGuid : GUID,
    NameGuid : GUID,
);

alias MIDIINCAPS2W = Struct_tagMIDIINCAPS2W;

alias PMIDIINCAPS2W = Pointer[Struct_tagMIDIINCAPS2W];

alias NPMIDIINCAPS2W = Pointer[Struct_tagMIDIINCAPS2W];

alias LPMIDIINCAPS2W = Pointer[Struct_tagMIDIINCAPS2W];

alias MIDIINCAPS2 = MIDIINCAPS2A;

alias PMIDIINCAPS2 = PMIDIINCAPS2A;

alias NPMIDIINCAPS2 = NPMIDIINCAPS2A;

alias LPMIDIINCAPS2 = LPMIDIINCAPS2A;

record Struct_midihdr_tag (
    lpData : LPSTR,
    dwBufferLength : CULong,
    dwBytesRecorded : CULong,
    dwUser : UInt64,
    dwFlags : CULong,
    lpNext : Pointer[Struct_midihdr_tag],
    reserved : UInt64,
    dwOffset : CULong,
    dwReserved : Array[UInt64,8],
);

alias MIDIHDR = Struct_midihdr_tag;

alias PMIDIHDR = Pointer[Struct_midihdr_tag];

alias NPMIDIHDR = Pointer[Struct_midihdr_tag];

alias LPMIDIHDR = Pointer[Struct_midihdr_tag];

record Struct_midievent_tag (
    dwDeltaTime : CULong,
    dwStreamID : CULong,
    dwEvent : CULong,
    dwParms : Array[CULong,1],
);

alias MIDIEVENT = Struct_midievent_tag;

record Struct_midistrmbuffver_tag (
    dwVersion : CULong,
    dwMid : CULong,
    dwOEMVersion : CULong,
);

alias MIDISTRMBUFFVER = Struct_midistrmbuffver_tag;

record Struct_midiproptimediv_tag (
    cbStruct : CULong,
    dwTimeDiv : CULong,
);

alias MIDIPROPTIMEDIV = Struct_midiproptimediv_tag;

alias LPMIDIPROPTIMEDIV = Pointer[Struct_midiproptimediv_tag];

record Struct_midiproptempo_tag (
    cbStruct : CULong,
    dwTempo : CULong,
);

alias MIDIPROPTEMPO = Struct_midiproptempo_tag;

alias LPMIDIPROPTEMPO = Pointer[Struct_midiproptempo_tag];

external midiOutGetNumDevs() UInt;

external midiStreamOpen(
    phms : LPHMIDISTRM,
    puDeviceID : LPUINT,
    cMidi : CULong,
    dwCallback : UInt64,
    dwInstance : UInt64,
    fdwOpen : CULong) UInt;

external midiStreamClose(
    hms : HMIDISTRM) UInt;

external midiStreamProperty(
    hms : HMIDISTRM,
    lppropdata : LPBYTE,
    dwProperty : CULong) UInt;

external midiStreamPosition(
    hms : HMIDISTRM,
    lpmmt : LPMMTIME,
    cbmmt : UInt) UInt;

external midiStreamOut(
    hms : HMIDISTRM,
    pmh : LPMIDIHDR,
    cbmh : UInt) UInt;

external midiStreamPause(
    hms : HMIDISTRM) UInt;

external midiStreamRestart(
    hms : HMIDISTRM) UInt;

external midiStreamStop(
    hms : HMIDISTRM) UInt;

external midiConnect(
    hmi : HMIDI,
    hmo : HMIDIOUT,
    pReserved : LPVOID) UInt;

external midiDisconnect(
    hmi : HMIDI,
    hmo : HMIDIOUT,
    pReserved : LPVOID) UInt;

external midiOutGetDevCapsA(
    uDeviceID : UInt64,
    pmoc : LPMIDIOUTCAPSA,
    cbmoc : UInt) UInt;

external midiOutGetDevCapsW(
    uDeviceID : UInt64,
    pmoc : LPMIDIOUTCAPSW,
    cbmoc : UInt) UInt;

external midiOutGetVolume(
    hmo : HMIDIOUT,
    pdwVolume : LPDWORD) UInt;

external midiOutSetVolume(
    hmo : HMIDIOUT,
    dwVolume : CULong) UInt;

external midiOutGetErrorTextA(
    mmrError : UInt,
    pszText : LPSTR,
    cchText : UInt) UInt;

external midiOutGetErrorTextW(
    mmrError : UInt,
    pszText : LPWSTR,
    cchText : UInt) UInt;

external midiOutOpen(
    phmo : LPHMIDIOUT,
    uDeviceID : UInt,
    dwCallback : UInt64,
    dwInstance : UInt64,
    fdwOpen : CULong) UInt;

external midiOutClose(
    hmo : HMIDIOUT) UInt;

external midiOutPrepareHeader(
    hmo : HMIDIOUT,
    pmh : LPMIDIHDR,
    cbmh : UInt) UInt;

external midiOutUnprepareHeader(
    hmo : HMIDIOUT,
    pmh : LPMIDIHDR,
    cbmh : UInt) UInt;

external midiOutShortMsg(
    hmo : HMIDIOUT,
    dwMsg : CULong) UInt;

external midiOutLongMsg(
    hmo : HMIDIOUT,
    pmh : LPMIDIHDR,
    cbmh : UInt) UInt;

external midiOutReset(
    hmo : HMIDIOUT) UInt;

external midiOutCachePatches(
    hmo : HMIDIOUT,
    uBank : UInt,
    pwpa : LPWORD,
    fuCache : UInt) UInt;

external midiOutCacheDrumPatches(
    hmo : HMIDIOUT,
    uPatch : UInt,
    pwkya : LPWORD,
    fuCache : UInt) UInt;

external midiOutGetID(
    hmo : HMIDIOUT,
    puDeviceID : LPUINT) UInt;

external midiOutMessage(
    hmo : HMIDIOUT,
    uMsg : UInt,
    dw1 : UInt64,
    dw2 : UInt64) UInt;

external midiInGetNumDevs() UInt;

external midiInGetDevCapsA(
    uDeviceID : UInt64,
    pmic : LPMIDIINCAPSA,
    cbmic : UInt) UInt;

external midiInGetDevCapsW(
    uDeviceID : UInt64,
    pmic : LPMIDIINCAPSW,
    cbmic : UInt) UInt;

external midiInGetErrorTextA(
    mmrError : UInt,
    pszText : LPSTR,
    cchText : UInt) UInt;

external midiInGetErrorTextW(
    mmrError : UInt,
    pszText : LPWSTR,
    cchText : UInt) UInt;

external midiInOpen(
    phmi : LPHMIDIIN,
    uDeviceID : UInt,
    dwCallback : UInt64,
    dwInstance : UInt64,
    fdwOpen : CULong) UInt;

external midiInClose(
    hmi : HMIDIIN) UInt;

external midiInPrepareHeader(
    hmi : HMIDIIN,
    pmh : LPMIDIHDR,
    cbmh : UInt) UInt;

external midiInUnprepareHeader(
    hmi : HMIDIIN,
    pmh : LPMIDIHDR,
    cbmh : UInt) UInt;

external midiInAddBuffer(
    hmi : HMIDIIN,
    pmh : LPMIDIHDR,
    cbmh : UInt) UInt;

external midiInStart(
    hmi : HMIDIIN) UInt;

external midiInStop(
    hmi : HMIDIIN) UInt;

external midiInReset(
    hmi : HMIDIIN) UInt;

external midiInGetID(
    hmi : HMIDIIN,
    puDeviceID : LPUINT) UInt;

external midiInMessage(
    hmi : HMIDIIN,
    uMsg : UInt,
    dw1 : UInt64,
    dw2 : UInt64) UInt;

record Struct_tagAUXCAPSA (
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[CChar,32],
    wTechnology : UShort,
    wReserved1 : UShort,
    dwSupport : CULong,
);

alias AUXCAPSA = Struct_tagAUXCAPSA;

alias PAUXCAPSA = Pointer[Struct_tagAUXCAPSA];

alias NPAUXCAPSA = Pointer[Struct_tagAUXCAPSA];

alias LPAUXCAPSA = Pointer[Struct_tagAUXCAPSA];

record Struct_tagAUXCAPSW (
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[UShort,32],
    wTechnology : UShort,
    wReserved1 : UShort,
    dwSupport : CULong,
);

alias AUXCAPSW = Struct_tagAUXCAPSW;

alias PAUXCAPSW = Pointer[Struct_tagAUXCAPSW];

alias NPAUXCAPSW = Pointer[Struct_tagAUXCAPSW];

alias LPAUXCAPSW = Pointer[Struct_tagAUXCAPSW];

alias AUXCAPS = AUXCAPSA;

alias PAUXCAPS = PAUXCAPSA;

alias NPAUXCAPS = NPAUXCAPSA;

alias LPAUXCAPS = LPAUXCAPSA;

record Struct_tagAUXCAPS2A (
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[CChar,32],
    wTechnology : UShort,
    wReserved1 : UShort,
    dwSupport : CULong,
    ManufacturerGuid : GUID,
    ProductGuid : GUID,
    NameGuid : GUID,
);

alias AUXCAPS2A = Struct_tagAUXCAPS2A;

alias PAUXCAPS2A = Pointer[Struct_tagAUXCAPS2A];

alias NPAUXCAPS2A = Pointer[Struct_tagAUXCAPS2A];

alias LPAUXCAPS2A = Pointer[Struct_tagAUXCAPS2A];

record Struct_tagAUXCAPS2W (
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[UShort,32],
    wTechnology : UShort,
    wReserved1 : UShort,
    dwSupport : CULong,
    ManufacturerGuid : GUID,
    ProductGuid : GUID,
    NameGuid : GUID,
);

alias AUXCAPS2W = Struct_tagAUXCAPS2W;

alias PAUXCAPS2W = Pointer[Struct_tagAUXCAPS2W];

alias NPAUXCAPS2W = Pointer[Struct_tagAUXCAPS2W];

alias LPAUXCAPS2W = Pointer[Struct_tagAUXCAPS2W];

alias AUXCAPS2 = AUXCAPS2A;

alias PAUXCAPS2 = PAUXCAPS2A;

alias NPAUXCAPS2 = NPAUXCAPS2A;

alias LPAUXCAPS2 = LPAUXCAPS2A;

external auxGetNumDevs() UInt;

external auxGetDevCapsA(
    uDeviceID : UInt64,
    pac : LPAUXCAPSA,
    cbac : UInt) UInt;

external auxGetDevCapsW(
    uDeviceID : UInt64,
    pac : LPAUXCAPSW,
    cbac : UInt) UInt;

external auxSetVolume(
    uDeviceID : UInt,
    dwVolume : CULong) UInt;

external auxGetVolume(
    uDeviceID : UInt,
    pdwVolume : LPDWORD) UInt;

external auxOutMessage(
    uDeviceID : UInt,
    uMsg : UInt,
    dw1 : UInt64,
    dw2 : UInt64) UInt;

record Struct_HMIXEROBJ__ (
    unused : Int,
);

alias HMIXEROBJ = Pointer[Struct_HMIXEROBJ__];

alias LPHMIXEROBJ = Pointer[HMIXEROBJ];

record Struct_HMIXER__ (
    unused : Int,
);

alias HMIXER = Pointer[Struct_HMIXER__];

alias LPHMIXER = Pointer[HMIXER];

external mixerGetNumDevs() UInt;

record Struct_tagMIXERCAPSA (
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[CChar,32],
    fdwSupport : CULong,
    cDestinations : CULong,
);

alias MIXERCAPSA = Struct_tagMIXERCAPSA;

alias PMIXERCAPSA = Pointer[Struct_tagMIXERCAPSA];

alias LPMIXERCAPSA = Pointer[Struct_tagMIXERCAPSA];

record Struct_tagMIXERCAPSW (
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[UShort,32],
    fdwSupport : CULong,
    cDestinations : CULong,
);

alias MIXERCAPSW = Struct_tagMIXERCAPSW;

alias PMIXERCAPSW = Pointer[Struct_tagMIXERCAPSW];

alias LPMIXERCAPSW = Pointer[Struct_tagMIXERCAPSW];

alias MIXERCAPS = MIXERCAPSA;

alias PMIXERCAPS = PMIXERCAPSA;

alias LPMIXERCAPS = LPMIXERCAPSA;

record Struct_tagMIXERCAPS2A (
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[CChar,32],
    fdwSupport : CULong,
    cDestinations : CULong,
    ManufacturerGuid : GUID,
    ProductGuid : GUID,
    NameGuid : GUID,
);

alias MIXERCAPS2A = Struct_tagMIXERCAPS2A;

alias PMIXERCAPS2A = Pointer[Struct_tagMIXERCAPS2A];

alias LPMIXERCAPS2A = Pointer[Struct_tagMIXERCAPS2A];

record Struct_tagMIXERCAPS2W (
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[UShort,32],
    fdwSupport : CULong,
    cDestinations : CULong,
    ManufacturerGuid : GUID,
    ProductGuid : GUID,
    NameGuid : GUID,
);

alias MIXERCAPS2W = Struct_tagMIXERCAPS2W;

alias PMIXERCAPS2W = Pointer[Struct_tagMIXERCAPS2W];

alias LPMIXERCAPS2W = Pointer[Struct_tagMIXERCAPS2W];

alias MIXERCAPS2 = MIXERCAPS2A;

alias PMIXERCAPS2 = PMIXERCAPS2A;

alias LPMIXERCAPS2 = LPMIXERCAPS2A;

external mixerGetDevCapsA(
    uMxId : UInt64,
    pmxcaps : LPMIXERCAPSA,
    cbmxcaps : UInt) UInt;

external mixerGetDevCapsW(
    uMxId : UInt64,
    pmxcaps : LPMIXERCAPSW,
    cbmxcaps : UInt) UInt;

external mixerOpen(
    phmx : LPHMIXER,
    uMxId : UInt,
    dwCallback : UInt64,
    dwInstance : UInt64,
    fdwOpen : CULong) UInt;

external mixerClose(
    hmx : HMIXER) UInt;

external mixerMessage(
    hmx : HMIXER,
    uMsg : UInt,
    dwParam1 : UInt64,
    dwParam2 : UInt64) CULong;

record Struct_tagMIXERLINEA (
    cbStruct : CULong,
    dwDestination : CULong,
    dwSource : CULong,
    dwLineID : CULong,
    fdwLine : CULong,
    dwUser : UInt64,
    dwComponentType : CULong,
    cChannels : CULong,
    cConnections : CULong,
    cControls : CULong,
    szShortName : Array[CChar,16],
    szName : Array[CChar,64],
    Target : UnnamedRecord5,
);

record UnnamedRecord5 (
    dwType : CULong,
    dwDeviceID : CULong,
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[CChar,32],
);

alias MIXERLINEA = Struct_tagMIXERLINEA;

alias PMIXERLINEA = Pointer[Struct_tagMIXERLINEA];

alias LPMIXERLINEA = Pointer[Struct_tagMIXERLINEA];

record Struct_tagMIXERLINEW (
    cbStruct : CULong,
    dwDestination : CULong,
    dwSource : CULong,
    dwLineID : CULong,
    fdwLine : CULong,
    dwUser : UInt64,
    dwComponentType : CULong,
    cChannels : CULong,
    cConnections : CULong,
    cControls : CULong,
    szShortName : Array[UShort,16],
    szName : Array[UShort,64],
    Target : UnnamedRecord6,
);

record UnnamedRecord6 (
    dwType : CULong,
    dwDeviceID : CULong,
    wMid : UShort,
    wPid : UShort,
    vDriverVersion : UInt,
    szPname : Array[UShort,32],
);

alias MIXERLINEW = Struct_tagMIXERLINEW;

alias PMIXERLINEW = Pointer[Struct_tagMIXERLINEW];

alias LPMIXERLINEW = Pointer[Struct_tagMIXERLINEW];

alias MIXERLINE = MIXERLINEA;

alias PMIXERLINE = PMIXERLINEA;

alias LPMIXERLINE = LPMIXERLINEA;

external mixerGetLineInfoA(
    hmxobj : HMIXEROBJ,
    pmxl : LPMIXERLINEA,
    fdwInfo : CULong) UInt;

external mixerGetLineInfoW(
    hmxobj : HMIXEROBJ,
    pmxl : LPMIXERLINEW,
    fdwInfo : CULong) UInt;

external mixerGetID(
    hmxobj : HMIXEROBJ,
    puMxId : Pointer[UInt],
    fdwId : CULong) UInt;

record Struct_tagMIXERCONTROLA (
    cbStruct : CULong,
    dwControlID : CULong,
    dwControlType : CULong,
    fdwControl : CULong,
    cMultipleItems : CULong,
    szShortName : Array[CChar,16],
    szName : Array[CChar,64],
    Bounds : AUnionType,
    Metrics : AUnionType,
);

alias MIXERCONTROLA = Struct_tagMIXERCONTROLA;

alias PMIXERCONTROLA = Pointer[Struct_tagMIXERCONTROLA];

alias LPMIXERCONTROLA = Pointer[Struct_tagMIXERCONTROLA];

record Struct_tagMIXERCONTROLW (
    cbStruct : CULong,
    dwControlID : CULong,
    dwControlType : CULong,
    fdwControl : CULong,
    cMultipleItems : CULong,
    szShortName : Array[UShort,16],
    szName : Array[UShort,64],
    Bounds : AUnionType,
    Metrics : AUnionType,
);

alias MIXERCONTROLW = Struct_tagMIXERCONTROLW;

alias PMIXERCONTROLW = Pointer[Struct_tagMIXERCONTROLW];

alias LPMIXERCONTROLW = Pointer[Struct_tagMIXERCONTROLW];

alias MIXERCONTROL = MIXERCONTROLA;

alias PMIXERCONTROL = PMIXERCONTROLA;

alias LPMIXERCONTROL = LPMIXERCONTROLA;

record Struct_tagMIXERLINECONTROLSA (
    cbStruct : CULong,
    dwLineID : CULong,
    unnamed_field2 : AUnionType,
    cControls : CULong,
    cbmxctrl : CULong,
    pamxctrl : LPMIXERCONTROLA,
);

alias MIXERLINECONTROLSA = Struct_tagMIXERLINECONTROLSA;

alias PMIXERLINECONTROLSA = Pointer[Struct_tagMIXERLINECONTROLSA];

alias LPMIXERLINECONTROLSA = Pointer[Struct_tagMIXERLINECONTROLSA];

record Struct_tagMIXERLINECONTROLSW (
    cbStruct : CULong,
    dwLineID : CULong,
    unnamed_field2 : AUnionType,
    cControls : CULong,
    cbmxctrl : CULong,
    pamxctrl : LPMIXERCONTROLW,
);

alias MIXERLINECONTROLSW = Struct_tagMIXERLINECONTROLSW;

alias PMIXERLINECONTROLSW = Pointer[Struct_tagMIXERLINECONTROLSW];

alias LPMIXERLINECONTROLSW = Pointer[Struct_tagMIXERLINECONTROLSW];

alias MIXERLINECONTROLS = MIXERLINECONTROLSA;

alias PMIXERLINECONTROLS = PMIXERLINECONTROLSA;

alias LPMIXERLINECONTROLS = LPMIXERLINECONTROLSA;

external mixerGetLineControlsA(
    hmxobj : HMIXEROBJ,
    pmxlc : LPMIXERLINECONTROLSA,
    fdwControls : CULong) UInt;

external mixerGetLineControlsW(
    hmxobj : HMIXEROBJ,
    pmxlc : LPMIXERLINECONTROLSW,
    fdwControls : CULong) UInt;

record Struct_tMIXERCONTROLDETAILS (
    cbStruct : CULong,
    dwControlID : CULong,
    cChannels : CULong,
    unnamed_field3 : AUnionType,
    cbDetails : CULong,
    paDetails : LPVOID,
);

alias MIXERCONTROLDETAILS = Struct_tMIXERCONTROLDETAILS;

alias PMIXERCONTROLDETAILS = Pointer[Struct_tMIXERCONTROLDETAILS];

alias LPMIXERCONTROLDETAILS = Pointer[Struct_tMIXERCONTROLDETAILS];

record Struct_tagMIXERCONTROLDETAILS_LISTTEXTA (
    dwParam1 : CULong,
    dwParam2 : CULong,
    szName : Array[CChar,64],
);

alias MIXERCONTROLDETAILS_LISTTEXTA = Struct_tagMIXERCONTROLDETAILS_LISTTEXTA;

alias PMIXERCONTROLDETAILS_LISTTEXTA = Pointer[Struct_tagMIXERCONTROLDETAILS_LISTTEXTA];

alias LPMIXERCONTROLDETAILS_LISTTEXTA = Pointer[Struct_tagMIXERCONTROLDETAILS_LISTTEXTA];

record Struct_tagMIXERCONTROLDETAILS_LISTTEXTW (
    dwParam1 : CULong,
    dwParam2 : CULong,
    szName : Array[UShort,64],
);

alias MIXERCONTROLDETAILS_LISTTEXTW = Struct_tagMIXERCONTROLDETAILS_LISTTEXTW;

alias PMIXERCONTROLDETAILS_LISTTEXTW = Pointer[Struct_tagMIXERCONTROLDETAILS_LISTTEXTW];

alias LPMIXERCONTROLDETAILS_LISTTEXTW = Pointer[Struct_tagMIXERCONTROLDETAILS_LISTTEXTW];

alias MIXERCONTROLDETAILS_LISTTEXT = MIXERCONTROLDETAILS_LISTTEXTA;

alias PMIXERCONTROLDETAILS_LISTTEXT = PMIXERCONTROLDETAILS_LISTTEXTA;

alias LPMIXERCONTROLDETAILS_LISTTEXT = LPMIXERCONTROLDETAILS_LISTTEXTA;

record Struct_tMIXERCONTROLDETAILS_BOOLEAN (
    fValue : CLong,
);

alias MIXERCONTROLDETAILS_BOOLEAN = Struct_tMIXERCONTROLDETAILS_BOOLEAN;

alias PMIXERCONTROLDETAILS_BOOLEAN = Pointer[Struct_tMIXERCONTROLDETAILS_BOOLEAN];

alias LPMIXERCONTROLDETAILS_BOOLEAN = Pointer[Struct_tMIXERCONTROLDETAILS_BOOLEAN];

record Struct_tMIXERCONTROLDETAILS_SIGNED (
    lValue : CLong,
);

alias MIXERCONTROLDETAILS_SIGNED = Struct_tMIXERCONTROLDETAILS_SIGNED;

alias PMIXERCONTROLDETAILS_SIGNED = Pointer[Struct_tMIXERCONTROLDETAILS_SIGNED];

alias LPMIXERCONTROLDETAILS_SIGNED = Pointer[Struct_tMIXERCONTROLDETAILS_SIGNED];

record Struct_tMIXERCONTROLDETAILS_UNSIGNED (
    dwValue : CULong,
);

alias MIXERCONTROLDETAILS_UNSIGNED = Struct_tMIXERCONTROLDETAILS_UNSIGNED;

alias PMIXERCONTROLDETAILS_UNSIGNED = Pointer[Struct_tMIXERCONTROLDETAILS_UNSIGNED];

alias LPMIXERCONTROLDETAILS_UNSIGNED = Pointer[Struct_tMIXERCONTROLDETAILS_UNSIGNED];

external mixerGetControlDetailsA(
    hmxobj : HMIXEROBJ,
    pmxcd : LPMIXERCONTROLDETAILS,
    fdwDetails : CULong) UInt;

external mixerGetControlDetailsW(
    hmxobj : HMIXEROBJ,
    pmxcd : LPMIXERCONTROLDETAILS,
    fdwDetails : CULong) UInt;

external mixerSetControlDetails(
    hmxobj : HMIXEROBJ,
    pmxcd : LPMIXERCONTROLDETAILS,
    fdwDetails : CULong) UInt;

alias LPTIMECALLBACK = CCodePointer[(UInt,UInt,UInt64,UInt64,UInt64),()];

record Struct_timecaps_tag (
    wPeriodMin : UInt,
    wPeriodMax : UInt,
);

alias TIMECAPS = Struct_timecaps_tag;

alias PTIMECAPS = Pointer[Struct_timecaps_tag];

alias NPTIMECAPS = Pointer[Struct_timecaps_tag];

alias LPTIMECAPS = Pointer[Struct_timecaps_tag];

external timeGetSystemTime(
    pmmt : LPMMTIME,
    cbmmt : UInt) UInt;

external timeGetTime() CULong;

external timeSetEvent(
    uDelay : UInt,
    uResolution : UInt,
    fptc : LPTIMECALLBACK,
    dwUser : UInt64,
    fuEvent : UInt) UInt;

external timeKillEvent(
    uTimerID : UInt) UInt;

external timeGetDevCaps(
    ptc : LPTIMECAPS,
    cbtc : UInt) UInt;

external timeBeginPeriod(
    uPeriod : UInt) UInt;

external timeEndPeriod(
    uPeriod : UInt) UInt;

record Struct_tagJOYCAPSA (
    wMid : UShort,
    wPid : UShort,
    szPname : Array[CChar,32],
    wXmin : UInt,
    wXmax : UInt,
    wYmin : UInt,
    wYmax : UInt,
    wZmin : UInt,
    wZmax : UInt,
    wNumButtons : UInt,
    wPeriodMin : UInt,
    wPeriodMax : UInt,
    wRmin : UInt,
    wRmax : UInt,
    wUmin : UInt,
    wUmax : UInt,
    wVmin : UInt,
    wVmax : UInt,
    wCaps : UInt,
    wMaxAxes : UInt,
    wNumAxes : UInt,
    wMaxButtons : UInt,
    szRegKey : Array[CChar,32],
    szOEMVxD : Array[CChar,260],
);

alias JOYCAPSA = Struct_tagJOYCAPSA;

alias PJOYCAPSA = Pointer[Struct_tagJOYCAPSA];

alias NPJOYCAPSA = Pointer[Struct_tagJOYCAPSA];

alias LPJOYCAPSA = Pointer[Struct_tagJOYCAPSA];

record Struct_tagJOYCAPSW (
    wMid : UShort,
    wPid : UShort,
    szPname : Array[UShort,32],
    wXmin : UInt,
    wXmax : UInt,
    wYmin : UInt,
    wYmax : UInt,
    wZmin : UInt,
    wZmax : UInt,
    wNumButtons : UInt,
    wPeriodMin : UInt,
    wPeriodMax : UInt,
    wRmin : UInt,
    wRmax : UInt,
    wUmin : UInt,
    wUmax : UInt,
    wVmin : UInt,
    wVmax : UInt,
    wCaps : UInt,
    wMaxAxes : UInt,
    wNumAxes : UInt,
    wMaxButtons : UInt,
    szRegKey : Array[UShort,32],
    szOEMVxD : Array[UShort,260],
);

alias JOYCAPSW = Struct_tagJOYCAPSW;

alias PJOYCAPSW = Pointer[Struct_tagJOYCAPSW];

alias NPJOYCAPSW = Pointer[Struct_tagJOYCAPSW];

alias LPJOYCAPSW = Pointer[Struct_tagJOYCAPSW];

alias JOYCAPS = JOYCAPSA;

alias PJOYCAPS = PJOYCAPSA;

alias NPJOYCAPS = NPJOYCAPSA;

alias LPJOYCAPS = LPJOYCAPSA;

record Struct_tagJOYCAPS2A (
    wMid : UShort,
    wPid : UShort,
    szPname : Array[CChar,32],
    wXmin : UInt,
    wXmax : UInt,
    wYmin : UInt,
    wYmax : UInt,
    wZmin : UInt,
    wZmax : UInt,
    wNumButtons : UInt,
    wPeriodMin : UInt,
    wPeriodMax : UInt,
    wRmin : UInt,
    wRmax : UInt,
    wUmin : UInt,
    wUmax : UInt,
    wVmin : UInt,
    wVmax : UInt,
    wCaps : UInt,
    wMaxAxes : UInt,
    wNumAxes : UInt,
    wMaxButtons : UInt,
    szRegKey : Array[CChar,32],
    szOEMVxD : Array[CChar,260],
    ManufacturerGuid : GUID,
    ProductGuid : GUID,
    NameGuid : GUID,
);

alias JOYCAPS2A = Struct_tagJOYCAPS2A;

alias PJOYCAPS2A = Pointer[Struct_tagJOYCAPS2A];

alias NPJOYCAPS2A = Pointer[Struct_tagJOYCAPS2A];

alias LPJOYCAPS2A = Pointer[Struct_tagJOYCAPS2A];

record Struct_tagJOYCAPS2W (
    wMid : UShort,
    wPid : UShort,
    szPname : Array[UShort,32],
    wXmin : UInt,
    wXmax : UInt,
    wYmin : UInt,
    wYmax : UInt,
    wZmin : UInt,
    wZmax : UInt,
    wNumButtons : UInt,
    wPeriodMin : UInt,
    wPeriodMax : UInt,
    wRmin : UInt,
    wRmax : UInt,
    wUmin : UInt,
    wUmax : UInt,
    wVmin : UInt,
    wVmax : UInt,
    wCaps : UInt,
    wMaxAxes : UInt,
    wNumAxes : UInt,
    wMaxButtons : UInt,
    szRegKey : Array[UShort,32],
    szOEMVxD : Array[UShort,260],
    ManufacturerGuid : GUID,
    ProductGuid : GUID,
    NameGuid : GUID,
);

alias JOYCAPS2W = Struct_tagJOYCAPS2W;

alias PJOYCAPS2W = Pointer[Struct_tagJOYCAPS2W];

alias NPJOYCAPS2W = Pointer[Struct_tagJOYCAPS2W];

alias LPJOYCAPS2W = Pointer[Struct_tagJOYCAPS2W];

alias JOYCAPS2 = JOYCAPS2A;

alias PJOYCAPS2 = PJOYCAPS2A;

alias NPJOYCAPS2 = NPJOYCAPS2A;

alias LPJOYCAPS2 = LPJOYCAPS2A;

record Struct_joyinfo_tag (
    wXpos : UInt,
    wYpos : UInt,
    wZpos : UInt,
    wButtons : UInt,
);

alias JOYINFO = Struct_joyinfo_tag;

alias PJOYINFO = Pointer[Struct_joyinfo_tag];

alias NPJOYINFO = Pointer[Struct_joyinfo_tag];

alias LPJOYINFO = Pointer[Struct_joyinfo_tag];

record Struct_joyinfoex_tag (
    dwSize : CULong,
    dwFlags : CULong,
    dwXpos : CULong,
    dwYpos : CULong,
    dwZpos : CULong,
    dwRpos : CULong,
    dwUpos : CULong,
    dwVpos : CULong,
    dwButtons : CULong,
    dwButtonNumber : CULong,
    dwPOV : CULong,
    dwReserved1 : CULong,
    dwReserved2 : CULong,
);

alias JOYINFOEX = Struct_joyinfoex_tag;

alias PJOYINFOEX = Pointer[Struct_joyinfoex_tag];

alias NPJOYINFOEX = Pointer[Struct_joyinfoex_tag];

alias LPJOYINFOEX = Pointer[Struct_joyinfoex_tag];

external joyGetNumDevs() UInt;

external joyGetDevCapsA(
    uJoyID : UInt64,
    pjc : LPJOYCAPSA,
    cbjc : UInt) UInt;

external joyGetDevCapsW(
    uJoyID : UInt64,
    pjc : LPJOYCAPSW,
    cbjc : UInt) UInt;

external joyGetPos(
    uJoyID : UInt,
    pji : LPJOYINFO) UInt;

external joyGetPosEx(
    uJoyID : UInt,
    pji : LPJOYINFOEX) UInt;

external joyGetThreshold(
    uJoyID : UInt,
    puThreshold : LPUINT) UInt;

external joyReleaseCapture(
    uJoyID : UInt) UInt;

external joySetCapture(
    hwnd : HWND,
    uJoyID : UInt,
    uPeriod : UInt,
    fChanged : Int) UInt;

external joySetThreshold(
    uJoyID : UInt,
    uThreshold : UInt) UInt;

alias FOURCC = CULong;

alias HPSTR = Pointer[CChar];

record Struct_HMMIO__ (
    unused : Int,
);

alias HMMIO = Pointer[Struct_HMMIO__];

alias LPMMIOPROC = CCodePointer[(Pointer[CChar],UInt,Int64,Int64),(Int64)];

record Struct__MMIOINFO (
    dwFlags : CULong,
    fccIOProc : CULong,
    pIOProc : LPMMIOPROC,
    wErrorRet : UInt,
    htask : HTASK,
    cchBuffer : CLong,
    pchBuffer : HPSTR,
    pchNext : HPSTR,
    pchEndRead : HPSTR,
    pchEndWrite : HPSTR,
    lBufOffset : CLong,
    lDiskOffset : CLong,
    adwInfo : Array[CULong,3],
    dwReserved1 : CULong,
    dwReserved2 : CULong,
    hmmio : HMMIO,
);

alias MMIOINFO = Struct__MMIOINFO;

alias PMMIOINFO = Pointer[Struct__MMIOINFO];

alias NPMMIOINFO = Pointer[Struct__MMIOINFO];

alias LPMMIOINFO = Pointer[Struct__MMIOINFO];

alias LPCMMIOINFO = Pointer[MMIOINFO];

record Struct__MMCKINFO (
    ckid : CULong,
    cksize : CULong,
    fccType : CULong,
    dwDataOffset : CULong,
    dwFlags : CULong,
);

alias MMCKINFO = Struct__MMCKINFO;

alias PMMCKINFO = Pointer[Struct__MMCKINFO];

alias NPMMCKINFO = Pointer[Struct__MMCKINFO];

alias LPMMCKINFO = Pointer[Struct__MMCKINFO];

alias LPCMMCKINFO = Pointer[MMCKINFO];

external mmioStringToFOURCCA(
    sz : LPCSTR,
    uFlags : UInt) CULong;

external mmioStringToFOURCCW(
    sz : LPCWSTR,
    uFlags : UInt) CULong;

external mmioInstallIOProcA(
    fccIOProc : CULong,
    pIOProc : LPMMIOPROC,
    dwFlags : CULong) LPMMIOPROC;

external mmioInstallIOProcW(
    fccIOProc : CULong,
    pIOProc : LPMMIOPROC,
    dwFlags : CULong) LPMMIOPROC;

external mmioOpenA(
    pszFileName : LPSTR,
    pmmioinfo : LPMMIOINFO,
    fdwOpen : CULong) HMMIO;

external mmioOpenW(
    pszFileName : LPWSTR,
    pmmioinfo : LPMMIOINFO,
    fdwOpen : CULong) HMMIO;

external mmioRenameA(
    pszFileName : LPCSTR,
    pszNewFileName : LPCSTR,
    pmmioinfo : LPCMMIOINFO,
    fdwRename : CULong) UInt;

external mmioRenameW(
    pszFileName : LPCWSTR,
    pszNewFileName : LPCWSTR,
    pmmioinfo : LPCMMIOINFO,
    fdwRename : CULong) UInt;

external mmioClose(
    hmmio : HMMIO,
    fuClose : UInt) UInt;

external mmioRead(
    hmmio : HMMIO,
    pch : HPSTR,
    cch : CLong) CLong;

external mmioWrite(
    hmmio : HMMIO,
    pch : Pointer[CChar],
    cch : CLong) CLong;

external mmioSeek(
    hmmio : HMMIO,
    lOffset : CLong,
    iOrigin : Int) CLong;

external mmioGetInfo(
    hmmio : HMMIO,
    pmmioinfo : LPMMIOINFO,
    fuInfo : UInt) UInt;

external mmioSetInfo(
    hmmio : HMMIO,
    pmmioinfo : LPCMMIOINFO,
    fuInfo : UInt) UInt;

external mmioSetBuffer(
    hmmio : HMMIO,
    pchBuffer : LPSTR,
    cchBuffer : CLong,
    fuBuffer : UInt) UInt;

external mmioFlush(
    hmmio : HMMIO,
    fuFlush : UInt) UInt;

external mmioAdvance(
    hmmio : HMMIO,
    pmmioinfo : LPMMIOINFO,
    fuAdvance : UInt) UInt;

external mmioSendMessage(
    hmmio : HMMIO,
    uMsg : UInt,
    lParam1 : Int64,
    lParam2 : Int64) Int64;

external mmioDescend(
    hmmio : HMMIO,
    pmmcki : LPMMCKINFO,
    pmmckiParent : Pointer[MMCKINFO],
    fuDescend : UInt) UInt;

external mmioAscend(
    hmmio : HMMIO,
    pmmcki : LPMMCKINFO,
    fuAscend : UInt) UInt;

external mmioCreateChunk(
    hmmio : HMMIO,
    pmmcki : LPMMCKINFO,
    fuCreate : UInt) UInt;

alias MCIERROR = CULong;

alias MCIDEVICEID = UInt;

alias YIELDPROC = CCodePointer[(UInt,CULong),(UInt)];

external mciSendCommandA(
    mciId : UInt,
    uMsg : UInt,
    dwParam1 : UInt64,
    dwParam2 : UInt64) CULong;

external mciSendCommandW(
    mciId : UInt,
    uMsg : UInt,
    dwParam1 : UInt64,
    dwParam2 : UInt64) CULong;

external mciSendStringA(
    lpstrCommand : LPCSTR,
    lpstrReturnString : LPSTR,
    uReturnLength : UInt,
    hwndCallback : HWND) CULong;

external mciSendStringW(
    lpstrCommand : LPCWSTR,
    lpstrReturnString : LPWSTR,
    uReturnLength : UInt,
    hwndCallback : HWND) CULong;

external mciGetDeviceIDA(
    pszDevice : LPCSTR) UInt;

external mciGetDeviceIDW(
    pszDevice : LPCWSTR) UInt;

external mciGetDeviceIDFromElementIDA(
    dwElementID : CULong,
    lpstrType : LPCSTR) UInt;

external mciGetDeviceIDFromElementIDW(
    dwElementID : CULong,
    lpstrType : LPCWSTR) UInt;

external mciGetErrorStringA(
    mcierr : CULong,
    pszText : LPSTR,
    cchText : UInt) Int;

external mciGetErrorStringW(
    mcierr : CULong,
    pszText : LPWSTR,
    cchText : UInt) Int;

external mciSetYieldProc(
    mciId : UInt,
    fpYieldProc : YIELDPROC,
    dwYieldData : CULong) Int;

external mciGetCreatorTask(
    mciId : UInt) HTASK;

external mciGetYieldProc(
    mciId : UInt,
    pdwYieldData : LPDWORD) YIELDPROC;

record Struct_tagMCI_GENERIC_PARMS (
    dwCallback : UInt64,
);

alias MCI_GENERIC_PARMS = Struct_tagMCI_GENERIC_PARMS;

alias PMCI_GENERIC_PARMS = Pointer[Struct_tagMCI_GENERIC_PARMS];

alias LPMCI_GENERIC_PARMS = Pointer[Struct_tagMCI_GENERIC_PARMS];

record Struct_tagMCI_OPEN_PARMSA (
    dwCallback : UInt64,
    wDeviceID : UInt,
    lpstrDeviceType : LPCSTR,
    lpstrElementName : LPCSTR,
    lpstrAlias : LPCSTR,
);

alias MCI_OPEN_PARMSA = Struct_tagMCI_OPEN_PARMSA;

alias PMCI_OPEN_PARMSA = Pointer[Struct_tagMCI_OPEN_PARMSA];

alias LPMCI_OPEN_PARMSA = Pointer[Struct_tagMCI_OPEN_PARMSA];

record Struct_tagMCI_OPEN_PARMSW (
    dwCallback : UInt64,
    wDeviceID : UInt,
    lpstrDeviceType : LPCWSTR,
    lpstrElementName : LPCWSTR,
    lpstrAlias : LPCWSTR,
);

alias MCI_OPEN_PARMSW = Struct_tagMCI_OPEN_PARMSW;

alias PMCI_OPEN_PARMSW = Pointer[Struct_tagMCI_OPEN_PARMSW];

alias LPMCI_OPEN_PARMSW = Pointer[Struct_tagMCI_OPEN_PARMSW];

alias MCI_OPEN_PARMS = MCI_OPEN_PARMSA;

alias PMCI_OPEN_PARMS = PMCI_OPEN_PARMSA;

alias LPMCI_OPEN_PARMS = LPMCI_OPEN_PARMSA;

record Struct_tagMCI_PLAY_PARMS (
    dwCallback : UInt64,
    dwFrom : CULong,
    dwTo : CULong,
);

alias MCI_PLAY_PARMS = Struct_tagMCI_PLAY_PARMS;

alias PMCI_PLAY_PARMS = Pointer[Struct_tagMCI_PLAY_PARMS];

alias LPMCI_PLAY_PARMS = Pointer[Struct_tagMCI_PLAY_PARMS];

record Struct_tagMCI_SEEK_PARMS (
    dwCallback : UInt64,
    dwTo : CULong,
);

alias MCI_SEEK_PARMS = Struct_tagMCI_SEEK_PARMS;

alias PMCI_SEEK_PARMS = Pointer[Struct_tagMCI_SEEK_PARMS];

alias LPMCI_SEEK_PARMS = Pointer[Struct_tagMCI_SEEK_PARMS];

record Struct_tagMCI_STATUS_PARMS (
    dwCallback : UInt64,
    dwReturn : UInt64,
    dwItem : CULong,
    dwTrack : CULong,
);

alias MCI_STATUS_PARMS = Struct_tagMCI_STATUS_PARMS;

alias PMCI_STATUS_PARMS = Pointer[Struct_tagMCI_STATUS_PARMS];

alias LPMCI_STATUS_PARMS = Pointer[Struct_tagMCI_STATUS_PARMS];

record Struct_tagMCI_INFO_PARMSA (
    dwCallback : UInt64,
    lpstrReturn : LPSTR,
    dwRetSize : CULong,
);

alias MCI_INFO_PARMSA = Struct_tagMCI_INFO_PARMSA;

alias LPMCI_INFO_PARMSA = Pointer[Struct_tagMCI_INFO_PARMSA];

record Struct_tagMCI_INFO_PARMSW (
    dwCallback : UInt64,
    lpstrReturn : LPWSTR,
    dwRetSize : CULong,
);

alias MCI_INFO_PARMSW = Struct_tagMCI_INFO_PARMSW;

alias LPMCI_INFO_PARMSW = Pointer[Struct_tagMCI_INFO_PARMSW];

alias MCI_INFO_PARMS = MCI_INFO_PARMSA;

alias LPMCI_INFO_PARMS = LPMCI_INFO_PARMSA;

record Struct_tagMCI_GETDEVCAPS_PARMS (
    dwCallback : UInt64,
    dwReturn : CULong,
    dwItem : CULong,
);

alias MCI_GETDEVCAPS_PARMS = Struct_tagMCI_GETDEVCAPS_PARMS;

alias PMCI_GETDEVCAPS_PARMS = Pointer[Struct_tagMCI_GETDEVCAPS_PARMS];

alias LPMCI_GETDEVCAPS_PARMS = Pointer[Struct_tagMCI_GETDEVCAPS_PARMS];

record Struct_tagMCI_SYSINFO_PARMSA (
    dwCallback : UInt64,
    lpstrReturn : LPSTR,
    dwRetSize : CULong,
    dwNumber : CULong,
    wDeviceType : UInt,
);

alias MCI_SYSINFO_PARMSA = Struct_tagMCI_SYSINFO_PARMSA;

alias PMCI_SYSINFO_PARMSA = Pointer[Struct_tagMCI_SYSINFO_PARMSA];

alias LPMCI_SYSINFO_PARMSA = Pointer[Struct_tagMCI_SYSINFO_PARMSA];

record Struct_tagMCI_SYSINFO_PARMSW (
    dwCallback : UInt64,
    lpstrReturn : LPWSTR,
    dwRetSize : CULong,
    dwNumber : CULong,
    wDeviceType : UInt,
);

alias MCI_SYSINFO_PARMSW = Struct_tagMCI_SYSINFO_PARMSW;

alias PMCI_SYSINFO_PARMSW = Pointer[Struct_tagMCI_SYSINFO_PARMSW];

alias LPMCI_SYSINFO_PARMSW = Pointer[Struct_tagMCI_SYSINFO_PARMSW];

alias MCI_SYSINFO_PARMS = MCI_SYSINFO_PARMSA;

alias PMCI_SYSINFO_PARMS = PMCI_SYSINFO_PARMSA;

alias LPMCI_SYSINFO_PARMS = LPMCI_SYSINFO_PARMSA;

record Struct_tagMCI_SET_PARMS (
    dwCallback : UInt64,
    dwTimeFormat : CULong,
    dwAudio : CULong,
);

alias MCI_SET_PARMS = Struct_tagMCI_SET_PARMS;

alias PMCI_SET_PARMS = Pointer[Struct_tagMCI_SET_PARMS];

alias LPMCI_SET_PARMS = Pointer[Struct_tagMCI_SET_PARMS];

record Struct_tagMCI_BREAK_PARMS (
    dwCallback : UInt64,
    nVirtKey : Int,
    hwndBreak : HWND,
);

alias MCI_BREAK_PARMS = Struct_tagMCI_BREAK_PARMS;

alias PMCI_BREAK_PARMS = Pointer[Struct_tagMCI_BREAK_PARMS];

alias LPMCI_BREAK_PARMS = Pointer[Struct_tagMCI_BREAK_PARMS];

record Struct_tagMCI_SAVE_PARMSA (
    dwCallback : UInt64,
    lpfilename : LPCSTR,
);

alias MCI_SAVE_PARMSA = Struct_tagMCI_SAVE_PARMSA;

alias PMCI_SAVE_PARMSA = Pointer[Struct_tagMCI_SAVE_PARMSA];

alias LPMCI_SAVE_PARMSA = Pointer[Struct_tagMCI_SAVE_PARMSA];

record Struct_tagMCI_SAVE_PARMSW (
    dwCallback : UInt64,
    lpfilename : LPCWSTR,
);

alias MCI_SAVE_PARMSW = Struct_tagMCI_SAVE_PARMSW;

alias PMCI_SAVE_PARMSW = Pointer[Struct_tagMCI_SAVE_PARMSW];

alias LPMCI_SAVE_PARMSW = Pointer[Struct_tagMCI_SAVE_PARMSW];

alias MCI_SAVE_PARMS = MCI_SAVE_PARMSA;

alias PMCI_SAVE_PARMS = PMCI_SAVE_PARMSA;

alias LPMCI_SAVE_PARMS = LPMCI_SAVE_PARMSA;

record Struct_tagMCI_LOAD_PARMSA (
    dwCallback : UInt64,
    lpfilename : LPCSTR,
);

alias MCI_LOAD_PARMSA = Struct_tagMCI_LOAD_PARMSA;

alias PMCI_LOAD_PARMSA = Pointer[Struct_tagMCI_LOAD_PARMSA];

alias LPMCI_LOAD_PARMSA = Pointer[Struct_tagMCI_LOAD_PARMSA];

record Struct_tagMCI_LOAD_PARMSW (
    dwCallback : UInt64,
    lpfilename : LPCWSTR,
);

alias MCI_LOAD_PARMSW = Struct_tagMCI_LOAD_PARMSW;

alias PMCI_LOAD_PARMSW = Pointer[Struct_tagMCI_LOAD_PARMSW];

alias LPMCI_LOAD_PARMSW = Pointer[Struct_tagMCI_LOAD_PARMSW];

alias MCI_LOAD_PARMS = MCI_LOAD_PARMSA;

alias PMCI_LOAD_PARMS = PMCI_LOAD_PARMSA;

alias LPMCI_LOAD_PARMS = LPMCI_LOAD_PARMSA;

record Struct_tagMCI_RECORD_PARMS (
    dwCallback : UInt64,
    dwFrom : CULong,
    dwTo : CULong,
);

alias MCI_RECORD_PARMS = Struct_tagMCI_RECORD_PARMS;

alias LPMCI_RECORD_PARMS = Pointer[Struct_tagMCI_RECORD_PARMS];

record Struct_tagMCI_VD_PLAY_PARMS (
    dwCallback : UInt64,
    dwFrom : CULong,
    dwTo : CULong,
    dwSpeed : CULong,
);

alias MCI_VD_PLAY_PARMS = Struct_tagMCI_VD_PLAY_PARMS;

alias PMCI_VD_PLAY_PARMS = Pointer[Struct_tagMCI_VD_PLAY_PARMS];

alias LPMCI_VD_PLAY_PARMS = Pointer[Struct_tagMCI_VD_PLAY_PARMS];

record Struct_tagMCI_VD_STEP_PARMS (
    dwCallback : UInt64,
    dwFrames : CULong,
);

alias MCI_VD_STEP_PARMS = Struct_tagMCI_VD_STEP_PARMS;

alias PMCI_VD_STEP_PARMS = Pointer[Struct_tagMCI_VD_STEP_PARMS];

alias LPMCI_VD_STEP_PARMS = Pointer[Struct_tagMCI_VD_STEP_PARMS];

record Struct_tagMCI_VD_ESCAPE_PARMSA (
    dwCallback : UInt64,
    lpstrCommand : LPCSTR,
);

alias MCI_VD_ESCAPE_PARMSA = Struct_tagMCI_VD_ESCAPE_PARMSA;

alias PMCI_VD_ESCAPE_PARMSA = Pointer[Struct_tagMCI_VD_ESCAPE_PARMSA];

alias LPMCI_VD_ESCAPE_PARMSA = Pointer[Struct_tagMCI_VD_ESCAPE_PARMSA];

record Struct_tagMCI_VD_ESCAPE_PARMSW (
    dwCallback : UInt64,
    lpstrCommand : LPCWSTR,
);

alias MCI_VD_ESCAPE_PARMSW = Struct_tagMCI_VD_ESCAPE_PARMSW;

alias PMCI_VD_ESCAPE_PARMSW = Pointer[Struct_tagMCI_VD_ESCAPE_PARMSW];

alias LPMCI_VD_ESCAPE_PARMSW = Pointer[Struct_tagMCI_VD_ESCAPE_PARMSW];

alias MCI_VD_ESCAPE_PARMS = MCI_VD_ESCAPE_PARMSA;

alias PMCI_VD_ESCAPE_PARMS = PMCI_VD_ESCAPE_PARMSA;

alias LPMCI_VD_ESCAPE_PARMS = LPMCI_VD_ESCAPE_PARMSA;

record Struct_tagMCI_WAVE_OPEN_PARMSA (
    dwCallback : UInt64,
    wDeviceID : UInt,
    lpstrDeviceType : LPCSTR,
    lpstrElementName : LPCSTR,
    lpstrAlias : LPCSTR,
    dwBufferSeconds : CULong,
);

alias MCI_WAVE_OPEN_PARMSA = Struct_tagMCI_WAVE_OPEN_PARMSA;

alias PMCI_WAVE_OPEN_PARMSA = Pointer[Struct_tagMCI_WAVE_OPEN_PARMSA];

alias LPMCI_WAVE_OPEN_PARMSA = Pointer[Struct_tagMCI_WAVE_OPEN_PARMSA];

record Struct_tagMCI_WAVE_OPEN_PARMSW (
    dwCallback : UInt64,
    wDeviceID : UInt,
    lpstrDeviceType : LPCWSTR,
    lpstrElementName : LPCWSTR,
    lpstrAlias : LPCWSTR,
    dwBufferSeconds : CULong,
);

alias MCI_WAVE_OPEN_PARMSW = Struct_tagMCI_WAVE_OPEN_PARMSW;

alias PMCI_WAVE_OPEN_PARMSW = Pointer[Struct_tagMCI_WAVE_OPEN_PARMSW];

alias LPMCI_WAVE_OPEN_PARMSW = Pointer[Struct_tagMCI_WAVE_OPEN_PARMSW];

alias MCI_WAVE_OPEN_PARMS = MCI_WAVE_OPEN_PARMSA;

alias PMCI_WAVE_OPEN_PARMS = PMCI_WAVE_OPEN_PARMSA;

alias LPMCI_WAVE_OPEN_PARMS = LPMCI_WAVE_OPEN_PARMSA;

record Struct_tagMCI_WAVE_DELETE_PARMS (
    dwCallback : UInt64,
    dwFrom : CULong,
    dwTo : CULong,
);

alias MCI_WAVE_DELETE_PARMS = Struct_tagMCI_WAVE_DELETE_PARMS;

alias PMCI_WAVE_DELETE_PARMS = Pointer[Struct_tagMCI_WAVE_DELETE_PARMS];

alias LPMCI_WAVE_DELETE_PARMS = Pointer[Struct_tagMCI_WAVE_DELETE_PARMS];

record Struct_tagMCI_WAVE_SET_PARMS (
    dwCallback : UInt64,
    dwTimeFormat : CULong,
    dwAudio : CULong,
    wInput : UInt,
    wOutput : UInt,
    wFormatTag : UShort,
    wReserved2 : UShort,
    nChannels : UShort,
    wReserved3 : UShort,
    nSamplesPerSec : CULong,
    nAvgBytesPerSec : CULong,
    nBlockAlign : UShort,
    wReserved4 : UShort,
    wBitsPerSample : UShort,
    wReserved5 : UShort,
);

alias MCI_WAVE_SET_PARMS = Struct_tagMCI_WAVE_SET_PARMS;

alias PMCI_WAVE_SET_PARMS = Pointer[Struct_tagMCI_WAVE_SET_PARMS];

alias LPMCI_WAVE_SET_PARMS = Pointer[Struct_tagMCI_WAVE_SET_PARMS];

record Struct_tagMCI_SEQ_SET_PARMS (
    dwCallback : UInt64,
    dwTimeFormat : CULong,
    dwAudio : CULong,
    dwTempo : CULong,
    dwPort : CULong,
    dwSlave : CULong,
    dwMaster : CULong,
    dwOffset : CULong,
);

alias MCI_SEQ_SET_PARMS = Struct_tagMCI_SEQ_SET_PARMS;

alias PMCI_SEQ_SET_PARMS = Pointer[Struct_tagMCI_SEQ_SET_PARMS];

alias LPMCI_SEQ_SET_PARMS = Pointer[Struct_tagMCI_SEQ_SET_PARMS];

record Struct_tagMCI_ANIM_OPEN_PARMSA (
    dwCallback : UInt64,
    wDeviceID : UInt,
    lpstrDeviceType : LPCSTR,
    lpstrElementName : LPCSTR,
    lpstrAlias : LPCSTR,
    dwStyle : CULong,
    hWndParent : HWND,
);

alias MCI_ANIM_OPEN_PARMSA = Struct_tagMCI_ANIM_OPEN_PARMSA;

alias PMCI_ANIM_OPEN_PARMSA = Pointer[Struct_tagMCI_ANIM_OPEN_PARMSA];

alias LPMCI_ANIM_OPEN_PARMSA = Pointer[Struct_tagMCI_ANIM_OPEN_PARMSA];

record Struct_tagMCI_ANIM_OPEN_PARMSW (
    dwCallback : UInt64,
    wDeviceID : UInt,
    lpstrDeviceType : LPCWSTR,
    lpstrElementName : LPCWSTR,
    lpstrAlias : LPCWSTR,
    dwStyle : CULong,
    hWndParent : HWND,
);

alias MCI_ANIM_OPEN_PARMSW = Struct_tagMCI_ANIM_OPEN_PARMSW;

alias PMCI_ANIM_OPEN_PARMSW = Pointer[Struct_tagMCI_ANIM_OPEN_PARMSW];

alias LPMCI_ANIM_OPEN_PARMSW = Pointer[Struct_tagMCI_ANIM_OPEN_PARMSW];

alias MCI_ANIM_OPEN_PARMS = MCI_ANIM_OPEN_PARMSA;

alias PMCI_ANIM_OPEN_PARMS = PMCI_ANIM_OPEN_PARMSA;

alias LPMCI_ANIM_OPEN_PARMS = LPMCI_ANIM_OPEN_PARMSA;

record Struct_tagMCI_ANIM_PLAY_PARMS (
    dwCallback : UInt64,
    dwFrom : CULong,
    dwTo : CULong,
    dwSpeed : CULong,
);

alias MCI_ANIM_PLAY_PARMS = Struct_tagMCI_ANIM_PLAY_PARMS;

alias PMCI_ANIM_PLAY_PARMS = Pointer[Struct_tagMCI_ANIM_PLAY_PARMS];

alias LPMCI_ANIM_PLAY_PARMS = Pointer[Struct_tagMCI_ANIM_PLAY_PARMS];

record Struct_tagMCI_ANIM_STEP_PARMS (
    dwCallback : UInt64,
    dwFrames : CULong,
);

alias MCI_ANIM_STEP_PARMS = Struct_tagMCI_ANIM_STEP_PARMS;

alias PMCI_ANIM_STEP_PARMS = Pointer[Struct_tagMCI_ANIM_STEP_PARMS];

alias LPMCI_ANIM_STEP_PARMS = Pointer[Struct_tagMCI_ANIM_STEP_PARMS];

record Struct_tagMCI_ANIM_WINDOW_PARMSA (
    dwCallback : UInt64,
    hWnd : HWND,
    nCmdShow : UInt,
    lpstrText : LPCSTR,
);

alias MCI_ANIM_WINDOW_PARMSA = Struct_tagMCI_ANIM_WINDOW_PARMSA;

alias PMCI_ANIM_WINDOW_PARMSA = Pointer[Struct_tagMCI_ANIM_WINDOW_PARMSA];

alias LPMCI_ANIM_WINDOW_PARMSA = Pointer[Struct_tagMCI_ANIM_WINDOW_PARMSA];

record Struct_tagMCI_ANIM_WINDOW_PARMSW (
    dwCallback : UInt64,
    hWnd : HWND,
    nCmdShow : UInt,
    lpstrText : LPCWSTR,
);

alias MCI_ANIM_WINDOW_PARMSW = Struct_tagMCI_ANIM_WINDOW_PARMSW;

alias PMCI_ANIM_WINDOW_PARMSW = Pointer[Struct_tagMCI_ANIM_WINDOW_PARMSW];

alias LPMCI_ANIM_WINDOW_PARMSW = Pointer[Struct_tagMCI_ANIM_WINDOW_PARMSW];

alias MCI_ANIM_WINDOW_PARMS = MCI_ANIM_WINDOW_PARMSA;

alias PMCI_ANIM_WINDOW_PARMS = PMCI_ANIM_WINDOW_PARMSA;

alias LPMCI_ANIM_WINDOW_PARMS = LPMCI_ANIM_WINDOW_PARMSA;

record Struct_tagMCI_ANIM_RECT_PARMS (
    dwCallback : UInt64,
    rc : RECT,
);

alias MCI_ANIM_RECT_PARMS = Struct_tagMCI_ANIM_RECT_PARMS;

alias PMCI_ANIM_RECT_PARMS = Pointer[MCI_ANIM_RECT_PARMS];

alias LPMCI_ANIM_RECT_PARMS = Pointer[MCI_ANIM_RECT_PARMS];

record Struct_tagMCI_ANIM_UPDATE_PARMS (
    dwCallback : UInt64,
    rc : RECT,
    hDC : HDC,
);

alias MCI_ANIM_UPDATE_PARMS = Struct_tagMCI_ANIM_UPDATE_PARMS;

alias PMCI_ANIM_UPDATE_PARMS = Pointer[Struct_tagMCI_ANIM_UPDATE_PARMS];

alias LPMCI_ANIM_UPDATE_PARMS = Pointer[Struct_tagMCI_ANIM_UPDATE_PARMS];

record Struct_tagMCI_OVLY_OPEN_PARMSA (
    dwCallback : UInt64,
    wDeviceID : UInt,
    lpstrDeviceType : LPCSTR,
    lpstrElementName : LPCSTR,
    lpstrAlias : LPCSTR,
    dwStyle : CULong,
    hWndParent : HWND,
);

alias MCI_OVLY_OPEN_PARMSA = Struct_tagMCI_OVLY_OPEN_PARMSA;

alias PMCI_OVLY_OPEN_PARMSA = Pointer[Struct_tagMCI_OVLY_OPEN_PARMSA];

alias LPMCI_OVLY_OPEN_PARMSA = Pointer[Struct_tagMCI_OVLY_OPEN_PARMSA];

record Struct_tagMCI_OVLY_OPEN_PARMSW (
    dwCallback : UInt64,
    wDeviceID : UInt,
    lpstrDeviceType : LPCWSTR,
    lpstrElementName : LPCWSTR,
    lpstrAlias : LPCWSTR,
    dwStyle : CULong,
    hWndParent : HWND,
);

alias MCI_OVLY_OPEN_PARMSW = Struct_tagMCI_OVLY_OPEN_PARMSW;

alias PMCI_OVLY_OPEN_PARMSW = Pointer[Struct_tagMCI_OVLY_OPEN_PARMSW];

alias LPMCI_OVLY_OPEN_PARMSW = Pointer[Struct_tagMCI_OVLY_OPEN_PARMSW];

alias MCI_OVLY_OPEN_PARMS = MCI_OVLY_OPEN_PARMSA;

alias PMCI_OVLY_OPEN_PARMS = PMCI_OVLY_OPEN_PARMSA;

alias LPMCI_OVLY_OPEN_PARMS = LPMCI_OVLY_OPEN_PARMSA;

record Struct_tagMCI_OVLY_WINDOW_PARMSA (
    dwCallback : UInt64,
    hWnd : HWND,
    nCmdShow : UInt,
    lpstrText : LPCSTR,
);

alias MCI_OVLY_WINDOW_PARMSA = Struct_tagMCI_OVLY_WINDOW_PARMSA;

alias PMCI_OVLY_WINDOW_PARMSA = Pointer[Struct_tagMCI_OVLY_WINDOW_PARMSA];

alias LPMCI_OVLY_WINDOW_PARMSA = Pointer[Struct_tagMCI_OVLY_WINDOW_PARMSA];

record Struct_tagMCI_OVLY_WINDOW_PARMSW (
    dwCallback : UInt64,
    hWnd : HWND,
    nCmdShow : UInt,
    lpstrText : LPCWSTR,
);

alias MCI_OVLY_WINDOW_PARMSW = Struct_tagMCI_OVLY_WINDOW_PARMSW;

alias PMCI_OVLY_WINDOW_PARMSW = Pointer[Struct_tagMCI_OVLY_WINDOW_PARMSW];

alias LPMCI_OVLY_WINDOW_PARMSW = Pointer[Struct_tagMCI_OVLY_WINDOW_PARMSW];

alias MCI_OVLY_WINDOW_PARMS = MCI_OVLY_WINDOW_PARMSA;

alias PMCI_OVLY_WINDOW_PARMS = PMCI_OVLY_WINDOW_PARMSA;

alias LPMCI_OVLY_WINDOW_PARMS = LPMCI_OVLY_WINDOW_PARMSA;

record Struct_tagMCI_OVLY_RECT_PARMS (
    dwCallback : UInt64,
    rc : RECT,
);

alias MCI_OVLY_RECT_PARMS = Struct_tagMCI_OVLY_RECT_PARMS;

alias PMCI_OVLY_RECT_PARMS = Pointer[Struct_tagMCI_OVLY_RECT_PARMS];

alias LPMCI_OVLY_RECT_PARMS = Pointer[Struct_tagMCI_OVLY_RECT_PARMS];

record Struct_tagMCI_OVLY_SAVE_PARMSA (
    dwCallback : UInt64,
    lpfilename : LPCSTR,
    rc : RECT,
);

alias MCI_OVLY_SAVE_PARMSA = Struct_tagMCI_OVLY_SAVE_PARMSA;

alias PMCI_OVLY_SAVE_PARMSA = Pointer[Struct_tagMCI_OVLY_SAVE_PARMSA];

alias LPMCI_OVLY_SAVE_PARMSA = Pointer[Struct_tagMCI_OVLY_SAVE_PARMSA];

record Struct_tagMCI_OVLY_SAVE_PARMSW (
    dwCallback : UInt64,
    lpfilename : LPCWSTR,
    rc : RECT,
);

alias MCI_OVLY_SAVE_PARMSW = Struct_tagMCI_OVLY_SAVE_PARMSW;

alias PMCI_OVLY_SAVE_PARMSW = Pointer[Struct_tagMCI_OVLY_SAVE_PARMSW];

alias LPMCI_OVLY_SAVE_PARMSW = Pointer[Struct_tagMCI_OVLY_SAVE_PARMSW];

alias MCI_OVLY_SAVE_PARMS = MCI_OVLY_SAVE_PARMSA;

alias PMCI_OVLY_SAVE_PARMS = PMCI_OVLY_SAVE_PARMSA;

alias LPMCI_OVLY_SAVE_PARMS = LPMCI_OVLY_SAVE_PARMSA;

record Struct_tagMCI_OVLY_LOAD_PARMSA (
    dwCallback : UInt64,
    lpfilename : LPCSTR,
    rc : RECT,
);

alias MCI_OVLY_LOAD_PARMSA = Struct_tagMCI_OVLY_LOAD_PARMSA;

alias PMCI_OVLY_LOAD_PARMSA = Pointer[Struct_tagMCI_OVLY_LOAD_PARMSA];

alias LPMCI_OVLY_LOAD_PARMSA = Pointer[Struct_tagMCI_OVLY_LOAD_PARMSA];

record Struct_tagMCI_OVLY_LOAD_PARMSW (
    dwCallback : UInt64,
    lpfilename : LPCWSTR,
    rc : RECT,
);

alias MCI_OVLY_LOAD_PARMSW = Struct_tagMCI_OVLY_LOAD_PARMSW;

alias PMCI_OVLY_LOAD_PARMSW = Pointer[Struct_tagMCI_OVLY_LOAD_PARMSW];

alias LPMCI_OVLY_LOAD_PARMSW = Pointer[Struct_tagMCI_OVLY_LOAD_PARMSW];

alias MCI_OVLY_LOAD_PARMS = MCI_OVLY_LOAD_PARMSA;

alias PMCI_OVLY_LOAD_PARMS = PMCI_OVLY_LOAD_PARMSA;

alias LPMCI_OVLY_LOAD_PARMS = LPMCI_OVLY_LOAD_PARMSA;

record Struct__NCB (
    ncb_command : CUChar,
    ncb_retcode : CUChar,
    ncb_lsn : CUChar,
    ncb_num : CUChar,
    ncb_buffer : PUCHAR,
    ncb_length : UShort,
    ncb_callname : Array[CUChar,16],
    ncb_name : Array[CUChar,16],
    ncb_rto : CUChar,
    ncb_sto : CUChar,
    ncb_post : CCodePointer[(Pointer[Struct__NCB]),()],
    ncb_lana_num : CUChar,
    ncb_cmd_cplt : CUChar,
    ncb_reserve : Array[CUChar,18],
    ncb_event : HANDLE,
);

alias NCB = Struct__NCB;

alias PNCB = Pointer[Struct__NCB];

record Struct__ADAPTER_STATUS (
    adapter_address : Array[CUChar,6],
    rev_major : CUChar,
    reserved0 : CUChar,
    adapter_type : CUChar,
    rev_minor : CUChar,
    duration : UShort,
    frmr_recv : UShort,
    frmr_xmit : UShort,
    iframe_recv_err : UShort,
    xmit_aborts : UShort,
    xmit_success : CULong,
    recv_success : CULong,
    iframe_xmit_err : UShort,
    recv_buff_unavail : UShort,
    t1_timeouts : UShort,
    ti_timeouts : UShort,
    reserved1 : CULong,
    free_ncbs : UShort,
    max_cfg_ncbs : UShort,
    max_ncbs : UShort,
    xmit_buf_unavail : UShort,
    max_dgram_size : UShort,
    pending_sess : UShort,
    max_cfg_sess : UShort,
    max_sess : UShort,
    max_sess_pkt_size : UShort,
    name_count : UShort,
);

alias ADAPTER_STATUS = Struct__ADAPTER_STATUS;

alias PADAPTER_STATUS = Pointer[Struct__ADAPTER_STATUS];

record Struct__NAME_BUFFER (
    name : Array[CUChar,16],
    name_num : CUChar,
    name_flags : CUChar,
);

alias NAME_BUFFER = Struct__NAME_BUFFER;

alias PNAME_BUFFER = Pointer[Struct__NAME_BUFFER];

record Struct__SESSION_HEADER (
    sess_name : CUChar,
    num_sess : CUChar,
    rcv_dg_outstanding : CUChar,
    rcv_any_outstanding : CUChar,
);

alias SESSION_HEADER = Struct__SESSION_HEADER;

alias PSESSION_HEADER = Pointer[Struct__SESSION_HEADER];

record Struct__SESSION_BUFFER (
    lsn : CUChar,
    state : CUChar,
    local_name : Array[CUChar,16],
    remote_name : Array[CUChar,16],
    rcvs_outstanding : CUChar,
    sends_outstanding : CUChar,
);

alias SESSION_BUFFER = Struct__SESSION_BUFFER;

alias PSESSION_BUFFER = Pointer[Struct__SESSION_BUFFER];

record Struct__LANA_ENUM (
    length : CUChar,
    lana : Array[CUChar,255],
);

alias LANA_ENUM = Struct__LANA_ENUM;

alias PLANA_ENUM = Pointer[Struct__LANA_ENUM];

record Struct__FIND_NAME_HEADER (
    node_count : UShort,
    reserved : CUChar,
    unique_group : CUChar,
);

alias FIND_NAME_HEADER = Struct__FIND_NAME_HEADER;

alias PFIND_NAME_HEADER = Pointer[Struct__FIND_NAME_HEADER];

record Struct__FIND_NAME_BUFFER (
    length : CUChar,
    access_control : CUChar,
    frame_control : CUChar,
    destination_addr : Array[CUChar,6],
    source_addr : Array[CUChar,6],
    routing_info : Array[CUChar,18],
);

alias FIND_NAME_BUFFER = Struct__FIND_NAME_BUFFER;

alias PFIND_NAME_BUFFER = Pointer[Struct__FIND_NAME_BUFFER];

record Struct__ACTION_HEADER (
    transport_id : CULong,
    action_code : UShort,
    reserved : UShort,
);

alias ACTION_HEADER = Struct__ACTION_HEADER;

alias PACTION_HEADER = Pointer[Struct__ACTION_HEADER];

external Netbios(
    pncb : PNCB) CUChar;

alias I_RPC_HANDLE = RawPointer;

alias RPC_STATUS = CLong;

alias RPC_CSTR = Pointer[CUChar];

alias RPC_WSTR = Pointer[UShort];

alias RPC_BINDING_HANDLE = I_RPC_HANDLE;

alias handle_t = RPC_BINDING_HANDLE;

alias UUID = GUID;

record Struct__RPC_BINDING_VECTOR (
    Count : CULong,
    BindingH : Array[RPC_BINDING_HANDLE,1],
);

alias RPC_BINDING_VECTOR = Struct__RPC_BINDING_VECTOR;

record Struct__UUID_VECTOR (
    Count : CULong,
    Uuid : Array[Pointer[UUID],1],
);

alias UUID_VECTOR = Struct__UUID_VECTOR;

alias RPC_IF_HANDLE = RawPointer;

record Struct__RPC_IF_ID (
    Uuid : UUID,
    VersMajor : UShort,
    VersMinor : UShort,
);

alias RPC_IF_ID = Struct__RPC_IF_ID;

record Struct__RPC_PROTSEQ_VECTORA (
    Count : UInt,
    Protseq : Array[Pointer[CUChar],1],
);

alias RPC_PROTSEQ_VECTORA = Struct__RPC_PROTSEQ_VECTORA;

record Struct__RPC_PROTSEQ_VECTORW (
    Count : UInt,
    Protseq : Array[Pointer[UShort],1],
);

alias RPC_PROTSEQ_VECTORW = Struct__RPC_PROTSEQ_VECTORW;

record Struct__RPC_POLICY (
    Length : UInt,
    EndpointFlags : CULong,
    NICFlags : CULong,
);

alias RPC_POLICY = Struct__RPC_POLICY;

alias PRPC_POLICY = Pointer[Struct__RPC_POLICY];

record UnnamedStruct29 (
    Count : UInt,
    Stats : Array[CULong,1],
);

alias RPC_STATS_VECTOR = UnnamedStruct29;

record UnnamedStruct30 (
    Count : CULong,
    IfId : Array[Pointer[RPC_IF_ID],1],
);

alias RPC_IF_ID_VECTOR = UnnamedStruct30;

external RpcBindingCopy(
    SourceBinding : RPC_BINDING_HANDLE,
    DestinationBinding : Pointer[RPC_BINDING_HANDLE]) CLong;

external RpcBindingFree(
    Binding : Pointer[RPC_BINDING_HANDLE]) CLong;

external RpcBindingSetOption(
    hBinding : RPC_BINDING_HANDLE,
    option : CULong,
    optionValue : UInt64) CLong;

external RpcBindingInqOption(
    hBinding : RPC_BINDING_HANDLE,
    option : CULong,
    pOptionValue : Pointer[UInt64]) CLong;

external RpcBindingFromStringBindingA(
    StringBinding : RPC_CSTR,
    Binding : Pointer[RPC_BINDING_HANDLE]) CLong;

external RpcBindingFromStringBindingW(
    StringBinding : RPC_WSTR,
    Binding : Pointer[RPC_BINDING_HANDLE]) CLong;

external RpcSsGetContextBinding(
    ContextHandle : RawPointer,
    Binding : Pointer[RPC_BINDING_HANDLE]) CLong;

external RpcBindingInqObject(
    Binding : RPC_BINDING_HANDLE,
    ObjectUuid : Pointer[UUID]) CLong;

external RpcBindingReset(
    Binding : RPC_BINDING_HANDLE) CLong;

external RpcBindingSetObject(
    Binding : RPC_BINDING_HANDLE,
    ObjectUuid : Pointer[UUID]) CLong;

external RpcMgmtInqDefaultProtectLevel(
    AuthnSvc : CULong,
    AuthnLevel : Pointer[CULong]) CLong;

external RpcBindingToStringBindingA(
    Binding : RPC_BINDING_HANDLE,
    StringBinding : Pointer[RPC_CSTR]) CLong;

external RpcBindingToStringBindingW(
    Binding : RPC_BINDING_HANDLE,
    StringBinding : Pointer[RPC_WSTR]) CLong;

external RpcBindingVectorFree(
    BindingVector : Pointer[Pointer[RPC_BINDING_VECTOR]]) CLong;

external RpcStringBindingComposeA(
    ObjUuid : RPC_CSTR,
    Protseq : RPC_CSTR,
    NetworkAddr : RPC_CSTR,
    Endpoint : RPC_CSTR,
    Options : RPC_CSTR,
    StringBinding : Pointer[RPC_CSTR]) CLong;

external RpcStringBindingComposeW(
    ObjUuid : RPC_WSTR,
    Protseq : RPC_WSTR,
    NetworkAddr : RPC_WSTR,
    Endpoint : RPC_WSTR,
    Options : RPC_WSTR,
    StringBinding : Pointer[RPC_WSTR]) CLong;

external RpcStringBindingParseA(
    StringBinding : RPC_CSTR,
    ObjUuid : Pointer[RPC_CSTR],
    Protseq : Pointer[RPC_CSTR],
    NetworkAddr : Pointer[RPC_CSTR],
    Endpoint : Pointer[RPC_CSTR],
    NetworkOptions : Pointer[RPC_CSTR]) CLong;

external RpcStringBindingParseW(
    StringBinding : RPC_WSTR,
    ObjUuid : Pointer[RPC_WSTR],
    Protseq : Pointer[RPC_WSTR],
    NetworkAddr : Pointer[RPC_WSTR],
    Endpoint : Pointer[RPC_WSTR],
    NetworkOptions : Pointer[RPC_WSTR]) CLong;

external RpcStringFreeA(
    String : Pointer[RPC_CSTR]) CLong;

external RpcStringFreeW(
    String : Pointer[RPC_WSTR]) CLong;

external RpcIfInqId(
    RpcIfHandle : RPC_IF_HANDLE,
    RpcIfId : Pointer[RPC_IF_ID]) CLong;

external RpcNetworkIsProtseqValidA(
    Protseq : RPC_CSTR) CLong;

external RpcNetworkIsProtseqValidW(
    Protseq : RPC_WSTR) CLong;

external RpcMgmtInqComTimeout(
    Binding : RPC_BINDING_HANDLE,
    Timeout : Pointer[UInt]) CLong;

external RpcMgmtSetComTimeout(
    Binding : RPC_BINDING_HANDLE,
    Timeout : UInt) CLong;

external RpcMgmtSetCancelTimeout(
    Timeout : CLong) CLong;

external RpcNetworkInqProtseqsA(
    ProtseqVector : Pointer[Pointer[RPC_PROTSEQ_VECTORA]]) CLong;

external RpcNetworkInqProtseqsW(
    ProtseqVector : Pointer[Pointer[RPC_PROTSEQ_VECTORW]]) CLong;

external RpcObjectInqType(
    ObjUuid : Pointer[UUID],
    TypeUuid : Pointer[UUID]) CLong;

external RpcObjectSetInqFn(
    InquiryFn : CCodePointer[(Pointer[Struct__GUID],Pointer[Struct__GUID],Pointer[CLong]),()]) CLong;

external RpcObjectSetType(
    ObjUuid : Pointer[UUID],
    TypeUuid : Pointer[UUID]) CLong;

external RpcProtseqVectorFreeA(
    ProtseqVector : Pointer[Pointer[RPC_PROTSEQ_VECTORA]]) CLong;

external RpcProtseqVectorFreeW(
    ProtseqVector : Pointer[Pointer[RPC_PROTSEQ_VECTORW]]) CLong;

external RpcServerInqBindings(
    BindingVector : Pointer[Pointer[RPC_BINDING_VECTOR]]) CLong;

external RpcServerInqIf(
    IfSpec : RPC_IF_HANDLE,
    MgrTypeUuid : Pointer[UUID],
    MgrEpv : Pointer[RawPointer]) CLong;

external RpcServerListen(
    MinimumCallThreads : UInt,
    MaxCalls : UInt,
    DontWait : UInt) CLong;

external RpcServerRegisterIf(
    IfSpec : RPC_IF_HANDLE,
    MgrTypeUuid : Pointer[UUID],
    MgrEpv : RawPointer) CLong;

external RpcServerRegisterIfEx(
    IfSpec : RPC_IF_HANDLE,
    MgrTypeUuid : Pointer[UUID],
    MgrEpv : RawPointer,
    Flags : UInt,
    MaxCalls : UInt,
    IfCallback : CCodePointer[(RawPointer,RawPointer),(CLong)]) CLong;

external RpcServerRegisterIf2(
    IfSpec : RPC_IF_HANDLE,
    MgrTypeUuid : Pointer[UUID],
    MgrEpv : RawPointer,
    Flags : UInt,
    MaxCalls : UInt,
    MaxRpcSize : UInt,
    IfCallbackFn : CCodePointer[(RawPointer,RawPointer),(CLong)]) CLong;

external RpcServerUnregisterIf(
    IfSpec : RPC_IF_HANDLE,
    MgrTypeUuid : Pointer[UUID],
    WaitForCallsToComplete : UInt) CLong;

external RpcServerUnregisterIfEx(
    IfSpec : RPC_IF_HANDLE,
    MgrTypeUuid : Pointer[UUID],
    RundownContextHandles : Int) CLong;

external RpcServerUseAllProtseqs(
    MaxCalls : UInt,
    SecurityDescriptor : RawPointer) CLong;

external RpcServerUseAllProtseqsEx(
    MaxCalls : UInt,
    SecurityDescriptor : RawPointer,
    Policy : PRPC_POLICY) CLong;

external RpcServerUseAllProtseqsIf(
    MaxCalls : UInt,
    IfSpec : RPC_IF_HANDLE,
    SecurityDescriptor : RawPointer) CLong;

external RpcServerUseAllProtseqsIfEx(
    MaxCalls : UInt,
    IfSpec : RPC_IF_HANDLE,
    SecurityDescriptor : RawPointer,
    Policy : PRPC_POLICY) CLong;

external RpcServerUseProtseqA(
    Protseq : RPC_CSTR,
    MaxCalls : UInt,
    SecurityDescriptor : RawPointer) CLong;

external RpcServerUseProtseqExA(
    Protseq : RPC_CSTR,
    MaxCalls : UInt,
    SecurityDescriptor : RawPointer,
    Policy : PRPC_POLICY) CLong;

external RpcServerUseProtseqW(
    Protseq : RPC_WSTR,
    MaxCalls : UInt,
    SecurityDescriptor : RawPointer) CLong;

external RpcServerUseProtseqExW(
    Protseq : RPC_WSTR,
    MaxCalls : UInt,
    SecurityDescriptor : RawPointer,
    Policy : PRPC_POLICY) CLong;

external RpcServerUseProtseqEpA(
    Protseq : RPC_CSTR,
    MaxCalls : UInt,
    Endpoint : RPC_CSTR,
    SecurityDescriptor : RawPointer) CLong;

external RpcServerUseProtseqEpExA(
    Protseq : RPC_CSTR,
    MaxCalls : UInt,
    Endpoint : RPC_CSTR,
    SecurityDescriptor : RawPointer,
    Policy : PRPC_POLICY) CLong;

external RpcServerUseProtseqEpW(
    Protseq : RPC_WSTR,
    MaxCalls : UInt,
    Endpoint : RPC_WSTR,
    SecurityDescriptor : RawPointer) CLong;

external RpcServerUseProtseqEpExW(
    Protseq : RPC_WSTR,
    MaxCalls : UInt,
    Endpoint : RPC_WSTR,
    SecurityDescriptor : RawPointer,
    Policy : PRPC_POLICY) CLong;

external RpcServerUseProtseqIfA(
    Protseq : RPC_CSTR,
    MaxCalls : UInt,
    IfSpec : RPC_IF_HANDLE,
    SecurityDescriptor : RawPointer) CLong;

external RpcServerUseProtseqIfExA(
    Protseq : RPC_CSTR,
    MaxCalls : UInt,
    IfSpec : RPC_IF_HANDLE,
    SecurityDescriptor : RawPointer,
    Policy : PRPC_POLICY) CLong;

external RpcServerUseProtseqIfW(
    Protseq : RPC_WSTR,
    MaxCalls : UInt,
    IfSpec : RPC_IF_HANDLE,
    SecurityDescriptor : RawPointer) CLong;

external RpcServerUseProtseqIfExW(
    Protseq : RPC_WSTR,
    MaxCalls : UInt,
    IfSpec : RPC_IF_HANDLE,
    SecurityDescriptor : RawPointer,
    Policy : PRPC_POLICY) CLong;

external RpcServerYield();

external RpcMgmtStatsVectorFree(
    StatsVector : Pointer[Pointer[RPC_STATS_VECTOR]]) CLong;

external RpcMgmtInqStats(
    Binding : RPC_BINDING_HANDLE,
    Statistics : Pointer[Pointer[RPC_STATS_VECTOR]]) CLong;

external RpcMgmtIsServerListening(
    Binding : RPC_BINDING_HANDLE) CLong;

external RpcMgmtStopServerListening(
    Binding : RPC_BINDING_HANDLE) CLong;

external RpcMgmtWaitServerListen() CLong;

external RpcMgmtSetServerStackSize(
    ThreadStackSize : CULong) CLong;

external RpcSsDontSerializeContext();

external RpcMgmtEnableIdleCleanup() CLong;

external RpcMgmtInqIfIds(
    Binding : RPC_BINDING_HANDLE,
    IfIdVector : Pointer[Pointer[RPC_IF_ID_VECTOR]]) CLong;

external RpcIfIdVectorFree(
    IfIdVector : Pointer[Pointer[RPC_IF_ID_VECTOR]]) CLong;

external RpcMgmtInqServerPrincNameA(
    Binding : RPC_BINDING_HANDLE,
    AuthnSvc : CULong,
    ServerPrincName : Pointer[RPC_CSTR]) CLong;

external RpcMgmtInqServerPrincNameW(
    Binding : RPC_BINDING_HANDLE,
    AuthnSvc : CULong,
    ServerPrincName : Pointer[RPC_WSTR]) CLong;

external RpcServerInqDefaultPrincNameA(
    AuthnSvc : CULong,
    PrincName : Pointer[RPC_CSTR]) CLong;

external RpcServerInqDefaultPrincNameW(
    AuthnSvc : CULong,
    PrincName : Pointer[RPC_WSTR]) CLong;

external RpcEpResolveBinding(
    Binding : RPC_BINDING_HANDLE,
    IfSpec : RPC_IF_HANDLE) CLong;

external RpcNsBindingInqEntryNameA(
    Binding : RPC_BINDING_HANDLE,
    EntryNameSyntax : CULong,
    EntryName : Pointer[RPC_CSTR]) CLong;

external RpcNsBindingInqEntryNameW(
    Binding : RPC_BINDING_HANDLE,
    EntryNameSyntax : CULong,
    EntryName : Pointer[RPC_WSTR]) CLong;

alias RPC_AUTH_IDENTITY_HANDLE = RawPointer;

alias RPC_AUTHZ_HANDLE = RawPointer;

record Struct__RPC_SECURITY_QOS (
    Version : CULong,
    Capabilities : CULong,
    IdentityTracking : CULong,
    ImpersonationType : CULong,
);

alias RPC_SECURITY_QOS = Struct__RPC_SECURITY_QOS;

alias PRPC_SECURITY_QOS = Pointer[Struct__RPC_SECURITY_QOS];

record Struct__SEC_WINNT_AUTH_IDENTITY_W (
    User : Pointer[UShort],
    UserLength : CULong,
    Domain : Pointer[UShort],
    DomainLength : CULong,
    Password : Pointer[UShort],
    PasswordLength : CULong,
    Flags : CULong,
);

alias SEC_WINNT_AUTH_IDENTITY_W = Struct__SEC_WINNT_AUTH_IDENTITY_W;

alias PSEC_WINNT_AUTH_IDENTITY_W = Pointer[Struct__SEC_WINNT_AUTH_IDENTITY_W];

record Struct__SEC_WINNT_AUTH_IDENTITY_A (
    User : Pointer[CUChar],
    UserLength : CULong,
    Domain : Pointer[CUChar],
    DomainLength : CULong,
    Password : Pointer[CUChar],
    PasswordLength : CULong,
    Flags : CULong,
);

alias SEC_WINNT_AUTH_IDENTITY_A = Struct__SEC_WINNT_AUTH_IDENTITY_A;

alias PSEC_WINNT_AUTH_IDENTITY_A = Pointer[Struct__SEC_WINNT_AUTH_IDENTITY_A];

record Struct__RPC_HTTP_TRANSPORT_CREDENTIALS_W (
    TransportCredentials : Pointer[SEC_WINNT_AUTH_IDENTITY_W],
    Flags : CULong,
    AuthenticationTarget : CULong,
    NumberOfAuthnSchemes : CULong,
    AuthnSchemes : Pointer[CULong],
    ServerCertificateSubject : Pointer[UShort],
);

alias RPC_HTTP_TRANSPORT_CREDENTIALS_W = Struct__RPC_HTTP_TRANSPORT_CREDENTIALS_W;

alias PRPC_HTTP_TRANSPORT_CREDENTIALS_W = Pointer[Struct__RPC_HTTP_TRANSPORT_CREDENTIALS_W];

record Struct__RPC_HTTP_TRANSPORT_CREDENTIALS_A (
    TransportCredentials : Pointer[SEC_WINNT_AUTH_IDENTITY_A],
    Flags : CULong,
    AuthenticationTarget : CULong,
    NumberOfAuthnSchemes : CULong,
    AuthnSchemes : Pointer[CULong],
    ServerCertificateSubject : Pointer[CUChar],
);

alias RPC_HTTP_TRANSPORT_CREDENTIALS_A = Struct__RPC_HTTP_TRANSPORT_CREDENTIALS_A;

alias PRPC_HTTP_TRANSPORT_CREDENTIALS_A = Pointer[Struct__RPC_HTTP_TRANSPORT_CREDENTIALS_A];

record Struct__RPC_SECURITY_QOS_V2_W (
    Version : CULong,
    Capabilities : CULong,
    IdentityTracking : CULong,
    ImpersonationType : CULong,
    AdditionalSecurityInfoType : CULong,
    u : AUnionType,
);

alias RPC_SECURITY_QOS_V2_W = Struct__RPC_SECURITY_QOS_V2_W;

alias PRPC_SECURITY_QOS_V2_W = Pointer[Struct__RPC_SECURITY_QOS_V2_W];

record Struct__RPC_SECURITY_QOS_V2_A (
    Version : CULong,
    Capabilities : CULong,
    IdentityTracking : CULong,
    ImpersonationType : CULong,
    AdditionalSecurityInfoType : CULong,
    u : AUnionType,
);

alias RPC_SECURITY_QOS_V2_A = Struct__RPC_SECURITY_QOS_V2_A;

alias PRPC_SECURITY_QOS_V2_A = Pointer[Struct__RPC_SECURITY_QOS_V2_A];

record Struct__RPC_SECURITY_QOS_V3_W (
    Version : CULong,
    Capabilities : CULong,
    IdentityTracking : CULong,
    ImpersonationType : CULong,
    AdditionalSecurityInfoType : CULong,
    u : AUnionType,
    Sid : RawPointer,
);

alias RPC_SECURITY_QOS_V3_W = Struct__RPC_SECURITY_QOS_V3_W;

alias PRPC_SECURITY_QOS_V3_W = Pointer[Struct__RPC_SECURITY_QOS_V3_W];

record Struct__RPC_SECURITY_QOS_V3_A (
    Version : CULong,
    Capabilities : CULong,
    IdentityTracking : CULong,
    ImpersonationType : CULong,
    AdditionalSecurityInfoType : CULong,
    u : AUnionType,
    Sid : RawPointer,
);

alias RPC_SECURITY_QOS_V3_A = Struct__RPC_SECURITY_QOS_V3_A;

alias PRPC_SECURITY_QOS_V3_A = Pointer[Struct__RPC_SECURITY_QOS_V3_A];

alias RPCHTTP_RS_REDIRECT = 1;
alias RPCHTTP_RS_ACCESS_1 = 2;
alias RPCHTTP_RS_SESSION = 3;
alias RPCHTTP_RS_ACCESS_2 = 4;
alias RPCHTTP_RS_INTERFACE = 5;

alias RPC_HTTP_REDIRECTOR_STAGE = Int;

alias RPC_NEW_HTTP_PROXY_CHANNEL = CCodePointer[(Int,Pointer[UShort],Pointer[UShort],Pointer[UShort],Pointer[UShort],RawPointer,RawPointer,RawPointer,RawPointer,RawPointer,CULong,Pointer[Pointer[UShort]],Pointer[Pointer[UShort]]),(CLong)];

alias RPC_HTTP_PROXY_FREE_STRING = CCodePointer[(Pointer[UShort]),()];

external RpcImpersonateClient(
    BindingHandle : RPC_BINDING_HANDLE) CLong;

external RpcRevertToSelfEx(
    BindingHandle : RPC_BINDING_HANDLE) CLong;

external RpcRevertToSelf() CLong;

external RpcBindingInqAuthClientA(
    ClientBinding : RPC_BINDING_HANDLE,
    Privs : Pointer[RPC_AUTHZ_HANDLE],
    ServerPrincName : Pointer[RPC_CSTR],
    AuthnLevel : Pointer[CULong],
    AuthnSvc : Pointer[CULong],
    AuthzSvc : Pointer[CULong]) CLong;

external RpcBindingInqAuthClientW(
    ClientBinding : RPC_BINDING_HANDLE,
    Privs : Pointer[RPC_AUTHZ_HANDLE],
    ServerPrincName : Pointer[RPC_WSTR],
    AuthnLevel : Pointer[CULong],
    AuthnSvc : Pointer[CULong],
    AuthzSvc : Pointer[CULong]) CLong;

external RpcBindingInqAuthClientExA(
    ClientBinding : RPC_BINDING_HANDLE,
    Privs : Pointer[RPC_AUTHZ_HANDLE],
    ServerPrincName : Pointer[RPC_CSTR],
    AuthnLevel : Pointer[CULong],
    AuthnSvc : Pointer[CULong],
    AuthzSvc : Pointer[CULong],
    Flags : CULong) CLong;

external RpcBindingInqAuthClientExW(
    ClientBinding : RPC_BINDING_HANDLE,
    Privs : Pointer[RPC_AUTHZ_HANDLE],
    ServerPrincName : Pointer[RPC_WSTR],
    AuthnLevel : Pointer[CULong],
    AuthnSvc : Pointer[CULong],
    AuthzSvc : Pointer[CULong],
    Flags : CULong) CLong;

external RpcBindingInqAuthInfoA(
    Binding : RPC_BINDING_HANDLE,
    ServerPrincName : Pointer[RPC_CSTR],
    AuthnLevel : Pointer[CULong],
    AuthnSvc : Pointer[CULong],
    AuthIdentity : Pointer[RPC_AUTH_IDENTITY_HANDLE],
    AuthzSvc : Pointer[CULong]) CLong;

external RpcBindingInqAuthInfoW(
    Binding : RPC_BINDING_HANDLE,
    ServerPrincName : Pointer[RPC_WSTR],
    AuthnLevel : Pointer[CULong],
    AuthnSvc : Pointer[CULong],
    AuthIdentity : Pointer[RPC_AUTH_IDENTITY_HANDLE],
    AuthzSvc : Pointer[CULong]) CLong;

external RpcBindingSetAuthInfoA(
    Binding : RPC_BINDING_HANDLE,
    ServerPrincName : RPC_CSTR,
    AuthnLevel : CULong,
    AuthnSvc : CULong,
    AuthIdentity : RPC_AUTH_IDENTITY_HANDLE,
    AuthzSvc : CULong) CLong;

external RpcBindingSetAuthInfoExA(
    Binding : RPC_BINDING_HANDLE,
    ServerPrincName : RPC_CSTR,
    AuthnLevel : CULong,
    AuthnSvc : CULong,
    AuthIdentity : RPC_AUTH_IDENTITY_HANDLE,
    AuthzSvc : CULong,
    SecurityQos : Pointer[RPC_SECURITY_QOS]) CLong;

external RpcBindingSetAuthInfoW(
    Binding : RPC_BINDING_HANDLE,
    ServerPrincName : RPC_WSTR,
    AuthnLevel : CULong,
    AuthnSvc : CULong,
    AuthIdentity : RPC_AUTH_IDENTITY_HANDLE,
    AuthzSvc : CULong) CLong;

external RpcBindingSetAuthInfoExW(
    Binding : RPC_BINDING_HANDLE,
    ServerPrincName : RPC_WSTR,
    AuthnLevel : CULong,
    AuthnSvc : CULong,
    AuthIdentity : RPC_AUTH_IDENTITY_HANDLE,
    AuthzSvc : CULong,
    SecurityQOS : Pointer[RPC_SECURITY_QOS]) CLong;

external RpcBindingInqAuthInfoExA(
    Binding : RPC_BINDING_HANDLE,
    ServerPrincName : Pointer[RPC_CSTR],
    AuthnLevel : Pointer[CULong],
    AuthnSvc : Pointer[CULong],
    AuthIdentity : Pointer[RPC_AUTH_IDENTITY_HANDLE],
    AuthzSvc : Pointer[CULong],
    RpcQosVersion : CULong,
    SecurityQOS : Pointer[RPC_SECURITY_QOS]) CLong;

external RpcBindingInqAuthInfoExW(
    Binding : RPC_BINDING_HANDLE,
    ServerPrincName : Pointer[RPC_WSTR],
    AuthnLevel : Pointer[CULong],
    AuthnSvc : Pointer[CULong],
    AuthIdentity : Pointer[RPC_AUTH_IDENTITY_HANDLE],
    AuthzSvc : Pointer[CULong],
    RpcQosVersion : CULong,
    SecurityQOS : Pointer[RPC_SECURITY_QOS]) CLong;

alias RPC_AUTH_KEY_RETRIEVAL_FN = CCodePointer[(RawPointer,Pointer[UShort],CULong,Pointer[RawPointer],Pointer[CLong]),()];

external RpcServerRegisterAuthInfoA(
    ServerPrincName : RPC_CSTR,
    AuthnSvc : CULong,
    GetKeyFn : RPC_AUTH_KEY_RETRIEVAL_FN,
    Arg : RawPointer) CLong;

external RpcServerRegisterAuthInfoW(
    ServerPrincName : RPC_WSTR,
    AuthnSvc : CULong,
    GetKeyFn : RPC_AUTH_KEY_RETRIEVAL_FN,
    Arg : RawPointer) CLong;

record UnnamedStruct31 (
    UserName : Pointer[CUChar],
    ComputerName : Pointer[CUChar],
    Privilege : UShort,
    AuthFlags : CULong,
);

alias RPC_CLIENT_INFORMATION1 = UnnamedStruct31;

alias PRPC_CLIENT_INFORMATION1 = Pointer[UnnamedStruct31];

external RpcBindingServerFromClient(
    ClientBinding : RPC_BINDING_HANDLE,
    ServerBinding : Pointer[RPC_BINDING_HANDLE]) CLong;

external RpcRaiseException(
    exception : CLong);

external RpcTestCancel() CLong;

external RpcServerTestCancel(
    BindingHandle : RPC_BINDING_HANDLE) CLong;

external RpcCancelThread(
    Thread : RawPointer) CLong;

external RpcCancelThreadEx(
    Thread : RawPointer,
    Timeout : CLong) CLong;

external UuidCreate(
    Uuid : Pointer[UUID]) CLong;

external UuidCreateSequential(
    Uuid : Pointer[UUID]) CLong;

external UuidToStringA(
    Uuid : Pointer[UUID],
    StringUuid : Pointer[RPC_CSTR]) CLong;

external UuidFromStringA(
    StringUuid : RPC_CSTR,
    Uuid : Pointer[UUID]) CLong;

external UuidToStringW(
    Uuid : Pointer[UUID],
    StringUuid : Pointer[RPC_WSTR]) CLong;

external UuidFromStringW(
    StringUuid : RPC_WSTR,
    Uuid : Pointer[UUID]) CLong;

external UuidCompare(
    Uuid1 : Pointer[UUID],
    Uuid2 : Pointer[UUID],
    Status : Pointer[CLong]) Int;

external UuidCreateNil(
    NilUuid : Pointer[UUID]) CLong;

external UuidEqual(
    Uuid1 : Pointer[UUID],
    Uuid2 : Pointer[UUID],
    Status : Pointer[CLong]) Int;

external UuidHash(
    Uuid : Pointer[UUID],
    Status : Pointer[CLong]) UShort;

external UuidIsNil(
    Uuid : Pointer[UUID],
    Status : Pointer[CLong]) Int;

external RpcEpRegisterNoReplaceA(
    IfSpec : RPC_IF_HANDLE,
    BindingVector : Pointer[RPC_BINDING_VECTOR],
    UuidVector : Pointer[UUID_VECTOR],
    Annotation : RPC_CSTR) CLong;

external RpcEpRegisterNoReplaceW(
    IfSpec : RPC_IF_HANDLE,
    BindingVector : Pointer[RPC_BINDING_VECTOR],
    UuidVector : Pointer[UUID_VECTOR],
    Annotation : RPC_WSTR) CLong;

external RpcEpRegisterA(
    IfSpec : RPC_IF_HANDLE,
    BindingVector : Pointer[RPC_BINDING_VECTOR],
    UuidVector : Pointer[UUID_VECTOR],
    Annotation : RPC_CSTR) CLong;

external RpcEpRegisterW(
    IfSpec : RPC_IF_HANDLE,
    BindingVector : Pointer[RPC_BINDING_VECTOR],
    UuidVector : Pointer[UUID_VECTOR],
    Annotation : RPC_WSTR) CLong;

external RpcEpUnregister(
    IfSpec : RPC_IF_HANDLE,
    BindingVector : Pointer[RPC_BINDING_VECTOR],
    UuidVector : Pointer[UUID_VECTOR]) CLong;

external DceErrorInqTextA(
    RpcStatus : CLong,
    ErrorText : RPC_CSTR) CLong;

external DceErrorInqTextW(
    RpcStatus : CLong,
    ErrorText : RPC_WSTR) CLong;

alias RPC_EP_INQ_HANDLE = Pointer[I_RPC_HANDLE];

external RpcMgmtEpEltInqBegin(
    EpBinding : RPC_BINDING_HANDLE,
    InquiryType : CULong,
    IfId : Pointer[RPC_IF_ID],
    VersOption : CULong,
    ObjectUuid : Pointer[UUID],
    InquiryContext : Pointer[RPC_EP_INQ_HANDLE]) CLong;

external RpcMgmtEpEltInqDone(
    InquiryContext : Pointer[RPC_EP_INQ_HANDLE]) CLong;

external RpcMgmtEpEltInqNextA(
    InquiryContext : RPC_EP_INQ_HANDLE,
    IfId : Pointer[RPC_IF_ID],
    Binding : Pointer[RPC_BINDING_HANDLE],
    ObjectUuid : Pointer[UUID],
    Annotation : Pointer[RPC_CSTR]) CLong;

external RpcMgmtEpEltInqNextW(
    InquiryContext : RPC_EP_INQ_HANDLE,
    IfId : Pointer[RPC_IF_ID],
    Binding : Pointer[RPC_BINDING_HANDLE],
    ObjectUuid : Pointer[UUID],
    Annotation : Pointer[RPC_WSTR]) CLong;

external RpcMgmtEpUnregister(
    EpBinding : RPC_BINDING_HANDLE,
    IfId : Pointer[RPC_IF_ID],
    Binding : RPC_BINDING_HANDLE,
    ObjectUuid : Pointer[UUID]) CLong;

alias RPC_MGMT_AUTHORIZATION_FN = CCodePointer[(RawPointer,CULong,Pointer[CLong]),(Int)];

external RpcMgmtSetAuthorizationFn(
    AuthorizationFn : RPC_MGMT_AUTHORIZATION_FN) CLong;

record Struct__RPC_VERSION (
    MajorVersion : UShort,
    MinorVersion : UShort,
);

alias RPC_VERSION = Struct__RPC_VERSION;

record Struct__RPC_SYNTAX_IDENTIFIER (
    SyntaxGUID : GUID,
    SyntaxVersion : RPC_VERSION,
);

alias RPC_SYNTAX_IDENTIFIER = Struct__RPC_SYNTAX_IDENTIFIER;

alias PRPC_SYNTAX_IDENTIFIER = Pointer[Struct__RPC_SYNTAX_IDENTIFIER];

record Struct__RPC_MESSAGE (
    Handle : RPC_BINDING_HANDLE,
    DataRepresentation : CULong,
    Buffer : RawPointer,
    BufferLength : UInt,
    ProcNum : UInt,
    TransferSyntax : PRPC_SYNTAX_IDENTIFIER,
    RpcInterfaceInformation : RawPointer,
    ReservedForRuntime : RawPointer,
    ManagerEpv : RawPointer,
    ImportContext : RawPointer,
    RpcFlags : CULong,
);

alias RPC_MESSAGE = Struct__RPC_MESSAGE;

alias PRPC_MESSAGE = Pointer[Struct__RPC_MESSAGE];

alias PROTOCOL_NOT_LOADED = 1;
alias PROTOCOL_LOADED = 2;
alias PROTOCOL_ADDRESS_CHANGE = 3;

alias RPC_DISPATCH_FUNCTION = CCodePointer[(Pointer[Struct__RPC_MESSAGE]),()];

record UnnamedStruct32 (
    DispatchTableCount : UInt,
    DispatchTable : Pointer[RPC_DISPATCH_FUNCTION],
    Reserved : Int64,
);

alias RPC_DISPATCH_TABLE = UnnamedStruct32;

alias PRPC_DISPATCH_TABLE = Pointer[UnnamedStruct32];

record Struct__RPC_PROTSEQ_ENDPOINT (
    RpcProtocolSequence : Pointer[CUChar],
    Endpoint : Pointer[CUChar],
);

alias RPC_PROTSEQ_ENDPOINT = Struct__RPC_PROTSEQ_ENDPOINT;

alias PRPC_PROTSEQ_ENDPOINT = Pointer[Struct__RPC_PROTSEQ_ENDPOINT];

record Struct__RPC_SERVER_INTERFACE (
    Length : UInt,
    InterfaceId : RPC_SYNTAX_IDENTIFIER,
    TransferSyntax : RPC_SYNTAX_IDENTIFIER,
    DispatchTable : PRPC_DISPATCH_TABLE,
    RpcProtseqEndpointCount : UInt,
    RpcProtseqEndpoint : PRPC_PROTSEQ_ENDPOINT,
    DefaultManagerEpv : RawPointer,
    InterpreterInfo : RawPointer,
    Flags : UInt,
);

alias RPC_SERVER_INTERFACE = Struct__RPC_SERVER_INTERFACE;

alias PRPC_SERVER_INTERFACE = Pointer[Struct__RPC_SERVER_INTERFACE];

record Struct__RPC_CLIENT_INTERFACE (
    Length : UInt,
    InterfaceId : RPC_SYNTAX_IDENTIFIER,
    TransferSyntax : RPC_SYNTAX_IDENTIFIER,
    DispatchTable : PRPC_DISPATCH_TABLE,
    RpcProtseqEndpointCount : UInt,
    RpcProtseqEndpoint : PRPC_PROTSEQ_ENDPOINT,
    Reserved : UInt64,
    InterpreterInfo : RawPointer,
    Flags : UInt,
);

alias RPC_CLIENT_INTERFACE = Struct__RPC_CLIENT_INTERFACE;

alias PRPC_CLIENT_INTERFACE = Pointer[Struct__RPC_CLIENT_INTERFACE];

external I_RpcNegotiateTransferSyntax(
    Message : Pointer[RPC_MESSAGE]) CLong;

external I_RpcGetBuffer(
    Message : Pointer[RPC_MESSAGE]) CLong;

external I_RpcGetBufferWithObject(
    Message : Pointer[RPC_MESSAGE],
    ObjectUuid : Pointer[UUID]) CLong;

external I_RpcSendReceive(
    Message : Pointer[RPC_MESSAGE]) CLong;

external I_RpcFreeBuffer(
    Message : Pointer[RPC_MESSAGE]) CLong;

external I_RpcSend(
    Message : PRPC_MESSAGE) CLong;

external I_RpcReceive(
    Message : PRPC_MESSAGE,
    Size : UInt) CLong;

external I_RpcFreePipeBuffer(
    Message : Pointer[RPC_MESSAGE]) CLong;

external I_RpcReallocPipeBuffer(
    Message : PRPC_MESSAGE,
    NewSize : UInt) CLong;

alias I_RPC_MUTEX = RawPointer;

external I_RpcRequestMutex(
    Mutex : Pointer[I_RPC_MUTEX]);

external I_RpcClearMutex(
    Mutex : I_RPC_MUTEX);

external I_RpcDeleteMutex(
    Mutex : I_RPC_MUTEX);

external I_RpcAllocate(
    Size : UInt) RawPointer;

external I_RpcFree(
    Object : RawPointer);

external I_RpcPauseExecution(
    Milliseconds : CULong);

external I_RpcGetExtendedError() CLong;

alias PRPC_RUNDOWN = CCodePointer[(RawPointer),()];

external I_RpcMonitorAssociation(
    Handle : RPC_BINDING_HANDLE,
    RundownRoutine : PRPC_RUNDOWN,
    Context : RawPointer) CLong;

external I_RpcStopMonitorAssociation(
    Handle : RPC_BINDING_HANDLE) CLong;

external I_RpcGetCurrentCallHandle() RPC_BINDING_HANDLE;

external I_RpcGetAssociationContext(
    BindingHandle : RPC_BINDING_HANDLE,
    AssociationContext : Pointer[RawPointer]) CLong;

external I_RpcGetServerContextList(
    BindingHandle : RPC_BINDING_HANDLE) RawPointer;

external I_RpcSetServerContextList(
    BindingHandle : RPC_BINDING_HANDLE,
    ServerContextList : RawPointer);

external I_RpcNsInterfaceExported(
    EntryNameSyntax : CULong,
    EntryName : Pointer[UShort],
    RpcInterfaceInformation : Pointer[RPC_SERVER_INTERFACE]) CLong;

external I_RpcNsInterfaceUnexported(
    EntryNameSyntax : CULong,
    EntryName : Pointer[UShort],
    RpcInterfaceInformation : Pointer[RPC_SERVER_INTERFACE]) CLong;

external I_RpcBindingToStaticStringBindingW(
    Binding : RPC_BINDING_HANDLE,
    StringBinding : Pointer[Pointer[UShort]]) CLong;

external I_RpcBindingInqSecurityContext(
    Binding : RPC_BINDING_HANDLE,
    SecurityContextHandle : Pointer[RawPointer]) CLong;

external I_RpcBindingInqWireIdForSnego(
    Binding : RPC_BINDING_HANDLE,
    WireId : RPC_CSTR) CLong;

external I_RpcBindingInqMarshalledTargetInfo(
    Binding : RPC_BINDING_HANDLE,
    MarshalledTargetInfoLength : Pointer[CULong],
    MarshalledTargetInfo : Pointer[RPC_CSTR]) CLong;

external I_RpcBindingInqLocalClientPID(
    Binding : RPC_BINDING_HANDLE,
    Pid : Pointer[CULong]) CLong;

external I_RpcBindingHandleToAsyncHandle(
    Binding : RPC_BINDING_HANDLE,
    AsyncHandle : Pointer[RawPointer]) CLong;

external I_RpcNsBindingSetEntryNameW(
    Binding : RPC_BINDING_HANDLE,
    EntryNameSyntax : CULong,
    EntryName : RPC_WSTR) CLong;

external I_RpcNsBindingSetEntryNameA(
    Binding : RPC_BINDING_HANDLE,
    EntryNameSyntax : CULong,
    EntryName : RPC_CSTR) CLong;

external I_RpcServerUseProtseqEp2A(
    NetworkAddress : RPC_CSTR,
    Protseq : RPC_CSTR,
    MaxCalls : UInt,
    Endpoint : RPC_CSTR,
    SecurityDescriptor : RawPointer,
    Policy : RawPointer) CLong;

external I_RpcServerUseProtseqEp2W(
    NetworkAddress : RPC_WSTR,
    Protseq : RPC_WSTR,
    MaxCalls : UInt,
    Endpoint : RPC_WSTR,
    SecurityDescriptor : RawPointer,
    Policy : RawPointer) CLong;

external I_RpcServerUseProtseq2W(
    NetworkAddress : RPC_WSTR,
    Protseq : RPC_WSTR,
    MaxCalls : UInt,
    SecurityDescriptor : RawPointer,
    Policy : RawPointer) CLong;

external I_RpcServerUseProtseq2A(
    NetworkAddress : RPC_CSTR,
    Protseq : RPC_CSTR,
    MaxCalls : UInt,
    SecurityDescriptor : RawPointer,
    Policy : RawPointer) CLong;

external I_RpcBindingInqDynamicEndpointW(
    Binding : RPC_BINDING_HANDLE,
    DynamicEndpoint : Pointer[RPC_WSTR]) CLong;

external I_RpcBindingInqDynamicEndpointA(
    Binding : RPC_BINDING_HANDLE,
    DynamicEndpoint : Pointer[RPC_CSTR]) CLong;

external I_RpcServerCheckClientRestriction(
    Context : RPC_BINDING_HANDLE) CLong;

external I_RpcBindingInqTransportType(
    Binding : RPC_BINDING_HANDLE,
    Type : Pointer[UInt]) CLong;

record Struct__RPC_TRANSFER_SYNTAX (
    Uuid : UUID,
    VersMajor : UShort,
    VersMinor : UShort,
);

alias RPC_TRANSFER_SYNTAX = Struct__RPC_TRANSFER_SYNTAX;

external I_RpcIfInqTransferSyntaxes(
    RpcIfHandle : RPC_IF_HANDLE,
    TransferSyntaxes : Pointer[RPC_TRANSFER_SYNTAX],
    TransferSyntaxSize : UInt,
    TransferSyntaxCount : Pointer[UInt]) CLong;

external I_UuidCreate(
    Uuid : Pointer[UUID]) CLong;

external I_RpcBindingCopy(
    SourceBinding : RPC_BINDING_HANDLE,
    DestinationBinding : Pointer[RPC_BINDING_HANDLE]) CLong;

external I_RpcBindingIsClientLocal(
    BindingHandle : RPC_BINDING_HANDLE,
    ClientLocalFlag : Pointer[UInt]) CLong;

external I_RpcBindingInqConnId(
    Binding : RPC_BINDING_HANDLE,
    ConnId : Pointer[RawPointer],
    pfFirstCall : Pointer[Int]) CLong;

external I_RpcSsDontSerializeContext();

external I_RpcLaunchDatagramReceiveThread(
    pAddress : RawPointer) CLong;

external I_RpcServerRegisterForwardFunction(
    pForwardFunction : CCodePointer[(Pointer[Struct__GUID],Pointer[Struct__RPC_VERSION],Pointer[Struct__GUID],Pointer[CUChar],Pointer[RawPointer]),(CLong)]) CLong;

external I_RpcServerInqAddressChangeFn() CCodePointer[(RawPointer),()];

external I_RpcServerSetAddressChangeFn(
    pAddressChangeFn : CCodePointer[(RawPointer),()]) CLong;

external I_RpcServerInqLocalConnAddress(
    Binding : RPC_BINDING_HANDLE,
    Buffer : RawPointer,
    BufferSize : Pointer[CULong],
    AddressFormat : Pointer[CULong]) CLong;

external I_RpcSessionStrictContextHandle();

external I_RpcTurnOnEEInfoPropagation() CLong;

external I_RpcConnectionInqSockBuffSize(
    RecvBuffSize : Pointer[CULong],
    SendBuffSize : Pointer[CULong]) CLong;

external I_RpcConnectionSetSockBuffSize(
    RecvBuffSize : CULong,
    SendBuffSize : CULong) CLong;

alias RPCLT_PDU_FILTER_FUNC = CCodePointer[(RawPointer,UInt,Int),()];

alias RPC_SETFILTER_FUNC = CCodePointer[(CCodePointer[(RawPointer,UInt,Int),()]),()];

external I_RpcServerInqTransportType(
    Type : Pointer[UInt]) CLong;

external I_RpcMapWin32Status(
    Status : CLong) CLong;

record Struct__RPC_C_OPT_METADATA_DESCRIPTOR (
    BufferSize : CULong,
    Buffer : Pointer[CChar],
);

alias RPC_C_OPT_METADATA_DESCRIPTOR = Struct__RPC_C_OPT_METADATA_DESCRIPTOR;

record Struct__RDR_CALLOUT_STATE (
    LastError : CLong,
    LastEEInfo : RawPointer,
    LastCalledStage : RPC_HTTP_REDIRECTOR_STAGE,
    ServerName : Pointer[UShort],
    ServerPort : Pointer[UShort],
    RemoteUser : Pointer[UShort],
    AuthType : Pointer[UShort],
    ResourceTypePresent : CUChar,
    MetadataPresent : CUChar,
    SessionIdPresent : CUChar,
    InterfacePresent : CUChar,
    ResourceType : UUID,
    Metadata : RPC_C_OPT_METADATA_DESCRIPTOR,
    SessionId : UUID,
    Interface : RPC_SYNTAX_IDENTIFIER,
    CertContext : RawPointer,
);

alias RDR_CALLOUT_STATE = Struct__RDR_CALLOUT_STATE;

alias I_RpcProxyIsValidMachineFn = CCodePointer[(Pointer[CChar],Pointer[CChar],CULong),(CLong)];

alias I_RpcProxyGetClientAddressFn = CCodePointer[(RawPointer,Pointer[CChar],Pointer[CULong]),(CLong)];

alias I_RpcProxyGetConnectionTimeoutFn = CCodePointer[(Pointer[CULong]),(CLong)];

alias I_RpcPerformCalloutFn = CCodePointer[(RawPointer,Pointer[Struct__RDR_CALLOUT_STATE],Int),(CLong)];

alias I_RpcFreeCalloutStateFn = CCodePointer[(Pointer[Struct__RDR_CALLOUT_STATE]),()];

record Struct_tagI_RpcProxyCallbackInterface (
    IsValidMachineFn : I_RpcProxyIsValidMachineFn,
    GetClientAddressFn : I_RpcProxyGetClientAddressFn,
    GetConnectionTimeoutFn : I_RpcProxyGetConnectionTimeoutFn,
    PerformCalloutFn : I_RpcPerformCalloutFn,
    FreeCalloutStateFn : I_RpcFreeCalloutStateFn,
);

alias I_RpcProxyCallbackInterface = Struct_tagI_RpcProxyCallbackInterface;

external I_RpcProxyNewConnection(
    ConnectionType : CULong,
    ServerAddress : Pointer[UShort],
    ServerPort : Pointer[UShort],
    MinConnTimeout : Pointer[UShort],
    ConnectionParameter : RawPointer,
    CallOutState : Pointer[RDR_CALLOUT_STATE],
    ProxyCallbackInterface : Pointer[I_RpcProxyCallbackInterface]) CLong;

external I_RpcReplyToClientWithStatus(
    ConnectionParameter : RawPointer,
    RpcStatus : CLong) CLong;

external I_RpcRecordCalloutFailure(
    RpcStatus : CLong,
    CallOutState : Pointer[RDR_CALLOUT_STATE],
    DllName : Pointer[UShort]);

alias RPC_NS_HANDLE = RawPointer;

external RpcNsBindingExportA(
    EntryNameSyntax : CULong,
    EntryName : RPC_CSTR,
    IfSpec : RPC_IF_HANDLE,
    BindingVec : Pointer[RPC_BINDING_VECTOR],
    ObjectUuidVec : Pointer[UUID_VECTOR]) CLong;

external RpcNsBindingUnexportA(
    EntryNameSyntax : CULong,
    EntryName : RPC_CSTR,
    IfSpec : RPC_IF_HANDLE,
    ObjectUuidVec : Pointer[UUID_VECTOR]) CLong;

external RpcNsBindingExportW(
    EntryNameSyntax : CULong,
    EntryName : RPC_WSTR,
    IfSpec : RPC_IF_HANDLE,
    BindingVec : Pointer[RPC_BINDING_VECTOR],
    ObjectUuidVec : Pointer[UUID_VECTOR]) CLong;

external RpcNsBindingUnexportW(
    EntryNameSyntax : CULong,
    EntryName : RPC_WSTR,
    IfSpec : RPC_IF_HANDLE,
    ObjectUuidVec : Pointer[UUID_VECTOR]) CLong;

external RpcNsBindingExportPnPA(
    EntryNameSyntax : CULong,
    EntryName : RPC_CSTR,
    IfSpec : RPC_IF_HANDLE,
    ObjectVector : Pointer[UUID_VECTOR]) CLong;

external RpcNsBindingUnexportPnPA(
    EntryNameSyntax : CULong,
    EntryName : RPC_CSTR,
    IfSpec : RPC_IF_HANDLE,
    ObjectVector : Pointer[UUID_VECTOR]) CLong;

external RpcNsBindingExportPnPW(
    EntryNameSyntax : CULong,
    EntryName : RPC_WSTR,
    IfSpec : RPC_IF_HANDLE,
    ObjectVector : Pointer[UUID_VECTOR]) CLong;

external RpcNsBindingUnexportPnPW(
    EntryNameSyntax : CULong,
    EntryName : RPC_WSTR,
    IfSpec : RPC_IF_HANDLE,
    ObjectVector : Pointer[UUID_VECTOR]) CLong;

external RpcNsBindingLookupBeginA(
    EntryNameSyntax : CULong,
    EntryName : RPC_CSTR,
    IfSpec : RPC_IF_HANDLE,
    ObjUuid : Pointer[UUID],
    BindingMaxCount : CULong,
    LookupContext : Pointer[RPC_NS_HANDLE]) CLong;

external RpcNsBindingLookupBeginW(
    EntryNameSyntax : CULong,
    EntryName : RPC_WSTR,
    IfSpec : RPC_IF_HANDLE,
    ObjUuid : Pointer[UUID],
    BindingMaxCount : CULong,
    LookupContext : Pointer[RPC_NS_HANDLE]) CLong;

external RpcNsBindingLookupNext(
    LookupContext : RPC_NS_HANDLE,
    BindingVec : Pointer[Pointer[RPC_BINDING_VECTOR]]) CLong;

external RpcNsBindingLookupDone(
    LookupContext : Pointer[RPC_NS_HANDLE]) CLong;

external RpcNsGroupDeleteA(
    GroupNameSyntax : CULong,
    GroupName : RPC_CSTR) CLong;

external RpcNsGroupMbrAddA(
    GroupNameSyntax : CULong,
    GroupName : RPC_CSTR,
    MemberNameSyntax : CULong,
    MemberName : RPC_CSTR) CLong;

external RpcNsGroupMbrRemoveA(
    GroupNameSyntax : CULong,
    GroupName : RPC_CSTR,
    MemberNameSyntax : CULong,
    MemberName : RPC_CSTR) CLong;

external RpcNsGroupMbrInqBeginA(
    GroupNameSyntax : CULong,
    GroupName : RPC_CSTR,
    MemberNameSyntax : CULong,
    InquiryContext : Pointer[RPC_NS_HANDLE]) CLong;

external RpcNsGroupMbrInqNextA(
    InquiryContext : RPC_NS_HANDLE,
    MemberName : Pointer[RPC_CSTR]) CLong;

external RpcNsGroupDeleteW(
    GroupNameSyntax : CULong,
    GroupName : RPC_WSTR) CLong;

external RpcNsGroupMbrAddW(
    GroupNameSyntax : CULong,
    GroupName : RPC_WSTR,
    MemberNameSyntax : CULong,
    MemberName : RPC_WSTR) CLong;

external RpcNsGroupMbrRemoveW(
    GroupNameSyntax : CULong,
    GroupName : RPC_WSTR,
    MemberNameSyntax : CULong,
    MemberName : RPC_WSTR) CLong;

external RpcNsGroupMbrInqBeginW(
    GroupNameSyntax : CULong,
    GroupName : RPC_WSTR,
    MemberNameSyntax : CULong,
    InquiryContext : Pointer[RPC_NS_HANDLE]) CLong;

external RpcNsGroupMbrInqNextW(
    InquiryContext : RPC_NS_HANDLE,
    MemberName : Pointer[RPC_WSTR]) CLong;

external RpcNsGroupMbrInqDone(
    InquiryContext : Pointer[RPC_NS_HANDLE]) CLong;

external RpcNsProfileDeleteA(
    ProfileNameSyntax : CULong,
    ProfileName : RPC_CSTR) CLong;

external RpcNsProfileEltAddA(
    ProfileNameSyntax : CULong,
    ProfileName : RPC_CSTR,
    IfId : Pointer[RPC_IF_ID],
    MemberNameSyntax : CULong,
    MemberName : RPC_CSTR,
    Priority : CULong,
    Annotation : RPC_CSTR) CLong;

external RpcNsProfileEltRemoveA(
    ProfileNameSyntax : CULong,
    ProfileName : RPC_CSTR,
    IfId : Pointer[RPC_IF_ID],
    MemberNameSyntax : CULong,
    MemberName : RPC_CSTR) CLong;

external RpcNsProfileEltInqBeginA(
    ProfileNameSyntax : CULong,
    ProfileName : RPC_CSTR,
    InquiryType : CULong,
    IfId : Pointer[RPC_IF_ID],
    VersOption : CULong,
    MemberNameSyntax : CULong,
    MemberName : RPC_CSTR,
    InquiryContext : Pointer[RPC_NS_HANDLE]) CLong;

external RpcNsProfileEltInqNextA(
    InquiryContext : RPC_NS_HANDLE,
    IfId : Pointer[RPC_IF_ID],
    MemberName : Pointer[RPC_CSTR],
    Priority : Pointer[CULong],
    Annotation : Pointer[RPC_CSTR]) CLong;

external RpcNsProfileDeleteW(
    ProfileNameSyntax : CULong,
    ProfileName : RPC_WSTR) CLong;

external RpcNsProfileEltAddW(
    ProfileNameSyntax : CULong,
    ProfileName : RPC_WSTR,
    IfId : Pointer[RPC_IF_ID],
    MemberNameSyntax : CULong,
    MemberName : RPC_WSTR,
    Priority : CULong,
    Annotation : RPC_WSTR) CLong;

external RpcNsProfileEltRemoveW(
    ProfileNameSyntax : CULong,
    ProfileName : RPC_WSTR,
    IfId : Pointer[RPC_IF_ID],
    MemberNameSyntax : CULong,
    MemberName : RPC_WSTR) CLong;

external RpcNsProfileEltInqBeginW(
    ProfileNameSyntax : CULong,
    ProfileName : RPC_WSTR,
    InquiryType : CULong,
    IfId : Pointer[RPC_IF_ID],
    VersOption : CULong,
    MemberNameSyntax : CULong,
    MemberName : RPC_WSTR,
    InquiryContext : Pointer[RPC_NS_HANDLE]) CLong;

external RpcNsProfileEltInqNextW(
    InquiryContext : RPC_NS_HANDLE,
    IfId : Pointer[RPC_IF_ID],
    MemberName : Pointer[RPC_WSTR],
    Priority : Pointer[CULong],
    Annotation : Pointer[RPC_WSTR]) CLong;

external RpcNsProfileEltInqDone(
    InquiryContext : Pointer[RPC_NS_HANDLE]) CLong;

external RpcNsEntryObjectInqBeginA(
    EntryNameSyntax : CULong,
    EntryName : RPC_CSTR,
    InquiryContext : Pointer[RPC_NS_HANDLE]) CLong;

external RpcNsEntryObjectInqBeginW(
    EntryNameSyntax : CULong,
    EntryName : RPC_WSTR,
    InquiryContext : Pointer[RPC_NS_HANDLE]) CLong;

external RpcNsEntryObjectInqNext(
    InquiryContext : RPC_NS_HANDLE,
    ObjUuid : Pointer[UUID]) CLong;

external RpcNsEntryObjectInqDone(
    InquiryContext : Pointer[RPC_NS_HANDLE]) CLong;

external RpcNsEntryExpandNameA(
    EntryNameSyntax : CULong,
    EntryName : RPC_CSTR,
    ExpandedName : Pointer[RPC_CSTR]) CLong;

external RpcNsMgmtBindingUnexportA(
    EntryNameSyntax : CULong,
    EntryName : RPC_CSTR,
    IfId : Pointer[RPC_IF_ID],
    VersOption : CULong,
    ObjectUuidVec : Pointer[UUID_VECTOR]) CLong;

external RpcNsMgmtEntryCreateA(
    EntryNameSyntax : CULong,
    EntryName : RPC_CSTR) CLong;

external RpcNsMgmtEntryDeleteA(
    EntryNameSyntax : CULong,
    EntryName : RPC_CSTR) CLong;

external RpcNsMgmtEntryInqIfIdsA(
    EntryNameSyntax : CULong,
    EntryName : RPC_CSTR,
    IfIdVec : Pointer[Pointer[RPC_IF_ID_VECTOR]]) CLong;

external RpcNsMgmtHandleSetExpAge(
    NsHandle : RPC_NS_HANDLE,
    ExpirationAge : CULong) CLong;

external RpcNsMgmtInqExpAge(
    ExpirationAge : Pointer[CULong]) CLong;

external RpcNsMgmtSetExpAge(
    ExpirationAge : CULong) CLong;

external RpcNsEntryExpandNameW(
    EntryNameSyntax : CULong,
    EntryName : RPC_WSTR,
    ExpandedName : Pointer[RPC_WSTR]) CLong;

external RpcNsMgmtBindingUnexportW(
    EntryNameSyntax : CULong,
    EntryName : RPC_WSTR,
    IfId : Pointer[RPC_IF_ID],
    VersOption : CULong,
    ObjectUuidVec : Pointer[UUID_VECTOR]) CLong;

external RpcNsMgmtEntryCreateW(
    EntryNameSyntax : CULong,
    EntryName : RPC_WSTR) CLong;

external RpcNsMgmtEntryDeleteW(
    EntryNameSyntax : CULong,
    EntryName : RPC_WSTR) CLong;

external RpcNsMgmtEntryInqIfIdsW(
    EntryNameSyntax : CULong,
    EntryName : RPC_WSTR,
    IfIdVec : Pointer[Pointer[RPC_IF_ID_VECTOR]]) CLong;

external RpcNsBindingImportBeginA(
    EntryNameSyntax : CULong,
    EntryName : RPC_CSTR,
    IfSpec : RPC_IF_HANDLE,
    ObjUuid : Pointer[UUID],
    ImportContext : Pointer[RPC_NS_HANDLE]) CLong;

external RpcNsBindingImportBeginW(
    EntryNameSyntax : CULong,
    EntryName : RPC_WSTR,
    IfSpec : RPC_IF_HANDLE,
    ObjUuid : Pointer[UUID],
    ImportContext : Pointer[RPC_NS_HANDLE]) CLong;

external RpcNsBindingImportNext(
    ImportContext : RPC_NS_HANDLE,
    Binding : Pointer[RPC_BINDING_HANDLE]) CLong;

external RpcNsBindingImportDone(
    ImportContext : Pointer[RPC_NS_HANDLE]) CLong;

external RpcNsBindingSelect(
    BindingVec : Pointer[RPC_BINDING_VECTOR],
    Binding : Pointer[RPC_BINDING_HANDLE]) CLong;

alias RpcNotificationTypeNone = 0;
alias RpcNotificationTypeEvent = 1;
alias RpcNotificationTypeApc = 2;
alias RpcNotificationTypeIoc = 3;
alias RpcNotificationTypeHwnd = 4;
alias RpcNotificationTypeCallback = 5;

alias RPC_NOTIFICATION_TYPES = Int;

alias RpcCallComplete = 0;
alias RpcSendComplete = 1;
alias RpcReceiveComplete = 2;

alias RPC_ASYNC_EVENT = Int;

alias PFN_RPCNOTIFICATION_ROUTINE = CCodePointer[(Pointer[Struct__RPC_ASYNC_STATE],RawPointer,Int),()];

record Struct__RPC_ASYNC_STATE (
    Size : UInt,
    Signature : CULong,
    Lock : CLong,
    Flags : CULong,
    StubInfo : RawPointer,
    UserInfo : RawPointer,
    RuntimeInfo : RawPointer,
    Event : RPC_ASYNC_EVENT,
    NotificationType : RPC_NOTIFICATION_TYPES,
    u : AUnionType,
    Reserved : Array[Int64,4],
);

alias RPC_ASYNC_STATE = Struct__RPC_ASYNC_STATE;

alias PRPC_ASYNC_STATE = Pointer[Struct__RPC_ASYNC_STATE];

external RpcAsyncInitializeHandle(
    pAsync : PRPC_ASYNC_STATE,
    Size : UInt) CLong;

external RpcAsyncRegisterInfo(
    pAsync : PRPC_ASYNC_STATE) CLong;

external RpcAsyncGetCallStatus(
    pAsync : PRPC_ASYNC_STATE) CLong;

external RpcAsyncCompleteCall(
    pAsync : PRPC_ASYNC_STATE,
    Reply : RawPointer) CLong;

external RpcAsyncAbortCall(
    pAsync : PRPC_ASYNC_STATE,
    ExceptionCode : CULong) CLong;

external RpcAsyncCancelCall(
    pAsync : PRPC_ASYNC_STATE,
    fAbort : Int) CLong;

external RpcAsyncCleanupThread(
    dwTimeout : CULong) CLong;

alias eeptAnsiString = 1;
alias eeptUnicodeString = 2;
alias eeptLongVal = 3;
alias eeptShortVal = 4;
alias eeptPointerVal = 5;
alias eeptNone = 6;
alias eeptBinary = 7;

alias ExtendedErrorParamTypes = Int;

record Struct_tagBinaryParam (
    Buffer : RawPointer,
    Size : Short,
);

alias BinaryParam = Struct_tagBinaryParam;

record Struct_tagRPC_EE_INFO_PARAM (
    ParameterType : ExtendedErrorParamTypes,
    u : AUnionType,
);

alias RPC_EE_INFO_PARAM = Struct_tagRPC_EE_INFO_PARAM;

record Struct_tagRPC_EXTENDED_ERROR_INFO (
    Version : CULong,
    ComputerName : LPWSTR,
    ProcessID : CULong,
    u : AUnionType,
    GeneratingComponent : CULong,
    Status : CULong,
    DetectionLocation : UShort,
    Flags : UShort,
    NumberOfParameters : Int,
    Parameters : Array[RPC_EE_INFO_PARAM,4],
);

alias RPC_EXTENDED_ERROR_INFO = Struct_tagRPC_EXTENDED_ERROR_INFO;

record Struct_tagRPC_ERROR_ENUM_HANDLE (
    Signature : CULong,
    CurrentPos : RawPointer,
    Head : RawPointer,
);

alias RPC_ERROR_ENUM_HANDLE = Struct_tagRPC_ERROR_ENUM_HANDLE;

external RpcErrorStartEnumeration(
    EnumHandle : Pointer[RPC_ERROR_ENUM_HANDLE]) CLong;

external RpcErrorGetNextRecord(
    EnumHandle : Pointer[RPC_ERROR_ENUM_HANDLE],
    CopyStrings : Int,
    ErrorInfo : Pointer[RPC_EXTENDED_ERROR_INFO]) CLong;

external RpcErrorEndEnumeration(
    EnumHandle : Pointer[RPC_ERROR_ENUM_HANDLE]) CLong;

external RpcErrorResetEnumeration(
    EnumHandle : Pointer[RPC_ERROR_ENUM_HANDLE]) CLong;

external RpcErrorGetNumberOfRecords(
    EnumHandle : Pointer[RPC_ERROR_ENUM_HANDLE],
    Records : Pointer[Int]) CLong;

external RpcErrorSaveErrorInfo(
    EnumHandle : Pointer[RPC_ERROR_ENUM_HANDLE],
    ErrorBlob : Pointer[PVOID],
    BlobSize : Pointer[UInt64]) CLong;

external RpcErrorLoadErrorInfo(
    ErrorBlob : PVOID,
    BlobSize : UInt64,
    EnumHandle : Pointer[RPC_ERROR_ENUM_HANDLE]) CLong;

external RpcErrorAddRecord(
    ErrorInfo : Pointer[RPC_EXTENDED_ERROR_INFO]) CLong;

external RpcErrorClearInformation();

external RpcGetAuthorizationContextForClient(
    ClientBinding : RPC_BINDING_HANDLE,
    ImpersonateOnReturn : Int,
    Reserved1 : PVOID,
    pExpirationTime : PLARGE_INTEGER,
    Reserved2 : LUID,
    Reserved3 : CULong,
    Reserved4 : PVOID,
    pAuthzClientContext : Pointer[PVOID]) CLong;

external RpcFreeAuthorizationContext(
    pAuthzClientContext : Pointer[PVOID]) CLong;

external RpcSsContextLockExclusive(
    ServerBindingHandle : RPC_BINDING_HANDLE,
    UserContext : PVOID) CLong;

external RpcSsContextLockShared(
    ServerBindingHandle : RPC_BINDING_HANDLE,
    UserContext : PVOID) CLong;

record Struct_tagRPC_CALL_ATTRIBUTES_V1_W (
    Version : UInt,
    Flags : CULong,
    ServerPrincipalNameBufferLength : CULong,
    ServerPrincipalName : Pointer[UShort],
    ClientPrincipalNameBufferLength : CULong,
    ClientPrincipalName : Pointer[UShort],
    AuthenticationLevel : CULong,
    AuthenticationService : CULong,
    NullSession : Int,
);

alias RPC_CALL_ATTRIBUTES_V1_W = Struct_tagRPC_CALL_ATTRIBUTES_V1_W;

record Struct_tagRPC_CALL_ATTRIBUTES_V1_A (
    Version : UInt,
    Flags : CULong,
    ServerPrincipalNameBufferLength : CULong,
    ServerPrincipalName : Pointer[CUChar],
    ClientPrincipalNameBufferLength : CULong,
    ClientPrincipalName : Pointer[CUChar],
    AuthenticationLevel : CULong,
    AuthenticationService : CULong,
    NullSession : Int,
);

alias RPC_CALL_ATTRIBUTES_V1_A = Struct_tagRPC_CALL_ATTRIBUTES_V1_A;

external RpcServerInqCallAttributesW(
    ClientBinding : RPC_BINDING_HANDLE,
    RpcCallAttributes : RawPointer) CLong;

external RpcServerInqCallAttributesA(
    ClientBinding : RPC_BINDING_HANDLE,
    RpcCallAttributes : RawPointer) CLong;

alias RPC_CALL_ATTRIBUTES = RPC_CALL_ATTRIBUTES_V1_A;

external I_RpcAsyncSetHandle(
    Message : PRPC_MESSAGE,
    pAsync : PRPC_ASYNC_STATE) CLong;

external I_RpcAsyncAbortCall(
    pAsync : PRPC_ASYNC_STATE,
    ExceptionCode : CULong) CLong;

external I_RpcExceptionFilter(
    ExceptionCode : CULong) Int;

alias RPC_ASYNC_NOTIFICATION_INFO = AUnionType;

alias PRPC_ASYNC_NOTIFICATION_INFO = OpaquePointer;

external RpcBindingBind(
    pAsync : PRPC_ASYNC_STATE,
    Binding : RPC_BINDING_HANDLE,
    IfSpec : RPC_IF_HANDLE) CLong;

external RpcBindingUnbind(
    Binding : RPC_BINDING_HANDLE) CLong;

alias rctInvalid = 0;
alias rctNormal = 1;
alias rctTraining = 2;
alias rctGuaranteed = 3;

alias RpcCallType = Int;

alias rlafInvalid = 0;
alias rlafIPv4 = 1;
alias rlafIPv6 = 2;

alias RpcLocalAddressFormat = Int;

alias RpcNotificationCallNone = 0;
alias RpcNotificationClientDisconnect = 1;
alias RpcNotificationCallCancel = 2;

alias RPC_NOTIFICATIONS = Int;

alias rcclInvalid = 0;
alias rcclLocal = 1;
alias rcclRemote = 2;
alias rcclClientUnknownLocality = 3;

alias RpcCallClientLocality = Int;

external RpcServerSubscribeForNotification(
    Binding : RPC_BINDING_HANDLE,
    Notification : CULong,
    NotificationType : RPC_NOTIFICATION_TYPES,
    NotificationInfo : Pointer[RPC_ASYNC_NOTIFICATION_INFO]) CLong;

external RpcServerUnsubscribeForNotification(
    Binding : RPC_BINDING_HANDLE,
    Notification : RPC_NOTIFICATIONS,
    NotificationsQueued : Pointer[CULong]) CLong;

record Struct_HDROP__ (
    unused : Int,
);

alias HDROP = Pointer[Struct_HDROP__];

external DragQueryFileA(
    argument0 : HDROP,
    argument1 : UInt,
    argument2 : LPSTR,
    argument3 : UInt) UInt;

external DragQueryFileW(
    argument0 : HDROP,
    argument1 : UInt,
    argument2 : LPWSTR,
    argument3 : UInt) UInt;

external DragQueryPoint(
    argument0 : HDROP,
    argument1 : LPPOINT) Int;

external DragFinish(
    argument0 : HDROP);

external DragAcceptFiles(
    argument0 : HWND,
    argument1 : Int);

external ShellExecuteA(
    hwnd : HWND,
    lpOperation : LPCSTR,
    lpFile : LPCSTR,
    lpParameters : LPCSTR,
    lpDirectory : LPCSTR,
    nShowCmd : Int) HINSTANCE;

external ShellExecuteW(
    hwnd : HWND,
    lpOperation : LPCWSTR,
    lpFile : LPCWSTR,
    lpParameters : LPCWSTR,
    lpDirectory : LPCWSTR,
    nShowCmd : Int) HINSTANCE;

external FindExecutableA(
    lpFile : LPCSTR,
    lpDirectory : LPCSTR,
    lpResult : LPSTR) HINSTANCE;

external FindExecutableW(
    lpFile : LPCWSTR,
    lpDirectory : LPCWSTR,
    lpResult : LPWSTR) HINSTANCE;

external CommandLineToArgvW(
    lpCmdLine : LPCWSTR,
    pNumArgs : Pointer[Int]) Pointer[LPWSTR];

external ShellAboutA(
    hWnd : HWND,
    szApp : LPCSTR,
    szOtherStuff : LPCSTR,
    hIcon : HICON) Int;

external ShellAboutW(
    hWnd : HWND,
    szApp : LPCWSTR,
    szOtherStuff : LPCWSTR,
    hIcon : HICON) Int;

external DuplicateIcon(
    hInst : HINSTANCE,
    hIcon : HICON) HICON;

external ExtractAssociatedIconA(
    hInst : HINSTANCE,
    lpIconPath : LPSTR,
    lpiIcon : LPWORD) HICON;

external ExtractAssociatedIconW(
    hInst : HINSTANCE,
    lpIconPath : LPWSTR,
    lpiIcon : LPWORD) HICON;

external ExtractIconA(
    hInst : HINSTANCE,
    lpszExeFileName : LPCSTR,
    nIconIndex : UInt) HICON;

external ExtractIconW(
    hInst : HINSTANCE,
    lpszExeFileName : LPCWSTR,
    nIconIndex : UInt) HICON;

record Struct__DRAGINFOA (
    uSize : UInt,
    pt : POINT,
    fNC : Int,
    lpFileList : LPSTR,
    grfKeyState : CULong,
);

alias DRAGINFOA = Struct__DRAGINFOA;

alias LPDRAGINFOA = Pointer[Struct__DRAGINFOA];

record Struct__DRAGINFOW (
    uSize : UInt,
    pt : POINT,
    fNC : Int,
    lpFileList : LPWSTR,
    grfKeyState : CULong,
);

alias DRAGINFOW = Struct__DRAGINFOW;

alias LPDRAGINFOW = Pointer[Struct__DRAGINFOW];

alias DRAGINFO = DRAGINFOA;

alias LPDRAGINFO = LPDRAGINFOA;

record Struct__AppBarData (
    cbSize : CULong,
    hWnd : HWND,
    uCallbackMessage : UInt,
    uEdge : UInt,
    rc : RECT,
    lParam : Int64,
);

alias APPBARDATA = Struct__AppBarData;

alias PAPPBARDATA = Pointer[Struct__AppBarData];

external SHAppBarMessage(
    dwMessage : CULong,
    pData : PAPPBARDATA) UInt64;

external DoEnvironmentSubstA(
    szString : LPSTR,
    cchString : UInt) CULong;

external DoEnvironmentSubstW(
    szString : LPWSTR,
    cchString : UInt) CULong;

external ExtractIconExA(
    lpszFile : LPCSTR,
    nIconIndex : Int,
    phiconLarge : Pointer[HICON],
    phiconSmall : Pointer[HICON],
    nIcons : UInt) UInt;

external ExtractIconExW(
    lpszFile : LPCWSTR,
    nIconIndex : Int,
    phiconLarge : Pointer[HICON],
    phiconSmall : Pointer[HICON],
    nIcons : UInt) UInt;

alias FILEOP_FLAGS = UShort;

alias PRINTEROP_FLAGS = UShort;

record Struct__SHFILEOPSTRUCTA (
    hwnd : HWND,
    wFunc : UInt,
    pFrom : LPCSTR,
    pTo : LPCSTR,
    fFlags : UShort,
    fAnyOperationsAborted : Int,
    hNameMappings : LPVOID,
    lpszProgressTitle : LPCSTR,
);

alias SHFILEOPSTRUCTA = Struct__SHFILEOPSTRUCTA;

alias LPSHFILEOPSTRUCTA = Pointer[Struct__SHFILEOPSTRUCTA];

record Struct__SHFILEOPSTRUCTW (
    hwnd : HWND,
    wFunc : UInt,
    pFrom : LPCWSTR,
    pTo : LPCWSTR,
    fFlags : UShort,
    fAnyOperationsAborted : Int,
    hNameMappings : LPVOID,
    lpszProgressTitle : LPCWSTR,
);

alias SHFILEOPSTRUCTW = Struct__SHFILEOPSTRUCTW;

alias LPSHFILEOPSTRUCTW = Pointer[Struct__SHFILEOPSTRUCTW];

alias SHFILEOPSTRUCT = SHFILEOPSTRUCTA;

alias LPSHFILEOPSTRUCT = LPSHFILEOPSTRUCTA;

external SHFileOperationA(
    lpFileOp : LPSHFILEOPSTRUCTA) Int;

external SHFileOperationW(
    lpFileOp : LPSHFILEOPSTRUCTW) Int;

external SHFreeNameMappings(
    hNameMappings : HANDLE);

record Struct__SHNAMEMAPPINGA (
    pszOldPath : LPSTR,
    pszNewPath : LPSTR,
    cchOldPath : Int,
    cchNewPath : Int,
);

alias SHNAMEMAPPINGA = Struct__SHNAMEMAPPINGA;

alias LPSHNAMEMAPPINGA = Pointer[Struct__SHNAMEMAPPINGA];

record Struct__SHNAMEMAPPINGW (
    pszOldPath : LPWSTR,
    pszNewPath : LPWSTR,
    cchOldPath : Int,
    cchNewPath : Int,
);

alias SHNAMEMAPPINGW = Struct__SHNAMEMAPPINGW;

alias LPSHNAMEMAPPINGW = Pointer[Struct__SHNAMEMAPPINGW];

alias SHNAMEMAPPING = SHNAMEMAPPINGA;

alias LPSHNAMEMAPPING = LPSHNAMEMAPPINGA;

record Struct__SHELLEXECUTEINFOA (
    cbSize : CULong,
    fMask : CULong,
    hwnd : HWND,
    lpVerb : LPCSTR,
    lpFile : LPCSTR,
    lpParameters : LPCSTR,
    lpDirectory : LPCSTR,
    nShow : Int,
    hInstApp : HINSTANCE,
    lpIDList : LPVOID,
    lpClass : LPCSTR,
    hkeyClass : HKEY,
    dwHotKey : CULong,
    unnamed_field13 : AUnionType,
    hProcess : HANDLE,
);

alias SHELLEXECUTEINFOA = Struct__SHELLEXECUTEINFOA;

alias LPSHELLEXECUTEINFOA = Pointer[Struct__SHELLEXECUTEINFOA];

record Struct__SHELLEXECUTEINFOW (
    cbSize : CULong,
    fMask : CULong,
    hwnd : HWND,
    lpVerb : LPCWSTR,
    lpFile : LPCWSTR,
    lpParameters : LPCWSTR,
    lpDirectory : LPCWSTR,
    nShow : Int,
    hInstApp : HINSTANCE,
    lpIDList : LPVOID,
    lpClass : LPCWSTR,
    hkeyClass : HKEY,
    dwHotKey : CULong,
    unnamed_field13 : AUnionType,
    hProcess : HANDLE,
);

alias SHELLEXECUTEINFOW = Struct__SHELLEXECUTEINFOW;

alias LPSHELLEXECUTEINFOW = Pointer[Struct__SHELLEXECUTEINFOW];

alias SHELLEXECUTEINFO = SHELLEXECUTEINFOA;

alias LPSHELLEXECUTEINFO = LPSHELLEXECUTEINFOA;

external ShellExecuteExA(
    lpExecInfo : LPSHELLEXECUTEINFOA) Int;

external ShellExecuteExW(
    lpExecInfo : LPSHELLEXECUTEINFOW) Int;

external WinExecErrorA(
    hwnd : HWND,
    error : Int,
    lpstrFileName : LPCSTR,
    lpstrTitle : LPCSTR);

external WinExecErrorW(
    hwnd : HWND,
    error : Int,
    lpstrFileName : LPCWSTR,
    lpstrTitle : LPCWSTR);

record Struct__SHCREATEPROCESSINFOW (
    cbSize : CULong,
    fMask : CULong,
    hwnd : HWND,
    pszFile : LPCWSTR,
    pszParameters : LPCWSTR,
    pszCurrentDirectory : LPCWSTR,
    hUserToken : HANDLE,
    lpProcessAttributes : LPSECURITY_ATTRIBUTES,
    lpThreadAttributes : LPSECURITY_ATTRIBUTES,
    bInheritHandles : Int,
    dwCreationFlags : CULong,
    lpStartupInfo : LPSTARTUPINFOW,
    lpProcessInformation : LPPROCESS_INFORMATION,
);

alias SHCREATEPROCESSINFOW = Struct__SHCREATEPROCESSINFOW;

alias PSHCREATEPROCESSINFOW = Pointer[Struct__SHCREATEPROCESSINFOW];

external SHCreateProcessAsUserW(
    pscpi : PSHCREATEPROCESSINFOW) Int;

record Struct__SHQUERYRBINFO (
    cbSize : CULong,
    i64Size : Int64,
    i64NumItems : Int64,
);

alias SHQUERYRBINFO = Struct__SHQUERYRBINFO;

alias LPSHQUERYRBINFO = Pointer[Struct__SHQUERYRBINFO];

external SHQueryRecycleBinA(
    pszRootPath : LPCSTR,
    pSHQueryRBInfo : LPSHQUERYRBINFO) CLong;

external SHQueryRecycleBinW(
    pszRootPath : LPCWSTR,
    pSHQueryRBInfo : LPSHQUERYRBINFO) CLong;

external SHEmptyRecycleBinA(
    hwnd : HWND,
    pszRootPath : LPCSTR,
    dwFlags : CULong) CLong;

external SHEmptyRecycleBinW(
    hwnd : HWND,
    pszRootPath : LPCWSTR,
    dwFlags : CULong) CLong;

record Struct__NOTIFYICONDATAA (
    cbSize : CULong,
    hWnd : HWND,
    uID : UInt,
    uFlags : UInt,
    uCallbackMessage : UInt,
    hIcon : HICON,
    szTip : Array[CChar,128],
    dwState : CULong,
    dwStateMask : CULong,
    szInfo : Array[CChar,256],
    unnamed_field10 : AUnionType,
    szInfoTitle : Array[CChar,64],
    dwInfoFlags : CULong,
);

alias NOTIFYICONDATAA = Struct__NOTIFYICONDATAA;

alias PNOTIFYICONDATAA = Pointer[Struct__NOTIFYICONDATAA];

record Struct__NOTIFYICONDATAW (
    cbSize : CULong,
    hWnd : HWND,
    uID : UInt,
    uFlags : UInt,
    uCallbackMessage : UInt,
    hIcon : HICON,
    szTip : Array[UShort,128],
    dwState : CULong,
    dwStateMask : CULong,
    szInfo : Array[UShort,256],
    unnamed_field10 : AUnionType,
    szInfoTitle : Array[UShort,64],
    dwInfoFlags : CULong,
);

alias NOTIFYICONDATAW = Struct__NOTIFYICONDATAW;

alias PNOTIFYICONDATAW = Pointer[Struct__NOTIFYICONDATAW];

alias NOTIFYICONDATA = NOTIFYICONDATAA;

alias PNOTIFYICONDATA = PNOTIFYICONDATAA;

external Shell_NotifyIconA(
    dwMessage : CULong,
    lpData : PNOTIFYICONDATAA) Int;

external Shell_NotifyIconW(
    dwMessage : CULong,
    lpData : PNOTIFYICONDATAW) Int;

record Struct__SHFILEINFOA (
    hIcon : HICON,
    iIcon : Int,
    dwAttributes : CULong,
    szDisplayName : Array[CChar,260],
    szTypeName : Array[CChar,80],
);

alias SHFILEINFOA = Struct__SHFILEINFOA;

record Struct__SHFILEINFOW (
    hIcon : HICON,
    iIcon : Int,
    dwAttributes : CULong,
    szDisplayName : Array[UShort,260],
    szTypeName : Array[UShort,80],
);

alias SHFILEINFOW = Struct__SHFILEINFOW;

alias SHFILEINFO = SHFILEINFOA;

external SHGetFileInfoA(
    pszPath : LPCSTR,
    dwFileAttributes : CULong,
    psfi : Pointer[SHFILEINFOA],
    cbFileInfo : UInt,
    uFlags : UInt) UInt64;

external SHGetFileInfoW(
    pszPath : LPCWSTR,
    dwFileAttributes : CULong,
    psfi : Pointer[SHFILEINFOW],
    cbFileInfo : UInt,
    uFlags : UInt) UInt64;

external SHGetDiskFreeSpaceExA(
    pszDirectoryName : LPCSTR,
    pulFreeBytesAvailableToCaller : Pointer[ULARGE_INTEGER],
    pulTotalNumberOfBytes : Pointer[ULARGE_INTEGER],
    pulTotalNumberOfFreeBytes : Pointer[ULARGE_INTEGER]) Int;

external SHGetDiskFreeSpaceExW(
    pszDirectoryName : LPCWSTR,
    pulFreeBytesAvailableToCaller : Pointer[ULARGE_INTEGER],
    pulTotalNumberOfBytes : Pointer[ULARGE_INTEGER],
    pulTotalNumberOfFreeBytes : Pointer[ULARGE_INTEGER]) Int;

external SHGetNewLinkInfoA(
    pszLinkTo : LPCSTR,
    pszDir : LPCSTR,
    pszName : LPSTR,
    pfMustCopy : Pointer[Int],
    uFlags : UInt) Int;

external SHGetNewLinkInfoW(
    pszLinkTo : LPCWSTR,
    pszDir : LPCWSTR,
    pszName : LPWSTR,
    pfMustCopy : Pointer[Int],
    uFlags : UInt) Int;

external SHInvokePrinterCommandA(
    hwnd : HWND,
    uAction : UInt,
    lpBuf1 : LPCSTR,
    lpBuf2 : LPCSTR,
    fModal : Int) Int;

external SHInvokePrinterCommandW(
    hwnd : HWND,
    uAction : UInt,
    lpBuf1 : LPCWSTR,
    lpBuf2 : LPCWSTR,
    fModal : Int) Int;

external SHLoadNonloadedIconOverlayIdentifiers() CLong;

external SHIsFileAvailableOffline(
    pwszPath : LPCWSTR,
    pdwStatus : LPDWORD) CLong;

external SHSetLocalizedName(
    pszPath : LPWSTR,
    pszResModule : LPCWSTR,
    idsRes : Int) CLong;

record Struct__PERF_DATA_BLOCK (
    Signature : Array[UShort,4],
    LittleEndian : CULong,
    Version : CULong,
    Revision : CULong,
    TotalByteLength : CULong,
    HeaderLength : CULong,
    NumObjectTypes : CULong,
    DefaultObject : CLong,
    SystemTime : SYSTEMTIME,
    PerfTime : LARGE_INTEGER,
    PerfFreq : LARGE_INTEGER,
    PerfTime100nSec : LARGE_INTEGER,
    SystemNameLength : CULong,
    SystemNameOffset : CULong,
);

alias PERF_DATA_BLOCK = Struct__PERF_DATA_BLOCK;

alias PPERF_DATA_BLOCK = Pointer[Struct__PERF_DATA_BLOCK];

record Struct__PERF_OBJECT_TYPE (
    TotalByteLength : CULong,
    DefinitionLength : CULong,
    HeaderLength : CULong,
    ObjectNameTitleIndex : CULong,
    ObjectNameTitle : CULong,
    ObjectHelpTitleIndex : CULong,
    ObjectHelpTitle : CULong,
    DetailLevel : CULong,
    NumCounters : CULong,
    DefaultCounter : CLong,
    NumInstances : CLong,
    CodePage : CULong,
    PerfTime : LARGE_INTEGER,
    PerfFreq : LARGE_INTEGER,
);

alias PERF_OBJECT_TYPE = Struct__PERF_OBJECT_TYPE;

alias PPERF_OBJECT_TYPE = Pointer[Struct__PERF_OBJECT_TYPE];

record Struct__PERF_COUNTER_DEFINITION (
    ByteLength : CULong,
    CounterNameTitleIndex : CULong,
    CounterNameTitle : CULong,
    CounterHelpTitleIndex : CULong,
    CounterHelpTitle : CULong,
    DefaultScale : CLong,
    DetailLevel : CULong,
    CounterType : CULong,
    CounterSize : CULong,
    CounterOffset : CULong,
);

alias PERF_COUNTER_DEFINITION = Struct__PERF_COUNTER_DEFINITION;

alias PPERF_COUNTER_DEFINITION = Pointer[Struct__PERF_COUNTER_DEFINITION];

record Struct__PERF_INSTANCE_DEFINITION (
    ByteLength : CULong,
    ParentObjectTitleIndex : CULong,
    ParentObjectInstance : CULong,
    UniqueID : CLong,
    NameOffset : CULong,
    NameLength : CULong,
);

alias PERF_INSTANCE_DEFINITION = Struct__PERF_INSTANCE_DEFINITION;

alias PPERF_INSTANCE_DEFINITION = Pointer[Struct__PERF_INSTANCE_DEFINITION];

record Struct__PERF_COUNTER_BLOCK (
    ByteLength : CULong,
);

alias PERF_COUNTER_BLOCK = Struct__PERF_COUNTER_BLOCK;

alias PPERF_COUNTER_BLOCK = Pointer[Struct__PERF_COUNTER_BLOCK];

record Struct_timeval (
    tv_sec : CLong,
    tv_usec : CLong,
);

alias u_char = CUChar;

alias u_short = UShort;

alias u_int = UInt;

alias u_long = CULong;

alias u_int64 = UInt64;

record Struct_in_addr (
    S_un : AUnionType,
);

alias IN_ADDR = Struct_in_addr;

alias PIN_ADDR = Pointer[Struct_in_addr];

alias LPIN_ADDR = Pointer[Struct_in_addr];

alias SOCKET = Int64;

record Struct_fd_set (
    fd_count : UInt,
    fd_array : Array[Int64,64],
);

alias fd_set = Struct_fd_set;

alias FD_SET = Struct_fd_set;

alias PFD_SET = Pointer[Struct_fd_set];

alias LPFD_SET = Pointer[Struct_fd_set];

record Struct_hostent (
    h_name : Pointer[CChar],
    h_aliases : Pointer[Pointer[CChar]],
    h_addrtype : Short,
    h_length : Short,
    h_addr_list : Pointer[Pointer[CChar]],
);

record Struct_netent (
    n_name : Pointer[CChar],
    n_aliases : Pointer[Pointer[CChar]],
    n_addrtype : Short,
    n_net : CULong,
);

record Struct_servent (
    s_name : Pointer[CChar],
    s_aliases : Pointer[Pointer[CChar]],
    s_proto : Pointer[CChar],
    s_port : Short,
);

record Struct_protoent (
    p_name : Pointer[CChar],
    p_aliases : Pointer[Pointer[CChar]],
    p_proto : Short,
);

alias HOSTENT = Struct_hostent;

alias PHOSTENT = Pointer[Struct_hostent];

alias LPHOSTENT = Pointer[Struct_hostent];

alias SERVENT = Struct_servent;

alias PSERVENT = Pointer[Struct_servent];

alias LPSERVENT = Pointer[Struct_servent];

alias PROTOENT = Struct_protoent;

alias PPROTOENT = Pointer[Struct_protoent];

alias LPPROTOENT = Pointer[Struct_protoent];

record Struct_sockaddr_in (
    sin_family : Short,
    sin_port : UShort,
    sin_addr : Struct_in_addr,
    sin_zero : Array[CChar,8],
);

record Struct_sockaddr (
    sa_family : UShort,
    sa_data : Array[CChar,14],
);

record Struct_sockproto (
    sp_family : UShort,
    sp_protocol : UShort,
);

record Struct_linger (
    l_onoff : UShort,
    l_linger : UShort,
);

alias SOCKADDR = Struct_sockaddr;

alias PSOCKADDR = Pointer[Struct_sockaddr];

alias LPSOCKADDR = Pointer[Struct_sockaddr];

alias SOCKADDR_IN = Struct_sockaddr_in;

alias PSOCKADDR_IN = Pointer[Struct_sockaddr_in];

alias LPSOCKADDR_IN = Pointer[Struct_sockaddr_in];

alias LINGER = Struct_linger;

alias PLINGER = Pointer[Struct_linger];

alias LPLINGER = Pointer[Struct_linger];

alias TIMEVAL = Struct_timeval;

alias PTIMEVAL = Pointer[Struct_timeval];

alias LPTIMEVAL = Pointer[Struct_timeval];

record Struct_ip_mreq (
    imr_multiaddr : Struct_in_addr,
    imr_interface : Struct_in_addr,
);

record Struct_WSAData (
    wVersion : UShort,
    wHighVersion : UShort,
    iMaxSockets : UShort,
    iMaxUdpDg : UShort,
    lpVendorInfo : Pointer[CChar],
    szDescription : Array[CChar,257],
    szSystemStatus : Array[CChar,129],
);

alias WSADATA = Struct_WSAData;

alias LPWSADATA = Pointer[Struct_WSAData];

record Struct__TRANSMIT_FILE_BUFFERS (
    Head : LPVOID,
    HeadLength : CULong,
    Tail : LPVOID,
    TailLength : CULong,
);

alias TRANSMIT_FILE_BUFFERS = Struct__TRANSMIT_FILE_BUFFERS;

alias PTRANSMIT_FILE_BUFFERS = Pointer[Struct__TRANSMIT_FILE_BUFFERS];

alias LPTRANSMIT_FILE_BUFFERS = Pointer[Struct__TRANSMIT_FILE_BUFFERS];

external __WSAFDIsSet(
    argument0 : Int64,
    argument1 : Pointer[fd_set]) Int;

external accept(
    s : Int64,
    addr : Pointer[Struct_sockaddr],
    addrlen : Pointer[Int]) Int64;

external bind(
    s : Int64,
    name : Pointer[Struct_sockaddr],
    namelen : Int) Int;

external closesocket(
    s : Int64) Int;

external connect(
    s : Int64,
    name : Pointer[Struct_sockaddr],
    namelen : Int) Int;

external ioctlsocket(
    s : Int64,
    cmd : CLong,
    argp : Pointer[CULong]) Int;

external getpeername(
    s : Int64,
    name : Pointer[Struct_sockaddr],
    namelen : Pointer[Int]) Int;

external getsockname(
    s : Int64,
    name : Pointer[Struct_sockaddr],
    namelen : Pointer[Int]) Int;

external getsockopt(
    s : Int64,
    level : Int,
    optname : Int,
    optval : Pointer[CChar],
    optlen : Pointer[Int]) Int;

external htonl(
    hostlong : CULong) CULong;

external htons(
    hostshort : UShort) UShort;

external inet_addr(
    cp : Pointer[CChar]) CULong;

external inet_ntoa(
    in_ : Struct_in_addr) Pointer[CChar];

external listen(
    s : Int64,
    backlog : Int) Int;

external ntohl(
    netlong : CULong) CULong;

external ntohs(
    netshort : UShort) UShort;

external recv(
    s : Int64,
    buf : Pointer[CChar],
    len : Int,
    flags : Int) Int;

external recvfrom(
    s : Int64,
    buf : Pointer[CChar],
    len : Int,
    flags : Int,
    from : Pointer[Struct_sockaddr],
    fromlen : Pointer[Int]) Int;

external select(
    nfds : Int,
    readfds : Pointer[fd_set],
    writefds : Pointer[fd_set],
    exceptfds : Pointer[fd_set],
    timeout : Pointer[Struct_timeval]) Int;

external send(
    s : Int64,
    buf : Pointer[CChar],
    len : Int,
    flags : Int) Int;

external sendto(
    s : Int64,
    buf : Pointer[CChar],
    len : Int,
    flags : Int,
    to : Pointer[Struct_sockaddr],
    tolen : Int) Int;

external setsockopt(
    s : Int64,
    level : Int,
    optname : Int,
    optval : Pointer[CChar],
    optlen : Int) Int;

external shutdown(
    s : Int64,
    how : Int) Int;

external socket(
    af : Int,
    type : Int,
    protocol : Int) Int64;

external gethostbyaddr(
    addr : Pointer[CChar],
    len : Int,
    type : Int) Pointer[Struct_hostent];

external gethostbyname(
    name : Pointer[CChar]) Pointer[Struct_hostent];

external gethostname(
    name : Pointer[CChar],
    namelen : Int) Int;

external getservbyport(
    port : Int,
    proto : Pointer[CChar]) Pointer[Struct_servent];

external getservbyname(
    name : Pointer[CChar],
    proto : Pointer[CChar]) Pointer[Struct_servent];

external getprotobynumber(
    number : Int) Pointer[Struct_protoent];

external getprotobyname(
    name : Pointer[CChar]) Pointer[Struct_protoent];

external WSAStartup(
    wVersionRequested : UShort,
    lpWSAData : LPWSADATA) Int;

external WSACleanup() Int;

external WSASetLastError(
    iError : Int);

external WSAGetLastError() Int;

external WSAIsBlocking() Int;

external WSAUnhookBlockingHook() Int;

external WSASetBlockingHook(
    lpBlockFunc : FARPROC) FARPROC;

external WSACancelBlockingCall() Int;

external WSAAsyncGetServByName(
    hWnd : HWND,
    wMsg : UInt,
    name : Pointer[CChar],
    proto : Pointer[CChar],
    buf : Pointer[CChar],
    buflen : Int) HANDLE;

external WSAAsyncGetServByPort(
    hWnd : HWND,
    wMsg : UInt,
    port : Int,
    proto : Pointer[CChar],
    buf : Pointer[CChar],
    buflen : Int) HANDLE;

external WSAAsyncGetProtoByName(
    hWnd : HWND,
    wMsg : UInt,
    name : Pointer[CChar],
    buf : Pointer[CChar],
    buflen : Int) HANDLE;

external WSAAsyncGetProtoByNumber(
    hWnd : HWND,
    wMsg : UInt,
    number : Int,
    buf : Pointer[CChar],
    buflen : Int) HANDLE;

external WSAAsyncGetHostByName(
    hWnd : HWND,
    wMsg : UInt,
    name : Pointer[CChar],
    buf : Pointer[CChar],
    buflen : Int) HANDLE;

external WSAAsyncGetHostByAddr(
    hWnd : HWND,
    wMsg : UInt,
    addr : Pointer[CChar],
    len : Int,
    type : Int,
    buf : Pointer[CChar],
    buflen : Int) HANDLE;

external WSACancelAsyncRequest(
    hAsyncTaskHandle : HANDLE) Int;

external WSAAsyncSelect(
    s : Int64,
    hWnd : HWND,
    wMsg : UInt,
    lEvent : CLong) Int;

external WSARecvEx(
    s : Int64,
    buf : Pointer[CChar],
    len : Int,
    flags : Pointer[Int]) Int;

external TransmitFile(
    hSocket : Int64,
    hFile : HANDLE,
    nNumberOfBytesToWrite : CULong,
    nNumberOfBytesPerSend : CULong,
    lpOverlapped : LPOVERLAPPED,
    lpTransmitBuffers : LPTRANSMIT_FILE_BUFFERS,
    dwReserved : CULong) Int;

external AcceptEx(
    sListenSocket : Int64,
    sAcceptSocket : Int64,
    lpOutputBuffer : PVOID,
    dwReceiveDataLength : CULong,
    dwLocalAddressLength : CULong,
    dwRemoteAddressLength : CULong,
    lpdwBytesReceived : LPDWORD,
    lpOverlapped : LPOVERLAPPED) Int;

external GetAcceptExSockaddrs(
    lpOutputBuffer : PVOID,
    dwReceiveDataLength : CULong,
    dwLocalAddressLength : CULong,
    dwRemoteAddressLength : CULong,
    LocalSockaddr : Pointer[Pointer[Struct_sockaddr]],
    LocalSockaddrLength : LPINT,
    RemoteSockaddr : Pointer[Pointer[Struct_sockaddr]],
    RemoteSockaddrLength : LPINT);

alias ALG_ID = UInt;

alias HCRYPTKEY = UInt64;

alias HCRYPTPROV = UInt64;

alias HCRYPTHASH = UInt64;

record Struct__CMS_KEY_INFO (
    dwVersion : CULong,
    Algid : UInt,
    pbOID : Pointer[CUChar],
    cbOID : CULong,
);

alias CMS_KEY_INFO = Struct__CMS_KEY_INFO;

alias PCMS_KEY_INFO = Pointer[Struct__CMS_KEY_INFO];

record Struct__HMAC_Info (
    HashAlgid : UInt,
    pbInnerString : Pointer[CUChar],
    cbInnerString : CULong,
    pbOuterString : Pointer[CUChar],
    cbOuterString : CULong,
);

alias HMAC_INFO = Struct__HMAC_Info;

alias PHMAC_INFO = Pointer[Struct__HMAC_Info];

record Struct__SCHANNEL_ALG (
    dwUse : CULong,
    Algid : UInt,
    cBits : CULong,
    dwFlags : CULong,
    dwReserved : CULong,
);

alias SCHANNEL_ALG = Struct__SCHANNEL_ALG;

alias PSCHANNEL_ALG = Pointer[Struct__SCHANNEL_ALG];

record Struct__PROV_ENUMALGS (
    aiAlgid : UInt,
    dwBitLen : CULong,
    dwNameLen : CULong,
    szName : Array[CChar,20],
);

alias PROV_ENUMALGS = Struct__PROV_ENUMALGS;

record Struct__PROV_ENUMALGS_EX (
    aiAlgid : UInt,
    dwDefaultLen : CULong,
    dwMinLen : CULong,
    dwMaxLen : CULong,
    dwProtocols : CULong,
    dwNameLen : CULong,
    szName : Array[CChar,20],
    dwLongNameLen : CULong,
    szLongName : Array[CChar,40],
);

alias PROV_ENUMALGS_EX = Struct__PROV_ENUMALGS_EX;

record Struct__PUBLICKEYSTRUC (
    bType : CUChar,
    bVersion : CUChar,
    reserved : UShort,
    aiKeyAlg : UInt,
);

alias BLOBHEADER = Struct__PUBLICKEYSTRUC;

alias PUBLICKEYSTRUC = Struct__PUBLICKEYSTRUC;

record Struct__RSAPUBKEY (
    magic : CULong,
    bitlen : CULong,
    pubexp : CULong,
);

alias RSAPUBKEY = Struct__RSAPUBKEY;

record Struct__PUBKEY (
    magic : CULong,
    bitlen : CULong,
);

alias DHPUBKEY = Struct__PUBKEY;

alias DSSPUBKEY = Struct__PUBKEY;

alias KEAPUBKEY = Struct__PUBKEY;

alias TEKPUBKEY = Struct__PUBKEY;

record Struct__DSSSEED (
    counter : CULong,
    seed : Array[CUChar,20],
);

alias DSSSEED = Struct__DSSSEED;

record Struct__PUBKEYVER3 (
    magic : CULong,
    bitlenP : CULong,
    bitlenQ : CULong,
    bitlenJ : CULong,
    DSSSeed : DSSSEED,
);

alias DHPUBKEY_VER3 = Struct__PUBKEYVER3;

alias DSSPUBKEY_VER3 = Struct__PUBKEYVER3;

record Struct__PRIVKEYVER3 (
    magic : CULong,
    bitlenP : CULong,
    bitlenQ : CULong,
    bitlenJ : CULong,
    bitlenX : CULong,
    DSSSeed : DSSSEED,
);

alias DHPRIVKEY_VER3 = Struct__PRIVKEYVER3;

alias DSSPRIVKEY_VER3 = Struct__PRIVKEYVER3;

record Struct__KEY_TYPE_SUBTYPE (
    dwKeySpec : CULong,
    Type : GUID,
    Subtype : GUID,
);

alias KEY_TYPE_SUBTYPE = Struct__KEY_TYPE_SUBTYPE;

alias PKEY_TYPE_SUBTYPE = Pointer[Struct__KEY_TYPE_SUBTYPE];

record Struct__CERT_FORTEZZA_DATA_PROP (
    SerialNumber : Array[CUChar,8],
    CertIndex : Int,
    CertLabel : Array[CUChar,36],
);

alias CERT_FORTEZZA_DATA_PROP = Struct__CERT_FORTEZZA_DATA_PROP;

record Struct__CRYPT_RC4_KEY_STATE (
    Key : Array[CUChar,16],
    SBox : Array[CUChar,256],
    i : CUChar,
    j : CUChar,
);

alias CRYPT_RC4_KEY_STATE = Struct__CRYPT_RC4_KEY_STATE;

alias PCRYPT_RC4_KEY_STATE = Pointer[Struct__CRYPT_RC4_KEY_STATE];

record Struct__CRYPT_DES_KEY_STATE (
    Key : Array[CUChar,8],
    IV : Array[CUChar,8],
    Feedback : Array[CUChar,8],
);

alias CRYPT_DES_KEY_STATE = Struct__CRYPT_DES_KEY_STATE;

alias PCRYPT_DES_KEY_STATE = Pointer[Struct__CRYPT_DES_KEY_STATE];

record Struct__CRYPT_3DES_KEY_STATE (
    Key : Array[CUChar,24],
    IV : Array[CUChar,8],
    Feedback : Array[CUChar,8],
);

alias CRYPT_3DES_KEY_STATE = Struct__CRYPT_3DES_KEY_STATE;

alias PCRYPT_3DES_KEY_STATE = Pointer[Struct__CRYPT_3DES_KEY_STATE];

record Struct__CRYPTOAPI_BLOB (
    cbData : CULong,
    pbData : Pointer[CUChar],
);

alias CRYPT_INTEGER_BLOB = Struct__CRYPTOAPI_BLOB;

alias PCRYPT_INTEGER_BLOB = Pointer[Struct__CRYPTOAPI_BLOB];

alias CRYPT_UINT_BLOB = Struct__CRYPTOAPI_BLOB;

alias PCRYPT_UINT_BLOB = Pointer[Struct__CRYPTOAPI_BLOB];

alias CRYPT_OBJID_BLOB = Struct__CRYPTOAPI_BLOB;

alias PCRYPT_OBJID_BLOB = Pointer[Struct__CRYPTOAPI_BLOB];

alias CERT_NAME_BLOB = Struct__CRYPTOAPI_BLOB;

alias PCERT_NAME_BLOB = Pointer[Struct__CRYPTOAPI_BLOB];

alias CERT_RDN_VALUE_BLOB = Struct__CRYPTOAPI_BLOB;

alias PCERT_RDN_VALUE_BLOB = Pointer[Struct__CRYPTOAPI_BLOB];

alias CERT_BLOB = Struct__CRYPTOAPI_BLOB;

alias PCERT_BLOB = Pointer[Struct__CRYPTOAPI_BLOB];

alias CRL_BLOB = Struct__CRYPTOAPI_BLOB;

alias PCRL_BLOB = Pointer[Struct__CRYPTOAPI_BLOB];

alias DATA_BLOB = Struct__CRYPTOAPI_BLOB;

alias PDATA_BLOB = Pointer[Struct__CRYPTOAPI_BLOB];

alias CRYPT_DATA_BLOB = Struct__CRYPTOAPI_BLOB;

alias PCRYPT_DATA_BLOB = Pointer[Struct__CRYPTOAPI_BLOB];

alias CRYPT_HASH_BLOB = Struct__CRYPTOAPI_BLOB;

alias PCRYPT_HASH_BLOB = Pointer[Struct__CRYPTOAPI_BLOB];

alias CRYPT_DIGEST_BLOB = Struct__CRYPTOAPI_BLOB;

alias PCRYPT_DIGEST_BLOB = Pointer[Struct__CRYPTOAPI_BLOB];

alias CRYPT_DER_BLOB = Struct__CRYPTOAPI_BLOB;

alias PCRYPT_DER_BLOB = Pointer[Struct__CRYPTOAPI_BLOB];

alias CRYPT_ATTR_BLOB = Struct__CRYPTOAPI_BLOB;

alias PCRYPT_ATTR_BLOB = Pointer[Struct__CRYPTOAPI_BLOB];

record Struct__CMS_DH_KEY_INFO (
    dwVersion : CULong,
    Algid : UInt,
    pszContentEncObjId : LPSTR,
    PubInfo : CRYPT_DATA_BLOB,
    pReserved : RawPointer,
);

alias CMS_DH_KEY_INFO = Struct__CMS_DH_KEY_INFO;

alias PCMS_DH_KEY_INFO = Pointer[Struct__CMS_DH_KEY_INFO];

external CryptAcquireContextA(
    phProv : Pointer[UInt64],
    szContainer : LPCSTR,
    szProvider : LPCSTR,
    dwProvType : CULong,
    dwFlags : CULong) Int;

external CryptAcquireContextW(
    phProv : Pointer[UInt64],
    szContainer : LPCWSTR,
    szProvider : LPCWSTR,
    dwProvType : CULong,
    dwFlags : CULong) Int;

external CryptReleaseContext(
    hProv : UInt64,
    dwFlags : CULong) Int;

external CryptGenKey(
    hProv : UInt64,
    Algid : UInt,
    dwFlags : CULong,
    phKey : Pointer[UInt64]) Int;

external CryptDeriveKey(
    hProv : UInt64,
    Algid : UInt,
    hBaseData : UInt64,
    dwFlags : CULong,
    phKey : Pointer[UInt64]) Int;

external CryptDestroyKey(
    hKey : UInt64) Int;

external CryptSetKeyParam(
    hKey : UInt64,
    dwParam : CULong,
    pbData : Pointer[CUChar],
    dwFlags : CULong) Int;

external CryptGetKeyParam(
    hKey : UInt64,
    dwParam : CULong,
    pbData : Pointer[CUChar],
    pdwDataLen : Pointer[CULong],
    dwFlags : CULong) Int;

external CryptSetHashParam(
    hHash : UInt64,
    dwParam : CULong,
    pbData : Pointer[CUChar],
    dwFlags : CULong) Int;

external CryptGetHashParam(
    hHash : UInt64,
    dwParam : CULong,
    pbData : Pointer[CUChar],
    pdwDataLen : Pointer[CULong],
    dwFlags : CULong) Int;

external CryptSetProvParam(
    hProv : UInt64,
    dwParam : CULong,
    pbData : Pointer[CUChar],
    dwFlags : CULong) Int;

external CryptGetProvParam(
    hProv : UInt64,
    dwParam : CULong,
    pbData : Pointer[CUChar],
    pdwDataLen : Pointer[CULong],
    dwFlags : CULong) Int;

external CryptGenRandom(
    hProv : UInt64,
    dwLen : CULong,
    pbBuffer : Pointer[CUChar]) Int;

external CryptGetUserKey(
    hProv : UInt64,
    dwKeySpec : CULong,
    phUserKey : Pointer[UInt64]) Int;

external CryptExportKey(
    hKey : UInt64,
    hExpKey : UInt64,
    dwBlobType : CULong,
    dwFlags : CULong,
    pbData : Pointer[CUChar],
    pdwDataLen : Pointer[CULong]) Int;

external CryptImportKey(
    hProv : UInt64,
    pbData : Pointer[CUChar],
    dwDataLen : CULong,
    hPubKey : UInt64,
    dwFlags : CULong,
    phKey : Pointer[UInt64]) Int;

external CryptEncrypt(
    hKey : UInt64,
    hHash : UInt64,
    Final : Int,
    dwFlags : CULong,
    pbData : Pointer[CUChar],
    pdwDataLen : Pointer[CULong],
    dwBufLen : CULong) Int;

external CryptDecrypt(
    hKey : UInt64,
    hHash : UInt64,
    Final : Int,
    dwFlags : CULong,
    pbData : Pointer[CUChar],
    pdwDataLen : Pointer[CULong]) Int;

external CryptCreateHash(
    hProv : UInt64,
    Algid : UInt,
    hKey : UInt64,
    dwFlags : CULong,
    phHash : Pointer[UInt64]) Int;

external CryptHashData(
    hHash : UInt64,
    pbData : Pointer[CUChar],
    dwDataLen : CULong,
    dwFlags : CULong) Int;

external CryptHashSessionKey(
    hHash : UInt64,
    hKey : UInt64,
    dwFlags : CULong) Int;

external CryptDestroyHash(
    hHash : UInt64) Int;

external CryptSignHashA(
    hHash : UInt64,
    dwKeySpec : CULong,
    szDescription : LPCSTR,
    dwFlags : CULong,
    pbSignature : Pointer[CUChar],
    pdwSigLen : Pointer[CULong]) Int;

external CryptSignHashW(
    hHash : UInt64,
    dwKeySpec : CULong,
    szDescription : LPCWSTR,
    dwFlags : CULong,
    pbSignature : Pointer[CUChar],
    pdwSigLen : Pointer[CULong]) Int;

external CryptVerifySignatureA(
    hHash : UInt64,
    pbSignature : Pointer[CUChar],
    dwSigLen : CULong,
    hPubKey : UInt64,
    szDescription : LPCSTR,
    dwFlags : CULong) Int;

external CryptVerifySignatureW(
    hHash : UInt64,
    pbSignature : Pointer[CUChar],
    dwSigLen : CULong,
    hPubKey : UInt64,
    szDescription : LPCWSTR,
    dwFlags : CULong) Int;

external CryptSetProviderA(
    pszProvName : LPCSTR,
    dwProvType : CULong) Int;

external CryptSetProviderW(
    pszProvName : LPCWSTR,
    dwProvType : CULong) Int;

external CryptSetProviderExA(
    pszProvName : LPCSTR,
    dwProvType : CULong,
    pdwReserved : Pointer[CULong],
    dwFlags : CULong) Int;

external CryptSetProviderExW(
    pszProvName : LPCWSTR,
    dwProvType : CULong,
    pdwReserved : Pointer[CULong],
    dwFlags : CULong) Int;

external CryptGetDefaultProviderA(
    dwProvType : CULong,
    pdwReserved : Pointer[CULong],
    dwFlags : CULong,
    pszProvName : LPSTR,
    pcbProvName : Pointer[CULong]) Int;

external CryptGetDefaultProviderW(
    dwProvType : CULong,
    pdwReserved : Pointer[CULong],
    dwFlags : CULong,
    pszProvName : LPWSTR,
    pcbProvName : Pointer[CULong]) Int;

external CryptEnumProviderTypesA(
    dwIndex : CULong,
    pdwReserved : Pointer[CULong],
    dwFlags : CULong,
    pdwProvType : Pointer[CULong],
    szTypeName : LPSTR,
    pcbTypeName : Pointer[CULong]) Int;

external CryptEnumProviderTypesW(
    dwIndex : CULong,
    pdwReserved : Pointer[CULong],
    dwFlags : CULong,
    pdwProvType : Pointer[CULong],
    szTypeName : LPWSTR,
    pcbTypeName : Pointer[CULong]) Int;

external CryptEnumProvidersA(
    dwIndex : CULong,
    pdwReserved : Pointer[CULong],
    dwFlags : CULong,
    pdwProvType : Pointer[CULong],
    szProvName : LPSTR,
    pcbProvName : Pointer[CULong]) Int;

external CryptEnumProvidersW(
    dwIndex : CULong,
    pdwReserved : Pointer[CULong],
    dwFlags : CULong,
    pdwProvType : Pointer[CULong],
    szProvName : LPWSTR,
    pcbProvName : Pointer[CULong]) Int;

external CryptContextAddRef(
    hProv : UInt64,
    pdwReserved : Pointer[CULong],
    dwFlags : CULong) Int;

external CryptDuplicateKey(
    hKey : UInt64,
    pdwReserved : Pointer[CULong],
    dwFlags : CULong,
    phKey : Pointer[UInt64]) Int;

external CryptDuplicateHash(
    hHash : UInt64,
    pdwReserved : Pointer[CULong],
    dwFlags : CULong,
    phHash : Pointer[UInt64]) Int;

external GetEncSChannel(
    pData : Pointer[Pointer[CUChar]],
    dwDecSize : Pointer[CULong]) Int;

record Struct__CRYPT_BIT_BLOB (
    cbData : CULong,
    pbData : Pointer[CUChar],
    cUnusedBits : CULong,
);

alias CRYPT_BIT_BLOB = Struct__CRYPT_BIT_BLOB;

alias PCRYPT_BIT_BLOB = Pointer[Struct__CRYPT_BIT_BLOB];

record Struct__CRYPT_ALGORITHM_IDENTIFIER (
    pszObjId : LPSTR,
    Parameters : CRYPT_OBJID_BLOB,
);

alias CRYPT_ALGORITHM_IDENTIFIER = Struct__CRYPT_ALGORITHM_IDENTIFIER;

alias PCRYPT_ALGORITHM_IDENTIFIER = Pointer[Struct__CRYPT_ALGORITHM_IDENTIFIER];

record Struct__CRYPT_OBJID_TABLE (
    dwAlgId : CULong,
    pszObjId : LPCSTR,
);

alias CRYPT_OBJID_TABLE = Struct__CRYPT_OBJID_TABLE;

alias PCRYPT_OBJID_TABLE = Pointer[Struct__CRYPT_OBJID_TABLE];

record Struct__CRYPT_HASH_INFO (
    HashAlgorithm : CRYPT_ALGORITHM_IDENTIFIER,
    Hash : CRYPT_HASH_BLOB,
);

alias CRYPT_HASH_INFO = Struct__CRYPT_HASH_INFO;

alias PCRYPT_HASH_INFO = Pointer[Struct__CRYPT_HASH_INFO];

record Struct__CERT_EXTENSION (
    pszObjId : LPSTR,
    fCritical : Int,
    Value : CRYPT_OBJID_BLOB,
);

alias CERT_EXTENSION = Struct__CERT_EXTENSION;

alias PCERT_EXTENSION = Pointer[Struct__CERT_EXTENSION];

record Struct__CRYPT_ATTRIBUTE_TYPE_VALUE (
    pszObjId : LPSTR,
    Value : CRYPT_OBJID_BLOB,
);

alias CRYPT_ATTRIBUTE_TYPE_VALUE = Struct__CRYPT_ATTRIBUTE_TYPE_VALUE;

alias PCRYPT_ATTRIBUTE_TYPE_VALUE = Pointer[Struct__CRYPT_ATTRIBUTE_TYPE_VALUE];

record Struct__CRYPT_ATTRIBUTE (
    pszObjId : LPSTR,
    cValue : CULong,
    rgValue : PCRYPT_ATTR_BLOB,
);

alias CRYPT_ATTRIBUTE = Struct__CRYPT_ATTRIBUTE;

alias PCRYPT_ATTRIBUTE = Pointer[Struct__CRYPT_ATTRIBUTE];

record Struct__CRYPT_ATTRIBUTES (
    cAttr : CULong,
    rgAttr : PCRYPT_ATTRIBUTE,
);

alias CRYPT_ATTRIBUTES = Struct__CRYPT_ATTRIBUTES;

alias PCRYPT_ATTRIBUTES = Pointer[Struct__CRYPT_ATTRIBUTES];

record Struct__CERT_RDN_ATTR (
    pszObjId : LPSTR,
    dwValueType : CULong,
    Value : CERT_RDN_VALUE_BLOB,
);

alias CERT_RDN_ATTR = Struct__CERT_RDN_ATTR;

alias PCERT_RDN_ATTR = Pointer[Struct__CERT_RDN_ATTR];

record Struct__CERT_RDN (
    cRDNAttr : CULong,
    rgRDNAttr : PCERT_RDN_ATTR,
);

alias CERT_RDN = Struct__CERT_RDN;

alias PCERT_RDN = Pointer[Struct__CERT_RDN];

record Struct__CERT_NAME_INFO (
    cRDN : CULong,
    rgRDN : PCERT_RDN,
);

alias CERT_NAME_INFO = Struct__CERT_NAME_INFO;

alias PCERT_NAME_INFO = Pointer[Struct__CERT_NAME_INFO];

record Struct__CERT_NAME_VALUE (
    dwValueType : CULong,
    Value : CERT_RDN_VALUE_BLOB,
);

alias CERT_NAME_VALUE = Struct__CERT_NAME_VALUE;

alias PCERT_NAME_VALUE = Pointer[Struct__CERT_NAME_VALUE];

record Struct__CERT_PUBLIC_KEY_INFO (
    Algorithm : CRYPT_ALGORITHM_IDENTIFIER,
    PublicKey : CRYPT_BIT_BLOB,
);

alias CERT_PUBLIC_KEY_INFO = Struct__CERT_PUBLIC_KEY_INFO;

alias PCERT_PUBLIC_KEY_INFO = Pointer[Struct__CERT_PUBLIC_KEY_INFO];

record Struct__CRYPT_PRIVATE_KEY_INFO (
    Version : CULong,
    Algorithm : CRYPT_ALGORITHM_IDENTIFIER,
    PrivateKey : CRYPT_DER_BLOB,
    pAttributes : PCRYPT_ATTRIBUTES,
);

alias CRYPT_PRIVATE_KEY_INFO = Struct__CRYPT_PRIVATE_KEY_INFO;

alias PCRYPT_PRIVATE_KEY_INFO = Pointer[Struct__CRYPT_PRIVATE_KEY_INFO];

record Struct__CRYPT_ENCRYPTED_PRIVATE_KEY_INFO (
    EncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedPrivateKey : CRYPT_DATA_BLOB,
);

alias CRYPT_ENCRYPTED_PRIVATE_KEY_INFO = Struct__CRYPT_ENCRYPTED_PRIVATE_KEY_INFO;

alias PCRYPT_ENCRYPTED_PRIVATE_KEY_INFO = Pointer[Struct__CRYPT_ENCRYPTED_PRIVATE_KEY_INFO];

alias PCRYPT_DECRYPT_PRIVATE_KEY_FUNC = CCodePointer[(Struct__CRYPT_ALGORITHM_IDENTIFIER,Struct__CRYPTOAPI_BLOB,Pointer[CUChar],Pointer[CULong],RawPointer),(Int)];

alias PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC = CCodePointer[(Pointer[Struct__CRYPT_ALGORITHM_IDENTIFIER],Pointer[Struct__CRYPTOAPI_BLOB],Pointer[CUChar],Pointer[CULong],RawPointer),(Int)];

alias PCRYPT_RESOLVE_HCRYPTPROV_FUNC = CCodePointer[(Pointer[Struct__CRYPT_PRIVATE_KEY_INFO],Pointer[UInt64],RawPointer),(Int)];

record Struct__CRYPT_PKCS8_IMPORT_PARAMS (
    PrivateKey : CRYPT_DIGEST_BLOB,
    pResolvehCryptProvFunc : PCRYPT_RESOLVE_HCRYPTPROV_FUNC,
    pVoidResolveFunc : LPVOID,
    pDecryptPrivateKeyFunc : PCRYPT_DECRYPT_PRIVATE_KEY_FUNC,
    pVoidDecryptFunc : LPVOID,
);

alias CRYPT_PKCS8_IMPORT_PARAMS = Struct__CRYPT_PKCS8_IMPORT_PARAMS;

alias PCRYPT_PKCS8_IMPORT_PARAMS = Pointer[Struct__CRYPT_PKCS8_IMPORT_PARAMS];

alias CRYPT_PRIVATE_KEY_BLOB_AND_PARAMS = Struct__CRYPT_PKCS8_IMPORT_PARAMS;

alias PCRYPT_PRIVATE_KEY_BLOB_AND_PARAMS = Pointer[Struct__CRYPT_PKCS8_IMPORT_PARAMS];

record Struct__CRYPT_PKCS8_EXPORT_PARAMS (
    hCryptProv : UInt64,
    dwKeySpec : CULong,
    pszPrivateKeyObjId : LPSTR,
    pEncryptPrivateKeyFunc : PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC,
    pVoidEncryptFunc : LPVOID,
);

alias CRYPT_PKCS8_EXPORT_PARAMS = Struct__CRYPT_PKCS8_EXPORT_PARAMS;

alias PCRYPT_PKCS8_EXPORT_PARAMS = Pointer[Struct__CRYPT_PKCS8_EXPORT_PARAMS];

record Struct__CERT_INFO (
    dwVersion : CULong,
    SerialNumber : CRYPT_INTEGER_BLOB,
    SignatureAlgorithm : CRYPT_ALGORITHM_IDENTIFIER,
    Issuer : CERT_NAME_BLOB,
    NotBefore : FILETIME,
    NotAfter : FILETIME,
    Subject : CERT_NAME_BLOB,
    SubjectPublicKeyInfo : CERT_PUBLIC_KEY_INFO,
    IssuerUniqueId : CRYPT_BIT_BLOB,
    SubjectUniqueId : CRYPT_BIT_BLOB,
    cExtension : CULong,
    rgExtension : PCERT_EXTENSION,
);

alias CERT_INFO = Struct__CERT_INFO;

alias PCERT_INFO = Pointer[Struct__CERT_INFO];

record Struct__CRL_ENTRY (
    SerialNumber : CRYPT_INTEGER_BLOB,
    RevocationDate : FILETIME,
    cExtension : CULong,
    rgExtension : PCERT_EXTENSION,
);

alias CRL_ENTRY = Struct__CRL_ENTRY;

alias PCRL_ENTRY = Pointer[Struct__CRL_ENTRY];

record Struct__CRL_INFO (
    dwVersion : CULong,
    SignatureAlgorithm : CRYPT_ALGORITHM_IDENTIFIER,
    Issuer : CERT_NAME_BLOB,
    ThisUpdate : FILETIME,
    NextUpdate : FILETIME,
    cCRLEntry : CULong,
    rgCRLEntry : PCRL_ENTRY,
    cExtension : CULong,
    rgExtension : PCERT_EXTENSION,
);

alias CRL_INFO = Struct__CRL_INFO;

alias PCRL_INFO = Pointer[Struct__CRL_INFO];

record Struct__CERT_REQUEST_INFO (
    dwVersion : CULong,
    Subject : CERT_NAME_BLOB,
    SubjectPublicKeyInfo : CERT_PUBLIC_KEY_INFO,
    cAttribute : CULong,
    rgAttribute : PCRYPT_ATTRIBUTE,
);

alias CERT_REQUEST_INFO = Struct__CERT_REQUEST_INFO;

alias PCERT_REQUEST_INFO = Pointer[Struct__CERT_REQUEST_INFO];

record Struct__CERT_KEYGEN_REQUEST_INFO (
    dwVersion : CULong,
    SubjectPublicKeyInfo : CERT_PUBLIC_KEY_INFO,
    pwszChallengeString : LPWSTR,
);

alias CERT_KEYGEN_REQUEST_INFO = Struct__CERT_KEYGEN_REQUEST_INFO;

alias PCERT_KEYGEN_REQUEST_INFO = Pointer[Struct__CERT_KEYGEN_REQUEST_INFO];

record Struct__CERT_SIGNED_CONTENT_INFO (
    ToBeSigned : CRYPT_DER_BLOB,
    SignatureAlgorithm : CRYPT_ALGORITHM_IDENTIFIER,
    Signature : CRYPT_BIT_BLOB,
);

alias CERT_SIGNED_CONTENT_INFO = Struct__CERT_SIGNED_CONTENT_INFO;

alias PCERT_SIGNED_CONTENT_INFO = Pointer[Struct__CERT_SIGNED_CONTENT_INFO];

record Struct__CTL_USAGE (
    cUsageIdentifier : CULong,
    rgpszUsageIdentifier : Pointer[LPSTR],
);

alias CTL_USAGE = Struct__CTL_USAGE;

alias PCTL_USAGE = Pointer[Struct__CTL_USAGE];

alias CERT_ENHKEY_USAGE = Struct__CTL_USAGE;

alias PCERT_ENHKEY_USAGE = Pointer[Struct__CTL_USAGE];

record Struct__CTL_ENTRY (
    SubjectIdentifier : CRYPT_DATA_BLOB,
    cAttribute : CULong,
    rgAttribute : PCRYPT_ATTRIBUTE,
);

alias CTL_ENTRY = Struct__CTL_ENTRY;

alias PCTL_ENTRY = Pointer[Struct__CTL_ENTRY];

record Struct__CTL_INFO (
    dwVersion : CULong,
    SubjectUsage : CTL_USAGE,
    ListIdentifier : CRYPT_DATA_BLOB,
    SequenceNumber : CRYPT_INTEGER_BLOB,
    ThisUpdate : FILETIME,
    NextUpdate : FILETIME,
    SubjectAlgorithm : CRYPT_ALGORITHM_IDENTIFIER,
    cCTLEntry : CULong,
    rgCTLEntry : PCTL_ENTRY,
    cExtension : CULong,
    rgExtension : PCERT_EXTENSION,
);

alias CTL_INFO = Struct__CTL_INFO;

alias PCTL_INFO = Pointer[Struct__CTL_INFO];

record Struct__CRYPT_TIME_STAMP_REQUEST_INFO (
    pszTimeStampAlgorithm : LPSTR,
    pszContentType : LPSTR,
    Content : CRYPT_OBJID_BLOB,
    cAttribute : CULong,
    rgAttribute : PCRYPT_ATTRIBUTE,
);

alias CRYPT_TIME_STAMP_REQUEST_INFO = Struct__CRYPT_TIME_STAMP_REQUEST_INFO;

alias PCRYPT_TIME_STAMP_REQUEST_INFO = Pointer[Struct__CRYPT_TIME_STAMP_REQUEST_INFO];

record Struct__CRYPT_ENROLLMENT_NAME_VALUE_PAIR (
    pwszName : LPWSTR,
    pwszValue : LPWSTR,
);

alias CRYPT_ENROLLMENT_NAME_VALUE_PAIR = Struct__CRYPT_ENROLLMENT_NAME_VALUE_PAIR;

alias PCRYPT_ENROLLMENT_NAME_VALUE_PAIR = Pointer[Struct__CRYPT_ENROLLMENT_NAME_VALUE_PAIR];

record Struct__CRYPT_CSP_PROVIDER (
    dwKeySpec : CULong,
    pwszProviderName : LPWSTR,
    Signature : CRYPT_BIT_BLOB,
);

alias CRYPT_CSP_PROVIDER = Struct__CRYPT_CSP_PROVIDER;

alias PCRYPT_CSP_PROVIDER = Pointer[Struct__CRYPT_CSP_PROVIDER];

external CryptFormatObject(
    dwCertEncodingType : CULong,
    dwFormatType : CULong,
    dwFormatStrType : CULong,
    pFormatStruct : RawPointer,
    lpszStructType : LPCSTR,
    pbEncoded : Pointer[CUChar],
    cbEncoded : CULong,
    pbFormat : RawPointer,
    pcbFormat : Pointer[CULong]) Int;

alias PFN_CRYPT_ALLOC = CCodePointer[(UInt64),(RawPointer)];

alias PFN_CRYPT_FREE = CCodePointer[(RawPointer),()];

record Struct__CRYPT_ENCODE_PARA (
    cbSize : CULong,
    pfnAlloc : PFN_CRYPT_ALLOC,
    pfnFree : PFN_CRYPT_FREE,
);

alias CRYPT_ENCODE_PARA = Struct__CRYPT_ENCODE_PARA;

alias PCRYPT_ENCODE_PARA = Pointer[Struct__CRYPT_ENCODE_PARA];

external CryptEncodeObjectEx(
    dwCertEncodingType : CULong,
    lpszStructType : LPCSTR,
    pvStructInfo : RawPointer,
    dwFlags : CULong,
    pEncodePara : PCRYPT_ENCODE_PARA,
    pvEncoded : RawPointer,
    pcbEncoded : Pointer[CULong]) Int;

external CryptEncodeObject(
    dwCertEncodingType : CULong,
    lpszStructType : LPCSTR,
    pvStructInfo : RawPointer,
    pbEncoded : Pointer[CUChar],
    pcbEncoded : Pointer[CULong]) Int;

record Struct__CRYPT_DECODE_PARA (
    cbSize : CULong,
    pfnAlloc : PFN_CRYPT_ALLOC,
    pfnFree : PFN_CRYPT_FREE,
);

alias CRYPT_DECODE_PARA = Struct__CRYPT_DECODE_PARA;

alias PCRYPT_DECODE_PARA = Pointer[Struct__CRYPT_DECODE_PARA];

external CryptDecodeObjectEx(
    dwCertEncodingType : CULong,
    lpszStructType : LPCSTR,
    pbEncoded : Pointer[CUChar],
    cbEncoded : CULong,
    dwFlags : CULong,
    pDecodePara : PCRYPT_DECODE_PARA,
    pvStructInfo : RawPointer,
    pcbStructInfo : Pointer[CULong]) Int;

external CryptDecodeObject(
    dwCertEncodingType : CULong,
    lpszStructType : LPCSTR,
    pbEncoded : Pointer[CUChar],
    cbEncoded : CULong,
    dwFlags : CULong,
    pvStructInfo : RawPointer,
    pcbStructInfo : Pointer[CULong]) Int;

record Struct__CERT_EXTENSIONS (
    cExtension : CULong,
    rgExtension : PCERT_EXTENSION,
);

alias CERT_EXTENSIONS = Struct__CERT_EXTENSIONS;

alias PCERT_EXTENSIONS = Pointer[Struct__CERT_EXTENSIONS];

record Struct__CERT_AUTHORITY_KEY_ID_INFO (
    KeyId : CRYPT_DATA_BLOB,
    CertIssuer : CERT_NAME_BLOB,
    CertSerialNumber : CRYPT_INTEGER_BLOB,
);

alias CERT_AUTHORITY_KEY_ID_INFO = Struct__CERT_AUTHORITY_KEY_ID_INFO;

alias PCERT_AUTHORITY_KEY_ID_INFO = Pointer[Struct__CERT_AUTHORITY_KEY_ID_INFO];

record Struct__CERT_PRIVATE_KEY_VALIDITY (
    NotBefore : FILETIME,
    NotAfter : FILETIME,
);

alias CERT_PRIVATE_KEY_VALIDITY = Struct__CERT_PRIVATE_KEY_VALIDITY;

alias PCERT_PRIVATE_KEY_VALIDITY = Pointer[Struct__CERT_PRIVATE_KEY_VALIDITY];

record Struct__CERT_KEY_ATTRIBUTES_INFO (
    KeyId : CRYPT_DATA_BLOB,
    IntendedKeyUsage : CRYPT_BIT_BLOB,
    pPrivateKeyUsagePeriod : PCERT_PRIVATE_KEY_VALIDITY,
);

alias CERT_KEY_ATTRIBUTES_INFO = Struct__CERT_KEY_ATTRIBUTES_INFO;

alias PCERT_KEY_ATTRIBUTES_INFO = Pointer[Struct__CERT_KEY_ATTRIBUTES_INFO];

record Struct__CERT_POLICY_ID (
    cCertPolicyElementId : CULong,
    rgpszCertPolicyElementId : Pointer[LPSTR],
);

alias CERT_POLICY_ID = Struct__CERT_POLICY_ID;

alias PCERT_POLICY_ID = Pointer[Struct__CERT_POLICY_ID];

record Struct__CERT_KEY_USAGE_RESTRICTION_INFO (
    cCertPolicyId : CULong,
    rgCertPolicyId : PCERT_POLICY_ID,
    RestrictedKeyUsage : CRYPT_BIT_BLOB,
);

alias CERT_KEY_USAGE_RESTRICTION_INFO = Struct__CERT_KEY_USAGE_RESTRICTION_INFO;

alias PCERT_KEY_USAGE_RESTRICTION_INFO = Pointer[Struct__CERT_KEY_USAGE_RESTRICTION_INFO];

record Struct__CERT_OTHER_NAME (
    pszObjId : LPSTR,
    Value : CRYPT_OBJID_BLOB,
);

alias CERT_OTHER_NAME = Struct__CERT_OTHER_NAME;

alias PCERT_OTHER_NAME = Pointer[Struct__CERT_OTHER_NAME];

record Struct__CERT_ALT_NAME_ENTRY (
    dwAltNameChoice : CULong,
    unnamed_field1 : AUnionType,
);

alias CERT_ALT_NAME_ENTRY = Struct__CERT_ALT_NAME_ENTRY;

alias PCERT_ALT_NAME_ENTRY = Pointer[Struct__CERT_ALT_NAME_ENTRY];

record Struct__CERT_ALT_NAME_INFO (
    cAltEntry : CULong,
    rgAltEntry : PCERT_ALT_NAME_ENTRY,
);

alias CERT_ALT_NAME_INFO = Struct__CERT_ALT_NAME_INFO;

alias PCERT_ALT_NAME_INFO = Pointer[Struct__CERT_ALT_NAME_INFO];

record Struct__CERT_BASIC_CONSTRAINTS_INFO (
    SubjectType : CRYPT_BIT_BLOB,
    fPathLenConstraint : Int,
    dwPathLenConstraint : CULong,
    cSubtreesConstraint : CULong,
    rgSubtreesConstraint : Pointer[CERT_NAME_BLOB],
);

alias CERT_BASIC_CONSTRAINTS_INFO = Struct__CERT_BASIC_CONSTRAINTS_INFO;

alias PCERT_BASIC_CONSTRAINTS_INFO = Pointer[Struct__CERT_BASIC_CONSTRAINTS_INFO];

record Struct__CERT_BASIC_CONSTRAINTS2_INFO (
    fCA : Int,
    fPathLenConstraint : Int,
    dwPathLenConstraint : CULong,
);

alias CERT_BASIC_CONSTRAINTS2_INFO = Struct__CERT_BASIC_CONSTRAINTS2_INFO;

alias PCERT_BASIC_CONSTRAINTS2_INFO = Pointer[Struct__CERT_BASIC_CONSTRAINTS2_INFO];

record Struct__CERT_POLICY_QUALIFIER_INFO (
    pszPolicyQualifierId : LPSTR,
    Qualifier : CRYPT_OBJID_BLOB,
);

alias CERT_POLICY_QUALIFIER_INFO = Struct__CERT_POLICY_QUALIFIER_INFO;

alias PCERT_POLICY_QUALIFIER_INFO = Pointer[Struct__CERT_POLICY_QUALIFIER_INFO];

record Struct__CERT_POLICY_INFO (
    pszPolicyIdentifier : LPSTR,
    cPolicyQualifier : CULong,
    rgPolicyQualifier : Pointer[CERT_POLICY_QUALIFIER_INFO],
);

alias CERT_POLICY_INFO = Struct__CERT_POLICY_INFO;

alias PCERT_POLICY_INFO = Pointer[Struct__CERT_POLICY_INFO];

record Struct__CERT_POLICIES_INFO (
    cPolicyInfo : CULong,
    rgPolicyInfo : Pointer[CERT_POLICY_INFO],
);

alias CERT_POLICIES_INFO = Struct__CERT_POLICIES_INFO;

alias PCERT_POLICIES_INFO = Pointer[Struct__CERT_POLICIES_INFO];

record Struct__CERT_POLICY_QUALIFIER_NOTICE_REFERENCE (
    pszOrganization : LPSTR,
    cNoticeNumbers : CULong,
    rgNoticeNumbers : Pointer[Int],
);

alias CERT_POLICY_QUALIFIER_NOTICE_REFERENCE = Struct__CERT_POLICY_QUALIFIER_NOTICE_REFERENCE;

alias PCERT_POLICY_QUALIFIER_NOTICE_REFERENCE = Pointer[Struct__CERT_POLICY_QUALIFIER_NOTICE_REFERENCE];

record Struct__CERT_POLICY_QUALIFIER_USER_NOTICE (
    pNoticeReference : Pointer[CERT_POLICY_QUALIFIER_NOTICE_REFERENCE],
    pszDisplayText : LPWSTR,
);

alias CERT_POLICY_QUALIFIER_USER_NOTICE = Struct__CERT_POLICY_QUALIFIER_USER_NOTICE;

alias PCERT_POLICY_QUALIFIER_USER_NOTICE = Pointer[Struct__CERT_POLICY_QUALIFIER_USER_NOTICE];

record Struct__CPS_URLS (
    pszURL : LPWSTR,
    pAlgorithm : Pointer[CRYPT_ALGORITHM_IDENTIFIER],
    pDigest : Pointer[CRYPT_DATA_BLOB],
);

alias CPS_URLS = Struct__CPS_URLS;

alias PCPS_URLS = Pointer[Struct__CPS_URLS];

record Struct__CERT_POLICY95_QUALIFIER1 (
    pszPracticesReference : LPWSTR,
    pszNoticeIdentifier : LPSTR,
    pszNSINoticeIdentifier : LPSTR,
    cCPSURLs : CULong,
    rgCPSURLs : Pointer[CPS_URLS],
);

alias CERT_POLICY95_QUALIFIER1 = Struct__CERT_POLICY95_QUALIFIER1;

alias PCERT_POLICY95_QUALIFIER1 = Pointer[Struct__CERT_POLICY95_QUALIFIER1];

record Struct__CERT_POLICY_MAPPING (
    pszIssuerDomainPolicy : LPSTR,
    pszSubjectDomainPolicy : LPSTR,
);

alias CERT_POLICY_MAPPING = Struct__CERT_POLICY_MAPPING;

alias PCERT_POLICY_MAPPING = Pointer[Struct__CERT_POLICY_MAPPING];

record Struct__CERT_POLICY_MAPPINGS_INFO (
    cPolicyMapping : CULong,
    rgPolicyMapping : PCERT_POLICY_MAPPING,
);

alias CERT_POLICY_MAPPINGS_INFO = Struct__CERT_POLICY_MAPPINGS_INFO;

alias PCERT_POLICY_MAPPINGS_INFO = Pointer[Struct__CERT_POLICY_MAPPINGS_INFO];

record Struct__CERT_POLICY_CONSTRAINTS_INFO (
    fRequireExplicitPolicy : Int,
    dwRequireExplicitPolicySkipCerts : CULong,
    fInhibitPolicyMapping : Int,
    dwInhibitPolicyMappingSkipCerts : CULong,
);

alias CERT_POLICY_CONSTRAINTS_INFO = Struct__CERT_POLICY_CONSTRAINTS_INFO;

alias PCERT_POLICY_CONSTRAINTS_INFO = Pointer[Struct__CERT_POLICY_CONSTRAINTS_INFO];

record Struct__CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY (
    pszObjId : LPSTR,
    cValue : CULong,
    rgValue : PCRYPT_DER_BLOB,
);

alias CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY = Struct__CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY;

alias PCRYPT_CONTENT_INFO_SEQUENCE_OF_ANY = Pointer[Struct__CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY];

record Struct__CRYPT_CONTENT_INFO (
    pszObjId : LPSTR,
    Content : CRYPT_DER_BLOB,
);

alias CRYPT_CONTENT_INFO = Struct__CRYPT_CONTENT_INFO;

alias PCRYPT_CONTENT_INFO = Pointer[Struct__CRYPT_CONTENT_INFO];

record Struct__CRYPT_SEQUENCE_OF_ANY (
    cValue : CULong,
    rgValue : PCRYPT_DER_BLOB,
);

alias CRYPT_SEQUENCE_OF_ANY = Struct__CRYPT_SEQUENCE_OF_ANY;

alias PCRYPT_SEQUENCE_OF_ANY = Pointer[Struct__CRYPT_SEQUENCE_OF_ANY];

record Struct__CERT_AUTHORITY_KEY_ID2_INFO (
    KeyId : CRYPT_DATA_BLOB,
    AuthorityCertIssuer : CERT_ALT_NAME_INFO,
    AuthorityCertSerialNumber : CRYPT_INTEGER_BLOB,
);

alias CERT_AUTHORITY_KEY_ID2_INFO = Struct__CERT_AUTHORITY_KEY_ID2_INFO;

alias PCERT_AUTHORITY_KEY_ID2_INFO = Pointer[Struct__CERT_AUTHORITY_KEY_ID2_INFO];

record Struct__CERT_ACCESS_DESCRIPTION (
    pszAccessMethod : LPSTR,
    AccessLocation : CERT_ALT_NAME_ENTRY,
);

alias CERT_ACCESS_DESCRIPTION = Struct__CERT_ACCESS_DESCRIPTION;

alias PCERT_ACCESS_DESCRIPTION = Pointer[Struct__CERT_ACCESS_DESCRIPTION];

record Struct__CERT_AUTHORITY_INFO_ACCESS (
    cAccDescr : CULong,
    rgAccDescr : PCERT_ACCESS_DESCRIPTION,
);

alias CERT_AUTHORITY_INFO_ACCESS = Struct__CERT_AUTHORITY_INFO_ACCESS;

alias PCERT_AUTHORITY_INFO_ACCESS = Pointer[Struct__CERT_AUTHORITY_INFO_ACCESS];

record Struct__CRL_DIST_POINT_NAME (
    dwDistPointNameChoice : CULong,
    unnamed_field1 : AUnionType,
);

alias CRL_DIST_POINT_NAME = Struct__CRL_DIST_POINT_NAME;

alias PCRL_DIST_POINT_NAME = Pointer[Struct__CRL_DIST_POINT_NAME];

record Struct__CRL_DIST_POINT (
    DistPointName : CRL_DIST_POINT_NAME,
    ReasonFlags : CRYPT_BIT_BLOB,
    CRLIssuer : CERT_ALT_NAME_INFO,
);

alias CRL_DIST_POINT = Struct__CRL_DIST_POINT;

alias PCRL_DIST_POINT = Pointer[Struct__CRL_DIST_POINT];

record Struct__CRL_DIST_POINTS_INFO (
    cDistPoint : CULong,
    rgDistPoint : PCRL_DIST_POINT,
);

alias CRL_DIST_POINTS_INFO = Struct__CRL_DIST_POINTS_INFO;

alias PCRL_DIST_POINTS_INFO = Pointer[Struct__CRL_DIST_POINTS_INFO];

record Struct__CROSS_CERT_DIST_POINTS_INFO (
    dwSyncDeltaTime : CULong,
    cDistPoint : CULong,
    rgDistPoint : PCERT_ALT_NAME_INFO,
);

alias CROSS_CERT_DIST_POINTS_INFO = Struct__CROSS_CERT_DIST_POINTS_INFO;

alias PCROSS_CERT_DIST_POINTS_INFO = Pointer[Struct__CROSS_CERT_DIST_POINTS_INFO];

record Struct__CERT_PAIR (
    Forward : CERT_BLOB,
    Reverse : CERT_BLOB,
);

alias CERT_PAIR = Struct__CERT_PAIR;

alias PCERT_PAIR = Pointer[Struct__CERT_PAIR];

record Struct__CRL_ISSUING_DIST_POINT (
    DistPointName : CRL_DIST_POINT_NAME,
    fOnlyContainsUserCerts : Int,
    fOnlyContainsCACerts : Int,
    OnlySomeReasonFlags : CRYPT_BIT_BLOB,
    fIndirectCRL : Int,
);

alias CRL_ISSUING_DIST_POINT = Struct__CRL_ISSUING_DIST_POINT;

alias PCRL_ISSUING_DIST_POINT = Pointer[Struct__CRL_ISSUING_DIST_POINT];

record Struct__CERT_GENERAL_SUBTREE (
    Base : CERT_ALT_NAME_ENTRY,
    dwMinimum : CULong,
    fMaximum : Int,
    dwMaximum : CULong,
);

alias CERT_GENERAL_SUBTREE = Struct__CERT_GENERAL_SUBTREE;

alias PCERT_GENERAL_SUBTREE = Pointer[Struct__CERT_GENERAL_SUBTREE];

record Struct__CERT_NAME_CONSTRAINTS_INFO (
    cPermittedSubtree : CULong,
    rgPermittedSubtree : PCERT_GENERAL_SUBTREE,
    cExcludedSubtree : CULong,
    rgExcludedSubtree : PCERT_GENERAL_SUBTREE,
);

alias CERT_NAME_CONSTRAINTS_INFO = Struct__CERT_NAME_CONSTRAINTS_INFO;

alias PCERT_NAME_CONSTRAINTS_INFO = Pointer[Struct__CERT_NAME_CONSTRAINTS_INFO];

record Struct__CERT_DSS_PARAMETERS (
    p : CRYPT_UINT_BLOB,
    q : CRYPT_UINT_BLOB,
    g : CRYPT_UINT_BLOB,
);

alias CERT_DSS_PARAMETERS = Struct__CERT_DSS_PARAMETERS;

alias PCERT_DSS_PARAMETERS = Pointer[Struct__CERT_DSS_PARAMETERS];

record Struct__CERT_DH_PARAMETERS (
    p : CRYPT_UINT_BLOB,
    g : CRYPT_UINT_BLOB,
);

alias CERT_DH_PARAMETERS = Struct__CERT_DH_PARAMETERS;

alias PCERT_DH_PARAMETERS = Pointer[Struct__CERT_DH_PARAMETERS];

record Struct__CERT_X942_DH_VALIDATION_PARAMS (
    seed : CRYPT_BIT_BLOB,
    pgenCounter : CULong,
);

alias CERT_X942_DH_VALIDATION_PARAMS = Struct__CERT_X942_DH_VALIDATION_PARAMS;

alias PCERT_X942_DH_VALIDATION_PARAMS = Pointer[Struct__CERT_X942_DH_VALIDATION_PARAMS];

record Struct__CERT_X942_DH_PARAMETERS (
    p : CRYPT_UINT_BLOB,
    g : CRYPT_UINT_BLOB,
    q : CRYPT_UINT_BLOB,
    j : CRYPT_UINT_BLOB,
    pValidationParams : PCERT_X942_DH_VALIDATION_PARAMS,
);

alias CERT_X942_DH_PARAMETERS = Struct__CERT_X942_DH_PARAMETERS;

alias PCERT_X942_DH_PARAMETERS = Pointer[Struct__CERT_X942_DH_PARAMETERS];

record Struct__CRYPT_X942_OTHER_INFO (
    pszContentEncryptionObjId : LPSTR,
    rgbCounter : Array[CUChar,4],
    rgbKeyLength : Array[CUChar,4],
    PubInfo : CRYPT_DATA_BLOB,
);

alias CRYPT_X942_OTHER_INFO = Struct__CRYPT_X942_OTHER_INFO;

alias PCRYPT_X942_OTHER_INFO = Pointer[Struct__CRYPT_X942_OTHER_INFO];

record Struct__CRYPT_RC2_CBC_PARAMETERS (
    dwVersion : CULong,
    fIV : Int,
    rgbIV : Array[CUChar,8],
);

alias CRYPT_RC2_CBC_PARAMETERS = Struct__CRYPT_RC2_CBC_PARAMETERS;

alias PCRYPT_RC2_CBC_PARAMETERS = Pointer[Struct__CRYPT_RC2_CBC_PARAMETERS];

record Struct__CRYPT_SMIME_CAPABILITY (
    pszObjId : LPSTR,
    Parameters : CRYPT_OBJID_BLOB,
);

alias CRYPT_SMIME_CAPABILITY = Struct__CRYPT_SMIME_CAPABILITY;

alias PCRYPT_SMIME_CAPABILITY = Pointer[Struct__CRYPT_SMIME_CAPABILITY];

record Struct__CRYPT_SMIME_CAPABILITIES (
    cCapability : CULong,
    rgCapability : PCRYPT_SMIME_CAPABILITY,
);

alias CRYPT_SMIME_CAPABILITIES = Struct__CRYPT_SMIME_CAPABILITIES;

alias PCRYPT_SMIME_CAPABILITIES = Pointer[Struct__CRYPT_SMIME_CAPABILITIES];

record Struct__CMC_TAGGED_ATTRIBUTE (
    dwBodyPartID : CULong,
    Attribute : CRYPT_ATTRIBUTE,
);

alias CMC_TAGGED_ATTRIBUTE = Struct__CMC_TAGGED_ATTRIBUTE;

alias PCMC_TAGGED_ATTRIBUTE = Pointer[Struct__CMC_TAGGED_ATTRIBUTE];

record Struct__CMC_TAGGED_CERT_REQUEST (
    dwBodyPartID : CULong,
    SignedCertRequest : CRYPT_DER_BLOB,
);

alias CMC_TAGGED_CERT_REQUEST = Struct__CMC_TAGGED_CERT_REQUEST;

alias PCMC_TAGGED_CERT_REQUEST = Pointer[Struct__CMC_TAGGED_CERT_REQUEST];

record Struct__CMC_TAGGED_REQUEST (
    dwTaggedRequestChoice : CULong,
    unnamed_field1 : AUnionType,
);

alias CMC_TAGGED_REQUEST = Struct__CMC_TAGGED_REQUEST;

alias PCMC_TAGGED_REQUEST = Pointer[Struct__CMC_TAGGED_REQUEST];

record Struct__CMC_TAGGED_CONTENT_INFO (
    dwBodyPartID : CULong,
    EncodedContentInfo : CRYPT_DER_BLOB,
);

alias CMC_TAGGED_CONTENT_INFO = Struct__CMC_TAGGED_CONTENT_INFO;

alias PCMC_TAGGED_CONTENT_INFO = Pointer[Struct__CMC_TAGGED_CONTENT_INFO];

record Struct__CMC_TAGGED_OTHER_MSG (
    dwBodyPartID : CULong,
    pszObjId : LPSTR,
    Value : CRYPT_OBJID_BLOB,
);

alias CMC_TAGGED_OTHER_MSG = Struct__CMC_TAGGED_OTHER_MSG;

alias PCMC_TAGGED_OTHER_MSG = Pointer[Struct__CMC_TAGGED_OTHER_MSG];

record Struct__CMC_DATA_INFO (
    cTaggedAttribute : CULong,
    rgTaggedAttribute : PCMC_TAGGED_ATTRIBUTE,
    cTaggedRequest : CULong,
    rgTaggedRequest : PCMC_TAGGED_REQUEST,
    cTaggedContentInfo : CULong,
    rgTaggedContentInfo : PCMC_TAGGED_CONTENT_INFO,
    cTaggedOtherMsg : CULong,
    rgTaggedOtherMsg : PCMC_TAGGED_OTHER_MSG,
);

alias CMC_DATA_INFO = Struct__CMC_DATA_INFO;

alias PCMC_DATA_INFO = Pointer[Struct__CMC_DATA_INFO];

record Struct__CMC_RESPONSE_INFO (
    cTaggedAttribute : CULong,
    rgTaggedAttribute : PCMC_TAGGED_ATTRIBUTE,
    cTaggedContentInfo : CULong,
    rgTaggedContentInfo : PCMC_TAGGED_CONTENT_INFO,
    cTaggedOtherMsg : CULong,
    rgTaggedOtherMsg : PCMC_TAGGED_OTHER_MSG,
);

alias CMC_RESPONSE_INFO = Struct__CMC_RESPONSE_INFO;

alias PCMC_RESPONSE_INFO = Pointer[Struct__CMC_RESPONSE_INFO];

record Struct__CMC_PEND_INFO (
    PendToken : CRYPT_DATA_BLOB,
    PendTime : FILETIME,
);

alias CMC_PEND_INFO = Struct__CMC_PEND_INFO;

alias PCMC_PEND_INFO = Pointer[Struct__CMC_PEND_INFO];

record Struct__CMC_STATUS_INFO (
    dwStatus : CULong,
    cBodyList : CULong,
    rgdwBodyList : Pointer[CULong],
    pwszStatusString : LPWSTR,
    dwOtherInfoChoice : CULong,
    unnamed_field5 : AUnionType,
);

alias CMC_STATUS_INFO = Struct__CMC_STATUS_INFO;

alias PCMC_STATUS_INFO = Pointer[Struct__CMC_STATUS_INFO];

record Struct__CMC_ADD_EXTENSIONS_INFO (
    dwCmcDataReference : CULong,
    cCertReference : CULong,
    rgdwCertReference : Pointer[CULong],
    cExtension : CULong,
    rgExtension : PCERT_EXTENSION,
);

alias CMC_ADD_EXTENSIONS_INFO = Struct__CMC_ADD_EXTENSIONS_INFO;

alias PCMC_ADD_EXTENSIONS_INFO = Pointer[Struct__CMC_ADD_EXTENSIONS_INFO];

record Struct__CMC_ADD_ATTRIBUTES_INFO (
    dwCmcDataReference : CULong,
    cCertReference : CULong,
    rgdwCertReference : Pointer[CULong],
    cAttribute : CULong,
    rgAttribute : PCRYPT_ATTRIBUTE,
);

alias CMC_ADD_ATTRIBUTES_INFO = Struct__CMC_ADD_ATTRIBUTES_INFO;

alias PCMC_ADD_ATTRIBUTES_INFO = Pointer[Struct__CMC_ADD_ATTRIBUTES_INFO];

record Struct__CERT_TEMPLATE_EXT (
    pszObjId : LPSTR,
    dwMajorVersion : CULong,
    fMinorVersion : Int,
    dwMinorVersion : CULong,
);

alias CERT_TEMPLATE_EXT = Struct__CERT_TEMPLATE_EXT;

alias PCERT_TEMPLATE_EXT = Pointer[Struct__CERT_TEMPLATE_EXT];

alias HCRYPTOIDFUNCSET = RawPointer;

alias HCRYPTOIDFUNCADDR = RawPointer;

record Struct__CRYPT_OID_FUNC_ENTRY (
    pszOID : LPCSTR,
    pvFuncAddr : RawPointer,
);

alias CRYPT_OID_FUNC_ENTRY = Struct__CRYPT_OID_FUNC_ENTRY;

alias PCRYPT_OID_FUNC_ENTRY = Pointer[Struct__CRYPT_OID_FUNC_ENTRY];

external CryptInstallOIDFunctionAddress(
    hModule : HMODULE,
    dwEncodingType : CULong,
    pszFuncName : LPCSTR,
    cFuncEntry : CULong,
    rgFuncEntry : Pointer[CRYPT_OID_FUNC_ENTRY],
    dwFlags : CULong) Int;

external CryptInitOIDFunctionSet(
    pszFuncName : LPCSTR,
    dwFlags : CULong) HCRYPTOIDFUNCSET;

external CryptGetOIDFunctionAddress(
    hFuncSet : HCRYPTOIDFUNCSET,
    dwEncodingType : CULong,
    pszOID : LPCSTR,
    dwFlags : CULong,
    ppvFuncAddr : Pointer[RawPointer],
    phFuncAddr : Pointer[HCRYPTOIDFUNCADDR]) Int;

external CryptGetDefaultOIDDllList(
    hFuncSet : HCRYPTOIDFUNCSET,
    dwEncodingType : CULong,
    pwszDllList : LPWSTR,
    pcchDllList : Pointer[CULong]) Int;

external CryptGetDefaultOIDFunctionAddress(
    hFuncSet : HCRYPTOIDFUNCSET,
    dwEncodingType : CULong,
    pwszDll : LPCWSTR,
    dwFlags : CULong,
    ppvFuncAddr : Pointer[RawPointer],
    phFuncAddr : Pointer[HCRYPTOIDFUNCADDR]) Int;

external CryptFreeOIDFunctionAddress(
    hFuncAddr : HCRYPTOIDFUNCADDR,
    dwFlags : CULong) Int;

external CryptRegisterOIDFunction(
    dwEncodingType : CULong,
    pszFuncName : LPCSTR,
    pszOID : LPCSTR,
    pwszDll : LPCWSTR,
    pszOverrideFuncName : LPCSTR) Int;

external CryptUnregisterOIDFunction(
    dwEncodingType : CULong,
    pszFuncName : LPCSTR,
    pszOID : LPCSTR) Int;

external CryptRegisterDefaultOIDFunction(
    dwEncodingType : CULong,
    pszFuncName : LPCSTR,
    dwIndex : CULong,
    pwszDll : LPCWSTR) Int;

external CryptUnregisterDefaultOIDFunction(
    dwEncodingType : CULong,
    pszFuncName : LPCSTR,
    pwszDll : LPCWSTR) Int;

external CryptSetOIDFunctionValue(
    dwEncodingType : CULong,
    pszFuncName : LPCSTR,
    pszOID : LPCSTR,
    pwszValueName : LPCWSTR,
    dwValueType : CULong,
    pbValueData : Pointer[CUChar],
    cbValueData : CULong) Int;

external CryptGetOIDFunctionValue(
    dwEncodingType : CULong,
    pszFuncName : LPCSTR,
    pszOID : LPCSTR,
    pwszValueName : LPCWSTR,
    pdwValueType : Pointer[CULong],
    pbValueData : Pointer[CUChar],
    pcbValueData : Pointer[CULong]) Int;

alias PFN_CRYPT_ENUM_OID_FUNC = CCodePointer[(CULong,Pointer[CChar],Pointer[CChar],CULong,Pointer[CULong],Pointer[Pointer[UShort]],Pointer[Pointer[CUChar]],Pointer[CULong],RawPointer),(Int)];

external CryptEnumOIDFunction(
    dwEncodingType : CULong,
    pszFuncName : LPCSTR,
    pszOID : LPCSTR,
    dwFlags : CULong,
    pvArg : RawPointer,
    pfnEnumOIDFunc : PFN_CRYPT_ENUM_OID_FUNC) Int;

record Struct__CRYPT_OID_INFO (
    cbSize : CULong,
    pszOID : LPCSTR,
    pwszName : LPCWSTR,
    dwGroupId : CULong,
    unnamed_field4 : AUnionType,
    ExtraInfo : CRYPT_DATA_BLOB,
);

alias CRYPT_OID_INFO = Struct__CRYPT_OID_INFO;

alias PCRYPT_OID_INFO = Pointer[Struct__CRYPT_OID_INFO];

alias CCRYPT_OID_INFO = CRYPT_OID_INFO;

alias PCCRYPT_OID_INFO = Pointer[CRYPT_OID_INFO];

external CryptFindOIDInfo(
    dwKeyType : CULong,
    pvKey : RawPointer,
    dwGroupId : CULong) PCCRYPT_OID_INFO;

external CryptRegisterOIDInfo(
    pInfo : PCCRYPT_OID_INFO,
    dwFlags : CULong) Int;

external CryptUnregisterOIDInfo(
    pInfo : PCCRYPT_OID_INFO) Int;

alias PFN_CRYPT_ENUM_OID_INFO = CCodePointer[(Pointer[Struct__CRYPT_OID_INFO],RawPointer),(Int)];

external CryptEnumOIDInfo(
    dwGroupId : CULong,
    dwFlags : CULong,
    pvArg : RawPointer,
    pfnEnumOIDInfo : PFN_CRYPT_ENUM_OID_INFO) Int;

external CryptFindLocalizedName(
    pwszCryptName : LPCWSTR) LPCWSTR;

alias HCRYPTMSG = RawPointer;

record Struct__CERT_ISSUER_SERIAL_NUMBER (
    Issuer : CERT_NAME_BLOB,
    SerialNumber : CRYPT_INTEGER_BLOB,
);

alias CERT_ISSUER_SERIAL_NUMBER = Struct__CERT_ISSUER_SERIAL_NUMBER;

alias PCERT_ISSUER_SERIAL_NUMBER = Pointer[Struct__CERT_ISSUER_SERIAL_NUMBER];

record Struct__CERT_ID (
    dwIdChoice : CULong,
    unnamed_field1 : AUnionType,
);

alias CERT_ID = Struct__CERT_ID;

alias PCERT_ID = Pointer[Struct__CERT_ID];

record Struct__CMSG_SIGNER_ENCODE_INFO (
    cbSize : CULong,
    pCertInfo : PCERT_INFO,
    hCryptProv : UInt64,
    dwKeySpec : CULong,
    HashAlgorithm : CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo : RawPointer,
    cAuthAttr : CULong,
    rgAuthAttr : PCRYPT_ATTRIBUTE,
    cUnauthAttr : CULong,
    rgUnauthAttr : PCRYPT_ATTRIBUTE,
);

alias CMSG_SIGNER_ENCODE_INFO = Struct__CMSG_SIGNER_ENCODE_INFO;

alias PCMSG_SIGNER_ENCODE_INFO = Pointer[Struct__CMSG_SIGNER_ENCODE_INFO];

record Struct__CMSG_SIGNED_ENCODE_INFO (
    cbSize : CULong,
    cSigners : CULong,
    rgSigners : PCMSG_SIGNER_ENCODE_INFO,
    cCertEncoded : CULong,
    rgCertEncoded : PCERT_BLOB,
    cCrlEncoded : CULong,
    rgCrlEncoded : PCRL_BLOB,
);

alias CMSG_SIGNED_ENCODE_INFO = Struct__CMSG_SIGNED_ENCODE_INFO;

alias PCMSG_SIGNED_ENCODE_INFO = Pointer[Struct__CMSG_SIGNED_ENCODE_INFO];

alias CMSG_RECIPIENT_ENCODE_INFO = Struct__CMSG_RECIPIENT_ENCODE_INFO;

alias PCMSG_RECIPIENT_ENCODE_INFO = Pointer[Struct__CMSG_RECIPIENT_ENCODE_INFO];

record Struct__CMSG_ENVELOPED_ENCODE_INFO (
    cbSize : CULong,
    hCryptProv : UInt64,
    ContentEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER,
    pvEncryptionAuxInfo : RawPointer,
    cRecipients : CULong,
    rgpRecipients : Pointer[PCERT_INFO],
);

alias CMSG_ENVELOPED_ENCODE_INFO = Struct__CMSG_ENVELOPED_ENCODE_INFO;

alias PCMSG_ENVELOPED_ENCODE_INFO = Pointer[Struct__CMSG_ENVELOPED_ENCODE_INFO];

record Struct__CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO (
    cbSize : CULong,
    KeyEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER,
    pvKeyEncryptionAuxInfo : RawPointer,
    hCryptProv : UInt64,
    RecipientPublicKey : CRYPT_BIT_BLOB,
    RecipientId : CERT_ID,
);

alias CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO = Struct__CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO;

alias PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO = Pointer[Struct__CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO];

record Struct__CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO (
    cbSize : CULong,
    RecipientPublicKey : CRYPT_BIT_BLOB,
    RecipientId : CERT_ID,
    Date : FILETIME,
    pOtherAttr : PCRYPT_ATTRIBUTE_TYPE_VALUE,
);

alias CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO = Struct__CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO;

alias PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO = Pointer[Struct__CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO];

record Struct__CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO (
    cbSize : CULong,
    KeyEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER,
    pvKeyEncryptionAuxInfo : RawPointer,
    KeyWrapAlgorithm : CRYPT_ALGORITHM_IDENTIFIER,
    pvKeyWrapAuxInfo : RawPointer,
    hCryptProv : UInt64,
    dwKeySpec : CULong,
    dwKeyChoice : CULong,
    unnamed_field8 : AUnionType,
    UserKeyingMaterial : CRYPT_DATA_BLOB,
    cRecipientEncryptedKeys : CULong,
    rgpRecipientEncryptedKeys : Pointer[PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO],
);

alias CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO = Struct__CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO;

alias PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO = Pointer[Struct__CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO];

record Struct__CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO (
    cbSize : CULong,
    KeyEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER,
    pvKeyEncryptionAuxInfo : RawPointer,
    hCryptProv : UInt64,
    dwKeyChoice : CULong,
    unnamed_field5 : AUnionType,
    KeyId : CRYPT_DATA_BLOB,
    Date : FILETIME,
    pOtherAttr : PCRYPT_ATTRIBUTE_TYPE_VALUE,
);

alias CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO = Struct__CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO;

alias PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO = Pointer[Struct__CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO];

record Struct__CMSG_RECIPIENT_ENCODE_INFO (
    dwRecipientChoice : CULong,
    unnamed_field1 : AUnionType,
);

record Struct__CMSG_RC2_AUX_INFO (
    cbSize : CULong,
    dwBitLen : CULong,
);

alias CMSG_RC2_AUX_INFO = Struct__CMSG_RC2_AUX_INFO;

alias PCMSG_RC2_AUX_INFO = Pointer[Struct__CMSG_RC2_AUX_INFO];

record Struct__CMSG_SP3_COMPATIBLE_AUX_INFO (
    cbSize : CULong,
    dwFlags : CULong,
);

alias CMSG_SP3_COMPATIBLE_AUX_INFO = Struct__CMSG_SP3_COMPATIBLE_AUX_INFO;

alias PCMSG_SP3_COMPATIBLE_AUX_INFO = Pointer[Struct__CMSG_SP3_COMPATIBLE_AUX_INFO];

record Struct__CMSG_RC4_AUX_INFO (
    cbSize : CULong,
    dwBitLen : CULong,
);

alias CMSG_RC4_AUX_INFO = Struct__CMSG_RC4_AUX_INFO;

alias PCMSG_RC4_AUX_INFO = Pointer[Struct__CMSG_RC4_AUX_INFO];

record Struct__CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO (
    cbSize : CULong,
    SignedInfo : CMSG_SIGNED_ENCODE_INFO,
    EnvelopedInfo : CMSG_ENVELOPED_ENCODE_INFO,
);

alias CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO = Struct__CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO;

alias PCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO = Pointer[Struct__CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO];

record Struct__CMSG_HASHED_ENCODE_INFO (
    cbSize : CULong,
    hCryptProv : UInt64,
    HashAlgorithm : CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo : RawPointer,
);

alias CMSG_HASHED_ENCODE_INFO = Struct__CMSG_HASHED_ENCODE_INFO;

alias PCMSG_HASHED_ENCODE_INFO = Pointer[Struct__CMSG_HASHED_ENCODE_INFO];

record Struct__CMSG_ENCRYPTED_ENCODE_INFO (
    cbSize : CULong,
    ContentEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER,
    pvEncryptionAuxInfo : RawPointer,
);

alias CMSG_ENCRYPTED_ENCODE_INFO = Struct__CMSG_ENCRYPTED_ENCODE_INFO;

alias PCMSG_ENCRYPTED_ENCODE_INFO = Pointer[Struct__CMSG_ENCRYPTED_ENCODE_INFO];

alias PFN_CMSG_STREAM_OUTPUT = CCodePointer[(RawPointer,Pointer[CUChar],CULong,Int),(Int)];

record Struct__CMSG_STREAM_INFO (
    cbContent : CULong,
    pfnStreamOutput : PFN_CMSG_STREAM_OUTPUT,
    pvArg : RawPointer,
);

alias CMSG_STREAM_INFO = Struct__CMSG_STREAM_INFO;

alias PCMSG_STREAM_INFO = Pointer[Struct__CMSG_STREAM_INFO];

external CryptMsgOpenToEncode(
    dwMsgEncodingType : CULong,
    dwFlags : CULong,
    dwMsgType : CULong,
    pvMsgEncodeInfo : RawPointer,
    pszInnerContentObjID : LPSTR,
    pStreamInfo : PCMSG_STREAM_INFO) HCRYPTMSG;

external CryptMsgCalculateEncodedLength(
    dwMsgEncodingType : CULong,
    dwFlags : CULong,
    dwMsgType : CULong,
    pvMsgEncodeInfo : RawPointer,
    pszInnerContentObjID : LPSTR,
    cbData : CULong) CULong;

external CryptMsgOpenToDecode(
    dwMsgEncodingType : CULong,
    dwFlags : CULong,
    dwMsgType : CULong,
    hCryptProv : UInt64,
    pRecipientInfo : PCERT_INFO,
    pStreamInfo : PCMSG_STREAM_INFO) HCRYPTMSG;

external CryptMsgDuplicate(
    hCryptMsg : HCRYPTMSG) HCRYPTMSG;

external CryptMsgClose(
    hCryptMsg : HCRYPTMSG) Int;

external CryptMsgUpdate(
    hCryptMsg : HCRYPTMSG,
    pbData : Pointer[CUChar],
    cbData : CULong,
    fFinal : Int) Int;

external CryptMsgGetParam(
    hCryptMsg : HCRYPTMSG,
    dwParamType : CULong,
    dwIndex : CULong,
    pvData : RawPointer,
    pcbData : Pointer[CULong]) Int;

record Struct__CMSG_SIGNER_INFO (
    dwVersion : CULong,
    Issuer : CERT_NAME_BLOB,
    SerialNumber : CRYPT_INTEGER_BLOB,
    HashAlgorithm : CRYPT_ALGORITHM_IDENTIFIER,
    HashEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedHash : CRYPT_DATA_BLOB,
    AuthAttrs : CRYPT_ATTRIBUTES,
    UnauthAttrs : CRYPT_ATTRIBUTES,
);

alias CMSG_SIGNER_INFO = Struct__CMSG_SIGNER_INFO;

alias PCMSG_SIGNER_INFO = Pointer[Struct__CMSG_SIGNER_INFO];

record Struct__CMSG_CMS_SIGNER_INFO (
    dwVersion : CULong,
    SignerId : CERT_ID,
    HashAlgorithm : CRYPT_ALGORITHM_IDENTIFIER,
    HashEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedHash : CRYPT_DATA_BLOB,
    AuthAttrs : CRYPT_ATTRIBUTES,
    UnauthAttrs : CRYPT_ATTRIBUTES,
);

alias CMSG_CMS_SIGNER_INFO = Struct__CMSG_CMS_SIGNER_INFO;

alias PCMSG_CMS_SIGNER_INFO = Pointer[Struct__CMSG_CMS_SIGNER_INFO];

alias CMSG_ATTR = CRYPT_ATTRIBUTES;

alias PCMSG_ATTR = Pointer[CRYPT_ATTRIBUTES];

record Struct__CMSG_KEY_TRANS_RECIPIENT_INFO (
    dwVersion : CULong,
    RecipientId : CERT_ID,
    KeyEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedKey : CRYPT_DATA_BLOB,
);

alias CMSG_KEY_TRANS_RECIPIENT_INFO = Struct__CMSG_KEY_TRANS_RECIPIENT_INFO;

alias PCMSG_KEY_TRANS_RECIPIENT_INFO = Pointer[Struct__CMSG_KEY_TRANS_RECIPIENT_INFO];

record Struct__CMSG_RECIPIENT_ENCRYPTED_KEY_INFO (
    RecipientId : CERT_ID,
    EncryptedKey : CRYPT_DATA_BLOB,
    Date : FILETIME,
    pOtherAttr : PCRYPT_ATTRIBUTE_TYPE_VALUE,
);

alias CMSG_RECIPIENT_ENCRYPTED_KEY_INFO = Struct__CMSG_RECIPIENT_ENCRYPTED_KEY_INFO;

alias PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO = Pointer[Struct__CMSG_RECIPIENT_ENCRYPTED_KEY_INFO];

record Struct__CMSG_KEY_AGREE_RECIPIENT_INFO (
    dwVersion : CULong,
    dwOriginatorChoice : CULong,
    unnamed_field2 : AUnionType,
    UserKeyingMaterial : CRYPT_DATA_BLOB,
    KeyEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER,
    cRecipientEncryptedKeys : CULong,
    rgpRecipientEncryptedKeys : Pointer[PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO],
);

alias CMSG_KEY_AGREE_RECIPIENT_INFO = Struct__CMSG_KEY_AGREE_RECIPIENT_INFO;

alias PCMSG_KEY_AGREE_RECIPIENT_INFO = Pointer[Struct__CMSG_KEY_AGREE_RECIPIENT_INFO];

record Struct__CMSG_MAIL_LIST_RECIPIENT_INFO (
    dwVersion : CULong,
    KeyId : CRYPT_DATA_BLOB,
    KeyEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedKey : CRYPT_DATA_BLOB,
    Date : FILETIME,
    pOtherAttr : PCRYPT_ATTRIBUTE_TYPE_VALUE,
);

alias CMSG_MAIL_LIST_RECIPIENT_INFO = Struct__CMSG_MAIL_LIST_RECIPIENT_INFO;

alias PCMSG_MAIL_LIST_RECIPIENT_INFO = Pointer[Struct__CMSG_MAIL_LIST_RECIPIENT_INFO];

record Struct__CMSG_CMS_RECIPIENT_INFO (
    dwRecipientChoice : CULong,
    unnamed_field1 : AUnionType,
);

alias CMSG_CMS_RECIPIENT_INFO = Struct__CMSG_CMS_RECIPIENT_INFO;

alias PCMSG_CMS_RECIPIENT_INFO = Pointer[Struct__CMSG_CMS_RECIPIENT_INFO];

external CryptMsgControl(
    hCryptMsg : HCRYPTMSG,
    dwFlags : CULong,
    dwCtrlType : CULong,
    pvCtrlPara : RawPointer) Int;

record Struct__CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA (
    cbSize : CULong,
    hCryptProv : UInt64,
    dwSignerIndex : CULong,
    dwSignerType : CULong,
    pvSigner : RawPointer,
);

alias CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA = Struct__CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA;

alias PCMSG_CTRL_VERIFY_SIGNATURE_EX_PARA = Pointer[Struct__CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA];

record Struct__CMSG_CTRL_DECRYPT_PARA (
    cbSize : CULong,
    hCryptProv : UInt64,
    dwKeySpec : CULong,
    dwRecipientIndex : CULong,
);

alias CMSG_CTRL_DECRYPT_PARA = Struct__CMSG_CTRL_DECRYPT_PARA;

alias PCMSG_CTRL_DECRYPT_PARA = Pointer[Struct__CMSG_CTRL_DECRYPT_PARA];

record Struct__CMSG_CTRL_KEY_TRANS_DECRYPT_PARA (
    cbSize : CULong,
    hCryptProv : UInt64,
    dwKeySpec : CULong,
    pKeyTrans : PCMSG_KEY_TRANS_RECIPIENT_INFO,
    dwRecipientIndex : CULong,
);

alias CMSG_CTRL_KEY_TRANS_DECRYPT_PARA = Struct__CMSG_CTRL_KEY_TRANS_DECRYPT_PARA;

alias PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA = Pointer[Struct__CMSG_CTRL_KEY_TRANS_DECRYPT_PARA];

record Struct__CMSG_CTRL_KEY_AGREE_DECRYPT_PARA (
    cbSize : CULong,
    hCryptProv : UInt64,
    dwKeySpec : CULong,
    pKeyAgree : PCMSG_KEY_AGREE_RECIPIENT_INFO,
    dwRecipientIndex : CULong,
    dwRecipientEncryptedKeyIndex : CULong,
    OriginatorPublicKey : CRYPT_BIT_BLOB,
);

alias CMSG_CTRL_KEY_AGREE_DECRYPT_PARA = Struct__CMSG_CTRL_KEY_AGREE_DECRYPT_PARA;

alias PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA = Pointer[Struct__CMSG_CTRL_KEY_AGREE_DECRYPT_PARA];

record Struct__CMSG_CTRL_MAIL_LIST_DECRYPT_PARA (
    cbSize : CULong,
    hCryptProv : UInt64,
    pMailList : PCMSG_MAIL_LIST_RECIPIENT_INFO,
    dwRecipientIndex : CULong,
    dwKeyChoice : CULong,
    unnamed_field5 : AUnionType,
);

alias CMSG_CTRL_MAIL_LIST_DECRYPT_PARA = Struct__CMSG_CTRL_MAIL_LIST_DECRYPT_PARA;

alias PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA = Pointer[Struct__CMSG_CTRL_MAIL_LIST_DECRYPT_PARA];

record Struct__CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA (
    cbSize : CULong,
    dwSignerIndex : CULong,
    blob : CRYPT_DATA_BLOB,
);

alias CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA = Struct__CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA;

alias PCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA = Pointer[Struct__CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA];

record Struct__CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA (
    cbSize : CULong,
    dwSignerIndex : CULong,
    dwUnauthAttrIndex : CULong,
);

alias CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA = Struct__CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA;

alias PCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA = Pointer[Struct__CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA];

external CryptMsgVerifyCountersignatureEncoded(
    hCryptProv : UInt64,
    dwEncodingType : CULong,
    pbSignerInfo : PBYTE,
    cbSignerInfo : CULong,
    pbSignerInfoCountersignature : PBYTE,
    cbSignerInfoCountersignature : CULong,
    pciCountersigner : PCERT_INFO) Int;

external CryptMsgVerifyCountersignatureEncodedEx(
    hCryptProv : UInt64,
    dwEncodingType : CULong,
    pbSignerInfo : PBYTE,
    cbSignerInfo : CULong,
    pbSignerInfoCountersignature : PBYTE,
    cbSignerInfoCountersignature : CULong,
    dwSignerType : CULong,
    pvSigner : RawPointer,
    dwFlags : CULong,
    pvReserved : RawPointer) Int;

external CryptMsgCountersign(
    hCryptMsg : HCRYPTMSG,
    dwIndex : CULong,
    cCountersigners : CULong,
    rgCountersigners : PCMSG_SIGNER_ENCODE_INFO) Int;

external CryptMsgCountersignEncoded(
    dwEncodingType : CULong,
    pbSignerInfo : PBYTE,
    cbSignerInfo : CULong,
    cCountersigners : CULong,
    rgCountersigners : PCMSG_SIGNER_ENCODE_INFO,
    pbCountersignature : PBYTE,
    pcbCountersignature : PDWORD) Int;

alias PFN_CMSG_ALLOC = CCodePointer[(UInt64),(RawPointer)];

alias PFN_CMSG_FREE = CCodePointer[(RawPointer),()];

alias PFN_CMSG_GEN_ENCRYPT_KEY = CCodePointer[(Pointer[UInt64],Pointer[Struct__CRYPT_ALGORITHM_IDENTIFIER],RawPointer,Pointer[Struct__CERT_PUBLIC_KEY_INFO],CCodePointer[(UInt64),(RawPointer)],Pointer[UInt64],Pointer[Pointer[CUChar]],Pointer[CULong]),(Int)];

alias PFN_CMSG_EXPORT_ENCRYPT_KEY = CCodePointer[(UInt64,UInt64,Pointer[Struct__CERT_PUBLIC_KEY_INFO],Pointer[CUChar],Pointer[CULong]),(Int)];

alias PFN_CMSG_IMPORT_ENCRYPT_KEY = CCodePointer[(UInt64,CULong,Pointer[Struct__CRYPT_ALGORITHM_IDENTIFIER],Pointer[Struct__CRYPT_ALGORITHM_IDENTIFIER],Pointer[CUChar],CULong,Pointer[UInt64]),(Int)];

record Struct__CMSG_CONTENT_ENCRYPT_INFO (
    cbSize : CULong,
    hCryptProv : UInt64,
    ContentEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER,
    pvEncryptionAuxInfo : RawPointer,
    cRecipients : CULong,
    rgCmsRecipients : PCMSG_RECIPIENT_ENCODE_INFO,
    pfnAlloc : PFN_CMSG_ALLOC,
    pfnFree : PFN_CMSG_FREE,
    dwEncryptFlags : CULong,
    hContentEncryptKey : UInt64,
    dwFlags : CULong,
);

alias CMSG_CONTENT_ENCRYPT_INFO = Struct__CMSG_CONTENT_ENCRYPT_INFO;

alias PCMSG_CONTENT_ENCRYPT_INFO = Pointer[Struct__CMSG_CONTENT_ENCRYPT_INFO];

alias PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY = CCodePointer[(Pointer[Struct__CMSG_CONTENT_ENCRYPT_INFO],CULong,RawPointer),(Int)];

record Struct__CMSG_KEY_TRANS_ENCRYPT_INFO (
    cbSize : CULong,
    dwRecipientIndex : CULong,
    KeyEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedKey : CRYPT_DATA_BLOB,
    dwFlags : CULong,
);

alias CMSG_KEY_TRANS_ENCRYPT_INFO = Struct__CMSG_KEY_TRANS_ENCRYPT_INFO;

alias PCMSG_KEY_TRANS_ENCRYPT_INFO = Pointer[Struct__CMSG_KEY_TRANS_ENCRYPT_INFO];

alias PFN_CMSG_EXPORT_KEY_TRANS = CCodePointer[(Pointer[Struct__CMSG_CONTENT_ENCRYPT_INFO],Pointer[Struct__CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO],Pointer[Struct__CMSG_KEY_TRANS_ENCRYPT_INFO],CULong,RawPointer),(Int)];

record Struct__CMSG_KEY_AGREE_KEY_ENCRYPT_INFO (
    cbSize : CULong,
    EncryptedKey : CRYPT_DATA_BLOB,
);

alias CMSG_KEY_AGREE_KEY_ENCRYPT_INFO = Struct__CMSG_KEY_AGREE_KEY_ENCRYPT_INFO;

alias PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO = Pointer[Struct__CMSG_KEY_AGREE_KEY_ENCRYPT_INFO];

record Struct__CMSG_KEY_AGREE_ENCRYPT_INFO (
    cbSize : CULong,
    dwRecipientIndex : CULong,
    KeyEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER,
    UserKeyingMaterial : CRYPT_DATA_BLOB,
    dwOriginatorChoice : CULong,
    unnamed_field5 : AUnionType,
    cKeyAgreeKeyEncryptInfo : CULong,
    rgpKeyAgreeKeyEncryptInfo : Pointer[PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO],
    dwFlags : CULong,
);

alias CMSG_KEY_AGREE_ENCRYPT_INFO = Struct__CMSG_KEY_AGREE_ENCRYPT_INFO;

alias PCMSG_KEY_AGREE_ENCRYPT_INFO = Pointer[Struct__CMSG_KEY_AGREE_ENCRYPT_INFO];

alias PFN_CMSG_EXPORT_KEY_AGREE = CCodePointer[(Pointer[Struct__CMSG_CONTENT_ENCRYPT_INFO],Pointer[Struct__CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO],Pointer[Struct__CMSG_KEY_AGREE_ENCRYPT_INFO],CULong,RawPointer),(Int)];

record Struct__CMSG_MAIL_LIST_ENCRYPT_INFO (
    cbSize : CULong,
    dwRecipientIndex : CULong,
    KeyEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedKey : CRYPT_DATA_BLOB,
    dwFlags : CULong,
);

alias CMSG_MAIL_LIST_ENCRYPT_INFO = Struct__CMSG_MAIL_LIST_ENCRYPT_INFO;

alias PCMSG_MAIL_LIST_ENCRYPT_INFO = Pointer[Struct__CMSG_MAIL_LIST_ENCRYPT_INFO];

alias PFN_CMSG_EXPORT_MAIL_LIST = CCodePointer[(Pointer[Struct__CMSG_CONTENT_ENCRYPT_INFO],Pointer[Struct__CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO],Pointer[Struct__CMSG_MAIL_LIST_ENCRYPT_INFO],CULong,RawPointer),(Int)];

alias PFN_CMSG_IMPORT_KEY_TRANS = CCodePointer[(Pointer[Struct__CRYPT_ALGORITHM_IDENTIFIER],Pointer[Struct__CMSG_CTRL_KEY_TRANS_DECRYPT_PARA],CULong,RawPointer,Pointer[UInt64]),(Int)];

alias PFN_CMSG_IMPORT_KEY_AGREE = CCodePointer[(Pointer[Struct__CRYPT_ALGORITHM_IDENTIFIER],Pointer[Struct__CMSG_CTRL_KEY_AGREE_DECRYPT_PARA],CULong,RawPointer,Pointer[UInt64]),(Int)];

alias PFN_CMSG_IMPORT_MAIL_LIST = CCodePointer[(Pointer[Struct__CRYPT_ALGORITHM_IDENTIFIER],Pointer[Struct__CMSG_CTRL_MAIL_LIST_DECRYPT_PARA],CULong,RawPointer,Pointer[UInt64]),(Int)];

alias HCERTSTORE = RawPointer;

record Struct__CERT_CONTEXT (
    dwCertEncodingType : CULong,
    pbCertEncoded : Pointer[CUChar],
    cbCertEncoded : CULong,
    pCertInfo : PCERT_INFO,
    hCertStore : HCERTSTORE,
);

alias CERT_CONTEXT = Struct__CERT_CONTEXT;

alias PCERT_CONTEXT = Pointer[Struct__CERT_CONTEXT];

alias PCCERT_CONTEXT = Pointer[CERT_CONTEXT];

record Struct__CRL_CONTEXT (
    dwCertEncodingType : CULong,
    pbCrlEncoded : Pointer[CUChar],
    cbCrlEncoded : CULong,
    pCrlInfo : PCRL_INFO,
    hCertStore : HCERTSTORE,
);

alias CRL_CONTEXT = Struct__CRL_CONTEXT;

alias PCRL_CONTEXT = Pointer[Struct__CRL_CONTEXT];

alias PCCRL_CONTEXT = Pointer[CRL_CONTEXT];

record Struct__CTL_CONTEXT (
    dwMsgAndCertEncodingType : CULong,
    pbCtlEncoded : Pointer[CUChar],
    cbCtlEncoded : CULong,
    pCtlInfo : PCTL_INFO,
    hCertStore : HCERTSTORE,
    hCryptMsg : HCRYPTMSG,
    pbCtlContent : Pointer[CUChar],
    cbCtlContent : CULong,
);

alias CTL_CONTEXT = Struct__CTL_CONTEXT;

alias PCTL_CONTEXT = Pointer[Struct__CTL_CONTEXT];

alias PCCTL_CONTEXT = Pointer[CTL_CONTEXT];

record Struct__CRYPT_KEY_PROV_PARAM (
    dwParam : CULong,
    pbData : Pointer[CUChar],
    cbData : CULong,
    dwFlags : CULong,
);

alias CRYPT_KEY_PROV_PARAM = Struct__CRYPT_KEY_PROV_PARAM;

alias PCRYPT_KEY_PROV_PARAM = Pointer[Struct__CRYPT_KEY_PROV_PARAM];

record Struct__CRYPT_KEY_PROV_INFO (
    pwszContainerName : LPWSTR,
    pwszProvName : LPWSTR,
    dwProvType : CULong,
    dwFlags : CULong,
    cProvParam : CULong,
    rgProvParam : PCRYPT_KEY_PROV_PARAM,
    dwKeySpec : CULong,
);

alias CRYPT_KEY_PROV_INFO = Struct__CRYPT_KEY_PROV_INFO;

alias PCRYPT_KEY_PROV_INFO = Pointer[Struct__CRYPT_KEY_PROV_INFO];

record Struct__CERT_KEY_CONTEXT (
    cbSize : CULong,
    hCryptProv : UInt64,
    dwKeySpec : CULong,
);

alias CERT_KEY_CONTEXT = Struct__CERT_KEY_CONTEXT;

alias PCERT_KEY_CONTEXT = Pointer[Struct__CERT_KEY_CONTEXT];

record Struct__CERT_SYSTEM_STORE_RELOCATE_PARA (
    unnamed_field0 : AUnionType,
    unnamed_field1 : AUnionType,
);

alias CERT_SYSTEM_STORE_RELOCATE_PARA = Struct__CERT_SYSTEM_STORE_RELOCATE_PARA;

alias PCERT_SYSTEM_STORE_RELOCATE_PARA = Pointer[Struct__CERT_SYSTEM_STORE_RELOCATE_PARA];

record Struct__CERT_REGISTRY_STORE_CLIENT_GPT_PARA (
    hKeyBase : HKEY,
    pwszRegPath : LPWSTR,
);

alias CERT_REGISTRY_STORE_CLIENT_GPT_PARA = Struct__CERT_REGISTRY_STORE_CLIENT_GPT_PARA;

alias PCERT_REGISTRY_STORE_CLIENT_GPT_PARA = Pointer[Struct__CERT_REGISTRY_STORE_CLIENT_GPT_PARA];

record Struct__CERT_REGISTRY_STORE_ROAMING_PARA (
    hKey : HKEY,
    pwszStoreDirectory : LPWSTR,
);

alias CERT_REGISTRY_STORE_ROAMING_PARA = Struct__CERT_REGISTRY_STORE_ROAMING_PARA;

alias PCERT_REGISTRY_STORE_ROAMING_PARA = Pointer[Struct__CERT_REGISTRY_STORE_ROAMING_PARA];

record Struct__CERT_LDAP_STORE_OPENED_PARA (
    pvLdapSessionHandle : RawPointer,
    pwszLdapUrl : LPCWSTR,
);

alias CERT_LDAP_STORE_OPENED_PARA = Struct__CERT_LDAP_STORE_OPENED_PARA;

alias PCERT_LDAP_STORE_OPENED_PARA = Pointer[Struct__CERT_LDAP_STORE_OPENED_PARA];

external CertOpenStore(
    lpszStoreProvider : LPCSTR,
    dwEncodingType : CULong,
    hCryptProv : UInt64,
    dwFlags : CULong,
    pvPara : RawPointer) HCERTSTORE;

alias HCERTSTOREPROV = RawPointer;

record Struct__CERT_STORE_PROV_INFO (
    cbSize : CULong,
    cStoreProvFunc : CULong,
    rgpvStoreProvFunc : Pointer[RawPointer],
    hStoreProv : HCERTSTOREPROV,
    dwStoreProvFlags : CULong,
    hStoreProvFuncAddr2 : HCRYPTOIDFUNCADDR,
);

alias CERT_STORE_PROV_INFO = Struct__CERT_STORE_PROV_INFO;

alias PCERT_STORE_PROV_INFO = Pointer[Struct__CERT_STORE_PROV_INFO];

alias PFN_CERT_DLL_OPEN_STORE_PROV_FUNC = CCodePointer[(Pointer[CChar],CULong,UInt64,CULong,RawPointer,RawPointer,Pointer[Struct__CERT_STORE_PROV_INFO]),(Int)];

alias PFN_CERT_STORE_PROV_CLOSE = CCodePointer[(RawPointer,CULong),()];

alias PFN_CERT_STORE_PROV_READ_CERT = CCodePointer[(RawPointer,Pointer[Struct__CERT_CONTEXT],CULong,Pointer[Pointer[Struct__CERT_CONTEXT]]),(Int)];

alias PFN_CERT_STORE_PROV_WRITE_CERT = CCodePointer[(RawPointer,Pointer[Struct__CERT_CONTEXT],CULong),(Int)];

alias PFN_CERT_STORE_PROV_DELETE_CERT = CCodePointer[(RawPointer,Pointer[Struct__CERT_CONTEXT],CULong),(Int)];

alias PFN_CERT_STORE_PROV_SET_CERT_PROPERTY = CCodePointer[(RawPointer,Pointer[Struct__CERT_CONTEXT],CULong,CULong,RawPointer),(Int)];

alias PFN_CERT_STORE_PROV_READ_CRL = CCodePointer[(RawPointer,Pointer[Struct__CRL_CONTEXT],CULong,Pointer[Pointer[Struct__CRL_CONTEXT]]),(Int)];

alias PFN_CERT_STORE_PROV_WRITE_CRL = CCodePointer[(RawPointer,Pointer[Struct__CRL_CONTEXT],CULong),(Int)];

alias PFN_CERT_STORE_PROV_DELETE_CRL = CCodePointer[(RawPointer,Pointer[Struct__CRL_CONTEXT],CULong),(Int)];

alias PFN_CERT_STORE_PROV_SET_CRL_PROPERTY = CCodePointer[(RawPointer,Pointer[Struct__CRL_CONTEXT],CULong,CULong,RawPointer),(Int)];

alias PFN_CERT_STORE_PROV_READ_CTL = CCodePointer[(RawPointer,Pointer[Struct__CTL_CONTEXT],CULong,Pointer[Pointer[Struct__CTL_CONTEXT]]),(Int)];

alias PFN_CERT_STORE_PROV_WRITE_CTL = CCodePointer[(RawPointer,Pointer[Struct__CTL_CONTEXT],CULong),(Int)];

alias PFN_CERT_STORE_PROV_DELETE_CTL = CCodePointer[(RawPointer,Pointer[Struct__CTL_CONTEXT],CULong),(Int)];

alias PFN_CERT_STORE_PROV_SET_CTL_PROPERTY = CCodePointer[(RawPointer,Pointer[Struct__CTL_CONTEXT],CULong,CULong,RawPointer),(Int)];

alias PFN_CERT_STORE_PROV_CONTROL = CCodePointer[(RawPointer,CULong,CULong,RawPointer),(Int)];

record Struct__CERT_STORE_PROV_FIND_INFO (
    cbSize : CULong,
    dwMsgAndCertEncodingType : CULong,
    dwFindFlags : CULong,
    dwFindType : CULong,
    pvFindPara : RawPointer,
);

alias CERT_STORE_PROV_FIND_INFO = Struct__CERT_STORE_PROV_FIND_INFO;

alias PCERT_STORE_PROV_FIND_INFO = Pointer[Struct__CERT_STORE_PROV_FIND_INFO];

alias CCERT_STORE_PROV_FIND_INFO = CERT_STORE_PROV_FIND_INFO;

alias PCCERT_STORE_PROV_FIND_INFO = Pointer[CERT_STORE_PROV_FIND_INFO];

alias PFN_CERT_STORE_PROV_FIND_CERT = CCodePointer[(RawPointer,Pointer[Struct__CERT_STORE_PROV_FIND_INFO],Pointer[Struct__CERT_CONTEXT],CULong,Pointer[RawPointer],Pointer[Pointer[Struct__CERT_CONTEXT]]),(Int)];

alias PFN_CERT_STORE_PROV_FREE_FIND_CERT = CCodePointer[(RawPointer,Pointer[Struct__CERT_CONTEXT],RawPointer,CULong),(Int)];

alias PFN_CERT_STORE_PROV_GET_CERT_PROPERTY = CCodePointer[(RawPointer,Pointer[Struct__CERT_CONTEXT],CULong,CULong,RawPointer,Pointer[CULong]),(Int)];

alias PFN_CERT_STORE_PROV_FIND_CRL = CCodePointer[(RawPointer,Pointer[Struct__CERT_STORE_PROV_FIND_INFO],Pointer[Struct__CRL_CONTEXT],CULong,Pointer[RawPointer],Pointer[Pointer[Struct__CRL_CONTEXT]]),(Int)];

alias PFN_CERT_STORE_PROV_FREE_FIND_CRL = CCodePointer[(RawPointer,Pointer[Struct__CRL_CONTEXT],RawPointer,CULong),(Int)];

alias PFN_CERT_STORE_PROV_GET_CRL_PROPERTY = CCodePointer[(RawPointer,Pointer[Struct__CRL_CONTEXT],CULong,CULong,RawPointer,Pointer[CULong]),(Int)];

alias PFN_CERT_STORE_PROV_FIND_CTL = CCodePointer[(RawPointer,Pointer[Struct__CERT_STORE_PROV_FIND_INFO],Pointer[Struct__CTL_CONTEXT],CULong,Pointer[RawPointer],Pointer[Pointer[Struct__CTL_CONTEXT]]),(Int)];

alias PFN_CERT_STORE_PROV_FREE_FIND_CTL = CCodePointer[(RawPointer,Pointer[Struct__CTL_CONTEXT],RawPointer,CULong),(Int)];

alias PFN_CERT_STORE_PROV_GET_CTL_PROPERTY = CCodePointer[(RawPointer,Pointer[Struct__CTL_CONTEXT],CULong,CULong,RawPointer,Pointer[CULong]),(Int)];

external CertDuplicateStore(
    hCertStore : HCERTSTORE) HCERTSTORE;

external CertSaveStore(
    hCertStore : HCERTSTORE,
    dwEncodingType : CULong,
    dwSaveAs : CULong,
    dwSaveTo : CULong,
    pvSaveToPara : RawPointer,
    dwFlags : CULong) Int;

external CertCloseStore(
    hCertStore : HCERTSTORE,
    dwFlags : CULong) Int;

external CertGetSubjectCertificateFromStore(
    hCertStore : HCERTSTORE,
    dwCertEncodingType : CULong,
    pCertId : PCERT_INFO) PCCERT_CONTEXT;

external CertEnumCertificatesInStore(
    hCertStore : HCERTSTORE,
    pPrevCertContext : PCCERT_CONTEXT) PCCERT_CONTEXT;

external CertFindCertificateInStore(
    hCertStore : HCERTSTORE,
    dwCertEncodingType : CULong,
    dwFindFlags : CULong,
    dwFindType : CULong,
    pvFindPara : RawPointer,
    pPrevCertContext : PCCERT_CONTEXT) PCCERT_CONTEXT;

external CertGetIssuerCertificateFromStore(
    hCertStore : HCERTSTORE,
    pSubjectContext : PCCERT_CONTEXT,
    pPrevIssuerContext : PCCERT_CONTEXT,
    pdwFlags : Pointer[CULong]) PCCERT_CONTEXT;

external CertVerifySubjectCertificateContext(
    pSubject : PCCERT_CONTEXT,
    pIssuer : PCCERT_CONTEXT,
    pdwFlags : Pointer[CULong]) Int;

external CertDuplicateCertificateContext(
    pCertContext : PCCERT_CONTEXT) PCCERT_CONTEXT;

external CertCreateCertificateContext(
    dwCertEncodingType : CULong,
    pbCertEncoded : Pointer[CUChar],
    cbCertEncoded : CULong) PCCERT_CONTEXT;

external CertFreeCertificateContext(
    pCertContext : PCCERT_CONTEXT) Int;

external CertSetCertificateContextProperty(
    pCertContext : PCCERT_CONTEXT,
    dwPropId : CULong,
    dwFlags : CULong,
    pvData : RawPointer) Int;

external CertGetCertificateContextProperty(
    pCertContext : PCCERT_CONTEXT,
    dwPropId : CULong,
    pvData : RawPointer,
    pcbData : Pointer[CULong]) Int;

external CertEnumCertificateContextProperties(
    pCertContext : PCCERT_CONTEXT,
    dwPropId : CULong) CULong;

external CertCreateCTLEntryFromCertificateContextProperties(
    pCertContext : PCCERT_CONTEXT,
    cOptAttr : CULong,
    rgOptAttr : PCRYPT_ATTRIBUTE,
    dwFlags : CULong,
    pvReserved : RawPointer,
    pCtlEntry : PCTL_ENTRY,
    pcbCtlEntry : Pointer[CULong]) Int;

external CertSetCertificateContextPropertiesFromCTLEntry(
    pCertContext : PCCERT_CONTEXT,
    pCtlEntry : PCTL_ENTRY,
    dwFlags : CULong) Int;

external CertGetCRLFromStore(
    hCertStore : HCERTSTORE,
    pIssuerContext : PCCERT_CONTEXT,
    pPrevCrlContext : PCCRL_CONTEXT,
    pdwFlags : Pointer[CULong]) PCCRL_CONTEXT;

external CertEnumCRLsInStore(
    hCertStore : HCERTSTORE,
    pPrevCrlContext : PCCRL_CONTEXT) PCCRL_CONTEXT;

external CertFindCRLInStore(
    hCertStore : HCERTSTORE,
    dwCertEncodingType : CULong,
    dwFindFlags : CULong,
    dwFindType : CULong,
    pvFindPara : RawPointer,
    pPrevCrlContext : PCCRL_CONTEXT) PCCRL_CONTEXT;

record Struct__CRL_FIND_ISSUED_FOR_PARA (
    pSubjectCert : PCCERT_CONTEXT,
    pIssuerCert : PCCERT_CONTEXT,
);

alias CRL_FIND_ISSUED_FOR_PARA = Struct__CRL_FIND_ISSUED_FOR_PARA;

alias PCRL_FIND_ISSUED_FOR_PARA = Pointer[Struct__CRL_FIND_ISSUED_FOR_PARA];

external CertDuplicateCRLContext(
    pCrlContext : PCCRL_CONTEXT) PCCRL_CONTEXT;

external CertCreateCRLContext(
    dwCertEncodingType : CULong,
    pbCrlEncoded : Pointer[CUChar],
    cbCrlEncoded : CULong) PCCRL_CONTEXT;

external CertFreeCRLContext(
    pCrlContext : PCCRL_CONTEXT) Int;

external CertSetCRLContextProperty(
    pCrlContext : PCCRL_CONTEXT,
    dwPropId : CULong,
    dwFlags : CULong,
    pvData : RawPointer) Int;

external CertGetCRLContextProperty(
    pCrlContext : PCCRL_CONTEXT,
    dwPropId : CULong,
    pvData : RawPointer,
    pcbData : Pointer[CULong]) Int;

external CertEnumCRLContextProperties(
    pCrlContext : PCCRL_CONTEXT,
    dwPropId : CULong) CULong;

external CertFindCertificateInCRL(
    pCert : PCCERT_CONTEXT,
    pCrlContext : PCCRL_CONTEXT,
    dwFlags : CULong,
    pvReserved : RawPointer,
    ppCrlEntry : Pointer[PCRL_ENTRY]) Int;

external CertIsValidCRLForCertificate(
    pCert : PCCERT_CONTEXT,
    pCrl : PCCRL_CONTEXT,
    dwFlags : CULong,
    pvReserved : RawPointer) Int;

external CertAddEncodedCertificateToStore(
    hCertStore : HCERTSTORE,
    dwCertEncodingType : CULong,
    pbCertEncoded : Pointer[CUChar],
    cbCertEncoded : CULong,
    dwAddDisposition : CULong,
    ppCertContext : Pointer[PCCERT_CONTEXT]) Int;

external CertAddCertificateContextToStore(
    hCertStore : HCERTSTORE,
    pCertContext : PCCERT_CONTEXT,
    dwAddDisposition : CULong,
    ppStoreContext : Pointer[PCCERT_CONTEXT]) Int;

external CertAddSerializedElementToStore(
    hCertStore : HCERTSTORE,
    pbElement : Pointer[CUChar],
    cbElement : CULong,
    dwAddDisposition : CULong,
    dwFlags : CULong,
    dwContextTypeFlags : CULong,
    pdwContextType : Pointer[CULong],
    ppvContext : Pointer[RawPointer]) Int;

external CertDeleteCertificateFromStore(
    pCertContext : PCCERT_CONTEXT) Int;

external CertAddEncodedCRLToStore(
    hCertStore : HCERTSTORE,
    dwCertEncodingType : CULong,
    pbCrlEncoded : Pointer[CUChar],
    cbCrlEncoded : CULong,
    dwAddDisposition : CULong,
    ppCrlContext : Pointer[PCCRL_CONTEXT]) Int;

external CertAddCRLContextToStore(
    hCertStore : HCERTSTORE,
    pCrlContext : PCCRL_CONTEXT,
    dwAddDisposition : CULong,
    ppStoreContext : Pointer[PCCRL_CONTEXT]) Int;

external CertDeleteCRLFromStore(
    pCrlContext : PCCRL_CONTEXT) Int;

external CertSerializeCertificateStoreElement(
    pCertContext : PCCERT_CONTEXT,
    dwFlags : CULong,
    pbElement : Pointer[CUChar],
    pcbElement : Pointer[CULong]) Int;

external CertSerializeCRLStoreElement(
    pCrlContext : PCCRL_CONTEXT,
    dwFlags : CULong,
    pbElement : Pointer[CUChar],
    pcbElement : Pointer[CULong]) Int;

external CertDuplicateCTLContext(
    pCtlContext : PCCTL_CONTEXT) PCCTL_CONTEXT;

external CertCreateCTLContext(
    dwMsgAndCertEncodingType : CULong,
    pbCtlEncoded : Pointer[CUChar],
    cbCtlEncoded : CULong) PCCTL_CONTEXT;

external CertFreeCTLContext(
    pCtlContext : PCCTL_CONTEXT) Int;

external CertSetCTLContextProperty(
    pCtlContext : PCCTL_CONTEXT,
    dwPropId : CULong,
    dwFlags : CULong,
    pvData : RawPointer) Int;

external CertGetCTLContextProperty(
    pCtlContext : PCCTL_CONTEXT,
    dwPropId : CULong,
    pvData : RawPointer,
    pcbData : Pointer[CULong]) Int;

external CertEnumCTLContextProperties(
    pCtlContext : PCCTL_CONTEXT,
    dwPropId : CULong) CULong;

external CertEnumCTLsInStore(
    hCertStore : HCERTSTORE,
    pPrevCtlContext : PCCTL_CONTEXT) PCCTL_CONTEXT;

external CertFindSubjectInCTL(
    dwEncodingType : CULong,
    dwSubjectType : CULong,
    pvSubject : RawPointer,
    pCtlContext : PCCTL_CONTEXT,
    dwFlags : CULong) PCTL_ENTRY;

record Struct__CTL_ANY_SUBJECT_INFO (
    SubjectAlgorithm : CRYPT_ALGORITHM_IDENTIFIER,
    SubjectIdentifier : CRYPT_DATA_BLOB,
);

alias CTL_ANY_SUBJECT_INFO = Struct__CTL_ANY_SUBJECT_INFO;

alias PCTL_ANY_SUBJECT_INFO = Pointer[Struct__CTL_ANY_SUBJECT_INFO];

external CertFindCTLInStore(
    hCertStore : HCERTSTORE,
    dwMsgAndCertEncodingType : CULong,
    dwFindFlags : CULong,
    dwFindType : CULong,
    pvFindPara : RawPointer,
    pPrevCtlContext : PCCTL_CONTEXT) PCCTL_CONTEXT;

record Struct__CTL_FIND_USAGE_PARA (
    cbSize : CULong,
    SubjectUsage : CTL_USAGE,
    ListIdentifier : CRYPT_DATA_BLOB,
    pSigner : PCERT_INFO,
);

alias CTL_FIND_USAGE_PARA = Struct__CTL_FIND_USAGE_PARA;

alias PCTL_FIND_USAGE_PARA = Pointer[Struct__CTL_FIND_USAGE_PARA];

record Struct__CTL_FIND_SUBJECT_PARA (
    cbSize : CULong,
    pUsagePara : PCTL_FIND_USAGE_PARA,
    dwSubjectType : CULong,
    pvSubject : RawPointer,
);

alias CTL_FIND_SUBJECT_PARA = Struct__CTL_FIND_SUBJECT_PARA;

alias PCTL_FIND_SUBJECT_PARA = Pointer[Struct__CTL_FIND_SUBJECT_PARA];

external CertAddEncodedCTLToStore(
    hCertStore : HCERTSTORE,
    dwMsgAndCertEncodingType : CULong,
    pbCtlEncoded : Pointer[CUChar],
    cbCtlEncoded : CULong,
    dwAddDisposition : CULong,
    ppCtlContext : Pointer[PCCTL_CONTEXT]) Int;

external CertAddCTLContextToStore(
    hCertStore : HCERTSTORE,
    pCtlContext : PCCTL_CONTEXT,
    dwAddDisposition : CULong,
    ppStoreContext : Pointer[PCCTL_CONTEXT]) Int;

external CertSerializeCTLStoreElement(
    pCtlContext : PCCTL_CONTEXT,
    dwFlags : CULong,
    pbElement : Pointer[CUChar],
    pcbElement : Pointer[CULong]) Int;

external CertDeleteCTLFromStore(
    pCtlContext : PCCTL_CONTEXT) Int;

external CertAddCertificateLinkToStore(
    hCertStore : HCERTSTORE,
    pCertContext : PCCERT_CONTEXT,
    dwAddDisposition : CULong,
    ppStoreContext : Pointer[PCCERT_CONTEXT]) Int;

external CertAddCRLLinkToStore(
    hCertStore : HCERTSTORE,
    pCrlContext : PCCRL_CONTEXT,
    dwAddDisposition : CULong,
    ppStoreContext : Pointer[PCCRL_CONTEXT]) Int;

external CertAddCTLLinkToStore(
    hCertStore : HCERTSTORE,
    pCtlContext : PCCTL_CONTEXT,
    dwAddDisposition : CULong,
    ppStoreContext : Pointer[PCCTL_CONTEXT]) Int;

external CertAddStoreToCollection(
    hCollectionStore : HCERTSTORE,
    hSiblingStore : HCERTSTORE,
    dwUpdateFlags : CULong,
    dwPriority : CULong) Int;

external CertRemoveStoreFromCollection(
    hCollectionStore : HCERTSTORE,
    hSiblingStore : HCERTSTORE);

external CertControlStore(
    hCertStore : HCERTSTORE,
    dwFlags : CULong,
    dwCtrlType : CULong,
    pvCtrlPara : RawPointer) Int;

external CertSetStoreProperty(
    hCertStore : HCERTSTORE,
    dwPropId : CULong,
    dwFlags : CULong,
    pvData : RawPointer) Int;

external CertGetStoreProperty(
    hCertStore : HCERTSTORE,
    dwPropId : CULong,
    pvData : RawPointer,
    pcbData : Pointer[CULong]) Int;

record Struct__CERT_CREATE_CONTEXT_PARA (
    cbSize : CULong,
    pfnFree : PFN_CRYPT_FREE,
    pvFree : RawPointer,
);

alias CERT_CREATE_CONTEXT_PARA = Struct__CERT_CREATE_CONTEXT_PARA;

alias PCERT_CREATE_CONTEXT_PARA = Pointer[Struct__CERT_CREATE_CONTEXT_PARA];

external CertCreateContext(
    dwContextType : CULong,
    dwEncodingType : CULong,
    pbEncoded : Pointer[CUChar],
    cbEncoded : CULong,
    dwFlags : CULong,
    pCreatePara : PCERT_CREATE_CONTEXT_PARA) RawPointer;

record Struct__CERT_SYSTEM_STORE_INFO (
    cbSize : CULong,
);

alias CERT_SYSTEM_STORE_INFO = Struct__CERT_SYSTEM_STORE_INFO;

alias PCERT_SYSTEM_STORE_INFO = Pointer[Struct__CERT_SYSTEM_STORE_INFO];

record Struct__CERT_PHYSICAL_STORE_INFO (
    cbSize : CULong,
    pszOpenStoreProvider : LPSTR,
    dwOpenEncodingType : CULong,
    dwOpenFlags : CULong,
    OpenParameters : CRYPT_DATA_BLOB,
    dwFlags : CULong,
    dwPriority : CULong,
);

alias CERT_PHYSICAL_STORE_INFO = Struct__CERT_PHYSICAL_STORE_INFO;

alias PCERT_PHYSICAL_STORE_INFO = Pointer[Struct__CERT_PHYSICAL_STORE_INFO];

external CertRegisterSystemStore(
    pvSystemStore : RawPointer,
    dwFlags : CULong,
    pStoreInfo : PCERT_SYSTEM_STORE_INFO,
    pvReserved : RawPointer) Int;

external CertRegisterPhysicalStore(
    pvSystemStore : RawPointer,
    dwFlags : CULong,
    pwszStoreName : LPCWSTR,
    pStoreInfo : PCERT_PHYSICAL_STORE_INFO,
    pvReserved : RawPointer) Int;

external CertUnregisterSystemStore(
    pvSystemStore : RawPointer,
    dwFlags : CULong) Int;

external CertUnregisterPhysicalStore(
    pvSystemStore : RawPointer,
    dwFlags : CULong,
    pwszStoreName : LPCWSTR) Int;

alias PFN_CERT_ENUM_SYSTEM_STORE_LOCATION = CCodePointer[(Pointer[UShort],CULong,RawPointer,RawPointer),(Int)];

alias PFN_CERT_ENUM_SYSTEM_STORE = CCodePointer[(RawPointer,CULong,Pointer[Struct__CERT_SYSTEM_STORE_INFO],RawPointer,RawPointer),(Int)];

alias PFN_CERT_ENUM_PHYSICAL_STORE = CCodePointer[(RawPointer,CULong,Pointer[UShort],Pointer[Struct__CERT_PHYSICAL_STORE_INFO],RawPointer,RawPointer),(Int)];

external CertEnumSystemStoreLocation(
    dwFlags : CULong,
    pvArg : RawPointer,
    pfnEnum : PFN_CERT_ENUM_SYSTEM_STORE_LOCATION) Int;

external CertEnumSystemStore(
    dwFlags : CULong,
    pvSystemStoreLocationPara : RawPointer,
    pvArg : RawPointer,
    pfnEnum : PFN_CERT_ENUM_SYSTEM_STORE) Int;

external CertEnumPhysicalStore(
    pvSystemStore : RawPointer,
    dwFlags : CULong,
    pvArg : RawPointer,
    pfnEnum : PFN_CERT_ENUM_PHYSICAL_STORE) Int;

external CertGetEnhancedKeyUsage(
    pCertContext : PCCERT_CONTEXT,
    dwFlags : CULong,
    pUsage : PCERT_ENHKEY_USAGE,
    pcbUsage : Pointer[CULong]) Int;

external CertSetEnhancedKeyUsage(
    pCertContext : PCCERT_CONTEXT,
    pUsage : PCERT_ENHKEY_USAGE) Int;

external CertAddEnhancedKeyUsageIdentifier(
    pCertContext : PCCERT_CONTEXT,
    pszUsageIdentifier : LPCSTR) Int;

external CertRemoveEnhancedKeyUsageIdentifier(
    pCertContext : PCCERT_CONTEXT,
    pszUsageIdentifier : LPCSTR) Int;

external CertGetValidUsages(
    cCerts : CULong,
    rghCerts : Pointer[PCCERT_CONTEXT],
    cNumOIDs : Pointer[Int],
    rghOIDs : Pointer[LPSTR],
    pcbOIDs : Pointer[CULong]) Int;

external CryptMsgGetAndVerifySigner(
    hCryptMsg : HCRYPTMSG,
    cSignerStore : CULong,
    rghSignerStore : Pointer[HCERTSTORE],
    dwFlags : CULong,
    ppSigner : Pointer[PCCERT_CONTEXT],
    pdwSignerIndex : Pointer[CULong]) Int;

external CryptMsgSignCTL(
    dwMsgEncodingType : CULong,
    pbCtlContent : Pointer[CUChar],
    cbCtlContent : CULong,
    pSignInfo : PCMSG_SIGNED_ENCODE_INFO,
    dwFlags : CULong,
    pbEncoded : Pointer[CUChar],
    pcbEncoded : Pointer[CULong]) Int;

external CryptMsgEncodeAndSignCTL(
    dwMsgEncodingType : CULong,
    pCtlInfo : PCTL_INFO,
    pSignInfo : PCMSG_SIGNED_ENCODE_INFO,
    dwFlags : CULong,
    pbEncoded : Pointer[CUChar],
    pcbEncoded : Pointer[CULong]) Int;

external CertFindSubjectInSortedCTL(
    pSubjectIdentifier : PCRYPT_DATA_BLOB,
    pCtlContext : PCCTL_CONTEXT,
    dwFlags : CULong,
    pvReserved : RawPointer,
    pEncodedAttributes : PCRYPT_DER_BLOB) Int;

external CertEnumSubjectInSortedCTL(
    pCtlContext : PCCTL_CONTEXT,
    ppvNextSubject : Pointer[RawPointer],
    pSubjectIdentifier : PCRYPT_DER_BLOB,
    pEncodedAttributes : PCRYPT_DER_BLOB) Int;

record Struct__CTL_VERIFY_USAGE_PARA (
    cbSize : CULong,
    ListIdentifier : CRYPT_DATA_BLOB,
    cCtlStore : CULong,
    rghCtlStore : Pointer[HCERTSTORE],
    cSignerStore : CULong,
    rghSignerStore : Pointer[HCERTSTORE],
);

alias CTL_VERIFY_USAGE_PARA = Struct__CTL_VERIFY_USAGE_PARA;

alias PCTL_VERIFY_USAGE_PARA = Pointer[Struct__CTL_VERIFY_USAGE_PARA];

record Struct__CTL_VERIFY_USAGE_STATUS (
    cbSize : CULong,
    dwError : CULong,
    dwFlags : CULong,
    ppCtl : Pointer[PCCTL_CONTEXT],
    dwCtlEntryIndex : CULong,
    ppSigner : Pointer[PCCERT_CONTEXT],
    dwSignerIndex : CULong,
);

alias CTL_VERIFY_USAGE_STATUS = Struct__CTL_VERIFY_USAGE_STATUS;

alias PCTL_VERIFY_USAGE_STATUS = Pointer[Struct__CTL_VERIFY_USAGE_STATUS];

external CertVerifyCTLUsage(
    dwEncodingType : CULong,
    dwSubjectType : CULong,
    pvSubject : RawPointer,
    pSubjectUsage : PCTL_USAGE,
    dwFlags : CULong,
    pVerifyUsagePara : PCTL_VERIFY_USAGE_PARA,
    pVerifyUsageStatus : PCTL_VERIFY_USAGE_STATUS) Int;

record Struct__CERT_REVOCATION_CRL_INFO (
    cbSize : CULong,
    pBaseCrlContext : PCCRL_CONTEXT,
    pDeltaCrlContext : PCCRL_CONTEXT,
    pCrlEntry : PCRL_ENTRY,
    fDeltaCrlEntry : Int,
);

alias CERT_REVOCATION_CRL_INFO = Struct__CERT_REVOCATION_CRL_INFO;

alias PCERT_REVOCATION_CRL_INFO = Pointer[Struct__CERT_REVOCATION_CRL_INFO];

record Struct__CERT_REVOCATION_PARA (
    cbSize : CULong,
    pIssuerCert : PCCERT_CONTEXT,
    cCertStore : CULong,
    rgCertStore : Pointer[HCERTSTORE],
    hCrlStore : HCERTSTORE,
    pftTimeToUse : LPFILETIME,
);

alias CERT_REVOCATION_PARA = Struct__CERT_REVOCATION_PARA;

alias PCERT_REVOCATION_PARA = Pointer[Struct__CERT_REVOCATION_PARA];

record Struct__CERT_REVOCATION_STATUS (
    cbSize : CULong,
    dwIndex : CULong,
    dwError : CULong,
    dwReason : CULong,
    fHasFreshnessTime : Int,
    dwFreshnessTime : CULong,
);

alias CERT_REVOCATION_STATUS = Struct__CERT_REVOCATION_STATUS;

alias PCERT_REVOCATION_STATUS = Pointer[Struct__CERT_REVOCATION_STATUS];

external CertVerifyRevocation(
    dwEncodingType : CULong,
    dwRevType : CULong,
    cContext : CULong,
    rgpvContext : Pointer[PVOID],
    dwFlags : CULong,
    pRevPara : PCERT_REVOCATION_PARA,
    pRevStatus : PCERT_REVOCATION_STATUS) Int;

external CertCompareIntegerBlob(
    pInt1 : PCRYPT_INTEGER_BLOB,
    pInt2 : PCRYPT_INTEGER_BLOB) Int;

external CertCompareCertificate(
    dwCertEncodingType : CULong,
    pCertId1 : PCERT_INFO,
    pCertId2 : PCERT_INFO) Int;

external CertCompareCertificateName(
    dwCertEncodingType : CULong,
    pCertName1 : PCERT_NAME_BLOB,
    pCertName2 : PCERT_NAME_BLOB) Int;

external CertIsRDNAttrsInCertificateName(
    dwCertEncodingType : CULong,
    dwFlags : CULong,
    pCertName : PCERT_NAME_BLOB,
    pRDN : PCERT_RDN) Int;

external CertComparePublicKeyInfo(
    dwCertEncodingType : CULong,
    pPublicKey1 : PCERT_PUBLIC_KEY_INFO,
    pPublicKey2 : PCERT_PUBLIC_KEY_INFO) Int;

external CertGetPublicKeyLength(
    dwCertEncodingType : CULong,
    pPublicKey : PCERT_PUBLIC_KEY_INFO) CULong;

external CryptVerifyCertificateSignature(
    hCryptProv : UInt64,
    dwCertEncodingType : CULong,
    pbEncoded : Pointer[CUChar],
    cbEncoded : CULong,
    pPublicKey : PCERT_PUBLIC_KEY_INFO) Int;

external CryptVerifyCertificateSignatureEx(
    hCryptProv : UInt64,
    dwCertEncodingType : CULong,
    dwSubjectType : CULong,
    pvSubject : RawPointer,
    dwIssuerType : CULong,
    pvIssuer : RawPointer,
    dwFlags : CULong,
    pvReserved : RawPointer) Int;

external CryptHashToBeSigned(
    hCryptProv : UInt64,
    dwCertEncodingType : CULong,
    pbEncoded : Pointer[CUChar],
    cbEncoded : CULong,
    pbComputedHash : Pointer[CUChar],
    pcbComputedHash : Pointer[CULong]) Int;

external CryptHashCertificate(
    hCryptProv : UInt64,
    Algid : UInt,
    dwFlags : CULong,
    pbEncoded : Pointer[CUChar],
    cbEncoded : CULong,
    pbComputedHash : Pointer[CUChar],
    pcbComputedHash : Pointer[CULong]) Int;

external CryptSignCertificate(
    hCryptProv : UInt64,
    dwKeySpec : CULong,
    dwCertEncodingType : CULong,
    pbEncodedToBeSigned : Pointer[CUChar],
    cbEncodedToBeSigned : CULong,
    pSignatureAlgorithm : PCRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo : RawPointer,
    pbSignature : Pointer[CUChar],
    pcbSignature : Pointer[CULong]) Int;

external CryptSignAndEncodeCertificate(
    hCryptProv : UInt64,
    dwKeySpec : CULong,
    dwCertEncodingType : CULong,
    lpszStructType : LPCSTR,
    pvStructInfo : RawPointer,
    pSignatureAlgorithm : PCRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo : RawPointer,
    pbEncoded : PBYTE,
    pcbEncoded : Pointer[CULong]) Int;

external CertVerifyTimeValidity(
    pTimeToVerify : LPFILETIME,
    pCertInfo : PCERT_INFO) CLong;

external CertVerifyCRLTimeValidity(
    pTimeToVerify : LPFILETIME,
    pCrlInfo : PCRL_INFO) CLong;

external CertVerifyValidityNesting(
    pSubjectInfo : PCERT_INFO,
    pIssuerInfo : PCERT_INFO) Int;

external CertVerifyCRLRevocation(
    dwCertEncodingType : CULong,
    pCertId : PCERT_INFO,
    cCrlInfo : CULong,
    rgpCrlInfo : Pointer[PCRL_INFO]) Int;

external CertAlgIdToOID(
    dwAlgId : CULong) LPCSTR;

external CertOIDToAlgId(
    pszObjId : LPCSTR) CULong;

external CertFindExtension(
    pszObjId : LPCSTR,
    cExtensions : CULong,
    rgExtensions : Pointer[CERT_EXTENSION]) PCERT_EXTENSION;

external CertFindAttribute(
    pszObjId : LPCSTR,
    cAttr : CULong,
    rgAttr : Pointer[CRYPT_ATTRIBUTE]) PCRYPT_ATTRIBUTE;

external CertFindRDNAttr(
    pszObjId : LPCSTR,
    pName : PCERT_NAME_INFO) PCERT_RDN_ATTR;

external CertGetIntendedKeyUsage(
    dwCertEncodingType : CULong,
    pCertInfo : PCERT_INFO,
    pbKeyUsage : Pointer[CUChar],
    cbKeyUsage : CULong) Int;

alias HCRYPTDEFAULTCONTEXT = RawPointer;

external CryptInstallDefaultContext(
    hCryptProv : UInt64,
    dwDefaultType : CULong,
    pvDefaultPara : RawPointer,
    dwFlags : CULong,
    pvReserved : RawPointer,
    phDefaultContext : Pointer[HCRYPTDEFAULTCONTEXT]) Int;

record Struct__CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA (
    cOID : CULong,
    rgpszOID : Pointer[LPSTR],
);

alias CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA = Struct__CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA;

alias PCRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA = Pointer[Struct__CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA];

external CryptUninstallDefaultContext(
    hDefaultContext : HCRYPTDEFAULTCONTEXT,
    dwFlags : CULong,
    pvReserved : RawPointer) Int;

external CryptExportPublicKeyInfo(
    hCryptProv : UInt64,
    dwKeySpec : CULong,
    dwCertEncodingType : CULong,
    pInfo : PCERT_PUBLIC_KEY_INFO,
    pcbInfo : Pointer[CULong]) Int;

external CryptExportPublicKeyInfoEx(
    hCryptProv : UInt64,
    dwKeySpec : CULong,
    dwCertEncodingType : CULong,
    pszPublicKeyObjId : LPSTR,
    dwFlags : CULong,
    pvAuxInfo : RawPointer,
    pInfo : PCERT_PUBLIC_KEY_INFO,
    pcbInfo : Pointer[CULong]) Int;

external CryptImportPublicKeyInfo(
    hCryptProv : UInt64,
    dwCertEncodingType : CULong,
    pInfo : PCERT_PUBLIC_KEY_INFO,
    phKey : Pointer[UInt64]) Int;

external CryptImportPublicKeyInfoEx(
    hCryptProv : UInt64,
    dwCertEncodingType : CULong,
    pInfo : PCERT_PUBLIC_KEY_INFO,
    aiKeyAlg : UInt,
    dwFlags : CULong,
    pvAuxInfo : RawPointer,
    phKey : Pointer[UInt64]) Int;

external CryptAcquireCertificatePrivateKey(
    pCert : PCCERT_CONTEXT,
    dwFlags : CULong,
    pvReserved : RawPointer,
    phCryptProv : Pointer[UInt64],
    pdwKeySpec : Pointer[CULong],
    pfCallerFreeProv : Pointer[Int]) Int;

external CryptFindCertificateKeyProvInfo(
    pCert : PCCERT_CONTEXT,
    dwFlags : CULong,
    pvReserved : RawPointer) Int;

alias PFN_IMPORT_PRIV_KEY_FUNC = CCodePointer[(UInt64,Pointer[Struct__CRYPT_PRIVATE_KEY_INFO],CULong,RawPointer),(Int)];

external CryptImportPKCS8(
    sImportParams : CRYPT_PKCS8_IMPORT_PARAMS,
    dwFlags : CULong,
    phCryptProv : Pointer[UInt64],
    pvAuxInfo : RawPointer) Int;

alias PFN_EXPORT_PRIV_KEY_FUNC = CCodePointer[(UInt64,CULong,Pointer[CChar],CULong,RawPointer,Pointer[Struct__CRYPT_PRIVATE_KEY_INFO],Pointer[CULong]),(Int)];

external CryptExportPKCS8(
    hCryptProv : UInt64,
    dwKeySpec : CULong,
    pszPrivateKeyObjId : LPSTR,
    dwFlags : CULong,
    pvAuxInfo : RawPointer,
    pbPrivateKeyBlob : Pointer[CUChar],
    pcbPrivateKeyBlob : Pointer[CULong]) Int;

external CryptExportPKCS8Ex(
    psExportParams : Pointer[CRYPT_PKCS8_EXPORT_PARAMS],
    dwFlags : CULong,
    pvAuxInfo : RawPointer,
    pbPrivateKeyBlob : Pointer[CUChar],
    pcbPrivateKeyBlob : Pointer[CULong]) Int;

external CryptHashPublicKeyInfo(
    hCryptProv : UInt64,
    Algid : UInt,
    dwFlags : CULong,
    dwCertEncodingType : CULong,
    pInfo : PCERT_PUBLIC_KEY_INFO,
    pbComputedHash : Pointer[CUChar],
    pcbComputedHash : Pointer[CULong]) Int;

external CertRDNValueToStrA(
    dwValueType : CULong,
    pValue : PCERT_RDN_VALUE_BLOB,
    psz : LPSTR,
    csz : CULong) CULong;

external CertRDNValueToStrW(
    dwValueType : CULong,
    pValue : PCERT_RDN_VALUE_BLOB,
    psz : LPWSTR,
    csz : CULong) CULong;

external CertNameToStrA(
    dwCertEncodingType : CULong,
    pName : PCERT_NAME_BLOB,
    dwStrType : CULong,
    psz : LPSTR,
    csz : CULong) CULong;

external CertNameToStrW(
    dwCertEncodingType : CULong,
    pName : PCERT_NAME_BLOB,
    dwStrType : CULong,
    psz : LPWSTR,
    csz : CULong) CULong;

external CertStrToNameA(
    dwCertEncodingType : CULong,
    pszX500 : LPCSTR,
    dwStrType : CULong,
    pvReserved : RawPointer,
    pbEncoded : Pointer[CUChar],
    pcbEncoded : Pointer[CULong],
    ppszError : Pointer[LPCSTR]) Int;

external CertStrToNameW(
    dwCertEncodingType : CULong,
    pszX500 : LPCWSTR,
    dwStrType : CULong,
    pvReserved : RawPointer,
    pbEncoded : Pointer[CUChar],
    pcbEncoded : Pointer[CULong],
    ppszError : Pointer[LPCWSTR]) Int;

external CertGetNameStringA(
    pCertContext : PCCERT_CONTEXT,
    dwType : CULong,
    dwFlags : CULong,
    pvTypePara : RawPointer,
    pszNameString : LPSTR,
    cchNameString : CULong) CULong;

external CertGetNameStringW(
    pCertContext : PCCERT_CONTEXT,
    dwType : CULong,
    dwFlags : CULong,
    pvTypePara : RawPointer,
    pszNameString : LPWSTR,
    cchNameString : CULong) CULong;

alias PFN_CRYPT_GET_SIGNER_CERTIFICATE = CCodePointer[(RawPointer,CULong,Pointer[Struct__CERT_INFO],RawPointer),(Pointer[Struct__CERT_CONTEXT])];

record Struct__CRYPT_SIGN_MESSAGE_PARA (
    cbSize : CULong,
    dwMsgEncodingType : CULong,
    pSigningCert : PCCERT_CONTEXT,
    HashAlgorithm : CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo : RawPointer,
    cMsgCert : CULong,
    rgpMsgCert : Pointer[PCCERT_CONTEXT],
    cMsgCrl : CULong,
    rgpMsgCrl : Pointer[PCCRL_CONTEXT],
    cAuthAttr : CULong,
    rgAuthAttr : PCRYPT_ATTRIBUTE,
    cUnauthAttr : CULong,
    rgUnauthAttr : PCRYPT_ATTRIBUTE,
    dwFlags : CULong,
    dwInnerContentType : CULong,
);

alias CRYPT_SIGN_MESSAGE_PARA = Struct__CRYPT_SIGN_MESSAGE_PARA;

alias PCRYPT_SIGN_MESSAGE_PARA = Pointer[Struct__CRYPT_SIGN_MESSAGE_PARA];

record Struct__CRYPT_VERIFY_MESSAGE_PARA (
    cbSize : CULong,
    dwMsgAndCertEncodingType : CULong,
    hCryptProv : UInt64,
    pfnGetSignerCertificate : PFN_CRYPT_GET_SIGNER_CERTIFICATE,
    pvGetArg : RawPointer,
);

alias CRYPT_VERIFY_MESSAGE_PARA = Struct__CRYPT_VERIFY_MESSAGE_PARA;

alias PCRYPT_VERIFY_MESSAGE_PARA = Pointer[Struct__CRYPT_VERIFY_MESSAGE_PARA];

record Struct__CRYPT_ENCRYPT_MESSAGE_PARA (
    cbSize : CULong,
    dwMsgEncodingType : CULong,
    hCryptProv : UInt64,
    ContentEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER,
    pvEncryptionAuxInfo : RawPointer,
    dwFlags : CULong,
    dwInnerContentType : CULong,
);

alias CRYPT_ENCRYPT_MESSAGE_PARA = Struct__CRYPT_ENCRYPT_MESSAGE_PARA;

alias PCRYPT_ENCRYPT_MESSAGE_PARA = Pointer[Struct__CRYPT_ENCRYPT_MESSAGE_PARA];

record Struct__CRYPT_DECRYPT_MESSAGE_PARA (
    cbSize : CULong,
    dwMsgAndCertEncodingType : CULong,
    cCertStore : CULong,
    rghCertStore : Pointer[HCERTSTORE],
);

alias CRYPT_DECRYPT_MESSAGE_PARA = Struct__CRYPT_DECRYPT_MESSAGE_PARA;

alias PCRYPT_DECRYPT_MESSAGE_PARA = Pointer[Struct__CRYPT_DECRYPT_MESSAGE_PARA];

record Struct__CRYPT_HASH_MESSAGE_PARA (
    cbSize : CULong,
    dwMsgEncodingType : CULong,
    hCryptProv : UInt64,
    HashAlgorithm : CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo : RawPointer,
);

alias CRYPT_HASH_MESSAGE_PARA = Struct__CRYPT_HASH_MESSAGE_PARA;

alias PCRYPT_HASH_MESSAGE_PARA = Pointer[Struct__CRYPT_HASH_MESSAGE_PARA];

record Struct__CRYPT_KEY_SIGN_MESSAGE_PARA (
    cbSize : CULong,
    dwMsgAndCertEncodingType : CULong,
    hCryptProv : UInt64,
    dwKeySpec : CULong,
    HashAlgorithm : CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo : RawPointer,
    PubKeyAlgorithm : CRYPT_ALGORITHM_IDENTIFIER,
);

alias CRYPT_KEY_SIGN_MESSAGE_PARA = Struct__CRYPT_KEY_SIGN_MESSAGE_PARA;

alias PCRYPT_KEY_SIGN_MESSAGE_PARA = Pointer[Struct__CRYPT_KEY_SIGN_MESSAGE_PARA];

record Struct__CRYPT_KEY_VERIFY_MESSAGE_PARA (
    cbSize : CULong,
    dwMsgEncodingType : CULong,
    hCryptProv : UInt64,
);

alias CRYPT_KEY_VERIFY_MESSAGE_PARA = Struct__CRYPT_KEY_VERIFY_MESSAGE_PARA;

alias PCRYPT_KEY_VERIFY_MESSAGE_PARA = Pointer[Struct__CRYPT_KEY_VERIFY_MESSAGE_PARA];

external CryptSignMessage(
    pSignPara : PCRYPT_SIGN_MESSAGE_PARA,
    fDetachedSignature : Int,
    cToBeSigned : CULong,
    rgpbToBeSigned : Pointer[Pointer[CUChar]],
    rgcbToBeSigned : Pointer[CULong],
    pbSignedBlob : Pointer[CUChar],
    pcbSignedBlob : Pointer[CULong]) Int;

external CryptVerifyMessageSignature(
    pVerifyPara : PCRYPT_VERIFY_MESSAGE_PARA,
    dwSignerIndex : CULong,
    pbSignedBlob : Pointer[CUChar],
    cbSignedBlob : CULong,
    pbDecoded : Pointer[CUChar],
    pcbDecoded : Pointer[CULong],
    ppSignerCert : Pointer[PCCERT_CONTEXT]) Int;

external CryptGetMessageSignerCount(
    dwMsgEncodingType : CULong,
    pbSignedBlob : Pointer[CUChar],
    cbSignedBlob : CULong) CLong;

external CryptGetMessageCertificates(
    dwMsgAndCertEncodingType : CULong,
    hCryptProv : UInt64,
    dwFlags : CULong,
    pbSignedBlob : Pointer[CUChar],
    cbSignedBlob : CULong) HCERTSTORE;

external CryptVerifyDetachedMessageSignature(
    pVerifyPara : PCRYPT_VERIFY_MESSAGE_PARA,
    dwSignerIndex : CULong,
    pbDetachedSignBlob : Pointer[CUChar],
    cbDetachedSignBlob : CULong,
    cToBeSigned : CULong,
    rgpbToBeSigned : Pointer[Pointer[CUChar]],
    rgcbToBeSigned : Pointer[CULong],
    ppSignerCert : Pointer[PCCERT_CONTEXT]) Int;

external CryptEncryptMessage(
    pEncryptPara : PCRYPT_ENCRYPT_MESSAGE_PARA,
    cRecipientCert : CULong,
    rgpRecipientCert : Pointer[PCCERT_CONTEXT],
    pbToBeEncrypted : Pointer[CUChar],
    cbToBeEncrypted : CULong,
    pbEncryptedBlob : Pointer[CUChar],
    pcbEncryptedBlob : Pointer[CULong]) Int;

external CryptDecryptMessage(
    pDecryptPara : PCRYPT_DECRYPT_MESSAGE_PARA,
    pbEncryptedBlob : Pointer[CUChar],
    cbEncryptedBlob : CULong,
    pbDecrypted : Pointer[CUChar],
    pcbDecrypted : Pointer[CULong],
    ppXchgCert : Pointer[PCCERT_CONTEXT]) Int;

external CryptSignAndEncryptMessage(
    pSignPara : PCRYPT_SIGN_MESSAGE_PARA,
    pEncryptPara : PCRYPT_ENCRYPT_MESSAGE_PARA,
    cRecipientCert : CULong,
    rgpRecipientCert : Pointer[PCCERT_CONTEXT],
    pbToBeSignedAndEncrypted : Pointer[CUChar],
    cbToBeSignedAndEncrypted : CULong,
    pbSignedAndEncryptedBlob : Pointer[CUChar],
    pcbSignedAndEncryptedBlob : Pointer[CULong]) Int;

external CryptDecryptAndVerifyMessageSignature(
    pDecryptPara : PCRYPT_DECRYPT_MESSAGE_PARA,
    pVerifyPara : PCRYPT_VERIFY_MESSAGE_PARA,
    dwSignerIndex : CULong,
    pbEncryptedBlob : Pointer[CUChar],
    cbEncryptedBlob : CULong,
    pbDecrypted : Pointer[CUChar],
    pcbDecrypted : Pointer[CULong],
    ppXchgCert : Pointer[PCCERT_CONTEXT],
    ppSignerCert : Pointer[PCCERT_CONTEXT]) Int;

external CryptDecodeMessage(
    dwMsgTypeFlags : CULong,
    pDecryptPara : PCRYPT_DECRYPT_MESSAGE_PARA,
    pVerifyPara : PCRYPT_VERIFY_MESSAGE_PARA,
    dwSignerIndex : CULong,
    pbEncodedBlob : Pointer[CUChar],
    cbEncodedBlob : CULong,
    dwPrevInnerContentType : CULong,
    pdwMsgType : Pointer[CULong],
    pdwInnerContentType : Pointer[CULong],
    pbDecoded : Pointer[CUChar],
    pcbDecoded : Pointer[CULong],
    ppXchgCert : Pointer[PCCERT_CONTEXT],
    ppSignerCert : Pointer[PCCERT_CONTEXT]) Int;

external CryptHashMessage(
    pHashPara : PCRYPT_HASH_MESSAGE_PARA,
    fDetachedHash : Int,
    cToBeHashed : CULong,
    rgpbToBeHashed : Pointer[Pointer[CUChar]],
    rgcbToBeHashed : Pointer[CULong],
    pbHashedBlob : Pointer[CUChar],
    pcbHashedBlob : Pointer[CULong],
    pbComputedHash : Pointer[CUChar],
    pcbComputedHash : Pointer[CULong]) Int;

external CryptVerifyMessageHash(
    pHashPara : PCRYPT_HASH_MESSAGE_PARA,
    pbHashedBlob : Pointer[CUChar],
    cbHashedBlob : CULong,
    pbToBeHashed : Pointer[CUChar],
    pcbToBeHashed : Pointer[CULong],
    pbComputedHash : Pointer[CUChar],
    pcbComputedHash : Pointer[CULong]) Int;

external CryptVerifyDetachedMessageHash(
    pHashPara : PCRYPT_HASH_MESSAGE_PARA,
    pbDetachedHashBlob : Pointer[CUChar],
    cbDetachedHashBlob : CULong,
    cToBeHashed : CULong,
    rgpbToBeHashed : Pointer[Pointer[CUChar]],
    rgcbToBeHashed : Pointer[CULong],
    pbComputedHash : Pointer[CUChar],
    pcbComputedHash : Pointer[CULong]) Int;

external CryptSignMessageWithKey(
    pSignPara : PCRYPT_KEY_SIGN_MESSAGE_PARA,
    pbToBeSigned : Pointer[CUChar],
    cbToBeSigned : CULong,
    pbSignedBlob : Pointer[CUChar],
    pcbSignedBlob : Pointer[CULong]) Int;

external CryptVerifyMessageSignatureWithKey(
    pVerifyPara : PCRYPT_KEY_VERIFY_MESSAGE_PARA,
    pPublicKeyInfo : PCERT_PUBLIC_KEY_INFO,
    pbSignedBlob : Pointer[CUChar],
    cbSignedBlob : CULong,
    pbDecoded : Pointer[CUChar],
    pcbDecoded : Pointer[CULong]) Int;

external CertOpenSystemStoreA(
    hProv : UInt64,
    szSubsystemProtocol : LPCSTR) HCERTSTORE;

external CertOpenSystemStoreW(
    hProv : UInt64,
    szSubsystemProtocol : LPCWSTR) HCERTSTORE;

external CertAddEncodedCertificateToSystemStoreA(
    szCertStoreName : LPCSTR,
    pbCertEncoded : Pointer[CUChar],
    cbCertEncoded : CULong) Int;

external CertAddEncodedCertificateToSystemStoreW(
    szCertStoreName : LPCWSTR,
    pbCertEncoded : Pointer[CUChar],
    cbCertEncoded : CULong) Int;

record Struct__CERT_CHAIN (
    cCerts : CULong,
    certs : PCERT_BLOB,
    keyLocatorInfo : CRYPT_KEY_PROV_INFO,
);

alias CERT_CHAIN = Struct__CERT_CHAIN;

alias PCERT_CHAIN = Pointer[Struct__CERT_CHAIN];

external FindCertsByIssuer(
    pCertChains : PCERT_CHAIN,
    pcbCertChains : Pointer[CULong],
    pcCertChains : Pointer[CULong],
    pbEncodedIssuerName : Pointer[CUChar],
    cbEncodedIssuerName : CULong,
    pwszPurpose : LPCWSTR,
    dwKeySpec : CULong) CLong;

external CryptQueryObject(
    dwObjectType : CULong,
    pvObject : RawPointer,
    dwExpectedContentTypeFlags : CULong,
    dwExpectedFormatTypeFlags : CULong,
    dwFlags : CULong,
    pdwMsgAndCertEncodingType : Pointer[CULong],
    pdwContentType : Pointer[CULong],
    pdwFormatType : Pointer[CULong],
    phCertStore : Pointer[HCERTSTORE],
    phMsg : Pointer[HCRYPTMSG],
    ppvContext : Pointer[RawPointer]) Int;

external CryptMemAlloc(
    cbSize : CULong) LPVOID;

external CryptMemRealloc(
    pv : LPVOID,
    cbSize : CULong) LPVOID;

external CryptMemFree(
    pv : LPVOID);

alias HCRYPTASYNC = HANDLE;

alias PHCRYPTASYNC = Pointer[HANDLE];

alias PFN_CRYPT_ASYNC_PARAM_FREE_FUNC = CCodePointer[(Pointer[CChar],RawPointer),()];

external CryptCreateAsyncHandle(
    dwFlags : CULong,
    phAsync : PHCRYPTASYNC) Int;

external CryptSetAsyncParam(
    hAsync : HCRYPTASYNC,
    pszParamOid : LPSTR,
    pvParam : LPVOID,
    pfnFree : PFN_CRYPT_ASYNC_PARAM_FREE_FUNC) Int;

external CryptGetAsyncParam(
    hAsync : HCRYPTASYNC,
    pszParamOid : LPSTR,
    ppvParam : Pointer[LPVOID],
    ppfnFree : Pointer[PFN_CRYPT_ASYNC_PARAM_FREE_FUNC]) Int;

external CryptCloseAsyncHandle(
    hAsync : HCRYPTASYNC) Int;

record Struct__CRYPT_BLOB_ARRAY (
    cBlob : CULong,
    rgBlob : PCRYPT_DATA_BLOB,
);

alias CRYPT_BLOB_ARRAY = Struct__CRYPT_BLOB_ARRAY;

alias PCRYPT_BLOB_ARRAY = Pointer[Struct__CRYPT_BLOB_ARRAY];

record Struct__CRYPT_CREDENTIALS (
    cbSize : CULong,
    pszCredentialsOid : LPCSTR,
    pvCredentials : LPVOID,
);

alias CRYPT_CREDENTIALS = Struct__CRYPT_CREDENTIALS;

alias PCRYPT_CREDENTIALS = Pointer[Struct__CRYPT_CREDENTIALS];

record Struct__CRYPT_PASSWORD_CREDENTIALSA (
    cbSize : CULong,
    pszUsername : LPSTR,
    pszPassword : LPSTR,
);

alias CRYPT_PASSWORD_CREDENTIALSA = Struct__CRYPT_PASSWORD_CREDENTIALSA;

alias PCRYPT_PASSWORD_CREDENTIALSA = Pointer[Struct__CRYPT_PASSWORD_CREDENTIALSA];

record Struct__CRYPT_PASSWORD_CREDENTIALSW (
    cbSize : CULong,
    pszUsername : LPWSTR,
    pszPassword : LPWSTR,
);

alias CRYPT_PASSWORD_CREDENTIALSW = Struct__CRYPT_PASSWORD_CREDENTIALSW;

alias PCRYPT_PASSWORD_CREDENTIALSW = Pointer[Struct__CRYPT_PASSWORD_CREDENTIALSW];

alias CRYPT_PASSWORD_CREDENTIALS = CRYPT_PASSWORD_CREDENTIALSA;

alias PCRYPT_PASSWORD_CREDENTIALS = PCRYPT_PASSWORD_CREDENTIALSA;

alias PFN_FREE_ENCODED_OBJECT_FUNC = CCodePointer[(Pointer[CChar],Pointer[Struct__CRYPT_BLOB_ARRAY],RawPointer),()];

record Struct__CRYPT_RETRIEVE_AUX_INFO (
    cbSize : CULong,
    pLastSyncTime : Pointer[FILETIME],
    dwMaxUrlRetrievalByteCount : CULong,
);

alias CRYPT_RETRIEVE_AUX_INFO = Struct__CRYPT_RETRIEVE_AUX_INFO;

alias PCRYPT_RETRIEVE_AUX_INFO = Pointer[Struct__CRYPT_RETRIEVE_AUX_INFO];

external CryptRetrieveObjectByUrlA(
    pszUrl : LPCSTR,
    pszObjectOid : LPCSTR,
    dwRetrievalFlags : CULong,
    dwTimeout : CULong,
    ppvObject : Pointer[LPVOID],
    hAsyncRetrieve : HCRYPTASYNC,
    pCredentials : PCRYPT_CREDENTIALS,
    pvVerify : LPVOID,
    pAuxInfo : PCRYPT_RETRIEVE_AUX_INFO) Int;

external CryptRetrieveObjectByUrlW(
    pszUrl : LPCWSTR,
    pszObjectOid : LPCSTR,
    dwRetrievalFlags : CULong,
    dwTimeout : CULong,
    ppvObject : Pointer[LPVOID],
    hAsyncRetrieve : HCRYPTASYNC,
    pCredentials : PCRYPT_CREDENTIALS,
    pvVerify : LPVOID,
    pAuxInfo : PCRYPT_RETRIEVE_AUX_INFO) Int;

alias PFN_CRYPT_CANCEL_RETRIEVAL = CCodePointer[(CULong,RawPointer),(Int)];

external CryptInstallCancelRetrieval(
    pfnCancel : PFN_CRYPT_CANCEL_RETRIEVAL,
    pvArg : RawPointer,
    dwFlags : CULong,
    pvReserved : RawPointer) Int;

external CryptUninstallCancelRetrieval(
    dwFlags : CULong,
    pvReserved : RawPointer) Int;

external CryptCancelAsyncRetrieval(
    hAsyncRetrieval : HCRYPTASYNC) Int;

alias PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC = CCodePointer[(RawPointer,CULong,Pointer[CChar],Pointer[CChar],RawPointer),()];

record Struct__CRYPT_ASYNC_RETRIEVAL_COMPLETION (
    pfnCompletion : PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC,
    pvCompletion : LPVOID,
);

alias CRYPT_ASYNC_RETRIEVAL_COMPLETION = Struct__CRYPT_ASYNC_RETRIEVAL_COMPLETION;

alias PCRYPT_ASYNC_RETRIEVAL_COMPLETION = Pointer[Struct__CRYPT_ASYNC_RETRIEVAL_COMPLETION];

alias PFN_CANCEL_ASYNC_RETRIEVAL_FUNC = CCodePointer[(RawPointer),(Int)];

record Struct__CRYPT_URL_ARRAY (
    cUrl : CULong,
    rgwszUrl : Pointer[LPWSTR],
);

alias CRYPT_URL_ARRAY = Struct__CRYPT_URL_ARRAY;

alias PCRYPT_URL_ARRAY = Pointer[Struct__CRYPT_URL_ARRAY];

record Struct__CRYPT_URL_INFO (
    cbSize : CULong,
    dwSyncDeltaTime : CULong,
    cGroup : CULong,
    rgcGroupEntry : Pointer[CULong],
);

alias CRYPT_URL_INFO = Struct__CRYPT_URL_INFO;

alias PCRYPT_URL_INFO = Pointer[Struct__CRYPT_URL_INFO];

external CryptGetObjectUrl(
    pszUrlOid : LPCSTR,
    pvPara : LPVOID,
    dwFlags : CULong,
    pUrlArray : PCRYPT_URL_ARRAY,
    pcbUrlArray : Pointer[CULong],
    pUrlInfo : PCRYPT_URL_INFO,
    pcbUrlInfo : Pointer[CULong],
    pvReserved : LPVOID) Int;

record Struct__CERT_CRL_CONTEXT_PAIR (
    pCertContext : PCCERT_CONTEXT,
    pCrlContext : PCCRL_CONTEXT,
);

alias CERT_CRL_CONTEXT_PAIR = Struct__CERT_CRL_CONTEXT_PAIR;

alias PCERT_CRL_CONTEXT_PAIR = Pointer[Struct__CERT_CRL_CONTEXT_PAIR];

alias PCCERT_CRL_CONTEXT_PAIR = Pointer[CERT_CRL_CONTEXT_PAIR];

external CryptGetTimeValidObject(
    pszTimeValidOid : LPCSTR,
    pvPara : LPVOID,
    pIssuer : PCCERT_CONTEXT,
    pftValidFor : LPFILETIME,
    dwFlags : CULong,
    dwTimeout : CULong,
    ppvObject : Pointer[LPVOID],
    pCredentials : PCRYPT_CREDENTIALS,
    pvReserved : LPVOID) Int;

external CryptFlushTimeValidObject(
    pszFlushTimeValidOid : LPCSTR,
    pvPara : LPVOID,
    pIssuer : PCCERT_CONTEXT,
    dwFlags : CULong,
    pvReserved : LPVOID) Int;

record Struct__CRYPTPROTECT_PROMPTSTRUCT (
    cbSize : CULong,
    dwPromptFlags : CULong,
    hwndApp : HWND,
    szPrompt : LPCWSTR,
);

alias CRYPTPROTECT_PROMPTSTRUCT = Struct__CRYPTPROTECT_PROMPTSTRUCT;

alias PCRYPTPROTECT_PROMPTSTRUCT = Pointer[Struct__CRYPTPROTECT_PROMPTSTRUCT];

external CryptProtectData(
    pDataIn : Pointer[DATA_BLOB],
    szDataDescr : LPCWSTR,
    pOptionalEntropy : Pointer[DATA_BLOB],
    pvReserved : PVOID,
    pPromptStruct : Pointer[CRYPTPROTECT_PROMPTSTRUCT],
    dwFlags : CULong,
    pDataOut : Pointer[DATA_BLOB]) Int;

external CryptUnprotectData(
    pDataIn : Pointer[DATA_BLOB],
    ppszDataDescr : Pointer[LPWSTR],
    pOptionalEntropy : Pointer[DATA_BLOB],
    pvReserved : PVOID,
    pPromptStruct : Pointer[CRYPTPROTECT_PROMPTSTRUCT],
    dwFlags : CULong,
    pDataOut : Pointer[DATA_BLOB]) Int;

external CryptProtectMemory(
    pDataIn : LPVOID,
    cbDataIn : CULong,
    dwFlags : CULong) Int;

external CryptUnprotectMemory(
    pDataIn : LPVOID,
    cbDataIn : CULong,
    dwFlags : CULong) Int;

external CertCreateSelfSignCertificate(
    hProv : UInt64,
    pSubjectIssuerBlob : PCERT_NAME_BLOB,
    dwFlags : CULong,
    pKeyProvInfo : PCRYPT_KEY_PROV_INFO,
    pSignatureAlgorithm : PCRYPT_ALGORITHM_IDENTIFIER,
    pStartTime : PSYSTEMTIME,
    pEndTime : PSYSTEMTIME,
    pExtensions : PCERT_EXTENSIONS) PCCERT_CONTEXT;

external CryptGetKeyIdentifierProperty(
    pKeyIdentifier : Pointer[CRYPT_HASH_BLOB],
    dwPropId : CULong,
    dwFlags : CULong,
    pwszComputerName : LPCWSTR,
    pvReserved : RawPointer,
    pvData : RawPointer,
    pcbData : Pointer[CULong]) Int;

external CryptSetKeyIdentifierProperty(
    pKeyIdentifier : Pointer[CRYPT_HASH_BLOB],
    dwPropId : CULong,
    dwFlags : CULong,
    pwszComputerName : LPCWSTR,
    pvReserved : RawPointer,
    pvData : RawPointer) Int;

alias PFN_CRYPT_ENUM_KEYID_PROP = CCodePointer[(Pointer[Struct__CRYPTOAPI_BLOB],CULong,RawPointer,RawPointer,CULong,Pointer[CULong],Pointer[RawPointer],Pointer[CULong]),(Int)];

external CryptEnumKeyIdentifierProperties(
    pKeyIdentifier : Pointer[CRYPT_HASH_BLOB],
    dwPropId : CULong,
    dwFlags : CULong,
    pwszComputerName : LPCWSTR,
    pvReserved : RawPointer,
    pvArg : RawPointer,
    pfnEnum : PFN_CRYPT_ENUM_KEYID_PROP) Int;

external CryptCreateKeyIdentifierFromCSP(
    dwCertEncodingType : CULong,
    pszPubKeyOID : LPCSTR,
    pPubKeyStruc : Pointer[PUBLICKEYSTRUC],
    cbPubKeyStruc : CULong,
    dwFlags : CULong,
    pvReserved : RawPointer,
    pbHash : Pointer[CUChar],
    pcbHash : Pointer[CULong]) Int;

alias HCERTCHAINENGINE = HANDLE;

record Struct__CERT_CHAIN_ENGINE_CONFIG (
    cbSize : CULong,
    hRestrictedRoot : HCERTSTORE,
    hRestrictedTrust : HCERTSTORE,
    hRestrictedOther : HCERTSTORE,
    cAdditionalStore : CULong,
    rghAdditionalStore : Pointer[HCERTSTORE],
    dwFlags : CULong,
    dwUrlRetrievalTimeout : CULong,
    MaximumCachedCertificates : CULong,
    CycleDetectionModulus : CULong,
);

alias CERT_CHAIN_ENGINE_CONFIG = Struct__CERT_CHAIN_ENGINE_CONFIG;

alias PCERT_CHAIN_ENGINE_CONFIG = Pointer[Struct__CERT_CHAIN_ENGINE_CONFIG];

external CertCreateCertificateChainEngine(
    pConfig : PCERT_CHAIN_ENGINE_CONFIG,
    phChainEngine : Pointer[HCERTCHAINENGINE]) Int;

external CertFreeCertificateChainEngine(
    hChainEngine : HCERTCHAINENGINE);

external CertResyncCertificateChainEngine(
    hChainEngine : HCERTCHAINENGINE) Int;

record Struct__CERT_TRUST_STATUS (
    dwErrorStatus : CULong,
    dwInfoStatus : CULong,
);

alias CERT_TRUST_STATUS = Struct__CERT_TRUST_STATUS;

alias PCERT_TRUST_STATUS = Pointer[Struct__CERT_TRUST_STATUS];

record Struct__CERT_REVOCATION_INFO (
    cbSize : CULong,
    dwRevocationResult : CULong,
    pszRevocationOid : LPCSTR,
    pvOidSpecificInfo : LPVOID,
    fHasFreshnessTime : Int,
    dwFreshnessTime : CULong,
    pCrlInfo : PCERT_REVOCATION_CRL_INFO,
);

alias CERT_REVOCATION_INFO = Struct__CERT_REVOCATION_INFO;

alias PCERT_REVOCATION_INFO = Pointer[Struct__CERT_REVOCATION_INFO];

record Struct__CERT_TRUST_LIST_INFO (
    cbSize : CULong,
    pCtlEntry : PCTL_ENTRY,
    pCtlContext : PCCTL_CONTEXT,
);

alias CERT_TRUST_LIST_INFO = Struct__CERT_TRUST_LIST_INFO;

alias PCERT_TRUST_LIST_INFO = Pointer[Struct__CERT_TRUST_LIST_INFO];

record Struct__CERT_CHAIN_ELEMENT (
    cbSize : CULong,
    pCertContext : PCCERT_CONTEXT,
    TrustStatus : CERT_TRUST_STATUS,
    pRevocationInfo : PCERT_REVOCATION_INFO,
    pIssuanceUsage : PCERT_ENHKEY_USAGE,
    pApplicationUsage : PCERT_ENHKEY_USAGE,
    pwszExtendedErrorInfo : LPCWSTR,
);

alias CERT_CHAIN_ELEMENT = Struct__CERT_CHAIN_ELEMENT;

alias PCERT_CHAIN_ELEMENT = Pointer[Struct__CERT_CHAIN_ELEMENT];

record Struct__CERT_SIMPLE_CHAIN (
    cbSize : CULong,
    TrustStatus : CERT_TRUST_STATUS,
    cElement : CULong,
    rgpElement : Pointer[PCERT_CHAIN_ELEMENT],
    pTrustListInfo : PCERT_TRUST_LIST_INFO,
    fHasRevocationFreshnessTime : Int,
    dwRevocationFreshnessTime : CULong,
);

alias CERT_SIMPLE_CHAIN = Struct__CERT_SIMPLE_CHAIN;

alias PCERT_SIMPLE_CHAIN = Pointer[Struct__CERT_SIMPLE_CHAIN];

alias CERT_CHAIN_CONTEXT = Struct__CERT_CHAIN_CONTEXT;

alias PCERT_CHAIN_CONTEXT = Pointer[Struct__CERT_CHAIN_CONTEXT];

alias PCCERT_CHAIN_CONTEXT = Pointer[CERT_CHAIN_CONTEXT];

record Struct__CERT_CHAIN_CONTEXT (
    cbSize : CULong,
    TrustStatus : CERT_TRUST_STATUS,
    cChain : CULong,
    rgpChain : Pointer[PCERT_SIMPLE_CHAIN],
    cLowerQualityChainContext : CULong,
    rgpLowerQualityChainContext : Pointer[PCCERT_CHAIN_CONTEXT],
    fHasRevocationFreshnessTime : Int,
    dwRevocationFreshnessTime : CULong,
);

record Struct__CERT_USAGE_MATCH (
    dwType : CULong,
    Usage : CERT_ENHKEY_USAGE,
);

alias CERT_USAGE_MATCH = Struct__CERT_USAGE_MATCH;

alias PCERT_USAGE_MATCH = Pointer[Struct__CERT_USAGE_MATCH];

record Struct__CTL_USAGE_MATCH (
    dwType : CULong,
    Usage : CTL_USAGE,
);

alias CTL_USAGE_MATCH = Struct__CTL_USAGE_MATCH;

alias PCTL_USAGE_MATCH = Pointer[Struct__CTL_USAGE_MATCH];

record Struct__CERT_CHAIN_PARA (
    cbSize : CULong,
    RequestedUsage : CERT_USAGE_MATCH,
);

alias CERT_CHAIN_PARA = Struct__CERT_CHAIN_PARA;

alias PCERT_CHAIN_PARA = Pointer[Struct__CERT_CHAIN_PARA];

external CertGetCertificateChain(
    hChainEngine : HCERTCHAINENGINE,
    pCertContext : PCCERT_CONTEXT,
    pTime : LPFILETIME,
    hAdditionalStore : HCERTSTORE,
    pChainPara : PCERT_CHAIN_PARA,
    dwFlags : CULong,
    pvReserved : LPVOID,
    ppChainContext : Pointer[PCCERT_CHAIN_CONTEXT]) Int;

external CertFreeCertificateChain(
    pChainContext : PCCERT_CHAIN_CONTEXT);

external CertDuplicateCertificateChain(
    pChainContext : PCCERT_CHAIN_CONTEXT) PCCERT_CHAIN_CONTEXT;

record Struct__CRL_REVOCATION_INFO (
    pCrlEntry : PCRL_ENTRY,
    pCrlContext : PCCRL_CONTEXT,
    pCrlIssuerChain : PCCERT_CHAIN_CONTEXT,
);

alias CRL_REVOCATION_INFO = Struct__CRL_REVOCATION_INFO;

alias PCRL_REVOCATION_INFO = Pointer[Struct__CRL_REVOCATION_INFO];

external CertFindChainInStore(
    hCertStore : HCERTSTORE,
    dwCertEncodingType : CULong,
    dwFindFlags : CULong,
    dwFindType : CULong,
    pvFindPara : RawPointer,
    pPrevChainContext : PCCERT_CHAIN_CONTEXT) PCCERT_CHAIN_CONTEXT;

alias PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK = CCodePointer[(Pointer[Struct__CERT_CONTEXT],RawPointer),(Int)];

record Struct__CERT_CHAIN_FIND_BY_ISSUER_PARA (
    cbSize : CULong,
    pszUsageIdentifier : LPCSTR,
    dwKeySpec : CULong,
    dwAcquirePrivateKeyFlags : CULong,
    cIssuer : CULong,
    rgIssuer : Pointer[CERT_NAME_BLOB],
    pfnFindCallback : PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK,
    pvFindArg : RawPointer,
);

alias CERT_CHAIN_FIND_ISSUER_PARA = Struct__CERT_CHAIN_FIND_BY_ISSUER_PARA;

alias PCERT_CHAIN_FIND_ISSUER_PARA = Pointer[Struct__CERT_CHAIN_FIND_BY_ISSUER_PARA];

alias CERT_CHAIN_FIND_BY_ISSUER_PARA = Struct__CERT_CHAIN_FIND_BY_ISSUER_PARA;

alias PCERT_CHAIN_FIND_BY_ISSUER_PARA = Pointer[Struct__CERT_CHAIN_FIND_BY_ISSUER_PARA];

record Struct__CERT_CHAIN_POLICY_PARA (
    cbSize : CULong,
    dwFlags : CULong,
    pvExtraPolicyPara : RawPointer,
);

alias CERT_CHAIN_POLICY_PARA = Struct__CERT_CHAIN_POLICY_PARA;

alias PCERT_CHAIN_POLICY_PARA = Pointer[Struct__CERT_CHAIN_POLICY_PARA];

record Struct__CERT_CHAIN_POLICY_STATUS (
    cbSize : CULong,
    dwError : CULong,
    lChainIndex : CLong,
    lElementIndex : CLong,
    pvExtraPolicyStatus : RawPointer,
);

alias CERT_CHAIN_POLICY_STATUS = Struct__CERT_CHAIN_POLICY_STATUS;

alias PCERT_CHAIN_POLICY_STATUS = Pointer[Struct__CERT_CHAIN_POLICY_STATUS];

external CertVerifyCertificateChainPolicy(
    pszPolicyOID : LPCSTR,
    pChainContext : PCCERT_CHAIN_CONTEXT,
    pPolicyPara : PCERT_CHAIN_POLICY_PARA,
    pPolicyStatus : PCERT_CHAIN_POLICY_STATUS) Int;

record Struct__AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA (
    cbSize : CULong,
    dwRegPolicySettings : CULong,
    pSignerInfo : PCMSG_SIGNER_INFO,
);

alias AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA = Struct__AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA;

alias PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA = Pointer[Struct__AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA];

record Struct__AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS (
    cbSize : CULong,
    fCommercial : Int,
);

alias AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS = Struct__AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS;

alias PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS = Pointer[Struct__AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS];

record Struct__AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA (
    cbSize : CULong,
    dwRegPolicySettings : CULong,
    fCommercial : Int,
);

alias AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA = Struct__AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA;

alias PAUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA = Pointer[Struct__AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA];

record Struct__HTTPSPolicyCallbackData (
    unnamed_field0 : AUnionType,
    dwAuthType : CULong,
    fdwChecks : CULong,
    pwszServerName : Pointer[UShort],
);

alias HTTPSPolicyCallbackData = Struct__HTTPSPolicyCallbackData;

alias PHTTPSPolicyCallbackData = Pointer[Struct__HTTPSPolicyCallbackData];

alias SSL_EXTRA_CERT_CHAIN_POLICY_PARA = Struct__HTTPSPolicyCallbackData;

alias PSSL_EXTRA_CERT_CHAIN_POLICY_PARA = Pointer[Struct__HTTPSPolicyCallbackData];

external CryptStringToBinaryA(
    pszString : LPCSTR,
    cchString : CULong,
    dwFlags : CULong,
    pbBinary : Pointer[CUChar],
    pcbBinary : Pointer[CULong],
    pdwSkip : Pointer[CULong],
    pdwFlags : Pointer[CULong]) Int;

external CryptStringToBinaryW(
    pszString : LPCWSTR,
    cchString : CULong,
    dwFlags : CULong,
    pbBinary : Pointer[CUChar],
    pcbBinary : Pointer[CULong],
    pdwSkip : Pointer[CULong],
    pdwFlags : Pointer[CULong]) Int;

external CryptBinaryToStringA(
    pbBinary : Pointer[CUChar],
    cbBinary : CULong,
    dwFlags : CULong,
    pszString : LPSTR,
    pcchString : Pointer[CULong]) Int;

external CryptBinaryToStringW(
    pbBinary : Pointer[CUChar],
    cbBinary : CULong,
    dwFlags : CULong,
    pszString : LPWSTR,
    pcchString : Pointer[CULong]) Int;

external PFXImportCertStore(
    pPFX : Pointer[CRYPT_DATA_BLOB],
    szPassword : LPCWSTR,
    dwFlags : CULong) HCERTSTORE;

external PFXIsPFXBlob(
    pPFX : Pointer[CRYPT_DATA_BLOB]) Int;

external PFXVerifyPassword(
    pPFX : Pointer[CRYPT_DATA_BLOB],
    szPassword : LPCWSTR,
    dwFlags : CULong) Int;

external PFXExportCertStoreEx(
    hStore : HCERTSTORE,
    pPFX : Pointer[CRYPT_DATA_BLOB],
    szPassword : LPCWSTR,
    pvReserved : RawPointer,
    dwFlags : CULong) Int;

external PFXExportCertStore(
    hStore : HCERTSTORE,
    pPFX : Pointer[CRYPT_DATA_BLOB],
    szPassword : LPCWSTR,
    dwFlags : CULong) Int;

record Struct__CERTIFICATE_BLOB (
    dwCertEncodingType : CULong,
    cbData : CULong,
    pbData : PBYTE,
);

alias EFS_CERTIFICATE_BLOB = Struct__CERTIFICATE_BLOB;

alias PEFS_CERTIFICATE_BLOB = Pointer[Struct__CERTIFICATE_BLOB];

record Struct__EFS_HASH_BLOB (
    cbData : CULong,
    pbData : PBYTE,
);

alias EFS_HASH_BLOB = Struct__EFS_HASH_BLOB;

alias PEFS_HASH_BLOB = Pointer[Struct__EFS_HASH_BLOB];

record Struct__EFS_RPC_BLOB (
    cbData : CULong,
    pbData : PBYTE,
);

alias EFS_RPC_BLOB = Struct__EFS_RPC_BLOB;

alias PEFS_RPC_BLOB = Pointer[Struct__EFS_RPC_BLOB];

record Struct__EFS_KEY_INFO (
    dwVersion : CULong,
    Entropy : CULong,
    Algorithm : UInt,
    KeyLength : CULong,
);

alias EFS_KEY_INFO = Struct__EFS_KEY_INFO;

alias PEFS_KEY_INFO = Pointer[Struct__EFS_KEY_INFO];

record Struct__ENCRYPTION_CERTIFICATE (
    cbTotalLength : CULong,
    pUserSid : Pointer[SID],
    pCertBlob : PEFS_CERTIFICATE_BLOB,
);

alias ENCRYPTION_CERTIFICATE = Struct__ENCRYPTION_CERTIFICATE;

alias PENCRYPTION_CERTIFICATE = Pointer[Struct__ENCRYPTION_CERTIFICATE];

record Struct__ENCRYPTION_CERTIFICATE_HASH (
    cbTotalLength : CULong,
    pUserSid : Pointer[SID],
    pHash : PEFS_HASH_BLOB,
    lpDisplayInformation : LPWSTR,
);

alias ENCRYPTION_CERTIFICATE_HASH = Struct__ENCRYPTION_CERTIFICATE_HASH;

alias PENCRYPTION_CERTIFICATE_HASH = Pointer[Struct__ENCRYPTION_CERTIFICATE_HASH];

record Struct__ENCRYPTION_CERTIFICATE_HASH_LIST (
    nCert_Hash : CULong,
    pUsers : Pointer[PENCRYPTION_CERTIFICATE_HASH],
);

alias ENCRYPTION_CERTIFICATE_HASH_LIST = Struct__ENCRYPTION_CERTIFICATE_HASH_LIST;

alias PENCRYPTION_CERTIFICATE_HASH_LIST = Pointer[Struct__ENCRYPTION_CERTIFICATE_HASH_LIST];

record Struct__ENCRYPTION_CERTIFICATE_LIST (
    nUsers : CULong,
    pUsers : Pointer[PENCRYPTION_CERTIFICATE],
);

alias ENCRYPTION_CERTIFICATE_LIST = Struct__ENCRYPTION_CERTIFICATE_LIST;

alias PENCRYPTION_CERTIFICATE_LIST = Pointer[Struct__ENCRYPTION_CERTIFICATE_LIST];

external QueryUsersOnEncryptedFile(
    lpFileName : LPCWSTR,
    pUsers : Pointer[PENCRYPTION_CERTIFICATE_HASH_LIST]) CULong;

external QueryRecoveryAgentsOnEncryptedFile(
    lpFileName : LPCWSTR,
    pRecoveryAgents : Pointer[PENCRYPTION_CERTIFICATE_HASH_LIST]) CULong;

external RemoveUsersFromEncryptedFile(
    lpFileName : LPCWSTR,
    pHashes : PENCRYPTION_CERTIFICATE_HASH_LIST) CULong;

external AddUsersToEncryptedFile(
    lpFileName : LPCWSTR,
    pUsers : PENCRYPTION_CERTIFICATE_LIST) CULong;

external SetUserFileEncryptionKey(
    pEncryptionCertificate : PENCRYPTION_CERTIFICATE) CULong;

external FreeEncryptionCertificateHashList(
    pHashes : PENCRYPTION_CERTIFICATE_HASH_LIST);

external EncryptionDisable(
    DirPath : LPCWSTR,
    Disable : Int) Int;

external DuplicateEncryptionInfoFile(
    SrcFileName : LPCWSTR,
    DstFileName : LPCWSTR,
    dwCreationDistribution : CULong,
    dwAttributes : CULong,
    lpSecurityAttributes : LPSECURITY_ATTRIBUTES) CULong;

record UnnamedStruct33 (
    LookupContext : RPC_NS_HANDLE,
    ProposedHandle : RPC_BINDING_HANDLE,
    Bindings : Pointer[RPC_BINDING_VECTOR],
);

alias RPC_IMPORT_CONTEXT_P = UnnamedStruct33;

alias PRPC_IMPORT_CONTEXT_P = Pointer[UnnamedStruct33];

external I_RpcNsGetBuffer(
    Message : PRPC_MESSAGE) CLong;

external I_RpcNsSendReceive(
    Message : PRPC_MESSAGE,
    Handle : Pointer[RPC_BINDING_HANDLE]) CLong;

external I_RpcNsRaiseException(
    Message : PRPC_MESSAGE,
    Status : CLong);

external I_RpcReBindBuffer(
    Message : PRPC_MESSAGE) CLong;

external I_NsServerBindSearch() CLong;

external I_NsClientBindSearch() CLong;

external I_NsClientBindDone();

alias byte = CUChar;

alias cs_byte = CUChar;

alias boolean = CUChar;

external MIDL_user_allocate(
    argument0 : UInt64) RawPointer;

external MIDL_user_free(
    argument0 : RawPointer);

alias NDR_CCONTEXT = RawPointer;

record Struct__NDR_SCONTEXT (
    pad : Array[RawPointer,2],
    userContext : RawPointer,
);

alias NDR_SCONTEXT = Pointer[Struct__NDR_SCONTEXT];

alias NDR_RUNDOWN = CCodePointer[(RawPointer),()];

alias NDR_NOTIFY_ROUTINE = CCodePointer[(),()];

alias NDR_NOTIFY2_ROUTINE = CCodePointer[(CUChar),()];

record Struct__SCONTEXT_QUEUE (
    NumberOfObjects : CULong,
    ArrayOfObjects : Pointer[NDR_SCONTEXT],
);

alias SCONTEXT_QUEUE = Struct__SCONTEXT_QUEUE;

alias PSCONTEXT_QUEUE = Pointer[Struct__SCONTEXT_QUEUE];

external NDRCContextBinding(
    CContext : NDR_CCONTEXT) RPC_BINDING_HANDLE;

external NDRCContextMarshall(
    CContext : NDR_CCONTEXT,
    pBuff : RawPointer);

external NDRCContextUnmarshall(
    pCContext : Pointer[NDR_CCONTEXT],
    hBinding : RPC_BINDING_HANDLE,
    pBuff : RawPointer,
    DataRepresentation : CULong);

external NDRSContextMarshall(
    CContext : NDR_SCONTEXT,
    pBuff : RawPointer,
    userRunDownIn : NDR_RUNDOWN);

external NDRSContextUnmarshall(
    pBuff : RawPointer,
    DataRepresentation : CULong) NDR_SCONTEXT;

external NDRSContextMarshallEx(
    BindingHandle : RPC_BINDING_HANDLE,
    CContext : NDR_SCONTEXT,
    pBuff : RawPointer,
    userRunDownIn : NDR_RUNDOWN);

external NDRSContextMarshall2(
    BindingHandle : RPC_BINDING_HANDLE,
    CContext : NDR_SCONTEXT,
    pBuff : RawPointer,
    userRunDownIn : NDR_RUNDOWN,
    CtxGuard : RawPointer,
    Flags : CULong);

external NDRSContextUnmarshallEx(
    BindingHandle : RPC_BINDING_HANDLE,
    pBuff : RawPointer,
    DataRepresentation : CULong) NDR_SCONTEXT;

external NDRSContextUnmarshall2(
    BindingHandle : RPC_BINDING_HANDLE,
    pBuff : RawPointer,
    DataRepresentation : CULong,
    CtxGuard : RawPointer,
    Flags : CULong) NDR_SCONTEXT;

external RpcSsDestroyClientContext(
    ContextHandle : Pointer[RawPointer]);

alias error_status_t = CULong;

alias RPC_BUFPTR = Pointer[CUChar];

alias RPC_LENGTH = CULong;

alias EXPR_EVAL = CCodePointer[(Pointer[Struct__MIDL_STUB_MESSAGE]),()];

alias PFORMAT_STRING = Pointer[CUChar];

record UnnamedStruct34 (
    Dimension : CLong,
    BufferConformanceMark : Pointer[CULong],
    BufferVarianceMark : Pointer[CULong],
    MaxCountArray : Pointer[CULong],
    OffsetArray : Pointer[CULong],
    ActualCountArray : Pointer[CULong],
);

alias ARRAY_INFO = UnnamedStruct34;

alias PARRAY_INFO = Pointer[UnnamedStruct34];

alias PNDR_ASYNC_MESSAGE = OpaquePointer;

alias PNDR_CORRELATION_INFO = OpaquePointer;

record UnnamedStruct35 (
    WireCodeset : CULong,
    DesiredReceivingCodeset : CULong,
    CSArrayInfo : RawPointer,
);

alias CS_STUB_INFO = UnnamedStruct35;

alias MIDL_SYNTAX_INFO = Struct__MIDL_SYNTAX_INFO;

alias PMIDL_SYNTAX_INFO = Pointer[Struct__MIDL_SYNTAX_INFO];

record Struct__MIDL_STUB_MESSAGE (
    RpcMsg : PRPC_MESSAGE,
    Buffer : Pointer[CUChar],
    BufferStart : Pointer[CUChar],
    BufferEnd : Pointer[CUChar],
    BufferMark : Pointer[CUChar],
    BufferLength : CULong,
    MemorySize : CULong,
    Memory : Pointer[CUChar],
    IsClient : CUChar,
    Pad : CUChar,
    uFlags2 : UShort,
    ReuseBuffer : Int,
    pAllocAllNodesContext : OpaquePointer,
    pPointerQueueState : OpaquePointer,
    IgnoreEmbeddedPointers : Int,
    PointerBufferMark : Pointer[CUChar],
    fBufferValid : CUChar,
    uFlags : CUChar,
    UniquePtrCount : UShort,
    MaxCount : UInt64,
    Offset : CULong,
    ActualCount : CULong,
    pfnAllocate : CCodePointer[(UInt64),(RawPointer)],
    pfnFree : CCodePointer[(RawPointer),()],
    StackTop : Pointer[CUChar],
    pPresentedType : Pointer[CUChar],
    pTransmitType : Pointer[CUChar],
    SavedHandle : handle_t,
    StubDesc : Pointer[Struct__MIDL_STUB_DESC],
    FullPtrXlatTables : Pointer[Struct__FULL_PTR_XLAT_TABLES],
    FullPtrRefId : CULong,
    PointerLength : CULong,
    fInDontFree : Int,
    fDontCallFreeInst : Int,
    fInOnlyParam : Int,
    fHasReturn : Int,
    fHasExtensions : Int,
    fHasNewCorrDesc : Int,
    fIsOicfServer : Int,
    fHasMemoryValidateCallback : Int,
    fUnused : Int,
    fUnused2 : Int,
    dwDestContext : CULong,
    pvDestContext : RawPointer,
    SavedContextHandles : Pointer[NDR_SCONTEXT],
    ParamNumber : CLong,
    pRpcChannelBuffer : Pointer[Struct_IRpcChannelBuffer],
    pArrayInfo : PARRAY_INFO,
    SizePtrCountArray : Pointer[CULong],
    SizePtrOffsetArray : Pointer[CULong],
    SizePtrLengthArray : Pointer[CULong],
    pArgQueue : RawPointer,
    dwStubPhase : CULong,
    LowStackMark : RawPointer,
    pAsyncMsg : PNDR_ASYNC_MESSAGE,
    pCorrInfo : PNDR_CORRELATION_INFO,
    pCorrMemory : Pointer[CUChar],
    pMemoryList : RawPointer,
    pCSInfo : Pointer[CS_STUB_INFO],
    ConformanceMark : Pointer[CUChar],
    VarianceMark : Pointer[CUChar],
    Unused : Int64,
    pContext : OpaquePointer,
    pUserMarshalList : RawPointer,
    Reserved51_2 : Int64,
    Reserved51_3 : Int64,
    Reserved51_4 : Int64,
    Reserved51_5 : Int64,
);

alias MIDL_STUB_MESSAGE = Struct__MIDL_STUB_MESSAGE;

alias PMIDL_STUB_MESSAGE = Pointer[Struct__MIDL_STUB_MESSAGE];

alias GENERIC_BINDING_ROUTINE = CCodePointer[(RawPointer),(RawPointer)];

alias GENERIC_UNBIND_ROUTINE = CCodePointer[(RawPointer,Pointer[CUChar]),()];

record Struct__GENERIC_BINDING_ROUTINE_PAIR (
    pfnBind : GENERIC_BINDING_ROUTINE,
    pfnUnbind : GENERIC_UNBIND_ROUTINE,
);

alias GENERIC_BINDING_ROUTINE_PAIR = Struct__GENERIC_BINDING_ROUTINE_PAIR;

alias PGENERIC_BINDING_ROUTINE_PAIR = Pointer[Struct__GENERIC_BINDING_ROUTINE_PAIR];

record Struct___GENERIC_BINDING_INFO (
    pObj : RawPointer,
    Size : UInt,
    pfnBind : GENERIC_BINDING_ROUTINE,
    pfnUnbind : GENERIC_UNBIND_ROUTINE,
);

alias GENERIC_BINDING_INFO = Struct___GENERIC_BINDING_INFO;

alias PGENERIC_BINDING_INFO = Pointer[Struct___GENERIC_BINDING_INFO];

alias XMIT_HELPER_ROUTINE = CCodePointer[(Pointer[Struct__MIDL_STUB_MESSAGE]),()];

record Struct__XMIT_ROUTINE_QUINTUPLE (
    pfnTranslateToXmit : XMIT_HELPER_ROUTINE,
    pfnTranslateFromXmit : XMIT_HELPER_ROUTINE,
    pfnFreeXmit : XMIT_HELPER_ROUTINE,
    pfnFreeInst : XMIT_HELPER_ROUTINE,
);

alias XMIT_ROUTINE_QUINTUPLE = Struct__XMIT_ROUTINE_QUINTUPLE;

alias PXMIT_ROUTINE_QUINTUPLE = Pointer[Struct__XMIT_ROUTINE_QUINTUPLE];

alias USER_MARSHAL_SIZING_ROUTINE = CCodePointer[(Pointer[CULong],CULong,RawPointer),(CULong)];

alias USER_MARSHAL_MARSHALLING_ROUTINE = CCodePointer[(Pointer[CULong],Pointer[CUChar],RawPointer),(Pointer[CUChar])];

alias USER_MARSHAL_UNMARSHALLING_ROUTINE = CCodePointer[(Pointer[CULong],Pointer[CUChar],RawPointer),(Pointer[CUChar])];

alias USER_MARSHAL_FREEING_ROUTINE = CCodePointer[(Pointer[CULong],RawPointer),()];

record Struct__USER_MARSHAL_ROUTINE_QUADRUPLE (
    pfnBufferSize : USER_MARSHAL_SIZING_ROUTINE,
    pfnMarshall : USER_MARSHAL_MARSHALLING_ROUTINE,
    pfnUnmarshall : USER_MARSHAL_UNMARSHALLING_ROUTINE,
    pfnFree : USER_MARSHAL_FREEING_ROUTINE,
);

alias USER_MARSHAL_ROUTINE_QUADRUPLE = Struct__USER_MARSHAL_ROUTINE_QUADRUPLE;

alias USER_MARSHAL_CB_BUFFER_SIZE = 0;
alias USER_MARSHAL_CB_MARSHALL = 1;
alias USER_MARSHAL_CB_UNMARSHALL = 2;
alias USER_MARSHAL_CB_FREE = 3;

alias USER_MARSHAL_CB_TYPE = Int;

record Struct__USER_MARSHAL_CB (
    Flags : CULong,
    pStubMsg : PMIDL_STUB_MESSAGE,
    pReserve : PFORMAT_STRING,
    Signature : CULong,
    CBType : USER_MARSHAL_CB_TYPE,
    pFormat : PFORMAT_STRING,
    pTypeFormat : PFORMAT_STRING,
);

alias USER_MARSHAL_CB = Struct__USER_MARSHAL_CB;

record Struct__MALLOC_FREE_STRUCT (
    pfnAllocate : CCodePointer[(UInt64),(RawPointer)],
    pfnFree : CCodePointer[(RawPointer),()],
);

alias MALLOC_FREE_STRUCT = Struct__MALLOC_FREE_STRUCT;

record Struct__COMM_FAULT_OFFSETS (
    CommOffset : Short,
    FaultOffset : Short,
);

alias COMM_FAULT_OFFSETS = Struct__COMM_FAULT_OFFSETS;

alias IDL_CS_NO_CONVERT = 0;
alias IDL_CS_IN_PLACE_CONVERT = 1;
alias IDL_CS_NEW_BUFFER_CONVERT = 2;

alias IDL_CS_CONVERT = Int;

alias CS_TYPE_NET_SIZE_ROUTINE = CCodePointer[(RawPointer,CULong,CULong,Pointer[Int],Pointer[CULong],Pointer[CULong]),()];

alias CS_TYPE_LOCAL_SIZE_ROUTINE = CCodePointer[(RawPointer,CULong,CULong,Pointer[Int],Pointer[CULong],Pointer[CULong]),()];

alias CS_TYPE_TO_NETCS_ROUTINE = CCodePointer[(RawPointer,CULong,RawPointer,CULong,Pointer[CUChar],Pointer[CULong],Pointer[CULong]),()];

alias CS_TYPE_FROM_NETCS_ROUTINE = CCodePointer[(RawPointer,CULong,Pointer[CUChar],CULong,CULong,RawPointer,Pointer[CULong],Pointer[CULong]),()];

alias CS_TAG_GETTING_ROUTINE = CCodePointer[(RawPointer,Int,Pointer[CULong],Pointer[CULong],Pointer[CULong],Pointer[CULong]),()];

external RpcCsGetTags(
    hBinding : RPC_BINDING_HANDLE,
    fServerSide : Int,
    pulSendingTag : Pointer[CULong],
    pulDesiredReceivingTag : Pointer[CULong],
    pulReceivingTag : Pointer[CULong],
    pStatus : Pointer[CULong]);

record Struct__NDR_CS_SIZE_CONVERT_ROUTINES (
    pfnNetSize : CS_TYPE_NET_SIZE_ROUTINE,
    pfnToNetCs : CS_TYPE_TO_NETCS_ROUTINE,
    pfnLocalSize : CS_TYPE_LOCAL_SIZE_ROUTINE,
    pfnFromNetCs : CS_TYPE_FROM_NETCS_ROUTINE,
);

alias NDR_CS_SIZE_CONVERT_ROUTINES = Struct__NDR_CS_SIZE_CONVERT_ROUTINES;

record Struct__NDR_CS_ROUTINES (
    pSizeConvertRoutines : Pointer[NDR_CS_SIZE_CONVERT_ROUTINES],
    pTagGettingRoutines : Pointer[CS_TAG_GETTING_ROUTINE],
);

alias NDR_CS_ROUTINES = Struct__NDR_CS_ROUTINES;

record Struct__MIDL_STUB_DESC (
    RpcInterfaceInformation : RawPointer,
    pfnAllocate : CCodePointer[(UInt64),(RawPointer)],
    pfnFree : CCodePointer[(RawPointer),()],
    IMPLICIT_HANDLE_INFO : AUnionType,
    apfnNdrRundownRoutines : Pointer[NDR_RUNDOWN],
    aGenericBindingRoutinePairs : Pointer[GENERIC_BINDING_ROUTINE_PAIR],
    apfnExprEval : Pointer[EXPR_EVAL],
    aXmitQuintuple : Pointer[XMIT_ROUTINE_QUINTUPLE],
    pFormatTypes : Pointer[CUChar],
    fCheckBounds : Int,
    Version : CULong,
    pMallocFreeStruct : Pointer[MALLOC_FREE_STRUCT],
    MIDLVersion : CLong,
    CommFaultOffsets : Pointer[COMM_FAULT_OFFSETS],
    aUserMarshalQuadruple : Pointer[USER_MARSHAL_ROUTINE_QUADRUPLE],
    NotifyRoutineTable : Pointer[NDR_NOTIFY_ROUTINE],
    mFlags : UInt64,
    CsRoutineTables : Pointer[NDR_CS_ROUTINES],
    Reserved4 : RawPointer,
    Reserved5 : UInt64,
);

alias MIDL_STUB_DESC = Struct__MIDL_STUB_DESC;

alias PMIDL_STUB_DESC = Pointer[MIDL_STUB_DESC];

alias PMIDL_XMIT_TYPE = RawPointer;

record Struct__MIDL_FORMAT_STRING (
    Pad : Short,
    Format : Array[CUChar,0],
);

alias MIDL_FORMAT_STRING = Struct__MIDL_FORMAT_STRING;

alias STUB_THUNK = CCodePointer[(Pointer[Struct__MIDL_STUB_MESSAGE]),()];

alias SERVER_ROUTINE = CCodePointer[(),(CLong)];

record Struct__MIDL_SERVER_INFO_ (
    pStubDesc : PMIDL_STUB_DESC,
    DispatchTable : Pointer[SERVER_ROUTINE],
    ProcString : PFORMAT_STRING,
    FmtStringOffset : Pointer[UShort],
    ThunkTable : Pointer[STUB_THUNK],
    pTransferSyntax : PRPC_SYNTAX_IDENTIFIER,
    nCount : UInt64,
    pSyntaxInfo : PMIDL_SYNTAX_INFO,
);

alias MIDL_SERVER_INFO = Struct__MIDL_SERVER_INFO_;

alias PMIDL_SERVER_INFO = Pointer[Struct__MIDL_SERVER_INFO_];

record Struct__MIDL_STUBLESS_PROXY_INFO (
    pStubDesc : PMIDL_STUB_DESC,
    ProcFormatString : PFORMAT_STRING,
    FormatStringOffset : Pointer[UShort],
    pTransferSyntax : PRPC_SYNTAX_IDENTIFIER,
    nCount : UInt64,
    pSyntaxInfo : PMIDL_SYNTAX_INFO,
);

alias MIDL_STUBLESS_PROXY_INFO = Struct__MIDL_STUBLESS_PROXY_INFO;

alias PMIDL_STUBLESS_PROXY_INFO = Pointer[MIDL_STUBLESS_PROXY_INFO];

record Struct__MIDL_SYNTAX_INFO (
    TransferSyntax : RPC_SYNTAX_IDENTIFIER,
    DispatchTable : Pointer[RPC_DISPATCH_TABLE],
    ProcString : PFORMAT_STRING,
    FmtStringOffset : Pointer[UShort],
    TypeString : PFORMAT_STRING,
    aUserMarshalQuadruple : RawPointer,
    pReserved1 : UInt64,
    pReserved2 : UInt64,
);

alias PARAM_OFFSETTABLE = Pointer[UShort];

alias PPARAM_OFFSETTABLE = Pointer[UShort];

alias CLIENT_CALL_RETURN = AUnionType;

alias XLAT_SERVER = 1;
alias XLAT_CLIENT = 2;

alias XLAT_SIDE = Int;

record Struct__FULL_PTR_TO_REFID_ELEMENT (
    Next : Pointer[Struct__FULL_PTR_TO_REFID_ELEMENT],
    Pointer : RawPointer,
    RefId : CULong,
    State : CUChar,
);

alias FULL_PTR_TO_REFID_ELEMENT = Struct__FULL_PTR_TO_REFID_ELEMENT;

alias PFULL_PTR_TO_REFID_ELEMENT = Pointer[Struct__FULL_PTR_TO_REFID_ELEMENT];

record Struct__FULL_PTR_XLAT_TABLES (
    RefIdToPointer : UnnamedRecord7,
    PointerToRefId : UnnamedRecord8,
    NextRefId : CULong,
    XlatSide : XLAT_SIDE,
);

record UnnamedRecord7 (
    XlatTable : Pointer[RawPointer],
    StateTable : Pointer[CUChar],
    NumberOfEntries : CULong,
);

record UnnamedRecord8 (
    XlatTable : Pointer[PFULL_PTR_TO_REFID_ELEMENT],
    NumberOfBuckets : CULong,
    HashMask : CULong,
);

alias FULL_PTR_XLAT_TABLES = Struct__FULL_PTR_XLAT_TABLES;

alias PFULL_PTR_XLAT_TABLES = Pointer[Struct__FULL_PTR_XLAT_TABLES];

external NdrClientGetSupportedSyntaxes(
    pInf : Pointer[RPC_CLIENT_INTERFACE],
    pCount : Pointer[CULong],
    pArr : Pointer[Pointer[MIDL_SYNTAX_INFO]]) CLong;

external NdrServerGetSupportedSyntaxes(
    pInf : Pointer[RPC_SERVER_INTERFACE],
    pCount : Pointer[CULong],
    pArr : Pointer[Pointer[MIDL_SYNTAX_INFO]],
    pPreferSyntaxIndex : Pointer[CULong]) CLong;

external NdrSimpleTypeMarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    FormatChar : CUChar);

external NdrPointerMarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING) Pointer[CUChar];

external NdrCsArrayMarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING) Pointer[CUChar];

external NdrCsTagMarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING) Pointer[CUChar];

external NdrSimpleStructMarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING) Pointer[CUChar];

external NdrConformantStructMarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING) Pointer[CUChar];

external NdrConformantVaryingStructMarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING) Pointer[CUChar];

external NdrComplexStructMarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING) Pointer[CUChar];

external NdrFixedArrayMarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING) Pointer[CUChar];

external NdrConformantArrayMarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING) Pointer[CUChar];

external NdrConformantVaryingArrayMarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING) Pointer[CUChar];

external NdrVaryingArrayMarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING) Pointer[CUChar];

external NdrComplexArrayMarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING) Pointer[CUChar];

external NdrNonConformantStringMarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING) Pointer[CUChar];

external NdrConformantStringMarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING) Pointer[CUChar];

external NdrEncapsulatedUnionMarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING) Pointer[CUChar];

external NdrNonEncapsulatedUnionMarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING) Pointer[CUChar];

external NdrByteCountPointerMarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING) Pointer[CUChar];

external NdrXmitOrRepAsMarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING) Pointer[CUChar];

external NdrUserMarshalMarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING) Pointer[CUChar];

external NdrInterfacePointerMarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING) Pointer[CUChar];

external NdrClientContextMarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    ContextHandle : NDR_CCONTEXT,
    fCheck : Int);

external NdrServerContextMarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    ContextHandle : NDR_SCONTEXT,
    RundownRoutine : NDR_RUNDOWN);

external NdrServerContextNewMarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    ContextHandle : NDR_SCONTEXT,
    RundownRoutine : NDR_RUNDOWN,
    pFormat : PFORMAT_STRING);

external NdrSimpleTypeUnmarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    FormatChar : CUChar);

external NdrCsArrayUnmarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    ppMemory : Pointer[Pointer[CUChar]],
    pFormat : PFORMAT_STRING,
    fMustAlloc : CUChar) Pointer[CUChar];

external NdrCsTagUnmarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    ppMemory : Pointer[Pointer[CUChar]],
    pFormat : PFORMAT_STRING,
    fMustAlloc : CUChar) Pointer[CUChar];

external NdrRangeUnmarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    ppMemory : Pointer[Pointer[CUChar]],
    pFormat : PFORMAT_STRING,
    fMustAlloc : CUChar) Pointer[CUChar];

external NdrCorrelationInitialize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : RawPointer,
    CacheSize : CULong,
    flags : CULong);

external NdrCorrelationPass(
    pStubMsg : PMIDL_STUB_MESSAGE);

external NdrCorrelationFree(
    pStubMsg : PMIDL_STUB_MESSAGE);

external NdrPointerUnmarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    ppMemory : Pointer[Pointer[CUChar]],
    pFormat : PFORMAT_STRING,
    fMustAlloc : CUChar) Pointer[CUChar];

external NdrSimpleStructUnmarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    ppMemory : Pointer[Pointer[CUChar]],
    pFormat : PFORMAT_STRING,
    fMustAlloc : CUChar) Pointer[CUChar];

external NdrConformantStructUnmarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    ppMemory : Pointer[Pointer[CUChar]],
    pFormat : PFORMAT_STRING,
    fMustAlloc : CUChar) Pointer[CUChar];

external NdrConformantVaryingStructUnmarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    ppMemory : Pointer[Pointer[CUChar]],
    pFormat : PFORMAT_STRING,
    fMustAlloc : CUChar) Pointer[CUChar];

external NdrComplexStructUnmarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    ppMemory : Pointer[Pointer[CUChar]],
    pFormat : PFORMAT_STRING,
    fMustAlloc : CUChar) Pointer[CUChar];

external NdrFixedArrayUnmarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    ppMemory : Pointer[Pointer[CUChar]],
    pFormat : PFORMAT_STRING,
    fMustAlloc : CUChar) Pointer[CUChar];

external NdrConformantArrayUnmarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    ppMemory : Pointer[Pointer[CUChar]],
    pFormat : PFORMAT_STRING,
    fMustAlloc : CUChar) Pointer[CUChar];

external NdrConformantVaryingArrayUnmarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    ppMemory : Pointer[Pointer[CUChar]],
    pFormat : PFORMAT_STRING,
    fMustAlloc : CUChar) Pointer[CUChar];

external NdrVaryingArrayUnmarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    ppMemory : Pointer[Pointer[CUChar]],
    pFormat : PFORMAT_STRING,
    fMustAlloc : CUChar) Pointer[CUChar];

external NdrComplexArrayUnmarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    ppMemory : Pointer[Pointer[CUChar]],
    pFormat : PFORMAT_STRING,
    fMustAlloc : CUChar) Pointer[CUChar];

external NdrNonConformantStringUnmarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    ppMemory : Pointer[Pointer[CUChar]],
    pFormat : PFORMAT_STRING,
    fMustAlloc : CUChar) Pointer[CUChar];

external NdrConformantStringUnmarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    ppMemory : Pointer[Pointer[CUChar]],
    pFormat : PFORMAT_STRING,
    fMustAlloc : CUChar) Pointer[CUChar];

external NdrEncapsulatedUnionUnmarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    ppMemory : Pointer[Pointer[CUChar]],
    pFormat : PFORMAT_STRING,
    fMustAlloc : CUChar) Pointer[CUChar];

external NdrNonEncapsulatedUnionUnmarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    ppMemory : Pointer[Pointer[CUChar]],
    pFormat : PFORMAT_STRING,
    fMustAlloc : CUChar) Pointer[CUChar];

external NdrByteCountPointerUnmarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    ppMemory : Pointer[Pointer[CUChar]],
    pFormat : PFORMAT_STRING,
    fMustAlloc : CUChar) Pointer[CUChar];

external NdrXmitOrRepAsUnmarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    ppMemory : Pointer[Pointer[CUChar]],
    pFormat : PFORMAT_STRING,
    fMustAlloc : CUChar) Pointer[CUChar];

external NdrUserMarshalUnmarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    ppMemory : Pointer[Pointer[CUChar]],
    pFormat : PFORMAT_STRING,
    fMustAlloc : CUChar) Pointer[CUChar];

external NdrInterfacePointerUnmarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    ppMemory : Pointer[Pointer[CUChar]],
    pFormat : PFORMAT_STRING,
    fMustAlloc : CUChar) Pointer[CUChar];

external NdrClientContextUnmarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pContextHandle : Pointer[NDR_CCONTEXT],
    BindHandle : RPC_BINDING_HANDLE);

external NdrServerContextUnmarshall(
    pStubMsg : PMIDL_STUB_MESSAGE) NDR_SCONTEXT;

external NdrContextHandleInitialize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pFormat : PFORMAT_STRING) NDR_SCONTEXT;

external NdrServerContextNewUnmarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pFormat : PFORMAT_STRING) NDR_SCONTEXT;

external NdrPointerBufferSize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING);

external NdrCsArrayBufferSize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING);

external NdrCsTagBufferSize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING);

external NdrSimpleStructBufferSize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING);

external NdrConformantStructBufferSize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING);

external NdrConformantVaryingStructBufferSize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING);

external NdrComplexStructBufferSize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING);

external NdrFixedArrayBufferSize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING);

external NdrConformantArrayBufferSize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING);

external NdrConformantVaryingArrayBufferSize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING);

external NdrVaryingArrayBufferSize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING);

external NdrComplexArrayBufferSize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING);

external NdrConformantStringBufferSize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING);

external NdrNonConformantStringBufferSize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING);

external NdrEncapsulatedUnionBufferSize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING);

external NdrNonEncapsulatedUnionBufferSize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING);

external NdrByteCountPointerBufferSize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING);

external NdrXmitOrRepAsBufferSize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING);

external NdrUserMarshalBufferSize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING);

external NdrInterfacePointerBufferSize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING);

external NdrContextHandleSize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING);

external NdrPointerMemorySize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pFormat : PFORMAT_STRING) CULong;

external NdrCsArrayMemorySize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pFormat : PFORMAT_STRING) CULong;

external NdrCsTagMemorySize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pFormat : PFORMAT_STRING) CULong;

external NdrSimpleStructMemorySize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pFormat : PFORMAT_STRING) CULong;

external NdrConformantStructMemorySize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pFormat : PFORMAT_STRING) CULong;

external NdrConformantVaryingStructMemorySize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pFormat : PFORMAT_STRING) CULong;

external NdrComplexStructMemorySize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pFormat : PFORMAT_STRING) CULong;

external NdrFixedArrayMemorySize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pFormat : PFORMAT_STRING) CULong;

external NdrConformantArrayMemorySize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pFormat : PFORMAT_STRING) CULong;

external NdrConformantVaryingArrayMemorySize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pFormat : PFORMAT_STRING) CULong;

external NdrVaryingArrayMemorySize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pFormat : PFORMAT_STRING) CULong;

external NdrComplexArrayMemorySize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pFormat : PFORMAT_STRING) CULong;

external NdrConformantStringMemorySize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pFormat : PFORMAT_STRING) CULong;

external NdrNonConformantStringMemorySize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pFormat : PFORMAT_STRING) CULong;

external NdrEncapsulatedUnionMemorySize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pFormat : PFORMAT_STRING) CULong;

external NdrNonEncapsulatedUnionMemorySize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pFormat : PFORMAT_STRING) CULong;

external NdrXmitOrRepAsMemorySize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pFormat : PFORMAT_STRING) CULong;

external NdrUserMarshalMemorySize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pFormat : PFORMAT_STRING) CULong;

external NdrInterfacePointerMemorySize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pFormat : PFORMAT_STRING) CULong;

external NdrPointerFree(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING);

external NdrCsArrayFree(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING);

external NdrSimpleStructFree(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING);

external NdrConformantStructFree(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING);

external NdrConformantVaryingStructFree(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING);

external NdrComplexStructFree(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING);

external NdrFixedArrayFree(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING);

external NdrConformantArrayFree(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING);

external NdrConformantVaryingArrayFree(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING);

external NdrVaryingArrayFree(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING);

external NdrComplexArrayFree(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING);

external NdrEncapsulatedUnionFree(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING);

external NdrNonEncapsulatedUnionFree(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING);

external NdrByteCountPointerFree(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING);

external NdrXmitOrRepAsFree(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING);

external NdrUserMarshalFree(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING);

external NdrInterfacePointerFree(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    pFormat : PFORMAT_STRING);

external NdrConvert2(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pFormat : PFORMAT_STRING,
    NumberParams : CLong);

external NdrConvert(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pFormat : PFORMAT_STRING);

external NdrUserMarshalSimpleTypeConvert(
    pFlags : Pointer[CULong],
    pBuffer : Pointer[CUChar],
    FormatChar : CUChar) Pointer[CUChar];

external NdrClientInitializeNew(
    pRpcMsg : PRPC_MESSAGE,
    pStubMsg : PMIDL_STUB_MESSAGE,
    pStubDescriptor : PMIDL_STUB_DESC,
    ProcNum : UInt);

external NdrServerInitializeNew(
    pRpcMsg : PRPC_MESSAGE,
    pStubMsg : PMIDL_STUB_MESSAGE,
    pStubDescriptor : PMIDL_STUB_DESC) Pointer[CUChar];

external NdrServerInitializePartial(
    pRpcMsg : PRPC_MESSAGE,
    pStubMsg : PMIDL_STUB_MESSAGE,
    pStubDescriptor : PMIDL_STUB_DESC,
    RequestedBufferSize : CULong);

external NdrClientInitialize(
    pRpcMsg : PRPC_MESSAGE,
    pStubMsg : PMIDL_STUB_MESSAGE,
    pStubDescriptor : PMIDL_STUB_DESC,
    ProcNum : UInt);

external NdrServerInitialize(
    pRpcMsg : PRPC_MESSAGE,
    pStubMsg : PMIDL_STUB_MESSAGE,
    pStubDescriptor : PMIDL_STUB_DESC) Pointer[CUChar];

external NdrServerInitializeUnmarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pStubDescriptor : PMIDL_STUB_DESC,
    pRpcMsg : PRPC_MESSAGE) Pointer[CUChar];

external NdrServerInitializeMarshall(
    pRpcMsg : PRPC_MESSAGE,
    pStubMsg : PMIDL_STUB_MESSAGE);

external NdrGetBuffer(
    pStubMsg : PMIDL_STUB_MESSAGE,
    BufferLength : CULong,
    Handle : RPC_BINDING_HANDLE) Pointer[CUChar];

external NdrNsGetBuffer(
    pStubMsg : PMIDL_STUB_MESSAGE,
    BufferLength : CULong,
    Handle : RPC_BINDING_HANDLE) Pointer[CUChar];

external NdrSendReceive(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pBufferEnd : Pointer[CUChar]) Pointer[CUChar];

external NdrNsSendReceive(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pBufferEnd : Pointer[CUChar],
    pAutoHandle : Pointer[RPC_BINDING_HANDLE]) Pointer[CUChar];

external NdrFreeBuffer(
    pStubMsg : PMIDL_STUB_MESSAGE);

external NdrGetDcomProtocolVersion(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pVersion : Pointer[RPC_VERSION]) CLong;

external NdrClientCall2(
    pStubDescriptor : PMIDL_STUB_DESC,
    pFormat : PFORMAT_STRING,
    ...) CLIENT_CALL_RETURN;

external NdrClientCall(
    pStubDescriptor : PMIDL_STUB_DESC,
    pFormat : PFORMAT_STRING,
    ...) CLIENT_CALL_RETURN;

external NdrAsyncClientCall(
    pStubDescriptor : PMIDL_STUB_DESC,
    pFormat : PFORMAT_STRING,
    ...) CLIENT_CALL_RETURN;

external NdrDcomAsyncClientCall(
    pStubDescriptor : PMIDL_STUB_DESC,
    pFormat : PFORMAT_STRING,
    ...) CLIENT_CALL_RETURN;

alias STUB_UNMARSHAL = 0;
alias STUB_CALL_SERVER = 1;
alias STUB_MARSHAL = 2;
alias STUB_CALL_SERVER_NO_HRESULT = 3;

alias STUB_PHASE = Int;

alias PROXY_CALCSIZE = 0;
alias PROXY_GETBUFFER = 1;
alias PROXY_MARSHAL = 2;
alias PROXY_SENDRECEIVE = 3;
alias PROXY_UNMARSHAL = 4;

alias PROXY_PHASE = Int;

external NdrAsyncServerCall(
    pRpcMsg : PRPC_MESSAGE);

external NdrAsyncStubCall(
    pThis : Pointer[Struct_IRpcStubBuffer],
    pChannel : Pointer[Struct_IRpcChannelBuffer],
    pRpcMsg : PRPC_MESSAGE,
    pdwStubPhase : Pointer[CULong]) CLong;

external NdrDcomAsyncStubCall(
    pThis : Pointer[Struct_IRpcStubBuffer],
    pChannel : Pointer[Struct_IRpcChannelBuffer],
    pRpcMsg : PRPC_MESSAGE,
    pdwStubPhase : Pointer[CULong]) CLong;

external NdrStubCall2(
    pThis : Pointer[Struct_IRpcStubBuffer],
    pChannel : Pointer[Struct_IRpcChannelBuffer],
    pRpcMsg : PRPC_MESSAGE,
    pdwStubPhase : Pointer[CULong]) CLong;

external NdrServerCall2(
    pRpcMsg : PRPC_MESSAGE);

external NdrStubCall(
    pThis : Pointer[Struct_IRpcStubBuffer],
    pChannel : Pointer[Struct_IRpcChannelBuffer],
    pRpcMsg : PRPC_MESSAGE,
    pdwStubPhase : Pointer[CULong]) CLong;

external NdrServerCall(
    pRpcMsg : PRPC_MESSAGE);

external NdrServerUnmarshall(
    pChannel : Pointer[Struct_IRpcChannelBuffer],
    pRpcMsg : PRPC_MESSAGE,
    pStubMsg : PMIDL_STUB_MESSAGE,
    pStubDescriptor : PMIDL_STUB_DESC,
    pFormat : PFORMAT_STRING,
    pParamList : RawPointer) Int;

external NdrServerMarshall(
    pThis : Pointer[Struct_IRpcStubBuffer],
    pChannel : Pointer[Struct_IRpcChannelBuffer],
    pStubMsg : PMIDL_STUB_MESSAGE,
    pFormat : PFORMAT_STRING);

external NdrMapCommAndFaultStatus(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pCommStatus : Pointer[CULong],
    pFaultStatus : Pointer[CULong],
    Status : CLong) CLong;

external NdrSH_UPDecision(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pPtrInMem : Pointer[Pointer[CUChar]],
    pBuffer : RPC_BUFPTR) Int;

external NdrSH_TLUPDecision(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pPtrInMem : Pointer[Pointer[CUChar]]) Int;

external NdrSH_TLUPDecisionBuffer(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pPtrInMem : Pointer[Pointer[CUChar]]) Int;

external NdrSH_IfAlloc(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pPtrInMem : Pointer[Pointer[CUChar]],
    Count : CULong) Int;

external NdrSH_IfAllocRef(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pPtrInMem : Pointer[Pointer[CUChar]],
    Count : CULong) Int;

external NdrSH_IfAllocSet(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pPtrInMem : Pointer[Pointer[CUChar]],
    Count : CULong) Int;

external NdrSH_IfCopy(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pPtrInMem : Pointer[Pointer[CUChar]],
    Count : CULong) RPC_BUFPTR;

external NdrSH_IfAllocCopy(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pPtrInMem : Pointer[Pointer[CUChar]],
    Count : CULong) RPC_BUFPTR;

external NdrSH_Copy(
    pStubMsg : Pointer[CUChar],
    pPtrInMem : Pointer[CUChar],
    Count : CULong) CULong;

external NdrSH_IfFree(
    pMessage : PMIDL_STUB_MESSAGE,
    pPtr : Pointer[CUChar]);

external NdrSH_StringMarshall(
    pMessage : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[CUChar],
    Count : CULong,
    Size : Int) RPC_BUFPTR;

external NdrSH_StringUnMarshall(
    pMessage : PMIDL_STUB_MESSAGE,
    pMemory : Pointer[Pointer[CUChar]],
    Size : Int) RPC_BUFPTR;

alias RPC_SS_THREAD_HANDLE = RawPointer;

external RpcSsAllocate(
    Size : UInt64) RawPointer;

external RpcSsDisableAllocate();

external RpcSsEnableAllocate();

external RpcSsFree(
    NodeToFree : RawPointer);

external RpcSsGetThreadHandle() RPC_SS_THREAD_HANDLE;

external RpcSsSetClientAllocFree(
    ClientAlloc : CCodePointer[(UInt64),(RawPointer)],
    ClientFree : CCodePointer[(RawPointer),()]);

external RpcSsSetThreadHandle(
    Id : RPC_SS_THREAD_HANDLE);

external RpcSsSwapClientAllocFree(
    ClientAlloc : CCodePointer[(UInt64),(RawPointer)],
    ClientFree : CCodePointer[(RawPointer),()],
    OldClientAlloc : Pointer[CCodePointer[(UInt64),(RawPointer)]],
    OldClientFree : Pointer[CCodePointer[(RawPointer),()]]);

external RpcSmAllocate(
    Size : UInt64,
    pStatus : Pointer[CLong]) RawPointer;

external RpcSmClientFree(
    pNodeToFree : RawPointer) CLong;

external RpcSmDestroyClientContext(
    ContextHandle : Pointer[RawPointer]) CLong;

external RpcSmDisableAllocate() CLong;

external RpcSmEnableAllocate() CLong;

external RpcSmFree(
    NodeToFree : RawPointer) CLong;

external RpcSmGetThreadHandle(
    pStatus : Pointer[CLong]) RPC_SS_THREAD_HANDLE;

external RpcSmSetClientAllocFree(
    ClientAlloc : CCodePointer[(UInt64),(RawPointer)],
    ClientFree : CCodePointer[(RawPointer),()]) CLong;

external RpcSmSetThreadHandle(
    Id : RPC_SS_THREAD_HANDLE) CLong;

external RpcSmSwapClientAllocFree(
    ClientAlloc : CCodePointer[(UInt64),(RawPointer)],
    ClientFree : CCodePointer[(RawPointer),()],
    OldClientAlloc : Pointer[CCodePointer[(UInt64),(RawPointer)]],
    OldClientFree : Pointer[CCodePointer[(RawPointer),()]]) CLong;

external NdrRpcSsEnableAllocate(
    pMessage : PMIDL_STUB_MESSAGE);

external NdrRpcSsDisableAllocate(
    pMessage : PMIDL_STUB_MESSAGE);

external NdrRpcSmSetClientToOsf(
    pMessage : PMIDL_STUB_MESSAGE);

external NdrRpcSmClientAllocate(
    Size : UInt64) RawPointer;

external NdrRpcSmClientFree(
    NodeToFree : RawPointer);

external NdrRpcSsDefaultAllocate(
    Size : UInt64) RawPointer;

external NdrRpcSsDefaultFree(
    NodeToFree : RawPointer);

external NdrFullPointerXlatInit(
    NumberOfPointers : CULong,
    XlatSide : XLAT_SIDE) PFULL_PTR_XLAT_TABLES;

external NdrFullPointerXlatFree(
    pXlatTables : PFULL_PTR_XLAT_TABLES);

external NdrFullPointerQueryPointer(
    pXlatTables : PFULL_PTR_XLAT_TABLES,
    pPointer : RawPointer,
    QueryType : CUChar,
    pRefId : Pointer[CULong]) Int;

external NdrFullPointerQueryRefId(
    pXlatTables : PFULL_PTR_XLAT_TABLES,
    RefId : CULong,
    QueryType : CUChar,
    ppPointer : Pointer[RawPointer]) Int;

external NdrFullPointerInsertRefId(
    pXlatTables : PFULL_PTR_XLAT_TABLES,
    RefId : CULong,
    pPointer : RawPointer);

external NdrFullPointerFree(
    pXlatTables : PFULL_PTR_XLAT_TABLES,
    Pointer : RawPointer) Int;

external NdrAllocate(
    pStubMsg : PMIDL_STUB_MESSAGE,
    Len : UInt64) RawPointer;

external NdrClearOutParameters(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pFormat : PFORMAT_STRING,
    ArgAddr : RawPointer);

external NdrOleAllocate(
    Size : UInt64) RawPointer;

external NdrOleFree(
    NodeToFree : RawPointer);

record Struct__NDR_USER_MARSHAL_INFO_LEVEL1 (
    Buffer : RawPointer,
    BufferSize : CULong,
    pfnAllocate : CCodePointer[(UInt64),(RawPointer)],
    pfnFree : CCodePointer[(RawPointer),()],
    pRpcChannelBuffer : Pointer[Struct_IRpcChannelBuffer],
    Reserved : Array[UInt64,5],
);

alias NDR_USER_MARSHAL_INFO_LEVEL1 = Struct__NDR_USER_MARSHAL_INFO_LEVEL1;

record Struct__NDR_USER_MARSHAL_INFO (
    InformationLevel : CULong,
    unnamed_field1 : AUnionType,
);

alias NDR_USER_MARSHAL_INFO = Struct__NDR_USER_MARSHAL_INFO;

external NdrGetUserMarshalInfo(
    pFlags : Pointer[CULong],
    InformationLevel : CULong,
    pMarshalInfo : Pointer[NDR_USER_MARSHAL_INFO]) CLong;

external NdrCreateServerInterfaceFromStub(
    pStub : Pointer[Struct_IRpcStubBuffer],
    pServerIf : Pointer[RPC_SERVER_INTERFACE]) CLong;

external NdrClientCall3(
    pProxyInfo : Pointer[MIDL_STUBLESS_PROXY_INFO],
    nProcNum : CULong,
    pReturnValue : RawPointer,
    ...) CLIENT_CALL_RETURN;

external Ndr64AsyncClientCall(
    pProxyInfo : Pointer[MIDL_STUBLESS_PROXY_INFO],
    nProcNum : CULong,
    pReturnValue : RawPointer,
    ...) CLIENT_CALL_RETURN;

external Ndr64DcomAsyncClientCall(
    pProxyInfo : Pointer[MIDL_STUBLESS_PROXY_INFO],
    nProcNum : CULong,
    pReturnValue : RawPointer,
    ...) CLIENT_CALL_RETURN;

external Ndr64AsyncServerCall(
    pRpcMsg : PRPC_MESSAGE);

external Ndr64AsyncServerCall64(
    pRpcMsg : PRPC_MESSAGE);

external Ndr64AsyncServerCallAll(
    pRpcMsg : PRPC_MESSAGE);

external Ndr64AsyncStubCall(
    pThis : Pointer[Struct_IRpcStubBuffer],
    pChannel : Pointer[Struct_IRpcChannelBuffer],
    pRpcMsg : PRPC_MESSAGE,
    pdwStubPhase : Pointer[CULong]) CLong;

external Ndr64DcomAsyncStubCall(
    pThis : Pointer[Struct_IRpcStubBuffer],
    pChannel : Pointer[Struct_IRpcChannelBuffer],
    pRpcMsg : PRPC_MESSAGE,
    pdwStubPhase : Pointer[CULong]) CLong;

external NdrStubCall3(
    pThis : Pointer[Struct_IRpcStubBuffer],
    pChannel : Pointer[Struct_IRpcChannelBuffer],
    pRpcMsg : PRPC_MESSAGE,
    pdwStubPhase : Pointer[CULong]) CLong;

external NdrServerCallAll(
    pRpcMsg : PRPC_MESSAGE);

external NdrServerCallNdr64(
    pRpcMsg : PRPC_MESSAGE);

external NdrServerCall3(
    pRpcMsg : PRPC_MESSAGE);

external NdrPartialIgnoreClientMarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : RawPointer);

external NdrPartialIgnoreServerUnmarshall(
    pStubMsg : PMIDL_STUB_MESSAGE,
    ppMemory : Pointer[RawPointer]);

external NdrPartialIgnoreClientBufferSize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    pMemory : RawPointer);

external NdrPartialIgnoreServerInitialize(
    pStubMsg : PMIDL_STUB_MESSAGE,
    ppMemory : Pointer[RawPointer],
    pFormat : PFORMAT_STRING);

external RpcUserFree(
    AsyncHandle : handle_t,
    pBuffer : RawPointer);

external __MIDL_itf_wtypes_0000_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_wtypes_0000_v0_0_s_ifspec : RPC_IF_HANDLE;

record Struct_tagRemHGLOBAL (
    fNullHGlobal : CLong,
    cbData : CULong,
    data : Array[CUChar,1],
);

alias RemHGLOBAL = Struct_tagRemHGLOBAL;

record Struct_tagRemHMETAFILEPICT (
    mm : CLong,
    xExt : CLong,
    yExt : CLong,
    cbData : CULong,
    data : Array[CUChar,1],
);

alias RemHMETAFILEPICT = Struct_tagRemHMETAFILEPICT;

record Struct_tagRemHENHMETAFILE (
    cbData : CULong,
    data : Array[CUChar,1],
);

alias RemHENHMETAFILE = Struct_tagRemHENHMETAFILE;

record Struct_tagRemHBITMAP (
    cbData : CULong,
    data : Array[CUChar,1],
);

alias RemHBITMAP = Struct_tagRemHBITMAP;

record Struct_tagRemHPALETTE (
    cbData : CULong,
    data : Array[CUChar,1],
);

alias RemHPALETTE = Struct_tagRemHPALETTE;

record Struct_tagRemBRUSH (
    cbData : CULong,
    data : Array[CUChar,1],
);

alias RemHBRUSH = Struct_tagRemBRUSH;

alias OLECHAR = UShort;

alias LPOLESTR = Pointer[UShort];

alias LPCOLESTR = Pointer[UShort];

alias DOUBLE = Double;

record Struct__COAUTHIDENTITY (
    User : Pointer[UShort],
    UserLength : CULong,
    Domain : Pointer[UShort],
    DomainLength : CULong,
    Password : Pointer[UShort],
    PasswordLength : CULong,
    Flags : CULong,
);

alias COAUTHIDENTITY = Struct__COAUTHIDENTITY;

record Struct__COAUTHINFO (
    dwAuthnSvc : CULong,
    dwAuthzSvc : CULong,
    pwszServerPrincName : LPWSTR,
    dwAuthnLevel : CULong,
    dwImpersonationLevel : CULong,
    pAuthIdentityData : Pointer[COAUTHIDENTITY],
    dwCapabilities : CULong,
);

alias COAUTHINFO = Struct__COAUTHINFO;

alias SCODE = CLong;

alias PSCODE = Pointer[CLong];

alias MEMCTX_TASK = 1;
alias MEMCTX_SHARED = 2;
alias MEMCTX_MACSYSTEM = 3;
alias MEMCTX_UNKNOWN = 4294967295;
alias MEMCTX_SAME = 4294967294;

alias MEMCTX = Int;

alias CLSCTX_INPROC_SERVER = 1;
alias CLSCTX_INPROC_HANDLER = 2;
alias CLSCTX_LOCAL_SERVER = 4;
alias CLSCTX_INPROC_SERVER16 = 8;
alias CLSCTX_REMOTE_SERVER = 16;
alias CLSCTX_INPROC_HANDLER16 = 32;
alias CLSCTX_RESERVED1 = 64;
alias CLSCTX_RESERVED2 = 128;
alias CLSCTX_RESERVED3 = 256;
alias CLSCTX_RESERVED4 = 512;
alias CLSCTX_NO_CODE_DOWNLOAD = 1024;
alias CLSCTX_RESERVED5 = 2048;
alias CLSCTX_NO_CUSTOM_MARSHAL = 4096;
alias CLSCTX_ENABLE_CODE_DOWNLOAD = 8192;
alias CLSCTX_NO_FAILURE_LOG = 16384;
alias CLSCTX_DISABLE_AAA = 32768;
alias CLSCTX_ENABLE_AAA = 65536;
alias CLSCTX_FROM_DEFAULT_CONTEXT = 131072;
alias CLSCTX_ACTIVATE_32_BIT_SERVER = 262144;
alias CLSCTX_ACTIVATE_64_BIT_SERVER = 524288;

alias CLSCTX = Int;

alias MSHLFLAGS_NORMAL = 0;
alias MSHLFLAGS_TABLESTRONG = 1;
alias MSHLFLAGS_TABLEWEAK = 2;
alias MSHLFLAGS_NOPING = 4;
alias MSHLFLAGS_RESERVED1 = 8;
alias MSHLFLAGS_RESERVED2 = 16;
alias MSHLFLAGS_RESERVED3 = 32;
alias MSHLFLAGS_RESERVED4 = 64;

alias MSHLFLAGS = Int;

alias MSHCTX_LOCAL = 0;
alias MSHCTX_NOSHAREDMEM = 1;
alias MSHCTX_DIFFERENTMACHINE = 2;
alias MSHCTX_INPROC = 3;
alias MSHCTX_CROSSCTX = 4;

alias MSHCTX = Int;

alias DVASPECT_CONTENT = 1;
alias DVASPECT_THUMBNAIL = 2;
alias DVASPECT_ICON = 4;
alias DVASPECT_DOCPRINT = 8;

alias DVASPECT = Int;

alias STGC_DEFAULT = 0;
alias STGC_OVERWRITE = 1;
alias STGC_ONLYIFCURRENT = 2;
alias STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 4;
alias STGC_CONSOLIDATE = 8;

alias STGC = Int;

alias STGMOVE_MOVE = 0;
alias STGMOVE_COPY = 1;
alias STGMOVE_SHALLOWCOPY = 2;

alias STGMOVE = Int;

alias STATFLAG_DEFAULT = 0;
alias STATFLAG_NONAME = 1;
alias STATFLAG_NOOPEN = 2;

alias STATFLAG = Int;

alias HCONTEXT = RawPointer;

record Struct__BYTE_BLOB (
    clSize : CULong,
    abData : Array[CUChar,1],
);

alias BYTE_BLOB = Struct__BYTE_BLOB;

alias UP_BYTE_BLOB = Pointer[BYTE_BLOB];

record Struct__WORD_BLOB (
    clSize : CULong,
    asData : Array[UShort,1],
);

alias WORD_BLOB = Struct__WORD_BLOB;

alias UP_WORD_BLOB = Pointer[WORD_BLOB];

record Struct__DWORD_BLOB (
    clSize : CULong,
    alData : Array[CULong,1],
);

alias DWORD_BLOB = Struct__DWORD_BLOB;

alias UP_DWORD_BLOB = Pointer[DWORD_BLOB];

record Struct__FLAGGED_BYTE_BLOB (
    fFlags : CULong,
    clSize : CULong,
    abData : Array[CUChar,1],
);

alias FLAGGED_BYTE_BLOB = Struct__FLAGGED_BYTE_BLOB;

alias UP_FLAGGED_BYTE_BLOB = Pointer[FLAGGED_BYTE_BLOB];

record Struct__FLAGGED_WORD_BLOB (
    fFlags : CULong,
    clSize : CULong,
    asData : Array[UShort,1],
);

alias FLAGGED_WORD_BLOB = Struct__FLAGGED_WORD_BLOB;

alias UP_FLAGGED_WORD_BLOB = Pointer[FLAGGED_WORD_BLOB];

record Struct__BYTE_SIZEDARR (
    clSize : CULong,
    pData : Pointer[CUChar],
);

alias BYTE_SIZEDARR = Struct__BYTE_SIZEDARR;

record Struct__SHORT_SIZEDARR (
    clSize : CULong,
    pData : Pointer[UShort],
);

alias WORD_SIZEDARR = Struct__SHORT_SIZEDARR;

record Struct__LONG_SIZEDARR (
    clSize : CULong,
    pData : Pointer[CULong],
);

alias DWORD_SIZEDARR = Struct__LONG_SIZEDARR;

record Struct__HYPER_SIZEDARR (
    clSize : CULong,
    pData : Pointer[Int64],
);

alias HYPER_SIZEDARR = Struct__HYPER_SIZEDARR;

record Struct__userCLIPFORMAT (
    fContext : CLong,
    u : AUnionType,
);

alias userCLIPFORMAT = Struct__userCLIPFORMAT;

alias wireCLIPFORMAT = Pointer[userCLIPFORMAT];

alias CLIPFORMAT = UShort;

record Struct__GDI_NONREMOTE (
    fContext : CLong,
    u : AUnionType,
);

alias GDI_NONREMOTE = Struct__GDI_NONREMOTE;

record Struct__userHGLOBAL (
    fContext : CLong,
    u : AUnionType,
);

alias userHGLOBAL = Struct__userHGLOBAL;

alias wireHGLOBAL = Pointer[userHGLOBAL];

record Struct__userHMETAFILE (
    fContext : CLong,
    u : AUnionType,
);

alias userHMETAFILE = Struct__userHMETAFILE;

record Struct__remoteMETAFILEPICT (
    mm : CLong,
    xExt : CLong,
    yExt : CLong,
    hMF : Pointer[userHMETAFILE],
);

alias remoteMETAFILEPICT = Struct__remoteMETAFILEPICT;

record Struct__userHMETAFILEPICT (
    fContext : CLong,
    u : AUnionType,
);

alias userHMETAFILEPICT = Struct__userHMETAFILEPICT;

record Struct__userHENHMETAFILE (
    fContext : CLong,
    u : AUnionType,
);

alias userHENHMETAFILE = Struct__userHENHMETAFILE;

record Struct__userBITMAP (
    bmType : CLong,
    bmWidth : CLong,
    bmHeight : CLong,
    bmWidthBytes : CLong,
    bmPlanes : UShort,
    bmBitsPixel : UShort,
    cbSize : CULong,
    pBuffer : Array[CUChar,1],
);

alias userBITMAP = Struct__userBITMAP;

record Struct__userHBITMAP (
    fContext : CLong,
    u : AUnionType,
);

alias userHBITMAP = Struct__userHBITMAP;

record Struct__userHPALETTE (
    fContext : CLong,
    u : AUnionType,
);

alias userHPALETTE = Struct__userHPALETTE;

record Struct__RemotableHandle (
    fContext : CLong,
    u : AUnionType,
);

alias RemotableHandle = Struct__RemotableHandle;

alias wireHWND = Pointer[RemotableHandle];

alias wireHMENU = Pointer[RemotableHandle];

alias wireHACCEL = Pointer[RemotableHandle];

alias wireHBRUSH = Pointer[RemotableHandle];

alias wireHFONT = Pointer[RemotableHandle];

alias wireHDC = Pointer[RemotableHandle];

alias wireHICON = Pointer[RemotableHandle];

alias wireHBITMAP = Pointer[userHBITMAP];

alias wireHPALETTE = Pointer[userHPALETTE];

alias wireHENHMETAFILE = Pointer[userHENHMETAFILE];

alias wireHMETAFILE = Pointer[userHMETAFILE];

alias wireHMETAFILEPICT = Pointer[userHMETAFILEPICT];

alias HMETAFILEPICT = RawPointer;

external IWinTypes_v0_1_c_ifspec : RPC_IF_HANDLE;

external IWinTypes_v0_1_s_ifspec : RPC_IF_HANDLE;

alias DATE = Double;

alias CY = AUnionType;

alias LPCY = Pointer[CY];

record Struct_tagDEC (
    wReserved : UShort,
    unnamed_field1 : AUnionType,
    Hi32 : CULong,
    unnamed_field3 : AUnionType,
);

alias DECIMAL = Struct_tagDEC;

alias LPDECIMAL = Pointer[DECIMAL];

alias wireBSTR = Pointer[FLAGGED_WORD_BLOB];

alias BSTR = Pointer[UShort];

alias LPBSTR = Pointer[BSTR];

alias VARIANT_BOOL = Short;

alias _VARIANT_BOOL = Short;

record Struct_tagBSTRBLOB (
    cbSize : CULong,
    pData : Pointer[CUChar],
);

alias BSTRBLOB = Struct_tagBSTRBLOB;

alias LPBSTRBLOB = Pointer[Struct_tagBSTRBLOB];

record Struct_tagBLOB (
    cbSize : CULong,
    pBlobData : Pointer[CUChar],
);

alias BLOB = Struct_tagBLOB;

alias LPBLOB = Pointer[Struct_tagBLOB];

record Struct_tagCLIPDATA (
    cbSize : CULong,
    ulClipFmt : CLong,
    pClipData : Pointer[CUChar],
);

alias CLIPDATA = Struct_tagCLIPDATA;

alias VARTYPE = UShort;

alias VT_EMPTY = 0;
alias VT_NULL = 1;
alias VT_I2 = 2;
alias VT_I4 = 3;
alias VT_R4 = 4;
alias VT_R8 = 5;
alias VT_CY = 6;
alias VT_DATE = 7;
alias VT_BSTR = 8;
alias VT_DISPATCH = 9;
alias VT_ERROR = 10;
alias VT_BOOL = 11;
alias VT_VARIANT = 12;
alias VT_UNKNOWN = 13;
alias VT_DECIMAL = 14;
alias VT_I1 = 16;
alias VT_UI1 = 17;
alias VT_UI2 = 18;
alias VT_UI4 = 19;
alias VT_I8 = 20;
alias VT_UI8 = 21;
alias VT_INT = 22;
alias VT_UINT = 23;
alias VT_VOID = 24;
alias VT_HRESULT = 25;
alias VT_PTR = 26;
alias VT_SAFEARRAY = 27;
alias VT_CARRAY = 28;
alias VT_USERDEFINED = 29;
alias VT_LPSTR = 30;
alias VT_LPWSTR = 31;
alias VT_RECORD = 36;
alias VT_INT_PTR = 37;
alias VT_UINT_PTR = 38;
alias VT_FILETIME = 64;
alias VT_BLOB = 65;
alias VT_STREAM = 66;
alias VT_STORAGE = 67;
alias VT_STREAMED_OBJECT = 68;
alias VT_STORED_OBJECT = 69;
alias VT_BLOB_OBJECT = 70;
alias VT_CF = 71;
alias VT_CLSID = 72;
alias VT_VERSIONED_STREAM = 73;
alias VT_BSTR_BLOB = 4095;
alias VT_VECTOR = 4096;
alias VT_ARRAY = 8192;
alias VT_BYREF = 16384;
alias VT_RESERVED = 32768;
alias VT_ILLEGAL = 65535;
alias VT_ILLEGALMASKED = 4095;
alias VT_TYPEMASK = 4095;

alias PROPID = CULong;

record Struct_tagCSPLATFORM (
    dwPlatformId : CULong,
    dwVersionHi : CULong,
    dwVersionLo : CULong,
    dwProcessorArch : CULong,
);

alias CSPLATFORM = Struct_tagCSPLATFORM;

record Struct_tagQUERYCONTEXT (
    dwContext : CULong,
    Platform : CSPLATFORM,
    Locale : CULong,
    dwVersionHi : CULong,
    dwVersionLo : CULong,
);

alias QUERYCONTEXT = Struct_tagQUERYCONTEXT;

alias TYSPEC_CLSID = 0;
alias TYSPEC_FILEEXT = 1;
alias TYSPEC_MIMETYPE = 2;
alias TYSPEC_FILENAME = 3;
alias TYSPEC_PROGID = 4;
alias TYSPEC_PACKAGENAME = 5;
alias TYSPEC_OBJECTID = 6;

alias TYSPEC = Int;

record Struct___MIDL___MIDL_itf_wtypes_0003_0001 (
    tyspec : CULong,
    tagged_union : AUnionType,
);

alias uCLSSPEC = Struct___MIDL___MIDL_itf_wtypes_0003_0001;

external __MIDL_itf_wtypes_0003_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_wtypes_0003_v0_0_s_ifspec : RPC_IF_HANDLE;

external GUID_DEVINTERFACE_DISK : GUID;

external GUID_DEVINTERFACE_CDROM : GUID;

external GUID_DEVINTERFACE_PARTITION : GUID;

external GUID_DEVINTERFACE_TAPE : GUID;

external GUID_DEVINTERFACE_WRITEONCEDISK : GUID;

external GUID_DEVINTERFACE_VOLUME : GUID;

external GUID_DEVINTERFACE_MEDIUMCHANGER : GUID;

external GUID_DEVINTERFACE_FLOPPY : GUID;

external GUID_DEVINTERFACE_CDCHANGER : GUID;

external GUID_DEVINTERFACE_STORAGEPORT : GUID;

external GUID_DEVINTERFACE_COMPORT : GUID;

external GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR : GUID;

record Struct__STORAGE_HOTPLUG_INFO (
    Size : CULong,
    MediaRemovable : CUChar,
    MediaHotplug : CUChar,
    DeviceHotplug : CUChar,
    WriteCacheEnableOverride : CUChar,
);

alias STORAGE_HOTPLUG_INFO = Struct__STORAGE_HOTPLUG_INFO;

alias PSTORAGE_HOTPLUG_INFO = Pointer[Struct__STORAGE_HOTPLUG_INFO];

record Struct__STORAGE_DEVICE_NUMBER (
    DeviceType : CULong,
    DeviceNumber : CULong,
    PartitionNumber : CULong,
);

alias STORAGE_DEVICE_NUMBER = Struct__STORAGE_DEVICE_NUMBER;

alias PSTORAGE_DEVICE_NUMBER = Pointer[Struct__STORAGE_DEVICE_NUMBER];

record Struct__STORAGE_BUS_RESET_REQUEST (
    PathId : CUChar,
);

alias STORAGE_BUS_RESET_REQUEST = Struct__STORAGE_BUS_RESET_REQUEST;

alias PSTORAGE_BUS_RESET_REQUEST = Pointer[Struct__STORAGE_BUS_RESET_REQUEST];

record Struct_STORAGE_BREAK_RESERVATION_REQUEST (
    Length : CULong,
    _unused : CUChar,
    PathId : CUChar,
    TargetId : CUChar,
    Lun : CUChar,
);

alias STORAGE_BREAK_RESERVATION_REQUEST = Struct_STORAGE_BREAK_RESERVATION_REQUEST;

alias PSTORAGE_BREAK_RESERVATION_REQUEST = Pointer[Struct_STORAGE_BREAK_RESERVATION_REQUEST];

record Struct__PREVENT_MEDIA_REMOVAL (
    PreventMediaRemoval : CUChar,
);

alias PREVENT_MEDIA_REMOVAL = Struct__PREVENT_MEDIA_REMOVAL;

alias PPREVENT_MEDIA_REMOVAL = Pointer[Struct__PREVENT_MEDIA_REMOVAL];

record Struct__CLASS_MEDIA_CHANGE_CONTEXT (
    MediaChangeCount : CULong,
    NewState : CULong,
);

alias CLASS_MEDIA_CHANGE_CONTEXT = Struct__CLASS_MEDIA_CHANGE_CONTEXT;

alias PCLASS_MEDIA_CHANGE_CONTEXT = Pointer[Struct__CLASS_MEDIA_CHANGE_CONTEXT];

record Struct__TAPE_STATISTICS (
    Version : CULong,
    Flags : CULong,
    RecoveredWrites : LARGE_INTEGER,
    UnrecoveredWrites : LARGE_INTEGER,
    RecoveredReads : LARGE_INTEGER,
    UnrecoveredReads : LARGE_INTEGER,
    CompressionRatioReads : CUChar,
    CompressionRatioWrites : CUChar,
);

alias TAPE_STATISTICS = Struct__TAPE_STATISTICS;

alias PTAPE_STATISTICS = Pointer[Struct__TAPE_STATISTICS];

record Struct__TAPE_GET_STATISTICS (
    Operation : CULong,
);

alias TAPE_GET_STATISTICS = Struct__TAPE_GET_STATISTICS;

alias PTAPE_GET_STATISTICS = Pointer[Struct__TAPE_GET_STATISTICS];

alias DDS_4mm = 32;
alias MiniQic = 33;
alias Travan = 34;
alias QIC = 35;
alias MP_8mm = 36;
alias AME_8mm = 37;
alias AIT1_8mm = 38;
alias DLT = 39;
alias NCTP = 40;
alias IBM_3480 = 41;
alias IBM_3490E = 42;
alias IBM_Magstar_3590 = 43;
alias IBM_Magstar_MP = 44;
alias STK_DATA_D3 = 45;
alias SONY_DTF = 46;
alias DV_6mm = 47;
alias DMI = 48;
alias SONY_D2 = 49;
alias CLEANER_CARTRIDGE = 50;
alias CD_ROM = 51;
alias CD_R = 52;
alias CD_RW = 53;
alias DVD_ROM = 54;
alias DVD_R = 55;
alias DVD_RW = 56;
alias MO_3_RW = 57;
alias MO_5_WO = 58;
alias MO_5_RW = 59;
alias MO_5_LIMDOW = 60;
alias PC_5_WO = 61;
alias PC_5_RW = 62;
alias PD_5_RW = 63;
alias ABL_5_WO = 64;
alias PINNACLE_APEX_5_RW = 65;
alias SONY_12_WO = 66;
alias PHILIPS_12_WO = 67;
alias HITACHI_12_WO = 68;
alias CYGNET_12_WO = 69;
alias KODAK_14_WO = 70;
alias MO_NFR_525 = 71;
alias NIKON_12_RW = 72;
alias IOMEGA_ZIP = 73;
alias IOMEGA_JAZ = 74;
alias SYQUEST_EZ135 = 75;
alias SYQUEST_EZFLYER = 76;
alias SYQUEST_SYJET = 77;
alias AVATAR_F2 = 78;
alias MP2_8mm = 79;
alias DST_S = 80;
alias DST_M = 81;
alias DST_L = 82;
alias VXATape_1 = 83;
alias VXATape_2 = 84;
alias STK_9840 = 85;
alias LTO_Ultrium = 86;
alias LTO_Accelis = 87;
alias DVD_RAM = 88;
alias AIT_8mm = 89;
alias ADR_1 = 90;
alias ADR_2 = 91;
alias STK_9940 = 92;
alias SAIT = 93;
alias VXATape = 94;

alias STORAGE_MEDIA_TYPE = Int;

alias PSTORAGE_MEDIA_TYPE = Pointer[Int];

alias BusTypeUnknown = 0;
alias BusTypeScsi = 1;
alias BusTypeAtapi = 2;
alias BusTypeAta = 3;
alias BusType1394 = 4;
alias BusTypeSsa = 5;
alias BusTypeFibre = 6;
alias BusTypeUsb = 7;
alias BusTypeRAID = 8;
alias BusTypeiScsi = 9;
alias BusTypeSas = 10;
alias BusTypeSata = 11;
alias BusTypeMaxReserved = 127;

alias STORAGE_BUS_TYPE = Int;

alias PSTORAGE_BUS_TYPE = Pointer[Int];

record Struct__DEVICE_MEDIA_INFO (
    DeviceSpecific : AUnionType,
);

alias DEVICE_MEDIA_INFO = Struct__DEVICE_MEDIA_INFO;

alias PDEVICE_MEDIA_INFO = Pointer[Struct__DEVICE_MEDIA_INFO];

record Struct__GET_MEDIA_TYPES (
    DeviceType : CULong,
    MediaInfoCount : CULong,
    MediaInfo : Array[DEVICE_MEDIA_INFO,1],
);

alias GET_MEDIA_TYPES = Struct__GET_MEDIA_TYPES;

alias PGET_MEDIA_TYPES = Pointer[Struct__GET_MEDIA_TYPES];

record Struct__STORAGE_PREDICT_FAILURE (
    PredictFailure : CULong,
    VendorSpecific : Array[CUChar,512],
);

alias STORAGE_PREDICT_FAILURE = Struct__STORAGE_PREDICT_FAILURE;

alias PSTORAGE_PREDICT_FAILURE = Pointer[Struct__STORAGE_PREDICT_FAILURE];

alias Unknown = 0;
alias F5_1Pt2_512 = 1;
alias F3_1Pt44_512 = 2;
alias F3_2Pt88_512 = 3;
alias F3_20Pt8_512 = 4;
alias F3_720_512 = 5;
alias F5_360_512 = 6;
alias F5_320_512 = 7;
alias F5_320_1024 = 8;
alias F5_180_512 = 9;
alias F5_160_512 = 10;
alias RemovableMedia = 11;
alias FixedMedia = 12;
alias F3_120M_512 = 13;
alias F3_640_512 = 14;
alias F5_640_512 = 15;
alias F5_720_512 = 16;
alias F3_1Pt2_512 = 17;
alias F3_1Pt23_1024 = 18;
alias F5_1Pt23_1024 = 19;
alias F3_128Mb_512 = 20;
alias F3_230Mb_512 = 21;
alias F8_256_128 = 22;
alias F3_200Mb_512 = 23;
alias F3_240M_512 = 24;
alias F3_32M_512 = 25;

alias MEDIA_TYPE = Int;

alias PMEDIA_TYPE = Pointer[Int];

record Struct__FORMAT_PARAMETERS (
    MediaType : MEDIA_TYPE,
    StartCylinderNumber : CULong,
    EndCylinderNumber : CULong,
    StartHeadNumber : CULong,
    EndHeadNumber : CULong,
);

alias FORMAT_PARAMETERS = Struct__FORMAT_PARAMETERS;

alias PFORMAT_PARAMETERS = Pointer[Struct__FORMAT_PARAMETERS];

alias BAD_TRACK_NUMBER = UShort;

alias PBAD_TRACK_NUMBER = Pointer[UShort];

record Struct__FORMAT_EX_PARAMETERS (
    MediaType : MEDIA_TYPE,
    StartCylinderNumber : CULong,
    EndCylinderNumber : CULong,
    StartHeadNumber : CULong,
    EndHeadNumber : CULong,
    FormatGapLength : UShort,
    SectorsPerTrack : UShort,
    SectorNumber : Array[UShort,1],
);

alias FORMAT_EX_PARAMETERS = Struct__FORMAT_EX_PARAMETERS;

alias PFORMAT_EX_PARAMETERS = Pointer[Struct__FORMAT_EX_PARAMETERS];

record Struct__DISK_GEOMETRY (
    Cylinders : LARGE_INTEGER,
    MediaType : MEDIA_TYPE,
    TracksPerCylinder : CULong,
    SectorsPerTrack : CULong,
    BytesPerSector : CULong,
);

alias DISK_GEOMETRY = Struct__DISK_GEOMETRY;

alias PDISK_GEOMETRY = Pointer[Struct__DISK_GEOMETRY];

record Struct__PARTITION_INFORMATION (
    StartingOffset : LARGE_INTEGER,
    PartitionLength : LARGE_INTEGER,
    HiddenSectors : CULong,
    PartitionNumber : CULong,
    PartitionType : CUChar,
    BootIndicator : CUChar,
    RecognizedPartition : CUChar,
    RewritePartition : CUChar,
);

alias PARTITION_INFORMATION = Struct__PARTITION_INFORMATION;

alias PPARTITION_INFORMATION = Pointer[Struct__PARTITION_INFORMATION];

record Struct__SET_PARTITION_INFORMATION (
    PartitionType : CUChar,
);

alias SET_PARTITION_INFORMATION = Struct__SET_PARTITION_INFORMATION;

alias PSET_PARTITION_INFORMATION = Pointer[Struct__SET_PARTITION_INFORMATION];

record Struct__DRIVE_LAYOUT_INFORMATION (
    PartitionCount : CULong,
    Signature : CULong,
    PartitionEntry : Array[PARTITION_INFORMATION,1],
);

alias DRIVE_LAYOUT_INFORMATION = Struct__DRIVE_LAYOUT_INFORMATION;

alias PDRIVE_LAYOUT_INFORMATION = Pointer[Struct__DRIVE_LAYOUT_INFORMATION];

record Struct__VERIFY_INFORMATION (
    StartingOffset : LARGE_INTEGER,
    Length : CULong,
);

alias VERIFY_INFORMATION = Struct__VERIFY_INFORMATION;

alias PVERIFY_INFORMATION = Pointer[Struct__VERIFY_INFORMATION];

record Struct__REASSIGN_BLOCKS (
    Reserved : UShort,
    Count : UShort,
    BlockNumber : Array[CULong,1],
);

alias REASSIGN_BLOCKS = Struct__REASSIGN_BLOCKS;

alias PREASSIGN_BLOCKS = Pointer[Struct__REASSIGN_BLOCKS];

record Struct__REASSIGN_BLOCKS_EX (
    Reserved : UShort,
    Count : UShort,
    BlockNumber : Array[LARGE_INTEGER,1],
);

alias REASSIGN_BLOCKS_EX = Struct__REASSIGN_BLOCKS_EX;

alias PREASSIGN_BLOCKS_EX = Pointer[Struct__REASSIGN_BLOCKS_EX];

alias PARTITION_STYLE_MBR = 0;
alias PARTITION_STYLE_GPT = 1;
alias PARTITION_STYLE_RAW = 2;

alias PARTITION_STYLE = Int;

record Struct__PARTITION_INFORMATION_GPT (
    PartitionType : GUID,
    PartitionId : GUID,
    Attributes : UInt64,
    Name : Array[UShort,36],
);

alias PARTITION_INFORMATION_GPT = Struct__PARTITION_INFORMATION_GPT;

alias PPARTITION_INFORMATION_GPT = Pointer[Struct__PARTITION_INFORMATION_GPT];

record Struct__PARTITION_INFORMATION_MBR (
    PartitionType : CUChar,
    BootIndicator : CUChar,
    RecognizedPartition : CUChar,
    HiddenSectors : CULong,
);

alias PARTITION_INFORMATION_MBR = Struct__PARTITION_INFORMATION_MBR;

alias PPARTITION_INFORMATION_MBR = Pointer[Struct__PARTITION_INFORMATION_MBR];

alias SET_PARTITION_INFORMATION_MBR = SET_PARTITION_INFORMATION;

alias SET_PARTITION_INFORMATION_GPT = PARTITION_INFORMATION_GPT;

record Struct__SET_PARTITION_INFORMATION_EX (
    PartitionStyle : PARTITION_STYLE,
    unnamed_field1 : AUnionType,
);

alias SET_PARTITION_INFORMATION_EX = Struct__SET_PARTITION_INFORMATION_EX;

alias PSET_PARTITION_INFORMATION_EX = Pointer[Struct__SET_PARTITION_INFORMATION_EX];

record Struct__CREATE_DISK_GPT (
    DiskId : GUID,
    MaxPartitionCount : CULong,
);

alias CREATE_DISK_GPT = Struct__CREATE_DISK_GPT;

alias PCREATE_DISK_GPT = Pointer[Struct__CREATE_DISK_GPT];

record Struct__CREATE_DISK_MBR (
    Signature : CULong,
);

alias CREATE_DISK_MBR = Struct__CREATE_DISK_MBR;

alias PCREATE_DISK_MBR = Pointer[Struct__CREATE_DISK_MBR];

record Struct__CREATE_DISK (
    PartitionStyle : PARTITION_STYLE,
    unnamed_field1 : AUnionType,
);

alias CREATE_DISK = Struct__CREATE_DISK;

alias PCREATE_DISK = Pointer[Struct__CREATE_DISK];

record Struct__GET_LENGTH_INFORMATION (
    Length : LARGE_INTEGER,
);

alias GET_LENGTH_INFORMATION = Struct__GET_LENGTH_INFORMATION;

alias PGET_LENGTH_INFORMATION = Pointer[Struct__GET_LENGTH_INFORMATION];

record Struct__PARTITION_INFORMATION_EX (
    PartitionStyle : PARTITION_STYLE,
    StartingOffset : LARGE_INTEGER,
    PartitionLength : LARGE_INTEGER,
    PartitionNumber : CULong,
    RewritePartition : CUChar,
    unnamed_field5 : AUnionType,
);

alias PARTITION_INFORMATION_EX = Struct__PARTITION_INFORMATION_EX;

alias PPARTITION_INFORMATION_EX = Pointer[Struct__PARTITION_INFORMATION_EX];

record Struct__DRIVE_LAYOUT_INFORMATION_GPT (
    DiskId : GUID,
    StartingUsableOffset : LARGE_INTEGER,
    UsableLength : LARGE_INTEGER,
    MaxPartitionCount : CULong,
);

alias DRIVE_LAYOUT_INFORMATION_GPT = Struct__DRIVE_LAYOUT_INFORMATION_GPT;

alias PDRIVE_LAYOUT_INFORMATION_GPT = Pointer[Struct__DRIVE_LAYOUT_INFORMATION_GPT];

record Struct__DRIVE_LAYOUT_INFORMATION_MBR (
    Signature : CULong,
);

alias DRIVE_LAYOUT_INFORMATION_MBR = Struct__DRIVE_LAYOUT_INFORMATION_MBR;

alias PDRIVE_LAYOUT_INFORMATION_MBR = Pointer[Struct__DRIVE_LAYOUT_INFORMATION_MBR];

record Struct__DRIVE_LAYOUT_INFORMATION_EX (
    PartitionStyle : CULong,
    PartitionCount : CULong,
    unnamed_field2 : AUnionType,
    PartitionEntry : Array[PARTITION_INFORMATION_EX,1],
);

alias DRIVE_LAYOUT_INFORMATION_EX = Struct__DRIVE_LAYOUT_INFORMATION_EX;

alias PDRIVE_LAYOUT_INFORMATION_EX = Pointer[Struct__DRIVE_LAYOUT_INFORMATION_EX];

alias DetectNone = 0;
alias DetectInt13 = 1;
alias DetectExInt13 = 2;

alias DETECTION_TYPE = Int;

record Struct__DISK_INT13_INFO (
    DriveSelect : UShort,
    MaxCylinders : CULong,
    SectorsPerTrack : UShort,
    MaxHeads : UShort,
    NumberDrives : UShort,
);

alias DISK_INT13_INFO = Struct__DISK_INT13_INFO;

alias PDISK_INT13_INFO = Pointer[Struct__DISK_INT13_INFO];

record Struct__DISK_EX_INT13_INFO (
    ExBufferSize : UShort,
    ExFlags : UShort,
    ExCylinders : CULong,
    ExHeads : CULong,
    ExSectorsPerTrack : CULong,
    ExSectorsPerDrive : UInt64,
    ExSectorSize : UShort,
    ExReserved : UShort,
);

alias DISK_EX_INT13_INFO = Struct__DISK_EX_INT13_INFO;

alias PDISK_EX_INT13_INFO = Pointer[Struct__DISK_EX_INT13_INFO];

record Struct__DISK_DETECTION_INFO (
    SizeOfDetectInfo : CULong,
    DetectionType : DETECTION_TYPE,
    unnamed_field2 : AUnionType,
);

alias DISK_DETECTION_INFO = Struct__DISK_DETECTION_INFO;

alias PDISK_DETECTION_INFO = Pointer[Struct__DISK_DETECTION_INFO];

record Struct__DISK_PARTITION_INFO (
    SizeOfPartitionInfo : CULong,
    PartitionStyle : PARTITION_STYLE,
    unnamed_field2 : AUnionType,
);

alias DISK_PARTITION_INFO = Struct__DISK_PARTITION_INFO;

alias PDISK_PARTITION_INFO = Pointer[Struct__DISK_PARTITION_INFO];

record Struct__DISK_GEOMETRY_EX (
    Geometry : DISK_GEOMETRY,
    DiskSize : LARGE_INTEGER,
    Data : Array[CUChar,1],
);

alias DISK_GEOMETRY_EX = Struct__DISK_GEOMETRY_EX;

alias PDISK_GEOMETRY_EX = Pointer[Struct__DISK_GEOMETRY_EX];

record Struct__DISK_CONTROLLER_NUMBER (
    ControllerNumber : CULong,
    DiskNumber : CULong,
);

alias DISK_CONTROLLER_NUMBER = Struct__DISK_CONTROLLER_NUMBER;

alias PDISK_CONTROLLER_NUMBER = Pointer[Struct__DISK_CONTROLLER_NUMBER];

alias EqualPriority = 0;
alias KeepPrefetchedData = 1;
alias KeepReadData = 2;

alias DISK_CACHE_RETENTION_PRIORITY = Int;

record Struct__DISK_CACHE_INFORMATION (
    ParametersSavable : CUChar,
    ReadCacheEnabled : CUChar,
    WriteCacheEnabled : CUChar,
    ReadRetentionPriority : DISK_CACHE_RETENTION_PRIORITY,
    WriteRetentionPriority : DISK_CACHE_RETENTION_PRIORITY,
    DisablePrefetchTransferLength : UShort,
    PrefetchScalar : CUChar,
    unnamed_field7 : AUnionType,
);

alias DISK_CACHE_INFORMATION = Struct__DISK_CACHE_INFORMATION;

alias PDISK_CACHE_INFORMATION = Pointer[Struct__DISK_CACHE_INFORMATION];

record Struct__DISK_GROW_PARTITION (
    PartitionNumber : CULong,
    BytesToGrow : LARGE_INTEGER,
);

alias DISK_GROW_PARTITION = Struct__DISK_GROW_PARTITION;

alias PDISK_GROW_PARTITION = Pointer[Struct__DISK_GROW_PARTITION];

record Struct__HISTOGRAM_BUCKET (
    Reads : CULong,
    Writes : CULong,
);

alias HISTOGRAM_BUCKET = Struct__HISTOGRAM_BUCKET;

alias PHISTOGRAM_BUCKET = Pointer[Struct__HISTOGRAM_BUCKET];

record Struct__DISK_HISTOGRAM (
    DiskSize : LARGE_INTEGER,
    Start : LARGE_INTEGER,
    End : LARGE_INTEGER,
    Average : LARGE_INTEGER,
    AverageRead : LARGE_INTEGER,
    AverageWrite : LARGE_INTEGER,
    Granularity : CULong,
    Size : CULong,
    ReadCount : CULong,
    WriteCount : CULong,
    Histogram : PHISTOGRAM_BUCKET,
);

alias DISK_HISTOGRAM = Struct__DISK_HISTOGRAM;

alias PDISK_HISTOGRAM = Pointer[Struct__DISK_HISTOGRAM];

record Struct__DISK_PERFORMANCE (
    BytesRead : LARGE_INTEGER,
    BytesWritten : LARGE_INTEGER,
    ReadTime : LARGE_INTEGER,
    WriteTime : LARGE_INTEGER,
    IdleTime : LARGE_INTEGER,
    ReadCount : CULong,
    WriteCount : CULong,
    QueueDepth : CULong,
    SplitCount : CULong,
    QueryTime : LARGE_INTEGER,
    StorageDeviceNumber : CULong,
    StorageManagerName : Array[UShort,8],
);

alias DISK_PERFORMANCE = Struct__DISK_PERFORMANCE;

alias PDISK_PERFORMANCE = Pointer[Struct__DISK_PERFORMANCE];

record Struct__DISK_RECORD (
    ByteOffset : LARGE_INTEGER,
    StartTime : LARGE_INTEGER,
    EndTime : LARGE_INTEGER,
    VirtualAddress : PVOID,
    NumberOfBytes : CULong,
    DeviceNumber : CUChar,
    ReadRequest : CUChar,
);

alias DISK_RECORD = Struct__DISK_RECORD;

alias PDISK_RECORD = Pointer[Struct__DISK_RECORD];

record Struct__DISK_LOGGING (
    Function : CUChar,
    BufferAddress : PVOID,
    BufferSize : CULong,
);

alias DISK_LOGGING = Struct__DISK_LOGGING;

alias PDISK_LOGGING = Pointer[Struct__DISK_LOGGING];

alias RequestSize = 0;
alias RequestLocation = 1;

alias BIN_TYPES = Int;

record Struct__BIN_RANGE (
    StartValue : LARGE_INTEGER,
    Length : LARGE_INTEGER,
);

alias BIN_RANGE = Struct__BIN_RANGE;

alias PBIN_RANGE = Pointer[Struct__BIN_RANGE];

record Struct__PERF_BIN (
    NumberOfBins : CULong,
    TypeOfBin : CULong,
    BinsRanges : Array[BIN_RANGE,1],
);

alias PERF_BIN = Struct__PERF_BIN;

alias PPERF_BIN = Pointer[Struct__PERF_BIN];

record Struct__BIN_COUNT (
    BinRange : BIN_RANGE,
    BinCount : CULong,
);

alias BIN_COUNT = Struct__BIN_COUNT;

alias PBIN_COUNT = Pointer[Struct__BIN_COUNT];

record Struct__BIN_RESULTS (
    NumberOfBins : CULong,
    BinCounts : Array[BIN_COUNT,1],
);

alias BIN_RESULTS = Struct__BIN_RESULTS;

alias PBIN_RESULTS = Pointer[Struct__BIN_RESULTS];

record Struct__GETVERSIONINPARAMS (
    bVersion : CUChar,
    bRevision : CUChar,
    bReserved : CUChar,
    bIDEDeviceMap : CUChar,
    fCapabilities : CULong,
    dwReserved : Array[CULong,4],
);

alias GETVERSIONINPARAMS = Struct__GETVERSIONINPARAMS;

alias PGETVERSIONINPARAMS = Pointer[Struct__GETVERSIONINPARAMS];

alias LPGETVERSIONINPARAMS = Pointer[Struct__GETVERSIONINPARAMS];

record Struct__IDEREGS (
    bFeaturesReg : CUChar,
    bSectorCountReg : CUChar,
    bSectorNumberReg : CUChar,
    bCylLowReg : CUChar,
    bCylHighReg : CUChar,
    bDriveHeadReg : CUChar,
    bCommandReg : CUChar,
    bReserved : CUChar,
);

alias IDEREGS = Struct__IDEREGS;

alias PIDEREGS = Pointer[Struct__IDEREGS];

alias LPIDEREGS = Pointer[Struct__IDEREGS];

record Struct__SENDCMDINPARAMS (
    cBufferSize : CULong,
    irDriveRegs : IDEREGS,
    bDriveNumber : CUChar,
    bReserved : Array[CUChar,3],
    dwReserved : Array[CULong,4],
    bBuffer : Array[CUChar,1],
);

alias SENDCMDINPARAMS = Struct__SENDCMDINPARAMS;

alias PSENDCMDINPARAMS = Pointer[Struct__SENDCMDINPARAMS];

alias LPSENDCMDINPARAMS = Pointer[Struct__SENDCMDINPARAMS];

record Struct__DRIVERSTATUS (
    bDriverError : CUChar,
    bIDEError : CUChar,
    bReserved : Array[CUChar,2],
    dwReserved : Array[CULong,2],
);

alias DRIVERSTATUS = Struct__DRIVERSTATUS;

alias PDRIVERSTATUS = Pointer[Struct__DRIVERSTATUS];

alias LPDRIVERSTATUS = Pointer[Struct__DRIVERSTATUS];

record Struct__SENDCMDOUTPARAMS (
    cBufferSize : CULong,
    DriverStatus : DRIVERSTATUS,
    bBuffer : Array[CUChar,1],
);

alias SENDCMDOUTPARAMS = Struct__SENDCMDOUTPARAMS;

alias PSENDCMDOUTPARAMS = Pointer[Struct__SENDCMDOUTPARAMS];

alias LPSENDCMDOUTPARAMS = Pointer[Struct__SENDCMDOUTPARAMS];

alias AllElements = 0;
alias ChangerTransport = 1;
alias ChangerSlot = 2;
alias ChangerIEPort = 3;
alias ChangerDrive = 4;
alias ChangerDoor = 5;
alias ChangerKeypad = 6;
alias ChangerMaxElement = 7;

alias ELEMENT_TYPE = Int;

alias PELEMENT_TYPE = Pointer[Int];

record Struct__CHANGER_ELEMENT (
    ElementType : ELEMENT_TYPE,
    ElementAddress : CULong,
);

alias CHANGER_ELEMENT = Struct__CHANGER_ELEMENT;

alias PCHANGER_ELEMENT = Pointer[Struct__CHANGER_ELEMENT];

record Struct__CHANGER_ELEMENT_LIST (
    Element : CHANGER_ELEMENT,
    NumberOfElements : CULong,
);

alias CHANGER_ELEMENT_LIST = Struct__CHANGER_ELEMENT_LIST;

alias PCHANGER_ELEMENT_LIST = Pointer[Struct__CHANGER_ELEMENT_LIST];

record Struct__GET_CHANGER_PARAMETERS (
    Size : CULong,
    NumberTransportElements : UShort,
    NumberStorageElements : UShort,
    NumberCleanerSlots : UShort,
    NumberIEElements : UShort,
    NumberDataTransferElements : UShort,
    NumberOfDoors : UShort,
    FirstSlotNumber : UShort,
    FirstDriveNumber : UShort,
    FirstTransportNumber : UShort,
    FirstIEPortNumber : UShort,
    FirstCleanerSlotAddress : UShort,
    MagazineSize : UShort,
    DriveCleanTimeout : CULong,
    Features0 : CULong,
    Features1 : CULong,
    MoveFromTransport : CUChar,
    MoveFromSlot : CUChar,
    MoveFromIePort : CUChar,
    MoveFromDrive : CUChar,
    ExchangeFromTransport : CUChar,
    ExchangeFromSlot : CUChar,
    ExchangeFromIePort : CUChar,
    ExchangeFromDrive : CUChar,
    LockUnlockCapabilities : CUChar,
    PositionCapabilities : CUChar,
    Reserved1 : Array[CUChar,2],
    Reserved2 : Array[CULong,2],
);

alias GET_CHANGER_PARAMETERS = Struct__GET_CHANGER_PARAMETERS;

alias PGET_CHANGER_PARAMETERS = Pointer[Struct__GET_CHANGER_PARAMETERS];

record Struct__CHANGER_PRODUCT_DATA (
    VendorId : Array[CUChar,8],
    ProductId : Array[CUChar,16],
    Revision : Array[CUChar,4],
    SerialNumber : Array[CUChar,32],
    DeviceType : CUChar,
);

alias CHANGER_PRODUCT_DATA = Struct__CHANGER_PRODUCT_DATA;

alias PCHANGER_PRODUCT_DATA = Pointer[Struct__CHANGER_PRODUCT_DATA];

record Struct__CHANGER_SET_ACCESS (
    Element : CHANGER_ELEMENT,
    Control : CULong,
);

alias CHANGER_SET_ACCESS = Struct__CHANGER_SET_ACCESS;

alias PCHANGER_SET_ACCESS = Pointer[Struct__CHANGER_SET_ACCESS];

record Struct__CHANGER_READ_ELEMENT_STATUS (
    ElementList : CHANGER_ELEMENT_LIST,
    VolumeTagInfo : CUChar,
);

alias CHANGER_READ_ELEMENT_STATUS = Struct__CHANGER_READ_ELEMENT_STATUS;

alias PCHANGER_READ_ELEMENT_STATUS = Pointer[Struct__CHANGER_READ_ELEMENT_STATUS];

record Struct__CHANGER_ELEMENT_STATUS (
    Element : CHANGER_ELEMENT,
    SrcElementAddress : CHANGER_ELEMENT,
    Flags : CULong,
    ExceptionCode : CULong,
    TargetId : CUChar,
    Lun : CUChar,
    Reserved : UShort,
    PrimaryVolumeID : Array[CUChar,36],
    AlternateVolumeID : Array[CUChar,36],
);

alias CHANGER_ELEMENT_STATUS = Struct__CHANGER_ELEMENT_STATUS;

alias PCHANGER_ELEMENT_STATUS = Pointer[Struct__CHANGER_ELEMENT_STATUS];

record Struct__CHANGER_ELEMENT_STATUS_EX (
    Element : CHANGER_ELEMENT,
    SrcElementAddress : CHANGER_ELEMENT,
    Flags : CULong,
    ExceptionCode : CULong,
    TargetId : CUChar,
    Lun : CUChar,
    Reserved : UShort,
    PrimaryVolumeID : Array[CUChar,36],
    AlternateVolumeID : Array[CUChar,36],
    VendorIdentification : Array[CUChar,8],
    ProductIdentification : Array[CUChar,16],
    SerialNumber : Array[CUChar,32],
);

alias CHANGER_ELEMENT_STATUS_EX = Struct__CHANGER_ELEMENT_STATUS_EX;

alias PCHANGER_ELEMENT_STATUS_EX = Pointer[Struct__CHANGER_ELEMENT_STATUS_EX];

record Struct__CHANGER_INITIALIZE_ELEMENT_STATUS (
    ElementList : CHANGER_ELEMENT_LIST,
    BarCodeScan : CUChar,
);

alias CHANGER_INITIALIZE_ELEMENT_STATUS = Struct__CHANGER_INITIALIZE_ELEMENT_STATUS;

alias PCHANGER_INITIALIZE_ELEMENT_STATUS = Pointer[Struct__CHANGER_INITIALIZE_ELEMENT_STATUS];

record Struct__CHANGER_SET_POSITION (
    Transport : CHANGER_ELEMENT,
    Destination : CHANGER_ELEMENT,
    Flip : CUChar,
);

alias CHANGER_SET_POSITION = Struct__CHANGER_SET_POSITION;

alias PCHANGER_SET_POSITION = Pointer[Struct__CHANGER_SET_POSITION];

record Struct__CHANGER_EXCHANGE_MEDIUM (
    Transport : CHANGER_ELEMENT,
    Source : CHANGER_ELEMENT,
    Destination1 : CHANGER_ELEMENT,
    Destination2 : CHANGER_ELEMENT,
    Flip1 : CUChar,
    Flip2 : CUChar,
);

alias CHANGER_EXCHANGE_MEDIUM = Struct__CHANGER_EXCHANGE_MEDIUM;

alias PCHANGER_EXCHANGE_MEDIUM = Pointer[Struct__CHANGER_EXCHANGE_MEDIUM];

record Struct__CHANGER_MOVE_MEDIUM (
    Transport : CHANGER_ELEMENT,
    Source : CHANGER_ELEMENT,
    Destination : CHANGER_ELEMENT,
    Flip : CUChar,
);

alias CHANGER_MOVE_MEDIUM = Struct__CHANGER_MOVE_MEDIUM;

alias PCHANGER_MOVE_MEDIUM = Pointer[Struct__CHANGER_MOVE_MEDIUM];

record Struct__CHANGER_SEND_VOLUME_TAG_INFORMATION (
    StartingElement : CHANGER_ELEMENT,
    ActionCode : CULong,
    VolumeIDTemplate : Array[CUChar,40],
);

alias CHANGER_SEND_VOLUME_TAG_INFORMATION = Struct__CHANGER_SEND_VOLUME_TAG_INFORMATION;

alias PCHANGER_SEND_VOLUME_TAG_INFORMATION = Pointer[Struct__CHANGER_SEND_VOLUME_TAG_INFORMATION];

record Struct__READ_ELEMENT_ADDRESS_INFO (
    NumberOfElements : CULong,
    ElementStatus : Array[CHANGER_ELEMENT_STATUS,1],
);

alias READ_ELEMENT_ADDRESS_INFO = Struct__READ_ELEMENT_ADDRESS_INFO;

alias PREAD_ELEMENT_ADDRESS_INFO = Pointer[Struct__READ_ELEMENT_ADDRESS_INFO];

alias DeviceProblemNone = 0;
alias DeviceProblemHardware = 1;
alias DeviceProblemCHMError = 2;
alias DeviceProblemDoorOpen = 3;
alias DeviceProblemCalibrationError = 4;
alias DeviceProblemTargetFailure = 5;
alias DeviceProblemCHMMoveError = 6;
alias DeviceProblemCHMZeroError = 7;
alias DeviceProblemCartridgeInsertError = 8;
alias DeviceProblemPositionError = 9;
alias DeviceProblemSensorError = 10;
alias DeviceProblemCartridgeEjectError = 11;
alias DeviceProblemGripperError = 12;
alias DeviceProblemDriveError = 13;

alias CHANGER_DEVICE_PROBLEM_TYPE = Int;

alias PCHANGER_DEVICE_PROBLEM_TYPE = Pointer[Int];

record Struct__PATHNAME_BUFFER (
    PathNameLength : CULong,
    Name : Array[UShort,1],
);

alias PATHNAME_BUFFER = Struct__PATHNAME_BUFFER;

alias PPATHNAME_BUFFER = Pointer[Struct__PATHNAME_BUFFER];

record Struct__FSCTL_QUERY_FAT_BPB_BUFFER (
    First0x24BytesOfBootSector : Array[CUChar,36],
);

alias FSCTL_QUERY_FAT_BPB_BUFFER = Struct__FSCTL_QUERY_FAT_BPB_BUFFER;

alias PFSCTL_QUERY_FAT_BPB_BUFFER = Pointer[Struct__FSCTL_QUERY_FAT_BPB_BUFFER];

record UnnamedStruct36 (
    VolumeSerialNumber : LARGE_INTEGER,
    NumberSectors : LARGE_INTEGER,
    TotalClusters : LARGE_INTEGER,
    FreeClusters : LARGE_INTEGER,
    TotalReserved : LARGE_INTEGER,
    BytesPerSector : CULong,
    BytesPerCluster : CULong,
    BytesPerFileRecordSegment : CULong,
    ClustersPerFileRecordSegment : CULong,
    MftValidDataLength : LARGE_INTEGER,
    MftStartLcn : LARGE_INTEGER,
    Mft2StartLcn : LARGE_INTEGER,
    MftZoneStart : LARGE_INTEGER,
    MftZoneEnd : LARGE_INTEGER,
);

alias NTFS_VOLUME_DATA_BUFFER = UnnamedStruct36;

alias PNTFS_VOLUME_DATA_BUFFER = Pointer[UnnamedStruct36];

record UnnamedStruct37 (
    ByteCount : CULong,
    MajorVersion : UShort,
    MinorVersion : UShort,
);

alias NTFS_EXTENDED_VOLUME_DATA = UnnamedStruct37;

alias PNTFS_EXTENDED_VOLUME_DATA = Pointer[UnnamedStruct37];

record UnnamedStruct38 (
    StartingLcn : LARGE_INTEGER,
);

alias STARTING_LCN_INPUT_BUFFER = UnnamedStruct38;

alias PSTARTING_LCN_INPUT_BUFFER = Pointer[UnnamedStruct38];

record UnnamedStruct39 (
    StartingLcn : LARGE_INTEGER,
    BitmapSize : LARGE_INTEGER,
    Buffer : Array[CUChar,1],
);

alias VOLUME_BITMAP_BUFFER = UnnamedStruct39;

alias PVOLUME_BITMAP_BUFFER = Pointer[UnnamedStruct39];

record UnnamedStruct40 (
    StartingVcn : LARGE_INTEGER,
);

alias STARTING_VCN_INPUT_BUFFER = UnnamedStruct40;

alias PSTARTING_VCN_INPUT_BUFFER = Pointer[UnnamedStruct40];

record Struct_RETRIEVAL_POINTERS_BUFFER (
    ExtentCount : CULong,
    StartingVcn : LARGE_INTEGER,
    Extents : Array[UnnamedRecord9,1],
);

record UnnamedRecord9 (
    NextVcn : LARGE_INTEGER,
    Lcn : LARGE_INTEGER,
);

alias RETRIEVAL_POINTERS_BUFFER = Struct_RETRIEVAL_POINTERS_BUFFER;

alias PRETRIEVAL_POINTERS_BUFFER = Pointer[Struct_RETRIEVAL_POINTERS_BUFFER];

record UnnamedStruct41 (
    FileReferenceNumber : LARGE_INTEGER,
);

alias NTFS_FILE_RECORD_INPUT_BUFFER = UnnamedStruct41;

alias PNTFS_FILE_RECORD_INPUT_BUFFER = Pointer[UnnamedStruct41];

record UnnamedStruct42 (
    FileReferenceNumber : LARGE_INTEGER,
    FileRecordLength : CULong,
    FileRecordBuffer : Array[CUChar,1],
);

alias NTFS_FILE_RECORD_OUTPUT_BUFFER = UnnamedStruct42;

alias PNTFS_FILE_RECORD_OUTPUT_BUFFER = Pointer[UnnamedStruct42];

record UnnamedStruct43 (
    FileHandle : HANDLE,
    StartingVcn : LARGE_INTEGER,
    StartingLcn : LARGE_INTEGER,
    ClusterCount : CULong,
);

alias MOVE_FILE_DATA = UnnamedStruct43;

alias PMOVE_FILE_DATA = Pointer[UnnamedStruct43];

record Struct__MOVE_FILE_DATA32 (
    FileHandle : UInt,
    StartingVcn : LARGE_INTEGER,
    StartingLcn : LARGE_INTEGER,
    ClusterCount : CULong,
);

alias MOVE_FILE_DATA32 = Struct__MOVE_FILE_DATA32;

alias PMOVE_FILE_DATA32 = Pointer[Struct__MOVE_FILE_DATA32];

record UnnamedStruct44 (
    Restart : CULong,
    Sid : SID,
);

alias FIND_BY_SID_DATA = UnnamedStruct44;

alias PFIND_BY_SID_DATA = Pointer[UnnamedStruct44];

record UnnamedStruct45 (
    NextEntryOffset : CULong,
    FileIndex : CULong,
    FileNameLength : CULong,
    FileName : Array[UShort,1],
);

alias FIND_BY_SID_OUTPUT = UnnamedStruct45;

alias PFIND_BY_SID_OUTPUT = Pointer[UnnamedStruct45];

record UnnamedStruct46 (
    StartFileReferenceNumber : UInt64,
    LowUsn : Int64,
    HighUsn : Int64,
);

alias MFT_ENUM_DATA = UnnamedStruct46;

alias PMFT_ENUM_DATA = Pointer[UnnamedStruct46];

record UnnamedStruct47 (
    MaximumSize : UInt64,
    AllocationDelta : UInt64,
);

alias CREATE_USN_JOURNAL_DATA = UnnamedStruct47;

alias PCREATE_USN_JOURNAL_DATA = Pointer[UnnamedStruct47];

record UnnamedStruct48 (
    StartUsn : Int64,
    ReasonMask : CULong,
    ReturnOnlyOnClose : CULong,
    Timeout : UInt64,
    BytesToWaitFor : UInt64,
    UsnJournalID : UInt64,
);

alias READ_USN_JOURNAL_DATA = UnnamedStruct48;

alias PREAD_USN_JOURNAL_DATA = Pointer[UnnamedStruct48];

record UnnamedStruct49 (
    RecordLength : CULong,
    MajorVersion : UShort,
    MinorVersion : UShort,
    FileReferenceNumber : UInt64,
    ParentFileReferenceNumber : UInt64,
    Usn : Int64,
    TimeStamp : LARGE_INTEGER,
    Reason : CULong,
    SourceInfo : CULong,
    SecurityId : CULong,
    FileAttributes : CULong,
    FileNameLength : UShort,
    FileNameOffset : UShort,
    FileName : Array[UShort,1],
);

alias USN_RECORD = UnnamedStruct49;

alias PUSN_RECORD = Pointer[UnnamedStruct49];

record UnnamedStruct50 (
    UsnJournalID : UInt64,
    FirstUsn : Int64,
    NextUsn : Int64,
    LowestValidUsn : Int64,
    MaxUsn : Int64,
    MaximumSize : UInt64,
    AllocationDelta : UInt64,
);

alias USN_JOURNAL_DATA = UnnamedStruct50;

alias PUSN_JOURNAL_DATA = Pointer[UnnamedStruct50];

record UnnamedStruct51 (
    UsnJournalID : UInt64,
    DeleteFlags : CULong,
);

alias DELETE_USN_JOURNAL_DATA = UnnamedStruct51;

alias PDELETE_USN_JOURNAL_DATA = Pointer[UnnamedStruct51];

record UnnamedStruct52 (
    UsnSourceInfo : CULong,
    VolumeHandle : HANDLE,
    HandleInfo : CULong,
);

alias MARK_HANDLE_INFO = UnnamedStruct52;

alias PMARK_HANDLE_INFO = Pointer[UnnamedStruct52];

record UnnamedStruct53 (
    UsnSourceInfo : CULong,
    VolumeHandle : UInt,
    HandleInfo : CULong,
);

alias MARK_HANDLE_INFO32 = UnnamedStruct53;

alias PMARK_HANDLE_INFO32 = Pointer[UnnamedStruct53];

record UnnamedStruct54 (
    DesiredAccess : CULong,
    SecurityIds : Array[CULong,1],
);

alias BULK_SECURITY_TEST_DATA = UnnamedStruct54;

alias PBULK_SECURITY_TEST_DATA = Pointer[UnnamedStruct54];

record Struct__FILE_PREFETCH (
    Type : CULong,
    Count : CULong,
    Prefetch : Array[UInt64,1],
);

alias FILE_PREFETCH = Struct__FILE_PREFETCH;

alias PFILE_PREFETCH = Pointer[Struct__FILE_PREFETCH];

record Struct__FILESYSTEM_STATISTICS (
    FileSystemType : UShort,
    Version : UShort,
    SizeOfCompleteStructure : CULong,
    UserFileReads : CULong,
    UserFileReadBytes : CULong,
    UserDiskReads : CULong,
    UserFileWrites : CULong,
    UserFileWriteBytes : CULong,
    UserDiskWrites : CULong,
    MetaDataReads : CULong,
    MetaDataReadBytes : CULong,
    MetaDataDiskReads : CULong,
    MetaDataWrites : CULong,
    MetaDataWriteBytes : CULong,
    MetaDataDiskWrites : CULong,
);

alias FILESYSTEM_STATISTICS = Struct__FILESYSTEM_STATISTICS;

alias PFILESYSTEM_STATISTICS = Pointer[Struct__FILESYSTEM_STATISTICS];

record Struct__FAT_STATISTICS (
    CreateHits : CULong,
    SuccessfulCreates : CULong,
    FailedCreates : CULong,
    NonCachedReads : CULong,
    NonCachedReadBytes : CULong,
    NonCachedWrites : CULong,
    NonCachedWriteBytes : CULong,
    NonCachedDiskReads : CULong,
    NonCachedDiskWrites : CULong,
);

alias FAT_STATISTICS = Struct__FAT_STATISTICS;

alias PFAT_STATISTICS = Pointer[Struct__FAT_STATISTICS];

record Struct__EXFAT_STATISTICS (
    CreateHits : CULong,
    SuccessfulCreates : CULong,
    FailedCreates : CULong,
    NonCachedReads : CULong,
    NonCachedReadBytes : CULong,
    NonCachedWrites : CULong,
    NonCachedWriteBytes : CULong,
    NonCachedDiskReads : CULong,
    NonCachedDiskWrites : CULong,
);

alias EXFAT_STATISTICS = Struct__EXFAT_STATISTICS;

alias PEXFAT_STATISTICS = Pointer[Struct__EXFAT_STATISTICS];

record Struct__NTFS_STATISTICS (
    LogFileFullExceptions : CULong,
    OtherExceptions : CULong,
    MftReads : CULong,
    MftReadBytes : CULong,
    MftWrites : CULong,
    MftWriteBytes : CULong,
    MftWritesUserLevel : UnnamedRecord10,
    MftWritesFlushForLogFileFull : UShort,
    MftWritesLazyWriter : UShort,
    MftWritesUserRequest : UShort,
    Mft2Writes : CULong,
    Mft2WriteBytes : CULong,
    Mft2WritesUserLevel : UnnamedRecord11,
    Mft2WritesFlushForLogFileFull : UShort,
    Mft2WritesLazyWriter : UShort,
    Mft2WritesUserRequest : UShort,
    RootIndexReads : CULong,
    RootIndexReadBytes : CULong,
    RootIndexWrites : CULong,
    RootIndexWriteBytes : CULong,
    BitmapReads : CULong,
    BitmapReadBytes : CULong,
    BitmapWrites : CULong,
    BitmapWriteBytes : CULong,
    BitmapWritesFlushForLogFileFull : UShort,
    BitmapWritesLazyWriter : UShort,
    BitmapWritesUserRequest : UShort,
    BitmapWritesUserLevel : UnnamedRecord12,
    MftBitmapReads : CULong,
    MftBitmapReadBytes : CULong,
    MftBitmapWrites : CULong,
    MftBitmapWriteBytes : CULong,
    MftBitmapWritesFlushForLogFileFull : UShort,
    MftBitmapWritesLazyWriter : UShort,
    MftBitmapWritesUserRequest : UShort,
    MftBitmapWritesUserLevel : UnnamedRecord13,
    UserIndexReads : CULong,
    UserIndexReadBytes : CULong,
    UserIndexWrites : CULong,
    UserIndexWriteBytes : CULong,
    LogFileReads : CULong,
    LogFileReadBytes : CULong,
    LogFileWrites : CULong,
    LogFileWriteBytes : CULong,
    Allocate : UnnamedRecord14,
);

record UnnamedRecord10 (
    Write : UShort,
    Create : UShort,
    SetInfo : UShort,
    Flush : UShort,
);

record UnnamedRecord11 (
    Write : UShort,
    Create : UShort,
    SetInfo : UShort,
    Flush : UShort,
);

record UnnamedRecord12 (
    Write : UShort,
    Create : UShort,
    SetInfo : UShort,
);

record UnnamedRecord13 (
    Write : UShort,
    Create : UShort,
    SetInfo : UShort,
    Flush : UShort,
);

record UnnamedRecord14 (
    Calls : CULong,
    Clusters : CULong,
    Hints : CULong,
    RunsReturned : CULong,
    HintsHonored : CULong,
    HintsClusters : CULong,
    Cache : CULong,
    CacheClusters : CULong,
    CacheMiss : CULong,
    CacheMissClusters : CULong,
);

alias NTFS_STATISTICS = Struct__NTFS_STATISTICS;

alias PNTFS_STATISTICS = Pointer[Struct__NTFS_STATISTICS];

record Struct__FILE_OBJECTID_BUFFER (
    ObjectId : Array[CUChar,16],
    unnamed_field1 : AUnionType,
);

alias FILE_OBJECTID_BUFFER = Struct__FILE_OBJECTID_BUFFER;

alias PFILE_OBJECTID_BUFFER = Pointer[Struct__FILE_OBJECTID_BUFFER];

record Struct__FILE_SET_SPARSE_BUFFER (
    SetSparse : CUChar,
);

alias FILE_SET_SPARSE_BUFFER = Struct__FILE_SET_SPARSE_BUFFER;

alias PFILE_SET_SPARSE_BUFFER = Pointer[Struct__FILE_SET_SPARSE_BUFFER];

record Struct__FILE_ZERO_DATA_INFORMATION (
    FileOffset : LARGE_INTEGER,
    BeyondFinalZero : LARGE_INTEGER,
);

alias FILE_ZERO_DATA_INFORMATION = Struct__FILE_ZERO_DATA_INFORMATION;

alias PFILE_ZERO_DATA_INFORMATION = Pointer[Struct__FILE_ZERO_DATA_INFORMATION];

record Struct__FILE_ALLOCATED_RANGE_BUFFER (
    FileOffset : LARGE_INTEGER,
    Length : LARGE_INTEGER,
);

alias FILE_ALLOCATED_RANGE_BUFFER = Struct__FILE_ALLOCATED_RANGE_BUFFER;

alias PFILE_ALLOCATED_RANGE_BUFFER = Pointer[Struct__FILE_ALLOCATED_RANGE_BUFFER];

record Struct__ENCRYPTION_BUFFER (
    EncryptionOperation : CULong,
    Private : Array[CUChar,1],
);

alias ENCRYPTION_BUFFER = Struct__ENCRYPTION_BUFFER;

alias PENCRYPTION_BUFFER = Pointer[Struct__ENCRYPTION_BUFFER];

record Struct__DECRYPTION_STATUS_BUFFER (
    NoEncryptedStreams : CUChar,
);

alias DECRYPTION_STATUS_BUFFER = Struct__DECRYPTION_STATUS_BUFFER;

alias PDECRYPTION_STATUS_BUFFER = Pointer[Struct__DECRYPTION_STATUS_BUFFER];

record Struct__REQUEST_RAW_ENCRYPTED_DATA (
    FileOffset : Int64,
    Length : CULong,
);

alias REQUEST_RAW_ENCRYPTED_DATA = Struct__REQUEST_RAW_ENCRYPTED_DATA;

alias PREQUEST_RAW_ENCRYPTED_DATA = Pointer[Struct__REQUEST_RAW_ENCRYPTED_DATA];

record Struct__ENCRYPTED_DATA_INFO (
    StartingFileOffset : UInt64,
    OutputBufferOffset : CULong,
    BytesWithinFileSize : CULong,
    BytesWithinValidDataLength : CULong,
    CompressionFormat : UShort,
    DataUnitShift : CUChar,
    ChunkShift : CUChar,
    ClusterShift : CUChar,
    EncryptionFormat : CUChar,
    NumberOfDataBlocks : UShort,
    DataBlockSize : Array[CULong,1],
);

alias ENCRYPTED_DATA_INFO = Struct__ENCRYPTED_DATA_INFO;

alias PENCRYPTED_DATA_INFO = Pointer[ENCRYPTED_DATA_INFO];

record Struct__PLEX_READ_DATA_REQUEST (
    ByteOffset : LARGE_INTEGER,
    ByteLength : CULong,
    PlexNumber : CULong,
);

alias PLEX_READ_DATA_REQUEST = Struct__PLEX_READ_DATA_REQUEST;

alias PPLEX_READ_DATA_REQUEST = Pointer[Struct__PLEX_READ_DATA_REQUEST];

record Struct__SI_COPYFILE (
    SourceFileNameLength : CULong,
    DestinationFileNameLength : CULong,
    Flags : CULong,
    FileNameBuffer : Array[UShort,1],
);

alias SI_COPYFILE = Struct__SI_COPYFILE;

alias PSI_COPYFILE = Pointer[Struct__SI_COPYFILE];

record Struct__DISK_EXTENT (
    DiskNumber : CULong,
    StartingOffset : LARGE_INTEGER,
    ExtentLength : LARGE_INTEGER,
);

alias DISK_EXTENT = Struct__DISK_EXTENT;

alias PDISK_EXTENT = Pointer[Struct__DISK_EXTENT];

record Struct__VOLUME_DISK_EXTENTS (
    NumberOfDiskExtents : CULong,
    Extents : Array[DISK_EXTENT,1],
);

alias VOLUME_DISK_EXTENTS = Struct__VOLUME_DISK_EXTENTS;

alias PVOLUME_DISK_EXTENTS = Pointer[Struct__VOLUME_DISK_EXTENTS];

alias UWORD = UShort;

record Struct__SCARD_IO_REQUEST (
    dwProtocol : CULong,
    cbPciLength : CULong,
);

alias SCARD_IO_REQUEST = Struct__SCARD_IO_REQUEST;

alias PSCARD_IO_REQUEST = Pointer[Struct__SCARD_IO_REQUEST];

alias LPSCARD_IO_REQUEST = Pointer[Struct__SCARD_IO_REQUEST];

alias LPCSCARD_IO_REQUEST = Pointer[SCARD_IO_REQUEST];

record UnnamedStruct55 (
    bCla : CUChar,
    bIns : CUChar,
    bP1 : CUChar,
    bP2 : CUChar,
    bP3 : CUChar,
);

alias SCARD_T0_COMMAND = UnnamedStruct55;

alias LPSCARD_T0_COMMAND = Pointer[UnnamedStruct55];

record UnnamedStruct56 (
    ioRequest : SCARD_IO_REQUEST,
    bSw1 : CUChar,
    bSw2 : CUChar,
    unnamed_field3 : AUnionType,
);

alias SCARD_T0_REQUEST = UnnamedStruct56;

alias PSCARD_T0_REQUEST = Pointer[SCARD_T0_REQUEST];

alias LPSCARD_T0_REQUEST = Pointer[SCARD_T0_REQUEST];

record UnnamedStruct57 (
    ioRequest : SCARD_IO_REQUEST,
);

alias SCARD_T1_REQUEST = UnnamedStruct57;

alias PSCARD_T1_REQUEST = Pointer[SCARD_T1_REQUEST];

alias LPSCARD_T1_REQUEST = Pointer[SCARD_T1_REQUEST];

alias LPCBYTE = Pointer[CUChar];

external g_rgSCardT0Pci : SCARD_IO_REQUEST;

external g_rgSCardT1Pci : SCARD_IO_REQUEST;

external g_rgSCardRawPci : SCARD_IO_REQUEST;

alias SCARDCONTEXT = UInt64;

alias PSCARDCONTEXT = Pointer[UInt64];

alias LPSCARDCONTEXT = Pointer[UInt64];

alias SCARDHANDLE = UInt64;

alias PSCARDHANDLE = Pointer[UInt64];

alias LPSCARDHANDLE = Pointer[UInt64];

external SCardEstablishContext(
    dwScope : CULong,
    pvReserved1 : LPCVOID,
    pvReserved2 : LPCVOID,
    phContext : LPSCARDCONTEXT) CLong;

external SCardReleaseContext(
    hContext : UInt64) CLong;

external SCardIsValidContext(
    hContext : UInt64) CLong;

external SCardListReaderGroupsA(
    hContext : UInt64,
    mszGroups : LPSTR,
    pcchGroups : LPDWORD) CLong;

external SCardListReaderGroupsW(
    hContext : UInt64,
    mszGroups : LPWSTR,
    pcchGroups : LPDWORD) CLong;

external SCardListReadersA(
    hContext : UInt64,
    mszGroups : LPCSTR,
    mszReaders : LPSTR,
    pcchReaders : LPDWORD) CLong;

external SCardListReadersW(
    hContext : UInt64,
    mszGroups : LPCWSTR,
    mszReaders : LPWSTR,
    pcchReaders : LPDWORD) CLong;

external SCardListCardsA(
    hContext : UInt64,
    pbAtr : LPCBYTE,
    rgquidInterfaces : LPCGUID,
    cguidInterfaceCount : CULong,
    mszCards : LPSTR,
    pcchCards : LPDWORD) CLong;

external SCardListCardsW(
    hContext : UInt64,
    pbAtr : LPCBYTE,
    rgquidInterfaces : LPCGUID,
    cguidInterfaceCount : CULong,
    mszCards : LPWSTR,
    pcchCards : LPDWORD) CLong;

external SCardListInterfacesA(
    hContext : UInt64,
    szCard : LPCSTR,
    pguidInterfaces : LPGUID,
    pcguidInterfaces : LPDWORD) CLong;

external SCardListInterfacesW(
    hContext : UInt64,
    szCard : LPCWSTR,
    pguidInterfaces : LPGUID,
    pcguidInterfaces : LPDWORD) CLong;

external SCardGetProviderIdA(
    hContext : UInt64,
    szCard : LPCSTR,
    pguidProviderId : LPGUID) CLong;

external SCardGetProviderIdW(
    hContext : UInt64,
    szCard : LPCWSTR,
    pguidProviderId : LPGUID) CLong;

external SCardGetCardTypeProviderNameA(
    hContext : UInt64,
    szCardName : LPCSTR,
    dwProviderId : CULong,
    szProvider : LPSTR,
    pcchProvider : LPDWORD) CLong;

external SCardGetCardTypeProviderNameW(
    hContext : UInt64,
    szCardName : LPCWSTR,
    dwProviderId : CULong,
    szProvider : LPWSTR,
    pcchProvider : LPDWORD) CLong;

external SCardIntroduceReaderGroupA(
    hContext : UInt64,
    szGroupName : LPCSTR) CLong;

external SCardIntroduceReaderGroupW(
    hContext : UInt64,
    szGroupName : LPCWSTR) CLong;

external SCardForgetReaderGroupA(
    hContext : UInt64,
    szGroupName : LPCSTR) CLong;

external SCardForgetReaderGroupW(
    hContext : UInt64,
    szGroupName : LPCWSTR) CLong;

external SCardIntroduceReaderA(
    hContext : UInt64,
    szReaderName : LPCSTR,
    szDeviceName : LPCSTR) CLong;

external SCardIntroduceReaderW(
    hContext : UInt64,
    szReaderName : LPCWSTR,
    szDeviceName : LPCWSTR) CLong;

external SCardForgetReaderA(
    hContext : UInt64,
    szReaderName : LPCSTR) CLong;

external SCardForgetReaderW(
    hContext : UInt64,
    szReaderName : LPCWSTR) CLong;

external SCardAddReaderToGroupA(
    hContext : UInt64,
    szReaderName : LPCSTR,
    szGroupName : LPCSTR) CLong;

external SCardAddReaderToGroupW(
    hContext : UInt64,
    szReaderName : LPCWSTR,
    szGroupName : LPCWSTR) CLong;

external SCardRemoveReaderFromGroupA(
    hContext : UInt64,
    szReaderName : LPCSTR,
    szGroupName : LPCSTR) CLong;

external SCardRemoveReaderFromGroupW(
    hContext : UInt64,
    szReaderName : LPCWSTR,
    szGroupName : LPCWSTR) CLong;

external SCardIntroduceCardTypeA(
    hContext : UInt64,
    szCardName : LPCSTR,
    pguidPrimaryProvider : LPCGUID,
    rgguidInterfaces : LPCGUID,
    dwInterfaceCount : CULong,
    pbAtr : LPCBYTE,
    pbAtrMask : LPCBYTE,
    cbAtrLen : CULong) CLong;

external SCardIntroduceCardTypeW(
    hContext : UInt64,
    szCardName : LPCWSTR,
    pguidPrimaryProvider : LPCGUID,
    rgguidInterfaces : LPCGUID,
    dwInterfaceCount : CULong,
    pbAtr : LPCBYTE,
    pbAtrMask : LPCBYTE,
    cbAtrLen : CULong) CLong;

external SCardSetCardTypeProviderNameA(
    hContext : UInt64,
    szCardName : LPCSTR,
    dwProviderId : CULong,
    szProvider : LPCSTR) CLong;

external SCardSetCardTypeProviderNameW(
    hContext : UInt64,
    szCardName : LPCWSTR,
    dwProviderId : CULong,
    szProvider : LPCWSTR) CLong;

external SCardForgetCardTypeA(
    hContext : UInt64,
    szCardName : LPCSTR) CLong;

external SCardForgetCardTypeW(
    hContext : UInt64,
    szCardName : LPCWSTR) CLong;

external SCardFreeMemory(
    hContext : UInt64,
    pvMem : LPCVOID) CLong;

external SCardAccessStartedEvent() HANDLE;

external SCardReleaseStartedEvent();

record UnnamedStruct58 (
    szReader : LPCSTR,
    pvUserData : LPVOID,
    dwCurrentState : CULong,
    dwEventState : CULong,
    cbAtr : CULong,
    rgbAtr : Array[CUChar,36],
);

alias SCARD_READERSTATEA = UnnamedStruct58;

alias PSCARD_READERSTATEA = Pointer[UnnamedStruct58];

alias LPSCARD_READERSTATEA = Pointer[UnnamedStruct58];

record UnnamedStruct59 (
    szReader : LPCWSTR,
    pvUserData : LPVOID,
    dwCurrentState : CULong,
    dwEventState : CULong,
    cbAtr : CULong,
    rgbAtr : Array[CUChar,36],
);

alias SCARD_READERSTATEW = UnnamedStruct59;

alias PSCARD_READERSTATEW = Pointer[UnnamedStruct59];

alias LPSCARD_READERSTATEW = Pointer[UnnamedStruct59];

alias SCARD_READERSTATE = SCARD_READERSTATEA;

alias PSCARD_READERSTATE = PSCARD_READERSTATEA;

alias LPSCARD_READERSTATE = LPSCARD_READERSTATEA;

external SCardLocateCardsA(
    hContext : UInt64,
    mszCards : LPCSTR,
    rgReaderStates : LPSCARD_READERSTATEA,
    cReaders : CULong) CLong;

external SCardLocateCardsW(
    hContext : UInt64,
    mszCards : LPCWSTR,
    rgReaderStates : LPSCARD_READERSTATEW,
    cReaders : CULong) CLong;

record Struct__SCARD_ATRMASK (
    cbAtr : CULong,
    rgbAtr : Array[CUChar,36],
    rgbMask : Array[CUChar,36],
);

alias SCARD_ATRMASK = Struct__SCARD_ATRMASK;

alias PSCARD_ATRMASK = Pointer[Struct__SCARD_ATRMASK];

alias LPSCARD_ATRMASK = Pointer[Struct__SCARD_ATRMASK];

external SCardLocateCardsByATRA(
    hContext : UInt64,
    rgAtrMasks : LPSCARD_ATRMASK,
    cAtrs : CULong,
    rgReaderStates : LPSCARD_READERSTATEA,
    cReaders : CULong) CLong;

external SCardLocateCardsByATRW(
    hContext : UInt64,
    rgAtrMasks : LPSCARD_ATRMASK,
    cAtrs : CULong,
    rgReaderStates : LPSCARD_READERSTATEW,
    cReaders : CULong) CLong;

external SCardGetStatusChangeA(
    hContext : UInt64,
    dwTimeout : CULong,
    rgReaderStates : LPSCARD_READERSTATEA,
    cReaders : CULong) CLong;

external SCardGetStatusChangeW(
    hContext : UInt64,
    dwTimeout : CULong,
    rgReaderStates : LPSCARD_READERSTATEW,
    cReaders : CULong) CLong;

external SCardCancel(
    hContext : UInt64) CLong;

external SCardConnectA(
    hContext : UInt64,
    szReader : LPCSTR,
    dwShareMode : CULong,
    dwPreferredProtocols : CULong,
    phCard : LPSCARDHANDLE,
    pdwActiveProtocol : LPDWORD) CLong;

external SCardConnectW(
    hContext : UInt64,
    szReader : LPCWSTR,
    dwShareMode : CULong,
    dwPreferredProtocols : CULong,
    phCard : LPSCARDHANDLE,
    pdwActiveProtocol : LPDWORD) CLong;

external SCardReconnect(
    hCard : UInt64,
    dwShareMode : CULong,
    dwPreferredProtocols : CULong,
    dwInitialization : CULong,
    pdwActiveProtocol : LPDWORD) CLong;

external SCardDisconnect(
    hCard : UInt64,
    dwDisposition : CULong) CLong;

external SCardBeginTransaction(
    hCard : UInt64) CLong;

external SCardEndTransaction(
    hCard : UInt64,
    dwDisposition : CULong) CLong;

external SCardCancelTransaction(
    hCard : UInt64) CLong;

external SCardState(
    hCard : UInt64,
    pdwState : LPDWORD,
    pdwProtocol : LPDWORD,
    pbAtr : LPBYTE,
    pcbAtrLen : LPDWORD) CLong;

external SCardStatusA(
    hCard : UInt64,
    szReaderName : LPSTR,
    pcchReaderLen : LPDWORD,
    pdwState : LPDWORD,
    pdwProtocol : LPDWORD,
    pbAtr : LPBYTE,
    pcbAtrLen : LPDWORD) CLong;

external SCardStatusW(
    hCard : UInt64,
    szReaderName : LPWSTR,
    pcchReaderLen : LPDWORD,
    pdwState : LPDWORD,
    pdwProtocol : LPDWORD,
    pbAtr : LPBYTE,
    pcbAtrLen : LPDWORD) CLong;

external SCardTransmit(
    hCard : UInt64,
    pioSendPci : LPCSCARD_IO_REQUEST,
    pbSendBuffer : LPCBYTE,
    cbSendLength : CULong,
    pioRecvPci : LPSCARD_IO_REQUEST,
    pbRecvBuffer : LPBYTE,
    pcbRecvLength : LPDWORD) CLong;

external SCardControl(
    hCard : UInt64,
    dwControlCode : CULong,
    lpInBuffer : LPCVOID,
    nInBufferSize : CULong,
    lpOutBuffer : LPVOID,
    nOutBufferSize : CULong,
    lpBytesReturned : LPDWORD) CLong;

external SCardGetAttrib(
    hCard : UInt64,
    dwAttrId : CULong,
    pbAttr : LPBYTE,
    pcbAttrLen : LPDWORD) CLong;

external SCardSetAttrib(
    hCard : UInt64,
    dwAttrId : CULong,
    pbAttr : LPCBYTE,
    cbAttrLen : CULong) CLong;

alias LPOCNCONNPROCA = CCodePointer[(UInt64,Pointer[CChar],Pointer[CChar],RawPointer),(UInt64)];

alias LPOCNCONNPROCW = CCodePointer[(UInt64,Pointer[UShort],Pointer[UShort],RawPointer),(UInt64)];

alias LPOCNCHKPROC = CCodePointer[(UInt64,UInt64,RawPointer),(Int)];

alias LPOCNDSCPROC = CCodePointer[(UInt64,UInt64,RawPointer),()];

record UnnamedStruct60 (
    dwStructSize : CULong,
    lpstrGroupNames : LPSTR,
    nMaxGroupNames : CULong,
    rgguidInterfaces : LPCGUID,
    cguidInterfaces : CULong,
    lpstrCardNames : LPSTR,
    nMaxCardNames : CULong,
    lpfnCheck : LPOCNCHKPROC,
    lpfnConnect : LPOCNCONNPROCA,
    lpfnDisconnect : LPOCNDSCPROC,
    pvUserData : LPVOID,
    dwShareMode : CULong,
    dwPreferredProtocols : CULong,
);

alias OPENCARD_SEARCH_CRITERIAA = UnnamedStruct60;

alias POPENCARD_SEARCH_CRITERIAA = Pointer[UnnamedStruct60];

alias LPOPENCARD_SEARCH_CRITERIAA = Pointer[UnnamedStruct60];

record UnnamedStruct61 (
    dwStructSize : CULong,
    lpstrGroupNames : LPWSTR,
    nMaxGroupNames : CULong,
    rgguidInterfaces : LPCGUID,
    cguidInterfaces : CULong,
    lpstrCardNames : LPWSTR,
    nMaxCardNames : CULong,
    lpfnCheck : LPOCNCHKPROC,
    lpfnConnect : LPOCNCONNPROCW,
    lpfnDisconnect : LPOCNDSCPROC,
    pvUserData : LPVOID,
    dwShareMode : CULong,
    dwPreferredProtocols : CULong,
);

alias OPENCARD_SEARCH_CRITERIAW = UnnamedStruct61;

alias POPENCARD_SEARCH_CRITERIAW = Pointer[UnnamedStruct61];

alias LPOPENCARD_SEARCH_CRITERIAW = Pointer[UnnamedStruct61];

alias OPENCARD_SEARCH_CRITERIA = OPENCARD_SEARCH_CRITERIAA;

alias POPENCARD_SEARCH_CRITERIA = POPENCARD_SEARCH_CRITERIAA;

alias LPOPENCARD_SEARCH_CRITERIA = LPOPENCARD_SEARCH_CRITERIAA;

record UnnamedStruct62 (
    dwStructSize : CULong,
    hSCardContext : UInt64,
    hwndOwner : HWND,
    dwFlags : CULong,
    lpstrTitle : LPCSTR,
    lpstrSearchDesc : LPCSTR,
    hIcon : HICON,
    pOpenCardSearchCriteria : POPENCARD_SEARCH_CRITERIAA,
    lpfnConnect : LPOCNCONNPROCA,
    pvUserData : LPVOID,
    dwShareMode : CULong,
    dwPreferredProtocols : CULong,
    lpstrRdr : LPSTR,
    nMaxRdr : CULong,
    lpstrCard : LPSTR,
    nMaxCard : CULong,
    dwActiveProtocol : CULong,
    hCardHandle : UInt64,
);

alias OPENCARDNAME_EXA = UnnamedStruct62;

alias POPENCARDNAME_EXA = Pointer[UnnamedStruct62];

alias LPOPENCARDNAME_EXA = Pointer[UnnamedStruct62];

record UnnamedStruct63 (
    dwStructSize : CULong,
    hSCardContext : UInt64,
    hwndOwner : HWND,
    dwFlags : CULong,
    lpstrTitle : LPCWSTR,
    lpstrSearchDesc : LPCWSTR,
    hIcon : HICON,
    pOpenCardSearchCriteria : POPENCARD_SEARCH_CRITERIAW,
    lpfnConnect : LPOCNCONNPROCW,
    pvUserData : LPVOID,
    dwShareMode : CULong,
    dwPreferredProtocols : CULong,
    lpstrRdr : LPWSTR,
    nMaxRdr : CULong,
    lpstrCard : LPWSTR,
    nMaxCard : CULong,
    dwActiveProtocol : CULong,
    hCardHandle : UInt64,
);

alias OPENCARDNAME_EXW = UnnamedStruct63;

alias POPENCARDNAME_EXW = Pointer[UnnamedStruct63];

alias LPOPENCARDNAME_EXW = Pointer[UnnamedStruct63];

alias OPENCARDNAME_EX = OPENCARDNAME_EXA;

alias POPENCARDNAME_EX = POPENCARDNAME_EXA;

alias LPOPENCARDNAME_EX = LPOPENCARDNAME_EXA;

external SCardUIDlgSelectCardA(
    argument0 : LPOPENCARDNAME_EXA) CLong;

external SCardUIDlgSelectCardW(
    argument0 : LPOPENCARDNAME_EXW) CLong;

record UnnamedStruct64 (
    dwStructSize : CULong,
    hwndOwner : HWND,
    hSCardContext : UInt64,
    lpstrGroupNames : LPSTR,
    nMaxGroupNames : CULong,
    lpstrCardNames : LPSTR,
    nMaxCardNames : CULong,
    rgguidInterfaces : LPCGUID,
    cguidInterfaces : CULong,
    lpstrRdr : LPSTR,
    nMaxRdr : CULong,
    lpstrCard : LPSTR,
    nMaxCard : CULong,
    lpstrTitle : LPCSTR,
    dwFlags : CULong,
    pvUserData : LPVOID,
    dwShareMode : CULong,
    dwPreferredProtocols : CULong,
    dwActiveProtocol : CULong,
    lpfnConnect : LPOCNCONNPROCA,
    lpfnCheck : LPOCNCHKPROC,
    lpfnDisconnect : LPOCNDSCPROC,
    hCardHandle : UInt64,
);

alias OPENCARDNAMEA = UnnamedStruct64;

alias POPENCARDNAMEA = Pointer[UnnamedStruct64];

alias LPOPENCARDNAMEA = Pointer[UnnamedStruct64];

record UnnamedStruct65 (
    dwStructSize : CULong,
    hwndOwner : HWND,
    hSCardContext : UInt64,
    lpstrGroupNames : LPWSTR,
    nMaxGroupNames : CULong,
    lpstrCardNames : LPWSTR,
    nMaxCardNames : CULong,
    rgguidInterfaces : LPCGUID,
    cguidInterfaces : CULong,
    lpstrRdr : LPWSTR,
    nMaxRdr : CULong,
    lpstrCard : LPWSTR,
    nMaxCard : CULong,
    lpstrTitle : LPCWSTR,
    dwFlags : CULong,
    pvUserData : LPVOID,
    dwShareMode : CULong,
    dwPreferredProtocols : CULong,
    dwActiveProtocol : CULong,
    lpfnConnect : LPOCNCONNPROCW,
    lpfnCheck : LPOCNCHKPROC,
    lpfnDisconnect : LPOCNDSCPROC,
    hCardHandle : UInt64,
);

alias OPENCARDNAMEW = UnnamedStruct65;

alias POPENCARDNAMEW = Pointer[UnnamedStruct65];

alias LPOPENCARDNAMEW = Pointer[UnnamedStruct65];

alias OPENCARDNAME = OPENCARDNAMEA;

alias POPENCARDNAME = POPENCARDNAMEA;

alias LPOPENCARDNAME = LPOPENCARDNAMEA;

external GetOpenCardNameA(
    argument0 : LPOPENCARDNAMEA) CLong;

external GetOpenCardNameW(
    argument0 : LPOPENCARDNAMEW) CLong;

external SCardDlgExtendedError() CLong;

alias HPROPSHEETPAGE = OpaquePointer;

alias LPFNPSPCALLBACKA = CCodePointer[(Pointer[Struct_HWND__],UInt,Pointer[Struct__PROPSHEETPAGEA]),(UInt)];

alias LPFNPSPCALLBACKW = CCodePointer[(Pointer[Struct_HWND__],UInt,Pointer[Struct__PROPSHEETPAGEW]),(UInt)];

alias PROPSHEETPAGE_RESOURCE = LPCDLGTEMPLATE;

record Struct__PROPSHEETPAGEA_V1 (
    dwSize : CULong,
    dwFlags : CULong,
    hInstance : HINSTANCE,
    unnamed_field3 : AUnionType,
    unnamed_field4 : AUnionType,
    pszTitle : LPCSTR,
    pfnDlgProc : DLGPROC,
    lParam : Int64,
    pfnCallback : LPFNPSPCALLBACKA,
    pcRefParent : Pointer[UInt],
);

alias PROPSHEETPAGEA_V1 = Struct__PROPSHEETPAGEA_V1;

alias LPPROPSHEETPAGEA_V1 = Pointer[Struct__PROPSHEETPAGEA_V1];

alias LPCPROPSHEETPAGEA_V1 = Pointer[PROPSHEETPAGEA_V1];

record Struct__PROPSHEETPAGEA_V2 (
    dwSize : CULong,
    dwFlags : CULong,
    hInstance : HINSTANCE,
    unnamed_field3 : AUnionType,
    unnamed_field4 : AUnionType,
    pszTitle : LPCSTR,
    pfnDlgProc : DLGPROC,
    lParam : Int64,
    pfnCallback : LPFNPSPCALLBACKA,
    pcRefParent : Pointer[UInt],
    pszHeaderTitle : LPCSTR,
    pszHeaderSubTitle : LPCSTR,
);

alias PROPSHEETPAGEA_V2 = Struct__PROPSHEETPAGEA_V2;

alias LPPROPSHEETPAGEA_V2 = Pointer[Struct__PROPSHEETPAGEA_V2];

alias LPCPROPSHEETPAGEA_V2 = Pointer[PROPSHEETPAGEA_V2];

record Struct__PROPSHEETPAGEA (
    dwSize : CULong,
    dwFlags : CULong,
    hInstance : HINSTANCE,
    unnamed_field3 : AUnionType,
    unnamed_field4 : AUnionType,
    pszTitle : LPCSTR,
    pfnDlgProc : DLGPROC,
    lParam : Int64,
    pfnCallback : LPFNPSPCALLBACKA,
    pcRefParent : Pointer[UInt],
    pszHeaderTitle : LPCSTR,
    pszHeaderSubTitle : LPCSTR,
    hActCtx : HANDLE,
);

alias PROPSHEETPAGEA_V3 = Struct__PROPSHEETPAGEA;

alias LPPROPSHEETPAGEA_V3 = Pointer[Struct__PROPSHEETPAGEA];

alias LPCPROPSHEETPAGEA_V3 = Pointer[PROPSHEETPAGEA_V3];

record Struct__PROPSHEETPAGEW_V1 (
    dwSize : CULong,
    dwFlags : CULong,
    hInstance : HINSTANCE,
    unnamed_field3 : AUnionType,
    unnamed_field4 : AUnionType,
    pszTitle : LPCWSTR,
    pfnDlgProc : DLGPROC,
    lParam : Int64,
    pfnCallback : LPFNPSPCALLBACKW,
    pcRefParent : Pointer[UInt],
);

alias PROPSHEETPAGEW_V1 = Struct__PROPSHEETPAGEW_V1;

alias LPPROPSHEETPAGEW_V1 = Pointer[Struct__PROPSHEETPAGEW_V1];

alias LPCPROPSHEETPAGEW_V1 = Pointer[PROPSHEETPAGEW_V1];

record Struct__PROPSHEETPAGEW_V2 (
    dwSize : CULong,
    dwFlags : CULong,
    hInstance : HINSTANCE,
    unnamed_field3 : AUnionType,
    unnamed_field4 : AUnionType,
    pszTitle : LPCWSTR,
    pfnDlgProc : DLGPROC,
    lParam : Int64,
    pfnCallback : LPFNPSPCALLBACKW,
    pcRefParent : Pointer[UInt],
    pszHeaderTitle : LPCWSTR,
    pszHeaderSubTitle : LPCWSTR,
);

alias PROPSHEETPAGEW_V2 = Struct__PROPSHEETPAGEW_V2;

alias LPPROPSHEETPAGEW_V2 = Pointer[Struct__PROPSHEETPAGEW_V2];

alias LPCPROPSHEETPAGEW_V2 = Pointer[PROPSHEETPAGEW_V2];

record Struct__PROPSHEETPAGEW (
    dwSize : CULong,
    dwFlags : CULong,
    hInstance : HINSTANCE,
    unnamed_field3 : AUnionType,
    unnamed_field4 : AUnionType,
    pszTitle : LPCWSTR,
    pfnDlgProc : DLGPROC,
    lParam : Int64,
    pfnCallback : LPFNPSPCALLBACKW,
    pcRefParent : Pointer[UInt],
    pszHeaderTitle : LPCWSTR,
    pszHeaderSubTitle : LPCWSTR,
    hActCtx : HANDLE,
);

alias PROPSHEETPAGEW_V3 = Struct__PROPSHEETPAGEW;

alias LPPROPSHEETPAGEW_V3 = Pointer[Struct__PROPSHEETPAGEW];

alias LPCPROPSHEETPAGEW_V3 = Pointer[PROPSHEETPAGEW_V3];

alias PROPSHEETPAGEA_LATEST = PROPSHEETPAGEA_V3;

alias PROPSHEETPAGEW_LATEST = PROPSHEETPAGEW_V3;

alias LPPROPSHEETPAGEA_LATEST = LPPROPSHEETPAGEA_V3;

alias LPPROPSHEETPAGEW_LATEST = LPPROPSHEETPAGEW_V3;

alias LPCPROPSHEETPAGEA_LATEST = LPCPROPSHEETPAGEA_V3;

alias LPCPROPSHEETPAGEW_LATEST = LPCPROPSHEETPAGEW_V3;

alias PROPSHEETPAGEA = PROPSHEETPAGEA_V3;

alias PROPSHEETPAGEW = PROPSHEETPAGEW_V3;

alias LPPROPSHEETPAGEA = LPPROPSHEETPAGEA_V3;

alias LPPROPSHEETPAGEW = LPPROPSHEETPAGEW_V3;

alias LPCPROPSHEETPAGEA = LPCPROPSHEETPAGEA_V3;

alias LPCPROPSHEETPAGEW = LPCPROPSHEETPAGEW_V3;

alias PFNPROPSHEETCALLBACK = CCodePointer[(Pointer[Struct_HWND__],UInt,Int64),(Int)];

record Struct__PROPSHEETHEADERA (
    dwSize : CULong,
    dwFlags : CULong,
    hwndParent : HWND,
    hInstance : HINSTANCE,
    unnamed_field4 : AUnionType,
    pszCaption : LPCSTR,
    nPages : UInt,
    unnamed_field7 : AUnionType,
    unnamed_field8 : AUnionType,
    pfnCallback : PFNPROPSHEETCALLBACK,
    unnamed_field10 : AUnionType,
    hplWatermark : HPALETTE,
    unnamed_field12 : AUnionType,
);

alias PROPSHEETHEADERA = Struct__PROPSHEETHEADERA;

alias LPPROPSHEETHEADERA = Pointer[Struct__PROPSHEETHEADERA];

alias LPCPROPSHEETHEADERA = Pointer[PROPSHEETHEADERA];

record Struct__PROPSHEETHEADERW (
    dwSize : CULong,
    dwFlags : CULong,
    hwndParent : HWND,
    hInstance : HINSTANCE,
    unnamed_field4 : AUnionType,
    pszCaption : LPCWSTR,
    nPages : UInt,
    unnamed_field7 : AUnionType,
    unnamed_field8 : AUnionType,
    pfnCallback : PFNPROPSHEETCALLBACK,
    unnamed_field10 : AUnionType,
    hplWatermark : HPALETTE,
    unnamed_field12 : AUnionType,
);

alias PROPSHEETHEADERW = Struct__PROPSHEETHEADERW;

alias LPPROPSHEETHEADERW = Pointer[Struct__PROPSHEETHEADERW];

alias LPCPROPSHEETHEADERW = Pointer[PROPSHEETHEADERW];

external CreatePropertySheetPageA(
    constPropSheetPagePointer : LPCPROPSHEETPAGEA) HPROPSHEETPAGE;

external CreatePropertySheetPageW(
    constPropSheetPagePointer : LPCPROPSHEETPAGEW) HPROPSHEETPAGE;

external DestroyPropertySheetPage(
    argument0 : HPROPSHEETPAGE) Int;

external PropertySheetA(
    argument0 : LPCPROPSHEETHEADERA) Int64;

external PropertySheetW(
    argument0 : LPCPROPSHEETHEADERW) Int64;

alias LPFNADDPROPSHEETPAGE = CCodePointer[(OpaquePointer,Int64),(Int)];

alias LPFNADDPROPSHEETPAGES = CCodePointer[(RawPointer,CCodePointer[(OpaquePointer,Int64),(Int)],Int64),(Int)];

record Struct__PSHNOTIFY (
    hdr : NMHDR,
    lParam : Int64,
);

alias PSHNOTIFY = Struct__PSHNOTIFY;

alias LPPSHNOTIFY = Pointer[Struct__PSHNOTIFY];

record Struct__PRINTER_INFO_1A (
    Flags : CULong,
    pDescription : LPSTR,
    pName : LPSTR,
    pComment : LPSTR,
);

alias PRINTER_INFO_1A = Struct__PRINTER_INFO_1A;

alias PPRINTER_INFO_1A = Pointer[Struct__PRINTER_INFO_1A];

alias LPPRINTER_INFO_1A = Pointer[Struct__PRINTER_INFO_1A];

record Struct__PRINTER_INFO_1W (
    Flags : CULong,
    pDescription : LPWSTR,
    pName : LPWSTR,
    pComment : LPWSTR,
);

alias PRINTER_INFO_1W = Struct__PRINTER_INFO_1W;

alias PPRINTER_INFO_1W = Pointer[Struct__PRINTER_INFO_1W];

alias LPPRINTER_INFO_1W = Pointer[Struct__PRINTER_INFO_1W];

alias PRINTER_INFO_1 = PRINTER_INFO_1A;

alias PPRINTER_INFO_1 = PPRINTER_INFO_1A;

alias LPPRINTER_INFO_1 = LPPRINTER_INFO_1A;

record Struct__PRINTER_INFO_2A (
    pServerName : LPSTR,
    pPrinterName : LPSTR,
    pShareName : LPSTR,
    pPortName : LPSTR,
    pDriverName : LPSTR,
    pComment : LPSTR,
    pLocation : LPSTR,
    pDevMode : LPDEVMODEA,
    pSepFile : LPSTR,
    pPrintProcessor : LPSTR,
    pDatatype : LPSTR,
    pParameters : LPSTR,
    pSecurityDescriptor : PSECURITY_DESCRIPTOR,
    Attributes : CULong,
    Priority : CULong,
    DefaultPriority : CULong,
    StartTime : CULong,
    UntilTime : CULong,
    Status : CULong,
    cJobs : CULong,
    AveragePPM : CULong,
);

alias PRINTER_INFO_2A = Struct__PRINTER_INFO_2A;

alias PPRINTER_INFO_2A = Pointer[Struct__PRINTER_INFO_2A];

alias LPPRINTER_INFO_2A = Pointer[Struct__PRINTER_INFO_2A];

record Struct__PRINTER_INFO_2W (
    pServerName : LPWSTR,
    pPrinterName : LPWSTR,
    pShareName : LPWSTR,
    pPortName : LPWSTR,
    pDriverName : LPWSTR,
    pComment : LPWSTR,
    pLocation : LPWSTR,
    pDevMode : LPDEVMODEW,
    pSepFile : LPWSTR,
    pPrintProcessor : LPWSTR,
    pDatatype : LPWSTR,
    pParameters : LPWSTR,
    pSecurityDescriptor : PSECURITY_DESCRIPTOR,
    Attributes : CULong,
    Priority : CULong,
    DefaultPriority : CULong,
    StartTime : CULong,
    UntilTime : CULong,
    Status : CULong,
    cJobs : CULong,
    AveragePPM : CULong,
);

alias PRINTER_INFO_2W = Struct__PRINTER_INFO_2W;

alias PPRINTER_INFO_2W = Pointer[Struct__PRINTER_INFO_2W];

alias LPPRINTER_INFO_2W = Pointer[Struct__PRINTER_INFO_2W];

alias PRINTER_INFO_2 = PRINTER_INFO_2A;

alias PPRINTER_INFO_2 = PPRINTER_INFO_2A;

alias LPPRINTER_INFO_2 = LPPRINTER_INFO_2A;

record Struct__PRINTER_INFO_3 (
    pSecurityDescriptor : PSECURITY_DESCRIPTOR,
);

alias PRINTER_INFO_3 = Struct__PRINTER_INFO_3;

alias PPRINTER_INFO_3 = Pointer[Struct__PRINTER_INFO_3];

alias LPPRINTER_INFO_3 = Pointer[Struct__PRINTER_INFO_3];

record Struct__PRINTER_INFO_4A (
    pPrinterName : LPSTR,
    pServerName : LPSTR,
    Attributes : CULong,
);

alias PRINTER_INFO_4A = Struct__PRINTER_INFO_4A;

alias PPRINTER_INFO_4A = Pointer[Struct__PRINTER_INFO_4A];

alias LPPRINTER_INFO_4A = Pointer[Struct__PRINTER_INFO_4A];

record Struct__PRINTER_INFO_4W (
    pPrinterName : LPWSTR,
    pServerName : LPWSTR,
    Attributes : CULong,
);

alias PRINTER_INFO_4W = Struct__PRINTER_INFO_4W;

alias PPRINTER_INFO_4W = Pointer[Struct__PRINTER_INFO_4W];

alias LPPRINTER_INFO_4W = Pointer[Struct__PRINTER_INFO_4W];

alias PRINTER_INFO_4 = PRINTER_INFO_4A;

alias PPRINTER_INFO_4 = PPRINTER_INFO_4A;

alias LPPRINTER_INFO_4 = LPPRINTER_INFO_4A;

record Struct__PRINTER_INFO_5A (
    pPrinterName : LPSTR,
    pPortName : LPSTR,
    Attributes : CULong,
    DeviceNotSelectedTimeout : CULong,
    TransmissionRetryTimeout : CULong,
);

alias PRINTER_INFO_5A = Struct__PRINTER_INFO_5A;

alias PPRINTER_INFO_5A = Pointer[Struct__PRINTER_INFO_5A];

alias LPPRINTER_INFO_5A = Pointer[Struct__PRINTER_INFO_5A];

record Struct__PRINTER_INFO_5W (
    pPrinterName : LPWSTR,
    pPortName : LPWSTR,
    Attributes : CULong,
    DeviceNotSelectedTimeout : CULong,
    TransmissionRetryTimeout : CULong,
);

alias PRINTER_INFO_5W = Struct__PRINTER_INFO_5W;

alias PPRINTER_INFO_5W = Pointer[Struct__PRINTER_INFO_5W];

alias LPPRINTER_INFO_5W = Pointer[Struct__PRINTER_INFO_5W];

alias PRINTER_INFO_5 = PRINTER_INFO_5A;

alias PPRINTER_INFO_5 = PPRINTER_INFO_5A;

alias LPPRINTER_INFO_5 = LPPRINTER_INFO_5A;

record Struct__PRINTER_INFO_6 (
    dwStatus : CULong,
);

alias PRINTER_INFO_6 = Struct__PRINTER_INFO_6;

alias PPRINTER_INFO_6 = Pointer[Struct__PRINTER_INFO_6];

alias LPPRINTER_INFO_6 = Pointer[Struct__PRINTER_INFO_6];

record Struct__PRINTER_INFO_7A (
    pszObjectGUID : LPSTR,
    dwAction : CULong,
);

alias PRINTER_INFO_7A = Struct__PRINTER_INFO_7A;

alias PPRINTER_INFO_7A = Pointer[Struct__PRINTER_INFO_7A];

alias LPPRINTER_INFO_7A = Pointer[Struct__PRINTER_INFO_7A];

record Struct__PRINTER_INFO_7W (
    pszObjectGUID : LPWSTR,
    dwAction : CULong,
);

alias PRINTER_INFO_7W = Struct__PRINTER_INFO_7W;

alias PPRINTER_INFO_7W = Pointer[Struct__PRINTER_INFO_7W];

alias LPPRINTER_INFO_7W = Pointer[Struct__PRINTER_INFO_7W];

alias PRINTER_INFO_7 = PRINTER_INFO_7A;

alias PPRINTER_INFO_7 = PPRINTER_INFO_7A;

alias LPPRINTER_INFO_7 = LPPRINTER_INFO_7A;

record Struct__PRINTER_INFO_8A (
    pDevMode : LPDEVMODEA,
);

alias PRINTER_INFO_8A = Struct__PRINTER_INFO_8A;

alias PPRINTER_INFO_8A = Pointer[Struct__PRINTER_INFO_8A];

alias LPPRINTER_INFO_8A = Pointer[Struct__PRINTER_INFO_8A];

record Struct__PRINTER_INFO_8W (
    pDevMode : LPDEVMODEW,
);

alias PRINTER_INFO_8W = Struct__PRINTER_INFO_8W;

alias PPRINTER_INFO_8W = Pointer[Struct__PRINTER_INFO_8W];

alias LPPRINTER_INFO_8W = Pointer[Struct__PRINTER_INFO_8W];

alias PRINTER_INFO_8 = PRINTER_INFO_8A;

alias PPRINTER_INFO_8 = PPRINTER_INFO_8A;

alias LPPRINTER_INFO_8 = LPPRINTER_INFO_8A;

record Struct__PRINTER_INFO_9A (
    pDevMode : LPDEVMODEA,
);

alias PRINTER_INFO_9A = Struct__PRINTER_INFO_9A;

alias PPRINTER_INFO_9A = Pointer[Struct__PRINTER_INFO_9A];

alias LPPRINTER_INFO_9A = Pointer[Struct__PRINTER_INFO_9A];

record Struct__PRINTER_INFO_9W (
    pDevMode : LPDEVMODEW,
);

alias PRINTER_INFO_9W = Struct__PRINTER_INFO_9W;

alias PPRINTER_INFO_9W = Pointer[Struct__PRINTER_INFO_9W];

alias LPPRINTER_INFO_9W = Pointer[Struct__PRINTER_INFO_9W];

alias PRINTER_INFO_9 = PRINTER_INFO_9A;

alias PPRINTER_INFO_9 = PPRINTER_INFO_9A;

alias LPPRINTER_INFO_9 = LPPRINTER_INFO_9A;

record Struct__JOB_INFO_1A (
    JobId : CULong,
    pPrinterName : LPSTR,
    pMachineName : LPSTR,
    pUserName : LPSTR,
    pDocument : LPSTR,
    pDatatype : LPSTR,
    pStatus : LPSTR,
    Status : CULong,
    Priority : CULong,
    Position : CULong,
    TotalPages : CULong,
    PagesPrinted : CULong,
    Submitted : SYSTEMTIME,
);

alias JOB_INFO_1A = Struct__JOB_INFO_1A;

alias PJOB_INFO_1A = Pointer[Struct__JOB_INFO_1A];

alias LPJOB_INFO_1A = Pointer[Struct__JOB_INFO_1A];

record Struct__JOB_INFO_1W (
    JobId : CULong,
    pPrinterName : LPWSTR,
    pMachineName : LPWSTR,
    pUserName : LPWSTR,
    pDocument : LPWSTR,
    pDatatype : LPWSTR,
    pStatus : LPWSTR,
    Status : CULong,
    Priority : CULong,
    Position : CULong,
    TotalPages : CULong,
    PagesPrinted : CULong,
    Submitted : SYSTEMTIME,
);

alias JOB_INFO_1W = Struct__JOB_INFO_1W;

alias PJOB_INFO_1W = Pointer[Struct__JOB_INFO_1W];

alias LPJOB_INFO_1W = Pointer[Struct__JOB_INFO_1W];

alias JOB_INFO_1 = JOB_INFO_1A;

alias PJOB_INFO_1 = PJOB_INFO_1A;

alias LPJOB_INFO_1 = LPJOB_INFO_1A;

record Struct__JOB_INFO_2A (
    JobId : CULong,
    pPrinterName : LPSTR,
    pMachineName : LPSTR,
    pUserName : LPSTR,
    pDocument : LPSTR,
    pNotifyName : LPSTR,
    pDatatype : LPSTR,
    pPrintProcessor : LPSTR,
    pParameters : LPSTR,
    pDriverName : LPSTR,
    pDevMode : LPDEVMODEA,
    pStatus : LPSTR,
    pSecurityDescriptor : PSECURITY_DESCRIPTOR,
    Status : CULong,
    Priority : CULong,
    Position : CULong,
    StartTime : CULong,
    UntilTime : CULong,
    TotalPages : CULong,
    Size : CULong,
    Submitted : SYSTEMTIME,
    Time : CULong,
    PagesPrinted : CULong,
);

alias JOB_INFO_2A = Struct__JOB_INFO_2A;

alias PJOB_INFO_2A = Pointer[Struct__JOB_INFO_2A];

alias LPJOB_INFO_2A = Pointer[Struct__JOB_INFO_2A];

record Struct__JOB_INFO_2W (
    JobId : CULong,
    pPrinterName : LPWSTR,
    pMachineName : LPWSTR,
    pUserName : LPWSTR,
    pDocument : LPWSTR,
    pNotifyName : LPWSTR,
    pDatatype : LPWSTR,
    pPrintProcessor : LPWSTR,
    pParameters : LPWSTR,
    pDriverName : LPWSTR,
    pDevMode : LPDEVMODEW,
    pStatus : LPWSTR,
    pSecurityDescriptor : PSECURITY_DESCRIPTOR,
    Status : CULong,
    Priority : CULong,
    Position : CULong,
    StartTime : CULong,
    UntilTime : CULong,
    TotalPages : CULong,
    Size : CULong,
    Submitted : SYSTEMTIME,
    Time : CULong,
    PagesPrinted : CULong,
);

alias JOB_INFO_2W = Struct__JOB_INFO_2W;

alias PJOB_INFO_2W = Pointer[Struct__JOB_INFO_2W];

alias LPJOB_INFO_2W = Pointer[Struct__JOB_INFO_2W];

alias JOB_INFO_2 = JOB_INFO_2A;

alias PJOB_INFO_2 = PJOB_INFO_2A;

alias LPJOB_INFO_2 = LPJOB_INFO_2A;

record Struct__JOB_INFO_3 (
    JobId : CULong,
    NextJobId : CULong,
    Reserved : CULong,
);

alias JOB_INFO_3 = Struct__JOB_INFO_3;

alias PJOB_INFO_3 = Pointer[Struct__JOB_INFO_3];

alias LPJOB_INFO_3 = Pointer[Struct__JOB_INFO_3];

record Struct__ADDJOB_INFO_1A (
    Path : LPSTR,
    JobId : CULong,
);

alias ADDJOB_INFO_1A = Struct__ADDJOB_INFO_1A;

alias PADDJOB_INFO_1A = Pointer[Struct__ADDJOB_INFO_1A];

alias LPADDJOB_INFO_1A = Pointer[Struct__ADDJOB_INFO_1A];

record Struct__ADDJOB_INFO_1W (
    Path : LPWSTR,
    JobId : CULong,
);

alias ADDJOB_INFO_1W = Struct__ADDJOB_INFO_1W;

alias PADDJOB_INFO_1W = Pointer[Struct__ADDJOB_INFO_1W];

alias LPADDJOB_INFO_1W = Pointer[Struct__ADDJOB_INFO_1W];

alias ADDJOB_INFO_1 = ADDJOB_INFO_1A;

alias PADDJOB_INFO_1 = PADDJOB_INFO_1A;

alias LPADDJOB_INFO_1 = LPADDJOB_INFO_1A;

record Struct__DRIVER_INFO_1A (
    pName : LPSTR,
);

alias DRIVER_INFO_1A = Struct__DRIVER_INFO_1A;

alias PDRIVER_INFO_1A = Pointer[Struct__DRIVER_INFO_1A];

alias LPDRIVER_INFO_1A = Pointer[Struct__DRIVER_INFO_1A];

record Struct__DRIVER_INFO_1W (
    pName : LPWSTR,
);

alias DRIVER_INFO_1W = Struct__DRIVER_INFO_1W;

alias PDRIVER_INFO_1W = Pointer[Struct__DRIVER_INFO_1W];

alias LPDRIVER_INFO_1W = Pointer[Struct__DRIVER_INFO_1W];

alias DRIVER_INFO_1 = DRIVER_INFO_1A;

alias PDRIVER_INFO_1 = PDRIVER_INFO_1A;

alias LPDRIVER_INFO_1 = LPDRIVER_INFO_1A;

record Struct__DRIVER_INFO_2A (
    cVersion : CULong,
    pName : LPSTR,
    pEnvironment : LPSTR,
    pDriverPath : LPSTR,
    pDataFile : LPSTR,
    pConfigFile : LPSTR,
);

alias DRIVER_INFO_2A = Struct__DRIVER_INFO_2A;

alias PDRIVER_INFO_2A = Pointer[Struct__DRIVER_INFO_2A];

alias LPDRIVER_INFO_2A = Pointer[Struct__DRIVER_INFO_2A];

record Struct__DRIVER_INFO_2W (
    cVersion : CULong,
    pName : LPWSTR,
    pEnvironment : LPWSTR,
    pDriverPath : LPWSTR,
    pDataFile : LPWSTR,
    pConfigFile : LPWSTR,
);

alias DRIVER_INFO_2W = Struct__DRIVER_INFO_2W;

alias PDRIVER_INFO_2W = Pointer[Struct__DRIVER_INFO_2W];

alias LPDRIVER_INFO_2W = Pointer[Struct__DRIVER_INFO_2W];

alias DRIVER_INFO_2 = DRIVER_INFO_2A;

alias PDRIVER_INFO_2 = PDRIVER_INFO_2A;

alias LPDRIVER_INFO_2 = LPDRIVER_INFO_2A;

record Struct__DRIVER_INFO_3A (
    cVersion : CULong,
    pName : LPSTR,
    pEnvironment : LPSTR,
    pDriverPath : LPSTR,
    pDataFile : LPSTR,
    pConfigFile : LPSTR,
    pHelpFile : LPSTR,
    pDependentFiles : LPSTR,
    pMonitorName : LPSTR,
    pDefaultDataType : LPSTR,
);

alias DRIVER_INFO_3A = Struct__DRIVER_INFO_3A;

alias PDRIVER_INFO_3A = Pointer[Struct__DRIVER_INFO_3A];

alias LPDRIVER_INFO_3A = Pointer[Struct__DRIVER_INFO_3A];

record Struct__DRIVER_INFO_3W (
    cVersion : CULong,
    pName : LPWSTR,
    pEnvironment : LPWSTR,
    pDriverPath : LPWSTR,
    pDataFile : LPWSTR,
    pConfigFile : LPWSTR,
    pHelpFile : LPWSTR,
    pDependentFiles : LPWSTR,
    pMonitorName : LPWSTR,
    pDefaultDataType : LPWSTR,
);

alias DRIVER_INFO_3W = Struct__DRIVER_INFO_3W;

alias PDRIVER_INFO_3W = Pointer[Struct__DRIVER_INFO_3W];

alias LPDRIVER_INFO_3W = Pointer[Struct__DRIVER_INFO_3W];

alias DRIVER_INFO_3 = DRIVER_INFO_3A;

alias PDRIVER_INFO_3 = PDRIVER_INFO_3A;

alias LPDRIVER_INFO_3 = LPDRIVER_INFO_3A;

record Struct__DRIVER_INFO_4A (
    cVersion : CULong,
    pName : LPSTR,
    pEnvironment : LPSTR,
    pDriverPath : LPSTR,
    pDataFile : LPSTR,
    pConfigFile : LPSTR,
    pHelpFile : LPSTR,
    pDependentFiles : LPSTR,
    pMonitorName : LPSTR,
    pDefaultDataType : LPSTR,
    pszzPreviousNames : LPSTR,
);

alias DRIVER_INFO_4A = Struct__DRIVER_INFO_4A;

alias PDRIVER_INFO_4A = Pointer[Struct__DRIVER_INFO_4A];

alias LPDRIVER_INFO_4A = Pointer[Struct__DRIVER_INFO_4A];

record Struct__DRIVER_INFO_4W (
    cVersion : CULong,
    pName : LPWSTR,
    pEnvironment : LPWSTR,
    pDriverPath : LPWSTR,
    pDataFile : LPWSTR,
    pConfigFile : LPWSTR,
    pHelpFile : LPWSTR,
    pDependentFiles : LPWSTR,
    pMonitorName : LPWSTR,
    pDefaultDataType : LPWSTR,
    pszzPreviousNames : LPWSTR,
);

alias DRIVER_INFO_4W = Struct__DRIVER_INFO_4W;

alias PDRIVER_INFO_4W = Pointer[Struct__DRIVER_INFO_4W];

alias LPDRIVER_INFO_4W = Pointer[Struct__DRIVER_INFO_4W];

alias DRIVER_INFO_4 = DRIVER_INFO_4A;

alias PDRIVER_INFO_4 = PDRIVER_INFO_4A;

alias LPDRIVER_INFO_4 = LPDRIVER_INFO_4A;

record Struct__DRIVER_INFO_5A (
    cVersion : CULong,
    pName : LPSTR,
    pEnvironment : LPSTR,
    pDriverPath : LPSTR,
    pDataFile : LPSTR,
    pConfigFile : LPSTR,
    dwDriverAttributes : CULong,
    dwConfigVersion : CULong,
    dwDriverVersion : CULong,
);

alias DRIVER_INFO_5A = Struct__DRIVER_INFO_5A;

alias PDRIVER_INFO_5A = Pointer[Struct__DRIVER_INFO_5A];

alias LPDRIVER_INFO_5A = Pointer[Struct__DRIVER_INFO_5A];

record Struct__DRIVER_INFO_5W (
    cVersion : CULong,
    pName : LPWSTR,
    pEnvironment : LPWSTR,
    pDriverPath : LPWSTR,
    pDataFile : LPWSTR,
    pConfigFile : LPWSTR,
    dwDriverAttributes : CULong,
    dwConfigVersion : CULong,
    dwDriverVersion : CULong,
);

alias DRIVER_INFO_5W = Struct__DRIVER_INFO_5W;

alias PDRIVER_INFO_5W = Pointer[Struct__DRIVER_INFO_5W];

alias LPDRIVER_INFO_5W = Pointer[Struct__DRIVER_INFO_5W];

alias DRIVER_INFO_5 = DRIVER_INFO_5A;

alias PDRIVER_INFO_5 = PDRIVER_INFO_5A;

alias LPDRIVER_INFO_5 = LPDRIVER_INFO_5A;

record Struct__DRIVER_INFO_6A (
    cVersion : CULong,
    pName : LPSTR,
    pEnvironment : LPSTR,
    pDriverPath : LPSTR,
    pDataFile : LPSTR,
    pConfigFile : LPSTR,
    pHelpFile : LPSTR,
    pDependentFiles : LPSTR,
    pMonitorName : LPSTR,
    pDefaultDataType : LPSTR,
    pszzPreviousNames : LPSTR,
    ftDriverDate : FILETIME,
    dwlDriverVersion : UInt64,
    pszMfgName : LPSTR,
    pszOEMUrl : LPSTR,
    pszHardwareID : LPSTR,
    pszProvider : LPSTR,
);

alias DRIVER_INFO_6A = Struct__DRIVER_INFO_6A;

alias PDRIVER_INFO_6A = Pointer[Struct__DRIVER_INFO_6A];

alias LPDRIVER_INFO_6A = Pointer[Struct__DRIVER_INFO_6A];

record Struct__DRIVER_INFO_6W (
    cVersion : CULong,
    pName : LPWSTR,
    pEnvironment : LPWSTR,
    pDriverPath : LPWSTR,
    pDataFile : LPWSTR,
    pConfigFile : LPWSTR,
    pHelpFile : LPWSTR,
    pDependentFiles : LPWSTR,
    pMonitorName : LPWSTR,
    pDefaultDataType : LPWSTR,
    pszzPreviousNames : LPWSTR,
    ftDriverDate : FILETIME,
    dwlDriverVersion : UInt64,
    pszMfgName : LPWSTR,
    pszOEMUrl : LPWSTR,
    pszHardwareID : LPWSTR,
    pszProvider : LPWSTR,
);

alias DRIVER_INFO_6W = Struct__DRIVER_INFO_6W;

alias PDRIVER_INFO_6W = Pointer[Struct__DRIVER_INFO_6W];

alias LPDRIVER_INFO_6W = Pointer[Struct__DRIVER_INFO_6W];

alias DRIVER_INFO_6 = DRIVER_INFO_6A;

alias PDRIVER_INFO_6 = PDRIVER_INFO_6A;

alias LPDRIVER_INFO_6 = LPDRIVER_INFO_6A;

record Struct__DOC_INFO_1A (
    pDocName : LPSTR,
    pOutputFile : LPSTR,
    pDatatype : LPSTR,
);

alias DOC_INFO_1A = Struct__DOC_INFO_1A;

alias PDOC_INFO_1A = Pointer[Struct__DOC_INFO_1A];

alias LPDOC_INFO_1A = Pointer[Struct__DOC_INFO_1A];

record Struct__DOC_INFO_1W (
    pDocName : LPWSTR,
    pOutputFile : LPWSTR,
    pDatatype : LPWSTR,
);

alias DOC_INFO_1W = Struct__DOC_INFO_1W;

alias PDOC_INFO_1W = Pointer[Struct__DOC_INFO_1W];

alias LPDOC_INFO_1W = Pointer[Struct__DOC_INFO_1W];

alias DOC_INFO_1 = DOC_INFO_1A;

alias PDOC_INFO_1 = PDOC_INFO_1A;

alias LPDOC_INFO_1 = LPDOC_INFO_1A;

record Struct__FORM_INFO_1A (
    Flags : CULong,
    pName : LPSTR,
    Size : SIZEL,
    ImageableArea : RECTL,
);

alias FORM_INFO_1A = Struct__FORM_INFO_1A;

alias PFORM_INFO_1A = Pointer[Struct__FORM_INFO_1A];

alias LPFORM_INFO_1A = Pointer[Struct__FORM_INFO_1A];

record Struct__FORM_INFO_1W (
    Flags : CULong,
    pName : LPWSTR,
    Size : SIZEL,
    ImageableArea : RECTL,
);

alias FORM_INFO_1W = Struct__FORM_INFO_1W;

alias PFORM_INFO_1W = Pointer[Struct__FORM_INFO_1W];

alias LPFORM_INFO_1W = Pointer[Struct__FORM_INFO_1W];

alias FORM_INFO_1 = FORM_INFO_1A;

alias PFORM_INFO_1 = PFORM_INFO_1A;

alias LPFORM_INFO_1 = LPFORM_INFO_1A;

record Struct__DOC_INFO_2A (
    pDocName : LPSTR,
    pOutputFile : LPSTR,
    pDatatype : LPSTR,
    dwMode : CULong,
    JobId : CULong,
);

alias DOC_INFO_2A = Struct__DOC_INFO_2A;

alias PDOC_INFO_2A = Pointer[Struct__DOC_INFO_2A];

alias LPDOC_INFO_2A = Pointer[Struct__DOC_INFO_2A];

record Struct__DOC_INFO_2W (
    pDocName : LPWSTR,
    pOutputFile : LPWSTR,
    pDatatype : LPWSTR,
    dwMode : CULong,
    JobId : CULong,
);

alias DOC_INFO_2W = Struct__DOC_INFO_2W;

alias PDOC_INFO_2W = Pointer[Struct__DOC_INFO_2W];

alias LPDOC_INFO_2W = Pointer[Struct__DOC_INFO_2W];

alias DOC_INFO_2 = DOC_INFO_2A;

alias PDOC_INFO_2 = PDOC_INFO_2A;

alias LPDOC_INFO_2 = LPDOC_INFO_2A;

record Struct__DOC_INFO_3A (
    pDocName : LPSTR,
    pOutputFile : LPSTR,
    pDatatype : LPSTR,
    dwFlags : CULong,
);

alias DOC_INFO_3A = Struct__DOC_INFO_3A;

alias PDOC_INFO_3A = Pointer[Struct__DOC_INFO_3A];

alias LPDOC_INFO_3A = Pointer[Struct__DOC_INFO_3A];

record Struct__DOC_INFO_3W (
    pDocName : LPWSTR,
    pOutputFile : LPWSTR,
    pDatatype : LPWSTR,
    dwFlags : CULong,
);

alias DOC_INFO_3W = Struct__DOC_INFO_3W;

alias PDOC_INFO_3W = Pointer[Struct__DOC_INFO_3W];

alias LPDOC_INFO_3W = Pointer[Struct__DOC_INFO_3W];

alias DOC_INFO_3 = DOC_INFO_3A;

alias PDOC_INFO_3 = PDOC_INFO_3A;

alias LPDOC_INFO_3 = LPDOC_INFO_3A;

record Struct__PRINTPROCESSOR_INFO_1A (
    pName : LPSTR,
);

alias PRINTPROCESSOR_INFO_1A = Struct__PRINTPROCESSOR_INFO_1A;

alias PPRINTPROCESSOR_INFO_1A = Pointer[Struct__PRINTPROCESSOR_INFO_1A];

alias LPPRINTPROCESSOR_INFO_1A = Pointer[Struct__PRINTPROCESSOR_INFO_1A];

record Struct__PRINTPROCESSOR_INFO_1W (
    pName : LPWSTR,
);

alias PRINTPROCESSOR_INFO_1W = Struct__PRINTPROCESSOR_INFO_1W;

alias PPRINTPROCESSOR_INFO_1W = Pointer[Struct__PRINTPROCESSOR_INFO_1W];

alias LPPRINTPROCESSOR_INFO_1W = Pointer[Struct__PRINTPROCESSOR_INFO_1W];

alias PRINTPROCESSOR_INFO_1 = PRINTPROCESSOR_INFO_1A;

alias PPRINTPROCESSOR_INFO_1 = PPRINTPROCESSOR_INFO_1A;

alias LPPRINTPROCESSOR_INFO_1 = LPPRINTPROCESSOR_INFO_1A;

record Struct__PRINTPROCESSOR_CAPS_1 (
    dwLevel : CULong,
    dwNupOptions : CULong,
    dwPageOrderFlags : CULong,
    dwNumberOfCopies : CULong,
);

alias PRINTPROCESSOR_CAPS_1 = Struct__PRINTPROCESSOR_CAPS_1;

alias PPRINTPROCESSOR_CAPS_1 = Pointer[Struct__PRINTPROCESSOR_CAPS_1];

record Struct__PORT_INFO_1A (
    pName : LPSTR,
);

alias PORT_INFO_1A = Struct__PORT_INFO_1A;

alias PPORT_INFO_1A = Pointer[Struct__PORT_INFO_1A];

alias LPPORT_INFO_1A = Pointer[Struct__PORT_INFO_1A];

record Struct__PORT_INFO_1W (
    pName : LPWSTR,
);

alias PORT_INFO_1W = Struct__PORT_INFO_1W;

alias PPORT_INFO_1W = Pointer[Struct__PORT_INFO_1W];

alias LPPORT_INFO_1W = Pointer[Struct__PORT_INFO_1W];

alias PORT_INFO_1 = PORT_INFO_1A;

alias PPORT_INFO_1 = PPORT_INFO_1A;

alias LPPORT_INFO_1 = LPPORT_INFO_1A;

record Struct__PORT_INFO_2A (
    pPortName : LPSTR,
    pMonitorName : LPSTR,
    pDescription : LPSTR,
    fPortType : CULong,
    Reserved : CULong,
);

alias PORT_INFO_2A = Struct__PORT_INFO_2A;

alias PPORT_INFO_2A = Pointer[Struct__PORT_INFO_2A];

alias LPPORT_INFO_2A = Pointer[Struct__PORT_INFO_2A];

record Struct__PORT_INFO_2W (
    pPortName : LPWSTR,
    pMonitorName : LPWSTR,
    pDescription : LPWSTR,
    fPortType : CULong,
    Reserved : CULong,
);

alias PORT_INFO_2W = Struct__PORT_INFO_2W;

alias PPORT_INFO_2W = Pointer[Struct__PORT_INFO_2W];

alias LPPORT_INFO_2W = Pointer[Struct__PORT_INFO_2W];

alias PORT_INFO_2 = PORT_INFO_2A;

alias PPORT_INFO_2 = PPORT_INFO_2A;

alias LPPORT_INFO_2 = LPPORT_INFO_2A;

record Struct__PORT_INFO_3A (
    dwStatus : CULong,
    pszStatus : LPSTR,
    dwSeverity : CULong,
);

alias PORT_INFO_3A = Struct__PORT_INFO_3A;

alias PPORT_INFO_3A = Pointer[Struct__PORT_INFO_3A];

alias LPPORT_INFO_3A = Pointer[Struct__PORT_INFO_3A];

record Struct__PORT_INFO_3W (
    dwStatus : CULong,
    pszStatus : LPWSTR,
    dwSeverity : CULong,
);

alias PORT_INFO_3W = Struct__PORT_INFO_3W;

alias PPORT_INFO_3W = Pointer[Struct__PORT_INFO_3W];

alias LPPORT_INFO_3W = Pointer[Struct__PORT_INFO_3W];

alias PORT_INFO_3 = PORT_INFO_3A;

alias PPORT_INFO_3 = PPORT_INFO_3A;

alias LPPORT_INFO_3 = LPPORT_INFO_3A;

record Struct__MONITOR_INFO_1A (
    pName : LPSTR,
);

alias MONITOR_INFO_1A = Struct__MONITOR_INFO_1A;

alias PMONITOR_INFO_1A = Pointer[Struct__MONITOR_INFO_1A];

alias LPMONITOR_INFO_1A = Pointer[Struct__MONITOR_INFO_1A];

record Struct__MONITOR_INFO_1W (
    pName : LPWSTR,
);

alias MONITOR_INFO_1W = Struct__MONITOR_INFO_1W;

alias PMONITOR_INFO_1W = Pointer[Struct__MONITOR_INFO_1W];

alias LPMONITOR_INFO_1W = Pointer[Struct__MONITOR_INFO_1W];

alias MONITOR_INFO_1 = MONITOR_INFO_1A;

alias PMONITOR_INFO_1 = PMONITOR_INFO_1A;

alias LPMONITOR_INFO_1 = LPMONITOR_INFO_1A;

record Struct__MONITOR_INFO_2A (
    pName : LPSTR,
    pEnvironment : LPSTR,
    pDLLName : LPSTR,
);

alias MONITOR_INFO_2A = Struct__MONITOR_INFO_2A;

alias PMONITOR_INFO_2A = Pointer[Struct__MONITOR_INFO_2A];

alias LPMONITOR_INFO_2A = Pointer[Struct__MONITOR_INFO_2A];

record Struct__MONITOR_INFO_2W (
    pName : LPWSTR,
    pEnvironment : LPWSTR,
    pDLLName : LPWSTR,
);

alias MONITOR_INFO_2W = Struct__MONITOR_INFO_2W;

alias PMONITOR_INFO_2W = Pointer[Struct__MONITOR_INFO_2W];

alias LPMONITOR_INFO_2W = Pointer[Struct__MONITOR_INFO_2W];

alias MONITOR_INFO_2 = MONITOR_INFO_2A;

alias PMONITOR_INFO_2 = PMONITOR_INFO_2A;

alias LPMONITOR_INFO_2 = LPMONITOR_INFO_2A;

record Struct__DATATYPES_INFO_1A (
    pName : LPSTR,
);

alias DATATYPES_INFO_1A = Struct__DATATYPES_INFO_1A;

alias PDATATYPES_INFO_1A = Pointer[Struct__DATATYPES_INFO_1A];

alias LPDATATYPES_INFO_1A = Pointer[Struct__DATATYPES_INFO_1A];

record Struct__DATATYPES_INFO_1W (
    pName : LPWSTR,
);

alias DATATYPES_INFO_1W = Struct__DATATYPES_INFO_1W;

alias PDATATYPES_INFO_1W = Pointer[Struct__DATATYPES_INFO_1W];

alias LPDATATYPES_INFO_1W = Pointer[Struct__DATATYPES_INFO_1W];

alias DATATYPES_INFO_1 = DATATYPES_INFO_1A;

alias PDATATYPES_INFO_1 = PDATATYPES_INFO_1A;

alias LPDATATYPES_INFO_1 = LPDATATYPES_INFO_1A;

record Struct__PRINTER_DEFAULTSA (
    pDatatype : LPSTR,
    pDevMode : LPDEVMODEA,
    DesiredAccess : CULong,
);

alias PRINTER_DEFAULTSA = Struct__PRINTER_DEFAULTSA;

alias PPRINTER_DEFAULTSA = Pointer[Struct__PRINTER_DEFAULTSA];

alias LPPRINTER_DEFAULTSA = Pointer[Struct__PRINTER_DEFAULTSA];

record Struct__PRINTER_DEFAULTSW (
    pDatatype : LPWSTR,
    pDevMode : LPDEVMODEW,
    DesiredAccess : CULong,
);

alias PRINTER_DEFAULTSW = Struct__PRINTER_DEFAULTSW;

alias PPRINTER_DEFAULTSW = Pointer[Struct__PRINTER_DEFAULTSW];

alias LPPRINTER_DEFAULTSW = Pointer[Struct__PRINTER_DEFAULTSW];

alias PRINTER_DEFAULTS = PRINTER_DEFAULTSA;

alias PPRINTER_DEFAULTS = PPRINTER_DEFAULTSA;

alias LPPRINTER_DEFAULTS = LPPRINTER_DEFAULTSA;

record Struct__PRINTER_ENUM_VALUESA (
    pValueName : LPSTR,
    cbValueName : CULong,
    dwType : CULong,
    pData : LPBYTE,
    cbData : CULong,
);

alias PRINTER_ENUM_VALUESA = Struct__PRINTER_ENUM_VALUESA;

alias PPRINTER_ENUM_VALUESA = Pointer[Struct__PRINTER_ENUM_VALUESA];

alias LPPRINTER_ENUM_VALUESA = Pointer[Struct__PRINTER_ENUM_VALUESA];

record Struct__PRINTER_ENUM_VALUESW (
    pValueName : LPWSTR,
    cbValueName : CULong,
    dwType : CULong,
    pData : LPBYTE,
    cbData : CULong,
);

alias PRINTER_ENUM_VALUESW = Struct__PRINTER_ENUM_VALUESW;

alias PPRINTER_ENUM_VALUESW = Pointer[Struct__PRINTER_ENUM_VALUESW];

alias LPPRINTER_ENUM_VALUESW = Pointer[Struct__PRINTER_ENUM_VALUESW];

alias PRINTER_ENUM_VALUES = PRINTER_ENUM_VALUESA;

alias PPRINTER_ENUM_VALUES = PPRINTER_ENUM_VALUESA;

alias LPPRINTER_ENUM_VALUES = LPPRINTER_ENUM_VALUESA;

external EnumPrintersA(
    Flags : CULong,
    Name : LPSTR,
    Level : CULong,
    pPrinterEnum : LPBYTE,
    cbBuf : CULong,
    pcbNeeded : LPDWORD,
    pcReturned : LPDWORD) Int;

external EnumPrintersW(
    Flags : CULong,
    Name : LPWSTR,
    Level : CULong,
    pPrinterEnum : LPBYTE,
    cbBuf : CULong,
    pcbNeeded : LPDWORD,
    pcReturned : LPDWORD) Int;

external OpenPrinterA(
    pPrinterName : LPSTR,
    phPrinter : LPHANDLE,
    pDefault : LPPRINTER_DEFAULTSA) Int;

external OpenPrinterW(
    pPrinterName : LPWSTR,
    phPrinter : LPHANDLE,
    pDefault : LPPRINTER_DEFAULTSW) Int;

external ResetPrinterA(
    hPrinter : HANDLE,
    pDefault : LPPRINTER_DEFAULTSA) Int;

external ResetPrinterW(
    hPrinter : HANDLE,
    pDefault : LPPRINTER_DEFAULTSW) Int;

external SetJobA(
    hPrinter : HANDLE,
    JobId : CULong,
    Level : CULong,
    pJob : LPBYTE,
    Command : CULong) Int;

external SetJobW(
    hPrinter : HANDLE,
    JobId : CULong,
    Level : CULong,
    pJob : LPBYTE,
    Command : CULong) Int;

external GetJobA(
    hPrinter : HANDLE,
    JobId : CULong,
    Level : CULong,
    pJob : LPBYTE,
    cbBuf : CULong,
    pcbNeeded : LPDWORD) Int;

external GetJobW(
    hPrinter : HANDLE,
    JobId : CULong,
    Level : CULong,
    pJob : LPBYTE,
    cbBuf : CULong,
    pcbNeeded : LPDWORD) Int;

external EnumJobsA(
    hPrinter : HANDLE,
    FirstJob : CULong,
    NoJobs : CULong,
    Level : CULong,
    pJob : LPBYTE,
    cbBuf : CULong,
    pcbNeeded : LPDWORD,
    pcReturned : LPDWORD) Int;

external EnumJobsW(
    hPrinter : HANDLE,
    FirstJob : CULong,
    NoJobs : CULong,
    Level : CULong,
    pJob : LPBYTE,
    cbBuf : CULong,
    pcbNeeded : LPDWORD,
    pcReturned : LPDWORD) Int;

external AddPrinterA(
    pName : LPSTR,
    Level : CULong,
    pPrinter : LPBYTE) HANDLE;

external AddPrinterW(
    pName : LPWSTR,
    Level : CULong,
    pPrinter : LPBYTE) HANDLE;

external DeletePrinter(
    hPrinter : HANDLE) Int;

external SetPrinterA(
    hPrinter : HANDLE,
    Level : CULong,
    pPrinter : LPBYTE,
    Command : CULong) Int;

external SetPrinterW(
    hPrinter : HANDLE,
    Level : CULong,
    pPrinter : LPBYTE,
    Command : CULong) Int;

external GetPrinterA(
    hPrinter : HANDLE,
    Level : CULong,
    pPrinter : LPBYTE,
    cbBuf : CULong,
    pcbNeeded : LPDWORD) Int;

external GetPrinterW(
    hPrinter : HANDLE,
    Level : CULong,
    pPrinter : LPBYTE,
    cbBuf : CULong,
    pcbNeeded : LPDWORD) Int;

external AddPrinterDriverA(
    pName : LPSTR,
    Level : CULong,
    pDriverInfo : LPBYTE) Int;

external AddPrinterDriverW(
    pName : LPWSTR,
    Level : CULong,
    pDriverInfo : LPBYTE) Int;

external AddPrinterDriverExA(
    pName : LPSTR,
    Level : CULong,
    pDriverInfo : LPBYTE,
    dwFileCopyFlags : CULong) Int;

external AddPrinterDriverExW(
    pName : LPWSTR,
    Level : CULong,
    pDriverInfo : LPBYTE,
    dwFileCopyFlags : CULong) Int;

external EnumPrinterDriversA(
    pName : LPSTR,
    pEnvironment : LPSTR,
    Level : CULong,
    pDriverInfo : LPBYTE,
    cbBuf : CULong,
    pcbNeeded : LPDWORD,
    pcReturned : LPDWORD) Int;

external EnumPrinterDriversW(
    pName : LPWSTR,
    pEnvironment : LPWSTR,
    Level : CULong,
    pDriverInfo : LPBYTE,
    cbBuf : CULong,
    pcbNeeded : LPDWORD,
    pcReturned : LPDWORD) Int;

external GetPrinterDriverA(
    hPrinter : HANDLE,
    pEnvironment : LPSTR,
    Level : CULong,
    pDriverInfo : LPBYTE,
    cbBuf : CULong,
    pcbNeeded : LPDWORD) Int;

external GetPrinterDriverW(
    hPrinter : HANDLE,
    pEnvironment : LPWSTR,
    Level : CULong,
    pDriverInfo : LPBYTE,
    cbBuf : CULong,
    pcbNeeded : LPDWORD) Int;

external GetPrinterDriverDirectoryA(
    pName : LPSTR,
    pEnvironment : LPSTR,
    Level : CULong,
    pDriverDirectory : LPBYTE,
    cbBuf : CULong,
    pcbNeeded : LPDWORD) Int;

external GetPrinterDriverDirectoryW(
    pName : LPWSTR,
    pEnvironment : LPWSTR,
    Level : CULong,
    pDriverDirectory : LPBYTE,
    cbBuf : CULong,
    pcbNeeded : LPDWORD) Int;

external DeletePrinterDriverA(
    pName : LPSTR,
    pEnvironment : LPSTR,
    pDriverName : LPSTR) Int;

external DeletePrinterDriverW(
    pName : LPWSTR,
    pEnvironment : LPWSTR,
    pDriverName : LPWSTR) Int;

external DeletePrinterDriverExA(
    pName : LPSTR,
    pEnvironment : LPSTR,
    pDriverName : LPSTR,
    dwDeleteFlag : CULong,
    dwVersionFlag : CULong) Int;

external DeletePrinterDriverExW(
    pName : LPWSTR,
    pEnvironment : LPWSTR,
    pDriverName : LPWSTR,
    dwDeleteFlag : CULong,
    dwVersionFlag : CULong) Int;

external AddPrintProcessorA(
    pName : LPSTR,
    pEnvironment : LPSTR,
    pPathName : LPSTR,
    pPrintProcessorName : LPSTR) Int;

external AddPrintProcessorW(
    pName : LPWSTR,
    pEnvironment : LPWSTR,
    pPathName : LPWSTR,
    pPrintProcessorName : LPWSTR) Int;

external EnumPrintProcessorsA(
    pName : LPSTR,
    pEnvironment : LPSTR,
    Level : CULong,
    pPrintProcessorInfo : LPBYTE,
    cbBuf : CULong,
    pcbNeeded : LPDWORD,
    pcReturned : LPDWORD) Int;

external EnumPrintProcessorsW(
    pName : LPWSTR,
    pEnvironment : LPWSTR,
    Level : CULong,
    pPrintProcessorInfo : LPBYTE,
    cbBuf : CULong,
    pcbNeeded : LPDWORD,
    pcReturned : LPDWORD) Int;

external GetPrintProcessorDirectoryA(
    pName : LPSTR,
    pEnvironment : LPSTR,
    Level : CULong,
    pPrintProcessorInfo : LPBYTE,
    cbBuf : CULong,
    pcbNeeded : LPDWORD) Int;

external GetPrintProcessorDirectoryW(
    pName : LPWSTR,
    pEnvironment : LPWSTR,
    Level : CULong,
    pPrintProcessorInfo : LPBYTE,
    cbBuf : CULong,
    pcbNeeded : LPDWORD) Int;

external EnumPrintProcessorDatatypesA(
    pName : LPSTR,
    pPrintProcessorName : LPSTR,
    Level : CULong,
    pDatatypes : LPBYTE,
    cbBuf : CULong,
    pcbNeeded : LPDWORD,
    pcReturned : LPDWORD) Int;

external EnumPrintProcessorDatatypesW(
    pName : LPWSTR,
    pPrintProcessorName : LPWSTR,
    Level : CULong,
    pDatatypes : LPBYTE,
    cbBuf : CULong,
    pcbNeeded : LPDWORD,
    pcReturned : LPDWORD) Int;

external DeletePrintProcessorA(
    pName : LPSTR,
    pEnvironment : LPSTR,
    pPrintProcessorName : LPSTR) Int;

external DeletePrintProcessorW(
    pName : LPWSTR,
    pEnvironment : LPWSTR,
    pPrintProcessorName : LPWSTR) Int;

external StartDocPrinterA(
    hPrinter : HANDLE,
    Level : CULong,
    pDocInfo : LPBYTE) CULong;

external StartDocPrinterW(
    hPrinter : HANDLE,
    Level : CULong,
    pDocInfo : LPBYTE) CULong;

external StartPagePrinter(
    hPrinter : HANDLE) Int;

external WritePrinter(
    hPrinter : HANDLE,
    pBuf : LPVOID,
    cbBuf : CULong,
    pcWritten : LPDWORD) Int;

external FlushPrinter(
    hPrinter : HANDLE,
    pBuf : LPVOID,
    cbBuf : CULong,
    pcWritten : LPDWORD,
    cSleep : CULong) Int;

external EndPagePrinter(
    hPrinter : HANDLE) Int;

external AbortPrinter(
    hPrinter : HANDLE) Int;

external ReadPrinter(
    hPrinter : HANDLE,
    pBuf : LPVOID,
    cbBuf : CULong,
    pNoBytesRead : LPDWORD) Int;

external EndDocPrinter(
    hPrinter : HANDLE) Int;

external AddJobA(
    hPrinter : HANDLE,
    Level : CULong,
    pData : LPBYTE,
    cbBuf : CULong,
    pcbNeeded : LPDWORD) Int;

external AddJobW(
    hPrinter : HANDLE,
    Level : CULong,
    pData : LPBYTE,
    cbBuf : CULong,
    pcbNeeded : LPDWORD) Int;

external ScheduleJob(
    hPrinter : HANDLE,
    JobId : CULong) Int;

external PrinterProperties(
    hWnd : HWND,
    hPrinter : HANDLE) Int;

external DocumentPropertiesA(
    hWnd : HWND,
    hPrinter : HANDLE,
    pDeviceName : LPSTR,
    pDevModeOutput : PDEVMODEA,
    pDevModeInput : PDEVMODEA,
    fMode : CULong) CLong;

external DocumentPropertiesW(
    hWnd : HWND,
    hPrinter : HANDLE,
    pDeviceName : LPWSTR,
    pDevModeOutput : PDEVMODEW,
    pDevModeInput : PDEVMODEW,
    fMode : CULong) CLong;

external AdvancedDocumentPropertiesA(
    hWnd : HWND,
    hPrinter : HANDLE,
    pDeviceName : LPSTR,
    pDevModeOutput : PDEVMODEA,
    pDevModeInput : PDEVMODEA) CLong;

external AdvancedDocumentPropertiesW(
    hWnd : HWND,
    hPrinter : HANDLE,
    pDeviceName : LPWSTR,
    pDevModeOutput : PDEVMODEW,
    pDevModeInput : PDEVMODEW) CLong;

external ExtDeviceMode(
    hWnd : HWND,
    hInst : HANDLE,
    pDevModeOutput : LPDEVMODEA,
    pDeviceName : LPSTR,
    pPort : LPSTR,
    pDevModeInput : LPDEVMODEA,
    pProfile : LPSTR,
    fMode : CULong) CLong;

external GetPrinterDataA(
    hPrinter : HANDLE,
    pValueName : LPSTR,
    pType : LPDWORD,
    pData : LPBYTE,
    nSize : CULong,
    pcbNeeded : LPDWORD) CULong;

external GetPrinterDataW(
    hPrinter : HANDLE,
    pValueName : LPWSTR,
    pType : LPDWORD,
    pData : LPBYTE,
    nSize : CULong,
    pcbNeeded : LPDWORD) CULong;

external GetPrinterDataExA(
    hPrinter : HANDLE,
    pKeyName : LPCSTR,
    pValueName : LPCSTR,
    pType : LPDWORD,
    pData : LPBYTE,
    nSize : CULong,
    pcbNeeded : LPDWORD) CULong;

external GetPrinterDataExW(
    hPrinter : HANDLE,
    pKeyName : LPCWSTR,
    pValueName : LPCWSTR,
    pType : LPDWORD,
    pData : LPBYTE,
    nSize : CULong,
    pcbNeeded : LPDWORD) CULong;

external EnumPrinterDataA(
    hPrinter : HANDLE,
    dwIndex : CULong,
    pValueName : LPSTR,
    cbValueName : CULong,
    pcbValueName : LPDWORD,
    pType : LPDWORD,
    pData : LPBYTE,
    cbData : CULong,
    pcbData : LPDWORD) CULong;

external EnumPrinterDataW(
    hPrinter : HANDLE,
    dwIndex : CULong,
    pValueName : LPWSTR,
    cbValueName : CULong,
    pcbValueName : LPDWORD,
    pType : LPDWORD,
    pData : LPBYTE,
    cbData : CULong,
    pcbData : LPDWORD) CULong;

external EnumPrinterDataExA(
    hPrinter : HANDLE,
    pKeyName : LPCSTR,
    pEnumValues : LPBYTE,
    cbEnumValues : CULong,
    pcbEnumValues : LPDWORD,
    pnEnumValues : LPDWORD) CULong;

external EnumPrinterDataExW(
    hPrinter : HANDLE,
    pKeyName : LPCWSTR,
    pEnumValues : LPBYTE,
    cbEnumValues : CULong,
    pcbEnumValues : LPDWORD,
    pnEnumValues : LPDWORD) CULong;

external EnumPrinterKeyA(
    hPrinter : HANDLE,
    pKeyName : LPCSTR,
    pSubkey : LPSTR,
    cbSubkey : CULong,
    pcbSubkey : LPDWORD) CULong;

external EnumPrinterKeyW(
    hPrinter : HANDLE,
    pKeyName : LPCWSTR,
    pSubkey : LPWSTR,
    cbSubkey : CULong,
    pcbSubkey : LPDWORD) CULong;

external SetPrinterDataA(
    hPrinter : HANDLE,
    pValueName : LPSTR,
    Type : CULong,
    pData : LPBYTE,
    cbData : CULong) CULong;

external SetPrinterDataW(
    hPrinter : HANDLE,
    pValueName : LPWSTR,
    Type : CULong,
    pData : LPBYTE,
    cbData : CULong) CULong;

external SetPrinterDataExA(
    hPrinter : HANDLE,
    pKeyName : LPCSTR,
    pValueName : LPCSTR,
    Type : CULong,
    pData : LPBYTE,
    cbData : CULong) CULong;

external SetPrinterDataExW(
    hPrinter : HANDLE,
    pKeyName : LPCWSTR,
    pValueName : LPCWSTR,
    Type : CULong,
    pData : LPBYTE,
    cbData : CULong) CULong;

external DeletePrinterDataA(
    hPrinter : HANDLE,
    pValueName : LPSTR) CULong;

external DeletePrinterDataW(
    hPrinter : HANDLE,
    pValueName : LPWSTR) CULong;

external DeletePrinterDataExA(
    hPrinter : HANDLE,
    pKeyName : LPCSTR,
    pValueName : LPCSTR) CULong;

external DeletePrinterDataExW(
    hPrinter : HANDLE,
    pKeyName : LPCWSTR,
    pValueName : LPCWSTR) CULong;

external DeletePrinterKeyA(
    hPrinter : HANDLE,
    pKeyName : LPCSTR) CULong;

external DeletePrinterKeyW(
    hPrinter : HANDLE,
    pKeyName : LPCWSTR) CULong;

record Struct__PRINTER_NOTIFY_OPTIONS_TYPE (
    Type : UShort,
    Reserved0 : UShort,
    Reserved1 : CULong,
    Reserved2 : CULong,
    Count : CULong,
    pFields : PWORD,
);

alias PRINTER_NOTIFY_OPTIONS_TYPE = Struct__PRINTER_NOTIFY_OPTIONS_TYPE;

alias PPRINTER_NOTIFY_OPTIONS_TYPE = Pointer[Struct__PRINTER_NOTIFY_OPTIONS_TYPE];

alias LPPRINTER_NOTIFY_OPTIONS_TYPE = Pointer[Struct__PRINTER_NOTIFY_OPTIONS_TYPE];

record Struct__PRINTER_NOTIFY_OPTIONS (
    Version : CULong,
    Flags : CULong,
    Count : CULong,
    pTypes : PPRINTER_NOTIFY_OPTIONS_TYPE,
);

alias PRINTER_NOTIFY_OPTIONS = Struct__PRINTER_NOTIFY_OPTIONS;

alias PPRINTER_NOTIFY_OPTIONS = Pointer[Struct__PRINTER_NOTIFY_OPTIONS];

alias LPPRINTER_NOTIFY_OPTIONS = Pointer[Struct__PRINTER_NOTIFY_OPTIONS];

record Struct__PRINTER_NOTIFY_INFO_DATA (
    Type : UShort,
    Field : UShort,
    Reserved : CULong,
    Id : CULong,
    NotifyData : AUnionType,
);

alias PRINTER_NOTIFY_INFO_DATA = Struct__PRINTER_NOTIFY_INFO_DATA;

alias PPRINTER_NOTIFY_INFO_DATA = Pointer[Struct__PRINTER_NOTIFY_INFO_DATA];

alias LPPRINTER_NOTIFY_INFO_DATA = Pointer[Struct__PRINTER_NOTIFY_INFO_DATA];

record Struct__PRINTER_NOTIFY_INFO (
    Version : CULong,
    Flags : CULong,
    Count : CULong,
    aData : Array[PRINTER_NOTIFY_INFO_DATA,1],
);

alias PRINTER_NOTIFY_INFO = Struct__PRINTER_NOTIFY_INFO;

alias PPRINTER_NOTIFY_INFO = Pointer[Struct__PRINTER_NOTIFY_INFO];

alias LPPRINTER_NOTIFY_INFO = Pointer[Struct__PRINTER_NOTIFY_INFO];

record Struct__BINARY_CONTAINER (
    cbBuf : CULong,
    pData : LPBYTE,
);

alias BINARY_CONTAINER = Struct__BINARY_CONTAINER;

alias PBINARY_CONTAINER = Pointer[Struct__BINARY_CONTAINER];

record Struct__BIDI_DATA (
    dwBidiType : CULong,
    u : AUnionType,
);

alias BIDI_DATA = Struct__BIDI_DATA;

alias PBIDI_DATA = Pointer[Struct__BIDI_DATA];

alias LPBIDI_DATA = Pointer[Struct__BIDI_DATA];

record Struct__BIDI_REQUEST_DATA (
    dwReqNumber : CULong,
    pSchema : LPWSTR,
    data : BIDI_DATA,
);

alias BIDI_REQUEST_DATA = Struct__BIDI_REQUEST_DATA;

alias PBIDI_REQUEST_DATA = Pointer[Struct__BIDI_REQUEST_DATA];

alias LPBIDI_REQUEST_DATA = Pointer[Struct__BIDI_REQUEST_DATA];

record Struct__BIDI_REQUEST_CONTAINER (
    Version : CULong,
    Flags : CULong,
    Count : CULong,
    aData : Array[BIDI_REQUEST_DATA,1],
);

alias BIDI_REQUEST_CONTAINER = Struct__BIDI_REQUEST_CONTAINER;

alias PBIDI_REQUEST_CONTAINER = Pointer[Struct__BIDI_REQUEST_CONTAINER];

alias LPBIDI_REQUEST_CONTAINER = Pointer[Struct__BIDI_REQUEST_CONTAINER];

record Struct__BIDI_RESPONSE_DATA (
    dwResult : CULong,
    dwReqNumber : CULong,
    pSchema : LPWSTR,
    data : BIDI_DATA,
);

alias BIDI_RESPONSE_DATA = Struct__BIDI_RESPONSE_DATA;

alias PBIDI_RESPONSE_DATA = Pointer[Struct__BIDI_RESPONSE_DATA];

alias LPBIDI_RESPONSE_DATA = Pointer[Struct__BIDI_RESPONSE_DATA];

record Struct__BIDI_RESPONSE_CONTAINER (
    Version : CULong,
    Flags : CULong,
    Count : CULong,
    aData : Array[BIDI_RESPONSE_DATA,1],
);

alias BIDI_RESPONSE_CONTAINER = Struct__BIDI_RESPONSE_CONTAINER;

alias PBIDI_RESPONSE_CONTAINER = Pointer[Struct__BIDI_RESPONSE_CONTAINER];

alias LPBIDI_RESPONSE_CONTAINER = Pointer[Struct__BIDI_RESPONSE_CONTAINER];

alias BIDI_NULL = 0;
alias BIDI_INT = 1;
alias BIDI_FLOAT = 2;
alias BIDI_BOOL = 3;
alias BIDI_STRING = 4;
alias BIDI_TEXT = 5;
alias BIDI_ENUM = 6;
alias BIDI_BLOB = 7;

alias BIDI_TYPE = Int;

external WaitForPrinterChange(
    hPrinter : HANDLE,
    Flags : CULong) CULong;

external FindFirstPrinterChangeNotification(
    hPrinter : HANDLE,
    fdwFlags : CULong,
    fdwOptions : CULong,
    pPrinterNotifyOptions : LPVOID) HANDLE;

external FindNextPrinterChangeNotification(
    hChange : HANDLE,
    pdwChange : PDWORD,
    pPrinterNotifyOptions : LPVOID,
    ppPrinterNotifyInfo : Pointer[LPVOID]) Int;

external FreePrinterNotifyInfo(
    pPrinterNotifyInfo : PPRINTER_NOTIFY_INFO) Int;

external FindClosePrinterChangeNotification(
    hChange : HANDLE) Int;

external PrinterMessageBoxA(
    hPrinter : HANDLE,
    Error : CULong,
    hWnd : HWND,
    pText : LPSTR,
    pCaption : LPSTR,
    dwType : CULong) CULong;

external PrinterMessageBoxW(
    hPrinter : HANDLE,
    Error : CULong,
    hWnd : HWND,
    pText : LPWSTR,
    pCaption : LPWSTR,
    dwType : CULong) CULong;

external ClosePrinter(
    hPrinter : HANDLE) Int;

external AddFormA(
    hPrinter : HANDLE,
    Level : CULong,
    pForm : LPBYTE) Int;

external AddFormW(
    hPrinter : HANDLE,
    Level : CULong,
    pForm : LPBYTE) Int;

external DeleteFormA(
    hPrinter : HANDLE,
    pFormName : LPSTR) Int;

external DeleteFormW(
    hPrinter : HANDLE,
    pFormName : LPWSTR) Int;

external GetFormA(
    hPrinter : HANDLE,
    pFormName : LPSTR,
    Level : CULong,
    pForm : LPBYTE,
    cbBuf : CULong,
    pcbNeeded : LPDWORD) Int;

external GetFormW(
    hPrinter : HANDLE,
    pFormName : LPWSTR,
    Level : CULong,
    pForm : LPBYTE,
    cbBuf : CULong,
    pcbNeeded : LPDWORD) Int;

external SetFormA(
    hPrinter : HANDLE,
    pFormName : LPSTR,
    Level : CULong,
    pForm : LPBYTE) Int;

external SetFormW(
    hPrinter : HANDLE,
    pFormName : LPWSTR,
    Level : CULong,
    pForm : LPBYTE) Int;

external EnumFormsA(
    hPrinter : HANDLE,
    Level : CULong,
    pForm : LPBYTE,
    cbBuf : CULong,
    pcbNeeded : LPDWORD,
    pcReturned : LPDWORD) Int;

external EnumFormsW(
    hPrinter : HANDLE,
    Level : CULong,
    pForm : LPBYTE,
    cbBuf : CULong,
    pcbNeeded : LPDWORD,
    pcReturned : LPDWORD) Int;

external EnumMonitorsA(
    pName : LPSTR,
    Level : CULong,
    pMonitor : LPBYTE,
    cbBuf : CULong,
    pcbNeeded : LPDWORD,
    pcReturned : LPDWORD) Int;

external EnumMonitorsW(
    pName : LPWSTR,
    Level : CULong,
    pMonitor : LPBYTE,
    cbBuf : CULong,
    pcbNeeded : LPDWORD,
    pcReturned : LPDWORD) Int;

external AddMonitorA(
    pName : LPSTR,
    Level : CULong,
    pMonitorInfo : LPBYTE) Int;

external AddMonitorW(
    pName : LPWSTR,
    Level : CULong,
    pMonitorInfo : LPBYTE) Int;

external DeleteMonitorA(
    pName : LPSTR,
    pEnvironment : LPSTR,
    pMonitorName : LPSTR) Int;

external DeleteMonitorW(
    pName : LPWSTR,
    pEnvironment : LPWSTR,
    pMonitorName : LPWSTR) Int;

external EnumPortsA(
    pName : LPSTR,
    Level : CULong,
    pPorts : LPBYTE,
    cbBuf : CULong,
    pcbNeeded : LPDWORD,
    pcReturned : LPDWORD) Int;

external EnumPortsW(
    pName : LPWSTR,
    Level : CULong,
    pPorts : LPBYTE,
    cbBuf : CULong,
    pcbNeeded : LPDWORD,
    pcReturned : LPDWORD) Int;

external AddPortA(
    pName : LPSTR,
    hWnd : HWND,
    pMonitorName : LPSTR) Int;

external AddPortW(
    pName : LPWSTR,
    hWnd : HWND,
    pMonitorName : LPWSTR) Int;

external ConfigurePortA(
    pName : LPSTR,
    hWnd : HWND,
    pPortName : LPSTR) Int;

external ConfigurePortW(
    pName : LPWSTR,
    hWnd : HWND,
    pPortName : LPWSTR) Int;

external DeletePortA(
    pName : LPSTR,
    hWnd : HWND,
    pPortName : LPSTR) Int;

external DeletePortW(
    pName : LPWSTR,
    hWnd : HWND,
    pPortName : LPWSTR) Int;

external XcvDataW(
    hXcv : HANDLE,
    pszDataName : PCWSTR,
    pInputData : PBYTE,
    cbInputData : CULong,
    pOutputData : PBYTE,
    cbOutputData : CULong,
    pcbOutputNeeded : PDWORD,
    pdwStatus : PDWORD) Int;

external GetDefaultPrinterA(
    pszBuffer : LPSTR,
    pcchBuffer : LPDWORD) Int;

external GetDefaultPrinterW(
    pszBuffer : LPWSTR,
    pcchBuffer : LPDWORD) Int;

external SetDefaultPrinterA(
    pszPrinter : LPCSTR) Int;

external SetDefaultPrinterW(
    pszPrinter : LPCWSTR) Int;

external SetPortA(
    pName : LPSTR,
    pPortName : LPSTR,
    dwLevel : CULong,
    pPortInfo : LPBYTE) Int;

external SetPortW(
    pName : LPWSTR,
    pPortName : LPWSTR,
    dwLevel : CULong,
    pPortInfo : LPBYTE) Int;

external AddPrinterConnectionA(
    pName : LPSTR) Int;

external AddPrinterConnectionW(
    pName : LPWSTR) Int;

external DeletePrinterConnectionA(
    pName : LPSTR) Int;

external DeletePrinterConnectionW(
    pName : LPWSTR) Int;

external ConnectToPrinterDlg(
    hwnd : HWND,
    Flags : CULong) HANDLE;

record Struct__PROVIDOR_INFO_1A (
    pName : LPSTR,
    pEnvironment : LPSTR,
    pDLLName : LPSTR,
);

alias PROVIDOR_INFO_1A = Struct__PROVIDOR_INFO_1A;

alias PPROVIDOR_INFO_1A = Pointer[Struct__PROVIDOR_INFO_1A];

alias LPPROVIDOR_INFO_1A = Pointer[Struct__PROVIDOR_INFO_1A];

record Struct__PROVIDOR_INFO_1W (
    pName : LPWSTR,
    pEnvironment : LPWSTR,
    pDLLName : LPWSTR,
);

alias PROVIDOR_INFO_1W = Struct__PROVIDOR_INFO_1W;

alias PPROVIDOR_INFO_1W = Pointer[Struct__PROVIDOR_INFO_1W];

alias LPPROVIDOR_INFO_1W = Pointer[Struct__PROVIDOR_INFO_1W];

alias PROVIDOR_INFO_1 = PROVIDOR_INFO_1A;

alias PPROVIDOR_INFO_1 = PPROVIDOR_INFO_1A;

alias LPPROVIDOR_INFO_1 = LPPROVIDOR_INFO_1A;

record Struct__PROVIDOR_INFO_2A (
    pOrder : LPSTR,
);

alias PROVIDOR_INFO_2A = Struct__PROVIDOR_INFO_2A;

alias PPROVIDOR_INFO_2A = Pointer[Struct__PROVIDOR_INFO_2A];

alias LPPROVIDOR_INFO_2A = Pointer[Struct__PROVIDOR_INFO_2A];

record Struct__PROVIDOR_INFO_2W (
    pOrder : LPWSTR,
);

alias PROVIDOR_INFO_2W = Struct__PROVIDOR_INFO_2W;

alias PPROVIDOR_INFO_2W = Pointer[Struct__PROVIDOR_INFO_2W];

alias LPPROVIDOR_INFO_2W = Pointer[Struct__PROVIDOR_INFO_2W];

alias PROVIDOR_INFO_2 = PROVIDOR_INFO_2A;

alias PPROVIDOR_INFO_2 = PPROVIDOR_INFO_2A;

alias LPPROVIDOR_INFO_2 = LPPROVIDOR_INFO_2A;

external AddPrintProvidorA(
    pName : LPSTR,
    level : CULong,
    pProvidorInfo : LPBYTE) Int;

external AddPrintProvidorW(
    pName : LPWSTR,
    level : CULong,
    pProvidorInfo : LPBYTE) Int;

external DeletePrintProvidorA(
    pName : LPSTR,
    pEnvironment : LPSTR,
    pPrintProvidorName : LPSTR) Int;

external DeletePrintProvidorW(
    pName : LPWSTR,
    pEnvironment : LPWSTR,
    pPrintProvidorName : LPWSTR) Int;

external IsValidDevmodeA(
    pDevmode : PDEVMODEA,
    DevmodeSize : UInt64) Int;

external IsValidDevmodeW(
    pDevmode : PDEVMODEW,
    DevmodeSize : UInt64) Int;

alias REGCLS_SINGLEUSE = 0;
alias REGCLS_MULTIPLEUSE = 1;
alias REGCLS_MULTI_SEPARATE = 2;
alias REGCLS_SUSPENDED = 4;
alias REGCLS_SURROGATE = 8;

alias REGCLS = Int;

alias IRpcStubBuffer = Struct_IRpcStubBuffer;

alias IRpcChannelBuffer = Struct_IRpcChannelBuffer;

alias IUnknown = Struct_IUnknown;

alias AsyncIUnknown = Struct_AsyncIUnknown;

alias IClassFactory = Struct_IClassFactory;

external __MIDL_itf_unknwn_0000_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_unknwn_0000_v0_0_s_ifspec : RPC_IF_HANDLE;

alias LPUNKNOWN = Pointer[IUnknown];

external IID_IUnknown : IID;

record Struct_IUnknownVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IUnknown],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IUnknown]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IUnknown]),(CULong)],
);

alias IUnknownVtbl = Struct_IUnknownVtbl;

record Struct_IUnknown (
    lpVtbl : Pointer[Struct_IUnknownVtbl],
);

external IUnknown_QueryInterface_Proxy(
    This : Pointer[IUnknown],
    riid : Pointer[IID],
    ppvObject : Pointer[RawPointer]) CLong;

external IUnknown_QueryInterface_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IUnknown_AddRef_Proxy(
    This : Pointer[IUnknown]) CULong;

external IUnknown_AddRef_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IUnknown_Release_Proxy(
    This : Pointer[IUnknown]) CULong;

external IUnknown_Release_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external __MIDL_itf_unknwn_0005_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_unknwn_0005_v0_0_s_ifspec : RPC_IF_HANDLE;

external IID_AsyncIUnknown : IID;

record Struct_AsyncIUnknownVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_AsyncIUnknown],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_AsyncIUnknown]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_AsyncIUnknown]),(CULong)],
    Begin_QueryInterface : CCodePointer[(Pointer[Struct_AsyncIUnknown],Pointer[Struct__GUID]),(CLong)],
    Finish_QueryInterface : CCodePointer[(Pointer[Struct_AsyncIUnknown],Pointer[RawPointer]),(CLong)],
    Begin_AddRef : CCodePointer[(Pointer[Struct_AsyncIUnknown]),(CLong)],
    Finish_AddRef : CCodePointer[(Pointer[Struct_AsyncIUnknown]),(CULong)],
    Begin_Release : CCodePointer[(Pointer[Struct_AsyncIUnknown]),(CLong)],
    Finish_Release : CCodePointer[(Pointer[Struct_AsyncIUnknown]),(CULong)],
);

alias AsyncIUnknownVtbl = Struct_AsyncIUnknownVtbl;

record Struct_AsyncIUnknown (
    lpVtbl : Pointer[Struct_AsyncIUnknownVtbl],
);

external AsyncIUnknown_Begin_QueryInterface_Proxy(
    This : Pointer[AsyncIUnknown],
    riid : Pointer[IID]) CLong;

external AsyncIUnknown_Begin_QueryInterface_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external AsyncIUnknown_Finish_QueryInterface_Proxy(
    This : Pointer[AsyncIUnknown],
    ppvObject : Pointer[RawPointer]) CLong;

external AsyncIUnknown_Finish_QueryInterface_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external AsyncIUnknown_Begin_AddRef_Proxy(
    This : Pointer[AsyncIUnknown]) CLong;

external AsyncIUnknown_Begin_AddRef_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external AsyncIUnknown_Finish_AddRef_Proxy(
    This : Pointer[AsyncIUnknown]) CULong;

external AsyncIUnknown_Finish_AddRef_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external AsyncIUnknown_Begin_Release_Proxy(
    This : Pointer[AsyncIUnknown]) CLong;

external AsyncIUnknown_Begin_Release_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external AsyncIUnknown_Finish_Release_Proxy(
    This : Pointer[AsyncIUnknown]) CULong;

external AsyncIUnknown_Finish_Release_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPCLASSFACTORY = Pointer[IClassFactory];

external IID_IClassFactory : IID;

record Struct_IClassFactoryVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IClassFactory],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IClassFactory]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IClassFactory]),(CULong)],
    CreateInstance : CCodePointer[(Pointer[Struct_IClassFactory],Pointer[Struct_IUnknown],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    LockServer : CCodePointer[(Pointer[Struct_IClassFactory],Int),(CLong)],
);

alias IClassFactoryVtbl = Struct_IClassFactoryVtbl;

record Struct_IClassFactory (
    lpVtbl : Pointer[Struct_IClassFactoryVtbl],
);

external IClassFactory_RemoteCreateInstance_Proxy(
    This : Pointer[IClassFactory],
    riid : Pointer[IID],
    ppvObject : Pointer[Pointer[IUnknown]]) CLong;

external IClassFactory_RemoteCreateInstance_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IClassFactory_RemoteLockServer_Proxy(
    This : Pointer[IClassFactory],
    fLock : Int) CLong;

external IClassFactory_RemoteLockServer_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IClassFactory_CreateInstance_Proxy(
    This : Pointer[IClassFactory],
    pUnkOuter : Pointer[IUnknown],
    riid : Pointer[IID],
    ppvObject : Pointer[RawPointer]) CLong;

external IClassFactory_CreateInstance_Stub(
    This : Pointer[IClassFactory],
    riid : Pointer[IID],
    ppvObject : Pointer[Pointer[IUnknown]]) CLong;

external IClassFactory_LockServer_Proxy(
    This : Pointer[IClassFactory],
    fLock : Int) CLong;

external IClassFactory_LockServer_Stub(
    This : Pointer[IClassFactory],
    fLock : Int) CLong;

alias IMarshal = Struct_IMarshal;

alias IMarshal2 = Struct_IMarshal2;

alias IMalloc = Struct_IMalloc;

alias IMallocSpy = Struct_IMallocSpy;

alias IStdMarshalInfo = Struct_IStdMarshalInfo;

alias IExternalConnection = Struct_IExternalConnection;

alias IMultiQI = Struct_IMultiQI;

alias AsyncIMultiQI = Struct_AsyncIMultiQI;

alias IInternalUnknown = Struct_IInternalUnknown;

alias IEnumUnknown = Struct_IEnumUnknown;

alias IBindCtx = Struct_IBindCtx;

alias IEnumMoniker = Struct_IEnumMoniker;

alias IRunnableObject = Struct_IRunnableObject;

alias IRunningObjectTable = Struct_IRunningObjectTable;

alias IPersist = Struct_IPersist;

alias IPersistStream = Struct_IPersistStream;

alias IMoniker = Struct_IMoniker;

alias IROTData = Struct_IROTData;

alias IEnumString = Struct_IEnumString;

alias ISequentialStream = Struct_ISequentialStream;

alias IStream = Struct_IStream;

alias IEnumSTATSTG = Struct_IEnumSTATSTG;

alias IStorage = Struct_IStorage;

alias IPersistFile = Struct_IPersistFile;

alias IPersistStorage = Struct_IPersistStorage;

alias ILockBytes = Struct_ILockBytes;

alias IEnumFORMATETC = Struct_IEnumFORMATETC;

alias IEnumSTATDATA = Struct_IEnumSTATDATA;

alias IRootStorage = Struct_IRootStorage;

alias IAdviseSink = Struct_IAdviseSink;

alias AsyncIAdviseSink = Struct_AsyncIAdviseSink;

alias IAdviseSink2 = Struct_IAdviseSink2;

alias AsyncIAdviseSink2 = Struct_AsyncIAdviseSink2;

alias IDataObject = Struct_IDataObject;

alias IDataAdviseHolder = Struct_IDataAdviseHolder;

alias IMessageFilter = Struct_IMessageFilter;

alias IRpcChannelBuffer2 = Struct_IRpcChannelBuffer2;

alias IAsyncRpcChannelBuffer = Struct_IAsyncRpcChannelBuffer;

alias IRpcChannelBuffer3 = Struct_IRpcChannelBuffer3;

alias IRpcSyntaxNegotiate = Struct_IRpcSyntaxNegotiate;

alias IRpcProxyBuffer = Struct_IRpcProxyBuffer;

alias IPSFactoryBuffer = Struct_IPSFactoryBuffer;

alias IChannelHook = Struct_IChannelHook;

alias IClientSecurity = Struct_IClientSecurity;

alias IServerSecurity = Struct_IServerSecurity;

alias IClassActivator = Struct_IClassActivator;

alias IRpcOptions = Struct_IRpcOptions;

alias IFillLockBytes = Struct_IFillLockBytes;

alias IProgressNotify = Struct_IProgressNotify;

alias ILayoutStorage = Struct_ILayoutStorage;

alias IBlockingLock = Struct_IBlockingLock;

alias ITimeAndNoticeControl = Struct_ITimeAndNoticeControl;

alias IOplockStorage = Struct_IOplockStorage;

alias ISurrogate = Struct_ISurrogate;

alias IGlobalInterfaceTable = Struct_IGlobalInterfaceTable;

alias IDirectWriterLock = Struct_IDirectWriterLock;

alias ISynchronize = Struct_ISynchronize;

alias ISynchronizeHandle = Struct_ISynchronizeHandle;

alias ISynchronizeEvent = Struct_ISynchronizeEvent;

alias ISynchronizeContainer = Struct_ISynchronizeContainer;

alias ISynchronizeMutex = Struct_ISynchronizeMutex;

alias ICancelMethodCalls = Struct_ICancelMethodCalls;

alias IAsyncManager = Struct_IAsyncManager;

alias ICallFactory = Struct_ICallFactory;

alias IRpcHelper = Struct_IRpcHelper;

alias IReleaseMarshalBuffers = Struct_IReleaseMarshalBuffers;

alias IWaitMultiple = Struct_IWaitMultiple;

alias IUrlMon = Struct_IUrlMon;

alias IForegroundTransfer = Struct_IForegroundTransfer;

alias IAddrTrackingControl = Struct_IAddrTrackingControl;

alias IAddrExclusionControl = Struct_IAddrExclusionControl;

alias IPipeByte = Struct_IPipeByte;

alias AsyncIPipeByte = Struct_AsyncIPipeByte;

alias IPipeLong = Struct_IPipeLong;

alias AsyncIPipeLong = Struct_AsyncIPipeLong;

alias IPipeDouble = Struct_IPipeDouble;

alias AsyncIPipeDouble = Struct_AsyncIPipeDouble;

alias IThumbnailExtractor = Struct_IThumbnailExtractor;

alias IDummyHICONIncluder = Struct_IDummyHICONIncluder;

alias IEnumContextProps = Opaque;

alias IContext = Opaque;

alias IObjContext = Opaque;

alias IProcessLock = Struct_IProcessLock;

alias ISurrogateService = Struct_ISurrogateService;

alias IComThreadingInfo = Struct_IComThreadingInfo;

alias IProcessInitControl = Struct_IProcessInitControl;

alias IInitializeSpy = Struct_IInitializeSpy;

record Struct__COSERVERINFO (
    dwReserved1 : CULong,
    pwszName : LPWSTR,
    pAuthInfo : Pointer[COAUTHINFO],
    dwReserved2 : CULong,
);

alias COSERVERINFO = Struct__COSERVERINFO;

external __MIDL_itf_objidl_0000_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_objidl_0000_v0_0_s_ifspec : RPC_IF_HANDLE;

alias LPMARSHAL = Pointer[IMarshal];

external IID_IMarshal : IID;

record Struct_IMarshalVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IMarshal],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IMarshal]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IMarshal]),(CULong)],
    GetUnmarshalClass : CCodePointer[(Pointer[Struct_IMarshal],Pointer[Struct__GUID],RawPointer,CULong,RawPointer,CULong,Pointer[Struct__GUID]),(CLong)],
    GetMarshalSizeMax : CCodePointer[(Pointer[Struct_IMarshal],Pointer[Struct__GUID],RawPointer,CULong,RawPointer,CULong,Pointer[CULong]),(CLong)],
    MarshalInterface : CCodePointer[(Pointer[Struct_IMarshal],Pointer[Struct_IStream],Pointer[Struct__GUID],RawPointer,CULong,RawPointer,CULong),(CLong)],
    UnmarshalInterface : CCodePointer[(Pointer[Struct_IMarshal],Pointer[Struct_IStream],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    ReleaseMarshalData : CCodePointer[(Pointer[Struct_IMarshal],Pointer[Struct_IStream]),(CLong)],
    DisconnectObject : CCodePointer[(Pointer[Struct_IMarshal],CULong),(CLong)],
);

alias IMarshalVtbl = Struct_IMarshalVtbl;

record Struct_IMarshal (
    lpVtbl : Pointer[Struct_IMarshalVtbl],
);

external IMarshal_GetUnmarshalClass_Proxy(
    This : Pointer[IMarshal],
    riid : Pointer[IID],
    pv : RawPointer,
    dwDestContext : CULong,
    pvDestContext : RawPointer,
    mshlflags : CULong,
    pCid : Pointer[CLSID]) CLong;

external IMarshal_GetUnmarshalClass_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IMarshal_GetMarshalSizeMax_Proxy(
    This : Pointer[IMarshal],
    riid : Pointer[IID],
    pv : RawPointer,
    dwDestContext : CULong,
    pvDestContext : RawPointer,
    mshlflags : CULong,
    pSize : Pointer[CULong]) CLong;

external IMarshal_GetMarshalSizeMax_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IMarshal_MarshalInterface_Proxy(
    This : Pointer[IMarshal],
    pStm : Pointer[IStream],
    riid : Pointer[IID],
    pv : RawPointer,
    dwDestContext : CULong,
    pvDestContext : RawPointer,
    mshlflags : CULong) CLong;

external IMarshal_MarshalInterface_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IMarshal_UnmarshalInterface_Proxy(
    This : Pointer[IMarshal],
    pStm : Pointer[IStream],
    riid : Pointer[IID],
    ppv : Pointer[RawPointer]) CLong;

external IMarshal_UnmarshalInterface_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IMarshal_ReleaseMarshalData_Proxy(
    This : Pointer[IMarshal],
    pStm : Pointer[IStream]) CLong;

external IMarshal_ReleaseMarshalData_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IMarshal_DisconnectObject_Proxy(
    This : Pointer[IMarshal],
    dwReserved : CULong) CLong;

external IMarshal_DisconnectObject_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPMARSHAL2 = Pointer[IMarshal2];

external IID_IMarshal2 : IID;

record Struct_IMarshal2Vtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IMarshal2],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IMarshal2]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IMarshal2]),(CULong)],
    GetUnmarshalClass : CCodePointer[(Pointer[Struct_IMarshal2],Pointer[Struct__GUID],RawPointer,CULong,RawPointer,CULong,Pointer[Struct__GUID]),(CLong)],
    GetMarshalSizeMax : CCodePointer[(Pointer[Struct_IMarshal2],Pointer[Struct__GUID],RawPointer,CULong,RawPointer,CULong,Pointer[CULong]),(CLong)],
    MarshalInterface : CCodePointer[(Pointer[Struct_IMarshal2],Pointer[Struct_IStream],Pointer[Struct__GUID],RawPointer,CULong,RawPointer,CULong),(CLong)],
    UnmarshalInterface : CCodePointer[(Pointer[Struct_IMarshal2],Pointer[Struct_IStream],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    ReleaseMarshalData : CCodePointer[(Pointer[Struct_IMarshal2],Pointer[Struct_IStream]),(CLong)],
    DisconnectObject : CCodePointer[(Pointer[Struct_IMarshal2],CULong),(CLong)],
);

alias IMarshal2Vtbl = Struct_IMarshal2Vtbl;

record Struct_IMarshal2 (
    lpVtbl : Pointer[Struct_IMarshal2Vtbl],
);

alias LPMALLOC = Pointer[IMalloc];

external IID_IMalloc : IID;

record Struct_IMallocVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IMalloc],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IMalloc]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IMalloc]),(CULong)],
    Alloc : CCodePointer[(Pointer[Struct_IMalloc],UInt64),(RawPointer)],
    Realloc : CCodePointer[(Pointer[Struct_IMalloc],RawPointer,UInt64),(RawPointer)],
    Free : CCodePointer[(Pointer[Struct_IMalloc],RawPointer),()],
    GetSize : CCodePointer[(Pointer[Struct_IMalloc],RawPointer),(UInt64)],
    DidAlloc : CCodePointer[(Pointer[Struct_IMalloc],RawPointer),(Int)],
    HeapMinimize : CCodePointer[(Pointer[Struct_IMalloc]),()],
);

alias IMallocVtbl = Struct_IMallocVtbl;

record Struct_IMalloc (
    lpVtbl : Pointer[Struct_IMallocVtbl],
);

external IMalloc_Alloc_Proxy(
    This : Pointer[IMalloc],
    cb : UInt64) RawPointer;

external IMalloc_Alloc_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IMalloc_Realloc_Proxy(
    This : Pointer[IMalloc],
    pv : RawPointer,
    cb : UInt64) RawPointer;

external IMalloc_Realloc_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IMalloc_Free_Proxy(
    This : Pointer[IMalloc],
    pv : RawPointer);

external IMalloc_Free_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IMalloc_GetSize_Proxy(
    This : Pointer[IMalloc],
    pv : RawPointer) UInt64;

external IMalloc_GetSize_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IMalloc_DidAlloc_Proxy(
    This : Pointer[IMalloc],
    pv : RawPointer) Int;

external IMalloc_DidAlloc_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IMalloc_HeapMinimize_Proxy(
    This : Pointer[IMalloc]);

external IMalloc_HeapMinimize_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPMALLOCSPY = Pointer[IMallocSpy];

external IID_IMallocSpy : IID;

record Struct_IMallocSpyVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IMallocSpy],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IMallocSpy]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IMallocSpy]),(CULong)],
    PreAlloc : CCodePointer[(Pointer[Struct_IMallocSpy],UInt64),(UInt64)],
    PostAlloc : CCodePointer[(Pointer[Struct_IMallocSpy],RawPointer),(RawPointer)],
    PreFree : CCodePointer[(Pointer[Struct_IMallocSpy],RawPointer,Int),(RawPointer)],
    PostFree : CCodePointer[(Pointer[Struct_IMallocSpy],Int),()],
    PreRealloc : CCodePointer[(Pointer[Struct_IMallocSpy],RawPointer,UInt64,Pointer[RawPointer],Int),(UInt64)],
    PostRealloc : CCodePointer[(Pointer[Struct_IMallocSpy],RawPointer,Int),(RawPointer)],
    PreGetSize : CCodePointer[(Pointer[Struct_IMallocSpy],RawPointer,Int),(RawPointer)],
    PostGetSize : CCodePointer[(Pointer[Struct_IMallocSpy],UInt64,Int),(UInt64)],
    PreDidAlloc : CCodePointer[(Pointer[Struct_IMallocSpy],RawPointer,Int),(RawPointer)],
    PostDidAlloc : CCodePointer[(Pointer[Struct_IMallocSpy],RawPointer,Int,Int),(Int)],
    PreHeapMinimize : CCodePointer[(Pointer[Struct_IMallocSpy]),()],
    PostHeapMinimize : CCodePointer[(Pointer[Struct_IMallocSpy]),()],
);

alias IMallocSpyVtbl = Struct_IMallocSpyVtbl;

record Struct_IMallocSpy (
    lpVtbl : Pointer[Struct_IMallocSpyVtbl],
);

external IMallocSpy_PreAlloc_Proxy(
    This : Pointer[IMallocSpy],
    cbRequest : UInt64) UInt64;

external IMallocSpy_PreAlloc_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IMallocSpy_PostAlloc_Proxy(
    This : Pointer[IMallocSpy],
    pActual : RawPointer) RawPointer;

external IMallocSpy_PostAlloc_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IMallocSpy_PreFree_Proxy(
    This : Pointer[IMallocSpy],
    pRequest : RawPointer,
    fSpyed : Int) RawPointer;

external IMallocSpy_PreFree_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IMallocSpy_PostFree_Proxy(
    This : Pointer[IMallocSpy],
    fSpyed : Int);

external IMallocSpy_PostFree_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IMallocSpy_PreRealloc_Proxy(
    This : Pointer[IMallocSpy],
    pRequest : RawPointer,
    cbRequest : UInt64,
    ppNewRequest : Pointer[RawPointer],
    fSpyed : Int) UInt64;

external IMallocSpy_PreRealloc_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IMallocSpy_PostRealloc_Proxy(
    This : Pointer[IMallocSpy],
    pActual : RawPointer,
    fSpyed : Int) RawPointer;

external IMallocSpy_PostRealloc_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IMallocSpy_PreGetSize_Proxy(
    This : Pointer[IMallocSpy],
    pRequest : RawPointer,
    fSpyed : Int) RawPointer;

external IMallocSpy_PreGetSize_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IMallocSpy_PostGetSize_Proxy(
    This : Pointer[IMallocSpy],
    cbActual : UInt64,
    fSpyed : Int) UInt64;

external IMallocSpy_PostGetSize_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IMallocSpy_PreDidAlloc_Proxy(
    This : Pointer[IMallocSpy],
    pRequest : RawPointer,
    fSpyed : Int) RawPointer;

external IMallocSpy_PreDidAlloc_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IMallocSpy_PostDidAlloc_Proxy(
    This : Pointer[IMallocSpy],
    pRequest : RawPointer,
    fSpyed : Int,
    fActual : Int) Int;

external IMallocSpy_PostDidAlloc_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IMallocSpy_PreHeapMinimize_Proxy(
    This : Pointer[IMallocSpy]);

external IMallocSpy_PreHeapMinimize_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IMallocSpy_PostHeapMinimize_Proxy(
    This : Pointer[IMallocSpy]);

external IMallocSpy_PostHeapMinimize_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPSTDMARSHALINFO = Pointer[IStdMarshalInfo];

external IID_IStdMarshalInfo : IID;

record Struct_IStdMarshalInfoVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IStdMarshalInfo],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IStdMarshalInfo]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IStdMarshalInfo]),(CULong)],
    GetClassForHandler : CCodePointer[(Pointer[Struct_IStdMarshalInfo],CULong,RawPointer,Pointer[Struct__GUID]),(CLong)],
);

alias IStdMarshalInfoVtbl = Struct_IStdMarshalInfoVtbl;

record Struct_IStdMarshalInfo (
    lpVtbl : Pointer[Struct_IStdMarshalInfoVtbl],
);

external IStdMarshalInfo_GetClassForHandler_Proxy(
    This : Pointer[IStdMarshalInfo],
    dwDestContext : CULong,
    pvDestContext : RawPointer,
    pClsid : Pointer[CLSID]) CLong;

external IStdMarshalInfo_GetClassForHandler_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPEXTERNALCONNECTION = Pointer[IExternalConnection];

alias EXTCONN_STRONG = 1;
alias EXTCONN_WEAK = 2;
alias EXTCONN_CALLABLE = 4;

alias EXTCONN = Int;

external IID_IExternalConnection : IID;

record Struct_IExternalConnectionVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IExternalConnection],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IExternalConnection]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IExternalConnection]),(CULong)],
    AddConnection : CCodePointer[(Pointer[Struct_IExternalConnection],CULong,CULong),(CULong)],
    ReleaseConnection : CCodePointer[(Pointer[Struct_IExternalConnection],CULong,CULong,Int),(CULong)],
);

alias IExternalConnectionVtbl = Struct_IExternalConnectionVtbl;

record Struct_IExternalConnection (
    lpVtbl : Pointer[Struct_IExternalConnectionVtbl],
);

external IExternalConnection_AddConnection_Proxy(
    This : Pointer[IExternalConnection],
    extconn : CULong,
    reserved : CULong) CULong;

external IExternalConnection_AddConnection_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IExternalConnection_ReleaseConnection_Proxy(
    This : Pointer[IExternalConnection],
    extconn : CULong,
    reserved : CULong,
    fLastReleaseCloses : Int) CULong;

external IExternalConnection_ReleaseConnection_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPMULTIQI = Pointer[IMultiQI];

record Struct_tagMULTI_QI (
    pIID : Pointer[IID],
    pItf : Pointer[IUnknown],
    hr : CLong,
);

alias MULTI_QI = Struct_tagMULTI_QI;

external __MIDL_itf_objidl_0015_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_objidl_0015_v0_0_s_ifspec : RPC_IF_HANDLE;

external IID_IMultiQI : IID;

record Struct_IMultiQIVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IMultiQI],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IMultiQI]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IMultiQI]),(CULong)],
    QueryMultipleInterfaces : CCodePointer[(Pointer[Struct_IMultiQI],CULong,Pointer[Struct_tagMULTI_QI]),(CLong)],
);

alias IMultiQIVtbl = Struct_IMultiQIVtbl;

record Struct_IMultiQI (
    lpVtbl : Pointer[Struct_IMultiQIVtbl],
);

external IMultiQI_QueryMultipleInterfaces_Proxy(
    This : Pointer[IMultiQI],
    cMQIs : CULong,
    pMQIs : Pointer[MULTI_QI]) CLong;

external IMultiQI_QueryMultipleInterfaces_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_AsyncIMultiQI : IID;

record Struct_AsyncIMultiQIVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_AsyncIMultiQI],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_AsyncIMultiQI]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_AsyncIMultiQI]),(CULong)],
    Begin_QueryMultipleInterfaces : CCodePointer[(Pointer[Struct_AsyncIMultiQI],CULong,Pointer[Struct_tagMULTI_QI]),(CLong)],
    Finish_QueryMultipleInterfaces : CCodePointer[(Pointer[Struct_AsyncIMultiQI],Pointer[Struct_tagMULTI_QI]),(CLong)],
);

alias AsyncIMultiQIVtbl = Struct_AsyncIMultiQIVtbl;

record Struct_AsyncIMultiQI (
    lpVtbl : Pointer[Struct_AsyncIMultiQIVtbl],
);

external AsyncIMultiQI_Begin_QueryMultipleInterfaces_Proxy(
    This : Pointer[AsyncIMultiQI],
    cMQIs : CULong,
    pMQIs : Pointer[MULTI_QI]) CLong;

external AsyncIMultiQI_Begin_QueryMultipleInterfaces_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external AsyncIMultiQI_Finish_QueryMultipleInterfaces_Proxy(
    This : Pointer[AsyncIMultiQI],
    pMQIs : Pointer[MULTI_QI]) CLong;

external AsyncIMultiQI_Finish_QueryMultipleInterfaces_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IInternalUnknown : IID;

record Struct_IInternalUnknownVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IInternalUnknown],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IInternalUnknown]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IInternalUnknown]),(CULong)],
    QueryInternalInterface : CCodePointer[(Pointer[Struct_IInternalUnknown],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
);

alias IInternalUnknownVtbl = Struct_IInternalUnknownVtbl;

record Struct_IInternalUnknown (
    lpVtbl : Pointer[Struct_IInternalUnknownVtbl],
);

external IInternalUnknown_QueryInternalInterface_Proxy(
    This : Pointer[IInternalUnknown],
    riid : Pointer[IID],
    ppv : Pointer[RawPointer]) CLong;

external IInternalUnknown_QueryInternalInterface_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPENUMUNKNOWN = Pointer[IEnumUnknown];

external IID_IEnumUnknown : IID;

record Struct_IEnumUnknownVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IEnumUnknown],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IEnumUnknown]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IEnumUnknown]),(CULong)],
    Next : CCodePointer[(Pointer[Struct_IEnumUnknown],CULong,Pointer[Pointer[Struct_IUnknown]],Pointer[CULong]),(CLong)],
    Skip : CCodePointer[(Pointer[Struct_IEnumUnknown],CULong),(CLong)],
    Reset : CCodePointer[(Pointer[Struct_IEnumUnknown]),(CLong)],
    Clone : CCodePointer[(Pointer[Struct_IEnumUnknown],Pointer[Pointer[Struct_IEnumUnknown]]),(CLong)],
);

alias IEnumUnknownVtbl = Struct_IEnumUnknownVtbl;

record Struct_IEnumUnknown (
    lpVtbl : Pointer[Struct_IEnumUnknownVtbl],
);

external IEnumUnknown_RemoteNext_Proxy(
    This : Pointer[IEnumUnknown],
    celt : CULong,
    rgelt : Pointer[Pointer[IUnknown]],
    pceltFetched : Pointer[CULong]) CLong;

external IEnumUnknown_RemoteNext_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IEnumUnknown_Skip_Proxy(
    This : Pointer[IEnumUnknown],
    celt : CULong) CLong;

external IEnumUnknown_Skip_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IEnumUnknown_Reset_Proxy(
    This : Pointer[IEnumUnknown]) CLong;

external IEnumUnknown_Reset_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IEnumUnknown_Clone_Proxy(
    This : Pointer[IEnumUnknown],
    ppenum : Pointer[Pointer[IEnumUnknown]]) CLong;

external IEnumUnknown_Clone_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPBC = Pointer[IBindCtx];

alias LPBINDCTX = Pointer[IBindCtx];

record Struct_tagBIND_OPTS (
    cbStruct : CULong,
    grfFlags : CULong,
    grfMode : CULong,
    dwTickCountDeadline : CULong,
);

alias BIND_OPTS = Struct_tagBIND_OPTS;

alias LPBIND_OPTS = Pointer[Struct_tagBIND_OPTS];

record Struct_tagBIND_OPTS2 (
    cbStruct : CULong,
    grfFlags : CULong,
    grfMode : CULong,
    dwTickCountDeadline : CULong,
    dwTrackFlags : CULong,
    dwClassContext : CULong,
    locale : CULong,
    pServerInfo : Pointer[COSERVERINFO],
);

alias BIND_OPTS2 = Struct_tagBIND_OPTS2;

alias LPBIND_OPTS2 = Pointer[Struct_tagBIND_OPTS2];

alias BIND_MAYBOTHERUSER = 1;
alias BIND_JUSTTESTEXISTENCE = 2;

alias BIND_FLAGS = Int;

external IID_IBindCtx : IID;

record Struct_IBindCtxVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IBindCtx],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IBindCtx]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IBindCtx]),(CULong)],
    RegisterObjectBound : CCodePointer[(Pointer[Struct_IBindCtx],Pointer[Struct_IUnknown]),(CLong)],
    RevokeObjectBound : CCodePointer[(Pointer[Struct_IBindCtx],Pointer[Struct_IUnknown]),(CLong)],
    ReleaseBoundObjects : CCodePointer[(Pointer[Struct_IBindCtx]),(CLong)],
    SetBindOptions : CCodePointer[(Pointer[Struct_IBindCtx],Pointer[Struct_tagBIND_OPTS]),(CLong)],
    GetBindOptions : CCodePointer[(Pointer[Struct_IBindCtx],Pointer[Struct_tagBIND_OPTS]),(CLong)],
    GetRunningObjectTable : CCodePointer[(Pointer[Struct_IBindCtx],Pointer[Pointer[Struct_IRunningObjectTable]]),(CLong)],
    RegisterObjectParam : CCodePointer[(Pointer[Struct_IBindCtx],Pointer[UShort],Pointer[Struct_IUnknown]),(CLong)],
    GetObjectParam : CCodePointer[(Pointer[Struct_IBindCtx],Pointer[UShort],Pointer[Pointer[Struct_IUnknown]]),(CLong)],
    EnumObjectParam : CCodePointer[(Pointer[Struct_IBindCtx],Pointer[Pointer[Struct_IEnumString]]),(CLong)],
    RevokeObjectParam : CCodePointer[(Pointer[Struct_IBindCtx],Pointer[UShort]),(CLong)],
);

alias IBindCtxVtbl = Struct_IBindCtxVtbl;

record Struct_IBindCtx (
    lpVtbl : Pointer[Struct_IBindCtxVtbl],
);

external IBindCtx_RegisterObjectBound_Proxy(
    This : Pointer[IBindCtx],
    punk : Pointer[IUnknown]) CLong;

external IBindCtx_RegisterObjectBound_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IBindCtx_RevokeObjectBound_Proxy(
    This : Pointer[IBindCtx],
    punk : Pointer[IUnknown]) CLong;

external IBindCtx_RevokeObjectBound_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IBindCtx_ReleaseBoundObjects_Proxy(
    This : Pointer[IBindCtx]) CLong;

external IBindCtx_ReleaseBoundObjects_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IBindCtx_RemoteSetBindOptions_Proxy(
    This : Pointer[IBindCtx],
    pbindopts : Pointer[BIND_OPTS2]) CLong;

external IBindCtx_RemoteSetBindOptions_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IBindCtx_RemoteGetBindOptions_Proxy(
    This : Pointer[IBindCtx],
    pbindopts : Pointer[BIND_OPTS2]) CLong;

external IBindCtx_RemoteGetBindOptions_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IBindCtx_GetRunningObjectTable_Proxy(
    This : Pointer[IBindCtx],
    pprot : Pointer[Pointer[IRunningObjectTable]]) CLong;

external IBindCtx_GetRunningObjectTable_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IBindCtx_RegisterObjectParam_Proxy(
    This : Pointer[IBindCtx],
    pszKey : LPOLESTR,
    punk : Pointer[IUnknown]) CLong;

external IBindCtx_RegisterObjectParam_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IBindCtx_GetObjectParam_Proxy(
    This : Pointer[IBindCtx],
    pszKey : LPOLESTR,
    ppunk : Pointer[Pointer[IUnknown]]) CLong;

external IBindCtx_GetObjectParam_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IBindCtx_EnumObjectParam_Proxy(
    This : Pointer[IBindCtx],
    ppenum : Pointer[Pointer[IEnumString]]) CLong;

external IBindCtx_EnumObjectParam_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IBindCtx_RevokeObjectParam_Proxy(
    This : Pointer[IBindCtx],
    pszKey : LPOLESTR) CLong;

external IBindCtx_RevokeObjectParam_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPENUMMONIKER = Pointer[IEnumMoniker];

external IID_IEnumMoniker : IID;

record Struct_IEnumMonikerVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IEnumMoniker],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IEnumMoniker]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IEnumMoniker]),(CULong)],
    Next : CCodePointer[(Pointer[Struct_IEnumMoniker],CULong,Pointer[Pointer[Struct_IMoniker]],Pointer[CULong]),(CLong)],
    Skip : CCodePointer[(Pointer[Struct_IEnumMoniker],CULong),(CLong)],
    Reset : CCodePointer[(Pointer[Struct_IEnumMoniker]),(CLong)],
    Clone : CCodePointer[(Pointer[Struct_IEnumMoniker],Pointer[Pointer[Struct_IEnumMoniker]]),(CLong)],
);

alias IEnumMonikerVtbl = Struct_IEnumMonikerVtbl;

record Struct_IEnumMoniker (
    lpVtbl : Pointer[Struct_IEnumMonikerVtbl],
);

external IEnumMoniker_RemoteNext_Proxy(
    This : Pointer[IEnumMoniker],
    celt : CULong,
    rgelt : Pointer[Pointer[IMoniker]],
    pceltFetched : Pointer[CULong]) CLong;

external IEnumMoniker_RemoteNext_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IEnumMoniker_Skip_Proxy(
    This : Pointer[IEnumMoniker],
    celt : CULong) CLong;

external IEnumMoniker_Skip_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IEnumMoniker_Reset_Proxy(
    This : Pointer[IEnumMoniker]) CLong;

external IEnumMoniker_Reset_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IEnumMoniker_Clone_Proxy(
    This : Pointer[IEnumMoniker],
    ppenum : Pointer[Pointer[IEnumMoniker]]) CLong;

external IEnumMoniker_Clone_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPRUNNABLEOBJECT = Pointer[IRunnableObject];

external IID_IRunnableObject : IID;

record Struct_IRunnableObjectVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IRunnableObject],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IRunnableObject]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IRunnableObject]),(CULong)],
    GetRunningClass : CCodePointer[(Pointer[Struct_IRunnableObject],Pointer[Struct__GUID]),(CLong)],
    Run : CCodePointer[(Pointer[Struct_IRunnableObject],Pointer[Struct_IBindCtx]),(CLong)],
    IsRunning : CCodePointer[(Pointer[Struct_IRunnableObject]),(Int)],
    LockRunning : CCodePointer[(Pointer[Struct_IRunnableObject],Int,Int),(CLong)],
    SetContainedObject : CCodePointer[(Pointer[Struct_IRunnableObject],Int),(CLong)],
);

alias IRunnableObjectVtbl = Struct_IRunnableObjectVtbl;

record Struct_IRunnableObject (
    lpVtbl : Pointer[Struct_IRunnableObjectVtbl],
);

external IRunnableObject_GetRunningClass_Proxy(
    This : Pointer[IRunnableObject],
    lpClsid : LPCLSID) CLong;

external IRunnableObject_GetRunningClass_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRunnableObject_Run_Proxy(
    This : Pointer[IRunnableObject],
    pbc : LPBINDCTX) CLong;

external IRunnableObject_Run_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRunnableObject_RemoteIsRunning_Proxy(
    This : Pointer[IRunnableObject]) CLong;

external IRunnableObject_RemoteIsRunning_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRunnableObject_LockRunning_Proxy(
    This : Pointer[IRunnableObject],
    fLock : Int,
    fLastUnlockCloses : Int) CLong;

external IRunnableObject_LockRunning_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRunnableObject_SetContainedObject_Proxy(
    This : Pointer[IRunnableObject],
    fContained : Int) CLong;

external IRunnableObject_SetContainedObject_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPRUNNINGOBJECTTABLE = Pointer[IRunningObjectTable];

external IID_IRunningObjectTable : IID;

record Struct_IRunningObjectTableVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IRunningObjectTable],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IRunningObjectTable]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IRunningObjectTable]),(CULong)],
    Register : CCodePointer[(Pointer[Struct_IRunningObjectTable],CULong,Pointer[Struct_IUnknown],Pointer[Struct_IMoniker],Pointer[CULong]),(CLong)],
    Revoke : CCodePointer[(Pointer[Struct_IRunningObjectTable],CULong),(CLong)],
    IsRunning : CCodePointer[(Pointer[Struct_IRunningObjectTable],Pointer[Struct_IMoniker]),(CLong)],
    GetObjectA : CCodePointer[(Pointer[Struct_IRunningObjectTable],Pointer[Struct_IMoniker],Pointer[Pointer[Struct_IUnknown]]),(CLong)],
    NoteChangeTime : CCodePointer[(Pointer[Struct_IRunningObjectTable],CULong,Pointer[Struct__FILETIME]),(CLong)],
    GetTimeOfLastChange : CCodePointer[(Pointer[Struct_IRunningObjectTable],Pointer[Struct_IMoniker],Pointer[Struct__FILETIME]),(CLong)],
    EnumRunning : CCodePointer[(Pointer[Struct_IRunningObjectTable],Pointer[Pointer[Struct_IEnumMoniker]]),(CLong)],
);

alias IRunningObjectTableVtbl = Struct_IRunningObjectTableVtbl;

record Struct_IRunningObjectTable (
    lpVtbl : Pointer[Struct_IRunningObjectTableVtbl],
);

external IRunningObjectTable_Register_Proxy(
    This : Pointer[IRunningObjectTable],
    grfFlags : CULong,
    punkObject : Pointer[IUnknown],
    pmkObjectName : Pointer[IMoniker],
    pdwRegister : Pointer[CULong]) CLong;

external IRunningObjectTable_Register_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRunningObjectTable_Revoke_Proxy(
    This : Pointer[IRunningObjectTable],
    dwRegister : CULong) CLong;

external IRunningObjectTable_Revoke_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRunningObjectTable_IsRunning_Proxy(
    This : Pointer[IRunningObjectTable],
    pmkObjectName : Pointer[IMoniker]) CLong;

external IRunningObjectTable_IsRunning_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRunningObjectTable_GetObject_Proxy(
    This : Pointer[IRunningObjectTable],
    pmkObjectName : Pointer[IMoniker],
    ppunkObject : Pointer[Pointer[IUnknown]]) CLong;

external IRunningObjectTable_GetObject_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRunningObjectTable_NoteChangeTime_Proxy(
    This : Pointer[IRunningObjectTable],
    dwRegister : CULong,
    pfiletime : Pointer[FILETIME]) CLong;

external IRunningObjectTable_NoteChangeTime_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRunningObjectTable_GetTimeOfLastChange_Proxy(
    This : Pointer[IRunningObjectTable],
    pmkObjectName : Pointer[IMoniker],
    pfiletime : Pointer[FILETIME]) CLong;

external IRunningObjectTable_GetTimeOfLastChange_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRunningObjectTable_EnumRunning_Proxy(
    This : Pointer[IRunningObjectTable],
    ppenumMoniker : Pointer[Pointer[IEnumMoniker]]) CLong;

external IRunningObjectTable_EnumRunning_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPPERSIST = Pointer[IPersist];

external IID_IPersist : IID;

record Struct_IPersistVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IPersist],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IPersist]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IPersist]),(CULong)],
    GetClassID : CCodePointer[(Pointer[Struct_IPersist],Pointer[Struct__GUID]),(CLong)],
);

alias IPersistVtbl = Struct_IPersistVtbl;

record Struct_IPersist (
    lpVtbl : Pointer[Struct_IPersistVtbl],
);

external IPersist_GetClassID_Proxy(
    This : Pointer[IPersist],
    pClassID : Pointer[CLSID]) CLong;

external IPersist_GetClassID_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPPERSISTSTREAM = Pointer[IPersistStream];

external IID_IPersistStream : IID;

record Struct_IPersistStreamVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IPersistStream],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IPersistStream]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IPersistStream]),(CULong)],
    GetClassID : CCodePointer[(Pointer[Struct_IPersistStream],Pointer[Struct__GUID]),(CLong)],
    IsDirty : CCodePointer[(Pointer[Struct_IPersistStream]),(CLong)],
    Load : CCodePointer[(Pointer[Struct_IPersistStream],Pointer[Struct_IStream]),(CLong)],
    Save : CCodePointer[(Pointer[Struct_IPersistStream],Pointer[Struct_IStream],Int),(CLong)],
    GetSizeMax : CCodePointer[(Pointer[Struct_IPersistStream],OpaquePointer),(CLong)],
);

alias IPersistStreamVtbl = Struct_IPersistStreamVtbl;

record Struct_IPersistStream (
    lpVtbl : Pointer[Struct_IPersistStreamVtbl],
);

external IPersistStream_IsDirty_Proxy(
    This : Pointer[IPersistStream]) CLong;

external IPersistStream_IsDirty_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IPersistStream_Load_Proxy(
    This : Pointer[IPersistStream],
    pStm : Pointer[IStream]) CLong;

external IPersistStream_Load_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IPersistStream_Save_Proxy(
    This : Pointer[IPersistStream],
    pStm : Pointer[IStream],
    fClearDirty : Int) CLong;

external IPersistStream_Save_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IPersistStream_GetSizeMax_Proxy(
    This : Pointer[IPersistStream],
    pcbSize : Pointer[ULARGE_INTEGER]) CLong;

external IPersistStream_GetSizeMax_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPMONIKER = Pointer[IMoniker];

alias MKSYS_NONE = 0;
alias MKSYS_GENERICCOMPOSITE = 1;
alias MKSYS_FILEMONIKER = 2;
alias MKSYS_ANTIMONIKER = 3;
alias MKSYS_ITEMMONIKER = 4;
alias MKSYS_POINTERMONIKER = 5;
alias MKSYS_CLASSMONIKER = 7;
alias MKSYS_OBJREFMONIKER = 8;
alias MKSYS_SESSIONMONIKER = 9;

alias MKSYS = Int;

alias MKRREDUCE_ONE = 196608;
alias MKRREDUCE_TOUSER = 131072;
alias MKRREDUCE_THROUGHUSER = 65536;
alias MKRREDUCE_ALL = 0;

alias MKRREDUCE = Int;

external IID_IMoniker : IID;

record Struct_IMonikerVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IMoniker],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IMoniker]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IMoniker]),(CULong)],
    GetClassID : CCodePointer[(Pointer[Struct_IMoniker],Pointer[Struct__GUID]),(CLong)],
    IsDirty : CCodePointer[(Pointer[Struct_IMoniker]),(CLong)],
    Load : CCodePointer[(Pointer[Struct_IMoniker],Pointer[Struct_IStream]),(CLong)],
    Save : CCodePointer[(Pointer[Struct_IMoniker],Pointer[Struct_IStream],Int),(CLong)],
    GetSizeMax : CCodePointer[(Pointer[Struct_IMoniker],OpaquePointer),(CLong)],
    BindToObject : CCodePointer[(Pointer[Struct_IMoniker],Pointer[Struct_IBindCtx],Pointer[Struct_IMoniker],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    BindToStorage : CCodePointer[(Pointer[Struct_IMoniker],Pointer[Struct_IBindCtx],Pointer[Struct_IMoniker],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    Reduce : CCodePointer[(Pointer[Struct_IMoniker],Pointer[Struct_IBindCtx],CULong,Pointer[Pointer[Struct_IMoniker]],Pointer[Pointer[Struct_IMoniker]]),(CLong)],
    ComposeWith : CCodePointer[(Pointer[Struct_IMoniker],Pointer[Struct_IMoniker],Int,Pointer[Pointer[Struct_IMoniker]]),(CLong)],
    Enum : CCodePointer[(Pointer[Struct_IMoniker],Int,Pointer[Pointer[Struct_IEnumMoniker]]),(CLong)],
    IsEqual : CCodePointer[(Pointer[Struct_IMoniker],Pointer[Struct_IMoniker]),(CLong)],
    Hash : CCodePointer[(Pointer[Struct_IMoniker],Pointer[CULong]),(CLong)],
    IsRunning : CCodePointer[(Pointer[Struct_IMoniker],Pointer[Struct_IBindCtx],Pointer[Struct_IMoniker],Pointer[Struct_IMoniker]),(CLong)],
    GetTimeOfLastChange : CCodePointer[(Pointer[Struct_IMoniker],Pointer[Struct_IBindCtx],Pointer[Struct_IMoniker],Pointer[Struct__FILETIME]),(CLong)],
    Inverse : CCodePointer[(Pointer[Struct_IMoniker],Pointer[Pointer[Struct_IMoniker]]),(CLong)],
    CommonPrefixWith : CCodePointer[(Pointer[Struct_IMoniker],Pointer[Struct_IMoniker],Pointer[Pointer[Struct_IMoniker]]),(CLong)],
    RelativePathTo : CCodePointer[(Pointer[Struct_IMoniker],Pointer[Struct_IMoniker],Pointer[Pointer[Struct_IMoniker]]),(CLong)],
    GetDisplayName : CCodePointer[(Pointer[Struct_IMoniker],Pointer[Struct_IBindCtx],Pointer[Struct_IMoniker],Pointer[Pointer[UShort]]),(CLong)],
    ParseDisplayName : CCodePointer[(Pointer[Struct_IMoniker],Pointer[Struct_IBindCtx],Pointer[Struct_IMoniker],Pointer[UShort],Pointer[CULong],Pointer[Pointer[Struct_IMoniker]]),(CLong)],
    IsSystemMoniker : CCodePointer[(Pointer[Struct_IMoniker],Pointer[CULong]),(CLong)],
);

alias IMonikerVtbl = Struct_IMonikerVtbl;

record Struct_IMoniker (
    lpVtbl : Pointer[Struct_IMonikerVtbl],
);

external IMoniker_RemoteBindToObject_Proxy(
    This : Pointer[IMoniker],
    pbc : Pointer[IBindCtx],
    pmkToLeft : Pointer[IMoniker],
    riidResult : Pointer[IID],
    ppvResult : Pointer[Pointer[IUnknown]]) CLong;

external IMoniker_RemoteBindToObject_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IMoniker_RemoteBindToStorage_Proxy(
    This : Pointer[IMoniker],
    pbc : Pointer[IBindCtx],
    pmkToLeft : Pointer[IMoniker],
    riid : Pointer[IID],
    ppvObj : Pointer[Pointer[IUnknown]]) CLong;

external IMoniker_RemoteBindToStorage_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IMoniker_Reduce_Proxy(
    This : Pointer[IMoniker],
    pbc : Pointer[IBindCtx],
    dwReduceHowFar : CULong,
    ppmkToLeft : Pointer[Pointer[IMoniker]],
    ppmkReduced : Pointer[Pointer[IMoniker]]) CLong;

external IMoniker_Reduce_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IMoniker_ComposeWith_Proxy(
    This : Pointer[IMoniker],
    pmkRight : Pointer[IMoniker],
    fOnlyIfNotGeneric : Int,
    ppmkComposite : Pointer[Pointer[IMoniker]]) CLong;

external IMoniker_ComposeWith_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IMoniker_Enum_Proxy(
    This : Pointer[IMoniker],
    fForward : Int,
    ppenumMoniker : Pointer[Pointer[IEnumMoniker]]) CLong;

external IMoniker_Enum_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IMoniker_IsEqual_Proxy(
    This : Pointer[IMoniker],
    pmkOtherMoniker : Pointer[IMoniker]) CLong;

external IMoniker_IsEqual_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IMoniker_Hash_Proxy(
    This : Pointer[IMoniker],
    pdwHash : Pointer[CULong]) CLong;

external IMoniker_Hash_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IMoniker_IsRunning_Proxy(
    This : Pointer[IMoniker],
    pbc : Pointer[IBindCtx],
    pmkToLeft : Pointer[IMoniker],
    pmkNewlyRunning : Pointer[IMoniker]) CLong;

external IMoniker_IsRunning_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IMoniker_GetTimeOfLastChange_Proxy(
    This : Pointer[IMoniker],
    pbc : Pointer[IBindCtx],
    pmkToLeft : Pointer[IMoniker],
    pFileTime : Pointer[FILETIME]) CLong;

external IMoniker_GetTimeOfLastChange_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IMoniker_Inverse_Proxy(
    This : Pointer[IMoniker],
    ppmk : Pointer[Pointer[IMoniker]]) CLong;

external IMoniker_Inverse_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IMoniker_CommonPrefixWith_Proxy(
    This : Pointer[IMoniker],
    pmkOther : Pointer[IMoniker],
    ppmkPrefix : Pointer[Pointer[IMoniker]]) CLong;

external IMoniker_CommonPrefixWith_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IMoniker_RelativePathTo_Proxy(
    This : Pointer[IMoniker],
    pmkOther : Pointer[IMoniker],
    ppmkRelPath : Pointer[Pointer[IMoniker]]) CLong;

external IMoniker_RelativePathTo_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IMoniker_GetDisplayName_Proxy(
    This : Pointer[IMoniker],
    pbc : Pointer[IBindCtx],
    pmkToLeft : Pointer[IMoniker],
    ppszDisplayName : Pointer[LPOLESTR]) CLong;

external IMoniker_GetDisplayName_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IMoniker_ParseDisplayName_Proxy(
    This : Pointer[IMoniker],
    pbc : Pointer[IBindCtx],
    pmkToLeft : Pointer[IMoniker],
    pszDisplayName : LPOLESTR,
    pchEaten : Pointer[CULong],
    ppmkOut : Pointer[Pointer[IMoniker]]) CLong;

external IMoniker_ParseDisplayName_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IMoniker_IsSystemMoniker_Proxy(
    This : Pointer[IMoniker],
    pdwMksys : Pointer[CULong]) CLong;

external IMoniker_IsSystemMoniker_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IROTData : IID;

record Struct_IROTDataVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IROTData],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IROTData]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IROTData]),(CULong)],
    GetComparisonData : CCodePointer[(Pointer[Struct_IROTData],Pointer[CUChar],CULong,Pointer[CULong]),(CLong)],
);

alias IROTDataVtbl = Struct_IROTDataVtbl;

record Struct_IROTData (
    lpVtbl : Pointer[Struct_IROTDataVtbl],
);

external IROTData_GetComparisonData_Proxy(
    This : Pointer[IROTData],
    pbData : Pointer[CUChar],
    cbMax : CULong,
    pcbData : Pointer[CULong]) CLong;

external IROTData_GetComparisonData_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPENUMSTRING = Pointer[IEnumString];

external IID_IEnumString : IID;

record Struct_IEnumStringVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IEnumString],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IEnumString]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IEnumString]),(CULong)],
    Next : CCodePointer[(Pointer[Struct_IEnumString],CULong,Pointer[Pointer[UShort]],Pointer[CULong]),(CLong)],
    Skip : CCodePointer[(Pointer[Struct_IEnumString],CULong),(CLong)],
    Reset : CCodePointer[(Pointer[Struct_IEnumString]),(CLong)],
    Clone : CCodePointer[(Pointer[Struct_IEnumString],Pointer[Pointer[Struct_IEnumString]]),(CLong)],
);

alias IEnumStringVtbl = Struct_IEnumStringVtbl;

record Struct_IEnumString (
    lpVtbl : Pointer[Struct_IEnumStringVtbl],
);

external IEnumString_RemoteNext_Proxy(
    This : Pointer[IEnumString],
    celt : CULong,
    rgelt : Pointer[LPOLESTR],
    pceltFetched : Pointer[CULong]) CLong;

external IEnumString_RemoteNext_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IEnumString_Skip_Proxy(
    This : Pointer[IEnumString],
    celt : CULong) CLong;

external IEnumString_Skip_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IEnumString_Reset_Proxy(
    This : Pointer[IEnumString]) CLong;

external IEnumString_Reset_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IEnumString_Clone_Proxy(
    This : Pointer[IEnumString],
    ppenum : Pointer[Pointer[IEnumString]]) CLong;

external IEnumString_Clone_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_ISequentialStream : IID;

record Struct_ISequentialStreamVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_ISequentialStream],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_ISequentialStream]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_ISequentialStream]),(CULong)],
    Read : CCodePointer[(Pointer[Struct_ISequentialStream],RawPointer,CULong,Pointer[CULong]),(CLong)],
    Write : CCodePointer[(Pointer[Struct_ISequentialStream],RawPointer,CULong,Pointer[CULong]),(CLong)],
);

alias ISequentialStreamVtbl = Struct_ISequentialStreamVtbl;

record Struct_ISequentialStream (
    lpVtbl : Pointer[Struct_ISequentialStreamVtbl],
);

external ISequentialStream_RemoteRead_Proxy(
    This : Pointer[ISequentialStream],
    pv : Pointer[CUChar],
    cb : CULong,
    pcbRead : Pointer[CULong]) CLong;

external ISequentialStream_RemoteRead_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ISequentialStream_RemoteWrite_Proxy(
    This : Pointer[ISequentialStream],
    pv : Pointer[CUChar],
    cb : CULong,
    pcbWritten : Pointer[CULong]) CLong;

external ISequentialStream_RemoteWrite_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPSTREAM = Pointer[IStream];

record Struct_tagSTATSTG (
    pwcsName : LPOLESTR,
    type : CULong,
    cbSize : ULARGE_INTEGER,
    mtime : FILETIME,
    ctime : FILETIME,
    atime : FILETIME,
    grfMode : CULong,
    grfLocksSupported : CULong,
    clsid : CLSID,
    grfStateBits : CULong,
    reserved : CULong,
);

alias STATSTG = Struct_tagSTATSTG;

alias STGTY_STORAGE = 1;
alias STGTY_STREAM = 2;
alias STGTY_LOCKBYTES = 3;
alias STGTY_PROPERTY = 4;

alias STGTY = Int;

alias STREAM_SEEK_SET = 0;
alias STREAM_SEEK_CUR = 1;
alias STREAM_SEEK_END = 2;

alias STREAM_SEEK = Int;

alias LOCK_WRITE = 1;
alias LOCK_EXCLUSIVE = 2;
alias LOCK_ONLYONCE = 4;

alias LOCKTYPE = Int;

external IID_IStream : IID;

record Struct_IStreamVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IStream],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IStream]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IStream]),(CULong)],
    Read : CCodePointer[(Pointer[Struct_IStream],RawPointer,CULong,Pointer[CULong]),(CLong)],
    Write : CCodePointer[(Pointer[Struct_IStream],RawPointer,CULong,Pointer[CULong]),(CLong)],
    Seek : CCodePointer[(Pointer[Struct_IStream],AUnionType,CULong,OpaquePointer),(CLong)],
    SetSize : CCodePointer[(Pointer[Struct_IStream],AUnionType),(CLong)],
    CopyTo : CCodePointer[(Pointer[Struct_IStream],Pointer[Struct_IStream],AUnionType,OpaquePointer,OpaquePointer),(CLong)],
    Commit : CCodePointer[(Pointer[Struct_IStream],CULong),(CLong)],
    Revert : CCodePointer[(Pointer[Struct_IStream]),(CLong)],
    LockRegion : CCodePointer[(Pointer[Struct_IStream],AUnionType,AUnionType,CULong),(CLong)],
    UnlockRegion : CCodePointer[(Pointer[Struct_IStream],AUnionType,AUnionType,CULong),(CLong)],
    Stat : CCodePointer[(Pointer[Struct_IStream],Pointer[Struct_tagSTATSTG],CULong),(CLong)],
    Clone : CCodePointer[(Pointer[Struct_IStream],Pointer[Pointer[Struct_IStream]]),(CLong)],
);

alias IStreamVtbl = Struct_IStreamVtbl;

record Struct_IStream (
    lpVtbl : Pointer[Struct_IStreamVtbl],
);

external IStream_RemoteSeek_Proxy(
    This : Pointer[IStream],
    dlibMove : LARGE_INTEGER,
    dwOrigin : CULong,
    plibNewPosition : Pointer[ULARGE_INTEGER]) CLong;

external IStream_RemoteSeek_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IStream_SetSize_Proxy(
    This : Pointer[IStream],
    libNewSize : ULARGE_INTEGER) CLong;

external IStream_SetSize_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IStream_RemoteCopyTo_Proxy(
    This : Pointer[IStream],
    pstm : Pointer[IStream],
    cb : ULARGE_INTEGER,
    pcbRead : Pointer[ULARGE_INTEGER],
    pcbWritten : Pointer[ULARGE_INTEGER]) CLong;

external IStream_RemoteCopyTo_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IStream_Commit_Proxy(
    This : Pointer[IStream],
    grfCommitFlags : CULong) CLong;

external IStream_Commit_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IStream_Revert_Proxy(
    This : Pointer[IStream]) CLong;

external IStream_Revert_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IStream_LockRegion_Proxy(
    This : Pointer[IStream],
    libOffset : ULARGE_INTEGER,
    cb : ULARGE_INTEGER,
    dwLockType : CULong) CLong;

external IStream_LockRegion_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IStream_UnlockRegion_Proxy(
    This : Pointer[IStream],
    libOffset : ULARGE_INTEGER,
    cb : ULARGE_INTEGER,
    dwLockType : CULong) CLong;

external IStream_UnlockRegion_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IStream_Stat_Proxy(
    This : Pointer[IStream],
    pstatstg : Pointer[STATSTG],
    grfStatFlag : CULong) CLong;

external IStream_Stat_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IStream_Clone_Proxy(
    This : Pointer[IStream],
    ppstm : Pointer[Pointer[IStream]]) CLong;

external IStream_Clone_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPENUMSTATSTG = Pointer[IEnumSTATSTG];

external IID_IEnumSTATSTG : IID;

record Struct_IEnumSTATSTGVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IEnumSTATSTG],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IEnumSTATSTG]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IEnumSTATSTG]),(CULong)],
    Next : CCodePointer[(Pointer[Struct_IEnumSTATSTG],CULong,Pointer[Struct_tagSTATSTG],Pointer[CULong]),(CLong)],
    Skip : CCodePointer[(Pointer[Struct_IEnumSTATSTG],CULong),(CLong)],
    Reset : CCodePointer[(Pointer[Struct_IEnumSTATSTG]),(CLong)],
    Clone : CCodePointer[(Pointer[Struct_IEnumSTATSTG],Pointer[Pointer[Struct_IEnumSTATSTG]]),(CLong)],
);

alias IEnumSTATSTGVtbl = Struct_IEnumSTATSTGVtbl;

record Struct_IEnumSTATSTG (
    lpVtbl : Pointer[Struct_IEnumSTATSTGVtbl],
);

external IEnumSTATSTG_RemoteNext_Proxy(
    This : Pointer[IEnumSTATSTG],
    celt : CULong,
    rgelt : Pointer[STATSTG],
    pceltFetched : Pointer[CULong]) CLong;

external IEnumSTATSTG_RemoteNext_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IEnumSTATSTG_Skip_Proxy(
    This : Pointer[IEnumSTATSTG],
    celt : CULong) CLong;

external IEnumSTATSTG_Skip_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IEnumSTATSTG_Reset_Proxy(
    This : Pointer[IEnumSTATSTG]) CLong;

external IEnumSTATSTG_Reset_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IEnumSTATSTG_Clone_Proxy(
    This : Pointer[IEnumSTATSTG],
    ppenum : Pointer[Pointer[IEnumSTATSTG]]) CLong;

external IEnumSTATSTG_Clone_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPSTORAGE = Pointer[IStorage];

record Struct_tagRemSNB (
    ulCntStr : CULong,
    ulCntChar : CULong,
    rgString : Array[UShort,1],
);

alias RemSNB = Struct_tagRemSNB;

alias wireSNB = Pointer[RemSNB];

alias SNB = Pointer[Pointer[UShort]];

external IID_IStorage : IID;

record Struct_IStorageVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IStorage],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IStorage]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IStorage]),(CULong)],
    CreateStream : CCodePointer[(Pointer[Struct_IStorage],Pointer[UShort],CULong,CULong,CULong,Pointer[Pointer[Struct_IStream]]),(CLong)],
    OpenStream : CCodePointer[(Pointer[Struct_IStorage],Pointer[UShort],RawPointer,CULong,CULong,Pointer[Pointer[Struct_IStream]]),(CLong)],
    CreateStorage : CCodePointer[(Pointer[Struct_IStorage],Pointer[UShort],CULong,CULong,CULong,Pointer[Pointer[Struct_IStorage]]),(CLong)],
    OpenStorage : CCodePointer[(Pointer[Struct_IStorage],Pointer[UShort],Pointer[Struct_IStorage],CULong,Pointer[Pointer[UShort]],CULong,Pointer[Pointer[Struct_IStorage]]),(CLong)],
    CopyTo : CCodePointer[(Pointer[Struct_IStorage],CULong,Pointer[Struct__GUID],Pointer[Pointer[UShort]],Pointer[Struct_IStorage]),(CLong)],
    MoveElementTo : CCodePointer[(Pointer[Struct_IStorage],Pointer[UShort],Pointer[Struct_IStorage],Pointer[UShort],CULong),(CLong)],
    Commit : CCodePointer[(Pointer[Struct_IStorage],CULong),(CLong)],
    Revert : CCodePointer[(Pointer[Struct_IStorage]),(CLong)],
    EnumElements : CCodePointer[(Pointer[Struct_IStorage],CULong,RawPointer,CULong,Pointer[Pointer[Struct_IEnumSTATSTG]]),(CLong)],
    DestroyElement : CCodePointer[(Pointer[Struct_IStorage],Pointer[UShort]),(CLong)],
    RenameElement : CCodePointer[(Pointer[Struct_IStorage],Pointer[UShort],Pointer[UShort]),(CLong)],
    SetElementTimes : CCodePointer[(Pointer[Struct_IStorage],Pointer[UShort],Pointer[Struct__FILETIME],Pointer[Struct__FILETIME],Pointer[Struct__FILETIME]),(CLong)],
    SetClass : CCodePointer[(Pointer[Struct_IStorage],Pointer[Struct__GUID]),(CLong)],
    SetStateBits : CCodePointer[(Pointer[Struct_IStorage],CULong,CULong),(CLong)],
    Stat : CCodePointer[(Pointer[Struct_IStorage],Pointer[Struct_tagSTATSTG],CULong),(CLong)],
);

alias IStorageVtbl = Struct_IStorageVtbl;

record Struct_IStorage (
    lpVtbl : Pointer[Struct_IStorageVtbl],
);

external IStorage_CreateStream_Proxy(
    This : Pointer[IStorage],
    pwcsName : Pointer[UShort],
    grfMode : CULong,
    reserved1 : CULong,
    reserved2 : CULong,
    ppstm : Pointer[Pointer[IStream]]) CLong;

external IStorage_CreateStream_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IStorage_RemoteOpenStream_Proxy(
    This : Pointer[IStorage],
    pwcsName : Pointer[UShort],
    cbReserved1 : CULong,
    reserved1 : Pointer[CUChar],
    grfMode : CULong,
    reserved2 : CULong,
    ppstm : Pointer[Pointer[IStream]]) CLong;

external IStorage_RemoteOpenStream_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IStorage_CreateStorage_Proxy(
    This : Pointer[IStorage],
    pwcsName : Pointer[UShort],
    grfMode : CULong,
    reserved1 : CULong,
    reserved2 : CULong,
    ppstg : Pointer[Pointer[IStorage]]) CLong;

external IStorage_CreateStorage_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IStorage_OpenStorage_Proxy(
    This : Pointer[IStorage],
    pwcsName : Pointer[UShort],
    pstgPriority : Pointer[IStorage],
    grfMode : CULong,
    snbExclude : SNB,
    reserved : CULong,
    ppstg : Pointer[Pointer[IStorage]]) CLong;

external IStorage_OpenStorage_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IStorage_CopyTo_Proxy(
    This : Pointer[IStorage],
    ciidExclude : CULong,
    rgiidExclude : Pointer[IID],
    snbExclude : SNB,
    pstgDest : Pointer[IStorage]) CLong;

external IStorage_CopyTo_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IStorage_MoveElementTo_Proxy(
    This : Pointer[IStorage],
    pwcsName : Pointer[UShort],
    pstgDest : Pointer[IStorage],
    pwcsNewName : Pointer[UShort],
    grfFlags : CULong) CLong;

external IStorage_MoveElementTo_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IStorage_Commit_Proxy(
    This : Pointer[IStorage],
    grfCommitFlags : CULong) CLong;

external IStorage_Commit_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IStorage_Revert_Proxy(
    This : Pointer[IStorage]) CLong;

external IStorage_Revert_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IStorage_RemoteEnumElements_Proxy(
    This : Pointer[IStorage],
    reserved1 : CULong,
    cbReserved2 : CULong,
    reserved2 : Pointer[CUChar],
    reserved3 : CULong,
    ppenum : Pointer[Pointer[IEnumSTATSTG]]) CLong;

external IStorage_RemoteEnumElements_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IStorage_DestroyElement_Proxy(
    This : Pointer[IStorage],
    pwcsName : Pointer[UShort]) CLong;

external IStorage_DestroyElement_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IStorage_RenameElement_Proxy(
    This : Pointer[IStorage],
    pwcsOldName : Pointer[UShort],
    pwcsNewName : Pointer[UShort]) CLong;

external IStorage_RenameElement_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IStorage_SetElementTimes_Proxy(
    This : Pointer[IStorage],
    pwcsName : Pointer[UShort],
    pctime : Pointer[FILETIME],
    patime : Pointer[FILETIME],
    pmtime : Pointer[FILETIME]) CLong;

external IStorage_SetElementTimes_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IStorage_SetClass_Proxy(
    This : Pointer[IStorage],
    clsid : Pointer[IID]) CLong;

external IStorage_SetClass_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IStorage_SetStateBits_Proxy(
    This : Pointer[IStorage],
    grfStateBits : CULong,
    grfMask : CULong) CLong;

external IStorage_SetStateBits_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IStorage_Stat_Proxy(
    This : Pointer[IStorage],
    pstatstg : Pointer[STATSTG],
    grfStatFlag : CULong) CLong;

external IStorage_Stat_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPPERSISTFILE = Pointer[IPersistFile];

external IID_IPersistFile : IID;

record Struct_IPersistFileVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IPersistFile],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IPersistFile]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IPersistFile]),(CULong)],
    GetClassID : CCodePointer[(Pointer[Struct_IPersistFile],Pointer[Struct__GUID]),(CLong)],
    IsDirty : CCodePointer[(Pointer[Struct_IPersistFile]),(CLong)],
    Load : CCodePointer[(Pointer[Struct_IPersistFile],Pointer[UShort],CULong),(CLong)],
    Save : CCodePointer[(Pointer[Struct_IPersistFile],Pointer[UShort],Int),(CLong)],
    SaveCompleted : CCodePointer[(Pointer[Struct_IPersistFile],Pointer[UShort]),(CLong)],
    GetCurFile : CCodePointer[(Pointer[Struct_IPersistFile],Pointer[Pointer[UShort]]),(CLong)],
);

alias IPersistFileVtbl = Struct_IPersistFileVtbl;

record Struct_IPersistFile (
    lpVtbl : Pointer[Struct_IPersistFileVtbl],
);

external IPersistFile_IsDirty_Proxy(
    This : Pointer[IPersistFile]) CLong;

external IPersistFile_IsDirty_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IPersistFile_Load_Proxy(
    This : Pointer[IPersistFile],
    pszFileName : LPCOLESTR,
    dwMode : CULong) CLong;

external IPersistFile_Load_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IPersistFile_Save_Proxy(
    This : Pointer[IPersistFile],
    pszFileName : LPCOLESTR,
    fRemember : Int) CLong;

external IPersistFile_Save_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IPersistFile_SaveCompleted_Proxy(
    This : Pointer[IPersistFile],
    pszFileName : LPCOLESTR) CLong;

external IPersistFile_SaveCompleted_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IPersistFile_GetCurFile_Proxy(
    This : Pointer[IPersistFile],
    ppszFileName : Pointer[LPOLESTR]) CLong;

external IPersistFile_GetCurFile_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPPERSISTSTORAGE = Pointer[IPersistStorage];

external IID_IPersistStorage : IID;

record Struct_IPersistStorageVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IPersistStorage],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IPersistStorage]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IPersistStorage]),(CULong)],
    GetClassID : CCodePointer[(Pointer[Struct_IPersistStorage],Pointer[Struct__GUID]),(CLong)],
    IsDirty : CCodePointer[(Pointer[Struct_IPersistStorage]),(CLong)],
    InitNew : CCodePointer[(Pointer[Struct_IPersistStorage],Pointer[Struct_IStorage]),(CLong)],
    Load : CCodePointer[(Pointer[Struct_IPersistStorage],Pointer[Struct_IStorage]),(CLong)],
    Save : CCodePointer[(Pointer[Struct_IPersistStorage],Pointer[Struct_IStorage],Int),(CLong)],
    SaveCompleted : CCodePointer[(Pointer[Struct_IPersistStorage],Pointer[Struct_IStorage]),(CLong)],
    HandsOffStorage : CCodePointer[(Pointer[Struct_IPersistStorage]),(CLong)],
);

alias IPersistStorageVtbl = Struct_IPersistStorageVtbl;

record Struct_IPersistStorage (
    lpVtbl : Pointer[Struct_IPersistStorageVtbl],
);

external IPersistStorage_IsDirty_Proxy(
    This : Pointer[IPersistStorage]) CLong;

external IPersistStorage_IsDirty_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IPersistStorage_InitNew_Proxy(
    This : Pointer[IPersistStorage],
    pStg : Pointer[IStorage]) CLong;

external IPersistStorage_InitNew_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IPersistStorage_Load_Proxy(
    This : Pointer[IPersistStorage],
    pStg : Pointer[IStorage]) CLong;

external IPersistStorage_Load_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IPersistStorage_Save_Proxy(
    This : Pointer[IPersistStorage],
    pStgSave : Pointer[IStorage],
    fSameAsLoad : Int) CLong;

external IPersistStorage_Save_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IPersistStorage_SaveCompleted_Proxy(
    This : Pointer[IPersistStorage],
    pStgNew : Pointer[IStorage]) CLong;

external IPersistStorage_SaveCompleted_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IPersistStorage_HandsOffStorage_Proxy(
    This : Pointer[IPersistStorage]) CLong;

external IPersistStorage_HandsOffStorage_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPLOCKBYTES = Pointer[ILockBytes];

external IID_ILockBytes : IID;

record Struct_ILockBytesVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_ILockBytes],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_ILockBytes]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_ILockBytes]),(CULong)],
    ReadAt : CCodePointer[(Pointer[Struct_ILockBytes],AUnionType,RawPointer,CULong,Pointer[CULong]),(CLong)],
    WriteAt : CCodePointer[(Pointer[Struct_ILockBytes],AUnionType,RawPointer,CULong,Pointer[CULong]),(CLong)],
    Flush : CCodePointer[(Pointer[Struct_ILockBytes]),(CLong)],
    SetSize : CCodePointer[(Pointer[Struct_ILockBytes],AUnionType),(CLong)],
    LockRegion : CCodePointer[(Pointer[Struct_ILockBytes],AUnionType,AUnionType,CULong),(CLong)],
    UnlockRegion : CCodePointer[(Pointer[Struct_ILockBytes],AUnionType,AUnionType,CULong),(CLong)],
    Stat : CCodePointer[(Pointer[Struct_ILockBytes],Pointer[Struct_tagSTATSTG],CULong),(CLong)],
);

alias ILockBytesVtbl = Struct_ILockBytesVtbl;

record Struct_ILockBytes (
    lpVtbl : Pointer[Struct_ILockBytesVtbl],
);

external ILockBytes_RemoteReadAt_Proxy(
    This : Pointer[ILockBytes],
    ulOffset : ULARGE_INTEGER,
    pv : Pointer[CUChar],
    cb : CULong,
    pcbRead : Pointer[CULong]) CLong;

external ILockBytes_RemoteReadAt_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ILockBytes_RemoteWriteAt_Proxy(
    This : Pointer[ILockBytes],
    ulOffset : ULARGE_INTEGER,
    pv : Pointer[CUChar],
    cb : CULong,
    pcbWritten : Pointer[CULong]) CLong;

external ILockBytes_RemoteWriteAt_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ILockBytes_Flush_Proxy(
    This : Pointer[ILockBytes]) CLong;

external ILockBytes_Flush_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ILockBytes_SetSize_Proxy(
    This : Pointer[ILockBytes],
    cb : ULARGE_INTEGER) CLong;

external ILockBytes_SetSize_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ILockBytes_LockRegion_Proxy(
    This : Pointer[ILockBytes],
    libOffset : ULARGE_INTEGER,
    cb : ULARGE_INTEGER,
    dwLockType : CULong) CLong;

external ILockBytes_LockRegion_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ILockBytes_UnlockRegion_Proxy(
    This : Pointer[ILockBytes],
    libOffset : ULARGE_INTEGER,
    cb : ULARGE_INTEGER,
    dwLockType : CULong) CLong;

external ILockBytes_UnlockRegion_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ILockBytes_Stat_Proxy(
    This : Pointer[ILockBytes],
    pstatstg : Pointer[STATSTG],
    grfStatFlag : CULong) CLong;

external ILockBytes_Stat_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPENUMFORMATETC = Pointer[IEnumFORMATETC];

record Struct_tagDVTARGETDEVICE (
    tdSize : CULong,
    tdDriverNameOffset : UShort,
    tdDeviceNameOffset : UShort,
    tdPortNameOffset : UShort,
    tdExtDevmodeOffset : UShort,
    tdData : Array[CUChar,1],
);

alias DVTARGETDEVICE = Struct_tagDVTARGETDEVICE;

alias LPCLIPFORMAT = Pointer[UShort];

record Struct_tagFORMATETC (
    cfFormat : UShort,
    ptd : Pointer[DVTARGETDEVICE],
    dwAspect : CULong,
    lindex : CLong,
    tymed : CULong,
);

alias FORMATETC = Struct_tagFORMATETC;

alias LPFORMATETC = Pointer[Struct_tagFORMATETC];

external IID_IEnumFORMATETC : IID;

record Struct_IEnumFORMATETCVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IEnumFORMATETC],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IEnumFORMATETC]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IEnumFORMATETC]),(CULong)],
    Next : CCodePointer[(Pointer[Struct_IEnumFORMATETC],CULong,Pointer[Struct_tagFORMATETC],Pointer[CULong]),(CLong)],
    Skip : CCodePointer[(Pointer[Struct_IEnumFORMATETC],CULong),(CLong)],
    Reset : CCodePointer[(Pointer[Struct_IEnumFORMATETC]),(CLong)],
    Clone : CCodePointer[(Pointer[Struct_IEnumFORMATETC],Pointer[Pointer[Struct_IEnumFORMATETC]]),(CLong)],
);

alias IEnumFORMATETCVtbl = Struct_IEnumFORMATETCVtbl;

record Struct_IEnumFORMATETC (
    lpVtbl : Pointer[Struct_IEnumFORMATETCVtbl],
);

external IEnumFORMATETC_RemoteNext_Proxy(
    This : Pointer[IEnumFORMATETC],
    celt : CULong,
    rgelt : Pointer[FORMATETC],
    pceltFetched : Pointer[CULong]) CLong;

external IEnumFORMATETC_RemoteNext_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IEnumFORMATETC_Skip_Proxy(
    This : Pointer[IEnumFORMATETC],
    celt : CULong) CLong;

external IEnumFORMATETC_Skip_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IEnumFORMATETC_Reset_Proxy(
    This : Pointer[IEnumFORMATETC]) CLong;

external IEnumFORMATETC_Reset_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IEnumFORMATETC_Clone_Proxy(
    This : Pointer[IEnumFORMATETC],
    ppenum : Pointer[Pointer[IEnumFORMATETC]]) CLong;

external IEnumFORMATETC_Clone_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPENUMSTATDATA = Pointer[IEnumSTATDATA];

alias ADVF_NODATA = 1;
alias ADVF_PRIMEFIRST = 2;
alias ADVF_ONLYONCE = 4;
alias ADVF_DATAONSTOP = 64;
alias ADVFCACHE_NOHANDLER = 8;
alias ADVFCACHE_FORCEBUILTIN = 16;
alias ADVFCACHE_ONSAVE = 32;

alias ADVF = Int;

record Struct_tagSTATDATA (
    formatetc : FORMATETC,
    advf : CULong,
    pAdvSink : Pointer[IAdviseSink],
    dwConnection : CULong,
);

alias STATDATA = Struct_tagSTATDATA;

alias LPSTATDATA = Pointer[STATDATA];

external IID_IEnumSTATDATA : IID;

record Struct_IEnumSTATDATAVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IEnumSTATDATA],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IEnumSTATDATA]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IEnumSTATDATA]),(CULong)],
    Next : CCodePointer[(Pointer[Struct_IEnumSTATDATA],CULong,Pointer[Struct_tagSTATDATA],Pointer[CULong]),(CLong)],
    Skip : CCodePointer[(Pointer[Struct_IEnumSTATDATA],CULong),(CLong)],
    Reset : CCodePointer[(Pointer[Struct_IEnumSTATDATA]),(CLong)],
    Clone : CCodePointer[(Pointer[Struct_IEnumSTATDATA],Pointer[Pointer[Struct_IEnumSTATDATA]]),(CLong)],
);

alias IEnumSTATDATAVtbl = Struct_IEnumSTATDATAVtbl;

record Struct_IEnumSTATDATA (
    lpVtbl : Pointer[Struct_IEnumSTATDATAVtbl],
);

external IEnumSTATDATA_RemoteNext_Proxy(
    This : Pointer[IEnumSTATDATA],
    celt : CULong,
    rgelt : Pointer[STATDATA],
    pceltFetched : Pointer[CULong]) CLong;

external IEnumSTATDATA_RemoteNext_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IEnumSTATDATA_Skip_Proxy(
    This : Pointer[IEnumSTATDATA],
    celt : CULong) CLong;

external IEnumSTATDATA_Skip_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IEnumSTATDATA_Reset_Proxy(
    This : Pointer[IEnumSTATDATA]) CLong;

external IEnumSTATDATA_Reset_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IEnumSTATDATA_Clone_Proxy(
    This : Pointer[IEnumSTATDATA],
    ppenum : Pointer[Pointer[IEnumSTATDATA]]) CLong;

external IEnumSTATDATA_Clone_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPROOTSTORAGE = Pointer[IRootStorage];

external IID_IRootStorage : IID;

record Struct_IRootStorageVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IRootStorage],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IRootStorage]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IRootStorage]),(CULong)],
    SwitchToFile : CCodePointer[(Pointer[Struct_IRootStorage],Pointer[UShort]),(CLong)],
);

alias IRootStorageVtbl = Struct_IRootStorageVtbl;

record Struct_IRootStorage (
    lpVtbl : Pointer[Struct_IRootStorageVtbl],
);

external IRootStorage_SwitchToFile_Proxy(
    This : Pointer[IRootStorage],
    pszFile : LPOLESTR) CLong;

external IRootStorage_SwitchToFile_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPADVISESINK = Pointer[IAdviseSink];

alias TYMED_HGLOBAL = 1;
alias TYMED_FILE = 2;
alias TYMED_ISTREAM = 4;
alias TYMED_ISTORAGE = 8;
alias TYMED_GDI = 16;
alias TYMED_MFPICT = 32;
alias TYMED_ENHMF = 64;
alias TYMED_NULL = 0;

alias TYMED = Int;

record Struct_tagRemSTGMEDIUM (
    tymed : CULong,
    dwHandleType : CULong,
    pData : CULong,
    pUnkForRelease : CULong,
    cbData : CULong,
    data : Array[CUChar,1],
);

alias RemSTGMEDIUM = Struct_tagRemSTGMEDIUM;

record Struct_tagSTGMEDIUM (
    tymed : CULong,
    unnamed_field1 : AUnionType,
    pUnkForRelease : Pointer[IUnknown],
);

alias uSTGMEDIUM = Struct_tagSTGMEDIUM;

record Struct__GDI_OBJECT (
    ObjectType : CULong,
    u : AUnionType,
);

alias GDI_OBJECT = Struct__GDI_OBJECT;

record Struct__userSTGMEDIUM (
    _unnamed : Opaque,
    pUnkForRelease : Pointer[IUnknown],
);

alias userSTGMEDIUM = Struct__userSTGMEDIUM;

alias wireSTGMEDIUM = Pointer[userSTGMEDIUM];

alias STGMEDIUM = uSTGMEDIUM;

alias wireASYNC_STGMEDIUM = Pointer[userSTGMEDIUM];

alias ASYNC_STGMEDIUM = STGMEDIUM;

alias LPSTGMEDIUM = Pointer[STGMEDIUM];

record Struct__userFLAG_STGMEDIUM (
    ContextFlags : CLong,
    fPassOwnership : CLong,
    Stgmed : userSTGMEDIUM,
);

alias userFLAG_STGMEDIUM = Struct__userFLAG_STGMEDIUM;

alias wireFLAG_STGMEDIUM = Pointer[userFLAG_STGMEDIUM];

record Struct__FLAG_STGMEDIUM (
    ContextFlags : CLong,
    fPassOwnership : CLong,
    Stgmed : STGMEDIUM,
);

alias FLAG_STGMEDIUM = Struct__FLAG_STGMEDIUM;

external IID_IAdviseSink : IID;

record Struct_IAdviseSinkVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IAdviseSink],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IAdviseSink]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IAdviseSink]),(CULong)],
    OnDataChange : CCodePointer[(Pointer[Struct_IAdviseSink],Pointer[Struct_tagFORMATETC],Pointer[Struct_tagSTGMEDIUM]),()],
    OnViewChange : CCodePointer[(Pointer[Struct_IAdviseSink],CULong,CLong),()],
    OnRename : CCodePointer[(Pointer[Struct_IAdviseSink],Pointer[Struct_IMoniker]),()],
    OnSave : CCodePointer[(Pointer[Struct_IAdviseSink]),()],
    OnClose : CCodePointer[(Pointer[Struct_IAdviseSink]),()],
);

alias IAdviseSinkVtbl = Struct_IAdviseSinkVtbl;

record Struct_IAdviseSink (
    lpVtbl : Pointer[Struct_IAdviseSinkVtbl],
);

external IAdviseSink_RemoteOnDataChange_Proxy(
    This : Pointer[IAdviseSink],
    pFormatetc : Pointer[FORMATETC],
    pStgmed : Pointer[ASYNC_STGMEDIUM]) CLong;

external IAdviseSink_RemoteOnDataChange_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IAdviseSink_RemoteOnViewChange_Proxy(
    This : Pointer[IAdviseSink],
    dwAspect : CULong,
    lindex : CLong) CLong;

external IAdviseSink_RemoteOnViewChange_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IAdviseSink_RemoteOnRename_Proxy(
    This : Pointer[IAdviseSink],
    pmk : Pointer[IMoniker]) CLong;

external IAdviseSink_RemoteOnRename_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IAdviseSink_RemoteOnSave_Proxy(
    This : Pointer[IAdviseSink]) CLong;

external IAdviseSink_RemoteOnSave_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IAdviseSink_RemoteOnClose_Proxy(
    This : Pointer[IAdviseSink]) CLong;

external IAdviseSink_RemoteOnClose_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_AsyncIAdviseSink : IID;

record Struct_AsyncIAdviseSinkVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_AsyncIAdviseSink],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_AsyncIAdviseSink]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_AsyncIAdviseSink]),(CULong)],
    Begin_OnDataChange : CCodePointer[(Pointer[Struct_AsyncIAdviseSink],Pointer[Struct_tagFORMATETC],Pointer[Struct_tagSTGMEDIUM]),()],
    Finish_OnDataChange : CCodePointer[(Pointer[Struct_AsyncIAdviseSink]),()],
    Begin_OnViewChange : CCodePointer[(Pointer[Struct_AsyncIAdviseSink],CULong,CLong),()],
    Finish_OnViewChange : CCodePointer[(Pointer[Struct_AsyncIAdviseSink]),()],
    Begin_OnRename : CCodePointer[(Pointer[Struct_AsyncIAdviseSink],Pointer[Struct_IMoniker]),()],
    Finish_OnRename : CCodePointer[(Pointer[Struct_AsyncIAdviseSink]),()],
    Begin_OnSave : CCodePointer[(Pointer[Struct_AsyncIAdviseSink]),()],
    Finish_OnSave : CCodePointer[(Pointer[Struct_AsyncIAdviseSink]),()],
    Begin_OnClose : CCodePointer[(Pointer[Struct_AsyncIAdviseSink]),()],
    Finish_OnClose : CCodePointer[(Pointer[Struct_AsyncIAdviseSink]),()],
);

alias AsyncIAdviseSinkVtbl = Struct_AsyncIAdviseSinkVtbl;

record Struct_AsyncIAdviseSink (
    lpVtbl : Pointer[Struct_AsyncIAdviseSinkVtbl],
);

external AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy(
    This : Pointer[AsyncIAdviseSink],
    pFormatetc : Pointer[FORMATETC],
    pStgmed : Pointer[ASYNC_STGMEDIUM]) CLong;

external AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy(
    This : Pointer[AsyncIAdviseSink]) CLong;

external AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy(
    This : Pointer[AsyncIAdviseSink],
    dwAspect : CULong,
    lindex : CLong) CLong;

external AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy(
    This : Pointer[AsyncIAdviseSink]) CLong;

external AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external AsyncIAdviseSink_Begin_RemoteOnRename_Proxy(
    This : Pointer[AsyncIAdviseSink],
    pmk : Pointer[IMoniker]) CLong;

external AsyncIAdviseSink_Begin_RemoteOnRename_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external AsyncIAdviseSink_Finish_RemoteOnRename_Proxy(
    This : Pointer[AsyncIAdviseSink]) CLong;

external AsyncIAdviseSink_Finish_RemoteOnRename_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external AsyncIAdviseSink_Begin_RemoteOnSave_Proxy(
    This : Pointer[AsyncIAdviseSink]) CLong;

external AsyncIAdviseSink_Begin_RemoteOnSave_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external AsyncIAdviseSink_Finish_RemoteOnSave_Proxy(
    This : Pointer[AsyncIAdviseSink]) CLong;

external AsyncIAdviseSink_Finish_RemoteOnSave_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external AsyncIAdviseSink_Begin_RemoteOnClose_Proxy(
    This : Pointer[AsyncIAdviseSink]) CLong;

external AsyncIAdviseSink_Begin_RemoteOnClose_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external AsyncIAdviseSink_Finish_RemoteOnClose_Proxy(
    This : Pointer[AsyncIAdviseSink]) CLong;

external AsyncIAdviseSink_Finish_RemoteOnClose_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPADVISESINK2 = Pointer[IAdviseSink2];

external IID_IAdviseSink2 : IID;

record Struct_IAdviseSink2Vtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IAdviseSink2],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IAdviseSink2]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IAdviseSink2]),(CULong)],
    OnDataChange : CCodePointer[(Pointer[Struct_IAdviseSink2],Pointer[Struct_tagFORMATETC],Pointer[Struct_tagSTGMEDIUM]),()],
    OnViewChange : CCodePointer[(Pointer[Struct_IAdviseSink2],CULong,CLong),()],
    OnRename : CCodePointer[(Pointer[Struct_IAdviseSink2],Pointer[Struct_IMoniker]),()],
    OnSave : CCodePointer[(Pointer[Struct_IAdviseSink2]),()],
    OnClose : CCodePointer[(Pointer[Struct_IAdviseSink2]),()],
    OnLinkSrcChange : CCodePointer[(Pointer[Struct_IAdviseSink2],Pointer[Struct_IMoniker]),()],
);

alias IAdviseSink2Vtbl = Struct_IAdviseSink2Vtbl;

record Struct_IAdviseSink2 (
    lpVtbl : Pointer[Struct_IAdviseSink2Vtbl],
);

external IAdviseSink2_RemoteOnLinkSrcChange_Proxy(
    This : Pointer[IAdviseSink2],
    pmk : Pointer[IMoniker]) CLong;

external IAdviseSink2_RemoteOnLinkSrcChange_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_AsyncIAdviseSink2 : IID;

record Struct_AsyncIAdviseSink2Vtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_AsyncIAdviseSink2],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_AsyncIAdviseSink2]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_AsyncIAdviseSink2]),(CULong)],
    Begin_OnDataChange : CCodePointer[(Pointer[Struct_AsyncIAdviseSink2],Pointer[Struct_tagFORMATETC],Pointer[Struct_tagSTGMEDIUM]),()],
    Finish_OnDataChange : CCodePointer[(Pointer[Struct_AsyncIAdviseSink2]),()],
    Begin_OnViewChange : CCodePointer[(Pointer[Struct_AsyncIAdviseSink2],CULong,CLong),()],
    Finish_OnViewChange : CCodePointer[(Pointer[Struct_AsyncIAdviseSink2]),()],
    Begin_OnRename : CCodePointer[(Pointer[Struct_AsyncIAdviseSink2],Pointer[Struct_IMoniker]),()],
    Finish_OnRename : CCodePointer[(Pointer[Struct_AsyncIAdviseSink2]),()],
    Begin_OnSave : CCodePointer[(Pointer[Struct_AsyncIAdviseSink2]),()],
    Finish_OnSave : CCodePointer[(Pointer[Struct_AsyncIAdviseSink2]),()],
    Begin_OnClose : CCodePointer[(Pointer[Struct_AsyncIAdviseSink2]),()],
    Finish_OnClose : CCodePointer[(Pointer[Struct_AsyncIAdviseSink2]),()],
    Begin_OnLinkSrcChange : CCodePointer[(Pointer[Struct_AsyncIAdviseSink2],Pointer[Struct_IMoniker]),()],
    Finish_OnLinkSrcChange : CCodePointer[(Pointer[Struct_AsyncIAdviseSink2]),()],
);

alias AsyncIAdviseSink2Vtbl = Struct_AsyncIAdviseSink2Vtbl;

record Struct_AsyncIAdviseSink2 (
    lpVtbl : Pointer[Struct_AsyncIAdviseSink2Vtbl],
);

external AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy(
    This : Pointer[AsyncIAdviseSink2],
    pmk : Pointer[IMoniker]) CLong;

external AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy(
    This : Pointer[AsyncIAdviseSink2]) CLong;

external AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPDATAOBJECT = Pointer[IDataObject];

alias DATADIR_GET = 1;
alias DATADIR_SET = 2;

alias DATADIR = Int;

external IID_IDataObject : IID;

record Struct_IDataObjectVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IDataObject],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IDataObject]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IDataObject]),(CULong)],
    GetData : CCodePointer[(Pointer[Struct_IDataObject],Pointer[Struct_tagFORMATETC],Pointer[Struct_tagSTGMEDIUM]),(CLong)],
    GetDataHere : CCodePointer[(Pointer[Struct_IDataObject],Pointer[Struct_tagFORMATETC],Pointer[Struct_tagSTGMEDIUM]),(CLong)],
    QueryGetData : CCodePointer[(Pointer[Struct_IDataObject],Pointer[Struct_tagFORMATETC]),(CLong)],
    GetCanonicalFormatEtc : CCodePointer[(Pointer[Struct_IDataObject],Pointer[Struct_tagFORMATETC],Pointer[Struct_tagFORMATETC]),(CLong)],
    SetData : CCodePointer[(Pointer[Struct_IDataObject],Pointer[Struct_tagFORMATETC],Pointer[Struct_tagSTGMEDIUM],Int),(CLong)],
    EnumFormatEtc : CCodePointer[(Pointer[Struct_IDataObject],CULong,Pointer[Pointer[Struct_IEnumFORMATETC]]),(CLong)],
    DAdvise : CCodePointer[(Pointer[Struct_IDataObject],Pointer[Struct_tagFORMATETC],CULong,Pointer[Struct_IAdviseSink],Pointer[CULong]),(CLong)],
    DUnadvise : CCodePointer[(Pointer[Struct_IDataObject],CULong),(CLong)],
    EnumDAdvise : CCodePointer[(Pointer[Struct_IDataObject],Pointer[Pointer[Struct_IEnumSTATDATA]]),(CLong)],
);

alias IDataObjectVtbl = Struct_IDataObjectVtbl;

record Struct_IDataObject (
    lpVtbl : Pointer[Struct_IDataObjectVtbl],
);

external IDataObject_RemoteGetData_Proxy(
    This : Pointer[IDataObject],
    pformatetcIn : Pointer[FORMATETC],
    pRemoteMedium : Pointer[STGMEDIUM]) CLong;

external IDataObject_RemoteGetData_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IDataObject_RemoteGetDataHere_Proxy(
    This : Pointer[IDataObject],
    pformatetc : Pointer[FORMATETC],
    pRemoteMedium : Pointer[STGMEDIUM]) CLong;

external IDataObject_RemoteGetDataHere_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IDataObject_QueryGetData_Proxy(
    This : Pointer[IDataObject],
    pformatetc : Pointer[FORMATETC]) CLong;

external IDataObject_QueryGetData_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IDataObject_GetCanonicalFormatEtc_Proxy(
    This : Pointer[IDataObject],
    pformatectIn : Pointer[FORMATETC],
    pformatetcOut : Pointer[FORMATETC]) CLong;

external IDataObject_GetCanonicalFormatEtc_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IDataObject_RemoteSetData_Proxy(
    This : Pointer[IDataObject],
    pformatetc : Pointer[FORMATETC],
    pmedium : Pointer[FLAG_STGMEDIUM],
    fRelease : Int) CLong;

external IDataObject_RemoteSetData_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IDataObject_EnumFormatEtc_Proxy(
    This : Pointer[IDataObject],
    dwDirection : CULong,
    ppenumFormatEtc : Pointer[Pointer[IEnumFORMATETC]]) CLong;

external IDataObject_EnumFormatEtc_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IDataObject_DAdvise_Proxy(
    This : Pointer[IDataObject],
    pformatetc : Pointer[FORMATETC],
    advf : CULong,
    pAdvSink : Pointer[IAdviseSink],
    pdwConnection : Pointer[CULong]) CLong;

external IDataObject_DAdvise_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IDataObject_DUnadvise_Proxy(
    This : Pointer[IDataObject],
    dwConnection : CULong) CLong;

external IDataObject_DUnadvise_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IDataObject_EnumDAdvise_Proxy(
    This : Pointer[IDataObject],
    ppenumAdvise : Pointer[Pointer[IEnumSTATDATA]]) CLong;

external IDataObject_EnumDAdvise_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPDATAADVISEHOLDER = Pointer[IDataAdviseHolder];

external IID_IDataAdviseHolder : IID;

record Struct_IDataAdviseHolderVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IDataAdviseHolder],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IDataAdviseHolder]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IDataAdviseHolder]),(CULong)],
    Advise : CCodePointer[(Pointer[Struct_IDataAdviseHolder],Pointer[Struct_IDataObject],Pointer[Struct_tagFORMATETC],CULong,Pointer[Struct_IAdviseSink],Pointer[CULong]),(CLong)],
    Unadvise : CCodePointer[(Pointer[Struct_IDataAdviseHolder],CULong),(CLong)],
    EnumAdvise : CCodePointer[(Pointer[Struct_IDataAdviseHolder],Pointer[Pointer[Struct_IEnumSTATDATA]]),(CLong)],
    SendOnDataChange : CCodePointer[(Pointer[Struct_IDataAdviseHolder],Pointer[Struct_IDataObject],CULong,CULong),(CLong)],
);

alias IDataAdviseHolderVtbl = Struct_IDataAdviseHolderVtbl;

record Struct_IDataAdviseHolder (
    lpVtbl : Pointer[Struct_IDataAdviseHolderVtbl],
);

external IDataAdviseHolder_Advise_Proxy(
    This : Pointer[IDataAdviseHolder],
    pDataObject : Pointer[IDataObject],
    pFetc : Pointer[FORMATETC],
    advf : CULong,
    pAdvise : Pointer[IAdviseSink],
    pdwConnection : Pointer[CULong]) CLong;

external IDataAdviseHolder_Advise_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IDataAdviseHolder_Unadvise_Proxy(
    This : Pointer[IDataAdviseHolder],
    dwConnection : CULong) CLong;

external IDataAdviseHolder_Unadvise_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IDataAdviseHolder_EnumAdvise_Proxy(
    This : Pointer[IDataAdviseHolder],
    ppenumAdvise : Pointer[Pointer[IEnumSTATDATA]]) CLong;

external IDataAdviseHolder_EnumAdvise_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IDataAdviseHolder_SendOnDataChange_Proxy(
    This : Pointer[IDataAdviseHolder],
    pDataObject : Pointer[IDataObject],
    dwReserved : CULong,
    advf : CULong) CLong;

external IDataAdviseHolder_SendOnDataChange_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPMESSAGEFILTER = Pointer[IMessageFilter];

alias CALLTYPE_TOPLEVEL = 1;
alias CALLTYPE_NESTED = 2;
alias CALLTYPE_ASYNC = 3;
alias CALLTYPE_TOPLEVEL_CALLPENDING = 4;
alias CALLTYPE_ASYNC_CALLPENDING = 5;

alias CALLTYPE = Int;

alias SERVERCALL_ISHANDLED = 0;
alias SERVERCALL_REJECTED = 1;
alias SERVERCALL_RETRYLATER = 2;

alias SERVERCALL = Int;

alias PENDINGTYPE_TOPLEVEL = 1;
alias PENDINGTYPE_NESTED = 2;

alias PENDINGTYPE = Int;

alias PENDINGMSG_CANCELCALL = 0;
alias PENDINGMSG_WAITNOPROCESS = 1;
alias PENDINGMSG_WAITDEFPROCESS = 2;

alias PENDINGMSG = Int;

record Struct_tagINTERFACEINFO (
    pUnk : Pointer[IUnknown],
    iid : IID,
    wMethod : UShort,
);

alias INTERFACEINFO = Struct_tagINTERFACEINFO;

alias LPINTERFACEINFO = Pointer[Struct_tagINTERFACEINFO];

external IID_IMessageFilter : IID;

record Struct_IMessageFilterVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IMessageFilter],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IMessageFilter]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IMessageFilter]),(CULong)],
    HandleInComingCall : CCodePointer[(Pointer[Struct_IMessageFilter],CULong,Pointer[Struct_HTASK__],CULong,Pointer[Struct_tagINTERFACEINFO]),(CULong)],
    RetryRejectedCall : CCodePointer[(Pointer[Struct_IMessageFilter],Pointer[Struct_HTASK__],CULong,CULong),(CULong)],
    MessagePending : CCodePointer[(Pointer[Struct_IMessageFilter],Pointer[Struct_HTASK__],CULong,CULong),(CULong)],
);

alias IMessageFilterVtbl = Struct_IMessageFilterVtbl;

record Struct_IMessageFilter (
    lpVtbl : Pointer[Struct_IMessageFilterVtbl],
);

external IMessageFilter_HandleInComingCall_Proxy(
    This : Pointer[IMessageFilter],
    dwCallType : CULong,
    htaskCaller : HTASK,
    dwTickCount : CULong,
    lpInterfaceInfo : LPINTERFACEINFO) CULong;

external IMessageFilter_HandleInComingCall_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IMessageFilter_RetryRejectedCall_Proxy(
    This : Pointer[IMessageFilter],
    htaskCallee : HTASK,
    dwTickCount : CULong,
    dwRejectType : CULong) CULong;

external IMessageFilter_RetryRejectedCall_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IMessageFilter_MessagePending_Proxy(
    This : Pointer[IMessageFilter],
    htaskCallee : HTASK,
    dwTickCount : CULong,
    dwPendingType : CULong) CULong;

external IMessageFilter_MessagePending_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias RPCOLEDATAREP = CULong;

record Struct_tagRPCOLEMESSAGE (
    reserved1 : RawPointer,
    dataRepresentation : CULong,
    Buffer : RawPointer,
    cbBuffer : CULong,
    iMethod : CULong,
    reserved2 : Array[RawPointer,5],
    rpcFlags : CULong,
);

alias RPCOLEMESSAGE = Struct_tagRPCOLEMESSAGE;

alias PRPCOLEMESSAGE = Pointer[RPCOLEMESSAGE];

external IID_IRpcChannelBuffer : IID;

record Struct_IRpcChannelBufferVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IRpcChannelBuffer],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IRpcChannelBuffer]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IRpcChannelBuffer]),(CULong)],
    GetBuffer : CCodePointer[(Pointer[Struct_IRpcChannelBuffer],Pointer[Struct_tagRPCOLEMESSAGE],Pointer[Struct__GUID]),(CLong)],
    SendReceive : CCodePointer[(Pointer[Struct_IRpcChannelBuffer],Pointer[Struct_tagRPCOLEMESSAGE],Pointer[CULong]),(CLong)],
    FreeBuffer : CCodePointer[(Pointer[Struct_IRpcChannelBuffer],Pointer[Struct_tagRPCOLEMESSAGE]),(CLong)],
    GetDestCtx : CCodePointer[(Pointer[Struct_IRpcChannelBuffer],Pointer[CULong],Pointer[RawPointer]),(CLong)],
    IsConnected : CCodePointer[(Pointer[Struct_IRpcChannelBuffer]),(CLong)],
);

alias IRpcChannelBufferVtbl = Struct_IRpcChannelBufferVtbl;

record Struct_IRpcChannelBuffer (
    lpVtbl : Pointer[Struct_IRpcChannelBufferVtbl],
);

external IRpcChannelBuffer_GetBuffer_Proxy(
    This : Pointer[IRpcChannelBuffer],
    pMessage : Pointer[RPCOLEMESSAGE],
    riid : Pointer[IID]) CLong;

external IRpcChannelBuffer_GetBuffer_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRpcChannelBuffer_SendReceive_Proxy(
    This : Pointer[IRpcChannelBuffer],
    pMessage : Pointer[RPCOLEMESSAGE],
    pStatus : Pointer[CULong]) CLong;

external IRpcChannelBuffer_SendReceive_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRpcChannelBuffer_FreeBuffer_Proxy(
    This : Pointer[IRpcChannelBuffer],
    pMessage : Pointer[RPCOLEMESSAGE]) CLong;

external IRpcChannelBuffer_FreeBuffer_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRpcChannelBuffer_GetDestCtx_Proxy(
    This : Pointer[IRpcChannelBuffer],
    pdwDestContext : Pointer[CULong],
    ppvDestContext : Pointer[RawPointer]) CLong;

external IRpcChannelBuffer_GetDestCtx_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRpcChannelBuffer_IsConnected_Proxy(
    This : Pointer[IRpcChannelBuffer]) CLong;

external IRpcChannelBuffer_IsConnected_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IRpcChannelBuffer2 : IID;

record Struct_IRpcChannelBuffer2Vtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IRpcChannelBuffer2],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IRpcChannelBuffer2]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IRpcChannelBuffer2]),(CULong)],
    GetBuffer : CCodePointer[(Pointer[Struct_IRpcChannelBuffer2],Pointer[Struct_tagRPCOLEMESSAGE],Pointer[Struct__GUID]),(CLong)],
    SendReceive : CCodePointer[(Pointer[Struct_IRpcChannelBuffer2],Pointer[Struct_tagRPCOLEMESSAGE],Pointer[CULong]),(CLong)],
    FreeBuffer : CCodePointer[(Pointer[Struct_IRpcChannelBuffer2],Pointer[Struct_tagRPCOLEMESSAGE]),(CLong)],
    GetDestCtx : CCodePointer[(Pointer[Struct_IRpcChannelBuffer2],Pointer[CULong],Pointer[RawPointer]),(CLong)],
    IsConnected : CCodePointer[(Pointer[Struct_IRpcChannelBuffer2]),(CLong)],
    GetProtocolVersion : CCodePointer[(Pointer[Struct_IRpcChannelBuffer2],Pointer[CULong]),(CLong)],
);

alias IRpcChannelBuffer2Vtbl = Struct_IRpcChannelBuffer2Vtbl;

record Struct_IRpcChannelBuffer2 (
    lpVtbl : Pointer[Struct_IRpcChannelBuffer2Vtbl],
);

external IRpcChannelBuffer2_GetProtocolVersion_Proxy(
    This : Pointer[IRpcChannelBuffer2],
    pdwVersion : Pointer[CULong]) CLong;

external IRpcChannelBuffer2_GetProtocolVersion_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IAsyncRpcChannelBuffer : IID;

record Struct_IAsyncRpcChannelBufferVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IAsyncRpcChannelBuffer],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IAsyncRpcChannelBuffer]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IAsyncRpcChannelBuffer]),(CULong)],
    GetBuffer : CCodePointer[(Pointer[Struct_IAsyncRpcChannelBuffer],Pointer[Struct_tagRPCOLEMESSAGE],Pointer[Struct__GUID]),(CLong)],
    SendReceive : CCodePointer[(Pointer[Struct_IAsyncRpcChannelBuffer],Pointer[Struct_tagRPCOLEMESSAGE],Pointer[CULong]),(CLong)],
    FreeBuffer : CCodePointer[(Pointer[Struct_IAsyncRpcChannelBuffer],Pointer[Struct_tagRPCOLEMESSAGE]),(CLong)],
    GetDestCtx : CCodePointer[(Pointer[Struct_IAsyncRpcChannelBuffer],Pointer[CULong],Pointer[RawPointer]),(CLong)],
    IsConnected : CCodePointer[(Pointer[Struct_IAsyncRpcChannelBuffer]),(CLong)],
    GetProtocolVersion : CCodePointer[(Pointer[Struct_IAsyncRpcChannelBuffer],Pointer[CULong]),(CLong)],
    Send : CCodePointer[(Pointer[Struct_IAsyncRpcChannelBuffer],Pointer[Struct_tagRPCOLEMESSAGE],Pointer[Struct_ISynchronize],Pointer[CULong]),(CLong)],
    Receive : CCodePointer[(Pointer[Struct_IAsyncRpcChannelBuffer],Pointer[Struct_tagRPCOLEMESSAGE],Pointer[CULong]),(CLong)],
    GetDestCtxEx : CCodePointer[(Pointer[Struct_IAsyncRpcChannelBuffer],Pointer[Struct_tagRPCOLEMESSAGE],Pointer[CULong],Pointer[RawPointer]),(CLong)],
);

alias IAsyncRpcChannelBufferVtbl = Struct_IAsyncRpcChannelBufferVtbl;

record Struct_IAsyncRpcChannelBuffer (
    lpVtbl : Pointer[Struct_IAsyncRpcChannelBufferVtbl],
);

external IAsyncRpcChannelBuffer_Send_Proxy(
    This : Pointer[IAsyncRpcChannelBuffer],
    pMsg : Pointer[RPCOLEMESSAGE],
    pSync : Pointer[ISynchronize],
    pulStatus : Pointer[CULong]) CLong;

external IAsyncRpcChannelBuffer_Send_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IAsyncRpcChannelBuffer_Receive_Proxy(
    This : Pointer[IAsyncRpcChannelBuffer],
    pMsg : Pointer[RPCOLEMESSAGE],
    pulStatus : Pointer[CULong]) CLong;

external IAsyncRpcChannelBuffer_Receive_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IAsyncRpcChannelBuffer_GetDestCtxEx_Proxy(
    This : Pointer[IAsyncRpcChannelBuffer],
    pMsg : Pointer[RPCOLEMESSAGE],
    pdwDestContext : Pointer[CULong],
    ppvDestContext : Pointer[RawPointer]) CLong;

external IAsyncRpcChannelBuffer_GetDestCtxEx_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IRpcChannelBuffer3 : IID;

record Struct_IRpcChannelBuffer3Vtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IRpcChannelBuffer3],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IRpcChannelBuffer3]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IRpcChannelBuffer3]),(CULong)],
    GetBuffer : CCodePointer[(Pointer[Struct_IRpcChannelBuffer3],Pointer[Struct_tagRPCOLEMESSAGE],Pointer[Struct__GUID]),(CLong)],
    SendReceive : CCodePointer[(Pointer[Struct_IRpcChannelBuffer3],Pointer[Struct_tagRPCOLEMESSAGE],Pointer[CULong]),(CLong)],
    FreeBuffer : CCodePointer[(Pointer[Struct_IRpcChannelBuffer3],Pointer[Struct_tagRPCOLEMESSAGE]),(CLong)],
    GetDestCtx : CCodePointer[(Pointer[Struct_IRpcChannelBuffer3],Pointer[CULong],Pointer[RawPointer]),(CLong)],
    IsConnected : CCodePointer[(Pointer[Struct_IRpcChannelBuffer3]),(CLong)],
    GetProtocolVersion : CCodePointer[(Pointer[Struct_IRpcChannelBuffer3],Pointer[CULong]),(CLong)],
    Send : CCodePointer[(Pointer[Struct_IRpcChannelBuffer3],Pointer[Struct_tagRPCOLEMESSAGE],Pointer[CULong]),(CLong)],
    Receive : CCodePointer[(Pointer[Struct_IRpcChannelBuffer3],Pointer[Struct_tagRPCOLEMESSAGE],CULong,Pointer[CULong]),(CLong)],
    Cancel : CCodePointer[(Pointer[Struct_IRpcChannelBuffer3],Pointer[Struct_tagRPCOLEMESSAGE]),(CLong)],
    GetCallContext : CCodePointer[(Pointer[Struct_IRpcChannelBuffer3],Pointer[Struct_tagRPCOLEMESSAGE],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    GetDestCtxEx : CCodePointer[(Pointer[Struct_IRpcChannelBuffer3],Pointer[Struct_tagRPCOLEMESSAGE],Pointer[CULong],Pointer[RawPointer]),(CLong)],
    GetState : CCodePointer[(Pointer[Struct_IRpcChannelBuffer3],Pointer[Struct_tagRPCOLEMESSAGE],Pointer[CULong]),(CLong)],
    RegisterAsync : CCodePointer[(Pointer[Struct_IRpcChannelBuffer3],Pointer[Struct_tagRPCOLEMESSAGE],Pointer[Struct_IAsyncManager]),(CLong)],
);

alias IRpcChannelBuffer3Vtbl = Struct_IRpcChannelBuffer3Vtbl;

record Struct_IRpcChannelBuffer3 (
    lpVtbl : Pointer[Struct_IRpcChannelBuffer3Vtbl],
);

external IRpcChannelBuffer3_Send_Proxy(
    This : Pointer[IRpcChannelBuffer3],
    pMsg : Pointer[RPCOLEMESSAGE],
    pulStatus : Pointer[CULong]) CLong;

external IRpcChannelBuffer3_Send_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRpcChannelBuffer3_Receive_Proxy(
    This : Pointer[IRpcChannelBuffer3],
    pMsg : Pointer[RPCOLEMESSAGE],
    ulSize : CULong,
    pulStatus : Pointer[CULong]) CLong;

external IRpcChannelBuffer3_Receive_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRpcChannelBuffer3_Cancel_Proxy(
    This : Pointer[IRpcChannelBuffer3],
    pMsg : Pointer[RPCOLEMESSAGE]) CLong;

external IRpcChannelBuffer3_Cancel_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRpcChannelBuffer3_GetCallContext_Proxy(
    This : Pointer[IRpcChannelBuffer3],
    pMsg : Pointer[RPCOLEMESSAGE],
    riid : Pointer[IID],
    pInterface : Pointer[RawPointer]) CLong;

external IRpcChannelBuffer3_GetCallContext_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRpcChannelBuffer3_GetDestCtxEx_Proxy(
    This : Pointer[IRpcChannelBuffer3],
    pMsg : Pointer[RPCOLEMESSAGE],
    pdwDestContext : Pointer[CULong],
    ppvDestContext : Pointer[RawPointer]) CLong;

external IRpcChannelBuffer3_GetDestCtxEx_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRpcChannelBuffer3_GetState_Proxy(
    This : Pointer[IRpcChannelBuffer3],
    pMsg : Pointer[RPCOLEMESSAGE],
    pState : Pointer[CULong]) CLong;

external IRpcChannelBuffer3_GetState_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRpcChannelBuffer3_RegisterAsync_Proxy(
    This : Pointer[IRpcChannelBuffer3],
    pMsg : Pointer[RPCOLEMESSAGE],
    pAsyncMgr : Pointer[IAsyncManager]) CLong;

external IRpcChannelBuffer3_RegisterAsync_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IRpcSyntaxNegotiate : IID;

record Struct_IRpcSyntaxNegotiateVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IRpcSyntaxNegotiate],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IRpcSyntaxNegotiate]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IRpcSyntaxNegotiate]),(CULong)],
    NegotiateSyntax : CCodePointer[(Pointer[Struct_IRpcSyntaxNegotiate],Pointer[Struct_tagRPCOLEMESSAGE]),(CLong)],
);

alias IRpcSyntaxNegotiateVtbl = Struct_IRpcSyntaxNegotiateVtbl;

record Struct_IRpcSyntaxNegotiate (
    lpVtbl : Pointer[Struct_IRpcSyntaxNegotiateVtbl],
);

external IRpcSyntaxNegotiate_NegotiateSyntax_Proxy(
    This : Pointer[IRpcSyntaxNegotiate],
    pMsg : Pointer[RPCOLEMESSAGE]) CLong;

external IRpcSyntaxNegotiate_NegotiateSyntax_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IRpcProxyBuffer : IID;

record Struct_IRpcProxyBufferVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IRpcProxyBuffer],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IRpcProxyBuffer]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IRpcProxyBuffer]),(CULong)],
    Connect : CCodePointer[(Pointer[Struct_IRpcProxyBuffer],Pointer[Struct_IRpcChannelBuffer]),(CLong)],
    Disconnect : CCodePointer[(Pointer[Struct_IRpcProxyBuffer]),()],
);

alias IRpcProxyBufferVtbl = Struct_IRpcProxyBufferVtbl;

record Struct_IRpcProxyBuffer (
    lpVtbl : Pointer[Struct_IRpcProxyBufferVtbl],
);

external IRpcProxyBuffer_Connect_Proxy(
    This : Pointer[IRpcProxyBuffer],
    pRpcChannelBuffer : Pointer[IRpcChannelBuffer]) CLong;

external IRpcProxyBuffer_Connect_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRpcProxyBuffer_Disconnect_Proxy(
    This : Pointer[IRpcProxyBuffer]);

external IRpcProxyBuffer_Disconnect_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IRpcStubBuffer : IID;

record Struct_IRpcStubBufferVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IRpcStubBuffer],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IRpcStubBuffer]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IRpcStubBuffer]),(CULong)],
    Connect : CCodePointer[(Pointer[Struct_IRpcStubBuffer],Pointer[Struct_IUnknown]),(CLong)],
    Disconnect : CCodePointer[(Pointer[Struct_IRpcStubBuffer]),()],
    Invoke : CCodePointer[(Pointer[Struct_IRpcStubBuffer],Pointer[Struct_tagRPCOLEMESSAGE],Pointer[Struct_IRpcChannelBuffer]),(CLong)],
    IsIIDSupported : CCodePointer[(Pointer[Struct_IRpcStubBuffer],Pointer[Struct__GUID]),(Pointer[Struct_IRpcStubBuffer])],
    CountRefs : CCodePointer[(Pointer[Struct_IRpcStubBuffer]),(CULong)],
    DebugServerQueryInterface : CCodePointer[(Pointer[Struct_IRpcStubBuffer],Pointer[RawPointer]),(CLong)],
    DebugServerRelease : CCodePointer[(Pointer[Struct_IRpcStubBuffer],RawPointer),()],
);

alias IRpcStubBufferVtbl = Struct_IRpcStubBufferVtbl;

record Struct_IRpcStubBuffer (
    lpVtbl : Pointer[Struct_IRpcStubBufferVtbl],
);

external IRpcStubBuffer_Connect_Proxy(
    This : Pointer[IRpcStubBuffer],
    pUnkServer : Pointer[IUnknown]) CLong;

external IRpcStubBuffer_Connect_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRpcStubBuffer_Disconnect_Proxy(
    This : Pointer[IRpcStubBuffer]);

external IRpcStubBuffer_Disconnect_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRpcStubBuffer_Invoke_Proxy(
    This : Pointer[IRpcStubBuffer],
    _prpcmsg : Pointer[RPCOLEMESSAGE],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer]) CLong;

external IRpcStubBuffer_Invoke_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRpcStubBuffer_IsIIDSupported_Proxy(
    This : Pointer[IRpcStubBuffer],
    riid : Pointer[IID]) Pointer[IRpcStubBuffer];

external IRpcStubBuffer_IsIIDSupported_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRpcStubBuffer_CountRefs_Proxy(
    This : Pointer[IRpcStubBuffer]) CULong;

external IRpcStubBuffer_CountRefs_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRpcStubBuffer_DebugServerQueryInterface_Proxy(
    This : Pointer[IRpcStubBuffer],
    ppv : Pointer[RawPointer]) CLong;

external IRpcStubBuffer_DebugServerQueryInterface_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRpcStubBuffer_DebugServerRelease_Proxy(
    This : Pointer[IRpcStubBuffer],
    pv : RawPointer);

external IRpcStubBuffer_DebugServerRelease_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IPSFactoryBuffer : IID;

record Struct_IPSFactoryBufferVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IPSFactoryBuffer],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IPSFactoryBuffer]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IPSFactoryBuffer]),(CULong)],
    CreateProxy : CCodePointer[(Pointer[Struct_IPSFactoryBuffer],Pointer[Struct_IUnknown],Pointer[Struct__GUID],Pointer[Pointer[Struct_IRpcProxyBuffer]],Pointer[RawPointer]),(CLong)],
    CreateStub : CCodePointer[(Pointer[Struct_IPSFactoryBuffer],Pointer[Struct__GUID],Pointer[Struct_IUnknown],Pointer[Pointer[Struct_IRpcStubBuffer]]),(CLong)],
);

alias IPSFactoryBufferVtbl = Struct_IPSFactoryBufferVtbl;

record Struct_IPSFactoryBuffer (
    lpVtbl : Pointer[Struct_IPSFactoryBufferVtbl],
);

external IPSFactoryBuffer_CreateProxy_Proxy(
    This : Pointer[IPSFactoryBuffer],
    pUnkOuter : Pointer[IUnknown],
    riid : Pointer[IID],
    ppProxy : Pointer[Pointer[IRpcProxyBuffer]],
    ppv : Pointer[RawPointer]) CLong;

external IPSFactoryBuffer_CreateProxy_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IPSFactoryBuffer_CreateStub_Proxy(
    This : Pointer[IPSFactoryBuffer],
    riid : Pointer[IID],
    pUnkServer : Pointer[IUnknown],
    ppStub : Pointer[Pointer[IRpcStubBuffer]]) CLong;

external IPSFactoryBuffer_CreateStub_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

record Struct_SChannelHookCallInfo (
    iid : IID,
    cbSize : CULong,
    uCausality : GUID,
    dwServerPid : CULong,
    iMethod : CULong,
    pObject : RawPointer,
);

alias SChannelHookCallInfo = Struct_SChannelHookCallInfo;

external __MIDL_itf_objidl_0050_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_objidl_0050_v0_0_s_ifspec : RPC_IF_HANDLE;

external IID_IChannelHook : IID;

record Struct_IChannelHookVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IChannelHook],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IChannelHook]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IChannelHook]),(CULong)],
    ClientGetSize : CCodePointer[(Pointer[Struct_IChannelHook],Pointer[Struct__GUID],Pointer[Struct__GUID],Pointer[CULong]),()],
    ClientFillBuffer : CCodePointer[(Pointer[Struct_IChannelHook],Pointer[Struct__GUID],Pointer[Struct__GUID],Pointer[CULong],RawPointer),()],
    ClientNotify : CCodePointer[(Pointer[Struct_IChannelHook],Pointer[Struct__GUID],Pointer[Struct__GUID],CULong,RawPointer,CULong,CLong),()],
    ServerNotify : CCodePointer[(Pointer[Struct_IChannelHook],Pointer[Struct__GUID],Pointer[Struct__GUID],CULong,RawPointer,CULong),()],
    ServerGetSize : CCodePointer[(Pointer[Struct_IChannelHook],Pointer[Struct__GUID],Pointer[Struct__GUID],CLong,Pointer[CULong]),()],
    ServerFillBuffer : CCodePointer[(Pointer[Struct_IChannelHook],Pointer[Struct__GUID],Pointer[Struct__GUID],Pointer[CULong],RawPointer,CLong),()],
);

alias IChannelHookVtbl = Struct_IChannelHookVtbl;

record Struct_IChannelHook (
    lpVtbl : Pointer[Struct_IChannelHookVtbl],
);

external IChannelHook_ClientGetSize_Proxy(
    This : Pointer[IChannelHook],
    uExtent : Pointer[GUID],
    riid : Pointer[IID],
    pDataSize : Pointer[CULong]);

external IChannelHook_ClientGetSize_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IChannelHook_ClientFillBuffer_Proxy(
    This : Pointer[IChannelHook],
    uExtent : Pointer[GUID],
    riid : Pointer[IID],
    pDataSize : Pointer[CULong],
    pDataBuffer : RawPointer);

external IChannelHook_ClientFillBuffer_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IChannelHook_ClientNotify_Proxy(
    This : Pointer[IChannelHook],
    uExtent : Pointer[GUID],
    riid : Pointer[IID],
    cbDataSize : CULong,
    pDataBuffer : RawPointer,
    lDataRep : CULong,
    hrFault : CLong);

external IChannelHook_ClientNotify_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IChannelHook_ServerNotify_Proxy(
    This : Pointer[IChannelHook],
    uExtent : Pointer[GUID],
    riid : Pointer[IID],
    cbDataSize : CULong,
    pDataBuffer : RawPointer,
    lDataRep : CULong);

external IChannelHook_ServerNotify_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IChannelHook_ServerGetSize_Proxy(
    This : Pointer[IChannelHook],
    uExtent : Pointer[GUID],
    riid : Pointer[IID],
    hrFault : CLong,
    pDataSize : Pointer[CULong]);

external IChannelHook_ServerGetSize_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IChannelHook_ServerFillBuffer_Proxy(
    This : Pointer[IChannelHook],
    uExtent : Pointer[GUID],
    riid : Pointer[IID],
    pDataSize : Pointer[CULong],
    pDataBuffer : RawPointer,
    hrFault : CLong);

external IChannelHook_ServerFillBuffer_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external FMTID_SummaryInformation : FMTID;

external FMTID_DocSummaryInformation : FMTID;

external FMTID_UserDefinedProperties : FMTID;

external FMTID_DiscardableInformation : FMTID;

external FMTID_ImageSummaryInformation : FMTID;

external FMTID_AudioSummaryInformation : FMTID;

external FMTID_VideoSummaryInformation : FMTID;

external FMTID_MediaFileSummaryInformation : FMTID;

external __MIDL_itf_objidl_0051_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_objidl_0051_v0_0_s_ifspec : RPC_IF_HANDLE;

record Struct_tagSOLE_AUTHENTICATION_SERVICE (
    dwAuthnSvc : CULong,
    dwAuthzSvc : CULong,
    pPrincipalName : Pointer[UShort],
    hr : CLong,
);

alias SOLE_AUTHENTICATION_SERVICE = Struct_tagSOLE_AUTHENTICATION_SERVICE;

alias PSOLE_AUTHENTICATION_SERVICE = Pointer[SOLE_AUTHENTICATION_SERVICE];

alias EOAC_NONE = 0;
alias EOAC_MUTUAL_AUTH = 1;
alias EOAC_STATIC_CLOAKING = 32;
alias EOAC_DYNAMIC_CLOAKING = 64;
alias EOAC_ANY_AUTHORITY = 128;
alias EOAC_MAKE_FULLSIC = 256;
alias EOAC_DEFAULT = 2048;
alias EOAC_SECURE_REFS = 2;
alias EOAC_ACCESS_CONTROL = 4;
alias EOAC_APPID = 8;
alias EOAC_DYNAMIC = 16;
alias EOAC_REQUIRE_FULLSIC = 512;
alias EOAC_AUTO_IMPERSONATE = 1024;
alias EOAC_NO_CUSTOM_MARSHAL = 8192;
alias EOAC_DISABLE_AAA = 4096;

alias EOLE_AUTHENTICATION_CAPABILITIES = Int;

record Struct_tagSOLE_AUTHENTICATION_INFO (
    dwAuthnSvc : CULong,
    dwAuthzSvc : CULong,
    pAuthInfo : RawPointer,
);

alias SOLE_AUTHENTICATION_INFO = Struct_tagSOLE_AUTHENTICATION_INFO;

alias PSOLE_AUTHENTICATION_INFO = Pointer[Struct_tagSOLE_AUTHENTICATION_INFO];

record Struct_tagSOLE_AUTHENTICATION_LIST (
    cAuthInfo : CULong,
    aAuthInfo : Pointer[SOLE_AUTHENTICATION_INFO],
);

alias SOLE_AUTHENTICATION_LIST = Struct_tagSOLE_AUTHENTICATION_LIST;

alias PSOLE_AUTHENTICATION_LIST = Pointer[Struct_tagSOLE_AUTHENTICATION_LIST];

external IID_IClientSecurity : IID;

record Struct_IClientSecurityVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IClientSecurity],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IClientSecurity]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IClientSecurity]),(CULong)],
    QueryBlanket : CCodePointer[(Pointer[Struct_IClientSecurity],Pointer[Struct_IUnknown],Pointer[CULong],Pointer[CULong],Pointer[Pointer[UShort]],Pointer[CULong],Pointer[CULong],Pointer[RawPointer],Pointer[CULong]),(CLong)],
    SetBlanket : CCodePointer[(Pointer[Struct_IClientSecurity],Pointer[Struct_IUnknown],CULong,CULong,Pointer[UShort],CULong,CULong,RawPointer,CULong),(CLong)],
    CopyProxy : CCodePointer[(Pointer[Struct_IClientSecurity],Pointer[Struct_IUnknown],Pointer[Pointer[Struct_IUnknown]]),(CLong)],
);

alias IClientSecurityVtbl = Struct_IClientSecurityVtbl;

record Struct_IClientSecurity (
    lpVtbl : Pointer[Struct_IClientSecurityVtbl],
);

external IClientSecurity_QueryBlanket_Proxy(
    This : Pointer[IClientSecurity],
    pProxy : Pointer[IUnknown],
    pAuthnSvc : Pointer[CULong],
    pAuthzSvc : Pointer[CULong],
    pServerPrincName : Pointer[Pointer[UShort]],
    pAuthnLevel : Pointer[CULong],
    pImpLevel : Pointer[CULong],
    pAuthInfo : Pointer[RawPointer],
    pCapabilites : Pointer[CULong]) CLong;

external IClientSecurity_QueryBlanket_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IClientSecurity_SetBlanket_Proxy(
    This : Pointer[IClientSecurity],
    pProxy : Pointer[IUnknown],
    dwAuthnSvc : CULong,
    dwAuthzSvc : CULong,
    pServerPrincName : Pointer[UShort],
    dwAuthnLevel : CULong,
    dwImpLevel : CULong,
    pAuthInfo : RawPointer,
    dwCapabilities : CULong) CLong;

external IClientSecurity_SetBlanket_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IClientSecurity_CopyProxy_Proxy(
    This : Pointer[IClientSecurity],
    pProxy : Pointer[IUnknown],
    ppCopy : Pointer[Pointer[IUnknown]]) CLong;

external IClientSecurity_CopyProxy_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IServerSecurity : IID;

record Struct_IServerSecurityVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IServerSecurity],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IServerSecurity]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IServerSecurity]),(CULong)],
    QueryBlanket : CCodePointer[(Pointer[Struct_IServerSecurity],Pointer[CULong],Pointer[CULong],Pointer[Pointer[UShort]],Pointer[CULong],Pointer[CULong],Pointer[RawPointer],Pointer[CULong]),(CLong)],
    ImpersonateClient : CCodePointer[(Pointer[Struct_IServerSecurity]),(CLong)],
    RevertToSelf : CCodePointer[(Pointer[Struct_IServerSecurity]),(CLong)],
    IsImpersonating : CCodePointer[(Pointer[Struct_IServerSecurity]),(Int)],
);

alias IServerSecurityVtbl = Struct_IServerSecurityVtbl;

record Struct_IServerSecurity (
    lpVtbl : Pointer[Struct_IServerSecurityVtbl],
);

external IServerSecurity_QueryBlanket_Proxy(
    This : Pointer[IServerSecurity],
    pAuthnSvc : Pointer[CULong],
    pAuthzSvc : Pointer[CULong],
    pServerPrincName : Pointer[Pointer[UShort]],
    pAuthnLevel : Pointer[CULong],
    pImpLevel : Pointer[CULong],
    pPrivs : Pointer[RawPointer],
    pCapabilities : Pointer[CULong]) CLong;

external IServerSecurity_QueryBlanket_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IServerSecurity_ImpersonateClient_Proxy(
    This : Pointer[IServerSecurity]) CLong;

external IServerSecurity_ImpersonateClient_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IServerSecurity_RevertToSelf_Proxy(
    This : Pointer[IServerSecurity]) CLong;

external IServerSecurity_RevertToSelf_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IServerSecurity_IsImpersonating_Proxy(
    This : Pointer[IServerSecurity]) Int;

external IServerSecurity_IsImpersonating_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IClassActivator : IID;

record Struct_IClassActivatorVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IClassActivator],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IClassActivator]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IClassActivator]),(CULong)],
    GetClassObject : CCodePointer[(Pointer[Struct_IClassActivator],Pointer[Struct__GUID],CULong,CULong,Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
);

alias IClassActivatorVtbl = Struct_IClassActivatorVtbl;

record Struct_IClassActivator (
    lpVtbl : Pointer[Struct_IClassActivatorVtbl],
);

external IClassActivator_GetClassObject_Proxy(
    This : Pointer[IClassActivator],
    rclsid : Pointer[IID],
    dwClassContext : CULong,
    locale : CULong,
    riid : Pointer[IID],
    ppv : Pointer[RawPointer]) CLong;

external IClassActivator_GetClassObject_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IRpcOptions : IID;

record Struct_IRpcOptionsVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IRpcOptions],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IRpcOptions]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IRpcOptions]),(CULong)],
    Set : CCodePointer[(Pointer[Struct_IRpcOptions],Pointer[Struct_IUnknown],CULong,UInt64),(CLong)],
    Query : CCodePointer[(Pointer[Struct_IRpcOptions],Pointer[Struct_IUnknown],CULong,Pointer[UInt64]),(CLong)],
);

alias IRpcOptionsVtbl = Struct_IRpcOptionsVtbl;

record Struct_IRpcOptions (
    lpVtbl : Pointer[Struct_IRpcOptionsVtbl],
);

external IRpcOptions_Set_Proxy(
    This : Pointer[IRpcOptions],
    pPrx : Pointer[IUnknown],
    dwProperty : CULong,
    dwValue : UInt64) CLong;

external IRpcOptions_Set_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRpcOptions_Query_Proxy(
    This : Pointer[IRpcOptions],
    pPrx : Pointer[IUnknown],
    dwProperty : CULong,
    pdwValue : Pointer[UInt64]) CLong;

external IRpcOptions_Query_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias COMBND_RPCTIMEOUT = 1;
alias COMBND_SERVER_LOCALITY = 2;

alias SERVER_LOCALITY_PROCESS_LOCAL = 0;
alias SERVER_LOCALITY_MACHINE_LOCAL = 1;
alias SERVER_LOCALITY_REMOTE = 2;

external __MIDL_itf_objidl_0055_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_objidl_0055_v0_0_s_ifspec : RPC_IF_HANDLE;

external IID_IFillLockBytes : IID;

record Struct_IFillLockBytesVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IFillLockBytes],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IFillLockBytes]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IFillLockBytes]),(CULong)],
    FillAppend : CCodePointer[(Pointer[Struct_IFillLockBytes],RawPointer,CULong,Pointer[CULong]),(CLong)],
    FillAt : CCodePointer[(Pointer[Struct_IFillLockBytes],AUnionType,RawPointer,CULong,Pointer[CULong]),(CLong)],
    SetFillSize : CCodePointer[(Pointer[Struct_IFillLockBytes],AUnionType),(CLong)],
    Terminate : CCodePointer[(Pointer[Struct_IFillLockBytes],Int),(CLong)],
);

alias IFillLockBytesVtbl = Struct_IFillLockBytesVtbl;

record Struct_IFillLockBytes (
    lpVtbl : Pointer[Struct_IFillLockBytesVtbl],
);

external IFillLockBytes_RemoteFillAppend_Proxy(
    This : Pointer[IFillLockBytes],
    pv : Pointer[CUChar],
    cb : CULong,
    pcbWritten : Pointer[CULong]) CLong;

external IFillLockBytes_RemoteFillAppend_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IFillLockBytes_RemoteFillAt_Proxy(
    This : Pointer[IFillLockBytes],
    ulOffset : ULARGE_INTEGER,
    pv : Pointer[CUChar],
    cb : CULong,
    pcbWritten : Pointer[CULong]) CLong;

external IFillLockBytes_RemoteFillAt_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IFillLockBytes_SetFillSize_Proxy(
    This : Pointer[IFillLockBytes],
    ulSize : ULARGE_INTEGER) CLong;

external IFillLockBytes_SetFillSize_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IFillLockBytes_Terminate_Proxy(
    This : Pointer[IFillLockBytes],
    bCanceled : Int) CLong;

external IFillLockBytes_Terminate_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IProgressNotify : IID;

record Struct_IProgressNotifyVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IProgressNotify],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IProgressNotify]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IProgressNotify]),(CULong)],
    OnProgress : CCodePointer[(Pointer[Struct_IProgressNotify],CULong,CULong,Int,Int),(CLong)],
);

alias IProgressNotifyVtbl = Struct_IProgressNotifyVtbl;

record Struct_IProgressNotify (
    lpVtbl : Pointer[Struct_IProgressNotifyVtbl],
);

external IProgressNotify_OnProgress_Proxy(
    This : Pointer[IProgressNotify],
    dwProgressCurrent : CULong,
    dwProgressMaximum : CULong,
    fAccurate : Int,
    fOwner : Int) CLong;

external IProgressNotify_OnProgress_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

record Struct_tagStorageLayout (
    LayoutType : CULong,
    pwcsElementName : Pointer[UShort],
    cOffset : LARGE_INTEGER,
    cBytes : LARGE_INTEGER,
);

alias StorageLayout = Struct_tagStorageLayout;

external IID_ILayoutStorage : IID;

record Struct_ILayoutStorageVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_ILayoutStorage],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_ILayoutStorage]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_ILayoutStorage]),(CULong)],
    LayoutScript : CCodePointer[(Pointer[Struct_ILayoutStorage],Pointer[Struct_tagStorageLayout],CULong,CULong),(CLong)],
    BeginMonitor : CCodePointer[(Pointer[Struct_ILayoutStorage]),(CLong)],
    EndMonitor : CCodePointer[(Pointer[Struct_ILayoutStorage]),(CLong)],
    ReLayoutDocfile : CCodePointer[(Pointer[Struct_ILayoutStorage],Pointer[UShort]),(CLong)],
    ReLayoutDocfileOnILockBytes : CCodePointer[(Pointer[Struct_ILayoutStorage],Pointer[Struct_ILockBytes]),(CLong)],
);

alias ILayoutStorageVtbl = Struct_ILayoutStorageVtbl;

record Struct_ILayoutStorage (
    lpVtbl : Pointer[Struct_ILayoutStorageVtbl],
);

external ILayoutStorage_LayoutScript_Proxy(
    This : Pointer[ILayoutStorage],
    pStorageLayout : Pointer[StorageLayout],
    nEntries : CULong,
    glfInterleavedFlag : CULong) CLong;

external ILayoutStorage_LayoutScript_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ILayoutStorage_BeginMonitor_Proxy(
    This : Pointer[ILayoutStorage]) CLong;

external ILayoutStorage_BeginMonitor_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ILayoutStorage_EndMonitor_Proxy(
    This : Pointer[ILayoutStorage]) CLong;

external ILayoutStorage_EndMonitor_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ILayoutStorage_ReLayoutDocfile_Proxy(
    This : Pointer[ILayoutStorage],
    pwcsNewDfName : Pointer[UShort]) CLong;

external ILayoutStorage_ReLayoutDocfile_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ILayoutStorage_ReLayoutDocfileOnILockBytes_Proxy(
    This : Pointer[ILayoutStorage],
    pILockBytes : Pointer[ILockBytes]) CLong;

external ILayoutStorage_ReLayoutDocfileOnILockBytes_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IBlockingLock : IID;

record Struct_IBlockingLockVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IBlockingLock],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IBlockingLock]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IBlockingLock]),(CULong)],
    Lock : CCodePointer[(Pointer[Struct_IBlockingLock],CULong),(CLong)],
    Unlock : CCodePointer[(Pointer[Struct_IBlockingLock]),(CLong)],
);

alias IBlockingLockVtbl = Struct_IBlockingLockVtbl;

record Struct_IBlockingLock (
    lpVtbl : Pointer[Struct_IBlockingLockVtbl],
);

external IBlockingLock_Lock_Proxy(
    This : Pointer[IBlockingLock],
    dwTimeout : CULong) CLong;

external IBlockingLock_Lock_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IBlockingLock_Unlock_Proxy(
    This : Pointer[IBlockingLock]) CLong;

external IBlockingLock_Unlock_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_ITimeAndNoticeControl : IID;

record Struct_ITimeAndNoticeControlVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_ITimeAndNoticeControl],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_ITimeAndNoticeControl]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_ITimeAndNoticeControl]),(CULong)],
    SuppressChanges : CCodePointer[(Pointer[Struct_ITimeAndNoticeControl],CULong,CULong),(CLong)],
);

alias ITimeAndNoticeControlVtbl = Struct_ITimeAndNoticeControlVtbl;

record Struct_ITimeAndNoticeControl (
    lpVtbl : Pointer[Struct_ITimeAndNoticeControlVtbl],
);

external ITimeAndNoticeControl_SuppressChanges_Proxy(
    This : Pointer[ITimeAndNoticeControl],
    res1 : CULong,
    res2 : CULong) CLong;

external ITimeAndNoticeControl_SuppressChanges_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IOplockStorage : IID;

record Struct_IOplockStorageVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IOplockStorage],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IOplockStorage]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IOplockStorage]),(CULong)],
    CreateStorageEx : CCodePointer[(Pointer[Struct_IOplockStorage],Pointer[UShort],CULong,CULong,CULong,Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    OpenStorageEx : CCodePointer[(Pointer[Struct_IOplockStorage],Pointer[UShort],CULong,CULong,CULong,Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
);

alias IOplockStorageVtbl = Struct_IOplockStorageVtbl;

record Struct_IOplockStorage (
    lpVtbl : Pointer[Struct_IOplockStorageVtbl],
);

external IOplockStorage_CreateStorageEx_Proxy(
    This : Pointer[IOplockStorage],
    pwcsName : LPCWSTR,
    grfMode : CULong,
    stgfmt : CULong,
    grfAttrs : CULong,
    riid : Pointer[IID],
    ppstgOpen : Pointer[RawPointer]) CLong;

external IOplockStorage_CreateStorageEx_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOplockStorage_OpenStorageEx_Proxy(
    This : Pointer[IOplockStorage],
    pwcsName : LPCWSTR,
    grfMode : CULong,
    stgfmt : CULong,
    grfAttrs : CULong,
    riid : Pointer[IID],
    ppstgOpen : Pointer[RawPointer]) CLong;

external IOplockStorage_OpenStorageEx_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPSURROGATE = Pointer[ISurrogate];

external IID_ISurrogate : IID;

record Struct_ISurrogateVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_ISurrogate],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_ISurrogate]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_ISurrogate]),(CULong)],
    LoadDllServer : CCodePointer[(Pointer[Struct_ISurrogate],Pointer[Struct__GUID]),(CLong)],
    FreeSurrogate : CCodePointer[(Pointer[Struct_ISurrogate]),(CLong)],
);

alias ISurrogateVtbl = Struct_ISurrogateVtbl;

record Struct_ISurrogate (
    lpVtbl : Pointer[Struct_ISurrogateVtbl],
);

external ISurrogate_LoadDllServer_Proxy(
    This : Pointer[ISurrogate],
    Clsid : Pointer[IID]) CLong;

external ISurrogate_LoadDllServer_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ISurrogate_FreeSurrogate_Proxy(
    This : Pointer[ISurrogate]) CLong;

external ISurrogate_FreeSurrogate_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPGLOBALINTERFACETABLE = Pointer[IGlobalInterfaceTable];

external IID_IGlobalInterfaceTable : IID;

record Struct_IGlobalInterfaceTableVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IGlobalInterfaceTable],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IGlobalInterfaceTable]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IGlobalInterfaceTable]),(CULong)],
    RegisterInterfaceInGlobal : CCodePointer[(Pointer[Struct_IGlobalInterfaceTable],Pointer[Struct_IUnknown],Pointer[Struct__GUID],Pointer[CULong]),(CLong)],
    RevokeInterfaceFromGlobal : CCodePointer[(Pointer[Struct_IGlobalInterfaceTable],CULong),(CLong)],
    GetInterfaceFromGlobal : CCodePointer[(Pointer[Struct_IGlobalInterfaceTable],CULong,Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
);

alias IGlobalInterfaceTableVtbl = Struct_IGlobalInterfaceTableVtbl;

record Struct_IGlobalInterfaceTable (
    lpVtbl : Pointer[Struct_IGlobalInterfaceTableVtbl],
);

external IGlobalInterfaceTable_RegisterInterfaceInGlobal_Proxy(
    This : Pointer[IGlobalInterfaceTable],
    pUnk : Pointer[IUnknown],
    riid : Pointer[IID],
    pdwCookie : Pointer[CULong]) CLong;

external IGlobalInterfaceTable_RegisterInterfaceInGlobal_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IGlobalInterfaceTable_RevokeInterfaceFromGlobal_Proxy(
    This : Pointer[IGlobalInterfaceTable],
    dwCookie : CULong) CLong;

external IGlobalInterfaceTable_RevokeInterfaceFromGlobal_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IGlobalInterfaceTable_GetInterfaceFromGlobal_Proxy(
    This : Pointer[IGlobalInterfaceTable],
    dwCookie : CULong,
    riid : Pointer[IID],
    ppv : Pointer[RawPointer]) CLong;

external IGlobalInterfaceTable_GetInterfaceFromGlobal_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IDirectWriterLock : IID;

record Struct_IDirectWriterLockVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IDirectWriterLock],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IDirectWriterLock]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IDirectWriterLock]),(CULong)],
    WaitForWriteAccess : CCodePointer[(Pointer[Struct_IDirectWriterLock],CULong),(CLong)],
    ReleaseWriteAccess : CCodePointer[(Pointer[Struct_IDirectWriterLock]),(CLong)],
    HaveWriteAccess : CCodePointer[(Pointer[Struct_IDirectWriterLock]),(CLong)],
);

alias IDirectWriterLockVtbl = Struct_IDirectWriterLockVtbl;

record Struct_IDirectWriterLock (
    lpVtbl : Pointer[Struct_IDirectWriterLockVtbl],
);

external IDirectWriterLock_WaitForWriteAccess_Proxy(
    This : Pointer[IDirectWriterLock],
    dwTimeout : CULong) CLong;

external IDirectWriterLock_WaitForWriteAccess_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IDirectWriterLock_ReleaseWriteAccess_Proxy(
    This : Pointer[IDirectWriterLock]) CLong;

external IDirectWriterLock_ReleaseWriteAccess_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IDirectWriterLock_HaveWriteAccess_Proxy(
    This : Pointer[IDirectWriterLock]) CLong;

external IDirectWriterLock_HaveWriteAccess_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_ISynchronize : IID;

record Struct_ISynchronizeVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_ISynchronize],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_ISynchronize]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_ISynchronize]),(CULong)],
    Wait : CCodePointer[(Pointer[Struct_ISynchronize],CULong,CULong),(CLong)],
    Signal : CCodePointer[(Pointer[Struct_ISynchronize]),(CLong)],
    Reset : CCodePointer[(Pointer[Struct_ISynchronize]),(CLong)],
);

alias ISynchronizeVtbl = Struct_ISynchronizeVtbl;

record Struct_ISynchronize (
    lpVtbl : Pointer[Struct_ISynchronizeVtbl],
);

external ISynchronize_Wait_Proxy(
    This : Pointer[ISynchronize],
    dwFlags : CULong,
    dwMilliseconds : CULong) CLong;

external ISynchronize_Wait_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ISynchronize_Signal_Proxy(
    This : Pointer[ISynchronize]) CLong;

external ISynchronize_Signal_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ISynchronize_Reset_Proxy(
    This : Pointer[ISynchronize]) CLong;

external ISynchronize_Reset_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_ISynchronizeHandle : IID;

record Struct_ISynchronizeHandleVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_ISynchronizeHandle],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_ISynchronizeHandle]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_ISynchronizeHandle]),(CULong)],
    GetHandle : CCodePointer[(Pointer[Struct_ISynchronizeHandle],Pointer[RawPointer]),(CLong)],
);

alias ISynchronizeHandleVtbl = Struct_ISynchronizeHandleVtbl;

record Struct_ISynchronizeHandle (
    lpVtbl : Pointer[Struct_ISynchronizeHandleVtbl],
);

external ISynchronizeHandle_GetHandle_Proxy(
    This : Pointer[ISynchronizeHandle],
    ph : Pointer[HANDLE]) CLong;

external ISynchronizeHandle_GetHandle_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_ISynchronizeEvent : IID;

record Struct_ISynchronizeEventVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_ISynchronizeEvent],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_ISynchronizeEvent]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_ISynchronizeEvent]),(CULong)],
    GetHandle : CCodePointer[(Pointer[Struct_ISynchronizeEvent],Pointer[RawPointer]),(CLong)],
    SetEventHandle : CCodePointer[(Pointer[Struct_ISynchronizeEvent],Pointer[RawPointer]),(CLong)],
);

alias ISynchronizeEventVtbl = Struct_ISynchronizeEventVtbl;

record Struct_ISynchronizeEvent (
    lpVtbl : Pointer[Struct_ISynchronizeEventVtbl],
);

external ISynchronizeEvent_SetEventHandle_Proxy(
    This : Pointer[ISynchronizeEvent],
    ph : Pointer[HANDLE]) CLong;

external ISynchronizeEvent_SetEventHandle_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_ISynchronizeContainer : IID;

record Struct_ISynchronizeContainerVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_ISynchronizeContainer],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_ISynchronizeContainer]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_ISynchronizeContainer]),(CULong)],
    AddSynchronize : CCodePointer[(Pointer[Struct_ISynchronizeContainer],Pointer[Struct_ISynchronize]),(CLong)],
    WaitMultiple : CCodePointer[(Pointer[Struct_ISynchronizeContainer],CULong,CULong,Pointer[Pointer[Struct_ISynchronize]]),(CLong)],
);

alias ISynchronizeContainerVtbl = Struct_ISynchronizeContainerVtbl;

record Struct_ISynchronizeContainer (
    lpVtbl : Pointer[Struct_ISynchronizeContainerVtbl],
);

external ISynchronizeContainer_AddSynchronize_Proxy(
    This : Pointer[ISynchronizeContainer],
    pSync : Pointer[ISynchronize]) CLong;

external ISynchronizeContainer_AddSynchronize_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ISynchronizeContainer_WaitMultiple_Proxy(
    This : Pointer[ISynchronizeContainer],
    dwFlags : CULong,
    dwTimeOut : CULong,
    ppSync : Pointer[Pointer[ISynchronize]]) CLong;

external ISynchronizeContainer_WaitMultiple_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_ISynchronizeMutex : IID;

record Struct_ISynchronizeMutexVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_ISynchronizeMutex],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_ISynchronizeMutex]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_ISynchronizeMutex]),(CULong)],
    Wait : CCodePointer[(Pointer[Struct_ISynchronizeMutex],CULong,CULong),(CLong)],
    Signal : CCodePointer[(Pointer[Struct_ISynchronizeMutex]),(CLong)],
    Reset : CCodePointer[(Pointer[Struct_ISynchronizeMutex]),(CLong)],
    ReleaseMutex : CCodePointer[(Pointer[Struct_ISynchronizeMutex]),(CLong)],
);

alias ISynchronizeMutexVtbl = Struct_ISynchronizeMutexVtbl;

record Struct_ISynchronizeMutex (
    lpVtbl : Pointer[Struct_ISynchronizeMutexVtbl],
);

external ISynchronizeMutex_ReleaseMutex_Proxy(
    This : Pointer[ISynchronizeMutex]) CLong;

external ISynchronizeMutex_ReleaseMutex_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPCANCELMETHODCALLS = Pointer[ICancelMethodCalls];

external IID_ICancelMethodCalls : IID;

record Struct_ICancelMethodCallsVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_ICancelMethodCalls],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_ICancelMethodCalls]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_ICancelMethodCalls]),(CULong)],
    Cancel : CCodePointer[(Pointer[Struct_ICancelMethodCalls],CULong),(CLong)],
    TestCancel : CCodePointer[(Pointer[Struct_ICancelMethodCalls]),(CLong)],
);

alias ICancelMethodCallsVtbl = Struct_ICancelMethodCallsVtbl;

record Struct_ICancelMethodCalls (
    lpVtbl : Pointer[Struct_ICancelMethodCallsVtbl],
);

external ICancelMethodCalls_Cancel_Proxy(
    This : Pointer[ICancelMethodCalls],
    ulSeconds : CULong) CLong;

external ICancelMethodCalls_Cancel_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICancelMethodCalls_TestCancel_Proxy(
    This : Pointer[ICancelMethodCalls]) CLong;

external ICancelMethodCalls_TestCancel_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias DCOM_NONE = 0;
alias DCOM_CALL_COMPLETE = 1;
alias DCOM_CALL_CANCELED = 2;

alias DCOM_CALL_STATE = Int;

external IID_IAsyncManager : IID;

record Struct_IAsyncManagerVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IAsyncManager],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IAsyncManager]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IAsyncManager]),(CULong)],
    CompleteCall : CCodePointer[(Pointer[Struct_IAsyncManager],CLong),(CLong)],
    GetCallContext : CCodePointer[(Pointer[Struct_IAsyncManager],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    GetState : CCodePointer[(Pointer[Struct_IAsyncManager],Pointer[CULong]),(CLong)],
);

alias IAsyncManagerVtbl = Struct_IAsyncManagerVtbl;

record Struct_IAsyncManager (
    lpVtbl : Pointer[Struct_IAsyncManagerVtbl],
);

external IAsyncManager_CompleteCall_Proxy(
    This : Pointer[IAsyncManager],
    Result : CLong) CLong;

external IAsyncManager_CompleteCall_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IAsyncManager_GetCallContext_Proxy(
    This : Pointer[IAsyncManager],
    riid : Pointer[IID],
    pInterface : Pointer[RawPointer]) CLong;

external IAsyncManager_GetCallContext_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IAsyncManager_GetState_Proxy(
    This : Pointer[IAsyncManager],
    pulStateFlags : Pointer[CULong]) CLong;

external IAsyncManager_GetState_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_ICallFactory : IID;

record Struct_ICallFactoryVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_ICallFactory],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_ICallFactory]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_ICallFactory]),(CULong)],
    CreateCall : CCodePointer[(Pointer[Struct_ICallFactory],Pointer[Struct__GUID],Pointer[Struct_IUnknown],Pointer[Struct__GUID],Pointer[Pointer[Struct_IUnknown]]),(CLong)],
);

alias ICallFactoryVtbl = Struct_ICallFactoryVtbl;

record Struct_ICallFactory (
    lpVtbl : Pointer[Struct_ICallFactoryVtbl],
);

external ICallFactory_CreateCall_Proxy(
    This : Pointer[ICallFactory],
    riid : Pointer[IID],
    pCtrlUnk : Pointer[IUnknown],
    riid2 : Pointer[IID],
    ppv : Pointer[Pointer[IUnknown]]) CLong;

external ICallFactory_CreateCall_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IRpcHelper : IID;

record Struct_IRpcHelperVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IRpcHelper],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IRpcHelper]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IRpcHelper]),(CULong)],
    GetDCOMProtocolVersion : CCodePointer[(Pointer[Struct_IRpcHelper],Pointer[CULong]),(CLong)],
    GetIIDFromOBJREF : CCodePointer[(Pointer[Struct_IRpcHelper],RawPointer,Pointer[Pointer[Struct__GUID]]),(CLong)],
);

alias IRpcHelperVtbl = Struct_IRpcHelperVtbl;

record Struct_IRpcHelper (
    lpVtbl : Pointer[Struct_IRpcHelperVtbl],
);

external IRpcHelper_GetDCOMProtocolVersion_Proxy(
    This : Pointer[IRpcHelper],
    pComVersion : Pointer[CULong]) CLong;

external IRpcHelper_GetDCOMProtocolVersion_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRpcHelper_GetIIDFromOBJREF_Proxy(
    This : Pointer[IRpcHelper],
    pObjRef : RawPointer,
    piid : Pointer[Pointer[IID]]) CLong;

external IRpcHelper_GetIIDFromOBJREF_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IReleaseMarshalBuffers : IID;

record Struct_IReleaseMarshalBuffersVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IReleaseMarshalBuffers],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IReleaseMarshalBuffers]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IReleaseMarshalBuffers]),(CULong)],
    ReleaseMarshalBuffer : CCodePointer[(Pointer[Struct_IReleaseMarshalBuffers],Pointer[Struct_tagRPCOLEMESSAGE],CULong,Pointer[Struct_IUnknown]),(CLong)],
);

alias IReleaseMarshalBuffersVtbl = Struct_IReleaseMarshalBuffersVtbl;

record Struct_IReleaseMarshalBuffers (
    lpVtbl : Pointer[Struct_IReleaseMarshalBuffersVtbl],
);

external IReleaseMarshalBuffers_ReleaseMarshalBuffer_Proxy(
    This : Pointer[IReleaseMarshalBuffers],
    pMsg : Pointer[RPCOLEMESSAGE],
    dwFlags : CULong,
    pChnl : Pointer[IUnknown]) CLong;

external IReleaseMarshalBuffers_ReleaseMarshalBuffer_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IWaitMultiple : IID;

record Struct_IWaitMultipleVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IWaitMultiple],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IWaitMultiple]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IWaitMultiple]),(CULong)],
    WaitMultiple : CCodePointer[(Pointer[Struct_IWaitMultiple],CULong,Pointer[Pointer[Struct_ISynchronize]]),(CLong)],
    AddSynchronize : CCodePointer[(Pointer[Struct_IWaitMultiple],Pointer[Struct_ISynchronize]),(CLong)],
);

alias IWaitMultipleVtbl = Struct_IWaitMultipleVtbl;

record Struct_IWaitMultiple (
    lpVtbl : Pointer[Struct_IWaitMultipleVtbl],
);

external IWaitMultiple_WaitMultiple_Proxy(
    This : Pointer[IWaitMultiple],
    timeout : CULong,
    pSync : Pointer[Pointer[ISynchronize]]) CLong;

external IWaitMultiple_WaitMultiple_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IWaitMultiple_AddSynchronize_Proxy(
    This : Pointer[IWaitMultiple],
    pSync : Pointer[ISynchronize]) CLong;

external IWaitMultiple_AddSynchronize_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IUrlMon : IID;

record Struct_IUrlMonVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IUrlMon],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IUrlMon]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IUrlMon]),(CULong)],
    AsyncGetClassBits : CCodePointer[(Pointer[Struct_IUrlMon],Pointer[Struct__GUID],Pointer[UShort],Pointer[UShort],CULong,CULong,Pointer[UShort],Pointer[Struct_IBindCtx],CULong,Pointer[Struct__GUID],CULong),(CLong)],
);

alias IUrlMonVtbl = Struct_IUrlMonVtbl;

record Struct_IUrlMon (
    lpVtbl : Pointer[Struct_IUrlMonVtbl],
);

external IUrlMon_AsyncGetClassBits_Proxy(
    This : Pointer[IUrlMon],
    rclsid : Pointer[IID],
    pszTYPE : LPCWSTR,
    pszExt : LPCWSTR,
    dwFileVersionMS : CULong,
    dwFileVersionLS : CULong,
    pszCodeBase : LPCWSTR,
    pbc : Pointer[IBindCtx],
    dwClassContext : CULong,
    riid : Pointer[IID],
    flags : CULong) CLong;

external IUrlMon_AsyncGetClassBits_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IForegroundTransfer : IID;

record Struct_IForegroundTransferVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IForegroundTransfer],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IForegroundTransfer]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IForegroundTransfer]),(CULong)],
    AllowForegroundTransfer : CCodePointer[(Pointer[Struct_IForegroundTransfer],RawPointer),(CLong)],
);

alias IForegroundTransferVtbl = Struct_IForegroundTransferVtbl;

record Struct_IForegroundTransfer (
    lpVtbl : Pointer[Struct_IForegroundTransferVtbl],
);

external IForegroundTransfer_AllowForegroundTransfer_Proxy(
    This : Pointer[IForegroundTransfer],
    lpvReserved : RawPointer) CLong;

external IForegroundTransfer_AllowForegroundTransfer_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPADDRTRACKINGCONTROL = Pointer[IAddrTrackingControl];

external IID_IAddrTrackingControl : IID;

record Struct_IAddrTrackingControlVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IAddrTrackingControl],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IAddrTrackingControl]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IAddrTrackingControl]),(CULong)],
    EnableCOMDynamicAddrTracking : CCodePointer[(Pointer[Struct_IAddrTrackingControl]),(CLong)],
    DisableCOMDynamicAddrTracking : CCodePointer[(Pointer[Struct_IAddrTrackingControl]),(CLong)],
);

alias IAddrTrackingControlVtbl = Struct_IAddrTrackingControlVtbl;

record Struct_IAddrTrackingControl (
    lpVtbl : Pointer[Struct_IAddrTrackingControlVtbl],
);

external IAddrTrackingControl_EnableCOMDynamicAddrTracking_Proxy(
    This : Pointer[IAddrTrackingControl]) CLong;

external IAddrTrackingControl_EnableCOMDynamicAddrTracking_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IAddrTrackingControl_DisableCOMDynamicAddrTracking_Proxy(
    This : Pointer[IAddrTrackingControl]) CLong;

external IAddrTrackingControl_DisableCOMDynamicAddrTracking_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPADDREXCLUSIONCONTROL = Pointer[IAddrExclusionControl];

external IID_IAddrExclusionControl : IID;

record Struct_IAddrExclusionControlVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IAddrExclusionControl],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IAddrExclusionControl]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IAddrExclusionControl]),(CULong)],
    GetCurrentAddrExclusionList : CCodePointer[(Pointer[Struct_IAddrExclusionControl],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    UpdateAddrExclusionList : CCodePointer[(Pointer[Struct_IAddrExclusionControl],Pointer[Struct_IUnknown]),(CLong)],
);

alias IAddrExclusionControlVtbl = Struct_IAddrExclusionControlVtbl;

record Struct_IAddrExclusionControl (
    lpVtbl : Pointer[Struct_IAddrExclusionControlVtbl],
);

external IAddrExclusionControl_GetCurrentAddrExclusionList_Proxy(
    This : Pointer[IAddrExclusionControl],
    riid : Pointer[IID],
    ppEnumerator : Pointer[RawPointer]) CLong;

external IAddrExclusionControl_GetCurrentAddrExclusionList_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IAddrExclusionControl_UpdateAddrExclusionList_Proxy(
    This : Pointer[IAddrExclusionControl],
    pEnumerator : Pointer[IUnknown]) CLong;

external IAddrExclusionControl_UpdateAddrExclusionList_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IPipeByte : IID;

record Struct_IPipeByteVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IPipeByte],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IPipeByte]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IPipeByte]),(CULong)],
    Pull : CCodePointer[(Pointer[Struct_IPipeByte],Pointer[CUChar],CULong,Pointer[CULong]),(CLong)],
    Push : CCodePointer[(Pointer[Struct_IPipeByte],Pointer[CUChar],CULong),(CLong)],
);

alias IPipeByteVtbl = Struct_IPipeByteVtbl;

record Struct_IPipeByte (
    lpVtbl : Pointer[Struct_IPipeByteVtbl],
);

external IPipeByte_Pull_Proxy(
    This : Pointer[IPipeByte],
    buf : Pointer[CUChar],
    cRequest : CULong,
    pcReturned : Pointer[CULong]) CLong;

external IPipeByte_Pull_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IPipeByte_Push_Proxy(
    This : Pointer[IPipeByte],
    buf : Pointer[CUChar],
    cSent : CULong) CLong;

external IPipeByte_Push_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_AsyncIPipeByte : IID;

record Struct_AsyncIPipeByteVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_AsyncIPipeByte],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_AsyncIPipeByte]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_AsyncIPipeByte]),(CULong)],
    Begin_Pull : CCodePointer[(Pointer[Struct_AsyncIPipeByte],CULong),(CLong)],
    Finish_Pull : CCodePointer[(Pointer[Struct_AsyncIPipeByte],Pointer[CUChar],Pointer[CULong]),(CLong)],
    Begin_Push : CCodePointer[(Pointer[Struct_AsyncIPipeByte],Pointer[CUChar],CULong),(CLong)],
    Finish_Push : CCodePointer[(Pointer[Struct_AsyncIPipeByte]),(CLong)],
);

alias AsyncIPipeByteVtbl = Struct_AsyncIPipeByteVtbl;

record Struct_AsyncIPipeByte (
    lpVtbl : Pointer[Struct_AsyncIPipeByteVtbl],
);

external AsyncIPipeByte_Begin_Pull_Proxy(
    This : Pointer[AsyncIPipeByte],
    cRequest : CULong) CLong;

external AsyncIPipeByte_Begin_Pull_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external AsyncIPipeByte_Finish_Pull_Proxy(
    This : Pointer[AsyncIPipeByte],
    buf : Pointer[CUChar],
    pcReturned : Pointer[CULong]) CLong;

external AsyncIPipeByte_Finish_Pull_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external AsyncIPipeByte_Begin_Push_Proxy(
    This : Pointer[AsyncIPipeByte],
    buf : Pointer[CUChar],
    cSent : CULong) CLong;

external AsyncIPipeByte_Begin_Push_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external AsyncIPipeByte_Finish_Push_Proxy(
    This : Pointer[AsyncIPipeByte]) CLong;

external AsyncIPipeByte_Finish_Push_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IPipeLong : IID;

record Struct_IPipeLongVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IPipeLong],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IPipeLong]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IPipeLong]),(CULong)],
    Pull : CCodePointer[(Pointer[Struct_IPipeLong],Pointer[CLong],CULong,Pointer[CULong]),(CLong)],
    Push : CCodePointer[(Pointer[Struct_IPipeLong],Pointer[CLong],CULong),(CLong)],
);

alias IPipeLongVtbl = Struct_IPipeLongVtbl;

record Struct_IPipeLong (
    lpVtbl : Pointer[Struct_IPipeLongVtbl],
);

external IPipeLong_Pull_Proxy(
    This : Pointer[IPipeLong],
    buf : Pointer[CLong],
    cRequest : CULong,
    pcReturned : Pointer[CULong]) CLong;

external IPipeLong_Pull_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IPipeLong_Push_Proxy(
    This : Pointer[IPipeLong],
    buf : Pointer[CLong],
    cSent : CULong) CLong;

external IPipeLong_Push_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_AsyncIPipeLong : IID;

record Struct_AsyncIPipeLongVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_AsyncIPipeLong],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_AsyncIPipeLong]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_AsyncIPipeLong]),(CULong)],
    Begin_Pull : CCodePointer[(Pointer[Struct_AsyncIPipeLong],CULong),(CLong)],
    Finish_Pull : CCodePointer[(Pointer[Struct_AsyncIPipeLong],Pointer[CLong],Pointer[CULong]),(CLong)],
    Begin_Push : CCodePointer[(Pointer[Struct_AsyncIPipeLong],Pointer[CLong],CULong),(CLong)],
    Finish_Push : CCodePointer[(Pointer[Struct_AsyncIPipeLong]),(CLong)],
);

alias AsyncIPipeLongVtbl = Struct_AsyncIPipeLongVtbl;

record Struct_AsyncIPipeLong (
    lpVtbl : Pointer[Struct_AsyncIPipeLongVtbl],
);

external AsyncIPipeLong_Begin_Pull_Proxy(
    This : Pointer[AsyncIPipeLong],
    cRequest : CULong) CLong;

external AsyncIPipeLong_Begin_Pull_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external AsyncIPipeLong_Finish_Pull_Proxy(
    This : Pointer[AsyncIPipeLong],
    buf : Pointer[CLong],
    pcReturned : Pointer[CULong]) CLong;

external AsyncIPipeLong_Finish_Pull_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external AsyncIPipeLong_Begin_Push_Proxy(
    This : Pointer[AsyncIPipeLong],
    buf : Pointer[CLong],
    cSent : CULong) CLong;

external AsyncIPipeLong_Begin_Push_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external AsyncIPipeLong_Finish_Push_Proxy(
    This : Pointer[AsyncIPipeLong]) CLong;

external AsyncIPipeLong_Finish_Push_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IPipeDouble : IID;

record Struct_IPipeDoubleVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IPipeDouble],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IPipeDouble]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IPipeDouble]),(CULong)],
    Pull : CCodePointer[(Pointer[Struct_IPipeDouble],Pointer[Double],CULong,Pointer[CULong]),(CLong)],
    Push : CCodePointer[(Pointer[Struct_IPipeDouble],Pointer[Double],CULong),(CLong)],
);

alias IPipeDoubleVtbl = Struct_IPipeDoubleVtbl;

record Struct_IPipeDouble (
    lpVtbl : Pointer[Struct_IPipeDoubleVtbl],
);

external IPipeDouble_Pull_Proxy(
    This : Pointer[IPipeDouble],
    buf : Pointer[Double],
    cRequest : CULong,
    pcReturned : Pointer[CULong]) CLong;

external IPipeDouble_Pull_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IPipeDouble_Push_Proxy(
    This : Pointer[IPipeDouble],
    buf : Pointer[Double],
    cSent : CULong) CLong;

external IPipeDouble_Push_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_AsyncIPipeDouble : IID;

record Struct_AsyncIPipeDoubleVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_AsyncIPipeDouble],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_AsyncIPipeDouble]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_AsyncIPipeDouble]),(CULong)],
    Begin_Pull : CCodePointer[(Pointer[Struct_AsyncIPipeDouble],CULong),(CLong)],
    Finish_Pull : CCodePointer[(Pointer[Struct_AsyncIPipeDouble],Pointer[Double],Pointer[CULong]),(CLong)],
    Begin_Push : CCodePointer[(Pointer[Struct_AsyncIPipeDouble],Pointer[Double],CULong),(CLong)],
    Finish_Push : CCodePointer[(Pointer[Struct_AsyncIPipeDouble]),(CLong)],
);

alias AsyncIPipeDoubleVtbl = Struct_AsyncIPipeDoubleVtbl;

record Struct_AsyncIPipeDouble (
    lpVtbl : Pointer[Struct_AsyncIPipeDoubleVtbl],
);

external AsyncIPipeDouble_Begin_Pull_Proxy(
    This : Pointer[AsyncIPipeDouble],
    cRequest : CULong) CLong;

external AsyncIPipeDouble_Begin_Pull_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external AsyncIPipeDouble_Finish_Pull_Proxy(
    This : Pointer[AsyncIPipeDouble],
    buf : Pointer[Double],
    pcReturned : Pointer[CULong]) CLong;

external AsyncIPipeDouble_Finish_Pull_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external AsyncIPipeDouble_Begin_Push_Proxy(
    This : Pointer[AsyncIPipeDouble],
    buf : Pointer[Double],
    cSent : CULong) CLong;

external AsyncIPipeDouble_Begin_Push_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external AsyncIPipeDouble_Finish_Push_Proxy(
    This : Pointer[AsyncIPipeDouble]) CLong;

external AsyncIPipeDouble_Finish_Push_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IThumbnailExtractor : IID;

record Struct_IThumbnailExtractorVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IThumbnailExtractor],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IThumbnailExtractor]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IThumbnailExtractor]),(CULong)],
    ExtractThumbnail : CCodePointer[(Pointer[Struct_IThumbnailExtractor],Pointer[Struct_IStorage],CULong,CULong,Pointer[CULong],Pointer[CULong],Pointer[Pointer[Struct_HBITMAP__]]),(CLong)],
    OnFileUpdated : CCodePointer[(Pointer[Struct_IThumbnailExtractor],Pointer[Struct_IStorage]),(CLong)],
);

alias IThumbnailExtractorVtbl = Struct_IThumbnailExtractorVtbl;

record Struct_IThumbnailExtractor (
    lpVtbl : Pointer[Struct_IThumbnailExtractorVtbl],
);

external IThumbnailExtractor_ExtractThumbnail_Proxy(
    This : Pointer[IThumbnailExtractor],
    pStg : Pointer[IStorage],
    ulLength : CULong,
    ulHeight : CULong,
    pulOutputLength : Pointer[CULong],
    pulOutputHeight : Pointer[CULong],
    phOutputBitmap : Pointer[HBITMAP]) CLong;

external IThumbnailExtractor_ExtractThumbnail_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IThumbnailExtractor_OnFileUpdated_Proxy(
    This : Pointer[IThumbnailExtractor],
    pStg : Pointer[IStorage]) CLong;

external IThumbnailExtractor_OnFileUpdated_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IDummyHICONIncluder : IID;

record Struct_IDummyHICONIncluderVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IDummyHICONIncluder],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IDummyHICONIncluder]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IDummyHICONIncluder]),(CULong)],
    Dummy : CCodePointer[(Pointer[Struct_IDummyHICONIncluder],Pointer[Struct_HICON__],Pointer[Struct_HDC__]),(CLong)],
);

alias IDummyHICONIncluderVtbl = Struct_IDummyHICONIncluderVtbl;

record Struct_IDummyHICONIncluder (
    lpVtbl : Pointer[Struct_IDummyHICONIncluderVtbl],
);

external IDummyHICONIncluder_Dummy_Proxy(
    This : Pointer[IDummyHICONIncluder],
    h1 : HICON,
    h2 : HDC) CLong;

external IDummyHICONIncluder_Dummy_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias ServerApplication = 0;
alias LibraryApplication = 1;

alias ApplicationType = Int;

alias IdleShutdown = 0;
alias ForcedShutdown = 1;

alias ShutdownType = Int;

external __MIDL_itf_objidl_0087_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_objidl_0087_v0_0_s_ifspec : RPC_IF_HANDLE;

external IID_IProcessLock : IID;

record Struct_IProcessLockVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IProcessLock],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IProcessLock]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IProcessLock]),(CULong)],
    AddRefOnProcess : CCodePointer[(Pointer[Struct_IProcessLock]),(CULong)],
    ReleaseRefOnProcess : CCodePointer[(Pointer[Struct_IProcessLock]),(CULong)],
);

alias IProcessLockVtbl = Struct_IProcessLockVtbl;

record Struct_IProcessLock (
    lpVtbl : Pointer[Struct_IProcessLockVtbl],
);

external IProcessLock_AddRefOnProcess_Proxy(
    This : Pointer[IProcessLock]) CULong;

external IProcessLock_AddRefOnProcess_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IProcessLock_ReleaseRefOnProcess_Proxy(
    This : Pointer[IProcessLock]) CULong;

external IProcessLock_ReleaseRefOnProcess_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_ISurrogateService : IID;

record Struct_ISurrogateServiceVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_ISurrogateService],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_ISurrogateService]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_ISurrogateService]),(CULong)],
    Init : CCodePointer[(Pointer[Struct_ISurrogateService],Pointer[Struct__GUID],Pointer[Struct_IProcessLock],Pointer[Int]),(CLong)],
    ApplicationLaunch : CCodePointer[(Pointer[Struct_ISurrogateService],Pointer[Struct__GUID],Int),(CLong)],
    ApplicationFree : CCodePointer[(Pointer[Struct_ISurrogateService],Pointer[Struct__GUID]),(CLong)],
    CatalogRefresh : CCodePointer[(Pointer[Struct_ISurrogateService],CULong),(CLong)],
    ProcessShutdown : CCodePointer[(Pointer[Struct_ISurrogateService],Int),(CLong)],
);

alias ISurrogateServiceVtbl = Struct_ISurrogateServiceVtbl;

record Struct_ISurrogateService (
    lpVtbl : Pointer[Struct_ISurrogateServiceVtbl],
);

external ISurrogateService_Init_Proxy(
    This : Pointer[ISurrogateService],
    rguidProcessID : Pointer[GUID],
    pProcessLock : Pointer[IProcessLock],
    pfApplicationAware : Pointer[Int]) CLong;

external ISurrogateService_Init_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ISurrogateService_ApplicationLaunch_Proxy(
    This : Pointer[ISurrogateService],
    rguidApplID : Pointer[GUID],
    appType : ApplicationType) CLong;

external ISurrogateService_ApplicationLaunch_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ISurrogateService_ApplicationFree_Proxy(
    This : Pointer[ISurrogateService],
    rguidApplID : Pointer[GUID]) CLong;

external ISurrogateService_ApplicationFree_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ISurrogateService_CatalogRefresh_Proxy(
    This : Pointer[ISurrogateService],
    ulReserved : CULong) CLong;

external ISurrogateService_CatalogRefresh_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ISurrogateService_ProcessShutdown_Proxy(
    This : Pointer[ISurrogateService],
    shutdownType : ShutdownType) CLong;

external ISurrogateService_ProcessShutdown_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias APTTYPE_CURRENT = 4294967295;
alias APTTYPE_STA = 0;
alias APTTYPE_MTA = 1;
alias APTTYPE_NA = 2;
alias APTTYPE_MAINSTA = 3;

alias APTTYPE = Int;

alias THDTYPE_BLOCKMESSAGES = 0;
alias THDTYPE_PROCESSMESSAGES = 1;

alias THDTYPE = Int;

alias APARTMENTID = CULong;

external __MIDL_itf_objidl_0089_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_objidl_0089_v0_0_s_ifspec : RPC_IF_HANDLE;

external IID_IComThreadingInfo : IID;

record Struct_IComThreadingInfoVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IComThreadingInfo],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IComThreadingInfo]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IComThreadingInfo]),(CULong)],
    GetCurrentApartmentType : CCodePointer[(Pointer[Struct_IComThreadingInfo],Pointer[Int]),(CLong)],
    GetCurrentThreadType : CCodePointer[(Pointer[Struct_IComThreadingInfo],Pointer[Int]),(CLong)],
    GetCurrentLogicalThreadId : CCodePointer[(Pointer[Struct_IComThreadingInfo],Pointer[Struct__GUID]),(CLong)],
    SetCurrentLogicalThreadId : CCodePointer[(Pointer[Struct_IComThreadingInfo],Pointer[Struct__GUID]),(CLong)],
);

alias IComThreadingInfoVtbl = Struct_IComThreadingInfoVtbl;

record Struct_IComThreadingInfo (
    lpVtbl : Pointer[Struct_IComThreadingInfoVtbl],
);

external IComThreadingInfo_GetCurrentApartmentType_Proxy(
    This : Pointer[IComThreadingInfo],
    pAptType : Pointer[APTTYPE]) CLong;

external IComThreadingInfo_GetCurrentApartmentType_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IComThreadingInfo_GetCurrentThreadType_Proxy(
    This : Pointer[IComThreadingInfo],
    pThreadType : Pointer[THDTYPE]) CLong;

external IComThreadingInfo_GetCurrentThreadType_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IComThreadingInfo_GetCurrentLogicalThreadId_Proxy(
    This : Pointer[IComThreadingInfo],
    pguidLogicalThreadId : Pointer[GUID]) CLong;

external IComThreadingInfo_GetCurrentLogicalThreadId_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IComThreadingInfo_SetCurrentLogicalThreadId_Proxy(
    This : Pointer[IComThreadingInfo],
    rguid : Pointer[GUID]) CLong;

external IComThreadingInfo_SetCurrentLogicalThreadId_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IProcessInitControl : IID;

record Struct_IProcessInitControlVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IProcessInitControl],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IProcessInitControl]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IProcessInitControl]),(CULong)],
    ResetInitializerTimeout : CCodePointer[(Pointer[Struct_IProcessInitControl],CULong),(CLong)],
);

alias IProcessInitControlVtbl = Struct_IProcessInitControlVtbl;

record Struct_IProcessInitControl (
    lpVtbl : Pointer[Struct_IProcessInitControlVtbl],
);

external IProcessInitControl_ResetInitializerTimeout_Proxy(
    This : Pointer[IProcessInitControl],
    dwSecondsRemaining : CULong) CLong;

external IProcessInitControl_ResetInitializerTimeout_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external __MIDL_itf_objidl_0091_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_objidl_0091_v0_0_s_ifspec : RPC_IF_HANDLE;

alias LPINITIALIZESPY = Pointer[IInitializeSpy];

external IID_IInitializeSpy : IID;

record Struct_IInitializeSpyVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IInitializeSpy],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IInitializeSpy]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IInitializeSpy]),(CULong)],
    PreInitialize : CCodePointer[(Pointer[Struct_IInitializeSpy],CULong,CULong),(CLong)],
    PostInitialize : CCodePointer[(Pointer[Struct_IInitializeSpy],CLong,CULong,CULong),(CLong)],
    PreUninitialize : CCodePointer[(Pointer[Struct_IInitializeSpy],CULong),(CLong)],
    PostUninitialize : CCodePointer[(Pointer[Struct_IInitializeSpy],CULong),(CLong)],
);

alias IInitializeSpyVtbl = Struct_IInitializeSpyVtbl;

record Struct_IInitializeSpy (
    lpVtbl : Pointer[Struct_IInitializeSpyVtbl],
);

external IInitializeSpy_PreInitialize_Proxy(
    This : Pointer[IInitializeSpy],
    dwCoInit : CULong,
    dwCurThreadAptRefs : CULong) CLong;

external IInitializeSpy_PreInitialize_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInitializeSpy_PostInitialize_Proxy(
    This : Pointer[IInitializeSpy],
    hrCoInit : CLong,
    dwCoInit : CULong,
    dwNewThreadAptRefs : CULong) CLong;

external IInitializeSpy_PostInitialize_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInitializeSpy_PreUninitialize_Proxy(
    This : Pointer[IInitializeSpy],
    dwCurThreadAptRefs : CULong) CLong;

external IInitializeSpy_PreUninitialize_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInitializeSpy_PostUninitialize_Proxy(
    This : Pointer[IInitializeSpy],
    dwNewThreadAptRefs : CULong) CLong;

external IInitializeSpy_PostUninitialize_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external __MIDL_itf_objidl_0092_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_objidl_0092_v0_0_s_ifspec : RPC_IF_HANDLE;

external ASYNC_STGMEDIUM_UserSize(
    argument0 : Pointer[CULong],
    argument1 : CULong,
    argument2 : Pointer[ASYNC_STGMEDIUM]) CULong;

external ASYNC_STGMEDIUM_UserMarshal(
    argument0 : Pointer[CULong],
    argument1 : Pointer[CUChar],
    argument2 : Pointer[ASYNC_STGMEDIUM]) Pointer[CUChar];

external ASYNC_STGMEDIUM_UserUnmarshal(
    argument0 : Pointer[CULong],
    argument1 : Pointer[CUChar],
    argument2 : Pointer[ASYNC_STGMEDIUM]) Pointer[CUChar];

external ASYNC_STGMEDIUM_UserFree(
    argument0 : Pointer[CULong],
    argument1 : Pointer[ASYNC_STGMEDIUM]);

external CLIPFORMAT_UserSize(
    argument0 : Pointer[CULong],
    argument1 : CULong,
    argument2 : Pointer[UShort]) CULong;

external CLIPFORMAT_UserMarshal(
    argument0 : Pointer[CULong],
    argument1 : Pointer[CUChar],
    argument2 : Pointer[UShort]) Pointer[CUChar];

external CLIPFORMAT_UserUnmarshal(
    argument0 : Pointer[CULong],
    argument1 : Pointer[CUChar],
    argument2 : Pointer[UShort]) Pointer[CUChar];

external CLIPFORMAT_UserFree(
    argument0 : Pointer[CULong],
    argument1 : Pointer[UShort]);

external FLAG_STGMEDIUM_UserSize(
    argument0 : Pointer[CULong],
    argument1 : CULong,
    argument2 : Pointer[FLAG_STGMEDIUM]) CULong;

external FLAG_STGMEDIUM_UserMarshal(
    argument0 : Pointer[CULong],
    argument1 : Pointer[CUChar],
    argument2 : Pointer[FLAG_STGMEDIUM]) Pointer[CUChar];

external FLAG_STGMEDIUM_UserUnmarshal(
    argument0 : Pointer[CULong],
    argument1 : Pointer[CUChar],
    argument2 : Pointer[FLAG_STGMEDIUM]) Pointer[CUChar];

external FLAG_STGMEDIUM_UserFree(
    argument0 : Pointer[CULong],
    argument1 : Pointer[FLAG_STGMEDIUM]);

external HBITMAP_UserSize(
    argument0 : Pointer[CULong],
    argument1 : CULong,
    argument2 : Pointer[HBITMAP]) CULong;

external HBITMAP_UserMarshal(
    argument0 : Pointer[CULong],
    argument1 : Pointer[CUChar],
    argument2 : Pointer[HBITMAP]) Pointer[CUChar];

external HBITMAP_UserUnmarshal(
    argument0 : Pointer[CULong],
    argument1 : Pointer[CUChar],
    argument2 : Pointer[HBITMAP]) Pointer[CUChar];

external HBITMAP_UserFree(
    argument0 : Pointer[CULong],
    argument1 : Pointer[HBITMAP]);

external HDC_UserSize(
    argument0 : Pointer[CULong],
    argument1 : CULong,
    argument2 : Pointer[HDC]) CULong;

external HDC_UserMarshal(
    argument0 : Pointer[CULong],
    argument1 : Pointer[CUChar],
    argument2 : Pointer[HDC]) Pointer[CUChar];

external HDC_UserUnmarshal(
    argument0 : Pointer[CULong],
    argument1 : Pointer[CUChar],
    argument2 : Pointer[HDC]) Pointer[CUChar];

external HDC_UserFree(
    argument0 : Pointer[CULong],
    argument1 : Pointer[HDC]);

external HICON_UserSize(
    argument0 : Pointer[CULong],
    argument1 : CULong,
    argument2 : Pointer[HICON]) CULong;

external HICON_UserMarshal(
    argument0 : Pointer[CULong],
    argument1 : Pointer[CUChar],
    argument2 : Pointer[HICON]) Pointer[CUChar];

external HICON_UserUnmarshal(
    argument0 : Pointer[CULong],
    argument1 : Pointer[CUChar],
    argument2 : Pointer[HICON]) Pointer[CUChar];

external HICON_UserFree(
    argument0 : Pointer[CULong],
    argument1 : Pointer[HICON]);

external SNB_UserSize(
    argument0 : Pointer[CULong],
    argument1 : CULong,
    argument2 : Pointer[SNB]) CULong;

external SNB_UserMarshal(
    argument0 : Pointer[CULong],
    argument1 : Pointer[CUChar],
    argument2 : Pointer[SNB]) Pointer[CUChar];

external SNB_UserUnmarshal(
    argument0 : Pointer[CULong],
    argument1 : Pointer[CUChar],
    argument2 : Pointer[SNB]) Pointer[CUChar];

external SNB_UserFree(
    argument0 : Pointer[CULong],
    argument1 : Pointer[SNB]);

external STGMEDIUM_UserSize(
    argument0 : Pointer[CULong],
    argument1 : CULong,
    argument2 : Pointer[STGMEDIUM]) CULong;

external STGMEDIUM_UserMarshal(
    argument0 : Pointer[CULong],
    argument1 : Pointer[CUChar],
    argument2 : Pointer[STGMEDIUM]) Pointer[CUChar];

external STGMEDIUM_UserUnmarshal(
    argument0 : Pointer[CULong],
    argument1 : Pointer[CUChar],
    argument2 : Pointer[STGMEDIUM]) Pointer[CUChar];

external STGMEDIUM_UserFree(
    argument0 : Pointer[CULong],
    argument1 : Pointer[STGMEDIUM]);

external IEnumUnknown_Next_Proxy(
    This : Pointer[IEnumUnknown],
    celt : CULong,
    rgelt : Pointer[Pointer[IUnknown]],
    pceltFetched : Pointer[CULong]) CLong;

external IEnumUnknown_Next_Stub(
    This : Pointer[IEnumUnknown],
    celt : CULong,
    rgelt : Pointer[Pointer[IUnknown]],
    pceltFetched : Pointer[CULong]) CLong;

external IBindCtx_SetBindOptions_Proxy(
    This : Pointer[IBindCtx],
    pbindopts : Pointer[BIND_OPTS]) CLong;

external IBindCtx_SetBindOptions_Stub(
    This : Pointer[IBindCtx],
    pbindopts : Pointer[BIND_OPTS2]) CLong;

external IBindCtx_GetBindOptions_Proxy(
    This : Pointer[IBindCtx],
    pbindopts : Pointer[BIND_OPTS]) CLong;

external IBindCtx_GetBindOptions_Stub(
    This : Pointer[IBindCtx],
    pbindopts : Pointer[BIND_OPTS2]) CLong;

external IEnumMoniker_Next_Proxy(
    This : Pointer[IEnumMoniker],
    celt : CULong,
    rgelt : Pointer[Pointer[IMoniker]],
    pceltFetched : Pointer[CULong]) CLong;

external IEnumMoniker_Next_Stub(
    This : Pointer[IEnumMoniker],
    celt : CULong,
    rgelt : Pointer[Pointer[IMoniker]],
    pceltFetched : Pointer[CULong]) CLong;

external IRunnableObject_IsRunning_Proxy(
    This : Pointer[IRunnableObject]) Int;

external IRunnableObject_IsRunning_Stub(
    This : Pointer[IRunnableObject]) CLong;

external IMoniker_BindToObject_Proxy(
    This : Pointer[IMoniker],
    pbc : Pointer[IBindCtx],
    pmkToLeft : Pointer[IMoniker],
    riidResult : Pointer[IID],
    ppvResult : Pointer[RawPointer]) CLong;

external IMoniker_BindToObject_Stub(
    This : Pointer[IMoniker],
    pbc : Pointer[IBindCtx],
    pmkToLeft : Pointer[IMoniker],
    riidResult : Pointer[IID],
    ppvResult : Pointer[Pointer[IUnknown]]) CLong;

external IMoniker_BindToStorage_Proxy(
    This : Pointer[IMoniker],
    pbc : Pointer[IBindCtx],
    pmkToLeft : Pointer[IMoniker],
    riid : Pointer[IID],
    ppvObj : Pointer[RawPointer]) CLong;

external IMoniker_BindToStorage_Stub(
    This : Pointer[IMoniker],
    pbc : Pointer[IBindCtx],
    pmkToLeft : Pointer[IMoniker],
    riid : Pointer[IID],
    ppvObj : Pointer[Pointer[IUnknown]]) CLong;

external IEnumString_Next_Proxy(
    This : Pointer[IEnumString],
    celt : CULong,
    rgelt : Pointer[LPOLESTR],
    pceltFetched : Pointer[CULong]) CLong;

external IEnumString_Next_Stub(
    This : Pointer[IEnumString],
    celt : CULong,
    rgelt : Pointer[LPOLESTR],
    pceltFetched : Pointer[CULong]) CLong;

external ISequentialStream_Read_Proxy(
    This : Pointer[ISequentialStream],
    pv : RawPointer,
    cb : CULong,
    pcbRead : Pointer[CULong]) CLong;

external ISequentialStream_Read_Stub(
    This : Pointer[ISequentialStream],
    pv : Pointer[CUChar],
    cb : CULong,
    pcbRead : Pointer[CULong]) CLong;

external ISequentialStream_Write_Proxy(
    This : Pointer[ISequentialStream],
    pv : RawPointer,
    cb : CULong,
    pcbWritten : Pointer[CULong]) CLong;

external ISequentialStream_Write_Stub(
    This : Pointer[ISequentialStream],
    pv : Pointer[CUChar],
    cb : CULong,
    pcbWritten : Pointer[CULong]) CLong;

external IStream_Seek_Proxy(
    This : Pointer[IStream],
    dlibMove : LARGE_INTEGER,
    dwOrigin : CULong,
    plibNewPosition : Pointer[ULARGE_INTEGER]) CLong;

external IStream_Seek_Stub(
    This : Pointer[IStream],
    dlibMove : LARGE_INTEGER,
    dwOrigin : CULong,
    plibNewPosition : Pointer[ULARGE_INTEGER]) CLong;

external IStream_CopyTo_Proxy(
    This : Pointer[IStream],
    pstm : Pointer[IStream],
    cb : ULARGE_INTEGER,
    pcbRead : Pointer[ULARGE_INTEGER],
    pcbWritten : Pointer[ULARGE_INTEGER]) CLong;

external IStream_CopyTo_Stub(
    This : Pointer[IStream],
    pstm : Pointer[IStream],
    cb : ULARGE_INTEGER,
    pcbRead : Pointer[ULARGE_INTEGER],
    pcbWritten : Pointer[ULARGE_INTEGER]) CLong;

external IEnumSTATSTG_Next_Proxy(
    This : Pointer[IEnumSTATSTG],
    celt : CULong,
    rgelt : Pointer[STATSTG],
    pceltFetched : Pointer[CULong]) CLong;

external IEnumSTATSTG_Next_Stub(
    This : Pointer[IEnumSTATSTG],
    celt : CULong,
    rgelt : Pointer[STATSTG],
    pceltFetched : Pointer[CULong]) CLong;

external IStorage_OpenStream_Proxy(
    This : Pointer[IStorage],
    pwcsName : Pointer[UShort],
    reserved1 : RawPointer,
    grfMode : CULong,
    reserved2 : CULong,
    ppstm : Pointer[Pointer[IStream]]) CLong;

external IStorage_OpenStream_Stub(
    This : Pointer[IStorage],
    pwcsName : Pointer[UShort],
    cbReserved1 : CULong,
    reserved1 : Pointer[CUChar],
    grfMode : CULong,
    reserved2 : CULong,
    ppstm : Pointer[Pointer[IStream]]) CLong;

external IStorage_EnumElements_Proxy(
    This : Pointer[IStorage],
    reserved1 : CULong,
    reserved2 : RawPointer,
    reserved3 : CULong,
    ppenum : Pointer[Pointer[IEnumSTATSTG]]) CLong;

external IStorage_EnumElements_Stub(
    This : Pointer[IStorage],
    reserved1 : CULong,
    cbReserved2 : CULong,
    reserved2 : Pointer[CUChar],
    reserved3 : CULong,
    ppenum : Pointer[Pointer[IEnumSTATSTG]]) CLong;

external ILockBytes_ReadAt_Proxy(
    This : Pointer[ILockBytes],
    ulOffset : ULARGE_INTEGER,
    pv : RawPointer,
    cb : CULong,
    pcbRead : Pointer[CULong]) CLong;

external ILockBytes_ReadAt_Stub(
    This : Pointer[ILockBytes],
    ulOffset : ULARGE_INTEGER,
    pv : Pointer[CUChar],
    cb : CULong,
    pcbRead : Pointer[CULong]) CLong;

external ILockBytes_WriteAt_Proxy(
    This : Pointer[ILockBytes],
    ulOffset : ULARGE_INTEGER,
    pv : RawPointer,
    cb : CULong,
    pcbWritten : Pointer[CULong]) CLong;

external ILockBytes_WriteAt_Stub(
    This : Pointer[ILockBytes],
    ulOffset : ULARGE_INTEGER,
    pv : Pointer[CUChar],
    cb : CULong,
    pcbWritten : Pointer[CULong]) CLong;

external IEnumFORMATETC_Next_Proxy(
    This : Pointer[IEnumFORMATETC],
    celt : CULong,
    rgelt : Pointer[FORMATETC],
    pceltFetched : Pointer[CULong]) CLong;

external IEnumFORMATETC_Next_Stub(
    This : Pointer[IEnumFORMATETC],
    celt : CULong,
    rgelt : Pointer[FORMATETC],
    pceltFetched : Pointer[CULong]) CLong;

external IEnumSTATDATA_Next_Proxy(
    This : Pointer[IEnumSTATDATA],
    celt : CULong,
    rgelt : Pointer[STATDATA],
    pceltFetched : Pointer[CULong]) CLong;

external IEnumSTATDATA_Next_Stub(
    This : Pointer[IEnumSTATDATA],
    celt : CULong,
    rgelt : Pointer[STATDATA],
    pceltFetched : Pointer[CULong]) CLong;

external IAdviseSink_OnDataChange_Proxy(
    This : Pointer[IAdviseSink],
    pFormatetc : Pointer[FORMATETC],
    pStgmed : Pointer[STGMEDIUM]);

external IAdviseSink_OnDataChange_Stub(
    This : Pointer[IAdviseSink],
    pFormatetc : Pointer[FORMATETC],
    pStgmed : Pointer[ASYNC_STGMEDIUM]) CLong;

external IAdviseSink_OnViewChange_Proxy(
    This : Pointer[IAdviseSink],
    dwAspect : CULong,
    lindex : CLong);

external IAdviseSink_OnViewChange_Stub(
    This : Pointer[IAdviseSink],
    dwAspect : CULong,
    lindex : CLong) CLong;

external IAdviseSink_OnRename_Proxy(
    This : Pointer[IAdviseSink],
    pmk : Pointer[IMoniker]);

external IAdviseSink_OnRename_Stub(
    This : Pointer[IAdviseSink],
    pmk : Pointer[IMoniker]) CLong;

external IAdviseSink_OnSave_Proxy(
    This : Pointer[IAdviseSink]);

external IAdviseSink_OnSave_Stub(
    This : Pointer[IAdviseSink]) CLong;

external IAdviseSink_OnClose_Proxy(
    This : Pointer[IAdviseSink]);

external IAdviseSink_OnClose_Stub(
    This : Pointer[IAdviseSink]) CLong;

external IAdviseSink2_OnLinkSrcChange_Proxy(
    This : Pointer[IAdviseSink2],
    pmk : Pointer[IMoniker]);

external IAdviseSink2_OnLinkSrcChange_Stub(
    This : Pointer[IAdviseSink2],
    pmk : Pointer[IMoniker]) CLong;

external IDataObject_GetData_Proxy(
    This : Pointer[IDataObject],
    pformatetcIn : Pointer[FORMATETC],
    pmedium : Pointer[STGMEDIUM]) CLong;

external IDataObject_GetData_Stub(
    This : Pointer[IDataObject],
    pformatetcIn : Pointer[FORMATETC],
    pRemoteMedium : Pointer[STGMEDIUM]) CLong;

external IDataObject_GetDataHere_Proxy(
    This : Pointer[IDataObject],
    pformatetc : Pointer[FORMATETC],
    pmedium : Pointer[STGMEDIUM]) CLong;

external IDataObject_GetDataHere_Stub(
    This : Pointer[IDataObject],
    pformatetc : Pointer[FORMATETC],
    pRemoteMedium : Pointer[STGMEDIUM]) CLong;

external IDataObject_SetData_Proxy(
    This : Pointer[IDataObject],
    pformatetc : Pointer[FORMATETC],
    pmedium : Pointer[STGMEDIUM],
    fRelease : Int) CLong;

external IDataObject_SetData_Stub(
    This : Pointer[IDataObject],
    pformatetc : Pointer[FORMATETC],
    pmedium : Pointer[FLAG_STGMEDIUM],
    fRelease : Int) CLong;

external IFillLockBytes_FillAppend_Proxy(
    This : Pointer[IFillLockBytes],
    pv : RawPointer,
    cb : CULong,
    pcbWritten : Pointer[CULong]) CLong;

external IFillLockBytes_FillAppend_Stub(
    This : Pointer[IFillLockBytes],
    pv : Pointer[CUChar],
    cb : CULong,
    pcbWritten : Pointer[CULong]) CLong;

external IFillLockBytes_FillAt_Proxy(
    This : Pointer[IFillLockBytes],
    ulOffset : ULARGE_INTEGER,
    pv : RawPointer,
    cb : CULong,
    pcbWritten : Pointer[CULong]) CLong;

external IFillLockBytes_FillAt_Stub(
    This : Pointer[IFillLockBytes],
    ulOffset : ULARGE_INTEGER,
    pv : Pointer[CUChar],
    cb : CULong,
    pcbWritten : Pointer[CULong]) CLong;

external AsyncIAdviseSink_Begin_OnDataChange_Proxy(
    This : Pointer[AsyncIAdviseSink],
    pFormatetc : Pointer[FORMATETC],
    pStgmed : Pointer[STGMEDIUM]);

external AsyncIAdviseSink_Begin_OnDataChange_Stub(
    This : Pointer[AsyncIAdviseSink],
    pFormatetc : Pointer[FORMATETC],
    pStgmed : Pointer[ASYNC_STGMEDIUM]) CLong;

external AsyncIAdviseSink_Finish_OnDataChange_Proxy(
    This : Pointer[AsyncIAdviseSink]);

external AsyncIAdviseSink_Finish_OnDataChange_Stub(
    This : Pointer[AsyncIAdviseSink]) CLong;

external AsyncIAdviseSink_Begin_OnViewChange_Proxy(
    This : Pointer[AsyncIAdviseSink],
    dwAspect : CULong,
    lindex : CLong);

external AsyncIAdviseSink_Begin_OnViewChange_Stub(
    This : Pointer[AsyncIAdviseSink],
    dwAspect : CULong,
    lindex : CLong) CLong;

external AsyncIAdviseSink_Finish_OnViewChange_Proxy(
    This : Pointer[AsyncIAdviseSink]);

external AsyncIAdviseSink_Finish_OnViewChange_Stub(
    This : Pointer[AsyncIAdviseSink]) CLong;

external AsyncIAdviseSink_Begin_OnRename_Proxy(
    This : Pointer[AsyncIAdviseSink],
    pmk : Pointer[IMoniker]);

external AsyncIAdviseSink_Begin_OnRename_Stub(
    This : Pointer[AsyncIAdviseSink],
    pmk : Pointer[IMoniker]) CLong;

external AsyncIAdviseSink_Finish_OnRename_Proxy(
    This : Pointer[AsyncIAdviseSink]);

external AsyncIAdviseSink_Finish_OnRename_Stub(
    This : Pointer[AsyncIAdviseSink]) CLong;

external AsyncIAdviseSink_Begin_OnSave_Proxy(
    This : Pointer[AsyncIAdviseSink]);

external AsyncIAdviseSink_Begin_OnSave_Stub(
    This : Pointer[AsyncIAdviseSink]) CLong;

external AsyncIAdviseSink_Finish_OnSave_Proxy(
    This : Pointer[AsyncIAdviseSink]);

external AsyncIAdviseSink_Finish_OnSave_Stub(
    This : Pointer[AsyncIAdviseSink]) CLong;

external AsyncIAdviseSink_Begin_OnClose_Proxy(
    This : Pointer[AsyncIAdviseSink]);

external AsyncIAdviseSink_Begin_OnClose_Stub(
    This : Pointer[AsyncIAdviseSink]) CLong;

external AsyncIAdviseSink_Finish_OnClose_Proxy(
    This : Pointer[AsyncIAdviseSink]);

external AsyncIAdviseSink_Finish_OnClose_Stub(
    This : Pointer[AsyncIAdviseSink]) CLong;

external AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy(
    This : Pointer[AsyncIAdviseSink2],
    pmk : Pointer[IMoniker]);

external AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub(
    This : Pointer[AsyncIAdviseSink2],
    pmk : Pointer[IMoniker]) CLong;

external AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy(
    This : Pointer[AsyncIAdviseSink2]);

external AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub(
    This : Pointer[AsyncIAdviseSink2]) CLong;

external GUID_NULL : IID;

external CATID_MARSHALER : IID;

external IID_IRpcChannel : IID;

external IID_IRpcStub : IID;

external IID_IStubManager : IID;

external IID_IRpcProxy : IID;

external IID_IProxyManager : IID;

external IID_IPSFactory : IID;

external IID_IInternalMoniker : IID;

external IID_IDfReserved1 : IID;

external IID_IDfReserved2 : IID;

external IID_IDfReserved3 : IID;

external CLSID_StdMarshal : CLSID;

external CLSID_AggStdMarshal : CLSID;

external CLSID_StdAsyncActManager : CLSID;

external IID_IStub : IID;

external IID_IProxy : IID;

external IID_IEnumGeneric : IID;

external IID_IEnumHolder : IID;

external IID_IEnumCallback : IID;

external IID_IOleManager : IID;

external IID_IOlePresObj : IID;

external IID_IDebug : IID;

external IID_IDebugStream : IID;

external CLSID_PSGenObject : CLSID;

external CLSID_PSClientSite : CLSID;

external CLSID_PSClassObject : CLSID;

external CLSID_PSInPlaceActive : CLSID;

external CLSID_PSInPlaceFrame : CLSID;

external CLSID_PSDragDrop : CLSID;

external CLSID_PSBindCtx : CLSID;

external CLSID_PSEnumerators : CLSID;

external CLSID_StaticMetafile : CLSID;

external CLSID_StaticDib : CLSID;

external CID_CDfsVolume : CLSID;

external CLSID_DCOMAccessControl : CLSID;

external CLSID_StdGlobalInterfaceTable : CLSID;

external CLSID_ComBinding : CLSID;

external CLSID_StdEvent : CLSID;

external CLSID_ManualResetEvent : CLSID;

external CLSID_SynchronizeContainer : CLSID;

external CLSID_AddrControl : CLSID;

external CLSID_CCDFormKrnl : CLSID;

external CLSID_CCDPropertyPage : CLSID;

external CLSID_CCDFormDialog : CLSID;

external CLSID_CCDCommandButton : CLSID;

external CLSID_CCDComboBox : CLSID;

external CLSID_CCDTextBox : CLSID;

external CLSID_CCDCheckBox : CLSID;

external CLSID_CCDLabel : CLSID;

external CLSID_CCDOptionButton : CLSID;

external CLSID_CCDListBox : CLSID;

external CLSID_CCDScrollBar : CLSID;

external CLSID_CCDGroupBox : CLSID;

external CLSID_CCDGeneralPropertyPage : CLSID;

external CLSID_CCDGenericPropertyPage : CLSID;

external CLSID_CCDFontPropertyPage : CLSID;

external CLSID_CCDColorPropertyPage : CLSID;

external CLSID_CCDLabelPropertyPage : CLSID;

external CLSID_CCDCheckBoxPropertyPage : CLSID;

external CLSID_CCDTextBoxPropertyPage : CLSID;

external CLSID_CCDOptionButtonPropertyPage : CLSID;

external CLSID_CCDListBoxPropertyPage : CLSID;

external CLSID_CCDCommandButtonPropertyPage : CLSID;

external CLSID_CCDComboBoxPropertyPage : CLSID;

external CLSID_CCDScrollBarPropertyPage : CLSID;

external CLSID_CCDGroupBoxPropertyPage : CLSID;

external CLSID_CCDXObjectPropertyPage : CLSID;

external CLSID_CStdPropertyFrame : CLSID;

external CLSID_CFormPropertyPage : CLSID;

external CLSID_CGridPropertyPage : CLSID;

external CLSID_CWSJArticlePage : CLSID;

external CLSID_CSystemPage : CLSID;

external CLSID_IdentityUnmarshal : CLSID;

external CLSID_InProcFreeMarshaler : CLSID;

external CLSID_Picture_Metafile : CLSID;

external CLSID_Picture_EnhMetafile : CLSID;

external CLSID_Picture_Dib : CLSID;

external GUID_TRISTATE : GUID;

alias COINIT_APARTMENTTHREADED = 2;
alias COINIT_MULTITHREADED = 0;
alias COINIT_DISABLE_OLE1DDE = 4;
alias COINIT_SPEED_OVER_MEMORY = 8;

alias COINIT = Int;

external CoBuildVersion() CULong;

external CoInitialize(
    pvReserved : LPVOID) CLong;

external CoUninitialize();

external CoGetMalloc(
    dwMemContext : CULong,
    ppMalloc : Pointer[LPMALLOC]) CLong;

external CoGetCurrentProcess() CULong;

external CoRegisterMallocSpy(
    pMallocSpy : LPMALLOCSPY) CLong;

external CoRevokeMallocSpy() CLong;

external CoCreateStandardMalloc(
    memctx : CULong,
    ppMalloc : Pointer[Pointer[IMalloc]]) CLong;

external CoInitializeEx(
    pvReserved : LPVOID,
    dwCoInit : CULong) CLong;

external CoGetCallerTID(
    lpdwTID : LPDWORD) CLong;

external CoRegisterInitializeSpy(
    pSpy : LPINITIALIZESPY,
    puliCookie : Pointer[ULARGE_INTEGER]) CLong;

external CoRevokeInitializeSpy(
    uliCookie : ULARGE_INTEGER) CLong;

external CoGetContextToken(
    pToken : Pointer[UInt64]) CLong;

alias SD_LAUNCHPERMISSIONS = 0;
alias SD_ACCESSPERMISSIONS = 1;
alias SD_LAUNCHRESTRICTIONS = 2;
alias SD_ACCESSRESTRICTIONS = 3;

alias COMSD = Int;

external CoGetSystemSecurityPermissions(
    comSDType : COMSD,
    ppSD : Pointer[PSECURITY_DESCRIPTOR]) CLong;

record Struct_tagSOleTlsDataPublic (
    pvReserved0 : Array[RawPointer,2],
    dwReserved0 : Array[CULong,3],
    pvReserved1 : Array[RawPointer,1],
    dwReserved1 : Array[CULong,3],
    pvReserved2 : Array[RawPointer,4],
    dwReserved2 : Array[CULong,1],
    pCurrentCtx : RawPointer,
);

alias SOleTlsDataPublic = Struct_tagSOleTlsDataPublic;

external CoGetObjectContext(
    riid : Pointer[IID],
    ppv : Pointer[LPVOID]) CLong;

external CoGetClassObject(
    rclsid : Pointer[IID],
    dwClsContext : CULong,
    pvReserved : LPVOID,
    riid : Pointer[IID],
    ppv : Pointer[LPVOID]) CLong;

external CoRegisterClassObject(
    rclsid : Pointer[IID],
    pUnk : LPUNKNOWN,
    dwClsContext : CULong,
    flags : CULong,
    lpdwRegister : LPDWORD) CLong;

external CoRevokeClassObject(
    dwRegister : CULong) CLong;

external CoResumeClassObjects() CLong;

external CoSuspendClassObjects() CLong;

external CoAddRefServerProcess() CULong;

external CoReleaseServerProcess() CULong;

external CoGetPSClsid(
    riid : Pointer[IID],
    pClsid : Pointer[CLSID]) CLong;

external CoRegisterPSClsid(
    riid : Pointer[IID],
    rclsid : Pointer[IID]) CLong;

external CoRegisterSurrogate(
    pSurrogate : LPSURROGATE) CLong;

external CoGetMarshalSizeMax(
    pulSize : Pointer[CULong],
    riid : Pointer[IID],
    pUnk : LPUNKNOWN,
    dwDestContext : CULong,
    pvDestContext : LPVOID,
    mshlflags : CULong) CLong;

external CoMarshalInterface(
    pStm : LPSTREAM,
    riid : Pointer[IID],
    pUnk : LPUNKNOWN,
    dwDestContext : CULong,
    pvDestContext : LPVOID,
    mshlflags : CULong) CLong;

external CoUnmarshalInterface(
    pStm : LPSTREAM,
    riid : Pointer[IID],
    ppv : Pointer[LPVOID]) CLong;

external CoMarshalHresult(
    pstm : LPSTREAM,
    hresult : CLong) CLong;

external CoUnmarshalHresult(
    pstm : LPSTREAM,
    phresult : Pointer[CLong]) CLong;

external CoReleaseMarshalData(
    pStm : LPSTREAM) CLong;

external CoDisconnectObject(
    pUnk : LPUNKNOWN,
    dwReserved : CULong) CLong;

external CoLockObjectExternal(
    pUnk : LPUNKNOWN,
    fLock : Int,
    fLastUnlockReleases : Int) CLong;

external CoGetStandardMarshal(
    riid : Pointer[IID],
    pUnk : LPUNKNOWN,
    dwDestContext : CULong,
    pvDestContext : LPVOID,
    mshlflags : CULong,
    ppMarshal : Pointer[LPMARSHAL]) CLong;

external CoGetStdMarshalEx(
    pUnkOuter : LPUNKNOWN,
    smexflags : CULong,
    ppUnkInner : Pointer[LPUNKNOWN]) CLong;

alias SMEXF_SERVER = 1;
alias SMEXF_HANDLER = 2;

alias STDMSHLFLAGS = Int;

external CoIsHandlerConnected(
    pUnk : LPUNKNOWN) Int;

external CoMarshalInterThreadInterfaceInStream(
    riid : Pointer[IID],
    pUnk : LPUNKNOWN,
    ppStm : Pointer[LPSTREAM]) CLong;

external CoGetInterfaceAndReleaseStream(
    pStm : LPSTREAM,
    iid : Pointer[IID],
    ppv : Pointer[LPVOID]) CLong;

external CoCreateFreeThreadedMarshaler(
    punkOuter : LPUNKNOWN,
    ppunkMarshal : Pointer[LPUNKNOWN]) CLong;

external CoLoadLibrary(
    lpszLibName : LPOLESTR,
    bAutoFree : Int) HINSTANCE;

external CoFreeLibrary(
    hInst : HINSTANCE);

external CoFreeAllLibraries();

external CoFreeUnusedLibraries();

external CoFreeUnusedLibrariesEx(
    dwUnloadDelay : CULong,
    dwReserved : CULong);

external CoInitializeSecurity(
    pSecDesc : PSECURITY_DESCRIPTOR,
    cAuthSvc : CLong,
    asAuthSvc : Pointer[SOLE_AUTHENTICATION_SERVICE],
    pReserved1 : RawPointer,
    dwAuthnLevel : CULong,
    dwImpLevel : CULong,
    pAuthList : RawPointer,
    dwCapabilities : CULong,
    pReserved3 : RawPointer) CLong;

external CoGetCallContext(
    riid : Pointer[IID],
    ppInterface : Pointer[RawPointer]) CLong;

external CoQueryProxyBlanket(
    pProxy : Pointer[IUnknown],
    pwAuthnSvc : Pointer[CULong],
    pAuthzSvc : Pointer[CULong],
    pServerPrincName : Pointer[Pointer[UShort]],
    pAuthnLevel : Pointer[CULong],
    pImpLevel : Pointer[CULong],
    pAuthInfo : Pointer[RPC_AUTH_IDENTITY_HANDLE],
    pCapabilites : Pointer[CULong]) CLong;

external CoSetProxyBlanket(
    pProxy : Pointer[IUnknown],
    dwAuthnSvc : CULong,
    dwAuthzSvc : CULong,
    pServerPrincName : Pointer[UShort],
    dwAuthnLevel : CULong,
    dwImpLevel : CULong,
    pAuthInfo : RPC_AUTH_IDENTITY_HANDLE,
    dwCapabilities : CULong) CLong;

external CoCopyProxy(
    pProxy : Pointer[IUnknown],
    ppCopy : Pointer[Pointer[IUnknown]]) CLong;

external CoQueryClientBlanket(
    pAuthnSvc : Pointer[CULong],
    pAuthzSvc : Pointer[CULong],
    pServerPrincName : Pointer[Pointer[UShort]],
    pAuthnLevel : Pointer[CULong],
    pImpLevel : Pointer[CULong],
    pPrivs : Pointer[RPC_AUTHZ_HANDLE],
    pCapabilities : Pointer[CULong]) CLong;

external CoImpersonateClient() CLong;

external CoRevertToSelf() CLong;

external CoQueryAuthenticationServices(
    pcAuthSvc : Pointer[CULong],
    asAuthSvc : Pointer[Pointer[SOLE_AUTHENTICATION_SERVICE]]) CLong;

external CoSwitchCallContext(
    pNewObject : Pointer[IUnknown],
    ppOldObject : Pointer[Pointer[IUnknown]]) CLong;

external CoCreateInstance(
    rclsid : Pointer[IID],
    pUnkOuter : LPUNKNOWN,
    dwClsContext : CULong,
    riid : Pointer[IID],
    ppv : Pointer[LPVOID]) CLong;

external CoGetInstanceFromFile(
    pServerInfo : Pointer[COSERVERINFO],
    pClsid : Pointer[CLSID],
    punkOuter : Pointer[IUnknown],
    dwClsCtx : CULong,
    grfMode : CULong,
    pwszName : Pointer[UShort],
    dwCount : CULong,
    pResults : Pointer[MULTI_QI]) CLong;

external CoGetInstanceFromIStorage(
    pServerInfo : Pointer[COSERVERINFO],
    pClsid : Pointer[CLSID],
    punkOuter : Pointer[IUnknown],
    dwClsCtx : CULong,
    pstg : Pointer[Struct_IStorage],
    dwCount : CULong,
    pResults : Pointer[MULTI_QI]) CLong;

external CoCreateInstanceEx(
    Clsid : Pointer[IID],
    punkOuter : Pointer[IUnknown],
    dwClsCtx : CULong,
    pServerInfo : Pointer[COSERVERINFO],
    dwCount : CULong,
    pResults : Pointer[MULTI_QI]) CLong;

external CoGetCancelObject(
    dwThreadId : CULong,
    iid : Pointer[IID],
    ppUnk : Pointer[RawPointer]) CLong;

external CoSetCancelObject(
    pUnk : Pointer[IUnknown]) CLong;

external CoCancelCall(
    dwThreadId : CULong,
    ulTimeout : CULong) CLong;

external CoTestCancel() CLong;

external CoEnableCallCancellation(
    pReserved : LPVOID) CLong;

external CoDisableCallCancellation(
    pReserved : LPVOID) CLong;

external CoAllowSetForegroundWindow(
    pUnk : Pointer[IUnknown],
    lpvReserved : LPVOID) CLong;

external DcomChannelSetHResult(
    pvReserved : LPVOID,
    pulReserved : Pointer[CULong],
    appsHR : CLong) CLong;

external StringFromCLSID(
    rclsid : Pointer[IID],
    lplpsz : Pointer[LPOLESTR]) CLong;

external CLSIDFromString(
    lpsz : LPOLESTR,
    pclsid : LPCLSID) CLong;

external StringFromIID(
    rclsid : Pointer[IID],
    lplpsz : Pointer[LPOLESTR]) CLong;

external IIDFromString(
    lpsz : LPOLESTR,
    lpiid : LPIID) CLong;

external CoIsOle1Class(
    rclsid : Pointer[IID]) Int;

external ProgIDFromCLSID(
    clsid : Pointer[IID],
    lplpszProgID : Pointer[LPOLESTR]) CLong;

external CLSIDFromProgID(
    lpszProgID : LPCOLESTR,
    lpclsid : LPCLSID) CLong;

external CLSIDFromProgIDEx(
    lpszProgID : LPCOLESTR,
    lpclsid : LPCLSID) CLong;

external StringFromGUID2(
    rguid : Pointer[GUID],
    lpsz : LPOLESTR,
    cchMax : Int) Int;

external CoCreateGuid(
    pguid : Pointer[GUID]) CLong;

external CoFileTimeToDosDateTime(
    lpFileTime : Pointer[FILETIME],
    lpDosDate : LPWORD,
    lpDosTime : LPWORD) Int;

external CoDosDateTimeToFileTime(
    nDosDate : UShort,
    nDosTime : UShort,
    lpFileTime : Pointer[FILETIME]) Int;

external CoFileTimeNow(
    lpFileTime : Pointer[FILETIME]) CLong;

external CoRegisterMessageFilter(
    lpMessageFilter : LPMESSAGEFILTER,
    lplpMessageFilter : Pointer[LPMESSAGEFILTER]) CLong;

external CoRegisterChannelHook(
    ExtensionUuid : Pointer[GUID],
    pChannelHook : Pointer[IChannelHook]) CLong;

external CoWaitForMultipleHandles(
    dwFlags : CULong,
    dwTimeout : CULong,
    cHandles : CULong,
    pHandles : LPHANDLE,
    lpdwindex : LPDWORD) CLong;

alias COWAIT_WAITALL = 1;
alias COWAIT_ALERTABLE = 2;
alias COWAIT_INPUTAVAILABLE = 4;

alias COWAIT_FLAGS = Int;

external CoInvalidateRemoteMachineBindings(
    pszMachineName : LPOLESTR) CLong;

external CoGetTreatAsClass(
    clsidOld : Pointer[IID],
    pClsidNew : LPCLSID) CLong;

external CoTreatAsClass(
    clsidOld : Pointer[IID],
    clsidNew : Pointer[IID]) CLong;

alias LPFNGETCLASSOBJECT = CCodePointer[(Pointer[Struct__GUID],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)];

alias LPFNCANUNLOADNOW = CCodePointer[(),(CLong)];

external DllGetClassObject(
    rclsid : Pointer[IID],
    riid : Pointer[IID],
    ppv : Pointer[LPVOID]) CLong;

external DllCanUnloadNow() CLong;

external CoTaskMemAlloc(
    cb : UInt64) LPVOID;

external CoTaskMemRealloc(
    pv : LPVOID,
    cb : UInt64) LPVOID;

external CoTaskMemFree(
    pv : LPVOID);

external CreateDataAdviseHolder(
    ppDAHolder : Pointer[LPDATAADVISEHOLDER]) CLong;

external CreateDataCache(
    pUnkOuter : LPUNKNOWN,
    rclsid : Pointer[IID],
    iid : Pointer[IID],
    ppv : Pointer[LPVOID]) CLong;

external StgCreateDocfile(
    pwcsName : Pointer[UShort],
    grfMode : CULong,
    reserved : CULong,
    ppstgOpen : Pointer[Pointer[IStorage]]) CLong;

external StgCreateDocfileOnILockBytes(
    plkbyt : Pointer[ILockBytes],
    grfMode : CULong,
    reserved : CULong,
    ppstgOpen : Pointer[Pointer[IStorage]]) CLong;

external StgOpenStorage(
    pwcsName : Pointer[UShort],
    pstgPriority : Pointer[IStorage],
    grfMode : CULong,
    snbExclude : SNB,
    reserved : CULong,
    ppstgOpen : Pointer[Pointer[IStorage]]) CLong;

external StgOpenStorageOnILockBytes(
    plkbyt : Pointer[ILockBytes],
    pstgPriority : Pointer[IStorage],
    grfMode : CULong,
    snbExclude : SNB,
    reserved : CULong,
    ppstgOpen : Pointer[Pointer[IStorage]]) CLong;

external StgIsStorageFile(
    pwcsName : Pointer[UShort]) CLong;

external StgIsStorageILockBytes(
    plkbyt : Pointer[ILockBytes]) CLong;

external StgSetTimes(
    lpszName : Pointer[UShort],
    pctime : Pointer[FILETIME],
    patime : Pointer[FILETIME],
    pmtime : Pointer[FILETIME]) CLong;

external StgOpenAsyncDocfileOnIFillLockBytes(
    pflb : Pointer[IFillLockBytes],
    grfMode : CULong,
    asyncFlags : CULong,
    ppstgOpen : Pointer[Pointer[IStorage]]) CLong;

external StgGetIFillLockBytesOnILockBytes(
    pilb : Pointer[ILockBytes],
    ppflb : Pointer[Pointer[IFillLockBytes]]) CLong;

external StgGetIFillLockBytesOnFile(
    pwcsName : Pointer[UShort],
    ppflb : Pointer[Pointer[IFillLockBytes]]) CLong;

external StgOpenLayoutDocfile(
    pwcsDfName : Pointer[UShort],
    grfMode : CULong,
    reserved : CULong,
    ppstgOpen : Pointer[Pointer[IStorage]]) CLong;

record Struct_tagSTGOPTIONS (
    usVersion : UShort,
    reserved : UShort,
    ulSectorSize : CULong,
    pwcsTemplateFile : Pointer[UShort],
);

alias STGOPTIONS = Struct_tagSTGOPTIONS;

external StgCreateStorageEx(
    pwcsName : Pointer[UShort],
    grfMode : CULong,
    stgfmt : CULong,
    grfAttrs : CULong,
    pStgOptions : Pointer[STGOPTIONS],
    reserved : RawPointer,
    riid : Pointer[IID],
    ppObjectOpen : Pointer[RawPointer]) CLong;

external StgOpenStorageEx(
    pwcsName : Pointer[UShort],
    grfMode : CULong,
    stgfmt : CULong,
    grfAttrs : CULong,
    pStgOptions : Pointer[STGOPTIONS],
    reserved : RawPointer,
    riid : Pointer[IID],
    ppObjectOpen : Pointer[RawPointer]) CLong;

external BindMoniker(
    pmk : LPMONIKER,
    grfOpt : CULong,
    iidResult : Pointer[IID],
    ppvResult : Pointer[LPVOID]) CLong;

external CoInstall(
    pbc : Pointer[IBindCtx],
    dwFlags : CULong,
    pClassSpec : Pointer[uCLSSPEC],
    pQuery : Pointer[QUERYCONTEXT],
    pszCodeBase : LPWSTR) CLong;

external CoGetObject(
    pszName : LPCWSTR,
    pBindOptions : Pointer[BIND_OPTS],
    riid : Pointer[IID],
    ppv : Pointer[RawPointer]) CLong;

external MkParseDisplayName(
    pbc : LPBC,
    szUserName : LPCOLESTR,
    pchEaten : Pointer[CULong],
    ppmk : Pointer[LPMONIKER]) CLong;

external MonikerRelativePathTo(
    pmkSrc : LPMONIKER,
    pmkDest : LPMONIKER,
    ppmkRelPath : Pointer[LPMONIKER],
    dwReserved : Int) CLong;

external MonikerCommonPrefixWith(
    pmkThis : LPMONIKER,
    pmkOther : LPMONIKER,
    ppmkCommon : Pointer[LPMONIKER]) CLong;

external CreateBindCtx(
    reserved : CULong,
    ppbc : Pointer[LPBC]) CLong;

external CreateGenericComposite(
    pmkFirst : LPMONIKER,
    pmkRest : LPMONIKER,
    ppmkComposite : Pointer[LPMONIKER]) CLong;

external GetClassFile(
    szFilename : LPCOLESTR,
    pclsid : Pointer[CLSID]) CLong;

external CreateClassMoniker(
    rclsid : Pointer[IID],
    ppmk : Pointer[LPMONIKER]) CLong;

external CreateFileMoniker(
    lpszPathName : LPCOLESTR,
    ppmk : Pointer[LPMONIKER]) CLong;

external CreateItemMoniker(
    lpszDelim : LPCOLESTR,
    lpszItem : LPCOLESTR,
    ppmk : Pointer[LPMONIKER]) CLong;

external CreateAntiMoniker(
    ppmk : Pointer[LPMONIKER]) CLong;

external CreatePointerMoniker(
    punk : LPUNKNOWN,
    ppmk : Pointer[LPMONIKER]) CLong;

external CreateObjrefMoniker(
    punk : LPUNKNOWN,
    ppmk : Pointer[LPMONIKER]) CLong;

external GetRunningObjectTable(
    reserved : CULong,
    pprot : Pointer[LPRUNNINGOBJECTTABLE]) CLong;

alias IPersistMoniker = Struct_IPersistMoniker;

alias IMonikerProp = Struct_IMonikerProp;

alias IBindProtocol = Struct_IBindProtocol;

alias IBinding = Struct_IBinding;

alias IBindStatusCallback = Struct_IBindStatusCallback;

alias IAuthenticate = Struct_IAuthenticate;

alias IHttpNegotiate = Struct_IHttpNegotiate;

alias IHttpNegotiate2 = Struct_IHttpNegotiate2;

alias IWinInetFileStream = Struct_IWinInetFileStream;

alias IWindowForBindingUI = Struct_IWindowForBindingUI;

alias ICodeInstall = Struct_ICodeInstall;

alias IWinInetInfo = Struct_IWinInetInfo;

alias IHttpSecurity = Struct_IHttpSecurity;

alias IWinInetHttpInfo = Struct_IWinInetHttpInfo;

alias IWinInetCacheHints = Struct_IWinInetCacheHints;

alias IBindHost = Struct_IBindHost;

alias IInternet = Struct_IInternet;

alias IInternetBindInfo = Struct_IInternetBindInfo;

alias IInternetProtocolRoot = Struct_IInternetProtocolRoot;

alias IInternetProtocol = Struct_IInternetProtocol;

alias IInternetProtocolSink = Struct_IInternetProtocolSink;

alias IInternetProtocolSinkStackable = Struct_IInternetProtocolSinkStackable;

alias IInternetSession = Struct_IInternetSession;

alias IInternetThreadSwitch = Struct_IInternetThreadSwitch;

alias IInternetPriority = Struct_IInternetPriority;

alias IInternetProtocolInfo = Struct_IInternetProtocolInfo;

alias IInternetSecurityMgrSite = Struct_IInternetSecurityMgrSite;

alias IInternetSecurityManager = Struct_IInternetSecurityManager;

alias IInternetSecurityManagerEx = Struct_IInternetSecurityManagerEx;

alias IZoneIdentifier = Struct_IZoneIdentifier;

alias IInternetHostSecurityManager = Struct_IInternetHostSecurityManager;

alias IInternetZoneManager = Struct_IInternetZoneManager;

alias IInternetZoneManagerEx = Struct_IInternetZoneManagerEx;

alias ISoftDistExt = Struct_ISoftDistExt;

alias ICatalogFileInfo = Struct_ICatalogFileInfo;

alias IDataFilter = Struct_IDataFilter;

alias IEncodingFilterFactory = Struct_IEncodingFilterFactory;

alias IWrappedProtocol = Struct_IWrappedProtocol;

alias IOleAdviseHolder = Struct_IOleAdviseHolder;

alias IOleCache = Struct_IOleCache;

alias IOleCache2 = Struct_IOleCache2;

alias IOleCacheControl = Struct_IOleCacheControl;

alias IParseDisplayName = Struct_IParseDisplayName;

alias IOleContainer = Struct_IOleContainer;

alias IOleClientSite = Struct_IOleClientSite;

alias IOleObject = Struct_IOleObject;

alias IOleWindow = Struct_IOleWindow;

alias IOleLink = Struct_IOleLink;

alias IOleItemContainer = Struct_IOleItemContainer;

alias IOleInPlaceUIWindow = Struct_IOleInPlaceUIWindow;

alias IOleInPlaceActiveObject = Struct_IOleInPlaceActiveObject;

alias IOleInPlaceFrame = Struct_IOleInPlaceFrame;

alias IOleInPlaceObject = Struct_IOleInPlaceObject;

alias IOleInPlaceSite = Struct_IOleInPlaceSite;

alias IContinue = Struct_IContinue;

alias IViewObject = Struct_IViewObject;

alias IViewObject2 = Struct_IViewObject2;

alias IDropSource = Struct_IDropSource;

alias IDropTarget = Struct_IDropTarget;

alias IEnumOLEVERB = Struct_IEnumOLEVERB;

external __MIDL_itf_oleidl_0000_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_oleidl_0000_v0_0_s_ifspec : RPC_IF_HANDLE;

alias LPOLEADVISEHOLDER = Pointer[IOleAdviseHolder];

external IID_IOleAdviseHolder : IID;

record Struct_IOleAdviseHolderVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IOleAdviseHolder],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IOleAdviseHolder]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IOleAdviseHolder]),(CULong)],
    Advise : CCodePointer[(Pointer[Struct_IOleAdviseHolder],Pointer[Struct_IAdviseSink],Pointer[CULong]),(CLong)],
    Unadvise : CCodePointer[(Pointer[Struct_IOleAdviseHolder],CULong),(CLong)],
    EnumAdvise : CCodePointer[(Pointer[Struct_IOleAdviseHolder],Pointer[Pointer[Struct_IEnumSTATDATA]]),(CLong)],
    SendOnRename : CCodePointer[(Pointer[Struct_IOleAdviseHolder],Pointer[Struct_IMoniker]),(CLong)],
    SendOnSave : CCodePointer[(Pointer[Struct_IOleAdviseHolder]),(CLong)],
    SendOnClose : CCodePointer[(Pointer[Struct_IOleAdviseHolder]),(CLong)],
);

alias IOleAdviseHolderVtbl = Struct_IOleAdviseHolderVtbl;

record Struct_IOleAdviseHolder (
    lpVtbl : Pointer[Struct_IOleAdviseHolderVtbl],
);

external IOleAdviseHolder_Advise_Proxy(
    This : Pointer[IOleAdviseHolder],
    pAdvise : Pointer[IAdviseSink],
    pdwConnection : Pointer[CULong]) CLong;

external IOleAdviseHolder_Advise_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleAdviseHolder_Unadvise_Proxy(
    This : Pointer[IOleAdviseHolder],
    dwConnection : CULong) CLong;

external IOleAdviseHolder_Unadvise_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleAdviseHolder_EnumAdvise_Proxy(
    This : Pointer[IOleAdviseHolder],
    ppenumAdvise : Pointer[Pointer[IEnumSTATDATA]]) CLong;

external IOleAdviseHolder_EnumAdvise_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleAdviseHolder_SendOnRename_Proxy(
    This : Pointer[IOleAdviseHolder],
    pmk : Pointer[IMoniker]) CLong;

external IOleAdviseHolder_SendOnRename_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleAdviseHolder_SendOnSave_Proxy(
    This : Pointer[IOleAdviseHolder]) CLong;

external IOleAdviseHolder_SendOnSave_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleAdviseHolder_SendOnClose_Proxy(
    This : Pointer[IOleAdviseHolder]) CLong;

external IOleAdviseHolder_SendOnClose_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPOLECACHE = Pointer[IOleCache];

external IID_IOleCache : IID;

record Struct_IOleCacheVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IOleCache],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IOleCache]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IOleCache]),(CULong)],
    Cache : CCodePointer[(Pointer[Struct_IOleCache],Pointer[Struct_tagFORMATETC],CULong,Pointer[CULong]),(CLong)],
    Uncache : CCodePointer[(Pointer[Struct_IOleCache],CULong),(CLong)],
    EnumCache : CCodePointer[(Pointer[Struct_IOleCache],Pointer[Pointer[Struct_IEnumSTATDATA]]),(CLong)],
    InitCache : CCodePointer[(Pointer[Struct_IOleCache],Pointer[Struct_IDataObject]),(CLong)],
    SetData : CCodePointer[(Pointer[Struct_IOleCache],Pointer[Struct_tagFORMATETC],Pointer[Struct_tagSTGMEDIUM],Int),(CLong)],
);

alias IOleCacheVtbl = Struct_IOleCacheVtbl;

record Struct_IOleCache (
    lpVtbl : Pointer[Struct_IOleCacheVtbl],
);

external IOleCache_Cache_Proxy(
    This : Pointer[IOleCache],
    pformatetc : Pointer[FORMATETC],
    advf : CULong,
    pdwConnection : Pointer[CULong]) CLong;

external IOleCache_Cache_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleCache_Uncache_Proxy(
    This : Pointer[IOleCache],
    dwConnection : CULong) CLong;

external IOleCache_Uncache_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleCache_EnumCache_Proxy(
    This : Pointer[IOleCache],
    ppenumSTATDATA : Pointer[Pointer[IEnumSTATDATA]]) CLong;

external IOleCache_EnumCache_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleCache_InitCache_Proxy(
    This : Pointer[IOleCache],
    pDataObject : Pointer[IDataObject]) CLong;

external IOleCache_InitCache_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleCache_SetData_Proxy(
    This : Pointer[IOleCache],
    pformatetc : Pointer[FORMATETC],
    pmedium : Pointer[STGMEDIUM],
    fRelease : Int) CLong;

external IOleCache_SetData_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPOLECACHE2 = Pointer[IOleCache2];

alias DISCARDCACHE_SAVEIFDIRTY = 0;
alias DISCARDCACHE_NOSAVE = 1;

alias DISCARDCACHE = Int;

external IID_IOleCache2 : IID;

record Struct_IOleCache2Vtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IOleCache2],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IOleCache2]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IOleCache2]),(CULong)],
    Cache : CCodePointer[(Pointer[Struct_IOleCache2],Pointer[Struct_tagFORMATETC],CULong,Pointer[CULong]),(CLong)],
    Uncache : CCodePointer[(Pointer[Struct_IOleCache2],CULong),(CLong)],
    EnumCache : CCodePointer[(Pointer[Struct_IOleCache2],Pointer[Pointer[Struct_IEnumSTATDATA]]),(CLong)],
    InitCache : CCodePointer[(Pointer[Struct_IOleCache2],Pointer[Struct_IDataObject]),(CLong)],
    SetData : CCodePointer[(Pointer[Struct_IOleCache2],Pointer[Struct_tagFORMATETC],Pointer[Struct_tagSTGMEDIUM],Int),(CLong)],
    UpdateCache : CCodePointer[(Pointer[Struct_IOleCache2],Pointer[Struct_IDataObject],CULong,RawPointer),(CLong)],
    DiscardCache : CCodePointer[(Pointer[Struct_IOleCache2],CULong),(CLong)],
);

alias IOleCache2Vtbl = Struct_IOleCache2Vtbl;

record Struct_IOleCache2 (
    lpVtbl : Pointer[Struct_IOleCache2Vtbl],
);

external IOleCache2_RemoteUpdateCache_Proxy(
    This : Pointer[IOleCache2],
    pDataObject : LPDATAOBJECT,
    grfUpdf : CULong,
    pReserved : Int64) CLong;

external IOleCache2_RemoteUpdateCache_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleCache2_DiscardCache_Proxy(
    This : Pointer[IOleCache2],
    dwDiscardOptions : CULong) CLong;

external IOleCache2_DiscardCache_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPOLECACHECONTROL = Pointer[IOleCacheControl];

external IID_IOleCacheControl : IID;

record Struct_IOleCacheControlVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IOleCacheControl],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IOleCacheControl]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IOleCacheControl]),(CULong)],
    OnRun : CCodePointer[(Pointer[Struct_IOleCacheControl],Pointer[Struct_IDataObject]),(CLong)],
    OnStop : CCodePointer[(Pointer[Struct_IOleCacheControl]),(CLong)],
);

alias IOleCacheControlVtbl = Struct_IOleCacheControlVtbl;

record Struct_IOleCacheControl (
    lpVtbl : Pointer[Struct_IOleCacheControlVtbl],
);

external IOleCacheControl_OnRun_Proxy(
    This : Pointer[IOleCacheControl],
    pDataObject : LPDATAOBJECT) CLong;

external IOleCacheControl_OnRun_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleCacheControl_OnStop_Proxy(
    This : Pointer[IOleCacheControl]) CLong;

external IOleCacheControl_OnStop_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPPARSEDISPLAYNAME = Pointer[IParseDisplayName];

external IID_IParseDisplayName : IID;

record Struct_IParseDisplayNameVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IParseDisplayName],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IParseDisplayName]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IParseDisplayName]),(CULong)],
    ParseDisplayName : CCodePointer[(Pointer[Struct_IParseDisplayName],Pointer[Struct_IBindCtx],Pointer[UShort],Pointer[CULong],Pointer[Pointer[Struct_IMoniker]]),(CLong)],
);

alias IParseDisplayNameVtbl = Struct_IParseDisplayNameVtbl;

record Struct_IParseDisplayName (
    lpVtbl : Pointer[Struct_IParseDisplayNameVtbl],
);

external IParseDisplayName_ParseDisplayName_Proxy(
    This : Pointer[IParseDisplayName],
    pbc : Pointer[IBindCtx],
    pszDisplayName : LPOLESTR,
    pchEaten : Pointer[CULong],
    ppmkOut : Pointer[Pointer[IMoniker]]) CLong;

external IParseDisplayName_ParseDisplayName_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPOLECONTAINER = Pointer[IOleContainer];

external IID_IOleContainer : IID;

record Struct_IOleContainerVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IOleContainer],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IOleContainer]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IOleContainer]),(CULong)],
    ParseDisplayName : CCodePointer[(Pointer[Struct_IOleContainer],Pointer[Struct_IBindCtx],Pointer[UShort],Pointer[CULong],Pointer[Pointer[Struct_IMoniker]]),(CLong)],
    EnumObjects : CCodePointer[(Pointer[Struct_IOleContainer],CULong,Pointer[Pointer[Struct_IEnumUnknown]]),(CLong)],
    LockContainer : CCodePointer[(Pointer[Struct_IOleContainer],Int),(CLong)],
);

alias IOleContainerVtbl = Struct_IOleContainerVtbl;

record Struct_IOleContainer (
    lpVtbl : Pointer[Struct_IOleContainerVtbl],
);

external IOleContainer_EnumObjects_Proxy(
    This : Pointer[IOleContainer],
    grfFlags : CULong,
    ppenum : Pointer[Pointer[IEnumUnknown]]) CLong;

external IOleContainer_EnumObjects_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleContainer_LockContainer_Proxy(
    This : Pointer[IOleContainer],
    fLock : Int) CLong;

external IOleContainer_LockContainer_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPOLECLIENTSITE = Pointer[IOleClientSite];

external IID_IOleClientSite : IID;

record Struct_IOleClientSiteVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IOleClientSite],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IOleClientSite]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IOleClientSite]),(CULong)],
    SaveObject : CCodePointer[(Pointer[Struct_IOleClientSite]),(CLong)],
    GetMoniker : CCodePointer[(Pointer[Struct_IOleClientSite],CULong,CULong,Pointer[Pointer[Struct_IMoniker]]),(CLong)],
    GetContainer : CCodePointer[(Pointer[Struct_IOleClientSite],Pointer[Pointer[Struct_IOleContainer]]),(CLong)],
    ShowObject : CCodePointer[(Pointer[Struct_IOleClientSite]),(CLong)],
    OnShowWindow : CCodePointer[(Pointer[Struct_IOleClientSite],Int),(CLong)],
    RequestNewObjectLayout : CCodePointer[(Pointer[Struct_IOleClientSite]),(CLong)],
);

alias IOleClientSiteVtbl = Struct_IOleClientSiteVtbl;

record Struct_IOleClientSite (
    lpVtbl : Pointer[Struct_IOleClientSiteVtbl],
);

external IOleClientSite_SaveObject_Proxy(
    This : Pointer[IOleClientSite]) CLong;

external IOleClientSite_SaveObject_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleClientSite_GetMoniker_Proxy(
    This : Pointer[IOleClientSite],
    dwAssign : CULong,
    dwWhichMoniker : CULong,
    ppmk : Pointer[Pointer[IMoniker]]) CLong;

external IOleClientSite_GetMoniker_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleClientSite_GetContainer_Proxy(
    This : Pointer[IOleClientSite],
    ppContainer : Pointer[Pointer[IOleContainer]]) CLong;

external IOleClientSite_GetContainer_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleClientSite_ShowObject_Proxy(
    This : Pointer[IOleClientSite]) CLong;

external IOleClientSite_ShowObject_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleClientSite_OnShowWindow_Proxy(
    This : Pointer[IOleClientSite],
    fShow : Int) CLong;

external IOleClientSite_OnShowWindow_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleClientSite_RequestNewObjectLayout_Proxy(
    This : Pointer[IOleClientSite]) CLong;

external IOleClientSite_RequestNewObjectLayout_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPOLEOBJECT = Pointer[IOleObject];

alias OLEGETMONIKER_ONLYIFTHERE = 1;
alias OLEGETMONIKER_FORCEASSIGN = 2;
alias OLEGETMONIKER_UNASSIGN = 3;
alias OLEGETMONIKER_TEMPFORUSER = 4;

alias OLEGETMONIKER = Int;

alias OLEWHICHMK_CONTAINER = 1;
alias OLEWHICHMK_OBJREL = 2;
alias OLEWHICHMK_OBJFULL = 3;

alias OLEWHICHMK = Int;

alias USERCLASSTYPE_FULL = 1;
alias USERCLASSTYPE_SHORT = 2;
alias USERCLASSTYPE_APPNAME = 3;

alias USERCLASSTYPE = Int;

alias OLEMISC_RECOMPOSEONRESIZE = 1;
alias OLEMISC_ONLYICONIC = 2;
alias OLEMISC_INSERTNOTREPLACE = 4;
alias OLEMISC_STATIC = 8;
alias OLEMISC_CANTLINKINSIDE = 16;
alias OLEMISC_CANLINKBYOLE1 = 32;
alias OLEMISC_ISLINKOBJECT = 64;
alias OLEMISC_INSIDEOUT = 128;
alias OLEMISC_ACTIVATEWHENVISIBLE = 256;
alias OLEMISC_RENDERINGISDEVICEINDEPENDENT = 512;
alias OLEMISC_INVISIBLEATRUNTIME = 1024;
alias OLEMISC_ALWAYSRUN = 2048;
alias OLEMISC_ACTSLIKEBUTTON = 4096;
alias OLEMISC_ACTSLIKELABEL = 8192;
alias OLEMISC_NOUIACTIVATE = 16384;
alias OLEMISC_ALIGNABLE = 32768;
alias OLEMISC_SIMPLEFRAME = 65536;
alias OLEMISC_SETCLIENTSITEFIRST = 131072;
alias OLEMISC_IMEMODE = 262144;
alias OLEMISC_IGNOREACTIVATEWHENVISIBLE = 524288;
alias OLEMISC_WANTSTOMENUMERGE = 1048576;
alias OLEMISC_SUPPORTSMULTILEVELUNDO = 2097152;

alias OLEMISC = Int;

alias OLECLOSE_SAVEIFDIRTY = 0;
alias OLECLOSE_NOSAVE = 1;
alias OLECLOSE_PROMPTSAVE = 2;

alias OLECLOSE = Int;

external IID_IOleObject : IID;

record Struct_IOleObjectVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IOleObject],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IOleObject]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IOleObject]),(CULong)],
    SetClientSite : CCodePointer[(Pointer[Struct_IOleObject],Pointer[Struct_IOleClientSite]),(CLong)],
    GetClientSite : CCodePointer[(Pointer[Struct_IOleObject],Pointer[Pointer[Struct_IOleClientSite]]),(CLong)],
    SetHostNames : CCodePointer[(Pointer[Struct_IOleObject],Pointer[UShort],Pointer[UShort]),(CLong)],
    Close : CCodePointer[(Pointer[Struct_IOleObject],CULong),(CLong)],
    SetMoniker : CCodePointer[(Pointer[Struct_IOleObject],CULong,Pointer[Struct_IMoniker]),(CLong)],
    GetMoniker : CCodePointer[(Pointer[Struct_IOleObject],CULong,CULong,Pointer[Pointer[Struct_IMoniker]]),(CLong)],
    InitFromData : CCodePointer[(Pointer[Struct_IOleObject],Pointer[Struct_IDataObject],Int,CULong),(CLong)],
    GetClipboardData : CCodePointer[(Pointer[Struct_IOleObject],CULong,Pointer[Pointer[Struct_IDataObject]]),(CLong)],
    DoVerb : CCodePointer[(Pointer[Struct_IOleObject],CLong,Pointer[Struct_tagMSG],Pointer[Struct_IOleClientSite],CLong,Pointer[Struct_HWND__],Pointer[Struct_tagRECT]),(CLong)],
    EnumVerbs : CCodePointer[(Pointer[Struct_IOleObject],Pointer[Pointer[Struct_IEnumOLEVERB]]),(CLong)],
    Update : CCodePointer[(Pointer[Struct_IOleObject]),(CLong)],
    IsUpToDate : CCodePointer[(Pointer[Struct_IOleObject]),(CLong)],
    GetUserClassID : CCodePointer[(Pointer[Struct_IOleObject],Pointer[Struct__GUID]),(CLong)],
    GetUserType : CCodePointer[(Pointer[Struct_IOleObject],CULong,Pointer[Pointer[UShort]]),(CLong)],
    SetExtent : CCodePointer[(Pointer[Struct_IOleObject],CULong,Pointer[Struct_tagSIZE]),(CLong)],
    GetExtent : CCodePointer[(Pointer[Struct_IOleObject],CULong,Pointer[Struct_tagSIZE]),(CLong)],
    Advise : CCodePointer[(Pointer[Struct_IOleObject],Pointer[Struct_IAdviseSink],Pointer[CULong]),(CLong)],
    Unadvise : CCodePointer[(Pointer[Struct_IOleObject],CULong),(CLong)],
    EnumAdvise : CCodePointer[(Pointer[Struct_IOleObject],Pointer[Pointer[Struct_IEnumSTATDATA]]),(CLong)],
    GetMiscStatus : CCodePointer[(Pointer[Struct_IOleObject],CULong,Pointer[CULong]),(CLong)],
    SetColorScheme : CCodePointer[(Pointer[Struct_IOleObject],Pointer[Struct_tagLOGPALETTE]),(CLong)],
);

alias IOleObjectVtbl = Struct_IOleObjectVtbl;

record Struct_IOleObject (
    lpVtbl : Pointer[Struct_IOleObjectVtbl],
);

external IOleObject_SetClientSite_Proxy(
    This : Pointer[IOleObject],
    pClientSite : Pointer[IOleClientSite]) CLong;

external IOleObject_SetClientSite_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleObject_GetClientSite_Proxy(
    This : Pointer[IOleObject],
    ppClientSite : Pointer[Pointer[IOleClientSite]]) CLong;

external IOleObject_GetClientSite_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleObject_SetHostNames_Proxy(
    This : Pointer[IOleObject],
    szContainerApp : LPCOLESTR,
    szContainerObj : LPCOLESTR) CLong;

external IOleObject_SetHostNames_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleObject_Close_Proxy(
    This : Pointer[IOleObject],
    dwSaveOption : CULong) CLong;

external IOleObject_Close_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleObject_SetMoniker_Proxy(
    This : Pointer[IOleObject],
    dwWhichMoniker : CULong,
    pmk : Pointer[IMoniker]) CLong;

external IOleObject_SetMoniker_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleObject_GetMoniker_Proxy(
    This : Pointer[IOleObject],
    dwAssign : CULong,
    dwWhichMoniker : CULong,
    ppmk : Pointer[Pointer[IMoniker]]) CLong;

external IOleObject_GetMoniker_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleObject_InitFromData_Proxy(
    This : Pointer[IOleObject],
    pDataObject : Pointer[IDataObject],
    fCreation : Int,
    dwReserved : CULong) CLong;

external IOleObject_InitFromData_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleObject_GetClipboardData_Proxy(
    This : Pointer[IOleObject],
    dwReserved : CULong,
    ppDataObject : Pointer[Pointer[IDataObject]]) CLong;

external IOleObject_GetClipboardData_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleObject_DoVerb_Proxy(
    This : Pointer[IOleObject],
    iVerb : CLong,
    lpmsg : LPMSG,
    pActiveSite : Pointer[IOleClientSite],
    lindex : CLong,
    hwndParent : HWND,
    lprcPosRect : LPCRECT) CLong;

external IOleObject_DoVerb_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleObject_EnumVerbs_Proxy(
    This : Pointer[IOleObject],
    ppEnumOleVerb : Pointer[Pointer[IEnumOLEVERB]]) CLong;

external IOleObject_EnumVerbs_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleObject_Update_Proxy(
    This : Pointer[IOleObject]) CLong;

external IOleObject_Update_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleObject_IsUpToDate_Proxy(
    This : Pointer[IOleObject]) CLong;

external IOleObject_IsUpToDate_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleObject_GetUserClassID_Proxy(
    This : Pointer[IOleObject],
    pClsid : Pointer[CLSID]) CLong;

external IOleObject_GetUserClassID_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleObject_GetUserType_Proxy(
    This : Pointer[IOleObject],
    dwFormOfType : CULong,
    pszUserType : Pointer[LPOLESTR]) CLong;

external IOleObject_GetUserType_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleObject_SetExtent_Proxy(
    This : Pointer[IOleObject],
    dwDrawAspect : CULong,
    psizel : Pointer[SIZEL]) CLong;

external IOleObject_SetExtent_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleObject_GetExtent_Proxy(
    This : Pointer[IOleObject],
    dwDrawAspect : CULong,
    psizel : Pointer[SIZEL]) CLong;

external IOleObject_GetExtent_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleObject_Advise_Proxy(
    This : Pointer[IOleObject],
    pAdvSink : Pointer[IAdviseSink],
    pdwConnection : Pointer[CULong]) CLong;

external IOleObject_Advise_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleObject_Unadvise_Proxy(
    This : Pointer[IOleObject],
    dwConnection : CULong) CLong;

external IOleObject_Unadvise_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleObject_EnumAdvise_Proxy(
    This : Pointer[IOleObject],
    ppenumAdvise : Pointer[Pointer[IEnumSTATDATA]]) CLong;

external IOleObject_EnumAdvise_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleObject_GetMiscStatus_Proxy(
    This : Pointer[IOleObject],
    dwAspect : CULong,
    pdwStatus : Pointer[CULong]) CLong;

external IOleObject_GetMiscStatus_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleObject_SetColorScheme_Proxy(
    This : Pointer[IOleObject],
    pLogpal : Pointer[LOGPALETTE]) CLong;

external IOleObject_SetColorScheme_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias OLERENDER_NONE = 0;
alias OLERENDER_DRAW = 1;
alias OLERENDER_FORMAT = 2;
alias OLERENDER_ASIS = 3;

alias OLERENDER = Int;

alias LPOLERENDER = Pointer[OLERENDER];

record Struct_tagOBJECTDESCRIPTOR (
    cbSize : CULong,
    clsid : CLSID,
    dwDrawAspect : CULong,
    sizel : SIZEL,
    pointl : POINTL,
    dwStatus : CULong,
    dwFullUserTypeName : CULong,
    dwSrcOfCopy : CULong,
);

alias OBJECTDESCRIPTOR = Struct_tagOBJECTDESCRIPTOR;

alias POBJECTDESCRIPTOR = Pointer[Struct_tagOBJECTDESCRIPTOR];

alias LPOBJECTDESCRIPTOR = Pointer[Struct_tagOBJECTDESCRIPTOR];

alias LINKSRCDESCRIPTOR = Struct_tagOBJECTDESCRIPTOR;

alias PLINKSRCDESCRIPTOR = Pointer[Struct_tagOBJECTDESCRIPTOR];

alias LPLINKSRCDESCRIPTOR = Pointer[Struct_tagOBJECTDESCRIPTOR];

external IOLETypes_v0_0_c_ifspec : RPC_IF_HANDLE;

external IOLETypes_v0_0_s_ifspec : RPC_IF_HANDLE;

alias LPOLEWINDOW = Pointer[IOleWindow];

external IID_IOleWindow : IID;

record Struct_IOleWindowVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IOleWindow],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IOleWindow]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IOleWindow]),(CULong)],
    GetWindow : CCodePointer[(Pointer[Struct_IOleWindow],Pointer[Pointer[Struct_HWND__]]),(CLong)],
    ContextSensitiveHelp : CCodePointer[(Pointer[Struct_IOleWindow],Int),(CLong)],
);

alias IOleWindowVtbl = Struct_IOleWindowVtbl;

record Struct_IOleWindow (
    lpVtbl : Pointer[Struct_IOleWindowVtbl],
);

external IOleWindow_GetWindow_Proxy(
    This : Pointer[IOleWindow],
    phwnd : Pointer[HWND]) CLong;

external IOleWindow_GetWindow_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleWindow_ContextSensitiveHelp_Proxy(
    This : Pointer[IOleWindow],
    fEnterMode : Int) CLong;

external IOleWindow_ContextSensitiveHelp_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPOLELINK = Pointer[IOleLink];

alias OLEUPDATE_ALWAYS = 1;
alias OLEUPDATE_ONCALL = 3;

alias OLEUPDATE = Int;

alias LPOLEUPDATE = Pointer[OLEUPDATE];

alias POLEUPDATE = Pointer[OLEUPDATE];

alias OLELINKBIND_EVENIFCLASSDIFF = 1;

alias OLELINKBIND = Int;

external IID_IOleLink : IID;

record Struct_IOleLinkVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IOleLink],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IOleLink]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IOleLink]),(CULong)],
    SetUpdateOptions : CCodePointer[(Pointer[Struct_IOleLink],CULong),(CLong)],
    GetUpdateOptions : CCodePointer[(Pointer[Struct_IOleLink],Pointer[CULong]),(CLong)],
    SetSourceMoniker : CCodePointer[(Pointer[Struct_IOleLink],Pointer[Struct_IMoniker],Pointer[Struct__GUID]),(CLong)],
    GetSourceMoniker : CCodePointer[(Pointer[Struct_IOleLink],Pointer[Pointer[Struct_IMoniker]]),(CLong)],
    SetSourceDisplayName : CCodePointer[(Pointer[Struct_IOleLink],Pointer[UShort]),(CLong)],
    GetSourceDisplayName : CCodePointer[(Pointer[Struct_IOleLink],Pointer[Pointer[UShort]]),(CLong)],
    BindToSource : CCodePointer[(Pointer[Struct_IOleLink],CULong,Pointer[Struct_IBindCtx]),(CLong)],
    BindIfRunning : CCodePointer[(Pointer[Struct_IOleLink]),(CLong)],
    GetBoundSource : CCodePointer[(Pointer[Struct_IOleLink],Pointer[Pointer[Struct_IUnknown]]),(CLong)],
    UnbindSource : CCodePointer[(Pointer[Struct_IOleLink]),(CLong)],
    Update : CCodePointer[(Pointer[Struct_IOleLink],Pointer[Struct_IBindCtx]),(CLong)],
);

alias IOleLinkVtbl = Struct_IOleLinkVtbl;

record Struct_IOleLink (
    lpVtbl : Pointer[Struct_IOleLinkVtbl],
);

external IOleLink_SetUpdateOptions_Proxy(
    This : Pointer[IOleLink],
    dwUpdateOpt : CULong) CLong;

external IOleLink_SetUpdateOptions_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleLink_GetUpdateOptions_Proxy(
    This : Pointer[IOleLink],
    pdwUpdateOpt : Pointer[CULong]) CLong;

external IOleLink_GetUpdateOptions_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleLink_SetSourceMoniker_Proxy(
    This : Pointer[IOleLink],
    pmk : Pointer[IMoniker],
    rclsid : Pointer[IID]) CLong;

external IOleLink_SetSourceMoniker_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleLink_GetSourceMoniker_Proxy(
    This : Pointer[IOleLink],
    ppmk : Pointer[Pointer[IMoniker]]) CLong;

external IOleLink_GetSourceMoniker_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleLink_SetSourceDisplayName_Proxy(
    This : Pointer[IOleLink],
    pszStatusText : LPCOLESTR) CLong;

external IOleLink_SetSourceDisplayName_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleLink_GetSourceDisplayName_Proxy(
    This : Pointer[IOleLink],
    ppszDisplayName : Pointer[LPOLESTR]) CLong;

external IOleLink_GetSourceDisplayName_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleLink_BindToSource_Proxy(
    This : Pointer[IOleLink],
    bindflags : CULong,
    pbc : Pointer[IBindCtx]) CLong;

external IOleLink_BindToSource_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleLink_BindIfRunning_Proxy(
    This : Pointer[IOleLink]) CLong;

external IOleLink_BindIfRunning_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleLink_GetBoundSource_Proxy(
    This : Pointer[IOleLink],
    ppunk : Pointer[Pointer[IUnknown]]) CLong;

external IOleLink_GetBoundSource_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleLink_UnbindSource_Proxy(
    This : Pointer[IOleLink]) CLong;

external IOleLink_UnbindSource_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleLink_Update_Proxy(
    This : Pointer[IOleLink],
    pbc : Pointer[IBindCtx]) CLong;

external IOleLink_Update_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPOLEITEMCONTAINER = Pointer[IOleItemContainer];

alias BINDSPEED_INDEFINITE = 1;
alias BINDSPEED_MODERATE = 2;
alias BINDSPEED_IMMEDIATE = 3;

alias BINDSPEED = Int;

alias OLECONTF_EMBEDDINGS = 1;
alias OLECONTF_LINKS = 2;
alias OLECONTF_OTHERS = 4;
alias OLECONTF_ONLYUSER = 8;
alias OLECONTF_ONLYIFRUNNING = 16;

alias OLECONTF = Int;

external IID_IOleItemContainer : IID;

record Struct_IOleItemContainerVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IOleItemContainer],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IOleItemContainer]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IOleItemContainer]),(CULong)],
    ParseDisplayName : CCodePointer[(Pointer[Struct_IOleItemContainer],Pointer[Struct_IBindCtx],Pointer[UShort],Pointer[CULong],Pointer[Pointer[Struct_IMoniker]]),(CLong)],
    EnumObjects : CCodePointer[(Pointer[Struct_IOleItemContainer],CULong,Pointer[Pointer[Struct_IEnumUnknown]]),(CLong)],
    LockContainer : CCodePointer[(Pointer[Struct_IOleItemContainer],Int),(CLong)],
    GetObjectA : CCodePointer[(Pointer[Struct_IOleItemContainer],Pointer[UShort],CULong,Pointer[Struct_IBindCtx],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    GetObjectStorage : CCodePointer[(Pointer[Struct_IOleItemContainer],Pointer[UShort],Pointer[Struct_IBindCtx],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    IsRunning : CCodePointer[(Pointer[Struct_IOleItemContainer],Pointer[UShort]),(CLong)],
);

alias IOleItemContainerVtbl = Struct_IOleItemContainerVtbl;

record Struct_IOleItemContainer (
    lpVtbl : Pointer[Struct_IOleItemContainerVtbl],
);

external IOleItemContainer_GetObject_Proxy(
    This : Pointer[IOleItemContainer],
    pszItem : LPOLESTR,
    dwSpeedNeeded : CULong,
    pbc : Pointer[IBindCtx],
    riid : Pointer[IID],
    ppvObject : Pointer[RawPointer]) CLong;

external IOleItemContainer_GetObject_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleItemContainer_GetObjectStorage_Proxy(
    This : Pointer[IOleItemContainer],
    pszItem : LPOLESTR,
    pbc : Pointer[IBindCtx],
    riid : Pointer[IID],
    ppvStorage : Pointer[RawPointer]) CLong;

external IOleItemContainer_GetObjectStorage_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleItemContainer_IsRunning_Proxy(
    This : Pointer[IOleItemContainer],
    pszItem : LPOLESTR) CLong;

external IOleItemContainer_IsRunning_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPOLEINPLACEUIWINDOW = Pointer[IOleInPlaceUIWindow];

alias BORDERWIDTHS = RECT;

alias LPBORDERWIDTHS = LPRECT;

alias LPCBORDERWIDTHS = LPCRECT;

external IID_IOleInPlaceUIWindow : IID;

record Struct_IOleInPlaceUIWindowVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IOleInPlaceUIWindow],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IOleInPlaceUIWindow]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IOleInPlaceUIWindow]),(CULong)],
    GetWindow : CCodePointer[(Pointer[Struct_IOleInPlaceUIWindow],Pointer[Pointer[Struct_HWND__]]),(CLong)],
    ContextSensitiveHelp : CCodePointer[(Pointer[Struct_IOleInPlaceUIWindow],Int),(CLong)],
    GetBorder : CCodePointer[(Pointer[Struct_IOleInPlaceUIWindow],Pointer[Struct_tagRECT]),(CLong)],
    RequestBorderSpace : CCodePointer[(Pointer[Struct_IOleInPlaceUIWindow],Pointer[Struct_tagRECT]),(CLong)],
    SetBorderSpace : CCodePointer[(Pointer[Struct_IOleInPlaceUIWindow],Pointer[Struct_tagRECT]),(CLong)],
    SetActiveObject : CCodePointer[(Pointer[Struct_IOleInPlaceUIWindow],Pointer[Struct_IOleInPlaceActiveObject],Pointer[UShort]),(CLong)],
);

alias IOleInPlaceUIWindowVtbl = Struct_IOleInPlaceUIWindowVtbl;

record Struct_IOleInPlaceUIWindow (
    lpVtbl : Pointer[Struct_IOleInPlaceUIWindowVtbl],
);

external IOleInPlaceUIWindow_GetBorder_Proxy(
    This : Pointer[IOleInPlaceUIWindow],
    lprectBorder : LPRECT) CLong;

external IOleInPlaceUIWindow_GetBorder_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleInPlaceUIWindow_RequestBorderSpace_Proxy(
    This : Pointer[IOleInPlaceUIWindow],
    pborderwidths : LPCBORDERWIDTHS) CLong;

external IOleInPlaceUIWindow_RequestBorderSpace_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleInPlaceUIWindow_SetBorderSpace_Proxy(
    This : Pointer[IOleInPlaceUIWindow],
    pborderwidths : LPCBORDERWIDTHS) CLong;

external IOleInPlaceUIWindow_SetBorderSpace_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleInPlaceUIWindow_SetActiveObject_Proxy(
    This : Pointer[IOleInPlaceUIWindow],
    pActiveObject : Pointer[IOleInPlaceActiveObject],
    pszObjName : LPCOLESTR) CLong;

external IOleInPlaceUIWindow_SetActiveObject_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPOLEINPLACEACTIVEOBJECT = Pointer[IOleInPlaceActiveObject];

external IID_IOleInPlaceActiveObject : IID;

record Struct_IOleInPlaceActiveObjectVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IOleInPlaceActiveObject],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IOleInPlaceActiveObject]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IOleInPlaceActiveObject]),(CULong)],
    GetWindow : CCodePointer[(Pointer[Struct_IOleInPlaceActiveObject],Pointer[Pointer[Struct_HWND__]]),(CLong)],
    ContextSensitiveHelp : CCodePointer[(Pointer[Struct_IOleInPlaceActiveObject],Int),(CLong)],
    TranslateAcceleratorA : CCodePointer[(Pointer[Struct_IOleInPlaceActiveObject],Pointer[Struct_tagMSG]),(CLong)],
    OnFrameWindowActivate : CCodePointer[(Pointer[Struct_IOleInPlaceActiveObject],Int),(CLong)],
    OnDocWindowActivate : CCodePointer[(Pointer[Struct_IOleInPlaceActiveObject],Int),(CLong)],
    ResizeBorder : CCodePointer[(Pointer[Struct_IOleInPlaceActiveObject],Pointer[Struct_tagRECT],Pointer[Struct_IOleInPlaceUIWindow],Int),(CLong)],
    EnableModeless : CCodePointer[(Pointer[Struct_IOleInPlaceActiveObject],Int),(CLong)],
);

alias IOleInPlaceActiveObjectVtbl = Struct_IOleInPlaceActiveObjectVtbl;

record Struct_IOleInPlaceActiveObject (
    lpVtbl : Pointer[Struct_IOleInPlaceActiveObjectVtbl],
);

external IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy(
    This : Pointer[IOleInPlaceActiveObject]) CLong;

external IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleInPlaceActiveObject_OnFrameWindowActivate_Proxy(
    This : Pointer[IOleInPlaceActiveObject],
    fActivate : Int) CLong;

external IOleInPlaceActiveObject_OnFrameWindowActivate_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleInPlaceActiveObject_OnDocWindowActivate_Proxy(
    This : Pointer[IOleInPlaceActiveObject],
    fActivate : Int) CLong;

external IOleInPlaceActiveObject_OnDocWindowActivate_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleInPlaceActiveObject_RemoteResizeBorder_Proxy(
    This : Pointer[IOleInPlaceActiveObject],
    prcBorder : LPCRECT,
    riid : Pointer[IID],
    pUIWindow : Pointer[IOleInPlaceUIWindow],
    fFrameWindow : Int) CLong;

external IOleInPlaceActiveObject_RemoteResizeBorder_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleInPlaceActiveObject_EnableModeless_Proxy(
    This : Pointer[IOleInPlaceActiveObject],
    fEnable : Int) CLong;

external IOleInPlaceActiveObject_EnableModeless_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPOLEINPLACEFRAME = Pointer[IOleInPlaceFrame];

record Struct_tagOIFI (
    cb : UInt,
    fMDIApp : Int,
    hwndFrame : HWND,
    haccel : HACCEL,
    cAccelEntries : UInt,
);

alias OLEINPLACEFRAMEINFO = Struct_tagOIFI;

alias LPOLEINPLACEFRAMEINFO = Pointer[Struct_tagOIFI];

record Struct_tagOleMenuGroupWidths (
    width : Array[CLong,6],
);

alias OLEMENUGROUPWIDTHS = Struct_tagOleMenuGroupWidths;

alias LPOLEMENUGROUPWIDTHS = Pointer[Struct_tagOleMenuGroupWidths];

alias HOLEMENU = HGLOBAL;

external IID_IOleInPlaceFrame : IID;

record Struct_IOleInPlaceFrameVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IOleInPlaceFrame],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IOleInPlaceFrame]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IOleInPlaceFrame]),(CULong)],
    GetWindow : CCodePointer[(Pointer[Struct_IOleInPlaceFrame],Pointer[Pointer[Struct_HWND__]]),(CLong)],
    ContextSensitiveHelp : CCodePointer[(Pointer[Struct_IOleInPlaceFrame],Int),(CLong)],
    GetBorder : CCodePointer[(Pointer[Struct_IOleInPlaceFrame],Pointer[Struct_tagRECT]),(CLong)],
    RequestBorderSpace : CCodePointer[(Pointer[Struct_IOleInPlaceFrame],Pointer[Struct_tagRECT]),(CLong)],
    SetBorderSpace : CCodePointer[(Pointer[Struct_IOleInPlaceFrame],Pointer[Struct_tagRECT]),(CLong)],
    SetActiveObject : CCodePointer[(Pointer[Struct_IOleInPlaceFrame],Pointer[Struct_IOleInPlaceActiveObject],Pointer[UShort]),(CLong)],
    InsertMenus : CCodePointer[(Pointer[Struct_IOleInPlaceFrame],Pointer[Struct_HMENU__],Pointer[Struct_tagOleMenuGroupWidths]),(CLong)],
    SetMenu : CCodePointer[(Pointer[Struct_IOleInPlaceFrame],Pointer[Struct_HMENU__],RawPointer,Pointer[Struct_HWND__]),(CLong)],
    RemoveMenus : CCodePointer[(Pointer[Struct_IOleInPlaceFrame],Pointer[Struct_HMENU__]),(CLong)],
    SetStatusText : CCodePointer[(Pointer[Struct_IOleInPlaceFrame],Pointer[UShort]),(CLong)],
    EnableModeless : CCodePointer[(Pointer[Struct_IOleInPlaceFrame],Int),(CLong)],
    TranslateAcceleratorA : CCodePointer[(Pointer[Struct_IOleInPlaceFrame],Pointer[Struct_tagMSG],UShort),(CLong)],
);

alias IOleInPlaceFrameVtbl = Struct_IOleInPlaceFrameVtbl;

record Struct_IOleInPlaceFrame (
    lpVtbl : Pointer[Struct_IOleInPlaceFrameVtbl],
);

external IOleInPlaceFrame_InsertMenus_Proxy(
    This : Pointer[IOleInPlaceFrame],
    hmenuShared : HMENU,
    lpMenuWidths : LPOLEMENUGROUPWIDTHS) CLong;

external IOleInPlaceFrame_InsertMenus_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleInPlaceFrame_SetMenu_Proxy(
    This : Pointer[IOleInPlaceFrame],
    hmenuShared : HMENU,
    holemenu : HOLEMENU,
    hwndActiveObject : HWND) CLong;

external IOleInPlaceFrame_SetMenu_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleInPlaceFrame_RemoveMenus_Proxy(
    This : Pointer[IOleInPlaceFrame],
    hmenuShared : HMENU) CLong;

external IOleInPlaceFrame_RemoveMenus_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleInPlaceFrame_SetStatusText_Proxy(
    This : Pointer[IOleInPlaceFrame],
    pszStatusText : LPCOLESTR) CLong;

external IOleInPlaceFrame_SetStatusText_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleInPlaceFrame_EnableModeless_Proxy(
    This : Pointer[IOleInPlaceFrame],
    fEnable : Int) CLong;

external IOleInPlaceFrame_EnableModeless_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleInPlaceFrame_TranslateAccelerator_Proxy(
    This : Pointer[IOleInPlaceFrame],
    lpmsg : LPMSG,
    wID : UShort) CLong;

external IOleInPlaceFrame_TranslateAccelerator_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPOLEINPLACEOBJECT = Pointer[IOleInPlaceObject];

external IID_IOleInPlaceObject : IID;

record Struct_IOleInPlaceObjectVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IOleInPlaceObject],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IOleInPlaceObject]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IOleInPlaceObject]),(CULong)],
    GetWindow : CCodePointer[(Pointer[Struct_IOleInPlaceObject],Pointer[Pointer[Struct_HWND__]]),(CLong)],
    ContextSensitiveHelp : CCodePointer[(Pointer[Struct_IOleInPlaceObject],Int),(CLong)],
    InPlaceDeactivate : CCodePointer[(Pointer[Struct_IOleInPlaceObject]),(CLong)],
    UIDeactivate : CCodePointer[(Pointer[Struct_IOleInPlaceObject]),(CLong)],
    SetObjectRects : CCodePointer[(Pointer[Struct_IOleInPlaceObject],Pointer[Struct_tagRECT],Pointer[Struct_tagRECT]),(CLong)],
    ReactivateAndUndo : CCodePointer[(Pointer[Struct_IOleInPlaceObject]),(CLong)],
);

alias IOleInPlaceObjectVtbl = Struct_IOleInPlaceObjectVtbl;

record Struct_IOleInPlaceObject (
    lpVtbl : Pointer[Struct_IOleInPlaceObjectVtbl],
);

external IOleInPlaceObject_InPlaceDeactivate_Proxy(
    This : Pointer[IOleInPlaceObject]) CLong;

external IOleInPlaceObject_InPlaceDeactivate_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleInPlaceObject_UIDeactivate_Proxy(
    This : Pointer[IOleInPlaceObject]) CLong;

external IOleInPlaceObject_UIDeactivate_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleInPlaceObject_SetObjectRects_Proxy(
    This : Pointer[IOleInPlaceObject],
    lprcPosRect : LPCRECT,
    lprcClipRect : LPCRECT) CLong;

external IOleInPlaceObject_SetObjectRects_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleInPlaceObject_ReactivateAndUndo_Proxy(
    This : Pointer[IOleInPlaceObject]) CLong;

external IOleInPlaceObject_ReactivateAndUndo_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPOLEINPLACESITE = Pointer[IOleInPlaceSite];

external IID_IOleInPlaceSite : IID;

record Struct_IOleInPlaceSiteVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IOleInPlaceSite],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IOleInPlaceSite]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IOleInPlaceSite]),(CULong)],
    GetWindow : CCodePointer[(Pointer[Struct_IOleInPlaceSite],Pointer[Pointer[Struct_HWND__]]),(CLong)],
    ContextSensitiveHelp : CCodePointer[(Pointer[Struct_IOleInPlaceSite],Int),(CLong)],
    CanInPlaceActivate : CCodePointer[(Pointer[Struct_IOleInPlaceSite]),(CLong)],
    OnInPlaceActivate : CCodePointer[(Pointer[Struct_IOleInPlaceSite]),(CLong)],
    OnUIActivate : CCodePointer[(Pointer[Struct_IOleInPlaceSite]),(CLong)],
    GetWindowContext : CCodePointer[(Pointer[Struct_IOleInPlaceSite],Pointer[Pointer[Struct_IOleInPlaceFrame]],Pointer[Pointer[Struct_IOleInPlaceUIWindow]],Pointer[Struct_tagRECT],Pointer[Struct_tagRECT],Pointer[Struct_tagOIFI]),(CLong)],
    Scroll : CCodePointer[(Pointer[Struct_IOleInPlaceSite],Struct_tagSIZE),(CLong)],
    OnUIDeactivate : CCodePointer[(Pointer[Struct_IOleInPlaceSite],Int),(CLong)],
    OnInPlaceDeactivate : CCodePointer[(Pointer[Struct_IOleInPlaceSite]),(CLong)],
    DiscardUndoState : CCodePointer[(Pointer[Struct_IOleInPlaceSite]),(CLong)],
    DeactivateAndUndo : CCodePointer[(Pointer[Struct_IOleInPlaceSite]),(CLong)],
    OnPosRectChange : CCodePointer[(Pointer[Struct_IOleInPlaceSite],Pointer[Struct_tagRECT]),(CLong)],
);

alias IOleInPlaceSiteVtbl = Struct_IOleInPlaceSiteVtbl;

record Struct_IOleInPlaceSite (
    lpVtbl : Pointer[Struct_IOleInPlaceSiteVtbl],
);

external IOleInPlaceSite_CanInPlaceActivate_Proxy(
    This : Pointer[IOleInPlaceSite]) CLong;

external IOleInPlaceSite_CanInPlaceActivate_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleInPlaceSite_OnInPlaceActivate_Proxy(
    This : Pointer[IOleInPlaceSite]) CLong;

external IOleInPlaceSite_OnInPlaceActivate_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleInPlaceSite_OnUIActivate_Proxy(
    This : Pointer[IOleInPlaceSite]) CLong;

external IOleInPlaceSite_OnUIActivate_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleInPlaceSite_GetWindowContext_Proxy(
    This : Pointer[IOleInPlaceSite],
    ppFrame : Pointer[Pointer[IOleInPlaceFrame]],
    ppDoc : Pointer[Pointer[IOleInPlaceUIWindow]],
    lprcPosRect : LPRECT,
    lprcClipRect : LPRECT,
    lpFrameInfo : LPOLEINPLACEFRAMEINFO) CLong;

external IOleInPlaceSite_GetWindowContext_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleInPlaceSite_Scroll_Proxy(
    This : Pointer[IOleInPlaceSite],
    scrollExtant : SIZE) CLong;

external IOleInPlaceSite_Scroll_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleInPlaceSite_OnUIDeactivate_Proxy(
    This : Pointer[IOleInPlaceSite],
    fUndoable : Int) CLong;

external IOleInPlaceSite_OnUIDeactivate_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleInPlaceSite_OnInPlaceDeactivate_Proxy(
    This : Pointer[IOleInPlaceSite]) CLong;

external IOleInPlaceSite_OnInPlaceDeactivate_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleInPlaceSite_DiscardUndoState_Proxy(
    This : Pointer[IOleInPlaceSite]) CLong;

external IOleInPlaceSite_DiscardUndoState_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleInPlaceSite_DeactivateAndUndo_Proxy(
    This : Pointer[IOleInPlaceSite]) CLong;

external IOleInPlaceSite_DeactivateAndUndo_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IOleInPlaceSite_OnPosRectChange_Proxy(
    This : Pointer[IOleInPlaceSite],
    lprcPosRect : LPCRECT) CLong;

external IOleInPlaceSite_OnPosRectChange_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IContinue : IID;

record Struct_IContinueVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IContinue],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IContinue]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IContinue]),(CULong)],
    FContinue : CCodePointer[(Pointer[Struct_IContinue]),(CLong)],
);

alias IContinueVtbl = Struct_IContinueVtbl;

record Struct_IContinue (
    lpVtbl : Pointer[Struct_IContinueVtbl],
);

external IContinue_FContinue_Proxy(
    This : Pointer[IContinue]) CLong;

external IContinue_FContinue_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPVIEWOBJECT = Pointer[IViewObject];

external IID_IViewObject : IID;

record Struct_IViewObjectVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IViewObject],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IViewObject]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IViewObject]),(CULong)],
    Draw : CCodePointer[(Pointer[Struct_IViewObject],CULong,CLong,RawPointer,Pointer[Struct_tagDVTARGETDEVICE],Pointer[Struct_HDC__],Pointer[Struct_HDC__],Pointer[Struct__RECTL],Pointer[Struct__RECTL],CCodePointer[(UInt64),(Int)],UInt64),(CLong)],
    GetColorSet : CCodePointer[(Pointer[Struct_IViewObject],CULong,CLong,RawPointer,Pointer[Struct_tagDVTARGETDEVICE],Pointer[Struct_HDC__],Pointer[Pointer[Struct_tagLOGPALETTE]]),(CLong)],
    Freeze : CCodePointer[(Pointer[Struct_IViewObject],CULong,CLong,RawPointer,Pointer[CULong]),(CLong)],
    Unfreeze : CCodePointer[(Pointer[Struct_IViewObject],CULong),(CLong)],
    SetAdvise : CCodePointer[(Pointer[Struct_IViewObject],CULong,CULong,Pointer[Struct_IAdviseSink]),(CLong)],
    GetAdvise : CCodePointer[(Pointer[Struct_IViewObject],Pointer[CULong],Pointer[CULong],Pointer[Pointer[Struct_IAdviseSink]]),(CLong)],
);

alias IViewObjectVtbl = Struct_IViewObjectVtbl;

record Struct_IViewObject (
    lpVtbl : Pointer[Struct_IViewObjectVtbl],
);

external IViewObject_RemoteDraw_Proxy(
    This : Pointer[IViewObject],
    dwDrawAspect : CULong,
    lindex : CLong,
    pvAspect : UInt64,
    ptd : Pointer[DVTARGETDEVICE],
    hdcTargetDev : UInt64,
    hdcDraw : UInt64,
    lprcBounds : LPCRECTL,
    lprcWBounds : LPCRECTL,
    pContinue : Pointer[IContinue]) CLong;

external IViewObject_RemoteDraw_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IViewObject_RemoteGetColorSet_Proxy(
    This : Pointer[IViewObject],
    dwDrawAspect : CULong,
    lindex : CLong,
    pvAspect : UInt64,
    ptd : Pointer[DVTARGETDEVICE],
    hicTargetDev : UInt64,
    ppColorSet : Pointer[Pointer[LOGPALETTE]]) CLong;

external IViewObject_RemoteGetColorSet_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IViewObject_RemoteFreeze_Proxy(
    This : Pointer[IViewObject],
    dwDrawAspect : CULong,
    lindex : CLong,
    pvAspect : UInt64,
    pdwFreeze : Pointer[CULong]) CLong;

external IViewObject_RemoteFreeze_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IViewObject_Unfreeze_Proxy(
    This : Pointer[IViewObject],
    dwFreeze : CULong) CLong;

external IViewObject_Unfreeze_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IViewObject_SetAdvise_Proxy(
    This : Pointer[IViewObject],
    aspects : CULong,
    advf : CULong,
    pAdvSink : Pointer[IAdviseSink]) CLong;

external IViewObject_SetAdvise_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IViewObject_RemoteGetAdvise_Proxy(
    This : Pointer[IViewObject],
    pAspects : Pointer[CULong],
    pAdvf : Pointer[CULong],
    ppAdvSink : Pointer[Pointer[IAdviseSink]]) CLong;

external IViewObject_RemoteGetAdvise_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPVIEWOBJECT2 = Pointer[IViewObject2];

external IID_IViewObject2 : IID;

record Struct_IViewObject2Vtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IViewObject2],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IViewObject2]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IViewObject2]),(CULong)],
    Draw : CCodePointer[(Pointer[Struct_IViewObject2],CULong,CLong,RawPointer,Pointer[Struct_tagDVTARGETDEVICE],Pointer[Struct_HDC__],Pointer[Struct_HDC__],Pointer[Struct__RECTL],Pointer[Struct__RECTL],CCodePointer[(UInt64),(Int)],UInt64),(CLong)],
    GetColorSet : CCodePointer[(Pointer[Struct_IViewObject2],CULong,CLong,RawPointer,Pointer[Struct_tagDVTARGETDEVICE],Pointer[Struct_HDC__],Pointer[Pointer[Struct_tagLOGPALETTE]]),(CLong)],
    Freeze : CCodePointer[(Pointer[Struct_IViewObject2],CULong,CLong,RawPointer,Pointer[CULong]),(CLong)],
    Unfreeze : CCodePointer[(Pointer[Struct_IViewObject2],CULong),(CLong)],
    SetAdvise : CCodePointer[(Pointer[Struct_IViewObject2],CULong,CULong,Pointer[Struct_IAdviseSink]),(CLong)],
    GetAdvise : CCodePointer[(Pointer[Struct_IViewObject2],Pointer[CULong],Pointer[CULong],Pointer[Pointer[Struct_IAdviseSink]]),(CLong)],
    GetExtent : CCodePointer[(Pointer[Struct_IViewObject2],CULong,CLong,Pointer[Struct_tagDVTARGETDEVICE],Pointer[Struct_tagSIZE]),(CLong)],
);

alias IViewObject2Vtbl = Struct_IViewObject2Vtbl;

record Struct_IViewObject2 (
    lpVtbl : Pointer[Struct_IViewObject2Vtbl],
);

external IViewObject2_GetExtent_Proxy(
    This : Pointer[IViewObject2],
    dwDrawAspect : CULong,
    lindex : CLong,
    ptd : Pointer[DVTARGETDEVICE],
    lpsizel : LPSIZEL) CLong;

external IViewObject2_GetExtent_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPDROPSOURCE = Pointer[IDropSource];

external IID_IDropSource : IID;

record Struct_IDropSourceVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IDropSource],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IDropSource]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IDropSource]),(CULong)],
    QueryContinueDrag : CCodePointer[(Pointer[Struct_IDropSource],Int,CULong),(CLong)],
    GiveFeedback : CCodePointer[(Pointer[Struct_IDropSource],CULong),(CLong)],
);

alias IDropSourceVtbl = Struct_IDropSourceVtbl;

record Struct_IDropSource (
    lpVtbl : Pointer[Struct_IDropSourceVtbl],
);

external IDropSource_QueryContinueDrag_Proxy(
    This : Pointer[IDropSource],
    fEscapePressed : Int,
    grfKeyState : CULong) CLong;

external IDropSource_QueryContinueDrag_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IDropSource_GiveFeedback_Proxy(
    This : Pointer[IDropSource],
    dwEffect : CULong) CLong;

external IDropSource_GiveFeedback_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPDROPTARGET = Pointer[IDropTarget];

external IID_IDropTarget : IID;

record Struct_IDropTargetVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IDropTarget],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IDropTarget]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IDropTarget]),(CULong)],
    DragEnter : CCodePointer[(Pointer[Struct_IDropTarget],Pointer[Struct_IDataObject],CULong,Struct__POINTL,Pointer[CULong]),(CLong)],
    DragOver : CCodePointer[(Pointer[Struct_IDropTarget],CULong,Struct__POINTL,Pointer[CULong]),(CLong)],
    DragLeave : CCodePointer[(Pointer[Struct_IDropTarget]),(CLong)],
    Drop : CCodePointer[(Pointer[Struct_IDropTarget],Pointer[Struct_IDataObject],CULong,Struct__POINTL,Pointer[CULong]),(CLong)],
);

alias IDropTargetVtbl = Struct_IDropTargetVtbl;

record Struct_IDropTarget (
    lpVtbl : Pointer[Struct_IDropTargetVtbl],
);

external IDropTarget_DragEnter_Proxy(
    This : Pointer[IDropTarget],
    pDataObj : Pointer[IDataObject],
    grfKeyState : CULong,
    pt : POINTL,
    pdwEffect : Pointer[CULong]) CLong;

external IDropTarget_DragEnter_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IDropTarget_DragOver_Proxy(
    This : Pointer[IDropTarget],
    grfKeyState : CULong,
    pt : POINTL,
    pdwEffect : Pointer[CULong]) CLong;

external IDropTarget_DragOver_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IDropTarget_DragLeave_Proxy(
    This : Pointer[IDropTarget]) CLong;

external IDropTarget_DragLeave_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IDropTarget_Drop_Proxy(
    This : Pointer[IDropTarget],
    pDataObj : Pointer[IDataObject],
    grfKeyState : CULong,
    pt : POINTL,
    pdwEffect : Pointer[CULong]) CLong;

external IDropTarget_Drop_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPENUMOLEVERB = Pointer[IEnumOLEVERB];

record Struct_tagOLEVERB (
    lVerb : CLong,
    lpszVerbName : LPOLESTR,
    fuFlags : CULong,
    grfAttribs : CULong,
);

alias OLEVERB = Struct_tagOLEVERB;

alias LPOLEVERB = Pointer[Struct_tagOLEVERB];

alias OLEVERBATTRIB_NEVERDIRTIES = 1;
alias OLEVERBATTRIB_ONCONTAINERMENU = 2;

alias OLEVERBATTRIB = Int;

external IID_IEnumOLEVERB : IID;

record Struct_IEnumOLEVERBVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IEnumOLEVERB],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IEnumOLEVERB]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IEnumOLEVERB]),(CULong)],
    Next : CCodePointer[(Pointer[Struct_IEnumOLEVERB],CULong,Pointer[Struct_tagOLEVERB],Pointer[CULong]),(CLong)],
    Skip : CCodePointer[(Pointer[Struct_IEnumOLEVERB],CULong),(CLong)],
    Reset : CCodePointer[(Pointer[Struct_IEnumOLEVERB]),(CLong)],
    Clone : CCodePointer[(Pointer[Struct_IEnumOLEVERB],Pointer[Pointer[Struct_IEnumOLEVERB]]),(CLong)],
);

alias IEnumOLEVERBVtbl = Struct_IEnumOLEVERBVtbl;

record Struct_IEnumOLEVERB (
    lpVtbl : Pointer[Struct_IEnumOLEVERBVtbl],
);

external IEnumOLEVERB_RemoteNext_Proxy(
    This : Pointer[IEnumOLEVERB],
    celt : CULong,
    rgelt : LPOLEVERB,
    pceltFetched : Pointer[CULong]) CLong;

external IEnumOLEVERB_RemoteNext_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IEnumOLEVERB_Skip_Proxy(
    This : Pointer[IEnumOLEVERB],
    celt : CULong) CLong;

external IEnumOLEVERB_Skip_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IEnumOLEVERB_Reset_Proxy(
    This : Pointer[IEnumOLEVERB]) CLong;

external IEnumOLEVERB_Reset_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IEnumOLEVERB_Clone_Proxy(
    This : Pointer[IEnumOLEVERB],
    ppenum : Pointer[Pointer[IEnumOLEVERB]]) CLong;

external IEnumOLEVERB_Clone_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external HACCEL_UserSize(
    argument0 : Pointer[CULong],
    argument1 : CULong,
    argument2 : Pointer[HACCEL]) CULong;

external HACCEL_UserMarshal(
    argument0 : Pointer[CULong],
    argument1 : Pointer[CUChar],
    argument2 : Pointer[HACCEL]) Pointer[CUChar];

external HACCEL_UserUnmarshal(
    argument0 : Pointer[CULong],
    argument1 : Pointer[CUChar],
    argument2 : Pointer[HACCEL]) Pointer[CUChar];

external HACCEL_UserFree(
    argument0 : Pointer[CULong],
    argument1 : Pointer[HACCEL]);

external HGLOBAL_UserSize(
    argument0 : Pointer[CULong],
    argument1 : CULong,
    argument2 : Pointer[HGLOBAL]) CULong;

external HGLOBAL_UserMarshal(
    argument0 : Pointer[CULong],
    argument1 : Pointer[CUChar],
    argument2 : Pointer[HGLOBAL]) Pointer[CUChar];

external HGLOBAL_UserUnmarshal(
    argument0 : Pointer[CULong],
    argument1 : Pointer[CUChar],
    argument2 : Pointer[HGLOBAL]) Pointer[CUChar];

external HGLOBAL_UserFree(
    argument0 : Pointer[CULong],
    argument1 : Pointer[HGLOBAL]);

external HMENU_UserSize(
    argument0 : Pointer[CULong],
    argument1 : CULong,
    argument2 : Pointer[HMENU]) CULong;

external HMENU_UserMarshal(
    argument0 : Pointer[CULong],
    argument1 : Pointer[CUChar],
    argument2 : Pointer[HMENU]) Pointer[CUChar];

external HMENU_UserUnmarshal(
    argument0 : Pointer[CULong],
    argument1 : Pointer[CUChar],
    argument2 : Pointer[HMENU]) Pointer[CUChar];

external HMENU_UserFree(
    argument0 : Pointer[CULong],
    argument1 : Pointer[HMENU]);

external HWND_UserSize(
    argument0 : Pointer[CULong],
    argument1 : CULong,
    argument2 : Pointer[HWND]) CULong;

external HWND_UserMarshal(
    argument0 : Pointer[CULong],
    argument1 : Pointer[CUChar],
    argument2 : Pointer[HWND]) Pointer[CUChar];

external HWND_UserUnmarshal(
    argument0 : Pointer[CULong],
    argument1 : Pointer[CUChar],
    argument2 : Pointer[HWND]) Pointer[CUChar];

external HWND_UserFree(
    argument0 : Pointer[CULong],
    argument1 : Pointer[HWND]);

external IOleCache2_UpdateCache_Proxy(
    This : Pointer[IOleCache2],
    pDataObject : LPDATAOBJECT,
    grfUpdf : CULong,
    pReserved : LPVOID) CLong;

external IOleCache2_UpdateCache_Stub(
    This : Pointer[IOleCache2],
    pDataObject : LPDATAOBJECT,
    grfUpdf : CULong,
    pReserved : Int64) CLong;

external IOleInPlaceActiveObject_TranslateAccelerator_Proxy(
    This : Pointer[IOleInPlaceActiveObject],
    lpmsg : LPMSG) CLong;

external IOleInPlaceActiveObject_TranslateAccelerator_Stub(
    This : Pointer[IOleInPlaceActiveObject]) CLong;

external IOleInPlaceActiveObject_ResizeBorder_Proxy(
    This : Pointer[IOleInPlaceActiveObject],
    prcBorder : LPCRECT,
    pUIWindow : Pointer[IOleInPlaceUIWindow],
    fFrameWindow : Int) CLong;

external IOleInPlaceActiveObject_ResizeBorder_Stub(
    This : Pointer[IOleInPlaceActiveObject],
    prcBorder : LPCRECT,
    riid : Pointer[IID],
    pUIWindow : Pointer[IOleInPlaceUIWindow],
    fFrameWindow : Int) CLong;

external IViewObject_Draw_Proxy(
    This : Pointer[IViewObject],
    dwDrawAspect : CULong,
    lindex : CLong,
    pvAspect : RawPointer,
    ptd : Pointer[DVTARGETDEVICE],
    hdcTargetDev : HDC,
    hdcDraw : HDC,
    lprcBounds : LPCRECTL,
    lprcWBounds : LPCRECTL,
    pfnContinue : CCodePointer[(UInt64),(Int)],
    dwContinue : UInt64) CLong;

external IViewObject_Draw_Stub(
    This : Pointer[IViewObject],
    dwDrawAspect : CULong,
    lindex : CLong,
    pvAspect : UInt64,
    ptd : Pointer[DVTARGETDEVICE],
    hdcTargetDev : UInt64,
    hdcDraw : UInt64,
    lprcBounds : LPCRECTL,
    lprcWBounds : LPCRECTL,
    pContinue : Pointer[IContinue]) CLong;

external IViewObject_GetColorSet_Proxy(
    This : Pointer[IViewObject],
    dwDrawAspect : CULong,
    lindex : CLong,
    pvAspect : RawPointer,
    ptd : Pointer[DVTARGETDEVICE],
    hicTargetDev : HDC,
    ppColorSet : Pointer[Pointer[LOGPALETTE]]) CLong;

external IViewObject_GetColorSet_Stub(
    This : Pointer[IViewObject],
    dwDrawAspect : CULong,
    lindex : CLong,
    pvAspect : UInt64,
    ptd : Pointer[DVTARGETDEVICE],
    hicTargetDev : UInt64,
    ppColorSet : Pointer[Pointer[LOGPALETTE]]) CLong;

external IViewObject_Freeze_Proxy(
    This : Pointer[IViewObject],
    dwDrawAspect : CULong,
    lindex : CLong,
    pvAspect : RawPointer,
    pdwFreeze : Pointer[CULong]) CLong;

external IViewObject_Freeze_Stub(
    This : Pointer[IViewObject],
    dwDrawAspect : CULong,
    lindex : CLong,
    pvAspect : UInt64,
    pdwFreeze : Pointer[CULong]) CLong;

external IViewObject_GetAdvise_Proxy(
    This : Pointer[IViewObject],
    pAspects : Pointer[CULong],
    pAdvf : Pointer[CULong],
    ppAdvSink : Pointer[Pointer[IAdviseSink]]) CLong;

external IViewObject_GetAdvise_Stub(
    This : Pointer[IViewObject],
    pAspects : Pointer[CULong],
    pAdvf : Pointer[CULong],
    ppAdvSink : Pointer[Pointer[IAdviseSink]]) CLong;

external IEnumOLEVERB_Next_Proxy(
    This : Pointer[IEnumOLEVERB],
    celt : CULong,
    rgelt : LPOLEVERB,
    pceltFetched : Pointer[CULong]) CLong;

external IEnumOLEVERB_Next_Stub(
    This : Pointer[IEnumOLEVERB],
    celt : CULong,
    rgelt : LPOLEVERB,
    pceltFetched : Pointer[CULong]) CLong;

alias IServiceProvider = Struct_IServiceProvider;

external __MIDL_itf_servprov_0000_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_servprov_0000_v0_0_s_ifspec : RPC_IF_HANDLE;

alias LPSERVICEPROVIDER = Pointer[IServiceProvider];

external IID_IServiceProvider : IID;

record Struct_IServiceProviderVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IServiceProvider],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IServiceProvider]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IServiceProvider]),(CULong)],
    QueryService : CCodePointer[(Pointer[Struct_IServiceProvider],Pointer[Struct__GUID],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
);

alias IServiceProviderVtbl = Struct_IServiceProviderVtbl;

record Struct_IServiceProvider (
    lpVtbl : Pointer[Struct_IServiceProviderVtbl],
);

external IServiceProvider_RemoteQueryService_Proxy(
    This : Pointer[IServiceProvider],
    guidService : Pointer[GUID],
    riid : Pointer[IID],
    ppvObject : Pointer[Pointer[IUnknown]]) CLong;

external IServiceProvider_RemoteQueryService_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external __MIDL_itf_servprov_0093_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_servprov_0093_v0_0_s_ifspec : RPC_IF_HANDLE;

external IServiceProvider_QueryService_Proxy(
    This : Pointer[IServiceProvider],
    guidService : Pointer[GUID],
    riid : Pointer[IID],
    ppvObject : Pointer[RawPointer]) CLong;

external IServiceProvider_QueryService_Stub(
    This : Pointer[IServiceProvider],
    guidService : Pointer[GUID],
    riid : Pointer[IID],
    ppvObject : Pointer[Pointer[IUnknown]]) CLong;

alias IXMLDOMImplementation = Struct_IXMLDOMImplementation;

alias IXMLDOMNode = Struct_IXMLDOMNode;

alias IXMLDOMDocumentFragment = Struct_IXMLDOMDocumentFragment;

alias IXMLDOMDocument = Struct_IXMLDOMDocument;

alias IXMLDOMNodeList = Struct_IXMLDOMNodeList;

alias IXMLDOMNamedNodeMap = Struct_IXMLDOMNamedNodeMap;

alias IXMLDOMCharacterData = Struct_IXMLDOMCharacterData;

alias IXMLDOMAttribute = Struct_IXMLDOMAttribute;

alias IXMLDOMElement = Struct_IXMLDOMElement;

alias IXMLDOMText = Struct_IXMLDOMText;

alias IXMLDOMComment = Struct_IXMLDOMComment;

alias IXMLDOMProcessingInstruction = Struct_IXMLDOMProcessingInstruction;

alias IXMLDOMCDATASection = Struct_IXMLDOMCDATASection;

alias IXMLDOMDocumentType = Struct_IXMLDOMDocumentType;

alias IXMLDOMNotation = Struct_IXMLDOMNotation;

alias IXMLDOMEntity = Struct_IXMLDOMEntity;

alias IXMLDOMEntityReference = Struct_IXMLDOMEntityReference;

alias IXMLDOMParseError = Struct_IXMLDOMParseError;

alias IXTLRuntime = Struct_IXTLRuntime;

alias XMLDOMDocumentEvents = Struct_XMLDOMDocumentEvents;

alias DOMDocument = Opaque;

alias DOMFreeThreadedDocument = Opaque;

alias IXMLHttpRequest = Struct_IXMLHttpRequest;

alias XMLHTTPRequest = Opaque;

alias IXMLDSOControl = Struct_IXMLDSOControl;

alias XMLDSOControl = Opaque;

alias IXMLElementCollection = Struct_IXMLElementCollection;

alias IXMLDocument = Struct_IXMLDocument;

alias IXMLDocument2 = Struct_IXMLDocument2;

alias IXMLElement = Struct_IXMLElement;

alias IXMLElement2 = Struct_IXMLElement2;

alias IXMLAttribute = Struct_IXMLAttribute;

alias IXMLError = Struct_IXMLError;

alias XMLDocument = Opaque;

alias ICreateTypeInfo = Struct_ICreateTypeInfo;

alias ICreateTypeInfo2 = Struct_ICreateTypeInfo2;

alias ICreateTypeLib = Struct_ICreateTypeLib;

alias ICreateTypeLib2 = Struct_ICreateTypeLib2;

alias IDispatch = Struct_IDispatch;

alias IEnumVARIANT = Struct_IEnumVARIANT;

alias ITypeComp = Struct_ITypeComp;

alias ITypeInfo = Struct_ITypeInfo;

alias ITypeInfo2 = Struct_ITypeInfo2;

alias ITypeLib = Struct_ITypeLib;

alias ITypeLib2 = Struct_ITypeLib2;

alias ITypeChangeEvents = Struct_ITypeChangeEvents;

alias IErrorInfo = Struct_IErrorInfo;

alias ICreateErrorInfo = Struct_ICreateErrorInfo;

alias ISupportErrorInfo = Struct_ISupportErrorInfo;

alias ITypeFactory = Struct_ITypeFactory;

alias ITypeMarshal = Struct_ITypeMarshal;

alias IRecordInfo = Struct_IRecordInfo;

alias IErrorLog = Struct_IErrorLog;

alias IPropertyBag = Struct_IPropertyBag;

external __MIDL_itf_oaidl_0000_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_oaidl_0000_v0_0_s_ifspec : RPC_IF_HANDLE;

alias CURRENCY = CY;

record Struct_tagSAFEARRAYBOUND (
    cElements : CULong,
    lLbound : CLong,
);

alias SAFEARRAYBOUND = Struct_tagSAFEARRAYBOUND;

alias LPSAFEARRAYBOUND = Pointer[Struct_tagSAFEARRAYBOUND];

alias wireVARIANT = Pointer[Struct__wireVARIANT];

alias wireBRECORD = Pointer[Struct__wireBRECORD];

record Struct__wireSAFEARR_BSTR (
    Size : CULong,
    aBstr : Pointer[wireBSTR],
);

alias SAFEARR_BSTR = Struct__wireSAFEARR_BSTR;

record Struct__wireSAFEARR_UNKNOWN (
    Size : CULong,
    apUnknown : Pointer[Pointer[IUnknown]],
);

alias SAFEARR_UNKNOWN = Struct__wireSAFEARR_UNKNOWN;

record Struct__wireSAFEARR_DISPATCH (
    Size : CULong,
    apDispatch : Pointer[Pointer[IDispatch]],
);

alias SAFEARR_DISPATCH = Struct__wireSAFEARR_DISPATCH;

record Struct__wireSAFEARR_VARIANT (
    Size : CULong,
    aVariant : Pointer[wireVARIANT],
);

alias SAFEARR_VARIANT = Struct__wireSAFEARR_VARIANT;

record Struct__wireSAFEARR_BRECORD (
    Size : CULong,
    aRecord : Pointer[wireBRECORD],
);

alias SAFEARR_BRECORD = Struct__wireSAFEARR_BRECORD;

record Struct__wireSAFEARR_HAVEIID (
    Size : CULong,
    apUnknown : Pointer[Pointer[IUnknown]],
    iid : IID,
);

alias SAFEARR_HAVEIID = Struct__wireSAFEARR_HAVEIID;

alias SF_ERROR = 10;
alias SF_I1 = 16;
alias SF_I2 = 2;
alias SF_I4 = 3;
alias SF_I8 = 20;
alias SF_BSTR = 8;
alias SF_UNKNOWN = 13;
alias SF_DISPATCH = 9;
alias SF_VARIANT = 12;
alias SF_RECORD = 36;
alias SF_HAVEIID = 32781;

alias SF_TYPE = Int;

record Struct__wireSAFEARRAY_UNION (
    sfType : CULong,
    u : AUnionType,
);

alias SAFEARRAYUNION = Struct__wireSAFEARRAY_UNION;

record Struct__wireSAFEARRAY (
    cDims : UShort,
    fFeatures : UShort,
    cbElements : CULong,
    cLocks : CULong,
    uArrayStructs : SAFEARRAYUNION,
    rgsabound : Array[SAFEARRAYBOUND,1],
);

alias wireSAFEARRAY = Pointer[Struct__wireSAFEARRAY];

alias wirePSAFEARRAY = Pointer[wireSAFEARRAY];

record Struct_tagSAFEARRAY (
    cDims : UShort,
    fFeatures : UShort,
    cbElements : CULong,
    cLocks : CULong,
    pvData : PVOID,
    rgsabound : Array[SAFEARRAYBOUND,1],
);

alias SAFEARRAY = Struct_tagSAFEARRAY;

alias LPSAFEARRAY = Pointer[SAFEARRAY];

alias VARIANT = Struct_tagVARIANT;

record Struct_tagVARIANT (
    unnamed_field0 : AUnionType,
);

alias LPVARIANT = Pointer[VARIANT];

alias VARIANTARG = VARIANT;

alias LPVARIANTARG = Pointer[VARIANT];

record Struct__wireBRECORD (
    fFlags : CULong,
    clSize : CULong,
    pRecInfo : Pointer[IRecordInfo],
    pRecord : Pointer[CUChar],
);

record Struct__wireVARIANT (
    clSize : CULong,
    rpcReserved : CULong,
    vt : UShort,
    wReserved1 : UShort,
    wReserved2 : UShort,
    wReserved3 : UShort,
    unnamed_field6 : AUnionType,
);

alias DISPID = CLong;

alias MEMBERID = CLong;

alias HREFTYPE = CULong;

alias TKIND_ENUM = 0;
alias TKIND_RECORD = 1;
alias TKIND_MODULE = 2;
alias TKIND_INTERFACE = 3;
alias TKIND_DISPATCH = 4;
alias TKIND_COCLASS = 5;
alias TKIND_ALIAS = 6;
alias TKIND_UNION = 7;
alias TKIND_MAX = 8;

alias TYPEKIND = Int;

record Struct_tagTYPEDESC (
    unnamed_field0 : AUnionType,
    vt : UShort,
);

alias TYPEDESC = Struct_tagTYPEDESC;

record Struct_tagARRAYDESC (
    tdescElem : TYPEDESC,
    cDims : UShort,
    rgbounds : Array[SAFEARRAYBOUND,1],
);

alias ARRAYDESC = Struct_tagARRAYDESC;

record Struct_tagPARAMDESCEX (
    cBytes : CULong,
    varDefaultValue : VARIANTARG,
);

alias PARAMDESCEX = Struct_tagPARAMDESCEX;

alias LPPARAMDESCEX = Pointer[Struct_tagPARAMDESCEX];

record Struct_tagPARAMDESC (
    pparamdescex : LPPARAMDESCEX,
    wParamFlags : UShort,
);

alias PARAMDESC = Struct_tagPARAMDESC;

alias LPPARAMDESC = Pointer[Struct_tagPARAMDESC];

record Struct_tagIDLDESC (
    dwReserved : UInt64,
    wIDLFlags : UShort,
);

alias IDLDESC = Struct_tagIDLDESC;

alias LPIDLDESC = Pointer[Struct_tagIDLDESC];

record Struct_tagELEMDESC (
    tdesc : TYPEDESC,
    unnamed_field1 : AUnionType,
);

alias ELEMDESC = Struct_tagELEMDESC;

alias LPELEMDESC = Pointer[Struct_tagELEMDESC];

record Struct_tagTYPEATTR (
    guid : GUID,
    lcid : CULong,
    dwReserved : CULong,
    memidConstructor : CLong,
    memidDestructor : CLong,
    lpstrSchema : LPOLESTR,
    cbSizeInstance : CULong,
    typekind : TYPEKIND,
    cFuncs : UShort,
    cVars : UShort,
    cImplTypes : UShort,
    cbSizeVft : UShort,
    cbAlignment : UShort,
    wTypeFlags : UShort,
    wMajorVerNum : UShort,
    wMinorVerNum : UShort,
    tdescAlias : TYPEDESC,
    idldescType : IDLDESC,
);

alias TYPEATTR = Struct_tagTYPEATTR;

alias LPTYPEATTR = Pointer[Struct_tagTYPEATTR];

record Struct_tagDISPPARAMS (
    rgvarg : Pointer[VARIANTARG],
    rgdispidNamedArgs : Pointer[CLong],
    cArgs : UInt,
    cNamedArgs : UInt,
);

alias DISPPARAMS = Struct_tagDISPPARAMS;

record Struct_tagEXCEPINFO (
    wCode : UShort,
    wReserved : UShort,
    bstrSource : BSTR,
    bstrDescription : BSTR,
    bstrHelpFile : BSTR,
    dwHelpContext : CULong,
    pvReserved : PVOID,
    pfnDeferredFillIn : CCodePointer[(Pointer[Struct_tagEXCEPINFO]),(CLong)],
    scode : CLong,
);

alias EXCEPINFO = Struct_tagEXCEPINFO;

alias LPEXCEPINFO = Pointer[Struct_tagEXCEPINFO];

alias CC_FASTCALL = 0;
alias CC_CDECL = 1;
alias CC_MSCPASCAL = 2;
alias CC_PASCAL = 2;
alias CC_MACPASCAL = 3;
alias CC_STDCALL = 4;
alias CC_FPFASTCALL = 5;
alias CC_SYSCALL = 6;
alias CC_MPWCDECL = 7;
alias CC_MPWPASCAL = 8;
alias CC_MAX = 9;

alias CALLCONV = Int;

alias FUNC_VIRTUAL = 0;
alias FUNC_PUREVIRTUAL = 1;
alias FUNC_NONVIRTUAL = 2;
alias FUNC_STATIC = 3;
alias FUNC_DISPATCH = 4;

alias FUNCKIND = Int;

alias INVOKE_FUNC = 1;
alias INVOKE_PROPERTYGET = 2;
alias INVOKE_PROPERTYPUT = 4;
alias INVOKE_PROPERTYPUTREF = 8;

alias INVOKEKIND = Int;

record Struct_tagFUNCDESC (
    memid : CLong,
    lprgscode : Pointer[CLong],
    lprgelemdescParam : Pointer[ELEMDESC],
    funckind : FUNCKIND,
    invkind : INVOKEKIND,
    callconv : CALLCONV,
    cParams : Short,
    cParamsOpt : Short,
    oVft : Short,
    cScodes : Short,
    elemdescFunc : ELEMDESC,
    wFuncFlags : UShort,
);

alias FUNCDESC = Struct_tagFUNCDESC;

alias LPFUNCDESC = Pointer[Struct_tagFUNCDESC];

alias VAR_PERINSTANCE = 0;
alias VAR_STATIC = 1;
alias VAR_CONST = 2;
alias VAR_DISPATCH = 3;

alias VARKIND = Int;

record Struct_tagVARDESC (
    memid : CLong,
    lpstrSchema : LPOLESTR,
    unnamed_field2 : AUnionType,
    elemdescVar : ELEMDESC,
    wVarFlags : UShort,
    varkind : VARKIND,
);

alias VARDESC = Struct_tagVARDESC;

alias LPVARDESC = Pointer[Struct_tagVARDESC];

alias TYPEFLAG_FAPPOBJECT = 1;
alias TYPEFLAG_FCANCREATE = 2;
alias TYPEFLAG_FLICENSED = 4;
alias TYPEFLAG_FPREDECLID = 8;
alias TYPEFLAG_FHIDDEN = 16;
alias TYPEFLAG_FCONTROL = 32;
alias TYPEFLAG_FDUAL = 64;
alias TYPEFLAG_FNONEXTENSIBLE = 128;
alias TYPEFLAG_FOLEAUTOMATION = 256;
alias TYPEFLAG_FRESTRICTED = 512;
alias TYPEFLAG_FAGGREGATABLE = 1024;
alias TYPEFLAG_FREPLACEABLE = 2048;
alias TYPEFLAG_FDISPATCHABLE = 4096;
alias TYPEFLAG_FREVERSEBIND = 8192;
alias TYPEFLAG_FPROXY = 16384;

alias TYPEFLAGS = Int;

alias FUNCFLAG_FRESTRICTED = 1;
alias FUNCFLAG_FSOURCE = 2;
alias FUNCFLAG_FBINDABLE = 4;
alias FUNCFLAG_FREQUESTEDIT = 8;
alias FUNCFLAG_FDISPLAYBIND = 16;
alias FUNCFLAG_FDEFAULTBIND = 32;
alias FUNCFLAG_FHIDDEN = 64;
alias FUNCFLAG_FUSESGETLASTERROR = 128;
alias FUNCFLAG_FDEFAULTCOLLELEM = 256;
alias FUNCFLAG_FUIDEFAULT = 512;
alias FUNCFLAG_FNONBROWSABLE = 1024;
alias FUNCFLAG_FREPLACEABLE = 2048;
alias FUNCFLAG_FIMMEDIATEBIND = 4096;

alias FUNCFLAGS = Int;

alias VARFLAG_FREADONLY = 1;
alias VARFLAG_FSOURCE = 2;
alias VARFLAG_FBINDABLE = 4;
alias VARFLAG_FREQUESTEDIT = 8;
alias VARFLAG_FDISPLAYBIND = 16;
alias VARFLAG_FDEFAULTBIND = 32;
alias VARFLAG_FHIDDEN = 64;
alias VARFLAG_FRESTRICTED = 128;
alias VARFLAG_FDEFAULTCOLLELEM = 256;
alias VARFLAG_FUIDEFAULT = 512;
alias VARFLAG_FNONBROWSABLE = 1024;
alias VARFLAG_FREPLACEABLE = 2048;
alias VARFLAG_FIMMEDIATEBIND = 4096;

alias VARFLAGS = Int;

record Struct_tagCLEANLOCALSTORAGE (
    pInterface : Pointer[IUnknown],
    pStorage : PVOID,
    flags : CULong,
);

alias CLEANLOCALSTORAGE = Struct_tagCLEANLOCALSTORAGE;

record Struct_tagCUSTDATAITEM (
    guid : GUID,
    varValue : VARIANTARG,
);

alias CUSTDATAITEM = Struct_tagCUSTDATAITEM;

alias LPCUSTDATAITEM = Pointer[Struct_tagCUSTDATAITEM];

record Struct_tagCUSTDATA (
    cCustData : CULong,
    prgCustData : LPCUSTDATAITEM,
);

alias CUSTDATA = Struct_tagCUSTDATA;

alias LPCUSTDATA = Pointer[Struct_tagCUSTDATA];

external IOleAutomationTypes_v1_0_c_ifspec : RPC_IF_HANDLE;

external IOleAutomationTypes_v1_0_s_ifspec : RPC_IF_HANDLE;

alias LPCREATETYPEINFO = Pointer[ICreateTypeInfo];

external IID_ICreateTypeInfo : IID;

record Struct_ICreateTypeInfoVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_ICreateTypeInfo],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_ICreateTypeInfo]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_ICreateTypeInfo]),(CULong)],
    SetGuid : CCodePointer[(Pointer[Struct_ICreateTypeInfo],Pointer[Struct__GUID]),(CLong)],
    SetTypeFlags : CCodePointer[(Pointer[Struct_ICreateTypeInfo],UInt),(CLong)],
    SetDocString : CCodePointer[(Pointer[Struct_ICreateTypeInfo],Pointer[UShort]),(CLong)],
    SetHelpContext : CCodePointer[(Pointer[Struct_ICreateTypeInfo],CULong),(CLong)],
    SetVersion : CCodePointer[(Pointer[Struct_ICreateTypeInfo],UShort,UShort),(CLong)],
    AddRefTypeInfo : CCodePointer[(Pointer[Struct_ICreateTypeInfo],Pointer[Struct_ITypeInfo],Pointer[CULong]),(CLong)],
    AddFuncDesc : CCodePointer[(Pointer[Struct_ICreateTypeInfo],UInt,Pointer[Struct_tagFUNCDESC]),(CLong)],
    AddImplType : CCodePointer[(Pointer[Struct_ICreateTypeInfo],UInt,CULong),(CLong)],
    SetImplTypeFlags : CCodePointer[(Pointer[Struct_ICreateTypeInfo],UInt,Int),(CLong)],
    SetAlignment : CCodePointer[(Pointer[Struct_ICreateTypeInfo],UShort),(CLong)],
    SetSchema : CCodePointer[(Pointer[Struct_ICreateTypeInfo],Pointer[UShort]),(CLong)],
    AddVarDesc : CCodePointer[(Pointer[Struct_ICreateTypeInfo],UInt,Pointer[Struct_tagVARDESC]),(CLong)],
    SetFuncAndParamNames : CCodePointer[(Pointer[Struct_ICreateTypeInfo],UInt,Pointer[Pointer[UShort]],UInt),(CLong)],
    SetVarName : CCodePointer[(Pointer[Struct_ICreateTypeInfo],UInt,Pointer[UShort]),(CLong)],
    SetTypeDescAlias : CCodePointer[(Pointer[Struct_ICreateTypeInfo],Pointer[Struct_tagTYPEDESC]),(CLong)],
    DefineFuncAsDllEntry : CCodePointer[(Pointer[Struct_ICreateTypeInfo],UInt,Pointer[UShort],Pointer[UShort]),(CLong)],
    SetFuncDocString : CCodePointer[(Pointer[Struct_ICreateTypeInfo],UInt,Pointer[UShort]),(CLong)],
    SetVarDocString : CCodePointer[(Pointer[Struct_ICreateTypeInfo],UInt,Pointer[UShort]),(CLong)],
    SetFuncHelpContext : CCodePointer[(Pointer[Struct_ICreateTypeInfo],UInt,CULong),(CLong)],
    SetVarHelpContext : CCodePointer[(Pointer[Struct_ICreateTypeInfo],UInt,CULong),(CLong)],
    SetMops : CCodePointer[(Pointer[Struct_ICreateTypeInfo],UInt,Pointer[UShort]),(CLong)],
    SetTypeIdldesc : CCodePointer[(Pointer[Struct_ICreateTypeInfo],Pointer[Struct_tagIDLDESC]),(CLong)],
    LayOut : CCodePointer[(Pointer[Struct_ICreateTypeInfo]),(CLong)],
);

alias ICreateTypeInfoVtbl = Struct_ICreateTypeInfoVtbl;

record Struct_ICreateTypeInfo (
    lpVtbl : Pointer[Struct_ICreateTypeInfoVtbl],
);

external ICreateTypeInfo_SetGuid_Proxy(
    This : Pointer[ICreateTypeInfo],
    guid : Pointer[GUID]) CLong;

external ICreateTypeInfo_SetGuid_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeInfo_SetTypeFlags_Proxy(
    This : Pointer[ICreateTypeInfo],
    uTypeFlags : UInt) CLong;

external ICreateTypeInfo_SetTypeFlags_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeInfo_SetDocString_Proxy(
    This : Pointer[ICreateTypeInfo],
    pStrDoc : LPOLESTR) CLong;

external ICreateTypeInfo_SetDocString_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeInfo_SetHelpContext_Proxy(
    This : Pointer[ICreateTypeInfo],
    dwHelpContext : CULong) CLong;

external ICreateTypeInfo_SetHelpContext_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeInfo_SetVersion_Proxy(
    This : Pointer[ICreateTypeInfo],
    wMajorVerNum : UShort,
    wMinorVerNum : UShort) CLong;

external ICreateTypeInfo_SetVersion_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeInfo_AddRefTypeInfo_Proxy(
    This : Pointer[ICreateTypeInfo],
    pTInfo : Pointer[ITypeInfo],
    phRefType : Pointer[CULong]) CLong;

external ICreateTypeInfo_AddRefTypeInfo_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeInfo_AddFuncDesc_Proxy(
    This : Pointer[ICreateTypeInfo],
    index : UInt,
    pFuncDesc : Pointer[FUNCDESC]) CLong;

external ICreateTypeInfo_AddFuncDesc_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeInfo_AddImplType_Proxy(
    This : Pointer[ICreateTypeInfo],
    index : UInt,
    hRefType : CULong) CLong;

external ICreateTypeInfo_AddImplType_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeInfo_SetImplTypeFlags_Proxy(
    This : Pointer[ICreateTypeInfo],
    index : UInt,
    implTypeFlags : Int) CLong;

external ICreateTypeInfo_SetImplTypeFlags_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeInfo_SetAlignment_Proxy(
    This : Pointer[ICreateTypeInfo],
    cbAlignment : UShort) CLong;

external ICreateTypeInfo_SetAlignment_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeInfo_SetSchema_Proxy(
    This : Pointer[ICreateTypeInfo],
    pStrSchema : LPOLESTR) CLong;

external ICreateTypeInfo_SetSchema_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeInfo_AddVarDesc_Proxy(
    This : Pointer[ICreateTypeInfo],
    index : UInt,
    pVarDesc : Pointer[VARDESC]) CLong;

external ICreateTypeInfo_AddVarDesc_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeInfo_SetFuncAndParamNames_Proxy(
    This : Pointer[ICreateTypeInfo],
    index : UInt,
    rgszNames : Pointer[LPOLESTR],
    cNames : UInt) CLong;

external ICreateTypeInfo_SetFuncAndParamNames_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeInfo_SetVarName_Proxy(
    This : Pointer[ICreateTypeInfo],
    index : UInt,
    szName : LPOLESTR) CLong;

external ICreateTypeInfo_SetVarName_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeInfo_SetTypeDescAlias_Proxy(
    This : Pointer[ICreateTypeInfo],
    pTDescAlias : Pointer[TYPEDESC]) CLong;

external ICreateTypeInfo_SetTypeDescAlias_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeInfo_DefineFuncAsDllEntry_Proxy(
    This : Pointer[ICreateTypeInfo],
    index : UInt,
    szDllName : LPOLESTR,
    szProcName : LPOLESTR) CLong;

external ICreateTypeInfo_DefineFuncAsDllEntry_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeInfo_SetFuncDocString_Proxy(
    This : Pointer[ICreateTypeInfo],
    index : UInt,
    szDocString : LPOLESTR) CLong;

external ICreateTypeInfo_SetFuncDocString_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeInfo_SetVarDocString_Proxy(
    This : Pointer[ICreateTypeInfo],
    index : UInt,
    szDocString : LPOLESTR) CLong;

external ICreateTypeInfo_SetVarDocString_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeInfo_SetFuncHelpContext_Proxy(
    This : Pointer[ICreateTypeInfo],
    index : UInt,
    dwHelpContext : CULong) CLong;

external ICreateTypeInfo_SetFuncHelpContext_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeInfo_SetVarHelpContext_Proxy(
    This : Pointer[ICreateTypeInfo],
    index : UInt,
    dwHelpContext : CULong) CLong;

external ICreateTypeInfo_SetVarHelpContext_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeInfo_SetMops_Proxy(
    This : Pointer[ICreateTypeInfo],
    index : UInt,
    bstrMops : BSTR) CLong;

external ICreateTypeInfo_SetMops_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeInfo_SetTypeIdldesc_Proxy(
    This : Pointer[ICreateTypeInfo],
    pIdlDesc : Pointer[IDLDESC]) CLong;

external ICreateTypeInfo_SetTypeIdldesc_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeInfo_LayOut_Proxy(
    This : Pointer[ICreateTypeInfo]) CLong;

external ICreateTypeInfo_LayOut_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPCREATETYPEINFO2 = Pointer[ICreateTypeInfo2];

external IID_ICreateTypeInfo2 : IID;

record Struct_ICreateTypeInfo2Vtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_ICreateTypeInfo2],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_ICreateTypeInfo2]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_ICreateTypeInfo2]),(CULong)],
    SetGuid : CCodePointer[(Pointer[Struct_ICreateTypeInfo2],Pointer[Struct__GUID]),(CLong)],
    SetTypeFlags : CCodePointer[(Pointer[Struct_ICreateTypeInfo2],UInt),(CLong)],
    SetDocString : CCodePointer[(Pointer[Struct_ICreateTypeInfo2],Pointer[UShort]),(CLong)],
    SetHelpContext : CCodePointer[(Pointer[Struct_ICreateTypeInfo2],CULong),(CLong)],
    SetVersion : CCodePointer[(Pointer[Struct_ICreateTypeInfo2],UShort,UShort),(CLong)],
    AddRefTypeInfo : CCodePointer[(Pointer[Struct_ICreateTypeInfo2],Pointer[Struct_ITypeInfo],Pointer[CULong]),(CLong)],
    AddFuncDesc : CCodePointer[(Pointer[Struct_ICreateTypeInfo2],UInt,Pointer[Struct_tagFUNCDESC]),(CLong)],
    AddImplType : CCodePointer[(Pointer[Struct_ICreateTypeInfo2],UInt,CULong),(CLong)],
    SetImplTypeFlags : CCodePointer[(Pointer[Struct_ICreateTypeInfo2],UInt,Int),(CLong)],
    SetAlignment : CCodePointer[(Pointer[Struct_ICreateTypeInfo2],UShort),(CLong)],
    SetSchema : CCodePointer[(Pointer[Struct_ICreateTypeInfo2],Pointer[UShort]),(CLong)],
    AddVarDesc : CCodePointer[(Pointer[Struct_ICreateTypeInfo2],UInt,Pointer[Struct_tagVARDESC]),(CLong)],
    SetFuncAndParamNames : CCodePointer[(Pointer[Struct_ICreateTypeInfo2],UInt,Pointer[Pointer[UShort]],UInt),(CLong)],
    SetVarName : CCodePointer[(Pointer[Struct_ICreateTypeInfo2],UInt,Pointer[UShort]),(CLong)],
    SetTypeDescAlias : CCodePointer[(Pointer[Struct_ICreateTypeInfo2],Pointer[Struct_tagTYPEDESC]),(CLong)],
    DefineFuncAsDllEntry : CCodePointer[(Pointer[Struct_ICreateTypeInfo2],UInt,Pointer[UShort],Pointer[UShort]),(CLong)],
    SetFuncDocString : CCodePointer[(Pointer[Struct_ICreateTypeInfo2],UInt,Pointer[UShort]),(CLong)],
    SetVarDocString : CCodePointer[(Pointer[Struct_ICreateTypeInfo2],UInt,Pointer[UShort]),(CLong)],
    SetFuncHelpContext : CCodePointer[(Pointer[Struct_ICreateTypeInfo2],UInt,CULong),(CLong)],
    SetVarHelpContext : CCodePointer[(Pointer[Struct_ICreateTypeInfo2],UInt,CULong),(CLong)],
    SetMops : CCodePointer[(Pointer[Struct_ICreateTypeInfo2],UInt,Pointer[UShort]),(CLong)],
    SetTypeIdldesc : CCodePointer[(Pointer[Struct_ICreateTypeInfo2],Pointer[Struct_tagIDLDESC]),(CLong)],
    LayOut : CCodePointer[(Pointer[Struct_ICreateTypeInfo2]),(CLong)],
    DeleteFuncDesc : CCodePointer[(Pointer[Struct_ICreateTypeInfo2],UInt),(CLong)],
    DeleteFuncDescByMemId : CCodePointer[(Pointer[Struct_ICreateTypeInfo2],CLong,Int),(CLong)],
    DeleteVarDesc : CCodePointer[(Pointer[Struct_ICreateTypeInfo2],UInt),(CLong)],
    DeleteVarDescByMemId : CCodePointer[(Pointer[Struct_ICreateTypeInfo2],CLong),(CLong)],
    DeleteImplType : CCodePointer[(Pointer[Struct_ICreateTypeInfo2],UInt),(CLong)],
    SetCustData : CCodePointer[(Pointer[Struct_ICreateTypeInfo2],Pointer[Struct__GUID],Pointer[Struct_tagVARIANT]),(CLong)],
    SetFuncCustData : CCodePointer[(Pointer[Struct_ICreateTypeInfo2],UInt,Pointer[Struct__GUID],Pointer[Struct_tagVARIANT]),(CLong)],
    SetParamCustData : CCodePointer[(Pointer[Struct_ICreateTypeInfo2],UInt,UInt,Pointer[Struct__GUID],Pointer[Struct_tagVARIANT]),(CLong)],
    SetVarCustData : CCodePointer[(Pointer[Struct_ICreateTypeInfo2],UInt,Pointer[Struct__GUID],Pointer[Struct_tagVARIANT]),(CLong)],
    SetImplTypeCustData : CCodePointer[(Pointer[Struct_ICreateTypeInfo2],UInt,Pointer[Struct__GUID],Pointer[Struct_tagVARIANT]),(CLong)],
    SetHelpStringContext : CCodePointer[(Pointer[Struct_ICreateTypeInfo2],CULong),(CLong)],
    SetFuncHelpStringContext : CCodePointer[(Pointer[Struct_ICreateTypeInfo2],UInt,CULong),(CLong)],
    SetVarHelpStringContext : CCodePointer[(Pointer[Struct_ICreateTypeInfo2],UInt,CULong),(CLong)],
    Invalidate : CCodePointer[(Pointer[Struct_ICreateTypeInfo2]),(CLong)],
    SetName : CCodePointer[(Pointer[Struct_ICreateTypeInfo2],Pointer[UShort]),(CLong)],
);

alias ICreateTypeInfo2Vtbl = Struct_ICreateTypeInfo2Vtbl;

record Struct_ICreateTypeInfo2 (
    lpVtbl : Pointer[Struct_ICreateTypeInfo2Vtbl],
);

external ICreateTypeInfo2_DeleteFuncDesc_Proxy(
    This : Pointer[ICreateTypeInfo2],
    index : UInt) CLong;

external ICreateTypeInfo2_DeleteFuncDesc_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeInfo2_DeleteFuncDescByMemId_Proxy(
    This : Pointer[ICreateTypeInfo2],
    memid : CLong,
    invKind : INVOKEKIND) CLong;

external ICreateTypeInfo2_DeleteFuncDescByMemId_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeInfo2_DeleteVarDesc_Proxy(
    This : Pointer[ICreateTypeInfo2],
    index : UInt) CLong;

external ICreateTypeInfo2_DeleteVarDesc_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeInfo2_DeleteVarDescByMemId_Proxy(
    This : Pointer[ICreateTypeInfo2],
    memid : CLong) CLong;

external ICreateTypeInfo2_DeleteVarDescByMemId_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeInfo2_DeleteImplType_Proxy(
    This : Pointer[ICreateTypeInfo2],
    index : UInt) CLong;

external ICreateTypeInfo2_DeleteImplType_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeInfo2_SetCustData_Proxy(
    This : Pointer[ICreateTypeInfo2],
    guid : Pointer[GUID],
    pVarVal : Pointer[VARIANT]) CLong;

external ICreateTypeInfo2_SetCustData_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeInfo2_SetFuncCustData_Proxy(
    This : Pointer[ICreateTypeInfo2],
    index : UInt,
    guid : Pointer[GUID],
    pVarVal : Pointer[VARIANT]) CLong;

external ICreateTypeInfo2_SetFuncCustData_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeInfo2_SetParamCustData_Proxy(
    This : Pointer[ICreateTypeInfo2],
    indexFunc : UInt,
    indexParam : UInt,
    guid : Pointer[GUID],
    pVarVal : Pointer[VARIANT]) CLong;

external ICreateTypeInfo2_SetParamCustData_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeInfo2_SetVarCustData_Proxy(
    This : Pointer[ICreateTypeInfo2],
    index : UInt,
    guid : Pointer[GUID],
    pVarVal : Pointer[VARIANT]) CLong;

external ICreateTypeInfo2_SetVarCustData_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeInfo2_SetImplTypeCustData_Proxy(
    This : Pointer[ICreateTypeInfo2],
    index : UInt,
    guid : Pointer[GUID],
    pVarVal : Pointer[VARIANT]) CLong;

external ICreateTypeInfo2_SetImplTypeCustData_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeInfo2_SetHelpStringContext_Proxy(
    This : Pointer[ICreateTypeInfo2],
    dwHelpStringContext : CULong) CLong;

external ICreateTypeInfo2_SetHelpStringContext_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeInfo2_SetFuncHelpStringContext_Proxy(
    This : Pointer[ICreateTypeInfo2],
    index : UInt,
    dwHelpStringContext : CULong) CLong;

external ICreateTypeInfo2_SetFuncHelpStringContext_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeInfo2_SetVarHelpStringContext_Proxy(
    This : Pointer[ICreateTypeInfo2],
    index : UInt,
    dwHelpStringContext : CULong) CLong;

external ICreateTypeInfo2_SetVarHelpStringContext_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeInfo2_Invalidate_Proxy(
    This : Pointer[ICreateTypeInfo2]) CLong;

external ICreateTypeInfo2_Invalidate_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeInfo2_SetName_Proxy(
    This : Pointer[ICreateTypeInfo2],
    szName : LPOLESTR) CLong;

external ICreateTypeInfo2_SetName_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPCREATETYPELIB = Pointer[ICreateTypeLib];

external IID_ICreateTypeLib : IID;

record Struct_ICreateTypeLibVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_ICreateTypeLib],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_ICreateTypeLib]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_ICreateTypeLib]),(CULong)],
    CreateTypeInfo : CCodePointer[(Pointer[Struct_ICreateTypeLib],Pointer[UShort],Int,Pointer[Pointer[Struct_ICreateTypeInfo]]),(CLong)],
    SetName : CCodePointer[(Pointer[Struct_ICreateTypeLib],Pointer[UShort]),(CLong)],
    SetVersion : CCodePointer[(Pointer[Struct_ICreateTypeLib],UShort,UShort),(CLong)],
    SetGuid : CCodePointer[(Pointer[Struct_ICreateTypeLib],Pointer[Struct__GUID]),(CLong)],
    SetDocString : CCodePointer[(Pointer[Struct_ICreateTypeLib],Pointer[UShort]),(CLong)],
    SetHelpFileName : CCodePointer[(Pointer[Struct_ICreateTypeLib],Pointer[UShort]),(CLong)],
    SetHelpContext : CCodePointer[(Pointer[Struct_ICreateTypeLib],CULong),(CLong)],
    SetLcid : CCodePointer[(Pointer[Struct_ICreateTypeLib],CULong),(CLong)],
    SetLibFlags : CCodePointer[(Pointer[Struct_ICreateTypeLib],UInt),(CLong)],
    SaveAllChanges : CCodePointer[(Pointer[Struct_ICreateTypeLib]),(CLong)],
);

alias ICreateTypeLibVtbl = Struct_ICreateTypeLibVtbl;

record Struct_ICreateTypeLib (
    lpVtbl : Pointer[Struct_ICreateTypeLibVtbl],
);

external ICreateTypeLib_CreateTypeInfo_Proxy(
    This : Pointer[ICreateTypeLib],
    szName : LPOLESTR,
    tkind : TYPEKIND,
    ppCTInfo : Pointer[Pointer[ICreateTypeInfo]]) CLong;

external ICreateTypeLib_CreateTypeInfo_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeLib_SetName_Proxy(
    This : Pointer[ICreateTypeLib],
    szName : LPOLESTR) CLong;

external ICreateTypeLib_SetName_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeLib_SetVersion_Proxy(
    This : Pointer[ICreateTypeLib],
    wMajorVerNum : UShort,
    wMinorVerNum : UShort) CLong;

external ICreateTypeLib_SetVersion_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeLib_SetGuid_Proxy(
    This : Pointer[ICreateTypeLib],
    guid : Pointer[GUID]) CLong;

external ICreateTypeLib_SetGuid_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeLib_SetDocString_Proxy(
    This : Pointer[ICreateTypeLib],
    szDoc : LPOLESTR) CLong;

external ICreateTypeLib_SetDocString_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeLib_SetHelpFileName_Proxy(
    This : Pointer[ICreateTypeLib],
    szHelpFileName : LPOLESTR) CLong;

external ICreateTypeLib_SetHelpFileName_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeLib_SetHelpContext_Proxy(
    This : Pointer[ICreateTypeLib],
    dwHelpContext : CULong) CLong;

external ICreateTypeLib_SetHelpContext_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeLib_SetLcid_Proxy(
    This : Pointer[ICreateTypeLib],
    lcid : CULong) CLong;

external ICreateTypeLib_SetLcid_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeLib_SetLibFlags_Proxy(
    This : Pointer[ICreateTypeLib],
    uLibFlags : UInt) CLong;

external ICreateTypeLib_SetLibFlags_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeLib_SaveAllChanges_Proxy(
    This : Pointer[ICreateTypeLib]) CLong;

external ICreateTypeLib_SaveAllChanges_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPCREATETYPELIB2 = Pointer[ICreateTypeLib2];

external IID_ICreateTypeLib2 : IID;

record Struct_ICreateTypeLib2Vtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_ICreateTypeLib2],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_ICreateTypeLib2]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_ICreateTypeLib2]),(CULong)],
    CreateTypeInfo : CCodePointer[(Pointer[Struct_ICreateTypeLib2],Pointer[UShort],Int,Pointer[Pointer[Struct_ICreateTypeInfo]]),(CLong)],
    SetName : CCodePointer[(Pointer[Struct_ICreateTypeLib2],Pointer[UShort]),(CLong)],
    SetVersion : CCodePointer[(Pointer[Struct_ICreateTypeLib2],UShort,UShort),(CLong)],
    SetGuid : CCodePointer[(Pointer[Struct_ICreateTypeLib2],Pointer[Struct__GUID]),(CLong)],
    SetDocString : CCodePointer[(Pointer[Struct_ICreateTypeLib2],Pointer[UShort]),(CLong)],
    SetHelpFileName : CCodePointer[(Pointer[Struct_ICreateTypeLib2],Pointer[UShort]),(CLong)],
    SetHelpContext : CCodePointer[(Pointer[Struct_ICreateTypeLib2],CULong),(CLong)],
    SetLcid : CCodePointer[(Pointer[Struct_ICreateTypeLib2],CULong),(CLong)],
    SetLibFlags : CCodePointer[(Pointer[Struct_ICreateTypeLib2],UInt),(CLong)],
    SaveAllChanges : CCodePointer[(Pointer[Struct_ICreateTypeLib2]),(CLong)],
    DeleteTypeInfo : CCodePointer[(Pointer[Struct_ICreateTypeLib2],Pointer[UShort]),(CLong)],
    SetCustData : CCodePointer[(Pointer[Struct_ICreateTypeLib2],Pointer[Struct__GUID],Pointer[Struct_tagVARIANT]),(CLong)],
    SetHelpStringContext : CCodePointer[(Pointer[Struct_ICreateTypeLib2],CULong),(CLong)],
    SetHelpStringDll : CCodePointer[(Pointer[Struct_ICreateTypeLib2],Pointer[UShort]),(CLong)],
);

alias ICreateTypeLib2Vtbl = Struct_ICreateTypeLib2Vtbl;

record Struct_ICreateTypeLib2 (
    lpVtbl : Pointer[Struct_ICreateTypeLib2Vtbl],
);

external ICreateTypeLib2_DeleteTypeInfo_Proxy(
    This : Pointer[ICreateTypeLib2],
    szName : LPOLESTR) CLong;

external ICreateTypeLib2_DeleteTypeInfo_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeLib2_SetCustData_Proxy(
    This : Pointer[ICreateTypeLib2],
    guid : Pointer[GUID],
    pVarVal : Pointer[VARIANT]) CLong;

external ICreateTypeLib2_SetCustData_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeLib2_SetHelpStringContext_Proxy(
    This : Pointer[ICreateTypeLib2],
    dwHelpStringContext : CULong) CLong;

external ICreateTypeLib2_SetHelpStringContext_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateTypeLib2_SetHelpStringDll_Proxy(
    This : Pointer[ICreateTypeLib2],
    szFileName : LPOLESTR) CLong;

external ICreateTypeLib2_SetHelpStringDll_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPDISPATCH = Pointer[IDispatch];

external IID_IDispatch : IID;

record Struct_IDispatchVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IDispatch],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IDispatch]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IDispatch]),(CULong)],
    GetTypeInfoCount : CCodePointer[(Pointer[Struct_IDispatch],Pointer[UInt]),(CLong)],
    GetTypeInfo : CCodePointer[(Pointer[Struct_IDispatch],UInt,CULong,Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetIDsOfNames : CCodePointer[(Pointer[Struct_IDispatch],Pointer[Struct__GUID],Pointer[Pointer[UShort]],UInt,CULong,Pointer[CLong]),(CLong)],
    Invoke : CCodePointer[(Pointer[Struct_IDispatch],CLong,Pointer[Struct__GUID],CULong,UShort,Pointer[Struct_tagDISPPARAMS],Pointer[Struct_tagVARIANT],Pointer[Struct_tagEXCEPINFO],Pointer[UInt]),(CLong)],
);

alias IDispatchVtbl = Struct_IDispatchVtbl;

record Struct_IDispatch (
    lpVtbl : Pointer[Struct_IDispatchVtbl],
);

external IDispatch_GetTypeInfoCount_Proxy(
    This : Pointer[IDispatch],
    pctinfo : Pointer[UInt]) CLong;

external IDispatch_GetTypeInfoCount_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IDispatch_GetTypeInfo_Proxy(
    This : Pointer[IDispatch],
    iTInfo : UInt,
    lcid : CULong,
    ppTInfo : Pointer[Pointer[ITypeInfo]]) CLong;

external IDispatch_GetTypeInfo_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IDispatch_GetIDsOfNames_Proxy(
    This : Pointer[IDispatch],
    riid : Pointer[IID],
    rgszNames : Pointer[LPOLESTR],
    cNames : UInt,
    lcid : CULong,
    rgDispId : Pointer[CLong]) CLong;

external IDispatch_GetIDsOfNames_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IDispatch_RemoteInvoke_Proxy(
    This : Pointer[IDispatch],
    dispIdMember : CLong,
    riid : Pointer[IID],
    lcid : CULong,
    dwFlags : CULong,
    pDispParams : Pointer[DISPPARAMS],
    pVarResult : Pointer[VARIANT],
    pExcepInfo : Pointer[EXCEPINFO],
    pArgErr : Pointer[UInt],
    cVarRef : UInt,
    rgVarRefIdx : Pointer[UInt],
    rgVarRef : Pointer[VARIANTARG]) CLong;

external IDispatch_RemoteInvoke_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPENUMVARIANT = Pointer[IEnumVARIANT];

external IID_IEnumVARIANT : IID;

record Struct_IEnumVARIANTVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IEnumVARIANT],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IEnumVARIANT]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IEnumVARIANT]),(CULong)],
    Next : CCodePointer[(Pointer[Struct_IEnumVARIANT],CULong,Pointer[Struct_tagVARIANT],Pointer[CULong]),(CLong)],
    Skip : CCodePointer[(Pointer[Struct_IEnumVARIANT],CULong),(CLong)],
    Reset : CCodePointer[(Pointer[Struct_IEnumVARIANT]),(CLong)],
    Clone : CCodePointer[(Pointer[Struct_IEnumVARIANT],Pointer[Pointer[Struct_IEnumVARIANT]]),(CLong)],
);

alias IEnumVARIANTVtbl = Struct_IEnumVARIANTVtbl;

record Struct_IEnumVARIANT (
    lpVtbl : Pointer[Struct_IEnumVARIANTVtbl],
);

external IEnumVARIANT_RemoteNext_Proxy(
    This : Pointer[IEnumVARIANT],
    celt : CULong,
    rgVar : Pointer[VARIANT],
    pCeltFetched : Pointer[CULong]) CLong;

external IEnumVARIANT_RemoteNext_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IEnumVARIANT_Skip_Proxy(
    This : Pointer[IEnumVARIANT],
    celt : CULong) CLong;

external IEnumVARIANT_Skip_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IEnumVARIANT_Reset_Proxy(
    This : Pointer[IEnumVARIANT]) CLong;

external IEnumVARIANT_Reset_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IEnumVARIANT_Clone_Proxy(
    This : Pointer[IEnumVARIANT],
    ppEnum : Pointer[Pointer[IEnumVARIANT]]) CLong;

external IEnumVARIANT_Clone_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPTYPECOMP = Pointer[ITypeComp];

alias DESCKIND_NONE = 0;
alias DESCKIND_FUNCDESC = 1;
alias DESCKIND_VARDESC = 2;
alias DESCKIND_TYPECOMP = 3;
alias DESCKIND_IMPLICITAPPOBJ = 4;
alias DESCKIND_MAX = 5;

alias DESCKIND = Int;

alias BINDPTR = AUnionType;

alias LPBINDPTR = OpaquePointer;

external IID_ITypeComp : IID;

record Struct_ITypeCompVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_ITypeComp],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_ITypeComp]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_ITypeComp]),(CULong)],
    Bind : CCodePointer[(Pointer[Struct_ITypeComp],Pointer[UShort],CULong,UShort,Pointer[Pointer[Struct_ITypeInfo]],Pointer[Int],OpaquePointer),(CLong)],
    BindType : CCodePointer[(Pointer[Struct_ITypeComp],Pointer[UShort],CULong,Pointer[Pointer[Struct_ITypeInfo]],Pointer[Pointer[Struct_ITypeComp]]),(CLong)],
);

alias ITypeCompVtbl = Struct_ITypeCompVtbl;

record Struct_ITypeComp (
    lpVtbl : Pointer[Struct_ITypeCompVtbl],
);

external ITypeComp_RemoteBind_Proxy(
    This : Pointer[ITypeComp],
    szName : LPOLESTR,
    lHashVal : CULong,
    wFlags : UShort,
    ppTInfo : Pointer[Pointer[ITypeInfo]],
    pDescKind : Pointer[DESCKIND],
    ppFuncDesc : Pointer[LPFUNCDESC],
    ppVarDesc : Pointer[LPVARDESC],
    ppTypeComp : Pointer[Pointer[ITypeComp]],
    pDummy : Pointer[CLEANLOCALSTORAGE]) CLong;

external ITypeComp_RemoteBind_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeComp_RemoteBindType_Proxy(
    This : Pointer[ITypeComp],
    szName : LPOLESTR,
    lHashVal : CULong,
    ppTInfo : Pointer[Pointer[ITypeInfo]]) CLong;

external ITypeComp_RemoteBindType_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPTYPEINFO = Pointer[ITypeInfo];

external IID_ITypeInfo : IID;

record Struct_ITypeInfoVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_ITypeInfo],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_ITypeInfo]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_ITypeInfo]),(CULong)],
    GetTypeAttr : CCodePointer[(Pointer[Struct_ITypeInfo],Pointer[Pointer[Struct_tagTYPEATTR]]),(CLong)],
    GetTypeComp : CCodePointer[(Pointer[Struct_ITypeInfo],Pointer[Pointer[Struct_ITypeComp]]),(CLong)],
    GetFuncDesc : CCodePointer[(Pointer[Struct_ITypeInfo],UInt,Pointer[Pointer[Struct_tagFUNCDESC]]),(CLong)],
    GetVarDesc : CCodePointer[(Pointer[Struct_ITypeInfo],UInt,Pointer[Pointer[Struct_tagVARDESC]]),(CLong)],
    GetNames : CCodePointer[(Pointer[Struct_ITypeInfo],CLong,Pointer[Pointer[UShort]],UInt,Pointer[UInt]),(CLong)],
    GetRefTypeOfImplType : CCodePointer[(Pointer[Struct_ITypeInfo],UInt,Pointer[CULong]),(CLong)],
    GetImplTypeFlags : CCodePointer[(Pointer[Struct_ITypeInfo],UInt,Pointer[Int]),(CLong)],
    GetIDsOfNames : CCodePointer[(Pointer[Struct_ITypeInfo],Pointer[Pointer[UShort]],UInt,Pointer[CLong]),(CLong)],
    Invoke : CCodePointer[(Pointer[Struct_ITypeInfo],RawPointer,CLong,UShort,Pointer[Struct_tagDISPPARAMS],Pointer[Struct_tagVARIANT],Pointer[Struct_tagEXCEPINFO],Pointer[UInt]),(CLong)],
    GetDocumentation : CCodePointer[(Pointer[Struct_ITypeInfo],CLong,Pointer[Pointer[UShort]],Pointer[Pointer[UShort]],Pointer[CULong],Pointer[Pointer[UShort]]),(CLong)],
    GetDllEntry : CCodePointer[(Pointer[Struct_ITypeInfo],CLong,Int,Pointer[Pointer[UShort]],Pointer[Pointer[UShort]],Pointer[UShort]),(CLong)],
    GetRefTypeInfo : CCodePointer[(Pointer[Struct_ITypeInfo],CULong,Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    AddressOfMember : CCodePointer[(Pointer[Struct_ITypeInfo],CLong,Int,Pointer[RawPointer]),(CLong)],
    CreateInstance : CCodePointer[(Pointer[Struct_ITypeInfo],Pointer[Struct_IUnknown],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    GetMops : CCodePointer[(Pointer[Struct_ITypeInfo],CLong,Pointer[Pointer[UShort]]),(CLong)],
    GetContainingTypeLib : CCodePointer[(Pointer[Struct_ITypeInfo],Pointer[Pointer[Struct_ITypeLib]],Pointer[UInt]),(CLong)],
    ReleaseTypeAttr : CCodePointer[(Pointer[Struct_ITypeInfo],Pointer[Struct_tagTYPEATTR]),()],
    ReleaseFuncDesc : CCodePointer[(Pointer[Struct_ITypeInfo],Pointer[Struct_tagFUNCDESC]),()],
    ReleaseVarDesc : CCodePointer[(Pointer[Struct_ITypeInfo],Pointer[Struct_tagVARDESC]),()],
);

alias ITypeInfoVtbl = Struct_ITypeInfoVtbl;

record Struct_ITypeInfo (
    lpVtbl : Pointer[Struct_ITypeInfoVtbl],
);

external ITypeInfo_RemoteGetTypeAttr_Proxy(
    This : Pointer[ITypeInfo],
    ppTypeAttr : Pointer[LPTYPEATTR],
    pDummy : Pointer[CLEANLOCALSTORAGE]) CLong;

external ITypeInfo_RemoteGetTypeAttr_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeInfo_GetTypeComp_Proxy(
    This : Pointer[ITypeInfo],
    ppTComp : Pointer[Pointer[ITypeComp]]) CLong;

external ITypeInfo_GetTypeComp_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeInfo_RemoteGetFuncDesc_Proxy(
    This : Pointer[ITypeInfo],
    index : UInt,
    ppFuncDesc : Pointer[LPFUNCDESC],
    pDummy : Pointer[CLEANLOCALSTORAGE]) CLong;

external ITypeInfo_RemoteGetFuncDesc_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeInfo_RemoteGetVarDesc_Proxy(
    This : Pointer[ITypeInfo],
    index : UInt,
    ppVarDesc : Pointer[LPVARDESC],
    pDummy : Pointer[CLEANLOCALSTORAGE]) CLong;

external ITypeInfo_RemoteGetVarDesc_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeInfo_RemoteGetNames_Proxy(
    This : Pointer[ITypeInfo],
    memid : CLong,
    rgBstrNames : Pointer[BSTR],
    cMaxNames : UInt,
    pcNames : Pointer[UInt]) CLong;

external ITypeInfo_RemoteGetNames_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeInfo_GetRefTypeOfImplType_Proxy(
    This : Pointer[ITypeInfo],
    index : UInt,
    pRefType : Pointer[CULong]) CLong;

external ITypeInfo_GetRefTypeOfImplType_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeInfo_GetImplTypeFlags_Proxy(
    This : Pointer[ITypeInfo],
    index : UInt,
    pImplTypeFlags : Pointer[Int]) CLong;

external ITypeInfo_GetImplTypeFlags_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeInfo_LocalGetIDsOfNames_Proxy(
    This : Pointer[ITypeInfo]) CLong;

external ITypeInfo_LocalGetIDsOfNames_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeInfo_LocalInvoke_Proxy(
    This : Pointer[ITypeInfo]) CLong;

external ITypeInfo_LocalInvoke_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeInfo_RemoteGetDocumentation_Proxy(
    This : Pointer[ITypeInfo],
    memid : CLong,
    refPtrFlags : CULong,
    pBstrName : Pointer[BSTR],
    pBstrDocString : Pointer[BSTR],
    pdwHelpContext : Pointer[CULong],
    pBstrHelpFile : Pointer[BSTR]) CLong;

external ITypeInfo_RemoteGetDocumentation_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeInfo_RemoteGetDllEntry_Proxy(
    This : Pointer[ITypeInfo],
    memid : CLong,
    invKind : INVOKEKIND,
    refPtrFlags : CULong,
    pBstrDllName : Pointer[BSTR],
    pBstrName : Pointer[BSTR],
    pwOrdinal : Pointer[UShort]) CLong;

external ITypeInfo_RemoteGetDllEntry_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeInfo_GetRefTypeInfo_Proxy(
    This : Pointer[ITypeInfo],
    hRefType : CULong,
    ppTInfo : Pointer[Pointer[ITypeInfo]]) CLong;

external ITypeInfo_GetRefTypeInfo_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeInfo_LocalAddressOfMember_Proxy(
    This : Pointer[ITypeInfo]) CLong;

external ITypeInfo_LocalAddressOfMember_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeInfo_RemoteCreateInstance_Proxy(
    This : Pointer[ITypeInfo],
    riid : Pointer[IID],
    ppvObj : Pointer[Pointer[IUnknown]]) CLong;

external ITypeInfo_RemoteCreateInstance_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeInfo_GetMops_Proxy(
    This : Pointer[ITypeInfo],
    memid : CLong,
    pBstrMops : Pointer[BSTR]) CLong;

external ITypeInfo_GetMops_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeInfo_RemoteGetContainingTypeLib_Proxy(
    This : Pointer[ITypeInfo],
    ppTLib : Pointer[Pointer[ITypeLib]],
    pIndex : Pointer[UInt]) CLong;

external ITypeInfo_RemoteGetContainingTypeLib_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeInfo_LocalReleaseTypeAttr_Proxy(
    This : Pointer[ITypeInfo]) CLong;

external ITypeInfo_LocalReleaseTypeAttr_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeInfo_LocalReleaseFuncDesc_Proxy(
    This : Pointer[ITypeInfo]) CLong;

external ITypeInfo_LocalReleaseFuncDesc_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeInfo_LocalReleaseVarDesc_Proxy(
    This : Pointer[ITypeInfo]) CLong;

external ITypeInfo_LocalReleaseVarDesc_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPTYPEINFO2 = Pointer[ITypeInfo2];

external IID_ITypeInfo2 : IID;

record Struct_ITypeInfo2Vtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_ITypeInfo2],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_ITypeInfo2]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_ITypeInfo2]),(CULong)],
    GetTypeAttr : CCodePointer[(Pointer[Struct_ITypeInfo2],Pointer[Pointer[Struct_tagTYPEATTR]]),(CLong)],
    GetTypeComp : CCodePointer[(Pointer[Struct_ITypeInfo2],Pointer[Pointer[Struct_ITypeComp]]),(CLong)],
    GetFuncDesc : CCodePointer[(Pointer[Struct_ITypeInfo2],UInt,Pointer[Pointer[Struct_tagFUNCDESC]]),(CLong)],
    GetVarDesc : CCodePointer[(Pointer[Struct_ITypeInfo2],UInt,Pointer[Pointer[Struct_tagVARDESC]]),(CLong)],
    GetNames : CCodePointer[(Pointer[Struct_ITypeInfo2],CLong,Pointer[Pointer[UShort]],UInt,Pointer[UInt]),(CLong)],
    GetRefTypeOfImplType : CCodePointer[(Pointer[Struct_ITypeInfo2],UInt,Pointer[CULong]),(CLong)],
    GetImplTypeFlags : CCodePointer[(Pointer[Struct_ITypeInfo2],UInt,Pointer[Int]),(CLong)],
    GetIDsOfNames : CCodePointer[(Pointer[Struct_ITypeInfo2],Pointer[Pointer[UShort]],UInt,Pointer[CLong]),(CLong)],
    Invoke : CCodePointer[(Pointer[Struct_ITypeInfo2],RawPointer,CLong,UShort,Pointer[Struct_tagDISPPARAMS],Pointer[Struct_tagVARIANT],Pointer[Struct_tagEXCEPINFO],Pointer[UInt]),(CLong)],
    GetDocumentation : CCodePointer[(Pointer[Struct_ITypeInfo2],CLong,Pointer[Pointer[UShort]],Pointer[Pointer[UShort]],Pointer[CULong],Pointer[Pointer[UShort]]),(CLong)],
    GetDllEntry : CCodePointer[(Pointer[Struct_ITypeInfo2],CLong,Int,Pointer[Pointer[UShort]],Pointer[Pointer[UShort]],Pointer[UShort]),(CLong)],
    GetRefTypeInfo : CCodePointer[(Pointer[Struct_ITypeInfo2],CULong,Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    AddressOfMember : CCodePointer[(Pointer[Struct_ITypeInfo2],CLong,Int,Pointer[RawPointer]),(CLong)],
    CreateInstance : CCodePointer[(Pointer[Struct_ITypeInfo2],Pointer[Struct_IUnknown],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    GetMops : CCodePointer[(Pointer[Struct_ITypeInfo2],CLong,Pointer[Pointer[UShort]]),(CLong)],
    GetContainingTypeLib : CCodePointer[(Pointer[Struct_ITypeInfo2],Pointer[Pointer[Struct_ITypeLib]],Pointer[UInt]),(CLong)],
    ReleaseTypeAttr : CCodePointer[(Pointer[Struct_ITypeInfo2],Pointer[Struct_tagTYPEATTR]),()],
    ReleaseFuncDesc : CCodePointer[(Pointer[Struct_ITypeInfo2],Pointer[Struct_tagFUNCDESC]),()],
    ReleaseVarDesc : CCodePointer[(Pointer[Struct_ITypeInfo2],Pointer[Struct_tagVARDESC]),()],
    GetTypeKind : CCodePointer[(Pointer[Struct_ITypeInfo2],Pointer[Int]),(CLong)],
    GetTypeFlags : CCodePointer[(Pointer[Struct_ITypeInfo2],Pointer[CULong]),(CLong)],
    GetFuncIndexOfMemId : CCodePointer[(Pointer[Struct_ITypeInfo2],CLong,Int,Pointer[UInt]),(CLong)],
    GetVarIndexOfMemId : CCodePointer[(Pointer[Struct_ITypeInfo2],CLong,Pointer[UInt]),(CLong)],
    GetCustData : CCodePointer[(Pointer[Struct_ITypeInfo2],Pointer[Struct__GUID],Pointer[Struct_tagVARIANT]),(CLong)],
    GetFuncCustData : CCodePointer[(Pointer[Struct_ITypeInfo2],UInt,Pointer[Struct__GUID],Pointer[Struct_tagVARIANT]),(CLong)],
    GetParamCustData : CCodePointer[(Pointer[Struct_ITypeInfo2],UInt,UInt,Pointer[Struct__GUID],Pointer[Struct_tagVARIANT]),(CLong)],
    GetVarCustData : CCodePointer[(Pointer[Struct_ITypeInfo2],UInt,Pointer[Struct__GUID],Pointer[Struct_tagVARIANT]),(CLong)],
    GetImplTypeCustData : CCodePointer[(Pointer[Struct_ITypeInfo2],UInt,Pointer[Struct__GUID],Pointer[Struct_tagVARIANT]),(CLong)],
    GetDocumentation2 : CCodePointer[(Pointer[Struct_ITypeInfo2],CLong,CULong,Pointer[Pointer[UShort]],Pointer[CULong],Pointer[Pointer[UShort]]),(CLong)],
    GetAllCustData : CCodePointer[(Pointer[Struct_ITypeInfo2],Pointer[Struct_tagCUSTDATA]),(CLong)],
    GetAllFuncCustData : CCodePointer[(Pointer[Struct_ITypeInfo2],UInt,Pointer[Struct_tagCUSTDATA]),(CLong)],
    GetAllParamCustData : CCodePointer[(Pointer[Struct_ITypeInfo2],UInt,UInt,Pointer[Struct_tagCUSTDATA]),(CLong)],
    GetAllVarCustData : CCodePointer[(Pointer[Struct_ITypeInfo2],UInt,Pointer[Struct_tagCUSTDATA]),(CLong)],
    GetAllImplTypeCustData : CCodePointer[(Pointer[Struct_ITypeInfo2],UInt,Pointer[Struct_tagCUSTDATA]),(CLong)],
);

alias ITypeInfo2Vtbl = Struct_ITypeInfo2Vtbl;

record Struct_ITypeInfo2 (
    lpVtbl : Pointer[Struct_ITypeInfo2Vtbl],
);

external ITypeInfo2_GetTypeKind_Proxy(
    This : Pointer[ITypeInfo2],
    pTypeKind : Pointer[TYPEKIND]) CLong;

external ITypeInfo2_GetTypeKind_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeInfo2_GetTypeFlags_Proxy(
    This : Pointer[ITypeInfo2],
    pTypeFlags : Pointer[CULong]) CLong;

external ITypeInfo2_GetTypeFlags_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeInfo2_GetFuncIndexOfMemId_Proxy(
    This : Pointer[ITypeInfo2],
    memid : CLong,
    invKind : INVOKEKIND,
    pFuncIndex : Pointer[UInt]) CLong;

external ITypeInfo2_GetFuncIndexOfMemId_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeInfo2_GetVarIndexOfMemId_Proxy(
    This : Pointer[ITypeInfo2],
    memid : CLong,
    pVarIndex : Pointer[UInt]) CLong;

external ITypeInfo2_GetVarIndexOfMemId_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeInfo2_GetCustData_Proxy(
    This : Pointer[ITypeInfo2],
    guid : Pointer[GUID],
    pVarVal : Pointer[VARIANT]) CLong;

external ITypeInfo2_GetCustData_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeInfo2_GetFuncCustData_Proxy(
    This : Pointer[ITypeInfo2],
    index : UInt,
    guid : Pointer[GUID],
    pVarVal : Pointer[VARIANT]) CLong;

external ITypeInfo2_GetFuncCustData_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeInfo2_GetParamCustData_Proxy(
    This : Pointer[ITypeInfo2],
    indexFunc : UInt,
    indexParam : UInt,
    guid : Pointer[GUID],
    pVarVal : Pointer[VARIANT]) CLong;

external ITypeInfo2_GetParamCustData_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeInfo2_GetVarCustData_Proxy(
    This : Pointer[ITypeInfo2],
    index : UInt,
    guid : Pointer[GUID],
    pVarVal : Pointer[VARIANT]) CLong;

external ITypeInfo2_GetVarCustData_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeInfo2_GetImplTypeCustData_Proxy(
    This : Pointer[ITypeInfo2],
    index : UInt,
    guid : Pointer[GUID],
    pVarVal : Pointer[VARIANT]) CLong;

external ITypeInfo2_GetImplTypeCustData_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeInfo2_RemoteGetDocumentation2_Proxy(
    This : Pointer[ITypeInfo2],
    memid : CLong,
    lcid : CULong,
    refPtrFlags : CULong,
    pbstrHelpString : Pointer[BSTR],
    pdwHelpStringContext : Pointer[CULong],
    pbstrHelpStringDll : Pointer[BSTR]) CLong;

external ITypeInfo2_RemoteGetDocumentation2_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeInfo2_GetAllCustData_Proxy(
    This : Pointer[ITypeInfo2],
    pCustData : Pointer[CUSTDATA]) CLong;

external ITypeInfo2_GetAllCustData_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeInfo2_GetAllFuncCustData_Proxy(
    This : Pointer[ITypeInfo2],
    index : UInt,
    pCustData : Pointer[CUSTDATA]) CLong;

external ITypeInfo2_GetAllFuncCustData_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeInfo2_GetAllParamCustData_Proxy(
    This : Pointer[ITypeInfo2],
    indexFunc : UInt,
    indexParam : UInt,
    pCustData : Pointer[CUSTDATA]) CLong;

external ITypeInfo2_GetAllParamCustData_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeInfo2_GetAllVarCustData_Proxy(
    This : Pointer[ITypeInfo2],
    index : UInt,
    pCustData : Pointer[CUSTDATA]) CLong;

external ITypeInfo2_GetAllVarCustData_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeInfo2_GetAllImplTypeCustData_Proxy(
    This : Pointer[ITypeInfo2],
    index : UInt,
    pCustData : Pointer[CUSTDATA]) CLong;

external ITypeInfo2_GetAllImplTypeCustData_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias SYS_WIN16 = 0;
alias SYS_WIN32 = 1;
alias SYS_MAC = 2;
alias SYS_WIN64 = 3;

alias SYSKIND = Int;

alias LIBFLAG_FRESTRICTED = 1;
alias LIBFLAG_FCONTROL = 2;
alias LIBFLAG_FHIDDEN = 4;
alias LIBFLAG_FHASDISKIMAGE = 8;

alias LIBFLAGS = Int;

alias LPTYPELIB = Pointer[ITypeLib];

record Struct_tagTLIBATTR (
    guid : GUID,
    lcid : CULong,
    syskind : SYSKIND,
    wMajorVerNum : UShort,
    wMinorVerNum : UShort,
    wLibFlags : UShort,
);

alias TLIBATTR = Struct_tagTLIBATTR;

alias LPTLIBATTR = Pointer[Struct_tagTLIBATTR];

external IID_ITypeLib : IID;

record Struct_ITypeLibVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_ITypeLib],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_ITypeLib]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_ITypeLib]),(CULong)],
    GetTypeInfoCount : CCodePointer[(Pointer[Struct_ITypeLib]),(UInt)],
    GetTypeInfo : CCodePointer[(Pointer[Struct_ITypeLib],UInt,Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetTypeInfoType : CCodePointer[(Pointer[Struct_ITypeLib],UInt,Pointer[Int]),(CLong)],
    GetTypeInfoOfGuid : CCodePointer[(Pointer[Struct_ITypeLib],Pointer[Struct__GUID],Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetLibAttr : CCodePointer[(Pointer[Struct_ITypeLib],Pointer[Pointer[Struct_tagTLIBATTR]]),(CLong)],
    GetTypeComp : CCodePointer[(Pointer[Struct_ITypeLib],Pointer[Pointer[Struct_ITypeComp]]),(CLong)],
    GetDocumentation : CCodePointer[(Pointer[Struct_ITypeLib],Int,Pointer[Pointer[UShort]],Pointer[Pointer[UShort]],Pointer[CULong],Pointer[Pointer[UShort]]),(CLong)],
    IsName : CCodePointer[(Pointer[Struct_ITypeLib],Pointer[UShort],CULong,Pointer[Int]),(CLong)],
    FindName : CCodePointer[(Pointer[Struct_ITypeLib],Pointer[UShort],CULong,Pointer[Pointer[Struct_ITypeInfo]],Pointer[CLong],Pointer[UShort]),(CLong)],
    ReleaseTLibAttr : CCodePointer[(Pointer[Struct_ITypeLib],Pointer[Struct_tagTLIBATTR]),()],
);

alias ITypeLibVtbl = Struct_ITypeLibVtbl;

record Struct_ITypeLib (
    lpVtbl : Pointer[Struct_ITypeLibVtbl],
);

external ITypeLib_RemoteGetTypeInfoCount_Proxy(
    This : Pointer[ITypeLib],
    pcTInfo : Pointer[UInt]) CLong;

external ITypeLib_RemoteGetTypeInfoCount_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeLib_GetTypeInfo_Proxy(
    This : Pointer[ITypeLib],
    index : UInt,
    ppTInfo : Pointer[Pointer[ITypeInfo]]) CLong;

external ITypeLib_GetTypeInfo_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeLib_GetTypeInfoType_Proxy(
    This : Pointer[ITypeLib],
    index : UInt,
    pTKind : Pointer[TYPEKIND]) CLong;

external ITypeLib_GetTypeInfoType_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeLib_GetTypeInfoOfGuid_Proxy(
    This : Pointer[ITypeLib],
    guid : Pointer[GUID],
    ppTinfo : Pointer[Pointer[ITypeInfo]]) CLong;

external ITypeLib_GetTypeInfoOfGuid_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeLib_RemoteGetLibAttr_Proxy(
    This : Pointer[ITypeLib],
    ppTLibAttr : Pointer[LPTLIBATTR],
    pDummy : Pointer[CLEANLOCALSTORAGE]) CLong;

external ITypeLib_RemoteGetLibAttr_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeLib_GetTypeComp_Proxy(
    This : Pointer[ITypeLib],
    ppTComp : Pointer[Pointer[ITypeComp]]) CLong;

external ITypeLib_GetTypeComp_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeLib_RemoteGetDocumentation_Proxy(
    This : Pointer[ITypeLib],
    index : Int,
    refPtrFlags : CULong,
    pBstrName : Pointer[BSTR],
    pBstrDocString : Pointer[BSTR],
    pdwHelpContext : Pointer[CULong],
    pBstrHelpFile : Pointer[BSTR]) CLong;

external ITypeLib_RemoteGetDocumentation_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeLib_RemoteIsName_Proxy(
    This : Pointer[ITypeLib],
    szNameBuf : LPOLESTR,
    lHashVal : CULong,
    pfName : Pointer[Int],
    pBstrLibName : Pointer[BSTR]) CLong;

external ITypeLib_RemoteIsName_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeLib_RemoteFindName_Proxy(
    This : Pointer[ITypeLib],
    szNameBuf : LPOLESTR,
    lHashVal : CULong,
    ppTInfo : Pointer[Pointer[ITypeInfo]],
    rgMemId : Pointer[CLong],
    pcFound : Pointer[UShort],
    pBstrLibName : Pointer[BSTR]) CLong;

external ITypeLib_RemoteFindName_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeLib_LocalReleaseTLibAttr_Proxy(
    This : Pointer[ITypeLib]) CLong;

external ITypeLib_LocalReleaseTLibAttr_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPTYPELIB2 = Pointer[ITypeLib2];

external IID_ITypeLib2 : IID;

record Struct_ITypeLib2Vtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_ITypeLib2],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_ITypeLib2]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_ITypeLib2]),(CULong)],
    GetTypeInfoCount : CCodePointer[(Pointer[Struct_ITypeLib2]),(UInt)],
    GetTypeInfo : CCodePointer[(Pointer[Struct_ITypeLib2],UInt,Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetTypeInfoType : CCodePointer[(Pointer[Struct_ITypeLib2],UInt,Pointer[Int]),(CLong)],
    GetTypeInfoOfGuid : CCodePointer[(Pointer[Struct_ITypeLib2],Pointer[Struct__GUID],Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetLibAttr : CCodePointer[(Pointer[Struct_ITypeLib2],Pointer[Pointer[Struct_tagTLIBATTR]]),(CLong)],
    GetTypeComp : CCodePointer[(Pointer[Struct_ITypeLib2],Pointer[Pointer[Struct_ITypeComp]]),(CLong)],
    GetDocumentation : CCodePointer[(Pointer[Struct_ITypeLib2],Int,Pointer[Pointer[UShort]],Pointer[Pointer[UShort]],Pointer[CULong],Pointer[Pointer[UShort]]),(CLong)],
    IsName : CCodePointer[(Pointer[Struct_ITypeLib2],Pointer[UShort],CULong,Pointer[Int]),(CLong)],
    FindName : CCodePointer[(Pointer[Struct_ITypeLib2],Pointer[UShort],CULong,Pointer[Pointer[Struct_ITypeInfo]],Pointer[CLong],Pointer[UShort]),(CLong)],
    ReleaseTLibAttr : CCodePointer[(Pointer[Struct_ITypeLib2],Pointer[Struct_tagTLIBATTR]),()],
    GetCustData : CCodePointer[(Pointer[Struct_ITypeLib2],Pointer[Struct__GUID],Pointer[Struct_tagVARIANT]),(CLong)],
    GetLibStatistics : CCodePointer[(Pointer[Struct_ITypeLib2],Pointer[CULong],Pointer[CULong]),(CLong)],
    GetDocumentation2 : CCodePointer[(Pointer[Struct_ITypeLib2],Int,CULong,Pointer[Pointer[UShort]],Pointer[CULong],Pointer[Pointer[UShort]]),(CLong)],
    GetAllCustData : CCodePointer[(Pointer[Struct_ITypeLib2],Pointer[Struct_tagCUSTDATA]),(CLong)],
);

alias ITypeLib2Vtbl = Struct_ITypeLib2Vtbl;

record Struct_ITypeLib2 (
    lpVtbl : Pointer[Struct_ITypeLib2Vtbl],
);

external ITypeLib2_GetCustData_Proxy(
    This : Pointer[ITypeLib2],
    guid : Pointer[GUID],
    pVarVal : Pointer[VARIANT]) CLong;

external ITypeLib2_GetCustData_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeLib2_RemoteGetLibStatistics_Proxy(
    This : Pointer[ITypeLib2],
    pcUniqueNames : Pointer[CULong],
    pcchUniqueNames : Pointer[CULong]) CLong;

external ITypeLib2_RemoteGetLibStatistics_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeLib2_RemoteGetDocumentation2_Proxy(
    This : Pointer[ITypeLib2],
    index : Int,
    lcid : CULong,
    refPtrFlags : CULong,
    pbstrHelpString : Pointer[BSTR],
    pdwHelpStringContext : Pointer[CULong],
    pbstrHelpStringDll : Pointer[BSTR]) CLong;

external ITypeLib2_RemoteGetDocumentation2_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeLib2_GetAllCustData_Proxy(
    This : Pointer[ITypeLib2],
    pCustData : Pointer[CUSTDATA]) CLong;

external ITypeLib2_GetAllCustData_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPTYPECHANGEEVENTS = Pointer[ITypeChangeEvents];

alias CHANGEKIND_ADDMEMBER = 0;
alias CHANGEKIND_DELETEMEMBER = 1;
alias CHANGEKIND_SETNAMES = 2;
alias CHANGEKIND_SETDOCUMENTATION = 3;
alias CHANGEKIND_GENERAL = 4;
alias CHANGEKIND_INVALIDATE = 5;
alias CHANGEKIND_CHANGEFAILED = 6;
alias CHANGEKIND_MAX = 7;

alias CHANGEKIND = Int;

external IID_ITypeChangeEvents : IID;

record Struct_ITypeChangeEventsVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_ITypeChangeEvents],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_ITypeChangeEvents]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_ITypeChangeEvents]),(CULong)],
    RequestTypeChange : CCodePointer[(Pointer[Struct_ITypeChangeEvents],Int,Pointer[Struct_ITypeInfo],Pointer[UShort],Pointer[Int]),(CLong)],
    AfterTypeChange : CCodePointer[(Pointer[Struct_ITypeChangeEvents],Int,Pointer[Struct_ITypeInfo],Pointer[UShort]),(CLong)],
);

alias ITypeChangeEventsVtbl = Struct_ITypeChangeEventsVtbl;

record Struct_ITypeChangeEvents (
    lpVtbl : Pointer[Struct_ITypeChangeEventsVtbl],
);

external ITypeChangeEvents_RequestTypeChange_Proxy(
    This : Pointer[ITypeChangeEvents],
    changeKind : CHANGEKIND,
    pTInfoBefore : Pointer[ITypeInfo],
    pStrName : LPOLESTR,
    pfCancel : Pointer[Int]) CLong;

external ITypeChangeEvents_RequestTypeChange_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeChangeEvents_AfterTypeChange_Proxy(
    This : Pointer[ITypeChangeEvents],
    changeKind : CHANGEKIND,
    pTInfoAfter : Pointer[ITypeInfo],
    pStrName : LPOLESTR) CLong;

external ITypeChangeEvents_AfterTypeChange_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPERRORINFO = Pointer[IErrorInfo];

external IID_IErrorInfo : IID;

record Struct_IErrorInfoVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IErrorInfo],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IErrorInfo]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IErrorInfo]),(CULong)],
    GetGUID : CCodePointer[(Pointer[Struct_IErrorInfo],Pointer[Struct__GUID]),(CLong)],
    GetSource : CCodePointer[(Pointer[Struct_IErrorInfo],Pointer[Pointer[UShort]]),(CLong)],
    GetDescription : CCodePointer[(Pointer[Struct_IErrorInfo],Pointer[Pointer[UShort]]),(CLong)],
    GetHelpFile : CCodePointer[(Pointer[Struct_IErrorInfo],Pointer[Pointer[UShort]]),(CLong)],
    GetHelpContext : CCodePointer[(Pointer[Struct_IErrorInfo],Pointer[CULong]),(CLong)],
);

alias IErrorInfoVtbl = Struct_IErrorInfoVtbl;

record Struct_IErrorInfo (
    lpVtbl : Pointer[Struct_IErrorInfoVtbl],
);

external IErrorInfo_GetGUID_Proxy(
    This : Pointer[IErrorInfo],
    pGUID : Pointer[GUID]) CLong;

external IErrorInfo_GetGUID_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IErrorInfo_GetSource_Proxy(
    This : Pointer[IErrorInfo],
    pBstrSource : Pointer[BSTR]) CLong;

external IErrorInfo_GetSource_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IErrorInfo_GetDescription_Proxy(
    This : Pointer[IErrorInfo],
    pBstrDescription : Pointer[BSTR]) CLong;

external IErrorInfo_GetDescription_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IErrorInfo_GetHelpFile_Proxy(
    This : Pointer[IErrorInfo],
    pBstrHelpFile : Pointer[BSTR]) CLong;

external IErrorInfo_GetHelpFile_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IErrorInfo_GetHelpContext_Proxy(
    This : Pointer[IErrorInfo],
    pdwHelpContext : Pointer[CULong]) CLong;

external IErrorInfo_GetHelpContext_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPCREATEERRORINFO = Pointer[ICreateErrorInfo];

external IID_ICreateErrorInfo : IID;

record Struct_ICreateErrorInfoVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_ICreateErrorInfo],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_ICreateErrorInfo]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_ICreateErrorInfo]),(CULong)],
    SetGUID : CCodePointer[(Pointer[Struct_ICreateErrorInfo],Pointer[Struct__GUID]),(CLong)],
    SetSource : CCodePointer[(Pointer[Struct_ICreateErrorInfo],Pointer[UShort]),(CLong)],
    SetDescription : CCodePointer[(Pointer[Struct_ICreateErrorInfo],Pointer[UShort]),(CLong)],
    SetHelpFile : CCodePointer[(Pointer[Struct_ICreateErrorInfo],Pointer[UShort]),(CLong)],
    SetHelpContext : CCodePointer[(Pointer[Struct_ICreateErrorInfo],CULong),(CLong)],
);

alias ICreateErrorInfoVtbl = Struct_ICreateErrorInfoVtbl;

record Struct_ICreateErrorInfo (
    lpVtbl : Pointer[Struct_ICreateErrorInfoVtbl],
);

external ICreateErrorInfo_SetGUID_Proxy(
    This : Pointer[ICreateErrorInfo],
    rguid : Pointer[GUID]) CLong;

external ICreateErrorInfo_SetGUID_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateErrorInfo_SetSource_Proxy(
    This : Pointer[ICreateErrorInfo],
    szSource : LPOLESTR) CLong;

external ICreateErrorInfo_SetSource_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateErrorInfo_SetDescription_Proxy(
    This : Pointer[ICreateErrorInfo],
    szDescription : LPOLESTR) CLong;

external ICreateErrorInfo_SetDescription_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateErrorInfo_SetHelpFile_Proxy(
    This : Pointer[ICreateErrorInfo],
    szHelpFile : LPOLESTR) CLong;

external ICreateErrorInfo_SetHelpFile_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICreateErrorInfo_SetHelpContext_Proxy(
    This : Pointer[ICreateErrorInfo],
    dwHelpContext : CULong) CLong;

external ICreateErrorInfo_SetHelpContext_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPSUPPORTERRORINFO = Pointer[ISupportErrorInfo];

external IID_ISupportErrorInfo : IID;

record Struct_ISupportErrorInfoVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_ISupportErrorInfo],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_ISupportErrorInfo]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_ISupportErrorInfo]),(CULong)],
    InterfaceSupportsErrorInfo : CCodePointer[(Pointer[Struct_ISupportErrorInfo],Pointer[Struct__GUID]),(CLong)],
);

alias ISupportErrorInfoVtbl = Struct_ISupportErrorInfoVtbl;

record Struct_ISupportErrorInfo (
    lpVtbl : Pointer[Struct_ISupportErrorInfoVtbl],
);

external ISupportErrorInfo_InterfaceSupportsErrorInfo_Proxy(
    This : Pointer[ISupportErrorInfo],
    riid : Pointer[IID]) CLong;

external ISupportErrorInfo_InterfaceSupportsErrorInfo_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_ITypeFactory : IID;

record Struct_ITypeFactoryVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_ITypeFactory],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_ITypeFactory]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_ITypeFactory]),(CULong)],
    CreateFromTypeInfo : CCodePointer[(Pointer[Struct_ITypeFactory],Pointer[Struct_ITypeInfo],Pointer[Struct__GUID],Pointer[Pointer[Struct_IUnknown]]),(CLong)],
);

alias ITypeFactoryVtbl = Struct_ITypeFactoryVtbl;

record Struct_ITypeFactory (
    lpVtbl : Pointer[Struct_ITypeFactoryVtbl],
);

external ITypeFactory_CreateFromTypeInfo_Proxy(
    This : Pointer[ITypeFactory],
    pTypeInfo : Pointer[ITypeInfo],
    riid : Pointer[IID],
    ppv : Pointer[Pointer[IUnknown]]) CLong;

external ITypeFactory_CreateFromTypeInfo_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_ITypeMarshal : IID;

record Struct_ITypeMarshalVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_ITypeMarshal],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_ITypeMarshal]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_ITypeMarshal]),(CULong)],
    Size : CCodePointer[(Pointer[Struct_ITypeMarshal],RawPointer,CULong,RawPointer,Pointer[CULong]),(CLong)],
    Marshal : CCodePointer[(Pointer[Struct_ITypeMarshal],RawPointer,CULong,RawPointer,CULong,Pointer[CUChar],Pointer[CULong]),(CLong)],
    Unmarshal : CCodePointer[(Pointer[Struct_ITypeMarshal],RawPointer,CULong,CULong,Pointer[CUChar],Pointer[CULong]),(CLong)],
    Free : CCodePointer[(Pointer[Struct_ITypeMarshal],RawPointer),(CLong)],
);

alias ITypeMarshalVtbl = Struct_ITypeMarshalVtbl;

record Struct_ITypeMarshal (
    lpVtbl : Pointer[Struct_ITypeMarshalVtbl],
);

external ITypeMarshal_Size_Proxy(
    This : Pointer[ITypeMarshal],
    pvType : PVOID,
    dwDestContext : CULong,
    pvDestContext : PVOID,
    pSize : Pointer[CULong]) CLong;

external ITypeMarshal_Size_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeMarshal_Marshal_Proxy(
    This : Pointer[ITypeMarshal],
    pvType : PVOID,
    dwDestContext : CULong,
    pvDestContext : PVOID,
    cbBufferLength : CULong,
    pBuffer : Pointer[CUChar],
    pcbWritten : Pointer[CULong]) CLong;

external ITypeMarshal_Marshal_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeMarshal_Unmarshal_Proxy(
    This : Pointer[ITypeMarshal],
    pvType : PVOID,
    dwFlags : CULong,
    cbBufferLength : CULong,
    pBuffer : Pointer[CUChar],
    pcbRead : Pointer[CULong]) CLong;

external ITypeMarshal_Unmarshal_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ITypeMarshal_Free_Proxy(
    This : Pointer[ITypeMarshal],
    pvType : PVOID) CLong;

external ITypeMarshal_Free_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPRECORDINFO = Pointer[IRecordInfo];

external IID_IRecordInfo : IID;

record Struct_IRecordInfoVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IRecordInfo],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IRecordInfo]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IRecordInfo]),(CULong)],
    RecordInit : CCodePointer[(Pointer[Struct_IRecordInfo],RawPointer),(CLong)],
    RecordClear : CCodePointer[(Pointer[Struct_IRecordInfo],RawPointer),(CLong)],
    RecordCopy : CCodePointer[(Pointer[Struct_IRecordInfo],RawPointer,RawPointer),(CLong)],
    GetGuid : CCodePointer[(Pointer[Struct_IRecordInfo],Pointer[Struct__GUID]),(CLong)],
    GetName : CCodePointer[(Pointer[Struct_IRecordInfo],Pointer[Pointer[UShort]]),(CLong)],
    GetSize : CCodePointer[(Pointer[Struct_IRecordInfo],Pointer[CULong]),(CLong)],
    GetTypeInfo : CCodePointer[(Pointer[Struct_IRecordInfo],Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetField : CCodePointer[(Pointer[Struct_IRecordInfo],RawPointer,Pointer[UShort],Pointer[Struct_tagVARIANT]),(CLong)],
    GetFieldNoCopy : CCodePointer[(Pointer[Struct_IRecordInfo],RawPointer,Pointer[UShort],Pointer[Struct_tagVARIANT],Pointer[RawPointer]),(CLong)],
    PutField : CCodePointer[(Pointer[Struct_IRecordInfo],CULong,RawPointer,Pointer[UShort],Pointer[Struct_tagVARIANT]),(CLong)],
    PutFieldNoCopy : CCodePointer[(Pointer[Struct_IRecordInfo],CULong,RawPointer,Pointer[UShort],Pointer[Struct_tagVARIANT]),(CLong)],
    GetFieldNames : CCodePointer[(Pointer[Struct_IRecordInfo],Pointer[CULong],Pointer[Pointer[UShort]]),(CLong)],
    IsMatchingType : CCodePointer[(Pointer[Struct_IRecordInfo],Pointer[Struct_IRecordInfo]),(Int)],
    RecordCreate : CCodePointer[(Pointer[Struct_IRecordInfo]),(RawPointer)],
    RecordCreateCopy : CCodePointer[(Pointer[Struct_IRecordInfo],RawPointer,Pointer[RawPointer]),(CLong)],
    RecordDestroy : CCodePointer[(Pointer[Struct_IRecordInfo],RawPointer),(CLong)],
);

alias IRecordInfoVtbl = Struct_IRecordInfoVtbl;

record Struct_IRecordInfo (
    lpVtbl : Pointer[Struct_IRecordInfoVtbl],
);

external IRecordInfo_RecordInit_Proxy(
    This : Pointer[IRecordInfo],
    pvNew : PVOID) CLong;

external IRecordInfo_RecordInit_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRecordInfo_RecordClear_Proxy(
    This : Pointer[IRecordInfo],
    pvExisting : PVOID) CLong;

external IRecordInfo_RecordClear_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRecordInfo_RecordCopy_Proxy(
    This : Pointer[IRecordInfo],
    pvExisting : PVOID,
    pvNew : PVOID) CLong;

external IRecordInfo_RecordCopy_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRecordInfo_GetGuid_Proxy(
    This : Pointer[IRecordInfo],
    pguid : Pointer[GUID]) CLong;

external IRecordInfo_GetGuid_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRecordInfo_GetName_Proxy(
    This : Pointer[IRecordInfo],
    pbstrName : Pointer[BSTR]) CLong;

external IRecordInfo_GetName_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRecordInfo_GetSize_Proxy(
    This : Pointer[IRecordInfo],
    pcbSize : Pointer[CULong]) CLong;

external IRecordInfo_GetSize_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRecordInfo_GetTypeInfo_Proxy(
    This : Pointer[IRecordInfo],
    ppTypeInfo : Pointer[Pointer[ITypeInfo]]) CLong;

external IRecordInfo_GetTypeInfo_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRecordInfo_GetField_Proxy(
    This : Pointer[IRecordInfo],
    pvData : PVOID,
    szFieldName : LPCOLESTR,
    pvarField : Pointer[VARIANT]) CLong;

external IRecordInfo_GetField_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRecordInfo_GetFieldNoCopy_Proxy(
    This : Pointer[IRecordInfo],
    pvData : PVOID,
    szFieldName : LPCOLESTR,
    pvarField : Pointer[VARIANT],
    ppvDataCArray : Pointer[PVOID]) CLong;

external IRecordInfo_GetFieldNoCopy_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRecordInfo_PutField_Proxy(
    This : Pointer[IRecordInfo],
    wFlags : CULong,
    pvData : PVOID,
    szFieldName : LPCOLESTR,
    pvarField : Pointer[VARIANT]) CLong;

external IRecordInfo_PutField_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRecordInfo_PutFieldNoCopy_Proxy(
    This : Pointer[IRecordInfo],
    wFlags : CULong,
    pvData : PVOID,
    szFieldName : LPCOLESTR,
    pvarField : Pointer[VARIANT]) CLong;

external IRecordInfo_PutFieldNoCopy_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRecordInfo_GetFieldNames_Proxy(
    This : Pointer[IRecordInfo],
    pcNames : Pointer[CULong],
    rgBstrNames : Pointer[BSTR]) CLong;

external IRecordInfo_GetFieldNames_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRecordInfo_IsMatchingType_Proxy(
    This : Pointer[IRecordInfo],
    pRecordInfo : Pointer[IRecordInfo]) Int;

external IRecordInfo_IsMatchingType_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRecordInfo_RecordCreate_Proxy(
    This : Pointer[IRecordInfo]) PVOID;

external IRecordInfo_RecordCreate_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRecordInfo_RecordCreateCopy_Proxy(
    This : Pointer[IRecordInfo],
    pvSource : PVOID,
    ppvDest : Pointer[PVOID]) CLong;

external IRecordInfo_RecordCreateCopy_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IRecordInfo_RecordDestroy_Proxy(
    This : Pointer[IRecordInfo],
    pvRecord : PVOID) CLong;

external IRecordInfo_RecordDestroy_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPERRORLOG = Pointer[IErrorLog];

external IID_IErrorLog : IID;

record Struct_IErrorLogVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IErrorLog],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IErrorLog]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IErrorLog]),(CULong)],
    AddError : CCodePointer[(Pointer[Struct_IErrorLog],Pointer[UShort],Pointer[Struct_tagEXCEPINFO]),(CLong)],
);

alias IErrorLogVtbl = Struct_IErrorLogVtbl;

record Struct_IErrorLog (
    lpVtbl : Pointer[Struct_IErrorLogVtbl],
);

external IErrorLog_AddError_Proxy(
    This : Pointer[IErrorLog],
    pszPropName : LPCOLESTR,
    pExcepInfo : Pointer[EXCEPINFO]) CLong;

external IErrorLog_AddError_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPPROPERTYBAG = Pointer[IPropertyBag];

external IID_IPropertyBag : IID;

record Struct_IPropertyBagVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IPropertyBag],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IPropertyBag]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IPropertyBag]),(CULong)],
    Read : CCodePointer[(Pointer[Struct_IPropertyBag],Pointer[UShort],Pointer[Struct_tagVARIANT],Pointer[Struct_IErrorLog]),(CLong)],
    Write : CCodePointer[(Pointer[Struct_IPropertyBag],Pointer[UShort],Pointer[Struct_tagVARIANT]),(CLong)],
);

alias IPropertyBagVtbl = Struct_IPropertyBagVtbl;

record Struct_IPropertyBag (
    lpVtbl : Pointer[Struct_IPropertyBagVtbl],
);

external IPropertyBag_RemoteRead_Proxy(
    This : Pointer[IPropertyBag],
    pszPropName : LPCOLESTR,
    pVar : Pointer[VARIANT],
    pErrorLog : Pointer[IErrorLog],
    varType : CULong,
    pUnkObj : Pointer[IUnknown]) CLong;

external IPropertyBag_RemoteRead_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IPropertyBag_Write_Proxy(
    This : Pointer[IPropertyBag],
    pszPropName : LPCOLESTR,
    pVar : Pointer[VARIANT]) CLong;

external IPropertyBag_Write_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external __MIDL_itf_oaidl_0114_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_oaidl_0114_v0_0_s_ifspec : RPC_IF_HANDLE;

external BSTR_UserSize(
    argument0 : Pointer[CULong],
    argument1 : CULong,
    argument2 : Pointer[BSTR]) CULong;

external BSTR_UserMarshal(
    argument0 : Pointer[CULong],
    argument1 : Pointer[CUChar],
    argument2 : Pointer[BSTR]) Pointer[CUChar];

external BSTR_UserUnmarshal(
    argument0 : Pointer[CULong],
    argument1 : Pointer[CUChar],
    argument2 : Pointer[BSTR]) Pointer[CUChar];

external BSTR_UserFree(
    argument0 : Pointer[CULong],
    argument1 : Pointer[BSTR]);

external CLEANLOCALSTORAGE_UserSize(
    argument0 : Pointer[CULong],
    argument1 : CULong,
    argument2 : Pointer[CLEANLOCALSTORAGE]) CULong;

external CLEANLOCALSTORAGE_UserMarshal(
    argument0 : Pointer[CULong],
    argument1 : Pointer[CUChar],
    argument2 : Pointer[CLEANLOCALSTORAGE]) Pointer[CUChar];

external CLEANLOCALSTORAGE_UserUnmarshal(
    argument0 : Pointer[CULong],
    argument1 : Pointer[CUChar],
    argument2 : Pointer[CLEANLOCALSTORAGE]) Pointer[CUChar];

external CLEANLOCALSTORAGE_UserFree(
    argument0 : Pointer[CULong],
    argument1 : Pointer[CLEANLOCALSTORAGE]);

external VARIANT_UserSize(
    argument0 : Pointer[CULong],
    argument1 : CULong,
    argument2 : Pointer[VARIANT]) CULong;

external VARIANT_UserMarshal(
    argument0 : Pointer[CULong],
    argument1 : Pointer[CUChar],
    argument2 : Pointer[VARIANT]) Pointer[CUChar];

external VARIANT_UserUnmarshal(
    argument0 : Pointer[CULong],
    argument1 : Pointer[CUChar],
    argument2 : Pointer[VARIANT]) Pointer[CUChar];

external VARIANT_UserFree(
    argument0 : Pointer[CULong],
    argument1 : Pointer[VARIANT]);

external IDispatch_Invoke_Proxy(
    This : Pointer[IDispatch],
    dispIdMember : CLong,
    riid : Pointer[IID],
    lcid : CULong,
    wFlags : UShort,
    pDispParams : Pointer[DISPPARAMS],
    pVarResult : Pointer[VARIANT],
    pExcepInfo : Pointer[EXCEPINFO],
    puArgErr : Pointer[UInt]) CLong;

external IDispatch_Invoke_Stub(
    This : Pointer[IDispatch],
    dispIdMember : CLong,
    riid : Pointer[IID],
    lcid : CULong,
    dwFlags : CULong,
    pDispParams : Pointer[DISPPARAMS],
    pVarResult : Pointer[VARIANT],
    pExcepInfo : Pointer[EXCEPINFO],
    pArgErr : Pointer[UInt],
    cVarRef : UInt,
    rgVarRefIdx : Pointer[UInt],
    rgVarRef : Pointer[VARIANTARG]) CLong;

external IEnumVARIANT_Next_Proxy(
    This : Pointer[IEnumVARIANT],
    celt : CULong,
    rgVar : Pointer[VARIANT],
    pCeltFetched : Pointer[CULong]) CLong;

external IEnumVARIANT_Next_Stub(
    This : Pointer[IEnumVARIANT],
    celt : CULong,
    rgVar : Pointer[VARIANT],
    pCeltFetched : Pointer[CULong]) CLong;

external ITypeComp_Bind_Proxy(
    This : Pointer[ITypeComp],
    szName : LPOLESTR,
    lHashVal : CULong,
    wFlags : UShort,
    ppTInfo : Pointer[Pointer[ITypeInfo]],
    pDescKind : Pointer[DESCKIND],
    pBindPtr : Pointer[BINDPTR]) CLong;

external ITypeComp_Bind_Stub(
    This : Pointer[ITypeComp],
    szName : LPOLESTR,
    lHashVal : CULong,
    wFlags : UShort,
    ppTInfo : Pointer[Pointer[ITypeInfo]],
    pDescKind : Pointer[DESCKIND],
    ppFuncDesc : Pointer[LPFUNCDESC],
    ppVarDesc : Pointer[LPVARDESC],
    ppTypeComp : Pointer[Pointer[ITypeComp]],
    pDummy : Pointer[CLEANLOCALSTORAGE]) CLong;

external ITypeComp_BindType_Proxy(
    This : Pointer[ITypeComp],
    szName : LPOLESTR,
    lHashVal : CULong,
    ppTInfo : Pointer[Pointer[ITypeInfo]],
    ppTComp : Pointer[Pointer[ITypeComp]]) CLong;

external ITypeComp_BindType_Stub(
    This : Pointer[ITypeComp],
    szName : LPOLESTR,
    lHashVal : CULong,
    ppTInfo : Pointer[Pointer[ITypeInfo]]) CLong;

external ITypeInfo_GetTypeAttr_Proxy(
    This : Pointer[ITypeInfo],
    ppTypeAttr : Pointer[Pointer[TYPEATTR]]) CLong;

external ITypeInfo_GetTypeAttr_Stub(
    This : Pointer[ITypeInfo],
    ppTypeAttr : Pointer[LPTYPEATTR],
    pDummy : Pointer[CLEANLOCALSTORAGE]) CLong;

external ITypeInfo_GetFuncDesc_Proxy(
    This : Pointer[ITypeInfo],
    index : UInt,
    ppFuncDesc : Pointer[Pointer[FUNCDESC]]) CLong;

external ITypeInfo_GetFuncDesc_Stub(
    This : Pointer[ITypeInfo],
    index : UInt,
    ppFuncDesc : Pointer[LPFUNCDESC],
    pDummy : Pointer[CLEANLOCALSTORAGE]) CLong;

external ITypeInfo_GetVarDesc_Proxy(
    This : Pointer[ITypeInfo],
    index : UInt,
    ppVarDesc : Pointer[Pointer[VARDESC]]) CLong;

external ITypeInfo_GetVarDesc_Stub(
    This : Pointer[ITypeInfo],
    index : UInt,
    ppVarDesc : Pointer[LPVARDESC],
    pDummy : Pointer[CLEANLOCALSTORAGE]) CLong;

external ITypeInfo_GetNames_Proxy(
    This : Pointer[ITypeInfo],
    memid : CLong,
    rgBstrNames : Pointer[BSTR],
    cMaxNames : UInt,
    pcNames : Pointer[UInt]) CLong;

external ITypeInfo_GetNames_Stub(
    This : Pointer[ITypeInfo],
    memid : CLong,
    rgBstrNames : Pointer[BSTR],
    cMaxNames : UInt,
    pcNames : Pointer[UInt]) CLong;

external ITypeInfo_GetIDsOfNames_Proxy(
    This : Pointer[ITypeInfo],
    rgszNames : Pointer[LPOLESTR],
    cNames : UInt,
    pMemId : Pointer[CLong]) CLong;

external ITypeInfo_GetIDsOfNames_Stub(
    This : Pointer[ITypeInfo]) CLong;

external ITypeInfo_Invoke_Proxy(
    This : Pointer[ITypeInfo],
    pvInstance : PVOID,
    memid : CLong,
    wFlags : UShort,
    pDispParams : Pointer[DISPPARAMS],
    pVarResult : Pointer[VARIANT],
    pExcepInfo : Pointer[EXCEPINFO],
    puArgErr : Pointer[UInt]) CLong;

external ITypeInfo_Invoke_Stub(
    This : Pointer[ITypeInfo]) CLong;

external ITypeInfo_GetDocumentation_Proxy(
    This : Pointer[ITypeInfo],
    memid : CLong,
    pBstrName : Pointer[BSTR],
    pBstrDocString : Pointer[BSTR],
    pdwHelpContext : Pointer[CULong],
    pBstrHelpFile : Pointer[BSTR]) CLong;

external ITypeInfo_GetDocumentation_Stub(
    This : Pointer[ITypeInfo],
    memid : CLong,
    refPtrFlags : CULong,
    pBstrName : Pointer[BSTR],
    pBstrDocString : Pointer[BSTR],
    pdwHelpContext : Pointer[CULong],
    pBstrHelpFile : Pointer[BSTR]) CLong;

external ITypeInfo_GetDllEntry_Proxy(
    This : Pointer[ITypeInfo],
    memid : CLong,
    invKind : INVOKEKIND,
    pBstrDllName : Pointer[BSTR],
    pBstrName : Pointer[BSTR],
    pwOrdinal : Pointer[UShort]) CLong;

external ITypeInfo_GetDllEntry_Stub(
    This : Pointer[ITypeInfo],
    memid : CLong,
    invKind : INVOKEKIND,
    refPtrFlags : CULong,
    pBstrDllName : Pointer[BSTR],
    pBstrName : Pointer[BSTR],
    pwOrdinal : Pointer[UShort]) CLong;

external ITypeInfo_AddressOfMember_Proxy(
    This : Pointer[ITypeInfo],
    memid : CLong,
    invKind : INVOKEKIND,
    ppv : Pointer[PVOID]) CLong;

external ITypeInfo_AddressOfMember_Stub(
    This : Pointer[ITypeInfo]) CLong;

external ITypeInfo_CreateInstance_Proxy(
    This : Pointer[ITypeInfo],
    pUnkOuter : Pointer[IUnknown],
    riid : Pointer[IID],
    ppvObj : Pointer[PVOID]) CLong;

external ITypeInfo_CreateInstance_Stub(
    This : Pointer[ITypeInfo],
    riid : Pointer[IID],
    ppvObj : Pointer[Pointer[IUnknown]]) CLong;

external ITypeInfo_GetContainingTypeLib_Proxy(
    This : Pointer[ITypeInfo],
    ppTLib : Pointer[Pointer[ITypeLib]],
    pIndex : Pointer[UInt]) CLong;

external ITypeInfo_GetContainingTypeLib_Stub(
    This : Pointer[ITypeInfo],
    ppTLib : Pointer[Pointer[ITypeLib]],
    pIndex : Pointer[UInt]) CLong;

external ITypeInfo_ReleaseTypeAttr_Proxy(
    This : Pointer[ITypeInfo],
    pTypeAttr : Pointer[TYPEATTR]);

external ITypeInfo_ReleaseTypeAttr_Stub(
    This : Pointer[ITypeInfo]) CLong;

external ITypeInfo_ReleaseFuncDesc_Proxy(
    This : Pointer[ITypeInfo],
    pFuncDesc : Pointer[FUNCDESC]);

external ITypeInfo_ReleaseFuncDesc_Stub(
    This : Pointer[ITypeInfo]) CLong;

external ITypeInfo_ReleaseVarDesc_Proxy(
    This : Pointer[ITypeInfo],
    pVarDesc : Pointer[VARDESC]);

external ITypeInfo_ReleaseVarDesc_Stub(
    This : Pointer[ITypeInfo]) CLong;

external ITypeInfo2_GetDocumentation2_Proxy(
    This : Pointer[ITypeInfo2],
    memid : CLong,
    lcid : CULong,
    pbstrHelpString : Pointer[BSTR],
    pdwHelpStringContext : Pointer[CULong],
    pbstrHelpStringDll : Pointer[BSTR]) CLong;

external ITypeInfo2_GetDocumentation2_Stub(
    This : Pointer[ITypeInfo2],
    memid : CLong,
    lcid : CULong,
    refPtrFlags : CULong,
    pbstrHelpString : Pointer[BSTR],
    pdwHelpStringContext : Pointer[CULong],
    pbstrHelpStringDll : Pointer[BSTR]) CLong;

external ITypeLib_GetTypeInfoCount_Proxy(
    This : Pointer[ITypeLib]) UInt;

external ITypeLib_GetTypeInfoCount_Stub(
    This : Pointer[ITypeLib],
    pcTInfo : Pointer[UInt]) CLong;

external ITypeLib_GetLibAttr_Proxy(
    This : Pointer[ITypeLib],
    ppTLibAttr : Pointer[Pointer[TLIBATTR]]) CLong;

external ITypeLib_GetLibAttr_Stub(
    This : Pointer[ITypeLib],
    ppTLibAttr : Pointer[LPTLIBATTR],
    pDummy : Pointer[CLEANLOCALSTORAGE]) CLong;

external ITypeLib_GetDocumentation_Proxy(
    This : Pointer[ITypeLib],
    index : Int,
    pBstrName : Pointer[BSTR],
    pBstrDocString : Pointer[BSTR],
    pdwHelpContext : Pointer[CULong],
    pBstrHelpFile : Pointer[BSTR]) CLong;

external ITypeLib_GetDocumentation_Stub(
    This : Pointer[ITypeLib],
    index : Int,
    refPtrFlags : CULong,
    pBstrName : Pointer[BSTR],
    pBstrDocString : Pointer[BSTR],
    pdwHelpContext : Pointer[CULong],
    pBstrHelpFile : Pointer[BSTR]) CLong;

external ITypeLib_IsName_Proxy(
    This : Pointer[ITypeLib],
    szNameBuf : LPOLESTR,
    lHashVal : CULong,
    pfName : Pointer[Int]) CLong;

external ITypeLib_IsName_Stub(
    This : Pointer[ITypeLib],
    szNameBuf : LPOLESTR,
    lHashVal : CULong,
    pfName : Pointer[Int],
    pBstrLibName : Pointer[BSTR]) CLong;

external ITypeLib_FindName_Proxy(
    This : Pointer[ITypeLib],
    szNameBuf : LPOLESTR,
    lHashVal : CULong,
    ppTInfo : Pointer[Pointer[ITypeInfo]],
    rgMemId : Pointer[CLong],
    pcFound : Pointer[UShort]) CLong;

external ITypeLib_FindName_Stub(
    This : Pointer[ITypeLib],
    szNameBuf : LPOLESTR,
    lHashVal : CULong,
    ppTInfo : Pointer[Pointer[ITypeInfo]],
    rgMemId : Pointer[CLong],
    pcFound : Pointer[UShort],
    pBstrLibName : Pointer[BSTR]) CLong;

external ITypeLib_ReleaseTLibAttr_Proxy(
    This : Pointer[ITypeLib],
    pTLibAttr : Pointer[TLIBATTR]);

external ITypeLib_ReleaseTLibAttr_Stub(
    This : Pointer[ITypeLib]) CLong;

external ITypeLib2_GetLibStatistics_Proxy(
    This : Pointer[ITypeLib2],
    pcUniqueNames : Pointer[CULong],
    pcchUniqueNames : Pointer[CULong]) CLong;

external ITypeLib2_GetLibStatistics_Stub(
    This : Pointer[ITypeLib2],
    pcUniqueNames : Pointer[CULong],
    pcchUniqueNames : Pointer[CULong]) CLong;

external ITypeLib2_GetDocumentation2_Proxy(
    This : Pointer[ITypeLib2],
    index : Int,
    lcid : CULong,
    pbstrHelpString : Pointer[BSTR],
    pdwHelpStringContext : Pointer[CULong],
    pbstrHelpStringDll : Pointer[BSTR]) CLong;

external ITypeLib2_GetDocumentation2_Stub(
    This : Pointer[ITypeLib2],
    index : Int,
    lcid : CULong,
    refPtrFlags : CULong,
    pbstrHelpString : Pointer[BSTR],
    pdwHelpStringContext : Pointer[CULong],
    pbstrHelpStringDll : Pointer[BSTR]) CLong;

external IPropertyBag_Read_Proxy(
    This : Pointer[IPropertyBag],
    pszPropName : LPCOLESTR,
    pVar : Pointer[VARIANT],
    pErrorLog : Pointer[IErrorLog]) CLong;

external IPropertyBag_Read_Stub(
    This : Pointer[IPropertyBag],
    pszPropName : LPCOLESTR,
    pVar : Pointer[VARIANT],
    pErrorLog : Pointer[IErrorLog],
    varType : CULong,
    pUnkObj : Pointer[IUnknown]) CLong;

record Struct__xml_error (
    _nLine : UInt,
    _pchBuf : BSTR,
    _cchBuf : UInt,
    _ich : UInt,
    _pszFound : BSTR,
    _pszExpected : BSTR,
    _reserved1 : CULong,
    _reserved2 : CULong,
);

alias XML_ERROR = Struct__xml_error;

external __MIDL_itf_msxml_0000_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_msxml_0000_v0_0_s_ifspec : RPC_IF_HANDLE;

alias NODE_INVALID = 0;
alias NODE_ELEMENT = 1;
alias NODE_ATTRIBUTE = 2;
alias NODE_TEXT = 3;
alias NODE_CDATA_SECTION = 4;
alias NODE_ENTITY_REFERENCE = 5;
alias NODE_ENTITY = 6;
alias NODE_PROCESSING_INSTRUCTION = 7;
alias NODE_COMMENT = 8;
alias NODE_DOCUMENT = 9;
alias NODE_DOCUMENT_TYPE = 10;
alias NODE_DOCUMENT_FRAGMENT = 11;
alias NODE_NOTATION = 12;

alias DOMNodeType = Int;

alias XMLELEMTYPE_ELEMENT = 0;
alias XMLELEMTYPE_TEXT = 1;
alias XMLELEMTYPE_COMMENT = 2;
alias XMLELEMTYPE_DOCUMENT = 3;
alias XMLELEMTYPE_DTD = 4;
alias XMLELEMTYPE_PI = 5;
alias XMLELEMTYPE_OTHER = 6;

alias XMLELEM_TYPE = Int;

external LIBID_MSXML : IID;

external IID_IXMLDOMImplementation : IID;

record Struct_IXMLDOMImplementationVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IXMLDOMImplementation],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IXMLDOMImplementation]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IXMLDOMImplementation]),(CULong)],
    GetTypeInfoCount : CCodePointer[(Pointer[Struct_IXMLDOMImplementation],Pointer[UInt]),(CLong)],
    GetTypeInfo : CCodePointer[(Pointer[Struct_IXMLDOMImplementation],UInt,CULong,Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetIDsOfNames : CCodePointer[(Pointer[Struct_IXMLDOMImplementation],Pointer[Struct__GUID],Pointer[Pointer[UShort]],UInt,CULong,Pointer[CLong]),(CLong)],
    Invoke : CCodePointer[(Pointer[Struct_IXMLDOMImplementation],CLong,Pointer[Struct__GUID],CULong,UShort,Pointer[Struct_tagDISPPARAMS],Pointer[Struct_tagVARIANT],Pointer[Struct_tagEXCEPINFO],Pointer[UInt]),(CLong)],
    hasFeature : CCodePointer[(Pointer[Struct_IXMLDOMImplementation],Pointer[UShort],Pointer[UShort],Pointer[Short]),(CLong)],
);

alias IXMLDOMImplementationVtbl = Struct_IXMLDOMImplementationVtbl;

record Struct_IXMLDOMImplementation (
    lpVtbl : Pointer[Struct_IXMLDOMImplementationVtbl],
);

external IXMLDOMImplementation_hasFeature_Proxy(
    This : Pointer[IXMLDOMImplementation],
    feature : BSTR,
    version : BSTR,
    hasFeature : Pointer[Short]) CLong;

external IXMLDOMImplementation_hasFeature_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IXMLDOMNode : IID;

record Struct_IXMLDOMNodeVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IXMLDOMNode],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IXMLDOMNode]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IXMLDOMNode]),(CULong)],
    GetTypeInfoCount : CCodePointer[(Pointer[Struct_IXMLDOMNode],Pointer[UInt]),(CLong)],
    GetTypeInfo : CCodePointer[(Pointer[Struct_IXMLDOMNode],UInt,CULong,Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetIDsOfNames : CCodePointer[(Pointer[Struct_IXMLDOMNode],Pointer[Struct__GUID],Pointer[Pointer[UShort]],UInt,CULong,Pointer[CLong]),(CLong)],
    Invoke : CCodePointer[(Pointer[Struct_IXMLDOMNode],CLong,Pointer[Struct__GUID],CULong,UShort,Pointer[Struct_tagDISPPARAMS],Pointer[Struct_tagVARIANT],Pointer[Struct_tagEXCEPINFO],Pointer[UInt]),(CLong)],
    get_nodeName : CCodePointer[(Pointer[Struct_IXMLDOMNode],Pointer[Pointer[UShort]]),(CLong)],
    get_nodeValue : CCodePointer[(Pointer[Struct_IXMLDOMNode],Pointer[Struct_tagVARIANT]),(CLong)],
    put_nodeValue : CCodePointer[(Pointer[Struct_IXMLDOMNode],Struct_tagVARIANT),(CLong)],
    get_nodeType : CCodePointer[(Pointer[Struct_IXMLDOMNode],Pointer[Int]),(CLong)],
    get_parentNode : CCodePointer[(Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_childNodes : CCodePointer[(Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNodeList]]),(CLong)],
    get_firstChild : CCodePointer[(Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_lastChild : CCodePointer[(Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_previousSibling : CCodePointer[(Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nextSibling : CCodePointer[(Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_attributes : CCodePointer[(Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNamedNodeMap]]),(CLong)],
    insertBefore : CCodePointer[(Pointer[Struct_IXMLDOMNode],Pointer[Struct_IXMLDOMNode],Struct_tagVARIANT,Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    replaceChild : CCodePointer[(Pointer[Struct_IXMLDOMNode],Pointer[Struct_IXMLDOMNode],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    removeChild : CCodePointer[(Pointer[Struct_IXMLDOMNode],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    appendChild : CCodePointer[(Pointer[Struct_IXMLDOMNode],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    hasChildNodes : CCodePointer[(Pointer[Struct_IXMLDOMNode],Pointer[Short]),(CLong)],
    get_ownerDocument : CCodePointer[(Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMDocument]]),(CLong)],
    cloneNode : CCodePointer[(Pointer[Struct_IXMLDOMNode],Short,Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nodeTypeString : CCodePointer[(Pointer[Struct_IXMLDOMNode],Pointer[Pointer[UShort]]),(CLong)],
    get_text : CCodePointer[(Pointer[Struct_IXMLDOMNode],Pointer[Pointer[UShort]]),(CLong)],
    put_text : CCodePointer[(Pointer[Struct_IXMLDOMNode],Pointer[UShort]),(CLong)],
    get_specified : CCodePointer[(Pointer[Struct_IXMLDOMNode],Pointer[Short]),(CLong)],
    get_definition : CCodePointer[(Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nodeTypedValue : CCodePointer[(Pointer[Struct_IXMLDOMNode],Pointer[Struct_tagVARIANT]),(CLong)],
    put_nodeTypedValue : CCodePointer[(Pointer[Struct_IXMLDOMNode],Struct_tagVARIANT),(CLong)],
    get_dataType : CCodePointer[(Pointer[Struct_IXMLDOMNode],Pointer[Struct_tagVARIANT]),(CLong)],
    put_dataType : CCodePointer[(Pointer[Struct_IXMLDOMNode],Pointer[UShort]),(CLong)],
    get_xml : CCodePointer[(Pointer[Struct_IXMLDOMNode],Pointer[Pointer[UShort]]),(CLong)],
    transformNode : CCodePointer[(Pointer[Struct_IXMLDOMNode],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[UShort]]),(CLong)],
    selectNodes : CCodePointer[(Pointer[Struct_IXMLDOMNode],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMNodeList]]),(CLong)],
    selectSingleNode : CCodePointer[(Pointer[Struct_IXMLDOMNode],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_parsed : CCodePointer[(Pointer[Struct_IXMLDOMNode],Pointer[Short]),(CLong)],
    get_namespaceURI : CCodePointer[(Pointer[Struct_IXMLDOMNode],Pointer[Pointer[UShort]]),(CLong)],
    get_prefix : CCodePointer[(Pointer[Struct_IXMLDOMNode],Pointer[Pointer[UShort]]),(CLong)],
    get_baseName : CCodePointer[(Pointer[Struct_IXMLDOMNode],Pointer[Pointer[UShort]]),(CLong)],
    transformNodeToObject : CCodePointer[(Pointer[Struct_IXMLDOMNode],Pointer[Struct_IXMLDOMNode],Struct_tagVARIANT),(CLong)],
);

alias IXMLDOMNodeVtbl = Struct_IXMLDOMNodeVtbl;

record Struct_IXMLDOMNode (
    lpVtbl : Pointer[Struct_IXMLDOMNodeVtbl],
);

external IXMLDOMNode_get_nodeName_Proxy(
    This : Pointer[IXMLDOMNode],
    name : Pointer[BSTR]) CLong;

external IXMLDOMNode_get_nodeName_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNode_get_nodeValue_Proxy(
    This : Pointer[IXMLDOMNode],
    value : Pointer[VARIANT]) CLong;

external IXMLDOMNode_get_nodeValue_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNode_put_nodeValue_Proxy(
    This : Pointer[IXMLDOMNode],
    value : VARIANT) CLong;

external IXMLDOMNode_put_nodeValue_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNode_get_nodeType_Proxy(
    This : Pointer[IXMLDOMNode],
    type : Pointer[DOMNodeType]) CLong;

external IXMLDOMNode_get_nodeType_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNode_get_parentNode_Proxy(
    This : Pointer[IXMLDOMNode],
    parent : Pointer[Pointer[IXMLDOMNode]]) CLong;

external IXMLDOMNode_get_parentNode_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNode_get_childNodes_Proxy(
    This : Pointer[IXMLDOMNode],
    childList : Pointer[Pointer[IXMLDOMNodeList]]) CLong;

external IXMLDOMNode_get_childNodes_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNode_get_firstChild_Proxy(
    This : Pointer[IXMLDOMNode],
    firstChild : Pointer[Pointer[IXMLDOMNode]]) CLong;

external IXMLDOMNode_get_firstChild_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNode_get_lastChild_Proxy(
    This : Pointer[IXMLDOMNode],
    lastChild : Pointer[Pointer[IXMLDOMNode]]) CLong;

external IXMLDOMNode_get_lastChild_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNode_get_previousSibling_Proxy(
    This : Pointer[IXMLDOMNode],
    previousSibling : Pointer[Pointer[IXMLDOMNode]]) CLong;

external IXMLDOMNode_get_previousSibling_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNode_get_nextSibling_Proxy(
    This : Pointer[IXMLDOMNode],
    nextSibling : Pointer[Pointer[IXMLDOMNode]]) CLong;

external IXMLDOMNode_get_nextSibling_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNode_get_attributes_Proxy(
    This : Pointer[IXMLDOMNode],
    attributeMap : Pointer[Pointer[IXMLDOMNamedNodeMap]]) CLong;

external IXMLDOMNode_get_attributes_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNode_insertBefore_Proxy(
    This : Pointer[IXMLDOMNode],
    newChild : Pointer[IXMLDOMNode],
    refChild : VARIANT,
    outNewChild : Pointer[Pointer[IXMLDOMNode]]) CLong;

external IXMLDOMNode_insertBefore_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNode_replaceChild_Proxy(
    This : Pointer[IXMLDOMNode],
    newChild : Pointer[IXMLDOMNode],
    oldChild : Pointer[IXMLDOMNode],
    outOldChild : Pointer[Pointer[IXMLDOMNode]]) CLong;

external IXMLDOMNode_replaceChild_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNode_removeChild_Proxy(
    This : Pointer[IXMLDOMNode],
    childNode : Pointer[IXMLDOMNode],
    oldChild : Pointer[Pointer[IXMLDOMNode]]) CLong;

external IXMLDOMNode_removeChild_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNode_appendChild_Proxy(
    This : Pointer[IXMLDOMNode],
    newChild : Pointer[IXMLDOMNode],
    outNewChild : Pointer[Pointer[IXMLDOMNode]]) CLong;

external IXMLDOMNode_appendChild_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNode_hasChildNodes_Proxy(
    This : Pointer[IXMLDOMNode],
    hasChild : Pointer[Short]) CLong;

external IXMLDOMNode_hasChildNodes_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNode_get_ownerDocument_Proxy(
    This : Pointer[IXMLDOMNode],
    DOMDocument : Pointer[Pointer[IXMLDOMDocument]]) CLong;

external IXMLDOMNode_get_ownerDocument_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNode_cloneNode_Proxy(
    This : Pointer[IXMLDOMNode],
    deep : Short,
    cloneRoot : Pointer[Pointer[IXMLDOMNode]]) CLong;

external IXMLDOMNode_cloneNode_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNode_get_nodeTypeString_Proxy(
    This : Pointer[IXMLDOMNode],
    nodeType : Pointer[BSTR]) CLong;

external IXMLDOMNode_get_nodeTypeString_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNode_get_text_Proxy(
    This : Pointer[IXMLDOMNode],
    text : Pointer[BSTR]) CLong;

external IXMLDOMNode_get_text_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNode_put_text_Proxy(
    This : Pointer[IXMLDOMNode],
    text : BSTR) CLong;

external IXMLDOMNode_put_text_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNode_get_specified_Proxy(
    This : Pointer[IXMLDOMNode],
    isSpecified : Pointer[Short]) CLong;

external IXMLDOMNode_get_specified_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNode_get_definition_Proxy(
    This : Pointer[IXMLDOMNode],
    definitionNode : Pointer[Pointer[IXMLDOMNode]]) CLong;

external IXMLDOMNode_get_definition_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNode_get_nodeTypedValue_Proxy(
    This : Pointer[IXMLDOMNode],
    typedValue : Pointer[VARIANT]) CLong;

external IXMLDOMNode_get_nodeTypedValue_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNode_put_nodeTypedValue_Proxy(
    This : Pointer[IXMLDOMNode],
    typedValue : VARIANT) CLong;

external IXMLDOMNode_put_nodeTypedValue_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNode_get_dataType_Proxy(
    This : Pointer[IXMLDOMNode],
    dataTypeName : Pointer[VARIANT]) CLong;

external IXMLDOMNode_get_dataType_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNode_put_dataType_Proxy(
    This : Pointer[IXMLDOMNode],
    dataTypeName : BSTR) CLong;

external IXMLDOMNode_put_dataType_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNode_get_xml_Proxy(
    This : Pointer[IXMLDOMNode],
    xmlString : Pointer[BSTR]) CLong;

external IXMLDOMNode_get_xml_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNode_transformNode_Proxy(
    This : Pointer[IXMLDOMNode],
    stylesheet : Pointer[IXMLDOMNode],
    xmlString : Pointer[BSTR]) CLong;

external IXMLDOMNode_transformNode_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNode_selectNodes_Proxy(
    This : Pointer[IXMLDOMNode],
    queryString : BSTR,
    resultList : Pointer[Pointer[IXMLDOMNodeList]]) CLong;

external IXMLDOMNode_selectNodes_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNode_selectSingleNode_Proxy(
    This : Pointer[IXMLDOMNode],
    queryString : BSTR,
    resultNode : Pointer[Pointer[IXMLDOMNode]]) CLong;

external IXMLDOMNode_selectSingleNode_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNode_get_parsed_Proxy(
    This : Pointer[IXMLDOMNode],
    isParsed : Pointer[Short]) CLong;

external IXMLDOMNode_get_parsed_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNode_get_namespaceURI_Proxy(
    This : Pointer[IXMLDOMNode],
    namespaceURI : Pointer[BSTR]) CLong;

external IXMLDOMNode_get_namespaceURI_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNode_get_prefix_Proxy(
    This : Pointer[IXMLDOMNode],
    prefixString : Pointer[BSTR]) CLong;

external IXMLDOMNode_get_prefix_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNode_get_baseName_Proxy(
    This : Pointer[IXMLDOMNode],
    nameString : Pointer[BSTR]) CLong;

external IXMLDOMNode_get_baseName_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNode_transformNodeToObject_Proxy(
    This : Pointer[IXMLDOMNode],
    stylesheet : Pointer[IXMLDOMNode],
    outputObject : VARIANT) CLong;

external IXMLDOMNode_transformNodeToObject_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IXMLDOMDocumentFragment : IID;

record Struct_IXMLDOMDocumentFragmentVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment]),(CULong)],
    GetTypeInfoCount : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Pointer[UInt]),(CLong)],
    GetTypeInfo : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],UInt,CULong,Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetIDsOfNames : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Pointer[Struct__GUID],Pointer[Pointer[UShort]],UInt,CULong,Pointer[CLong]),(CLong)],
    Invoke : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],CLong,Pointer[Struct__GUID],CULong,UShort,Pointer[Struct_tagDISPPARAMS],Pointer[Struct_tagVARIANT],Pointer[Struct_tagEXCEPINFO],Pointer[UInt]),(CLong)],
    get_nodeName : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Pointer[Pointer[UShort]]),(CLong)],
    get_nodeValue : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Pointer[Struct_tagVARIANT]),(CLong)],
    put_nodeValue : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Struct_tagVARIANT),(CLong)],
    get_nodeType : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Pointer[Int]),(CLong)],
    get_parentNode : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_childNodes : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Pointer[Pointer[Struct_IXMLDOMNodeList]]),(CLong)],
    get_firstChild : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_lastChild : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_previousSibling : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nextSibling : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_attributes : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Pointer[Pointer[Struct_IXMLDOMNamedNodeMap]]),(CLong)],
    insertBefore : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Pointer[Struct_IXMLDOMNode],Struct_tagVARIANT,Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    replaceChild : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Pointer[Struct_IXMLDOMNode],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    removeChild : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    appendChild : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    hasChildNodes : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Pointer[Short]),(CLong)],
    get_ownerDocument : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Pointer[Pointer[Struct_IXMLDOMDocument]]),(CLong)],
    cloneNode : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Short,Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nodeTypeString : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Pointer[Pointer[UShort]]),(CLong)],
    get_text : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Pointer[Pointer[UShort]]),(CLong)],
    put_text : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Pointer[UShort]),(CLong)],
    get_specified : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Pointer[Short]),(CLong)],
    get_definition : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nodeTypedValue : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Pointer[Struct_tagVARIANT]),(CLong)],
    put_nodeTypedValue : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Struct_tagVARIANT),(CLong)],
    get_dataType : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Pointer[Struct_tagVARIANT]),(CLong)],
    put_dataType : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Pointer[UShort]),(CLong)],
    get_xml : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Pointer[Pointer[UShort]]),(CLong)],
    transformNode : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[UShort]]),(CLong)],
    selectNodes : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMNodeList]]),(CLong)],
    selectSingleNode : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_parsed : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Pointer[Short]),(CLong)],
    get_namespaceURI : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Pointer[Pointer[UShort]]),(CLong)],
    get_prefix : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Pointer[Pointer[UShort]]),(CLong)],
    get_baseName : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Pointer[Pointer[UShort]]),(CLong)],
    transformNodeToObject : CCodePointer[(Pointer[Struct_IXMLDOMDocumentFragment],Pointer[Struct_IXMLDOMNode],Struct_tagVARIANT),(CLong)],
);

alias IXMLDOMDocumentFragmentVtbl = Struct_IXMLDOMDocumentFragmentVtbl;

record Struct_IXMLDOMDocumentFragment (
    lpVtbl : Pointer[Struct_IXMLDOMDocumentFragmentVtbl],
);

external IID_IXMLDOMDocument : IID;

record Struct_IXMLDOMDocumentVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IXMLDOMDocument]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IXMLDOMDocument]),(CULong)],
    GetTypeInfoCount : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[UInt]),(CLong)],
    GetTypeInfo : CCodePointer[(Pointer[Struct_IXMLDOMDocument],UInt,CULong,Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetIDsOfNames : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Struct__GUID],Pointer[Pointer[UShort]],UInt,CULong,Pointer[CLong]),(CLong)],
    Invoke : CCodePointer[(Pointer[Struct_IXMLDOMDocument],CLong,Pointer[Struct__GUID],CULong,UShort,Pointer[Struct_tagDISPPARAMS],Pointer[Struct_tagVARIANT],Pointer[Struct_tagEXCEPINFO],Pointer[UInt]),(CLong)],
    get_nodeName : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Pointer[UShort]]),(CLong)],
    get_nodeValue : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Struct_tagVARIANT]),(CLong)],
    put_nodeValue : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Struct_tagVARIANT),(CLong)],
    get_nodeType : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Int]),(CLong)],
    get_parentNode : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_childNodes : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Pointer[Struct_IXMLDOMNodeList]]),(CLong)],
    get_firstChild : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_lastChild : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_previousSibling : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nextSibling : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_attributes : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Pointer[Struct_IXMLDOMNamedNodeMap]]),(CLong)],
    insertBefore : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Struct_IXMLDOMNode],Struct_tagVARIANT,Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    replaceChild : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Struct_IXMLDOMNode],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    removeChild : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    appendChild : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    hasChildNodes : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Short]),(CLong)],
    get_ownerDocument : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Pointer[Struct_IXMLDOMDocument]]),(CLong)],
    cloneNode : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Short,Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nodeTypeString : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Pointer[UShort]]),(CLong)],
    get_text : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Pointer[UShort]]),(CLong)],
    put_text : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[UShort]),(CLong)],
    get_specified : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Short]),(CLong)],
    get_definition : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nodeTypedValue : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Struct_tagVARIANT]),(CLong)],
    put_nodeTypedValue : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Struct_tagVARIANT),(CLong)],
    get_dataType : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Struct_tagVARIANT]),(CLong)],
    put_dataType : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[UShort]),(CLong)],
    get_xml : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Pointer[UShort]]),(CLong)],
    transformNode : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[UShort]]),(CLong)],
    selectNodes : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMNodeList]]),(CLong)],
    selectSingleNode : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_parsed : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Short]),(CLong)],
    get_namespaceURI : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Pointer[UShort]]),(CLong)],
    get_prefix : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Pointer[UShort]]),(CLong)],
    get_baseName : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Pointer[UShort]]),(CLong)],
    transformNodeToObject : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Struct_IXMLDOMNode],Struct_tagVARIANT),(CLong)],
    get_doctype : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Pointer[Struct_IXMLDOMDocumentType]]),(CLong)],
    get_implementation : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Pointer[Struct_IXMLDOMImplementation]]),(CLong)],
    get_documentElement : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Pointer[Struct_IXMLDOMElement]]),(CLong)],
    putref_documentElement : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Struct_IXMLDOMElement]),(CLong)],
    createElement : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMElement]]),(CLong)],
    createDocumentFragment : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Pointer[Struct_IXMLDOMDocumentFragment]]),(CLong)],
    createTextNode : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMText]]),(CLong)],
    createComment : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMComment]]),(CLong)],
    createCDATASection : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMCDATASection]]),(CLong)],
    createProcessingInstruction : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[UShort],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMProcessingInstruction]]),(CLong)],
    createAttribute : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMAttribute]]),(CLong)],
    createEntityReference : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMEntityReference]]),(CLong)],
    getElementsByTagName : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMNodeList]]),(CLong)],
    createNode : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Struct_tagVARIANT,Pointer[UShort],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    nodeFromID : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    load : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Struct_tagVARIANT,Pointer[Short]),(CLong)],
    get_readyState : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[CLong]),(CLong)],
    get_parseError : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Pointer[Struct_IXMLDOMParseError]]),(CLong)],
    get_url : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Pointer[UShort]]),(CLong)],
    get_async : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Short]),(CLong)],
    put_async : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Short),(CLong)],
    abort : CCodePointer[(Pointer[Struct_IXMLDOMDocument]),(CLong)],
    loadXML : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[UShort],Pointer[Short]),(CLong)],
    save : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Struct_tagVARIANT),(CLong)],
    get_validateOnParse : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Short]),(CLong)],
    put_validateOnParse : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Short),(CLong)],
    get_resolveExternals : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Short]),(CLong)],
    put_resolveExternals : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Short),(CLong)],
    get_preserveWhiteSpace : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Pointer[Short]),(CLong)],
    put_preserveWhiteSpace : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Short),(CLong)],
    put_onreadystatechange : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Struct_tagVARIANT),(CLong)],
    put_ondataavailable : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Struct_tagVARIANT),(CLong)],
    put_ontransformnode : CCodePointer[(Pointer[Struct_IXMLDOMDocument],Struct_tagVARIANT),(CLong)],
);

alias IXMLDOMDocumentVtbl = Struct_IXMLDOMDocumentVtbl;

record Struct_IXMLDOMDocument (
    lpVtbl : Pointer[Struct_IXMLDOMDocumentVtbl],
);

external IXMLDOMDocument_get_doctype_Proxy(
    This : Pointer[IXMLDOMDocument],
    documentType : Pointer[Pointer[IXMLDOMDocumentType]]) CLong;

external IXMLDOMDocument_get_doctype_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMDocument_get_implementation_Proxy(
    This : Pointer[IXMLDOMDocument],
    impl : Pointer[Pointer[IXMLDOMImplementation]]) CLong;

external IXMLDOMDocument_get_implementation_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMDocument_get_documentElement_Proxy(
    This : Pointer[IXMLDOMDocument],
    DOMElement : Pointer[Pointer[IXMLDOMElement]]) CLong;

external IXMLDOMDocument_get_documentElement_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMDocument_putref_documentElement_Proxy(
    This : Pointer[IXMLDOMDocument],
    DOMElement : Pointer[IXMLDOMElement]) CLong;

external IXMLDOMDocument_putref_documentElement_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMDocument_createElement_Proxy(
    This : Pointer[IXMLDOMDocument],
    tagName : BSTR,
    element : Pointer[Pointer[IXMLDOMElement]]) CLong;

external IXMLDOMDocument_createElement_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMDocument_createDocumentFragment_Proxy(
    This : Pointer[IXMLDOMDocument],
    docFrag : Pointer[Pointer[IXMLDOMDocumentFragment]]) CLong;

external IXMLDOMDocument_createDocumentFragment_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMDocument_createTextNode_Proxy(
    This : Pointer[IXMLDOMDocument],
    data : BSTR,
    text : Pointer[Pointer[IXMLDOMText]]) CLong;

external IXMLDOMDocument_createTextNode_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMDocument_createComment_Proxy(
    This : Pointer[IXMLDOMDocument],
    data : BSTR,
    comment : Pointer[Pointer[IXMLDOMComment]]) CLong;

external IXMLDOMDocument_createComment_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMDocument_createCDATASection_Proxy(
    This : Pointer[IXMLDOMDocument],
    data : BSTR,
    cdata : Pointer[Pointer[IXMLDOMCDATASection]]) CLong;

external IXMLDOMDocument_createCDATASection_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMDocument_createProcessingInstruction_Proxy(
    This : Pointer[IXMLDOMDocument],
    target : BSTR,
    data : BSTR,
    pi : Pointer[Pointer[IXMLDOMProcessingInstruction]]) CLong;

external IXMLDOMDocument_createProcessingInstruction_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMDocument_createAttribute_Proxy(
    This : Pointer[IXMLDOMDocument],
    name : BSTR,
    attribute : Pointer[Pointer[IXMLDOMAttribute]]) CLong;

external IXMLDOMDocument_createAttribute_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMDocument_createEntityReference_Proxy(
    This : Pointer[IXMLDOMDocument],
    name : BSTR,
    entityRef : Pointer[Pointer[IXMLDOMEntityReference]]) CLong;

external IXMLDOMDocument_createEntityReference_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMDocument_getElementsByTagName_Proxy(
    This : Pointer[IXMLDOMDocument],
    tagName : BSTR,
    resultList : Pointer[Pointer[IXMLDOMNodeList]]) CLong;

external IXMLDOMDocument_getElementsByTagName_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMDocument_createNode_Proxy(
    This : Pointer[IXMLDOMDocument],
    Type : VARIANT,
    name : BSTR,
    namespaceURI : BSTR,
    node : Pointer[Pointer[IXMLDOMNode]]) CLong;

external IXMLDOMDocument_createNode_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMDocument_nodeFromID_Proxy(
    This : Pointer[IXMLDOMDocument],
    idString : BSTR,
    node : Pointer[Pointer[IXMLDOMNode]]) CLong;

external IXMLDOMDocument_nodeFromID_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMDocument_load_Proxy(
    This : Pointer[IXMLDOMDocument],
    xmlSource : VARIANT,
    isSuccessful : Pointer[Short]) CLong;

external IXMLDOMDocument_load_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMDocument_get_readyState_Proxy(
    This : Pointer[IXMLDOMDocument],
    value : Pointer[CLong]) CLong;

external IXMLDOMDocument_get_readyState_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMDocument_get_parseError_Proxy(
    This : Pointer[IXMLDOMDocument],
    errorObj : Pointer[Pointer[IXMLDOMParseError]]) CLong;

external IXMLDOMDocument_get_parseError_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMDocument_get_url_Proxy(
    This : Pointer[IXMLDOMDocument],
    urlString : Pointer[BSTR]) CLong;

external IXMLDOMDocument_get_url_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMDocument_get_async_Proxy(
    This : Pointer[IXMLDOMDocument],
    isAsync : Pointer[Short]) CLong;

external IXMLDOMDocument_get_async_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMDocument_put_async_Proxy(
    This : Pointer[IXMLDOMDocument],
    isAsync : Short) CLong;

external IXMLDOMDocument_put_async_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMDocument_abort_Proxy(
    This : Pointer[IXMLDOMDocument]) CLong;

external IXMLDOMDocument_abort_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMDocument_loadXML_Proxy(
    This : Pointer[IXMLDOMDocument],
    bstrXML : BSTR,
    isSuccessful : Pointer[Short]) CLong;

external IXMLDOMDocument_loadXML_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMDocument_save_Proxy(
    This : Pointer[IXMLDOMDocument],
    destination : VARIANT) CLong;

external IXMLDOMDocument_save_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMDocument_get_validateOnParse_Proxy(
    This : Pointer[IXMLDOMDocument],
    isValidating : Pointer[Short]) CLong;

external IXMLDOMDocument_get_validateOnParse_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMDocument_put_validateOnParse_Proxy(
    This : Pointer[IXMLDOMDocument],
    isValidating : Short) CLong;

external IXMLDOMDocument_put_validateOnParse_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMDocument_get_resolveExternals_Proxy(
    This : Pointer[IXMLDOMDocument],
    isResolving : Pointer[Short]) CLong;

external IXMLDOMDocument_get_resolveExternals_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMDocument_put_resolveExternals_Proxy(
    This : Pointer[IXMLDOMDocument],
    isResolving : Short) CLong;

external IXMLDOMDocument_put_resolveExternals_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMDocument_get_preserveWhiteSpace_Proxy(
    This : Pointer[IXMLDOMDocument],
    isPreserving : Pointer[Short]) CLong;

external IXMLDOMDocument_get_preserveWhiteSpace_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMDocument_put_preserveWhiteSpace_Proxy(
    This : Pointer[IXMLDOMDocument],
    isPreserving : Short) CLong;

external IXMLDOMDocument_put_preserveWhiteSpace_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMDocument_put_onreadystatechange_Proxy(
    This : Pointer[IXMLDOMDocument],
    readystatechangeSink : VARIANT) CLong;

external IXMLDOMDocument_put_onreadystatechange_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMDocument_put_ondataavailable_Proxy(
    This : Pointer[IXMLDOMDocument],
    ondataavailableSink : VARIANT) CLong;

external IXMLDOMDocument_put_ondataavailable_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMDocument_put_ontransformnode_Proxy(
    This : Pointer[IXMLDOMDocument],
    ontransformnodeSink : VARIANT) CLong;

external IXMLDOMDocument_put_ontransformnode_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IXMLDOMNodeList : IID;

record Struct_IXMLDOMNodeListVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IXMLDOMNodeList],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IXMLDOMNodeList]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IXMLDOMNodeList]),(CULong)],
    GetTypeInfoCount : CCodePointer[(Pointer[Struct_IXMLDOMNodeList],Pointer[UInt]),(CLong)],
    GetTypeInfo : CCodePointer[(Pointer[Struct_IXMLDOMNodeList],UInt,CULong,Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetIDsOfNames : CCodePointer[(Pointer[Struct_IXMLDOMNodeList],Pointer[Struct__GUID],Pointer[Pointer[UShort]],UInt,CULong,Pointer[CLong]),(CLong)],
    Invoke : CCodePointer[(Pointer[Struct_IXMLDOMNodeList],CLong,Pointer[Struct__GUID],CULong,UShort,Pointer[Struct_tagDISPPARAMS],Pointer[Struct_tagVARIANT],Pointer[Struct_tagEXCEPINFO],Pointer[UInt]),(CLong)],
    get_item : CCodePointer[(Pointer[Struct_IXMLDOMNodeList],CLong,Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_length : CCodePointer[(Pointer[Struct_IXMLDOMNodeList],Pointer[CLong]),(CLong)],
    nextNode : CCodePointer[(Pointer[Struct_IXMLDOMNodeList],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    reset : CCodePointer[(Pointer[Struct_IXMLDOMNodeList]),(CLong)],
    get__newEnum : CCodePointer[(Pointer[Struct_IXMLDOMNodeList],Pointer[Pointer[Struct_IUnknown]]),(CLong)],
);

alias IXMLDOMNodeListVtbl = Struct_IXMLDOMNodeListVtbl;

record Struct_IXMLDOMNodeList (
    lpVtbl : Pointer[Struct_IXMLDOMNodeListVtbl],
);

external IXMLDOMNodeList_get_item_Proxy(
    This : Pointer[IXMLDOMNodeList],
    index : CLong,
    listItem : Pointer[Pointer[IXMLDOMNode]]) CLong;

external IXMLDOMNodeList_get_item_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNodeList_get_length_Proxy(
    This : Pointer[IXMLDOMNodeList],
    listLength : Pointer[CLong]) CLong;

external IXMLDOMNodeList_get_length_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNodeList_nextNode_Proxy(
    This : Pointer[IXMLDOMNodeList],
    nextItem : Pointer[Pointer[IXMLDOMNode]]) CLong;

external IXMLDOMNodeList_nextNode_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNodeList_reset_Proxy(
    This : Pointer[IXMLDOMNodeList]) CLong;

external IXMLDOMNodeList_reset_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNodeList_get__newEnum_Proxy(
    This : Pointer[IXMLDOMNodeList],
    ppUnk : Pointer[Pointer[IUnknown]]) CLong;

external IXMLDOMNodeList_get__newEnum_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IXMLDOMNamedNodeMap : IID;

record Struct_IXMLDOMNamedNodeMapVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IXMLDOMNamedNodeMap],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IXMLDOMNamedNodeMap]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IXMLDOMNamedNodeMap]),(CULong)],
    GetTypeInfoCount : CCodePointer[(Pointer[Struct_IXMLDOMNamedNodeMap],Pointer[UInt]),(CLong)],
    GetTypeInfo : CCodePointer[(Pointer[Struct_IXMLDOMNamedNodeMap],UInt,CULong,Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetIDsOfNames : CCodePointer[(Pointer[Struct_IXMLDOMNamedNodeMap],Pointer[Struct__GUID],Pointer[Pointer[UShort]],UInt,CULong,Pointer[CLong]),(CLong)],
    Invoke : CCodePointer[(Pointer[Struct_IXMLDOMNamedNodeMap],CLong,Pointer[Struct__GUID],CULong,UShort,Pointer[Struct_tagDISPPARAMS],Pointer[Struct_tagVARIANT],Pointer[Struct_tagEXCEPINFO],Pointer[UInt]),(CLong)],
    getNamedItem : CCodePointer[(Pointer[Struct_IXMLDOMNamedNodeMap],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    setNamedItem : CCodePointer[(Pointer[Struct_IXMLDOMNamedNodeMap],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    removeNamedItem : CCodePointer[(Pointer[Struct_IXMLDOMNamedNodeMap],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_item : CCodePointer[(Pointer[Struct_IXMLDOMNamedNodeMap],CLong,Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_length : CCodePointer[(Pointer[Struct_IXMLDOMNamedNodeMap],Pointer[CLong]),(CLong)],
    getQualifiedItem : CCodePointer[(Pointer[Struct_IXMLDOMNamedNodeMap],Pointer[UShort],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    removeQualifiedItem : CCodePointer[(Pointer[Struct_IXMLDOMNamedNodeMap],Pointer[UShort],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    nextNode : CCodePointer[(Pointer[Struct_IXMLDOMNamedNodeMap],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    reset : CCodePointer[(Pointer[Struct_IXMLDOMNamedNodeMap]),(CLong)],
    get__newEnum : CCodePointer[(Pointer[Struct_IXMLDOMNamedNodeMap],Pointer[Pointer[Struct_IUnknown]]),(CLong)],
);

alias IXMLDOMNamedNodeMapVtbl = Struct_IXMLDOMNamedNodeMapVtbl;

record Struct_IXMLDOMNamedNodeMap (
    lpVtbl : Pointer[Struct_IXMLDOMNamedNodeMapVtbl],
);

external IXMLDOMNamedNodeMap_getNamedItem_Proxy(
    This : Pointer[IXMLDOMNamedNodeMap],
    name : BSTR,
    namedItem : Pointer[Pointer[IXMLDOMNode]]) CLong;

external IXMLDOMNamedNodeMap_getNamedItem_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNamedNodeMap_setNamedItem_Proxy(
    This : Pointer[IXMLDOMNamedNodeMap],
    newItem : Pointer[IXMLDOMNode],
    nameItem : Pointer[Pointer[IXMLDOMNode]]) CLong;

external IXMLDOMNamedNodeMap_setNamedItem_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNamedNodeMap_removeNamedItem_Proxy(
    This : Pointer[IXMLDOMNamedNodeMap],
    name : BSTR,
    namedItem : Pointer[Pointer[IXMLDOMNode]]) CLong;

external IXMLDOMNamedNodeMap_removeNamedItem_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNamedNodeMap_get_item_Proxy(
    This : Pointer[IXMLDOMNamedNodeMap],
    index : CLong,
    listItem : Pointer[Pointer[IXMLDOMNode]]) CLong;

external IXMLDOMNamedNodeMap_get_item_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNamedNodeMap_get_length_Proxy(
    This : Pointer[IXMLDOMNamedNodeMap],
    listLength : Pointer[CLong]) CLong;

external IXMLDOMNamedNodeMap_get_length_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNamedNodeMap_getQualifiedItem_Proxy(
    This : Pointer[IXMLDOMNamedNodeMap],
    baseName : BSTR,
    namespaceURI : BSTR,
    qualifiedItem : Pointer[Pointer[IXMLDOMNode]]) CLong;

external IXMLDOMNamedNodeMap_getQualifiedItem_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNamedNodeMap_removeQualifiedItem_Proxy(
    This : Pointer[IXMLDOMNamedNodeMap],
    baseName : BSTR,
    namespaceURI : BSTR,
    qualifiedItem : Pointer[Pointer[IXMLDOMNode]]) CLong;

external IXMLDOMNamedNodeMap_removeQualifiedItem_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNamedNodeMap_nextNode_Proxy(
    This : Pointer[IXMLDOMNamedNodeMap],
    nextItem : Pointer[Pointer[IXMLDOMNode]]) CLong;

external IXMLDOMNamedNodeMap_nextNode_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNamedNodeMap_reset_Proxy(
    This : Pointer[IXMLDOMNamedNodeMap]) CLong;

external IXMLDOMNamedNodeMap_reset_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNamedNodeMap_get__newEnum_Proxy(
    This : Pointer[IXMLDOMNamedNodeMap],
    ppUnk : Pointer[Pointer[IUnknown]]) CLong;

external IXMLDOMNamedNodeMap_get__newEnum_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IXMLDOMCharacterData : IID;

record Struct_IXMLDOMCharacterDataVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData]),(CULong)],
    GetTypeInfoCount : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[UInt]),(CLong)],
    GetTypeInfo : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],UInt,CULong,Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetIDsOfNames : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[Struct__GUID],Pointer[Pointer[UShort]],UInt,CULong,Pointer[CLong]),(CLong)],
    Invoke : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],CLong,Pointer[Struct__GUID],CULong,UShort,Pointer[Struct_tagDISPPARAMS],Pointer[Struct_tagVARIANT],Pointer[Struct_tagEXCEPINFO],Pointer[UInt]),(CLong)],
    get_nodeName : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[Pointer[UShort]]),(CLong)],
    get_nodeValue : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[Struct_tagVARIANT]),(CLong)],
    put_nodeValue : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Struct_tagVARIANT),(CLong)],
    get_nodeType : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[Int]),(CLong)],
    get_parentNode : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_childNodes : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[Pointer[Struct_IXMLDOMNodeList]]),(CLong)],
    get_firstChild : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_lastChild : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_previousSibling : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nextSibling : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_attributes : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[Pointer[Struct_IXMLDOMNamedNodeMap]]),(CLong)],
    insertBefore : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[Struct_IXMLDOMNode],Struct_tagVARIANT,Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    replaceChild : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[Struct_IXMLDOMNode],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    removeChild : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    appendChild : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    hasChildNodes : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[Short]),(CLong)],
    get_ownerDocument : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[Pointer[Struct_IXMLDOMDocument]]),(CLong)],
    cloneNode : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Short,Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nodeTypeString : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[Pointer[UShort]]),(CLong)],
    get_text : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[Pointer[UShort]]),(CLong)],
    put_text : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[UShort]),(CLong)],
    get_specified : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[Short]),(CLong)],
    get_definition : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nodeTypedValue : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[Struct_tagVARIANT]),(CLong)],
    put_nodeTypedValue : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Struct_tagVARIANT),(CLong)],
    get_dataType : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[Struct_tagVARIANT]),(CLong)],
    put_dataType : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[UShort]),(CLong)],
    get_xml : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[Pointer[UShort]]),(CLong)],
    transformNode : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[UShort]]),(CLong)],
    selectNodes : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMNodeList]]),(CLong)],
    selectSingleNode : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_parsed : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[Short]),(CLong)],
    get_namespaceURI : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[Pointer[UShort]]),(CLong)],
    get_prefix : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[Pointer[UShort]]),(CLong)],
    get_baseName : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[Pointer[UShort]]),(CLong)],
    transformNodeToObject : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[Struct_IXMLDOMNode],Struct_tagVARIANT),(CLong)],
    get_data : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[Pointer[UShort]]),(CLong)],
    put_data : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[UShort]),(CLong)],
    get_length : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[CLong]),(CLong)],
    substringData : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],CLong,CLong,Pointer[Pointer[UShort]]),(CLong)],
    appendData : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],Pointer[UShort]),(CLong)],
    insertData : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],CLong,Pointer[UShort]),(CLong)],
    deleteData : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],CLong,CLong),(CLong)],
    replaceData : CCodePointer[(Pointer[Struct_IXMLDOMCharacterData],CLong,CLong,Pointer[UShort]),(CLong)],
);

alias IXMLDOMCharacterDataVtbl = Struct_IXMLDOMCharacterDataVtbl;

record Struct_IXMLDOMCharacterData (
    lpVtbl : Pointer[Struct_IXMLDOMCharacterDataVtbl],
);

external IXMLDOMCharacterData_get_data_Proxy(
    This : Pointer[IXMLDOMCharacterData],
    data : Pointer[BSTR]) CLong;

external IXMLDOMCharacterData_get_data_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMCharacterData_put_data_Proxy(
    This : Pointer[IXMLDOMCharacterData],
    data : BSTR) CLong;

external IXMLDOMCharacterData_put_data_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMCharacterData_get_length_Proxy(
    This : Pointer[IXMLDOMCharacterData],
    dataLength : Pointer[CLong]) CLong;

external IXMLDOMCharacterData_get_length_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMCharacterData_substringData_Proxy(
    This : Pointer[IXMLDOMCharacterData],
    offset : CLong,
    count : CLong,
    data : Pointer[BSTR]) CLong;

external IXMLDOMCharacterData_substringData_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMCharacterData_appendData_Proxy(
    This : Pointer[IXMLDOMCharacterData],
    data : BSTR) CLong;

external IXMLDOMCharacterData_appendData_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMCharacterData_insertData_Proxy(
    This : Pointer[IXMLDOMCharacterData],
    offset : CLong,
    data : BSTR) CLong;

external IXMLDOMCharacterData_insertData_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMCharacterData_deleteData_Proxy(
    This : Pointer[IXMLDOMCharacterData],
    offset : CLong,
    count : CLong) CLong;

external IXMLDOMCharacterData_deleteData_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMCharacterData_replaceData_Proxy(
    This : Pointer[IXMLDOMCharacterData],
    offset : CLong,
    count : CLong,
    data : BSTR) CLong;

external IXMLDOMCharacterData_replaceData_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IXMLDOMAttribute : IID;

record Struct_IXMLDOMAttributeVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IXMLDOMAttribute]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IXMLDOMAttribute]),(CULong)],
    GetTypeInfoCount : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Pointer[UInt]),(CLong)],
    GetTypeInfo : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],UInt,CULong,Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetIDsOfNames : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Pointer[Struct__GUID],Pointer[Pointer[UShort]],UInt,CULong,Pointer[CLong]),(CLong)],
    Invoke : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],CLong,Pointer[Struct__GUID],CULong,UShort,Pointer[Struct_tagDISPPARAMS],Pointer[Struct_tagVARIANT],Pointer[Struct_tagEXCEPINFO],Pointer[UInt]),(CLong)],
    get_nodeName : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Pointer[Pointer[UShort]]),(CLong)],
    get_nodeValue : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Pointer[Struct_tagVARIANT]),(CLong)],
    put_nodeValue : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Struct_tagVARIANT),(CLong)],
    get_nodeType : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Pointer[Int]),(CLong)],
    get_parentNode : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_childNodes : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Pointer[Pointer[Struct_IXMLDOMNodeList]]),(CLong)],
    get_firstChild : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_lastChild : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_previousSibling : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nextSibling : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_attributes : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Pointer[Pointer[Struct_IXMLDOMNamedNodeMap]]),(CLong)],
    insertBefore : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Pointer[Struct_IXMLDOMNode],Struct_tagVARIANT,Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    replaceChild : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Pointer[Struct_IXMLDOMNode],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    removeChild : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    appendChild : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    hasChildNodes : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Pointer[Short]),(CLong)],
    get_ownerDocument : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Pointer[Pointer[Struct_IXMLDOMDocument]]),(CLong)],
    cloneNode : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Short,Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nodeTypeString : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Pointer[Pointer[UShort]]),(CLong)],
    get_text : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Pointer[Pointer[UShort]]),(CLong)],
    put_text : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Pointer[UShort]),(CLong)],
    get_specified : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Pointer[Short]),(CLong)],
    get_definition : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nodeTypedValue : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Pointer[Struct_tagVARIANT]),(CLong)],
    put_nodeTypedValue : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Struct_tagVARIANT),(CLong)],
    get_dataType : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Pointer[Struct_tagVARIANT]),(CLong)],
    put_dataType : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Pointer[UShort]),(CLong)],
    get_xml : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Pointer[Pointer[UShort]]),(CLong)],
    transformNode : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[UShort]]),(CLong)],
    selectNodes : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMNodeList]]),(CLong)],
    selectSingleNode : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_parsed : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Pointer[Short]),(CLong)],
    get_namespaceURI : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Pointer[Pointer[UShort]]),(CLong)],
    get_prefix : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Pointer[Pointer[UShort]]),(CLong)],
    get_baseName : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Pointer[Pointer[UShort]]),(CLong)],
    transformNodeToObject : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Pointer[Struct_IXMLDOMNode],Struct_tagVARIANT),(CLong)],
    get_name : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Pointer[Pointer[UShort]]),(CLong)],
    get_value : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Pointer[Struct_tagVARIANT]),(CLong)],
    put_value : CCodePointer[(Pointer[Struct_IXMLDOMAttribute],Struct_tagVARIANT),(CLong)],
);

alias IXMLDOMAttributeVtbl = Struct_IXMLDOMAttributeVtbl;

record Struct_IXMLDOMAttribute (
    lpVtbl : Pointer[Struct_IXMLDOMAttributeVtbl],
);

external IXMLDOMAttribute_get_name_Proxy(
    This : Pointer[IXMLDOMAttribute],
    attributeName : Pointer[BSTR]) CLong;

external IXMLDOMAttribute_get_name_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMAttribute_get_value_Proxy(
    This : Pointer[IXMLDOMAttribute],
    attributeValue : Pointer[VARIANT]) CLong;

external IXMLDOMAttribute_get_value_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMAttribute_put_value_Proxy(
    This : Pointer[IXMLDOMAttribute],
    attributeValue : VARIANT) CLong;

external IXMLDOMAttribute_put_value_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IXMLDOMElement : IID;

record Struct_IXMLDOMElementVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IXMLDOMElement]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IXMLDOMElement]),(CULong)],
    GetTypeInfoCount : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[UInt]),(CLong)],
    GetTypeInfo : CCodePointer[(Pointer[Struct_IXMLDOMElement],UInt,CULong,Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetIDsOfNames : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[Struct__GUID],Pointer[Pointer[UShort]],UInt,CULong,Pointer[CLong]),(CLong)],
    Invoke : CCodePointer[(Pointer[Struct_IXMLDOMElement],CLong,Pointer[Struct__GUID],CULong,UShort,Pointer[Struct_tagDISPPARAMS],Pointer[Struct_tagVARIANT],Pointer[Struct_tagEXCEPINFO],Pointer[UInt]),(CLong)],
    get_nodeName : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[Pointer[UShort]]),(CLong)],
    get_nodeValue : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[Struct_tagVARIANT]),(CLong)],
    put_nodeValue : CCodePointer[(Pointer[Struct_IXMLDOMElement],Struct_tagVARIANT),(CLong)],
    get_nodeType : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[Int]),(CLong)],
    get_parentNode : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_childNodes : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[Pointer[Struct_IXMLDOMNodeList]]),(CLong)],
    get_firstChild : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_lastChild : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_previousSibling : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nextSibling : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_attributes : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[Pointer[Struct_IXMLDOMNamedNodeMap]]),(CLong)],
    insertBefore : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[Struct_IXMLDOMNode],Struct_tagVARIANT,Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    replaceChild : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[Struct_IXMLDOMNode],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    removeChild : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    appendChild : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    hasChildNodes : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[Short]),(CLong)],
    get_ownerDocument : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[Pointer[Struct_IXMLDOMDocument]]),(CLong)],
    cloneNode : CCodePointer[(Pointer[Struct_IXMLDOMElement],Short,Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nodeTypeString : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[Pointer[UShort]]),(CLong)],
    get_text : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[Pointer[UShort]]),(CLong)],
    put_text : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[UShort]),(CLong)],
    get_specified : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[Short]),(CLong)],
    get_definition : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nodeTypedValue : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[Struct_tagVARIANT]),(CLong)],
    put_nodeTypedValue : CCodePointer[(Pointer[Struct_IXMLDOMElement],Struct_tagVARIANT),(CLong)],
    get_dataType : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[Struct_tagVARIANT]),(CLong)],
    put_dataType : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[UShort]),(CLong)],
    get_xml : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[Pointer[UShort]]),(CLong)],
    transformNode : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[UShort]]),(CLong)],
    selectNodes : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMNodeList]]),(CLong)],
    selectSingleNode : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_parsed : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[Short]),(CLong)],
    get_namespaceURI : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[Pointer[UShort]]),(CLong)],
    get_prefix : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[Pointer[UShort]]),(CLong)],
    get_baseName : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[Pointer[UShort]]),(CLong)],
    transformNodeToObject : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[Struct_IXMLDOMNode],Struct_tagVARIANT),(CLong)],
    get_tagName : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[Pointer[UShort]]),(CLong)],
    getAttribute : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[UShort],Pointer[Struct_tagVARIANT]),(CLong)],
    setAttribute : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[UShort],Struct_tagVARIANT),(CLong)],
    removeAttribute : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[UShort]),(CLong)],
    getAttributeNode : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMAttribute]]),(CLong)],
    setAttributeNode : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[Struct_IXMLDOMAttribute],Pointer[Pointer[Struct_IXMLDOMAttribute]]),(CLong)],
    removeAttributeNode : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[Struct_IXMLDOMAttribute],Pointer[Pointer[Struct_IXMLDOMAttribute]]),(CLong)],
    getElementsByTagName : CCodePointer[(Pointer[Struct_IXMLDOMElement],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMNodeList]]),(CLong)],
    normalize : CCodePointer[(Pointer[Struct_IXMLDOMElement]),(CLong)],
);

alias IXMLDOMElementVtbl = Struct_IXMLDOMElementVtbl;

record Struct_IXMLDOMElement (
    lpVtbl : Pointer[Struct_IXMLDOMElementVtbl],
);

external IXMLDOMElement_get_tagName_Proxy(
    This : Pointer[IXMLDOMElement],
    tagName : Pointer[BSTR]) CLong;

external IXMLDOMElement_get_tagName_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMElement_getAttribute_Proxy(
    This : Pointer[IXMLDOMElement],
    name : BSTR,
    value : Pointer[VARIANT]) CLong;

external IXMLDOMElement_getAttribute_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMElement_setAttribute_Proxy(
    This : Pointer[IXMLDOMElement],
    name : BSTR,
    value : VARIANT) CLong;

external IXMLDOMElement_setAttribute_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMElement_removeAttribute_Proxy(
    This : Pointer[IXMLDOMElement],
    name : BSTR) CLong;

external IXMLDOMElement_removeAttribute_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMElement_getAttributeNode_Proxy(
    This : Pointer[IXMLDOMElement],
    name : BSTR,
    attributeNode : Pointer[Pointer[IXMLDOMAttribute]]) CLong;

external IXMLDOMElement_getAttributeNode_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMElement_setAttributeNode_Proxy(
    This : Pointer[IXMLDOMElement],
    DOMAttribute : Pointer[IXMLDOMAttribute],
    attributeNode : Pointer[Pointer[IXMLDOMAttribute]]) CLong;

external IXMLDOMElement_setAttributeNode_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMElement_removeAttributeNode_Proxy(
    This : Pointer[IXMLDOMElement],
    DOMAttribute : Pointer[IXMLDOMAttribute],
    attributeNode : Pointer[Pointer[IXMLDOMAttribute]]) CLong;

external IXMLDOMElement_removeAttributeNode_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMElement_getElementsByTagName_Proxy(
    This : Pointer[IXMLDOMElement],
    tagName : BSTR,
    resultList : Pointer[Pointer[IXMLDOMNodeList]]) CLong;

external IXMLDOMElement_getElementsByTagName_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMElement_normalize_Proxy(
    This : Pointer[IXMLDOMElement]) CLong;

external IXMLDOMElement_normalize_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IXMLDOMText : IID;

record Struct_IXMLDOMTextVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IXMLDOMText]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IXMLDOMText]),(CULong)],
    GetTypeInfoCount : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[UInt]),(CLong)],
    GetTypeInfo : CCodePointer[(Pointer[Struct_IXMLDOMText],UInt,CULong,Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetIDsOfNames : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[Struct__GUID],Pointer[Pointer[UShort]],UInt,CULong,Pointer[CLong]),(CLong)],
    Invoke : CCodePointer[(Pointer[Struct_IXMLDOMText],CLong,Pointer[Struct__GUID],CULong,UShort,Pointer[Struct_tagDISPPARAMS],Pointer[Struct_tagVARIANT],Pointer[Struct_tagEXCEPINFO],Pointer[UInt]),(CLong)],
    get_nodeName : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[Pointer[UShort]]),(CLong)],
    get_nodeValue : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[Struct_tagVARIANT]),(CLong)],
    put_nodeValue : CCodePointer[(Pointer[Struct_IXMLDOMText],Struct_tagVARIANT),(CLong)],
    get_nodeType : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[Int]),(CLong)],
    get_parentNode : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_childNodes : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[Pointer[Struct_IXMLDOMNodeList]]),(CLong)],
    get_firstChild : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_lastChild : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_previousSibling : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nextSibling : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_attributes : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[Pointer[Struct_IXMLDOMNamedNodeMap]]),(CLong)],
    insertBefore : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[Struct_IXMLDOMNode],Struct_tagVARIANT,Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    replaceChild : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[Struct_IXMLDOMNode],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    removeChild : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    appendChild : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    hasChildNodes : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[Short]),(CLong)],
    get_ownerDocument : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[Pointer[Struct_IXMLDOMDocument]]),(CLong)],
    cloneNode : CCodePointer[(Pointer[Struct_IXMLDOMText],Short,Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nodeTypeString : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[Pointer[UShort]]),(CLong)],
    get_text : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[Pointer[UShort]]),(CLong)],
    put_text : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[UShort]),(CLong)],
    get_specified : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[Short]),(CLong)],
    get_definition : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nodeTypedValue : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[Struct_tagVARIANT]),(CLong)],
    put_nodeTypedValue : CCodePointer[(Pointer[Struct_IXMLDOMText],Struct_tagVARIANT),(CLong)],
    get_dataType : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[Struct_tagVARIANT]),(CLong)],
    put_dataType : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[UShort]),(CLong)],
    get_xml : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[Pointer[UShort]]),(CLong)],
    transformNode : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[UShort]]),(CLong)],
    selectNodes : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMNodeList]]),(CLong)],
    selectSingleNode : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_parsed : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[Short]),(CLong)],
    get_namespaceURI : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[Pointer[UShort]]),(CLong)],
    get_prefix : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[Pointer[UShort]]),(CLong)],
    get_baseName : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[Pointer[UShort]]),(CLong)],
    transformNodeToObject : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[Struct_IXMLDOMNode],Struct_tagVARIANT),(CLong)],
    get_data : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[Pointer[UShort]]),(CLong)],
    put_data : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[UShort]),(CLong)],
    get_length : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[CLong]),(CLong)],
    substringData : CCodePointer[(Pointer[Struct_IXMLDOMText],CLong,CLong,Pointer[Pointer[UShort]]),(CLong)],
    appendData : CCodePointer[(Pointer[Struct_IXMLDOMText],Pointer[UShort]),(CLong)],
    insertData : CCodePointer[(Pointer[Struct_IXMLDOMText],CLong,Pointer[UShort]),(CLong)],
    deleteData : CCodePointer[(Pointer[Struct_IXMLDOMText],CLong,CLong),(CLong)],
    replaceData : CCodePointer[(Pointer[Struct_IXMLDOMText],CLong,CLong,Pointer[UShort]),(CLong)],
    splitText : CCodePointer[(Pointer[Struct_IXMLDOMText],CLong,Pointer[Pointer[Struct_IXMLDOMText]]),(CLong)],
);

alias IXMLDOMTextVtbl = Struct_IXMLDOMTextVtbl;

record Struct_IXMLDOMText (
    lpVtbl : Pointer[Struct_IXMLDOMTextVtbl],
);

external IXMLDOMText_splitText_Proxy(
    This : Pointer[IXMLDOMText],
    offset : CLong,
    rightHandTextNode : Pointer[Pointer[IXMLDOMText]]) CLong;

external IXMLDOMText_splitText_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IXMLDOMComment : IID;

record Struct_IXMLDOMCommentVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IXMLDOMComment]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IXMLDOMComment]),(CULong)],
    GetTypeInfoCount : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[UInt]),(CLong)],
    GetTypeInfo : CCodePointer[(Pointer[Struct_IXMLDOMComment],UInt,CULong,Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetIDsOfNames : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[Struct__GUID],Pointer[Pointer[UShort]],UInt,CULong,Pointer[CLong]),(CLong)],
    Invoke : CCodePointer[(Pointer[Struct_IXMLDOMComment],CLong,Pointer[Struct__GUID],CULong,UShort,Pointer[Struct_tagDISPPARAMS],Pointer[Struct_tagVARIANT],Pointer[Struct_tagEXCEPINFO],Pointer[UInt]),(CLong)],
    get_nodeName : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[Pointer[UShort]]),(CLong)],
    get_nodeValue : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[Struct_tagVARIANT]),(CLong)],
    put_nodeValue : CCodePointer[(Pointer[Struct_IXMLDOMComment],Struct_tagVARIANT),(CLong)],
    get_nodeType : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[Int]),(CLong)],
    get_parentNode : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_childNodes : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[Pointer[Struct_IXMLDOMNodeList]]),(CLong)],
    get_firstChild : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_lastChild : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_previousSibling : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nextSibling : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_attributes : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[Pointer[Struct_IXMLDOMNamedNodeMap]]),(CLong)],
    insertBefore : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[Struct_IXMLDOMNode],Struct_tagVARIANT,Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    replaceChild : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[Struct_IXMLDOMNode],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    removeChild : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    appendChild : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    hasChildNodes : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[Short]),(CLong)],
    get_ownerDocument : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[Pointer[Struct_IXMLDOMDocument]]),(CLong)],
    cloneNode : CCodePointer[(Pointer[Struct_IXMLDOMComment],Short,Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nodeTypeString : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[Pointer[UShort]]),(CLong)],
    get_text : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[Pointer[UShort]]),(CLong)],
    put_text : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[UShort]),(CLong)],
    get_specified : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[Short]),(CLong)],
    get_definition : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nodeTypedValue : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[Struct_tagVARIANT]),(CLong)],
    put_nodeTypedValue : CCodePointer[(Pointer[Struct_IXMLDOMComment],Struct_tagVARIANT),(CLong)],
    get_dataType : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[Struct_tagVARIANT]),(CLong)],
    put_dataType : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[UShort]),(CLong)],
    get_xml : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[Pointer[UShort]]),(CLong)],
    transformNode : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[UShort]]),(CLong)],
    selectNodes : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMNodeList]]),(CLong)],
    selectSingleNode : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_parsed : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[Short]),(CLong)],
    get_namespaceURI : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[Pointer[UShort]]),(CLong)],
    get_prefix : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[Pointer[UShort]]),(CLong)],
    get_baseName : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[Pointer[UShort]]),(CLong)],
    transformNodeToObject : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[Struct_IXMLDOMNode],Struct_tagVARIANT),(CLong)],
    get_data : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[Pointer[UShort]]),(CLong)],
    put_data : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[UShort]),(CLong)],
    get_length : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[CLong]),(CLong)],
    substringData : CCodePointer[(Pointer[Struct_IXMLDOMComment],CLong,CLong,Pointer[Pointer[UShort]]),(CLong)],
    appendData : CCodePointer[(Pointer[Struct_IXMLDOMComment],Pointer[UShort]),(CLong)],
    insertData : CCodePointer[(Pointer[Struct_IXMLDOMComment],CLong,Pointer[UShort]),(CLong)],
    deleteData : CCodePointer[(Pointer[Struct_IXMLDOMComment],CLong,CLong),(CLong)],
    replaceData : CCodePointer[(Pointer[Struct_IXMLDOMComment],CLong,CLong,Pointer[UShort]),(CLong)],
);

alias IXMLDOMCommentVtbl = Struct_IXMLDOMCommentVtbl;

record Struct_IXMLDOMComment (
    lpVtbl : Pointer[Struct_IXMLDOMCommentVtbl],
);

external IID_IXMLDOMProcessingInstruction : IID;

record Struct_IXMLDOMProcessingInstructionVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction]),(CULong)],
    GetTypeInfoCount : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[UInt]),(CLong)],
    GetTypeInfo : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],UInt,CULong,Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetIDsOfNames : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[Struct__GUID],Pointer[Pointer[UShort]],UInt,CULong,Pointer[CLong]),(CLong)],
    Invoke : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],CLong,Pointer[Struct__GUID],CULong,UShort,Pointer[Struct_tagDISPPARAMS],Pointer[Struct_tagVARIANT],Pointer[Struct_tagEXCEPINFO],Pointer[UInt]),(CLong)],
    get_nodeName : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[Pointer[UShort]]),(CLong)],
    get_nodeValue : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[Struct_tagVARIANT]),(CLong)],
    put_nodeValue : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Struct_tagVARIANT),(CLong)],
    get_nodeType : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[Int]),(CLong)],
    get_parentNode : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_childNodes : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[Pointer[Struct_IXMLDOMNodeList]]),(CLong)],
    get_firstChild : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_lastChild : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_previousSibling : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nextSibling : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_attributes : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[Pointer[Struct_IXMLDOMNamedNodeMap]]),(CLong)],
    insertBefore : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[Struct_IXMLDOMNode],Struct_tagVARIANT,Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    replaceChild : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[Struct_IXMLDOMNode],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    removeChild : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    appendChild : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    hasChildNodes : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[Short]),(CLong)],
    get_ownerDocument : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[Pointer[Struct_IXMLDOMDocument]]),(CLong)],
    cloneNode : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Short,Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nodeTypeString : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[Pointer[UShort]]),(CLong)],
    get_text : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[Pointer[UShort]]),(CLong)],
    put_text : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[UShort]),(CLong)],
    get_specified : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[Short]),(CLong)],
    get_definition : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nodeTypedValue : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[Struct_tagVARIANT]),(CLong)],
    put_nodeTypedValue : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Struct_tagVARIANT),(CLong)],
    get_dataType : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[Struct_tagVARIANT]),(CLong)],
    put_dataType : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[UShort]),(CLong)],
    get_xml : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[Pointer[UShort]]),(CLong)],
    transformNode : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[UShort]]),(CLong)],
    selectNodes : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMNodeList]]),(CLong)],
    selectSingleNode : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_parsed : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[Short]),(CLong)],
    get_namespaceURI : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[Pointer[UShort]]),(CLong)],
    get_prefix : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[Pointer[UShort]]),(CLong)],
    get_baseName : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[Pointer[UShort]]),(CLong)],
    transformNodeToObject : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[Struct_IXMLDOMNode],Struct_tagVARIANT),(CLong)],
    get_target : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[Pointer[UShort]]),(CLong)],
    get_data : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[Pointer[UShort]]),(CLong)],
    put_data : CCodePointer[(Pointer[Struct_IXMLDOMProcessingInstruction],Pointer[UShort]),(CLong)],
);

alias IXMLDOMProcessingInstructionVtbl = Struct_IXMLDOMProcessingInstructionVtbl;

record Struct_IXMLDOMProcessingInstruction (
    lpVtbl : Pointer[Struct_IXMLDOMProcessingInstructionVtbl],
);

external IXMLDOMProcessingInstruction_get_target_Proxy(
    This : Pointer[IXMLDOMProcessingInstruction],
    name : Pointer[BSTR]) CLong;

external IXMLDOMProcessingInstruction_get_target_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMProcessingInstruction_get_data_Proxy(
    This : Pointer[IXMLDOMProcessingInstruction],
    value : Pointer[BSTR]) CLong;

external IXMLDOMProcessingInstruction_get_data_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMProcessingInstruction_put_data_Proxy(
    This : Pointer[IXMLDOMProcessingInstruction],
    value : BSTR) CLong;

external IXMLDOMProcessingInstruction_put_data_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IXMLDOMCDATASection : IID;

record Struct_IXMLDOMCDATASectionVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection]),(CULong)],
    GetTypeInfoCount : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[UInt]),(CLong)],
    GetTypeInfo : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],UInt,CULong,Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetIDsOfNames : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[Struct__GUID],Pointer[Pointer[UShort]],UInt,CULong,Pointer[CLong]),(CLong)],
    Invoke : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],CLong,Pointer[Struct__GUID],CULong,UShort,Pointer[Struct_tagDISPPARAMS],Pointer[Struct_tagVARIANT],Pointer[Struct_tagEXCEPINFO],Pointer[UInt]),(CLong)],
    get_nodeName : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[Pointer[UShort]]),(CLong)],
    get_nodeValue : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[Struct_tagVARIANT]),(CLong)],
    put_nodeValue : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Struct_tagVARIANT),(CLong)],
    get_nodeType : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[Int]),(CLong)],
    get_parentNode : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_childNodes : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[Pointer[Struct_IXMLDOMNodeList]]),(CLong)],
    get_firstChild : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_lastChild : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_previousSibling : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nextSibling : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_attributes : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[Pointer[Struct_IXMLDOMNamedNodeMap]]),(CLong)],
    insertBefore : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[Struct_IXMLDOMNode],Struct_tagVARIANT,Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    replaceChild : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[Struct_IXMLDOMNode],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    removeChild : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    appendChild : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    hasChildNodes : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[Short]),(CLong)],
    get_ownerDocument : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[Pointer[Struct_IXMLDOMDocument]]),(CLong)],
    cloneNode : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Short,Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nodeTypeString : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[Pointer[UShort]]),(CLong)],
    get_text : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[Pointer[UShort]]),(CLong)],
    put_text : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[UShort]),(CLong)],
    get_specified : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[Short]),(CLong)],
    get_definition : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nodeTypedValue : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[Struct_tagVARIANT]),(CLong)],
    put_nodeTypedValue : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Struct_tagVARIANT),(CLong)],
    get_dataType : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[Struct_tagVARIANT]),(CLong)],
    put_dataType : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[UShort]),(CLong)],
    get_xml : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[Pointer[UShort]]),(CLong)],
    transformNode : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[UShort]]),(CLong)],
    selectNodes : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMNodeList]]),(CLong)],
    selectSingleNode : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_parsed : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[Short]),(CLong)],
    get_namespaceURI : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[Pointer[UShort]]),(CLong)],
    get_prefix : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[Pointer[UShort]]),(CLong)],
    get_baseName : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[Pointer[UShort]]),(CLong)],
    transformNodeToObject : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[Struct_IXMLDOMNode],Struct_tagVARIANT),(CLong)],
    get_data : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[Pointer[UShort]]),(CLong)],
    put_data : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[UShort]),(CLong)],
    get_length : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[CLong]),(CLong)],
    substringData : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],CLong,CLong,Pointer[Pointer[UShort]]),(CLong)],
    appendData : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],Pointer[UShort]),(CLong)],
    insertData : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],CLong,Pointer[UShort]),(CLong)],
    deleteData : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],CLong,CLong),(CLong)],
    replaceData : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],CLong,CLong,Pointer[UShort]),(CLong)],
    splitText : CCodePointer[(Pointer[Struct_IXMLDOMCDATASection],CLong,Pointer[Pointer[Struct_IXMLDOMText]]),(CLong)],
);

alias IXMLDOMCDATASectionVtbl = Struct_IXMLDOMCDATASectionVtbl;

record Struct_IXMLDOMCDATASection (
    lpVtbl : Pointer[Struct_IXMLDOMCDATASectionVtbl],
);

external IID_IXMLDOMDocumentType : IID;

record Struct_IXMLDOMDocumentTypeVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType]),(CULong)],
    GetTypeInfoCount : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[UInt]),(CLong)],
    GetTypeInfo : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],UInt,CULong,Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetIDsOfNames : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[Struct__GUID],Pointer[Pointer[UShort]],UInt,CULong,Pointer[CLong]),(CLong)],
    Invoke : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],CLong,Pointer[Struct__GUID],CULong,UShort,Pointer[Struct_tagDISPPARAMS],Pointer[Struct_tagVARIANT],Pointer[Struct_tagEXCEPINFO],Pointer[UInt]),(CLong)],
    get_nodeName : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[Pointer[UShort]]),(CLong)],
    get_nodeValue : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[Struct_tagVARIANT]),(CLong)],
    put_nodeValue : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Struct_tagVARIANT),(CLong)],
    get_nodeType : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[Int]),(CLong)],
    get_parentNode : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_childNodes : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[Pointer[Struct_IXMLDOMNodeList]]),(CLong)],
    get_firstChild : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_lastChild : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_previousSibling : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nextSibling : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_attributes : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[Pointer[Struct_IXMLDOMNamedNodeMap]]),(CLong)],
    insertBefore : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[Struct_IXMLDOMNode],Struct_tagVARIANT,Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    replaceChild : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[Struct_IXMLDOMNode],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    removeChild : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    appendChild : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    hasChildNodes : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[Short]),(CLong)],
    get_ownerDocument : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[Pointer[Struct_IXMLDOMDocument]]),(CLong)],
    cloneNode : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Short,Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nodeTypeString : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[Pointer[UShort]]),(CLong)],
    get_text : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[Pointer[UShort]]),(CLong)],
    put_text : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[UShort]),(CLong)],
    get_specified : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[Short]),(CLong)],
    get_definition : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nodeTypedValue : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[Struct_tagVARIANT]),(CLong)],
    put_nodeTypedValue : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Struct_tagVARIANT),(CLong)],
    get_dataType : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[Struct_tagVARIANT]),(CLong)],
    put_dataType : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[UShort]),(CLong)],
    get_xml : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[Pointer[UShort]]),(CLong)],
    transformNode : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[UShort]]),(CLong)],
    selectNodes : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMNodeList]]),(CLong)],
    selectSingleNode : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_parsed : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[Short]),(CLong)],
    get_namespaceURI : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[Pointer[UShort]]),(CLong)],
    get_prefix : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[Pointer[UShort]]),(CLong)],
    get_baseName : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[Pointer[UShort]]),(CLong)],
    transformNodeToObject : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[Struct_IXMLDOMNode],Struct_tagVARIANT),(CLong)],
    get_name : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[Pointer[UShort]]),(CLong)],
    get_entities : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[Pointer[Struct_IXMLDOMNamedNodeMap]]),(CLong)],
    get_notations : CCodePointer[(Pointer[Struct_IXMLDOMDocumentType],Pointer[Pointer[Struct_IXMLDOMNamedNodeMap]]),(CLong)],
);

alias IXMLDOMDocumentTypeVtbl = Struct_IXMLDOMDocumentTypeVtbl;

record Struct_IXMLDOMDocumentType (
    lpVtbl : Pointer[Struct_IXMLDOMDocumentTypeVtbl],
);

external IXMLDOMDocumentType_get_name_Proxy(
    This : Pointer[IXMLDOMDocumentType],
    rootName : Pointer[BSTR]) CLong;

external IXMLDOMDocumentType_get_name_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMDocumentType_get_entities_Proxy(
    This : Pointer[IXMLDOMDocumentType],
    entityMap : Pointer[Pointer[IXMLDOMNamedNodeMap]]) CLong;

external IXMLDOMDocumentType_get_entities_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMDocumentType_get_notations_Proxy(
    This : Pointer[IXMLDOMDocumentType],
    notationMap : Pointer[Pointer[IXMLDOMNamedNodeMap]]) CLong;

external IXMLDOMDocumentType_get_notations_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IXMLDOMNotation : IID;

record Struct_IXMLDOMNotationVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IXMLDOMNotation]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IXMLDOMNotation]),(CULong)],
    GetTypeInfoCount : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Pointer[UInt]),(CLong)],
    GetTypeInfo : CCodePointer[(Pointer[Struct_IXMLDOMNotation],UInt,CULong,Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetIDsOfNames : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Pointer[Struct__GUID],Pointer[Pointer[UShort]],UInt,CULong,Pointer[CLong]),(CLong)],
    Invoke : CCodePointer[(Pointer[Struct_IXMLDOMNotation],CLong,Pointer[Struct__GUID],CULong,UShort,Pointer[Struct_tagDISPPARAMS],Pointer[Struct_tagVARIANT],Pointer[Struct_tagEXCEPINFO],Pointer[UInt]),(CLong)],
    get_nodeName : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Pointer[Pointer[UShort]]),(CLong)],
    get_nodeValue : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Pointer[Struct_tagVARIANT]),(CLong)],
    put_nodeValue : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Struct_tagVARIANT),(CLong)],
    get_nodeType : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Pointer[Int]),(CLong)],
    get_parentNode : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_childNodes : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Pointer[Pointer[Struct_IXMLDOMNodeList]]),(CLong)],
    get_firstChild : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_lastChild : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_previousSibling : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nextSibling : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_attributes : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Pointer[Pointer[Struct_IXMLDOMNamedNodeMap]]),(CLong)],
    insertBefore : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Pointer[Struct_IXMLDOMNode],Struct_tagVARIANT,Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    replaceChild : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Pointer[Struct_IXMLDOMNode],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    removeChild : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    appendChild : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    hasChildNodes : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Pointer[Short]),(CLong)],
    get_ownerDocument : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Pointer[Pointer[Struct_IXMLDOMDocument]]),(CLong)],
    cloneNode : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Short,Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nodeTypeString : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Pointer[Pointer[UShort]]),(CLong)],
    get_text : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Pointer[Pointer[UShort]]),(CLong)],
    put_text : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Pointer[UShort]),(CLong)],
    get_specified : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Pointer[Short]),(CLong)],
    get_definition : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nodeTypedValue : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Pointer[Struct_tagVARIANT]),(CLong)],
    put_nodeTypedValue : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Struct_tagVARIANT),(CLong)],
    get_dataType : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Pointer[Struct_tagVARIANT]),(CLong)],
    put_dataType : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Pointer[UShort]),(CLong)],
    get_xml : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Pointer[Pointer[UShort]]),(CLong)],
    transformNode : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[UShort]]),(CLong)],
    selectNodes : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMNodeList]]),(CLong)],
    selectSingleNode : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_parsed : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Pointer[Short]),(CLong)],
    get_namespaceURI : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Pointer[Pointer[UShort]]),(CLong)],
    get_prefix : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Pointer[Pointer[UShort]]),(CLong)],
    get_baseName : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Pointer[Pointer[UShort]]),(CLong)],
    transformNodeToObject : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Pointer[Struct_IXMLDOMNode],Struct_tagVARIANT),(CLong)],
    get_publicId : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Pointer[Struct_tagVARIANT]),(CLong)],
    get_systemId : CCodePointer[(Pointer[Struct_IXMLDOMNotation],Pointer[Struct_tagVARIANT]),(CLong)],
);

alias IXMLDOMNotationVtbl = Struct_IXMLDOMNotationVtbl;

record Struct_IXMLDOMNotation (
    lpVtbl : Pointer[Struct_IXMLDOMNotationVtbl],
);

external IXMLDOMNotation_get_publicId_Proxy(
    This : Pointer[IXMLDOMNotation],
    publicID : Pointer[VARIANT]) CLong;

external IXMLDOMNotation_get_publicId_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMNotation_get_systemId_Proxy(
    This : Pointer[IXMLDOMNotation],
    systemID : Pointer[VARIANT]) CLong;

external IXMLDOMNotation_get_systemId_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IXMLDOMEntity : IID;

record Struct_IXMLDOMEntityVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IXMLDOMEntity]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IXMLDOMEntity]),(CULong)],
    GetTypeInfoCount : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[UInt]),(CLong)],
    GetTypeInfo : CCodePointer[(Pointer[Struct_IXMLDOMEntity],UInt,CULong,Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetIDsOfNames : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[Struct__GUID],Pointer[Pointer[UShort]],UInt,CULong,Pointer[CLong]),(CLong)],
    Invoke : CCodePointer[(Pointer[Struct_IXMLDOMEntity],CLong,Pointer[Struct__GUID],CULong,UShort,Pointer[Struct_tagDISPPARAMS],Pointer[Struct_tagVARIANT],Pointer[Struct_tagEXCEPINFO],Pointer[UInt]),(CLong)],
    get_nodeName : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[Pointer[UShort]]),(CLong)],
    get_nodeValue : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[Struct_tagVARIANT]),(CLong)],
    put_nodeValue : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Struct_tagVARIANT),(CLong)],
    get_nodeType : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[Int]),(CLong)],
    get_parentNode : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_childNodes : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[Pointer[Struct_IXMLDOMNodeList]]),(CLong)],
    get_firstChild : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_lastChild : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_previousSibling : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nextSibling : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_attributes : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[Pointer[Struct_IXMLDOMNamedNodeMap]]),(CLong)],
    insertBefore : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[Struct_IXMLDOMNode],Struct_tagVARIANT,Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    replaceChild : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[Struct_IXMLDOMNode],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    removeChild : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    appendChild : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    hasChildNodes : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[Short]),(CLong)],
    get_ownerDocument : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[Pointer[Struct_IXMLDOMDocument]]),(CLong)],
    cloneNode : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Short,Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nodeTypeString : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[Pointer[UShort]]),(CLong)],
    get_text : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[Pointer[UShort]]),(CLong)],
    put_text : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[UShort]),(CLong)],
    get_specified : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[Short]),(CLong)],
    get_definition : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nodeTypedValue : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[Struct_tagVARIANT]),(CLong)],
    put_nodeTypedValue : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Struct_tagVARIANT),(CLong)],
    get_dataType : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[Struct_tagVARIANT]),(CLong)],
    put_dataType : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[UShort]),(CLong)],
    get_xml : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[Pointer[UShort]]),(CLong)],
    transformNode : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[UShort]]),(CLong)],
    selectNodes : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMNodeList]]),(CLong)],
    selectSingleNode : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_parsed : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[Short]),(CLong)],
    get_namespaceURI : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[Pointer[UShort]]),(CLong)],
    get_prefix : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[Pointer[UShort]]),(CLong)],
    get_baseName : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[Pointer[UShort]]),(CLong)],
    transformNodeToObject : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[Struct_IXMLDOMNode],Struct_tagVARIANT),(CLong)],
    get_publicId : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[Struct_tagVARIANT]),(CLong)],
    get_systemId : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[Struct_tagVARIANT]),(CLong)],
    get_notationName : CCodePointer[(Pointer[Struct_IXMLDOMEntity],Pointer[Pointer[UShort]]),(CLong)],
);

alias IXMLDOMEntityVtbl = Struct_IXMLDOMEntityVtbl;

record Struct_IXMLDOMEntity (
    lpVtbl : Pointer[Struct_IXMLDOMEntityVtbl],
);

external IXMLDOMEntity_get_publicId_Proxy(
    This : Pointer[IXMLDOMEntity],
    publicID : Pointer[VARIANT]) CLong;

external IXMLDOMEntity_get_publicId_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMEntity_get_systemId_Proxy(
    This : Pointer[IXMLDOMEntity],
    systemID : Pointer[VARIANT]) CLong;

external IXMLDOMEntity_get_systemId_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMEntity_get_notationName_Proxy(
    This : Pointer[IXMLDOMEntity],
    name : Pointer[BSTR]) CLong;

external IXMLDOMEntity_get_notationName_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IXMLDOMEntityReference : IID;

record Struct_IXMLDOMEntityReferenceVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference]),(CULong)],
    GetTypeInfoCount : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Pointer[UInt]),(CLong)],
    GetTypeInfo : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],UInt,CULong,Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetIDsOfNames : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Pointer[Struct__GUID],Pointer[Pointer[UShort]],UInt,CULong,Pointer[CLong]),(CLong)],
    Invoke : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],CLong,Pointer[Struct__GUID],CULong,UShort,Pointer[Struct_tagDISPPARAMS],Pointer[Struct_tagVARIANT],Pointer[Struct_tagEXCEPINFO],Pointer[UInt]),(CLong)],
    get_nodeName : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Pointer[Pointer[UShort]]),(CLong)],
    get_nodeValue : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Pointer[Struct_tagVARIANT]),(CLong)],
    put_nodeValue : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Struct_tagVARIANT),(CLong)],
    get_nodeType : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Pointer[Int]),(CLong)],
    get_parentNode : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_childNodes : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Pointer[Pointer[Struct_IXMLDOMNodeList]]),(CLong)],
    get_firstChild : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_lastChild : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_previousSibling : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nextSibling : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_attributes : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Pointer[Pointer[Struct_IXMLDOMNamedNodeMap]]),(CLong)],
    insertBefore : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Pointer[Struct_IXMLDOMNode],Struct_tagVARIANT,Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    replaceChild : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Pointer[Struct_IXMLDOMNode],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    removeChild : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    appendChild : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    hasChildNodes : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Pointer[Short]),(CLong)],
    get_ownerDocument : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Pointer[Pointer[Struct_IXMLDOMDocument]]),(CLong)],
    cloneNode : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Short,Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nodeTypeString : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Pointer[Pointer[UShort]]),(CLong)],
    get_text : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Pointer[Pointer[UShort]]),(CLong)],
    put_text : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Pointer[UShort]),(CLong)],
    get_specified : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Pointer[Short]),(CLong)],
    get_definition : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nodeTypedValue : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Pointer[Struct_tagVARIANT]),(CLong)],
    put_nodeTypedValue : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Struct_tagVARIANT),(CLong)],
    get_dataType : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Pointer[Struct_tagVARIANT]),(CLong)],
    put_dataType : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Pointer[UShort]),(CLong)],
    get_xml : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Pointer[Pointer[UShort]]),(CLong)],
    transformNode : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[UShort]]),(CLong)],
    selectNodes : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMNodeList]]),(CLong)],
    selectSingleNode : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_parsed : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Pointer[Short]),(CLong)],
    get_namespaceURI : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Pointer[Pointer[UShort]]),(CLong)],
    get_prefix : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Pointer[Pointer[UShort]]),(CLong)],
    get_baseName : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Pointer[Pointer[UShort]]),(CLong)],
    transformNodeToObject : CCodePointer[(Pointer[Struct_IXMLDOMEntityReference],Pointer[Struct_IXMLDOMNode],Struct_tagVARIANT),(CLong)],
);

alias IXMLDOMEntityReferenceVtbl = Struct_IXMLDOMEntityReferenceVtbl;

record Struct_IXMLDOMEntityReference (
    lpVtbl : Pointer[Struct_IXMLDOMEntityReferenceVtbl],
);

external IID_IXMLDOMParseError : IID;

record Struct_IXMLDOMParseErrorVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IXMLDOMParseError],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IXMLDOMParseError]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IXMLDOMParseError]),(CULong)],
    GetTypeInfoCount : CCodePointer[(Pointer[Struct_IXMLDOMParseError],Pointer[UInt]),(CLong)],
    GetTypeInfo : CCodePointer[(Pointer[Struct_IXMLDOMParseError],UInt,CULong,Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetIDsOfNames : CCodePointer[(Pointer[Struct_IXMLDOMParseError],Pointer[Struct__GUID],Pointer[Pointer[UShort]],UInt,CULong,Pointer[CLong]),(CLong)],
    Invoke : CCodePointer[(Pointer[Struct_IXMLDOMParseError],CLong,Pointer[Struct__GUID],CULong,UShort,Pointer[Struct_tagDISPPARAMS],Pointer[Struct_tagVARIANT],Pointer[Struct_tagEXCEPINFO],Pointer[UInt]),(CLong)],
    get_errorCode : CCodePointer[(Pointer[Struct_IXMLDOMParseError],Pointer[CLong]),(CLong)],
    get_url : CCodePointer[(Pointer[Struct_IXMLDOMParseError],Pointer[Pointer[UShort]]),(CLong)],
    get_reason : CCodePointer[(Pointer[Struct_IXMLDOMParseError],Pointer[Pointer[UShort]]),(CLong)],
    get_srcText : CCodePointer[(Pointer[Struct_IXMLDOMParseError],Pointer[Pointer[UShort]]),(CLong)],
    get_line : CCodePointer[(Pointer[Struct_IXMLDOMParseError],Pointer[CLong]),(CLong)],
    get_linepos : CCodePointer[(Pointer[Struct_IXMLDOMParseError],Pointer[CLong]),(CLong)],
    get_filepos : CCodePointer[(Pointer[Struct_IXMLDOMParseError],Pointer[CLong]),(CLong)],
);

alias IXMLDOMParseErrorVtbl = Struct_IXMLDOMParseErrorVtbl;

record Struct_IXMLDOMParseError (
    lpVtbl : Pointer[Struct_IXMLDOMParseErrorVtbl],
);

external IXMLDOMParseError_get_errorCode_Proxy(
    This : Pointer[IXMLDOMParseError],
    errorCode : Pointer[CLong]) CLong;

external IXMLDOMParseError_get_errorCode_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMParseError_get_url_Proxy(
    This : Pointer[IXMLDOMParseError],
    urlString : Pointer[BSTR]) CLong;

external IXMLDOMParseError_get_url_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMParseError_get_reason_Proxy(
    This : Pointer[IXMLDOMParseError],
    reasonString : Pointer[BSTR]) CLong;

external IXMLDOMParseError_get_reason_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMParseError_get_srcText_Proxy(
    This : Pointer[IXMLDOMParseError],
    sourceString : Pointer[BSTR]) CLong;

external IXMLDOMParseError_get_srcText_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMParseError_get_line_Proxy(
    This : Pointer[IXMLDOMParseError],
    lineNumber : Pointer[CLong]) CLong;

external IXMLDOMParseError_get_line_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMParseError_get_linepos_Proxy(
    This : Pointer[IXMLDOMParseError],
    linePosition : Pointer[CLong]) CLong;

external IXMLDOMParseError_get_linepos_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDOMParseError_get_filepos_Proxy(
    This : Pointer[IXMLDOMParseError],
    filePosition : Pointer[CLong]) CLong;

external IXMLDOMParseError_get_filepos_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IXTLRuntime : IID;

record Struct_IXTLRuntimeVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IXTLRuntime]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IXTLRuntime]),(CULong)],
    GetTypeInfoCount : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[UInt]),(CLong)],
    GetTypeInfo : CCodePointer[(Pointer[Struct_IXTLRuntime],UInt,CULong,Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetIDsOfNames : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[Struct__GUID],Pointer[Pointer[UShort]],UInt,CULong,Pointer[CLong]),(CLong)],
    Invoke : CCodePointer[(Pointer[Struct_IXTLRuntime],CLong,Pointer[Struct__GUID],CULong,UShort,Pointer[Struct_tagDISPPARAMS],Pointer[Struct_tagVARIANT],Pointer[Struct_tagEXCEPINFO],Pointer[UInt]),(CLong)],
    get_nodeName : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[Pointer[UShort]]),(CLong)],
    get_nodeValue : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[Struct_tagVARIANT]),(CLong)],
    put_nodeValue : CCodePointer[(Pointer[Struct_IXTLRuntime],Struct_tagVARIANT),(CLong)],
    get_nodeType : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[Int]),(CLong)],
    get_parentNode : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_childNodes : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[Pointer[Struct_IXMLDOMNodeList]]),(CLong)],
    get_firstChild : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_lastChild : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_previousSibling : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nextSibling : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_attributes : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[Pointer[Struct_IXMLDOMNamedNodeMap]]),(CLong)],
    insertBefore : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[Struct_IXMLDOMNode],Struct_tagVARIANT,Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    replaceChild : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[Struct_IXMLDOMNode],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    removeChild : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    appendChild : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    hasChildNodes : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[Short]),(CLong)],
    get_ownerDocument : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[Pointer[Struct_IXMLDOMDocument]]),(CLong)],
    cloneNode : CCodePointer[(Pointer[Struct_IXTLRuntime],Short,Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nodeTypeString : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[Pointer[UShort]]),(CLong)],
    get_text : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[Pointer[UShort]]),(CLong)],
    put_text : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[UShort]),(CLong)],
    get_specified : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[Short]),(CLong)],
    get_definition : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_nodeTypedValue : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[Struct_tagVARIANT]),(CLong)],
    put_nodeTypedValue : CCodePointer[(Pointer[Struct_IXTLRuntime],Struct_tagVARIANT),(CLong)],
    get_dataType : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[Struct_tagVARIANT]),(CLong)],
    put_dataType : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[UShort]),(CLong)],
    get_xml : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[Pointer[UShort]]),(CLong)],
    transformNode : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[Struct_IXMLDOMNode],Pointer[Pointer[UShort]]),(CLong)],
    selectNodes : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMNodeList]]),(CLong)],
    selectSingleNode : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[UShort],Pointer[Pointer[Struct_IXMLDOMNode]]),(CLong)],
    get_parsed : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[Short]),(CLong)],
    get_namespaceURI : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[Pointer[UShort]]),(CLong)],
    get_prefix : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[Pointer[UShort]]),(CLong)],
    get_baseName : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[Pointer[UShort]]),(CLong)],
    transformNodeToObject : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[Struct_IXMLDOMNode],Struct_tagVARIANT),(CLong)],
    uniqueID : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[Struct_IXMLDOMNode],Pointer[CLong]),(CLong)],
    depth : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[Struct_IXMLDOMNode],Pointer[CLong]),(CLong)],
    childNumber : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[Struct_IXMLDOMNode],Pointer[CLong]),(CLong)],
    ancestorChildNumber : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[UShort],Pointer[Struct_IXMLDOMNode],Pointer[CLong]),(CLong)],
    absoluteChildNumber : CCodePointer[(Pointer[Struct_IXTLRuntime],Pointer[Struct_IXMLDOMNode],Pointer[CLong]),(CLong)],
    formatIndex : CCodePointer[(Pointer[Struct_IXTLRuntime],CLong,Pointer[UShort],Pointer[Pointer[UShort]]),(CLong)],
    formatNumber : CCodePointer[(Pointer[Struct_IXTLRuntime],Double,Pointer[UShort],Pointer[Pointer[UShort]]),(CLong)],
    formatDate : CCodePointer[(Pointer[Struct_IXTLRuntime],Struct_tagVARIANT,Pointer[UShort],Struct_tagVARIANT,Pointer[Pointer[UShort]]),(CLong)],
    formatTime : CCodePointer[(Pointer[Struct_IXTLRuntime],Struct_tagVARIANT,Pointer[UShort],Struct_tagVARIANT,Pointer[Pointer[UShort]]),(CLong)],
);

alias IXTLRuntimeVtbl = Struct_IXTLRuntimeVtbl;

record Struct_IXTLRuntime (
    lpVtbl : Pointer[Struct_IXTLRuntimeVtbl],
);

external IXTLRuntime_uniqueID_Proxy(
    This : Pointer[IXTLRuntime],
    pNode : Pointer[IXMLDOMNode],
    pID : Pointer[CLong]) CLong;

external IXTLRuntime_uniqueID_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXTLRuntime_depth_Proxy(
    This : Pointer[IXTLRuntime],
    pNode : Pointer[IXMLDOMNode],
    pDepth : Pointer[CLong]) CLong;

external IXTLRuntime_depth_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXTLRuntime_childNumber_Proxy(
    This : Pointer[IXTLRuntime],
    pNode : Pointer[IXMLDOMNode],
    pNumber : Pointer[CLong]) CLong;

external IXTLRuntime_childNumber_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXTLRuntime_ancestorChildNumber_Proxy(
    This : Pointer[IXTLRuntime],
    bstrNodeName : BSTR,
    pNode : Pointer[IXMLDOMNode],
    pNumber : Pointer[CLong]) CLong;

external IXTLRuntime_ancestorChildNumber_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXTLRuntime_absoluteChildNumber_Proxy(
    This : Pointer[IXTLRuntime],
    pNode : Pointer[IXMLDOMNode],
    pNumber : Pointer[CLong]) CLong;

external IXTLRuntime_absoluteChildNumber_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXTLRuntime_formatIndex_Proxy(
    This : Pointer[IXTLRuntime],
    lIndex : CLong,
    bstrFormat : BSTR,
    pbstrFormattedString : Pointer[BSTR]) CLong;

external IXTLRuntime_formatIndex_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXTLRuntime_formatNumber_Proxy(
    This : Pointer[IXTLRuntime],
    dblNumber : Double,
    bstrFormat : BSTR,
    pbstrFormattedString : Pointer[BSTR]) CLong;

external IXTLRuntime_formatNumber_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXTLRuntime_formatDate_Proxy(
    This : Pointer[IXTLRuntime],
    varDate : VARIANT,
    bstrFormat : BSTR,
    varDestLocale : VARIANT,
    pbstrFormattedString : Pointer[BSTR]) CLong;

external IXTLRuntime_formatDate_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXTLRuntime_formatTime_Proxy(
    This : Pointer[IXTLRuntime],
    varTime : VARIANT,
    bstrFormat : BSTR,
    varDestLocale : VARIANT,
    pbstrFormattedString : Pointer[BSTR]) CLong;

external IXTLRuntime_formatTime_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external DIID_XMLDOMDocumentEvents : IID;

record Struct_XMLDOMDocumentEventsVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_XMLDOMDocumentEvents],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_XMLDOMDocumentEvents]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_XMLDOMDocumentEvents]),(CULong)],
    GetTypeInfoCount : CCodePointer[(Pointer[Struct_XMLDOMDocumentEvents],Pointer[UInt]),(CLong)],
    GetTypeInfo : CCodePointer[(Pointer[Struct_XMLDOMDocumentEvents],UInt,CULong,Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetIDsOfNames : CCodePointer[(Pointer[Struct_XMLDOMDocumentEvents],Pointer[Struct__GUID],Pointer[Pointer[UShort]],UInt,CULong,Pointer[CLong]),(CLong)],
    Invoke : CCodePointer[(Pointer[Struct_XMLDOMDocumentEvents],CLong,Pointer[Struct__GUID],CULong,UShort,Pointer[Struct_tagDISPPARAMS],Pointer[Struct_tagVARIANT],Pointer[Struct_tagEXCEPINFO],Pointer[UInt]),(CLong)],
);

alias XMLDOMDocumentEventsVtbl = Struct_XMLDOMDocumentEventsVtbl;

record Struct_XMLDOMDocumentEvents (
    lpVtbl : Pointer[Struct_XMLDOMDocumentEventsVtbl],
);

external CLSID_DOMDocument : CLSID;

external CLSID_DOMFreeThreadedDocument : CLSID;

external IID_IXMLHttpRequest : IID;

record Struct_IXMLHttpRequestVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IXMLHttpRequest],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IXMLHttpRequest]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IXMLHttpRequest]),(CULong)],
    GetTypeInfoCount : CCodePointer[(Pointer[Struct_IXMLHttpRequest],Pointer[UInt]),(CLong)],
    GetTypeInfo : CCodePointer[(Pointer[Struct_IXMLHttpRequest],UInt,CULong,Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetIDsOfNames : CCodePointer[(Pointer[Struct_IXMLHttpRequest],Pointer[Struct__GUID],Pointer[Pointer[UShort]],UInt,CULong,Pointer[CLong]),(CLong)],
    Invoke : CCodePointer[(Pointer[Struct_IXMLHttpRequest],CLong,Pointer[Struct__GUID],CULong,UShort,Pointer[Struct_tagDISPPARAMS],Pointer[Struct_tagVARIANT],Pointer[Struct_tagEXCEPINFO],Pointer[UInt]),(CLong)],
    open : CCodePointer[(Pointer[Struct_IXMLHttpRequest],Pointer[UShort],Pointer[UShort],Struct_tagVARIANT,Struct_tagVARIANT,Struct_tagVARIANT),(CLong)],
    setRequestHeader : CCodePointer[(Pointer[Struct_IXMLHttpRequest],Pointer[UShort],Pointer[UShort]),(CLong)],
    getResponseHeader : CCodePointer[(Pointer[Struct_IXMLHttpRequest],Pointer[UShort],Pointer[Pointer[UShort]]),(CLong)],
    getAllResponseHeaders : CCodePointer[(Pointer[Struct_IXMLHttpRequest],Pointer[Pointer[UShort]]),(CLong)],
    send : CCodePointer[(Pointer[Struct_IXMLHttpRequest],Struct_tagVARIANT),(CLong)],
    abort : CCodePointer[(Pointer[Struct_IXMLHttpRequest]),(CLong)],
    get_status : CCodePointer[(Pointer[Struct_IXMLHttpRequest],Pointer[CLong]),(CLong)],
    get_statusText : CCodePointer[(Pointer[Struct_IXMLHttpRequest],Pointer[Pointer[UShort]]),(CLong)],
    get_responseXML : CCodePointer[(Pointer[Struct_IXMLHttpRequest],Pointer[Pointer[Struct_IDispatch]]),(CLong)],
    get_responseText : CCodePointer[(Pointer[Struct_IXMLHttpRequest],Pointer[Pointer[UShort]]),(CLong)],
    get_responseBody : CCodePointer[(Pointer[Struct_IXMLHttpRequest],Pointer[Struct_tagVARIANT]),(CLong)],
    get_responseStream : CCodePointer[(Pointer[Struct_IXMLHttpRequest],Pointer[Struct_tagVARIANT]),(CLong)],
    get_readyState : CCodePointer[(Pointer[Struct_IXMLHttpRequest],Pointer[CLong]),(CLong)],
    put_onreadystatechange : CCodePointer[(Pointer[Struct_IXMLHttpRequest],Pointer[Struct_IDispatch]),(CLong)],
);

alias IXMLHttpRequestVtbl = Struct_IXMLHttpRequestVtbl;

record Struct_IXMLHttpRequest (
    lpVtbl : Pointer[Struct_IXMLHttpRequestVtbl],
);

external IXMLHttpRequest_open_Proxy(
    This : Pointer[IXMLHttpRequest],
    bstrMethod : BSTR,
    bstrUrl : BSTR,
    varAsync : VARIANT,
    bstrUser : VARIANT,
    bstrPassword : VARIANT) CLong;

external IXMLHttpRequest_open_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLHttpRequest_setRequestHeader_Proxy(
    This : Pointer[IXMLHttpRequest],
    bstrHeader : BSTR,
    bstrValue : BSTR) CLong;

external IXMLHttpRequest_setRequestHeader_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLHttpRequest_getResponseHeader_Proxy(
    This : Pointer[IXMLHttpRequest],
    bstrHeader : BSTR,
    pbstrValue : Pointer[BSTR]) CLong;

external IXMLHttpRequest_getResponseHeader_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLHttpRequest_getAllResponseHeaders_Proxy(
    This : Pointer[IXMLHttpRequest],
    pbstrHeaders : Pointer[BSTR]) CLong;

external IXMLHttpRequest_getAllResponseHeaders_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLHttpRequest_send_Proxy(
    This : Pointer[IXMLHttpRequest],
    varBody : VARIANT) CLong;

external IXMLHttpRequest_send_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLHttpRequest_abort_Proxy(
    This : Pointer[IXMLHttpRequest]) CLong;

external IXMLHttpRequest_abort_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLHttpRequest_get_status_Proxy(
    This : Pointer[IXMLHttpRequest],
    plStatus : Pointer[CLong]) CLong;

external IXMLHttpRequest_get_status_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLHttpRequest_get_statusText_Proxy(
    This : Pointer[IXMLHttpRequest],
    pbstrStatus : Pointer[BSTR]) CLong;

external IXMLHttpRequest_get_statusText_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLHttpRequest_get_responseXML_Proxy(
    This : Pointer[IXMLHttpRequest],
    ppBody : Pointer[Pointer[IDispatch]]) CLong;

external IXMLHttpRequest_get_responseXML_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLHttpRequest_get_responseText_Proxy(
    This : Pointer[IXMLHttpRequest],
    pbstrBody : Pointer[BSTR]) CLong;

external IXMLHttpRequest_get_responseText_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLHttpRequest_get_responseBody_Proxy(
    This : Pointer[IXMLHttpRequest],
    pvarBody : Pointer[VARIANT]) CLong;

external IXMLHttpRequest_get_responseBody_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLHttpRequest_get_responseStream_Proxy(
    This : Pointer[IXMLHttpRequest],
    pvarBody : Pointer[VARIANT]) CLong;

external IXMLHttpRequest_get_responseStream_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLHttpRequest_get_readyState_Proxy(
    This : Pointer[IXMLHttpRequest],
    plState : Pointer[CLong]) CLong;

external IXMLHttpRequest_get_readyState_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLHttpRequest_put_onreadystatechange_Proxy(
    This : Pointer[IXMLHttpRequest],
    pReadyStateSink : Pointer[IDispatch]) CLong;

external IXMLHttpRequest_put_onreadystatechange_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external CLSID_XMLHTTPRequest : CLSID;

external IID_IXMLDSOControl : IID;

record Struct_IXMLDSOControlVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IXMLDSOControl],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IXMLDSOControl]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IXMLDSOControl]),(CULong)],
    GetTypeInfoCount : CCodePointer[(Pointer[Struct_IXMLDSOControl],Pointer[UInt]),(CLong)],
    GetTypeInfo : CCodePointer[(Pointer[Struct_IXMLDSOControl],UInt,CULong,Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetIDsOfNames : CCodePointer[(Pointer[Struct_IXMLDSOControl],Pointer[Struct__GUID],Pointer[Pointer[UShort]],UInt,CULong,Pointer[CLong]),(CLong)],
    Invoke : CCodePointer[(Pointer[Struct_IXMLDSOControl],CLong,Pointer[Struct__GUID],CULong,UShort,Pointer[Struct_tagDISPPARAMS],Pointer[Struct_tagVARIANT],Pointer[Struct_tagEXCEPINFO],Pointer[UInt]),(CLong)],
    get_XMLDocument : CCodePointer[(Pointer[Struct_IXMLDSOControl],Pointer[Pointer[Struct_IXMLDOMDocument]]),(CLong)],
    put_XMLDocument : CCodePointer[(Pointer[Struct_IXMLDSOControl],Pointer[Struct_IXMLDOMDocument]),(CLong)],
    get_JavaDSOCompatible : CCodePointer[(Pointer[Struct_IXMLDSOControl],Pointer[Int]),(CLong)],
    put_JavaDSOCompatible : CCodePointer[(Pointer[Struct_IXMLDSOControl],Int),(CLong)],
    get_readyState : CCodePointer[(Pointer[Struct_IXMLDSOControl],Pointer[CLong]),(CLong)],
);

alias IXMLDSOControlVtbl = Struct_IXMLDSOControlVtbl;

record Struct_IXMLDSOControl (
    lpVtbl : Pointer[Struct_IXMLDSOControlVtbl],
);

external IXMLDSOControl_get_XMLDocument_Proxy(
    This : Pointer[IXMLDSOControl],
    ppDoc : Pointer[Pointer[IXMLDOMDocument]]) CLong;

external IXMLDSOControl_get_XMLDocument_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDSOControl_put_XMLDocument_Proxy(
    This : Pointer[IXMLDSOControl],
    ppDoc : Pointer[IXMLDOMDocument]) CLong;

external IXMLDSOControl_put_XMLDocument_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDSOControl_get_JavaDSOCompatible_Proxy(
    This : Pointer[IXMLDSOControl],
    fJavaDSOCompatible : Pointer[Int]) CLong;

external IXMLDSOControl_get_JavaDSOCompatible_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDSOControl_put_JavaDSOCompatible_Proxy(
    This : Pointer[IXMLDSOControl],
    fJavaDSOCompatible : Int) CLong;

external IXMLDSOControl_put_JavaDSOCompatible_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDSOControl_get_readyState_Proxy(
    This : Pointer[IXMLDSOControl],
    state : Pointer[CLong]) CLong;

external IXMLDSOControl_get_readyState_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external CLSID_XMLDSOControl : CLSID;

external IID_IXMLElementCollection : IID;

record Struct_IXMLElementCollectionVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IXMLElementCollection],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IXMLElementCollection]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IXMLElementCollection]),(CULong)],
    GetTypeInfoCount : CCodePointer[(Pointer[Struct_IXMLElementCollection],Pointer[UInt]),(CLong)],
    GetTypeInfo : CCodePointer[(Pointer[Struct_IXMLElementCollection],UInt,CULong,Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetIDsOfNames : CCodePointer[(Pointer[Struct_IXMLElementCollection],Pointer[Struct__GUID],Pointer[Pointer[UShort]],UInt,CULong,Pointer[CLong]),(CLong)],
    Invoke : CCodePointer[(Pointer[Struct_IXMLElementCollection],CLong,Pointer[Struct__GUID],CULong,UShort,Pointer[Struct_tagDISPPARAMS],Pointer[Struct_tagVARIANT],Pointer[Struct_tagEXCEPINFO],Pointer[UInt]),(CLong)],
    put_length : CCodePointer[(Pointer[Struct_IXMLElementCollection],CLong),(CLong)],
    get_length : CCodePointer[(Pointer[Struct_IXMLElementCollection],Pointer[CLong]),(CLong)],
    get__newEnum : CCodePointer[(Pointer[Struct_IXMLElementCollection],Pointer[Pointer[Struct_IUnknown]]),(CLong)],
    item : CCodePointer[(Pointer[Struct_IXMLElementCollection],Struct_tagVARIANT,Struct_tagVARIANT,Pointer[Pointer[Struct_IDispatch]]),(CLong)],
);

alias IXMLElementCollectionVtbl = Struct_IXMLElementCollectionVtbl;

record Struct_IXMLElementCollection (
    lpVtbl : Pointer[Struct_IXMLElementCollectionVtbl],
);

external IXMLElementCollection_put_length_Proxy(
    This : Pointer[IXMLElementCollection],
    v : CLong) CLong;

external IXMLElementCollection_put_length_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLElementCollection_get_length_Proxy(
    This : Pointer[IXMLElementCollection],
    p : Pointer[CLong]) CLong;

external IXMLElementCollection_get_length_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLElementCollection_get__newEnum_Proxy(
    This : Pointer[IXMLElementCollection],
    ppUnk : Pointer[Pointer[IUnknown]]) CLong;

external IXMLElementCollection_get__newEnum_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLElementCollection_item_Proxy(
    This : Pointer[IXMLElementCollection],
    var1 : VARIANT,
    var2 : VARIANT,
    ppDisp : Pointer[Pointer[IDispatch]]) CLong;

external IXMLElementCollection_item_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IXMLDocument : IID;

record Struct_IXMLDocumentVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IXMLDocument],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IXMLDocument]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IXMLDocument]),(CULong)],
    GetTypeInfoCount : CCodePointer[(Pointer[Struct_IXMLDocument],Pointer[UInt]),(CLong)],
    GetTypeInfo : CCodePointer[(Pointer[Struct_IXMLDocument],UInt,CULong,Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetIDsOfNames : CCodePointer[(Pointer[Struct_IXMLDocument],Pointer[Struct__GUID],Pointer[Pointer[UShort]],UInt,CULong,Pointer[CLong]),(CLong)],
    Invoke : CCodePointer[(Pointer[Struct_IXMLDocument],CLong,Pointer[Struct__GUID],CULong,UShort,Pointer[Struct_tagDISPPARAMS],Pointer[Struct_tagVARIANT],Pointer[Struct_tagEXCEPINFO],Pointer[UInt]),(CLong)],
    get_root : CCodePointer[(Pointer[Struct_IXMLDocument],Pointer[Pointer[Struct_IXMLElement]]),(CLong)],
    get_fileSize : CCodePointer[(Pointer[Struct_IXMLDocument],Pointer[Pointer[UShort]]),(CLong)],
    get_fileModifiedDate : CCodePointer[(Pointer[Struct_IXMLDocument],Pointer[Pointer[UShort]]),(CLong)],
    get_fileUpdatedDate : CCodePointer[(Pointer[Struct_IXMLDocument],Pointer[Pointer[UShort]]),(CLong)],
    get_URL : CCodePointer[(Pointer[Struct_IXMLDocument],Pointer[Pointer[UShort]]),(CLong)],
    put_URL : CCodePointer[(Pointer[Struct_IXMLDocument],Pointer[UShort]),(CLong)],
    get_mimeType : CCodePointer[(Pointer[Struct_IXMLDocument],Pointer[Pointer[UShort]]),(CLong)],
    get_readyState : CCodePointer[(Pointer[Struct_IXMLDocument],Pointer[CLong]),(CLong)],
    get_charset : CCodePointer[(Pointer[Struct_IXMLDocument],Pointer[Pointer[UShort]]),(CLong)],
    put_charset : CCodePointer[(Pointer[Struct_IXMLDocument],Pointer[UShort]),(CLong)],
    get_version : CCodePointer[(Pointer[Struct_IXMLDocument],Pointer[Pointer[UShort]]),(CLong)],
    get_doctype : CCodePointer[(Pointer[Struct_IXMLDocument],Pointer[Pointer[UShort]]),(CLong)],
    get_dtdURL : CCodePointer[(Pointer[Struct_IXMLDocument],Pointer[Pointer[UShort]]),(CLong)],
    createElement : CCodePointer[(Pointer[Struct_IXMLDocument],Struct_tagVARIANT,Struct_tagVARIANT,Pointer[Pointer[Struct_IXMLElement]]),(CLong)],
);

alias IXMLDocumentVtbl = Struct_IXMLDocumentVtbl;

record Struct_IXMLDocument (
    lpVtbl : Pointer[Struct_IXMLDocumentVtbl],
);

external IXMLDocument_get_root_Proxy(
    This : Pointer[IXMLDocument],
    p : Pointer[Pointer[IXMLElement]]) CLong;

external IXMLDocument_get_root_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDocument_get_fileSize_Proxy(
    This : Pointer[IXMLDocument],
    p : Pointer[BSTR]) CLong;

external IXMLDocument_get_fileSize_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDocument_get_fileModifiedDate_Proxy(
    This : Pointer[IXMLDocument],
    p : Pointer[BSTR]) CLong;

external IXMLDocument_get_fileModifiedDate_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDocument_get_fileUpdatedDate_Proxy(
    This : Pointer[IXMLDocument],
    p : Pointer[BSTR]) CLong;

external IXMLDocument_get_fileUpdatedDate_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDocument_get_URL_Proxy(
    This : Pointer[IXMLDocument],
    p : Pointer[BSTR]) CLong;

external IXMLDocument_get_URL_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDocument_put_URL_Proxy(
    This : Pointer[IXMLDocument],
    p : BSTR) CLong;

external IXMLDocument_put_URL_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDocument_get_mimeType_Proxy(
    This : Pointer[IXMLDocument],
    p : Pointer[BSTR]) CLong;

external IXMLDocument_get_mimeType_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDocument_get_readyState_Proxy(
    This : Pointer[IXMLDocument],
    pl : Pointer[CLong]) CLong;

external IXMLDocument_get_readyState_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDocument_get_charset_Proxy(
    This : Pointer[IXMLDocument],
    p : Pointer[BSTR]) CLong;

external IXMLDocument_get_charset_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDocument_put_charset_Proxy(
    This : Pointer[IXMLDocument],
    p : BSTR) CLong;

external IXMLDocument_put_charset_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDocument_get_version_Proxy(
    This : Pointer[IXMLDocument],
    p : Pointer[BSTR]) CLong;

external IXMLDocument_get_version_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDocument_get_doctype_Proxy(
    This : Pointer[IXMLDocument],
    p : Pointer[BSTR]) CLong;

external IXMLDocument_get_doctype_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDocument_get_dtdURL_Proxy(
    This : Pointer[IXMLDocument],
    p : Pointer[BSTR]) CLong;

external IXMLDocument_get_dtdURL_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDocument_createElement_Proxy(
    This : Pointer[IXMLDocument],
    vType : VARIANT,
    var1 : VARIANT,
    ppElem : Pointer[Pointer[IXMLElement]]) CLong;

external IXMLDocument_createElement_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IXMLDocument2 : IID;

record Struct_IXMLDocument2Vtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IXMLDocument2],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IXMLDocument2]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IXMLDocument2]),(CULong)],
    GetTypeInfoCount : CCodePointer[(Pointer[Struct_IXMLDocument2],Pointer[UInt]),(CLong)],
    GetTypeInfo : CCodePointer[(Pointer[Struct_IXMLDocument2],UInt,CULong,Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetIDsOfNames : CCodePointer[(Pointer[Struct_IXMLDocument2],Pointer[Struct__GUID],Pointer[Pointer[UShort]],UInt,CULong,Pointer[CLong]),(CLong)],
    Invoke : CCodePointer[(Pointer[Struct_IXMLDocument2],CLong,Pointer[Struct__GUID],CULong,UShort,Pointer[Struct_tagDISPPARAMS],Pointer[Struct_tagVARIANT],Pointer[Struct_tagEXCEPINFO],Pointer[UInt]),(CLong)],
    get_root : CCodePointer[(Pointer[Struct_IXMLDocument2],Pointer[Pointer[Struct_IXMLElement2]]),(CLong)],
    get_fileSize : CCodePointer[(Pointer[Struct_IXMLDocument2],Pointer[Pointer[UShort]]),(CLong)],
    get_fileModifiedDate : CCodePointer[(Pointer[Struct_IXMLDocument2],Pointer[Pointer[UShort]]),(CLong)],
    get_fileUpdatedDate : CCodePointer[(Pointer[Struct_IXMLDocument2],Pointer[Pointer[UShort]]),(CLong)],
    get_URL : CCodePointer[(Pointer[Struct_IXMLDocument2],Pointer[Pointer[UShort]]),(CLong)],
    put_URL : CCodePointer[(Pointer[Struct_IXMLDocument2],Pointer[UShort]),(CLong)],
    get_mimeType : CCodePointer[(Pointer[Struct_IXMLDocument2],Pointer[Pointer[UShort]]),(CLong)],
    get_readyState : CCodePointer[(Pointer[Struct_IXMLDocument2],Pointer[CLong]),(CLong)],
    get_charset : CCodePointer[(Pointer[Struct_IXMLDocument2],Pointer[Pointer[UShort]]),(CLong)],
    put_charset : CCodePointer[(Pointer[Struct_IXMLDocument2],Pointer[UShort]),(CLong)],
    get_version : CCodePointer[(Pointer[Struct_IXMLDocument2],Pointer[Pointer[UShort]]),(CLong)],
    get_doctype : CCodePointer[(Pointer[Struct_IXMLDocument2],Pointer[Pointer[UShort]]),(CLong)],
    get_dtdURL : CCodePointer[(Pointer[Struct_IXMLDocument2],Pointer[Pointer[UShort]]),(CLong)],
    createElement : CCodePointer[(Pointer[Struct_IXMLDocument2],Struct_tagVARIANT,Struct_tagVARIANT,Pointer[Pointer[Struct_IXMLElement2]]),(CLong)],
    get_async : CCodePointer[(Pointer[Struct_IXMLDocument2],Pointer[Short]),(CLong)],
    put_async : CCodePointer[(Pointer[Struct_IXMLDocument2],Short),(CLong)],
);

alias IXMLDocument2Vtbl = Struct_IXMLDocument2Vtbl;

record Struct_IXMLDocument2 (
    lpVtbl : Pointer[Struct_IXMLDocument2Vtbl],
);

external IXMLDocument2_get_root_Proxy(
    This : Pointer[IXMLDocument2],
    p : Pointer[Pointer[IXMLElement2]]) CLong;

external IXMLDocument2_get_root_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDocument2_get_fileSize_Proxy(
    This : Pointer[IXMLDocument2],
    p : Pointer[BSTR]) CLong;

external IXMLDocument2_get_fileSize_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDocument2_get_fileModifiedDate_Proxy(
    This : Pointer[IXMLDocument2],
    p : Pointer[BSTR]) CLong;

external IXMLDocument2_get_fileModifiedDate_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDocument2_get_fileUpdatedDate_Proxy(
    This : Pointer[IXMLDocument2],
    p : Pointer[BSTR]) CLong;

external IXMLDocument2_get_fileUpdatedDate_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDocument2_get_URL_Proxy(
    This : Pointer[IXMLDocument2],
    p : Pointer[BSTR]) CLong;

external IXMLDocument2_get_URL_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDocument2_put_URL_Proxy(
    This : Pointer[IXMLDocument2],
    p : BSTR) CLong;

external IXMLDocument2_put_URL_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDocument2_get_mimeType_Proxy(
    This : Pointer[IXMLDocument2],
    p : Pointer[BSTR]) CLong;

external IXMLDocument2_get_mimeType_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDocument2_get_readyState_Proxy(
    This : Pointer[IXMLDocument2],
    pl : Pointer[CLong]) CLong;

external IXMLDocument2_get_readyState_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDocument2_get_charset_Proxy(
    This : Pointer[IXMLDocument2],
    p : Pointer[BSTR]) CLong;

external IXMLDocument2_get_charset_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDocument2_put_charset_Proxy(
    This : Pointer[IXMLDocument2],
    p : BSTR) CLong;

external IXMLDocument2_put_charset_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDocument2_get_version_Proxy(
    This : Pointer[IXMLDocument2],
    p : Pointer[BSTR]) CLong;

external IXMLDocument2_get_version_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDocument2_get_doctype_Proxy(
    This : Pointer[IXMLDocument2],
    p : Pointer[BSTR]) CLong;

external IXMLDocument2_get_doctype_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDocument2_get_dtdURL_Proxy(
    This : Pointer[IXMLDocument2],
    p : Pointer[BSTR]) CLong;

external IXMLDocument2_get_dtdURL_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDocument2_createElement_Proxy(
    This : Pointer[IXMLDocument2],
    vType : VARIANT,
    var1 : VARIANT,
    ppElem : Pointer[Pointer[IXMLElement2]]) CLong;

external IXMLDocument2_createElement_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDocument2_get_async_Proxy(
    This : Pointer[IXMLDocument2],
    pf : Pointer[Short]) CLong;

external IXMLDocument2_get_async_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLDocument2_put_async_Proxy(
    This : Pointer[IXMLDocument2],
    f : Short) CLong;

external IXMLDocument2_put_async_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IXMLElement : IID;

record Struct_IXMLElementVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IXMLElement],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IXMLElement]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IXMLElement]),(CULong)],
    GetTypeInfoCount : CCodePointer[(Pointer[Struct_IXMLElement],Pointer[UInt]),(CLong)],
    GetTypeInfo : CCodePointer[(Pointer[Struct_IXMLElement],UInt,CULong,Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetIDsOfNames : CCodePointer[(Pointer[Struct_IXMLElement],Pointer[Struct__GUID],Pointer[Pointer[UShort]],UInt,CULong,Pointer[CLong]),(CLong)],
    Invoke : CCodePointer[(Pointer[Struct_IXMLElement],CLong,Pointer[Struct__GUID],CULong,UShort,Pointer[Struct_tagDISPPARAMS],Pointer[Struct_tagVARIANT],Pointer[Struct_tagEXCEPINFO],Pointer[UInt]),(CLong)],
    get_tagName : CCodePointer[(Pointer[Struct_IXMLElement],Pointer[Pointer[UShort]]),(CLong)],
    put_tagName : CCodePointer[(Pointer[Struct_IXMLElement],Pointer[UShort]),(CLong)],
    get_parent : CCodePointer[(Pointer[Struct_IXMLElement],Pointer[Pointer[Struct_IXMLElement]]),(CLong)],
    setAttribute : CCodePointer[(Pointer[Struct_IXMLElement],Pointer[UShort],Struct_tagVARIANT),(CLong)],
    getAttribute : CCodePointer[(Pointer[Struct_IXMLElement],Pointer[UShort],Pointer[Struct_tagVARIANT]),(CLong)],
    removeAttribute : CCodePointer[(Pointer[Struct_IXMLElement],Pointer[UShort]),(CLong)],
    get_children : CCodePointer[(Pointer[Struct_IXMLElement],Pointer[Pointer[Struct_IXMLElementCollection]]),(CLong)],
    get_type : CCodePointer[(Pointer[Struct_IXMLElement],Pointer[CLong]),(CLong)],
    get_text : CCodePointer[(Pointer[Struct_IXMLElement],Pointer[Pointer[UShort]]),(CLong)],
    put_text : CCodePointer[(Pointer[Struct_IXMLElement],Pointer[UShort]),(CLong)],
    addChild : CCodePointer[(Pointer[Struct_IXMLElement],Pointer[Struct_IXMLElement],CLong,CLong),(CLong)],
    removeChild : CCodePointer[(Pointer[Struct_IXMLElement],Pointer[Struct_IXMLElement]),(CLong)],
);

alias IXMLElementVtbl = Struct_IXMLElementVtbl;

record Struct_IXMLElement (
    lpVtbl : Pointer[Struct_IXMLElementVtbl],
);

external IXMLElement_get_tagName_Proxy(
    This : Pointer[IXMLElement],
    p : Pointer[BSTR]) CLong;

external IXMLElement_get_tagName_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLElement_put_tagName_Proxy(
    This : Pointer[IXMLElement],
    p : BSTR) CLong;

external IXMLElement_put_tagName_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLElement_get_parent_Proxy(
    This : Pointer[IXMLElement],
    ppParent : Pointer[Pointer[IXMLElement]]) CLong;

external IXMLElement_get_parent_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLElement_setAttribute_Proxy(
    This : Pointer[IXMLElement],
    strPropertyName : BSTR,
    PropertyValue : VARIANT) CLong;

external IXMLElement_setAttribute_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLElement_getAttribute_Proxy(
    This : Pointer[IXMLElement],
    strPropertyName : BSTR,
    PropertyValue : Pointer[VARIANT]) CLong;

external IXMLElement_getAttribute_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLElement_removeAttribute_Proxy(
    This : Pointer[IXMLElement],
    strPropertyName : BSTR) CLong;

external IXMLElement_removeAttribute_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLElement_get_children_Proxy(
    This : Pointer[IXMLElement],
    pp : Pointer[Pointer[IXMLElementCollection]]) CLong;

external IXMLElement_get_children_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLElement_get_type_Proxy(
    This : Pointer[IXMLElement],
    plType : Pointer[CLong]) CLong;

external IXMLElement_get_type_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLElement_get_text_Proxy(
    This : Pointer[IXMLElement],
    p : Pointer[BSTR]) CLong;

external IXMLElement_get_text_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLElement_put_text_Proxy(
    This : Pointer[IXMLElement],
    p : BSTR) CLong;

external IXMLElement_put_text_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLElement_addChild_Proxy(
    This : Pointer[IXMLElement],
    pChildElem : Pointer[IXMLElement],
    lIndex : CLong,
    lReserved : CLong) CLong;

external IXMLElement_addChild_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLElement_removeChild_Proxy(
    This : Pointer[IXMLElement],
    pChildElem : Pointer[IXMLElement]) CLong;

external IXMLElement_removeChild_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IXMLElement2 : IID;

record Struct_IXMLElement2Vtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IXMLElement2],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IXMLElement2]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IXMLElement2]),(CULong)],
    GetTypeInfoCount : CCodePointer[(Pointer[Struct_IXMLElement2],Pointer[UInt]),(CLong)],
    GetTypeInfo : CCodePointer[(Pointer[Struct_IXMLElement2],UInt,CULong,Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetIDsOfNames : CCodePointer[(Pointer[Struct_IXMLElement2],Pointer[Struct__GUID],Pointer[Pointer[UShort]],UInt,CULong,Pointer[CLong]),(CLong)],
    Invoke : CCodePointer[(Pointer[Struct_IXMLElement2],CLong,Pointer[Struct__GUID],CULong,UShort,Pointer[Struct_tagDISPPARAMS],Pointer[Struct_tagVARIANT],Pointer[Struct_tagEXCEPINFO],Pointer[UInt]),(CLong)],
    get_tagName : CCodePointer[(Pointer[Struct_IXMLElement2],Pointer[Pointer[UShort]]),(CLong)],
    put_tagName : CCodePointer[(Pointer[Struct_IXMLElement2],Pointer[UShort]),(CLong)],
    get_parent : CCodePointer[(Pointer[Struct_IXMLElement2],Pointer[Pointer[Struct_IXMLElement2]]),(CLong)],
    setAttribute : CCodePointer[(Pointer[Struct_IXMLElement2],Pointer[UShort],Struct_tagVARIANT),(CLong)],
    getAttribute : CCodePointer[(Pointer[Struct_IXMLElement2],Pointer[UShort],Pointer[Struct_tagVARIANT]),(CLong)],
    removeAttribute : CCodePointer[(Pointer[Struct_IXMLElement2],Pointer[UShort]),(CLong)],
    get_children : CCodePointer[(Pointer[Struct_IXMLElement2],Pointer[Pointer[Struct_IXMLElementCollection]]),(CLong)],
    get_type : CCodePointer[(Pointer[Struct_IXMLElement2],Pointer[CLong]),(CLong)],
    get_text : CCodePointer[(Pointer[Struct_IXMLElement2],Pointer[Pointer[UShort]]),(CLong)],
    put_text : CCodePointer[(Pointer[Struct_IXMLElement2],Pointer[UShort]),(CLong)],
    addChild : CCodePointer[(Pointer[Struct_IXMLElement2],Pointer[Struct_IXMLElement2],CLong,CLong),(CLong)],
    removeChild : CCodePointer[(Pointer[Struct_IXMLElement2],Pointer[Struct_IXMLElement2]),(CLong)],
    get_attributes : CCodePointer[(Pointer[Struct_IXMLElement2],Pointer[Pointer[Struct_IXMLElementCollection]]),(CLong)],
);

alias IXMLElement2Vtbl = Struct_IXMLElement2Vtbl;

record Struct_IXMLElement2 (
    lpVtbl : Pointer[Struct_IXMLElement2Vtbl],
);

external IXMLElement2_get_tagName_Proxy(
    This : Pointer[IXMLElement2],
    p : Pointer[BSTR]) CLong;

external IXMLElement2_get_tagName_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLElement2_put_tagName_Proxy(
    This : Pointer[IXMLElement2],
    p : BSTR) CLong;

external IXMLElement2_put_tagName_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLElement2_get_parent_Proxy(
    This : Pointer[IXMLElement2],
    ppParent : Pointer[Pointer[IXMLElement2]]) CLong;

external IXMLElement2_get_parent_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLElement2_setAttribute_Proxy(
    This : Pointer[IXMLElement2],
    strPropertyName : BSTR,
    PropertyValue : VARIANT) CLong;

external IXMLElement2_setAttribute_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLElement2_getAttribute_Proxy(
    This : Pointer[IXMLElement2],
    strPropertyName : BSTR,
    PropertyValue : Pointer[VARIANT]) CLong;

external IXMLElement2_getAttribute_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLElement2_removeAttribute_Proxy(
    This : Pointer[IXMLElement2],
    strPropertyName : BSTR) CLong;

external IXMLElement2_removeAttribute_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLElement2_get_children_Proxy(
    This : Pointer[IXMLElement2],
    pp : Pointer[Pointer[IXMLElementCollection]]) CLong;

external IXMLElement2_get_children_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLElement2_get_type_Proxy(
    This : Pointer[IXMLElement2],
    plType : Pointer[CLong]) CLong;

external IXMLElement2_get_type_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLElement2_get_text_Proxy(
    This : Pointer[IXMLElement2],
    p : Pointer[BSTR]) CLong;

external IXMLElement2_get_text_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLElement2_put_text_Proxy(
    This : Pointer[IXMLElement2],
    p : BSTR) CLong;

external IXMLElement2_put_text_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLElement2_addChild_Proxy(
    This : Pointer[IXMLElement2],
    pChildElem : Pointer[IXMLElement2],
    lIndex : CLong,
    lReserved : CLong) CLong;

external IXMLElement2_addChild_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLElement2_removeChild_Proxy(
    This : Pointer[IXMLElement2],
    pChildElem : Pointer[IXMLElement2]) CLong;

external IXMLElement2_removeChild_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLElement2_get_attributes_Proxy(
    This : Pointer[IXMLElement2],
    pp : Pointer[Pointer[IXMLElementCollection]]) CLong;

external IXMLElement2_get_attributes_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IXMLAttribute : IID;

record Struct_IXMLAttributeVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IXMLAttribute],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IXMLAttribute]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IXMLAttribute]),(CULong)],
    GetTypeInfoCount : CCodePointer[(Pointer[Struct_IXMLAttribute],Pointer[UInt]),(CLong)],
    GetTypeInfo : CCodePointer[(Pointer[Struct_IXMLAttribute],UInt,CULong,Pointer[Pointer[Struct_ITypeInfo]]),(CLong)],
    GetIDsOfNames : CCodePointer[(Pointer[Struct_IXMLAttribute],Pointer[Struct__GUID],Pointer[Pointer[UShort]],UInt,CULong,Pointer[CLong]),(CLong)],
    Invoke : CCodePointer[(Pointer[Struct_IXMLAttribute],CLong,Pointer[Struct__GUID],CULong,UShort,Pointer[Struct_tagDISPPARAMS],Pointer[Struct_tagVARIANT],Pointer[Struct_tagEXCEPINFO],Pointer[UInt]),(CLong)],
    get_name : CCodePointer[(Pointer[Struct_IXMLAttribute],Pointer[Pointer[UShort]]),(CLong)],
    get_value : CCodePointer[(Pointer[Struct_IXMLAttribute],Pointer[Pointer[UShort]]),(CLong)],
);

alias IXMLAttributeVtbl = Struct_IXMLAttributeVtbl;

record Struct_IXMLAttribute (
    lpVtbl : Pointer[Struct_IXMLAttributeVtbl],
);

external IXMLAttribute_get_name_Proxy(
    This : Pointer[IXMLAttribute],
    n : Pointer[BSTR]) CLong;

external IXMLAttribute_get_name_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IXMLAttribute_get_value_Proxy(
    This : Pointer[IXMLAttribute],
    v : Pointer[BSTR]) CLong;

external IXMLAttribute_get_value_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IXMLError : IID;

record Struct_IXMLErrorVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IXMLError],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IXMLError]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IXMLError]),(CULong)],
    GetErrorInfo : CCodePointer[(Pointer[Struct_IXMLError],Pointer[Struct__xml_error]),(CLong)],
);

alias IXMLErrorVtbl = Struct_IXMLErrorVtbl;

record Struct_IXMLError (
    lpVtbl : Pointer[Struct_IXMLErrorVtbl],
);

external IXMLError_GetErrorInfo_Proxy(
    This : Pointer[IXMLError],
    pErrorReturn : Pointer[XML_ERROR]) CLong;

external IXMLError_GetErrorInfo_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external CLSID_XMLDocument : CLSID;

external CLSID_SBS_StdURLMoniker : IID;

external CLSID_SBS_HttpProtocol : IID;

external CLSID_SBS_FtpProtocol : IID;

external CLSID_SBS_GopherProtocol : IID;

external CLSID_SBS_HttpSProtocol : IID;

external CLSID_SBS_FileProtocol : IID;

external CLSID_SBS_MkProtocol : IID;

external CLSID_SBS_UrlMkBindCtx : IID;

external CLSID_SBS_SoftDistExt : IID;

external CLSID_SBS_StdEncodingFilterFac : IID;

external CLSID_SBS_DeCompMimeFilter : IID;

external CLSID_SBS_CdlProtocol : IID;

external CLSID_SBS_ClassInstallFilter : IID;

external CLSID_SBS_InternetSecurityManager : IID;

external CLSID_SBS_InternetZoneManager : IID;

external IID_IAsyncMoniker : IID;

external CLSID_StdURLMoniker : IID;

external CLSID_HttpProtocol : IID;

external CLSID_FtpProtocol : IID;

external CLSID_GopherProtocol : IID;

external CLSID_HttpSProtocol : IID;

external CLSID_FileProtocol : IID;

external CLSID_MkProtocol : IID;

external CLSID_StdURLProtocol : IID;

external CLSID_UrlMkBindCtx : IID;

external CLSID_StdEncodingFilterFac : IID;

external CLSID_DeCompMimeFilter : IID;

external CLSID_CdlProtocol : IID;

external CLSID_ClassInstallFilter : IID;

external IID_IAsyncBindCtx : IID;

external CreateURLMoniker(
    pMkCtx : LPMONIKER,
    szURL : LPCWSTR,
    ppmk : Pointer[LPMONIKER]) CLong;

external CreateURLMonikerEx(
    pMkCtx : LPMONIKER,
    szURL : LPCWSTR,
    ppmk : Pointer[LPMONIKER],
    dwFlags : CULong) CLong;

external GetClassURL(
    szURL : LPCWSTR,
    pClsID : Pointer[CLSID]) CLong;

external CreateAsyncBindCtx(
    reserved : CULong,
    pBSCb : Pointer[IBindStatusCallback],
    pEFetc : Pointer[IEnumFORMATETC],
    ppBC : Pointer[Pointer[IBindCtx]]) CLong;

external CreateAsyncBindCtxEx(
    pbc : Pointer[IBindCtx],
    dwOptions : CULong,
    pBSCb : Pointer[IBindStatusCallback],
    pEnum : Pointer[IEnumFORMATETC],
    ppBC : Pointer[Pointer[IBindCtx]],
    reserved : CULong) CLong;

external MkParseDisplayNameEx(
    pbc : Pointer[IBindCtx],
    szDisplayName : LPCWSTR,
    pchEaten : Pointer[CULong],
    ppmk : Pointer[LPMONIKER]) CLong;

external RegisterBindStatusCallback(
    pBC : LPBC,
    pBSCb : Pointer[IBindStatusCallback],
    ppBSCBPrev : Pointer[Pointer[IBindStatusCallback]],
    dwReserved : CULong) CLong;

external RevokeBindStatusCallback(
    pBC : LPBC,
    pBSCb : Pointer[IBindStatusCallback]) CLong;

external GetClassFileOrMime(
    pBC : LPBC,
    szFilename : LPCWSTR,
    pBuffer : LPVOID,
    cbSize : CULong,
    szMime : LPCWSTR,
    dwReserved : CULong,
    pclsid : Pointer[CLSID]) CLong;

external IsValidURL(
    pBC : LPBC,
    szURL : LPCWSTR,
    dwReserved : CULong) CLong;

external CoGetClassObjectFromURL(
    rCLASSID : Pointer[IID],
    szCODE : LPCWSTR,
    dwFileVersionMS : CULong,
    dwFileVersionLS : CULong,
    szTYPE : LPCWSTR,
    pBindCtx : LPBINDCTX,
    dwClsContext : CULong,
    pvReserved : LPVOID,
    riid : Pointer[IID],
    ppv : Pointer[LPVOID]) CLong;

external FaultInIEFeature(
    hWnd : HWND,
    pClassSpec : Pointer[uCLSSPEC],
    pQuery : Pointer[QUERYCONTEXT],
    dwFlags : CULong) CLong;

external GetComponentIDFromCLSSPEC(
    pClassspec : Pointer[uCLSSPEC],
    ppszComponentID : Pointer[LPSTR]) CLong;

external IsAsyncMoniker(
    pmk : Pointer[IMoniker]) CLong;

external CreateURLBinding(
    lpszUrl : LPCWSTR,
    pbc : Pointer[IBindCtx],
    ppBdg : Pointer[Pointer[IBinding]]) CLong;

external RegisterMediaTypes(
    ctypes : UInt,
    rgszTypes : Pointer[LPCSTR],
    rgcfTypes : Pointer[UShort]) CLong;

external FindMediaType(
    rgszTypes : LPCSTR,
    rgcfTypes : Pointer[UShort]) CLong;

external CreateFormatEnumerator(
    cfmtetc : UInt,
    rgfmtetc : Pointer[FORMATETC],
    ppenumfmtetc : Pointer[Pointer[IEnumFORMATETC]]) CLong;

external RegisterFormatEnumerator(
    pBC : LPBC,
    pEFetc : Pointer[IEnumFORMATETC],
    reserved : CULong) CLong;

external RevokeFormatEnumerator(
    pBC : LPBC,
    pEFetc : Pointer[IEnumFORMATETC]) CLong;

external RegisterMediaTypeClass(
    pBC : LPBC,
    ctypes : UInt,
    rgszTypes : Pointer[LPCSTR],
    rgclsID : Pointer[CLSID],
    reserved : CULong) CLong;

external FindMediaTypeClass(
    pBC : LPBC,
    szType : LPCSTR,
    pclsID : Pointer[CLSID],
    reserved : CULong) CLong;

external UrlMkSetSessionOption(
    dwOption : CULong,
    pBuffer : LPVOID,
    dwBufferLength : CULong,
    dwReserved : CULong) CLong;

external UrlMkGetSessionOption(
    dwOption : CULong,
    pBuffer : LPVOID,
    dwBufferLength : CULong,
    pdwBufferLength : Pointer[CULong],
    dwReserved : CULong) CLong;

external FindMimeFromData(
    pBC : LPBC,
    pwzUrl : LPCWSTR,
    pBuffer : LPVOID,
    cbSize : CULong,
    pwzMimeProposed : LPCWSTR,
    dwMimeFlags : CULong,
    ppwzMimeOut : Pointer[LPWSTR],
    dwReserved : CULong) CLong;

external ObtainUserAgentString(
    dwOption : CULong,
    pszUAOut : LPSTR,
    cbSize : Pointer[CULong]) CLong;

external CompareSecurityIds(
    pbSecurityId1 : Pointer[CUChar],
    dwLen1 : CULong,
    pbSecurityId2 : Pointer[CUChar],
    dwLen2 : CULong,
    dwReserved : CULong) CLong;

external CompatFlagsFromClsid(
    pclsid : Pointer[CLSID],
    pdwCompatFlags : LPDWORD,
    pdwMiscStatusFlags : LPDWORD) CLong;

external __MIDL_itf_urlmon_0000_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_urlmon_0000_v0_0_s_ifspec : RPC_IF_HANDLE;

alias LPPERSISTMONIKER = Pointer[IPersistMoniker];

external IID_IPersistMoniker : IID;

record Struct_IPersistMonikerVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IPersistMoniker],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IPersistMoniker]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IPersistMoniker]),(CULong)],
    GetClassID : CCodePointer[(Pointer[Struct_IPersistMoniker],Pointer[Struct__GUID]),(CLong)],
    IsDirty : CCodePointer[(Pointer[Struct_IPersistMoniker]),(CLong)],
    Load : CCodePointer[(Pointer[Struct_IPersistMoniker],Int,Pointer[Struct_IMoniker],Pointer[Struct_IBindCtx],CULong),(CLong)],
    Save : CCodePointer[(Pointer[Struct_IPersistMoniker],Pointer[Struct_IMoniker],Pointer[Struct_IBindCtx],Int),(CLong)],
    SaveCompleted : CCodePointer[(Pointer[Struct_IPersistMoniker],Pointer[Struct_IMoniker],Pointer[Struct_IBindCtx]),(CLong)],
    GetCurMoniker : CCodePointer[(Pointer[Struct_IPersistMoniker],Pointer[Pointer[Struct_IMoniker]]),(CLong)],
);

alias IPersistMonikerVtbl = Struct_IPersistMonikerVtbl;

record Struct_IPersistMoniker (
    lpVtbl : Pointer[Struct_IPersistMonikerVtbl],
);

external IPersistMoniker_GetClassID_Proxy(
    This : Pointer[IPersistMoniker],
    pClassID : Pointer[CLSID]) CLong;

external IPersistMoniker_GetClassID_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IPersistMoniker_IsDirty_Proxy(
    This : Pointer[IPersistMoniker]) CLong;

external IPersistMoniker_IsDirty_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IPersistMoniker_Load_Proxy(
    This : Pointer[IPersistMoniker],
    fFullyAvailable : Int,
    pimkName : Pointer[IMoniker],
    pibc : LPBC,
    grfMode : CULong) CLong;

external IPersistMoniker_Load_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IPersistMoniker_Save_Proxy(
    This : Pointer[IPersistMoniker],
    pimkName : Pointer[IMoniker],
    pbc : LPBC,
    fRemember : Int) CLong;

external IPersistMoniker_Save_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IPersistMoniker_SaveCompleted_Proxy(
    This : Pointer[IPersistMoniker],
    pimkName : Pointer[IMoniker],
    pibc : LPBC) CLong;

external IPersistMoniker_SaveCompleted_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IPersistMoniker_GetCurMoniker_Proxy(
    This : Pointer[IPersistMoniker],
    ppimkName : Pointer[Pointer[IMoniker]]) CLong;

external IPersistMoniker_GetCurMoniker_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external __MIDL_itf_urlmon_0178_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_urlmon_0178_v0_0_s_ifspec : RPC_IF_HANDLE;

alias LPMONIKERPROP = Pointer[IMonikerProp];

alias MIMETYPEPROP = 0;
alias USE_SRC_URL = 1;
alias CLASSIDPROP = 2;
alias TRUSTEDDOWNLOADPROP = 3;
alias POPUPLEVELPROP = 4;

alias MONIKERPROPERTY = Int;

external IID_IMonikerProp : IID;

record Struct_IMonikerPropVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IMonikerProp],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IMonikerProp]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IMonikerProp]),(CULong)],
    PutProperty : CCodePointer[(Pointer[Struct_IMonikerProp],Int,Pointer[UShort]),(CLong)],
);

alias IMonikerPropVtbl = Struct_IMonikerPropVtbl;

record Struct_IMonikerProp (
    lpVtbl : Pointer[Struct_IMonikerPropVtbl],
);

external IMonikerProp_PutProperty_Proxy(
    This : Pointer[IMonikerProp],
    mkp : MONIKERPROPERTY,
    val : LPCWSTR) CLong;

external IMonikerProp_PutProperty_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external __MIDL_itf_urlmon_0179_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_urlmon_0179_v0_0_s_ifspec : RPC_IF_HANDLE;

alias LPBINDPROTOCOL = Pointer[IBindProtocol];

external IID_IBindProtocol : IID;

record Struct_IBindProtocolVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IBindProtocol],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IBindProtocol]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IBindProtocol]),(CULong)],
    CreateBinding : CCodePointer[(Pointer[Struct_IBindProtocol],Pointer[UShort],Pointer[Struct_IBindCtx],Pointer[Pointer[Struct_IBinding]]),(CLong)],
);

alias IBindProtocolVtbl = Struct_IBindProtocolVtbl;

record Struct_IBindProtocol (
    lpVtbl : Pointer[Struct_IBindProtocolVtbl],
);

external IBindProtocol_CreateBinding_Proxy(
    This : Pointer[IBindProtocol],
    szUrl : LPCWSTR,
    pbc : Pointer[IBindCtx],
    ppb : Pointer[Pointer[IBinding]]) CLong;

external IBindProtocol_CreateBinding_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external __MIDL_itf_urlmon_0180_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_urlmon_0180_v0_0_s_ifspec : RPC_IF_HANDLE;

alias LPBINDING = Pointer[IBinding];

external IID_IBinding : IID;

record Struct_IBindingVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IBinding],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IBinding]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IBinding]),(CULong)],
    Abort : CCodePointer[(Pointer[Struct_IBinding]),(CLong)],
    Suspend : CCodePointer[(Pointer[Struct_IBinding]),(CLong)],
    Resume : CCodePointer[(Pointer[Struct_IBinding]),(CLong)],
    SetPriority : CCodePointer[(Pointer[Struct_IBinding],CLong),(CLong)],
    GetPriority : CCodePointer[(Pointer[Struct_IBinding],Pointer[CLong]),(CLong)],
    GetBindResult : CCodePointer[(Pointer[Struct_IBinding],Pointer[Struct__GUID],Pointer[CULong],Pointer[Pointer[UShort]],Pointer[CULong]),(CLong)],
);

alias IBindingVtbl = Struct_IBindingVtbl;

record Struct_IBinding (
    lpVtbl : Pointer[Struct_IBindingVtbl],
);

external IBinding_Abort_Proxy(
    This : Pointer[IBinding]) CLong;

external IBinding_Abort_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IBinding_Suspend_Proxy(
    This : Pointer[IBinding]) CLong;

external IBinding_Suspend_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IBinding_Resume_Proxy(
    This : Pointer[IBinding]) CLong;

external IBinding_Resume_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IBinding_SetPriority_Proxy(
    This : Pointer[IBinding],
    nPriority : CLong) CLong;

external IBinding_SetPriority_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IBinding_GetPriority_Proxy(
    This : Pointer[IBinding],
    pnPriority : Pointer[CLong]) CLong;

external IBinding_GetPriority_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IBinding_RemoteGetBindResult_Proxy(
    This : Pointer[IBinding],
    pclsidProtocol : Pointer[CLSID],
    pdwResult : Pointer[CULong],
    pszResult : Pointer[LPOLESTR],
    dwReserved : CULong) CLong;

external IBinding_RemoteGetBindResult_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external __MIDL_itf_urlmon_0181_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_urlmon_0181_v0_0_s_ifspec : RPC_IF_HANDLE;

alias LPBINDSTATUSCALLBACK = Pointer[IBindStatusCallback];

alias BINDVERB_GET = 0;
alias BINDVERB_POST = 1;
alias BINDVERB_PUT = 2;
alias BINDVERB_CUSTOM = 3;

alias BINDVERB = Int;

alias BINDINFOF_URLENCODESTGMEDDATA = 1;
alias BINDINFOF_URLENCODEDEXTRAINFO = 2;

alias BINDINFOF = Int;

alias BINDF_ASYNCHRONOUS = 1;
alias BINDF_ASYNCSTORAGE = 2;
alias BINDF_NOPROGRESSIVERENDERING = 4;
alias BINDF_OFFLINEOPERATION = 8;
alias BINDF_GETNEWESTVERSION = 16;
alias BINDF_NOWRITECACHE = 32;
alias BINDF_NEEDFILE = 64;
alias BINDF_PULLDATA = 128;
alias BINDF_IGNORESECURITYPROBLEM = 256;
alias BINDF_RESYNCHRONIZE = 512;
alias BINDF_HYPERLINK = 1024;
alias BINDF_NO_UI = 2048;
alias BINDF_SILENTOPERATION = 4096;
alias BINDF_PRAGMA_NO_CACHE = 8192;
alias BINDF_GETCLASSOBJECT = 16384;
alias BINDF_RESERVED_1 = 32768;
alias BINDF_FREE_THREADED = 65536;
alias BINDF_DIRECT_READ = 131072;
alias BINDF_FORMS_SUBMIT = 262144;
alias BINDF_GETFROMCACHE_IF_NET_FAIL = 524288;
alias BINDF_FROMURLMON = 1048576;
alias BINDF_FWD_BACK = 2097152;
alias BINDF_PREFERDEFAULTHANDLER = 4194304;
alias BINDF_ENFORCERESTRICTED = 8388608;

alias BINDF = Int;

alias URL_ENCODING_NONE = 0;
alias URL_ENCODING_ENABLE_UTF8 = 268435456;
alias URL_ENCODING_DISABLE_UTF8 = 536870912;

alias URL_ENCODING = Int;

record Struct__tagBINDINFO (
    cbSize : CULong,
    szExtraInfo : LPWSTR,
    stgmedData : STGMEDIUM,
    grfBindInfoF : CULong,
    dwBindVerb : CULong,
    szCustomVerb : LPWSTR,
    cbstgmedData : CULong,
    dwOptions : CULong,
    dwOptionsFlags : CULong,
    dwCodePage : CULong,
    securityAttributes : SECURITY_ATTRIBUTES,
    iid : IID,
    pUnk : Pointer[IUnknown],
    dwReserved : CULong,
);

alias BINDINFO = Struct__tagBINDINFO;

record Struct__REMSECURITY_ATTRIBUTES (
    nLength : CULong,
    lpSecurityDescriptor : CULong,
    bInheritHandle : Int,
);

alias REMSECURITY_ATTRIBUTES = Struct__REMSECURITY_ATTRIBUTES;

alias PREMSECURITY_ATTRIBUTES = Pointer[Struct__REMSECURITY_ATTRIBUTES];

alias LPREMSECURITY_ATTRIBUTES = Pointer[Struct__REMSECURITY_ATTRIBUTES];

record Struct__tagRemBINDINFO (
    cbSize : CULong,
    szExtraInfo : LPWSTR,
    grfBindInfoF : CULong,
    dwBindVerb : CULong,
    szCustomVerb : LPWSTR,
    cbstgmedData : CULong,
    dwOptions : CULong,
    dwOptionsFlags : CULong,
    dwCodePage : CULong,
    securityAttributes : REMSECURITY_ATTRIBUTES,
    iid : IID,
    pUnk : Pointer[IUnknown],
    dwReserved : CULong,
);

alias RemBINDINFO = Struct__tagRemBINDINFO;

record Struct_tagRemFORMATETC (
    cfFormat : CULong,
    ptd : CULong,
    dwAspect : CULong,
    lindex : CLong,
    tymed : CULong,
);

alias RemFORMATETC = Struct_tagRemFORMATETC;

alias LPREMFORMATETC = Pointer[Struct_tagRemFORMATETC];

alias BINDINFO_OPTIONS_WININETFLAG = 65536;
alias BINDINFO_OPTIONS_ENABLE_UTF8 = 131072;
alias BINDINFO_OPTIONS_DISABLE_UTF8 = 262144;
alias BINDINFO_OPTIONS_USE_IE_ENCODING = 524288;
alias BINDINFO_OPTIONS_BINDTOOBJECT = 1048576;
alias BINDINFO_OPTIONS_SECURITYOPTOUT = 2097152;
alias BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN = 4194304;
alias BINDINFO_OPTIONS_USEBINDSTRINGCREDS = 8388608;
alias BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS = 16777216;
alias BINDINFO_OPTIONS_SHDOCVW_NAVIGATE = 2147483648;

alias BINDINFO_OPTIONS = Int;

alias BSCF_FIRSTDATANOTIFICATION = 1;
alias BSCF_INTERMEDIATEDATANOTIFICATION = 2;
alias BSCF_LASTDATANOTIFICATION = 4;
alias BSCF_DATAFULLYAVAILABLE = 8;
alias BSCF_AVAILABLEDATASIZEUNKNOWN = 16;

alias BSCF = Int;

alias BINDSTATUS_FINDINGRESOURCE = 1;
alias BINDSTATUS_CONNECTING = 2;
alias BINDSTATUS_REDIRECTING = 3;
alias BINDSTATUS_BEGINDOWNLOADDATA = 4;
alias BINDSTATUS_DOWNLOADINGDATA = 5;
alias BINDSTATUS_ENDDOWNLOADDATA = 6;
alias BINDSTATUS_BEGINDOWNLOADCOMPONENTS = 7;
alias BINDSTATUS_INSTALLINGCOMPONENTS = 8;
alias BINDSTATUS_ENDDOWNLOADCOMPONENTS = 9;
alias BINDSTATUS_USINGCACHEDCOPY = 10;
alias BINDSTATUS_SENDINGREQUEST = 11;
alias BINDSTATUS_CLASSIDAVAILABLE = 12;
alias BINDSTATUS_MIMETYPEAVAILABLE = 13;
alias BINDSTATUS_CACHEFILENAMEAVAILABLE = 14;
alias BINDSTATUS_BEGINSYNCOPERATION = 15;
alias BINDSTATUS_ENDSYNCOPERATION = 16;
alias BINDSTATUS_BEGINUPLOADDATA = 17;
alias BINDSTATUS_UPLOADINGDATA = 18;
alias BINDSTATUS_ENDUPLOADDATA = 19;
alias BINDSTATUS_PROTOCOLCLASSID = 20;
alias BINDSTATUS_ENCODING = 21;
alias BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE = 22;
alias BINDSTATUS_CLASSINSTALLLOCATION = 23;
alias BINDSTATUS_DECODING = 24;
alias BINDSTATUS_LOADINGMIMEHANDLER = 25;
alias BINDSTATUS_CONTENTDISPOSITIONATTACH = 26;
alias BINDSTATUS_FILTERREPORTMIMETYPE = 27;
alias BINDSTATUS_CLSIDCANINSTANTIATE = 28;
alias BINDSTATUS_IUNKNOWNAVAILABLE = 29;
alias BINDSTATUS_DIRECTBIND = 30;
alias BINDSTATUS_RAWMIMETYPE = 31;
alias BINDSTATUS_PROXYDETECTING = 32;
alias BINDSTATUS_ACCEPTRANGES = 33;
alias BINDSTATUS_COOKIE_SENT = 34;
alias BINDSTATUS_COMPACT_POLICY_RECEIVED = 35;
alias BINDSTATUS_COOKIE_SUPPRESSED = 36;
alias BINDSTATUS_COOKIE_STATE_UNKNOWN = 37;
alias BINDSTATUS_COOKIE_STATE_ACCEPT = 38;
alias BINDSTATUS_COOKIE_STATE_REJECT = 39;
alias BINDSTATUS_COOKIE_STATE_PROMPT = 40;
alias BINDSTATUS_COOKIE_STATE_LEASH = 41;
alias BINDSTATUS_COOKIE_STATE_DOWNGRADE = 42;
alias BINDSTATUS_POLICY_HREF = 43;
alias BINDSTATUS_P3P_HEADER = 44;
alias BINDSTATUS_SESSION_COOKIE_RECEIVED = 45;
alias BINDSTATUS_PERSISTENT_COOKIE_RECEIVED = 46;
alias BINDSTATUS_SESSION_COOKIES_ALLOWED = 47;
alias BINDSTATUS_CACHECONTROL = 48;
alias BINDSTATUS_CONTENTDISPOSITIONFILENAME = 49;
alias BINDSTATUS_MIMETEXTPLAINMISMATCH = 50;
alias BINDSTATUS_PUBLISHERAVAILABLE = 51;
alias BINDSTATUS_DISPLAYNAMEAVAILABLE = 52;

alias BINDSTATUS = Int;

external IID_IBindStatusCallback : IID;

record Struct_IBindStatusCallbackVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IBindStatusCallback],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IBindStatusCallback]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IBindStatusCallback]),(CULong)],
    OnStartBinding : CCodePointer[(Pointer[Struct_IBindStatusCallback],CULong,Pointer[Struct_IBinding]),(CLong)],
    GetPriority : CCodePointer[(Pointer[Struct_IBindStatusCallback],Pointer[CLong]),(CLong)],
    OnLowResource : CCodePointer[(Pointer[Struct_IBindStatusCallback],CULong),(CLong)],
    OnProgress : CCodePointer[(Pointer[Struct_IBindStatusCallback],CULong,CULong,CULong,Pointer[UShort]),(CLong)],
    OnStopBinding : CCodePointer[(Pointer[Struct_IBindStatusCallback],CLong,Pointer[UShort]),(CLong)],
    GetBindInfo : CCodePointer[(Pointer[Struct_IBindStatusCallback],Pointer[CULong],Pointer[Struct__tagBINDINFO]),(CLong)],
    OnDataAvailable : CCodePointer[(Pointer[Struct_IBindStatusCallback],CULong,CULong,Pointer[Struct_tagFORMATETC],Pointer[Struct_tagSTGMEDIUM]),(CLong)],
    OnObjectAvailable : CCodePointer[(Pointer[Struct_IBindStatusCallback],Pointer[Struct__GUID],Pointer[Struct_IUnknown]),(CLong)],
);

alias IBindStatusCallbackVtbl = Struct_IBindStatusCallbackVtbl;

record Struct_IBindStatusCallback (
    lpVtbl : Pointer[Struct_IBindStatusCallbackVtbl],
);

external IBindStatusCallback_OnStartBinding_Proxy(
    This : Pointer[IBindStatusCallback],
    dwReserved : CULong,
    pib : Pointer[IBinding]) CLong;

external IBindStatusCallback_OnStartBinding_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IBindStatusCallback_GetPriority_Proxy(
    This : Pointer[IBindStatusCallback],
    pnPriority : Pointer[CLong]) CLong;

external IBindStatusCallback_GetPriority_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IBindStatusCallback_OnLowResource_Proxy(
    This : Pointer[IBindStatusCallback],
    reserved : CULong) CLong;

external IBindStatusCallback_OnLowResource_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IBindStatusCallback_OnProgress_Proxy(
    This : Pointer[IBindStatusCallback],
    ulProgress : CULong,
    ulProgressMax : CULong,
    ulStatusCode : CULong,
    szStatusText : LPCWSTR) CLong;

external IBindStatusCallback_OnProgress_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IBindStatusCallback_OnStopBinding_Proxy(
    This : Pointer[IBindStatusCallback],
    hresult : CLong,
    szError : LPCWSTR) CLong;

external IBindStatusCallback_OnStopBinding_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IBindStatusCallback_RemoteGetBindInfo_Proxy(
    This : Pointer[IBindStatusCallback],
    grfBINDF : Pointer[CULong],
    pbindinfo : Pointer[RemBINDINFO],
    pstgmed : Pointer[RemSTGMEDIUM]) CLong;

external IBindStatusCallback_RemoteGetBindInfo_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IBindStatusCallback_RemoteOnDataAvailable_Proxy(
    This : Pointer[IBindStatusCallback],
    grfBSCF : CULong,
    dwSize : CULong,
    pformatetc : Pointer[RemFORMATETC],
    pstgmed : Pointer[RemSTGMEDIUM]) CLong;

external IBindStatusCallback_RemoteOnDataAvailable_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IBindStatusCallback_OnObjectAvailable_Proxy(
    This : Pointer[IBindStatusCallback],
    riid : Pointer[IID],
    punk : Pointer[IUnknown]) CLong;

external IBindStatusCallback_OnObjectAvailable_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external __MIDL_itf_urlmon_0182_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_urlmon_0182_v0_0_s_ifspec : RPC_IF_HANDLE;

alias LPAUTHENTICATION = Pointer[IAuthenticate];

external IID_IAuthenticate : IID;

record Struct_IAuthenticateVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IAuthenticate],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IAuthenticate]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IAuthenticate]),(CULong)],
    Authenticate : CCodePointer[(Pointer[Struct_IAuthenticate],Pointer[Pointer[Struct_HWND__]],Pointer[Pointer[UShort]],Pointer[Pointer[UShort]]),(CLong)],
);

alias IAuthenticateVtbl = Struct_IAuthenticateVtbl;

record Struct_IAuthenticate (
    lpVtbl : Pointer[Struct_IAuthenticateVtbl],
);

external IAuthenticate_Authenticate_Proxy(
    This : Pointer[IAuthenticate],
    phwnd : Pointer[HWND],
    pszUsername : Pointer[LPWSTR],
    pszPassword : Pointer[LPWSTR]) CLong;

external IAuthenticate_Authenticate_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external __MIDL_itf_urlmon_0183_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_urlmon_0183_v0_0_s_ifspec : RPC_IF_HANDLE;

alias LPHTTPNEGOTIATE = Pointer[IHttpNegotiate];

external IID_IHttpNegotiate : IID;

record Struct_IHttpNegotiateVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IHttpNegotiate],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IHttpNegotiate]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IHttpNegotiate]),(CULong)],
    BeginningTransaction : CCodePointer[(Pointer[Struct_IHttpNegotiate],Pointer[UShort],Pointer[UShort],CULong,Pointer[Pointer[UShort]]),(CLong)],
    OnResponse : CCodePointer[(Pointer[Struct_IHttpNegotiate],CULong,Pointer[UShort],Pointer[UShort],Pointer[Pointer[UShort]]),(CLong)],
);

alias IHttpNegotiateVtbl = Struct_IHttpNegotiateVtbl;

record Struct_IHttpNegotiate (
    lpVtbl : Pointer[Struct_IHttpNegotiateVtbl],
);

external IHttpNegotiate_BeginningTransaction_Proxy(
    This : Pointer[IHttpNegotiate],
    szURL : LPCWSTR,
    szHeaders : LPCWSTR,
    dwReserved : CULong,
    pszAdditionalHeaders : Pointer[LPWSTR]) CLong;

external IHttpNegotiate_BeginningTransaction_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IHttpNegotiate_OnResponse_Proxy(
    This : Pointer[IHttpNegotiate],
    dwResponseCode : CULong,
    szResponseHeaders : LPCWSTR,
    szRequestHeaders : LPCWSTR,
    pszAdditionalRequestHeaders : Pointer[LPWSTR]) CLong;

external IHttpNegotiate_OnResponse_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external __MIDL_itf_urlmon_0184_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_urlmon_0184_v0_0_s_ifspec : RPC_IF_HANDLE;

alias LPHTTPNEGOTIATE2 = Pointer[IHttpNegotiate2];

external IID_IHttpNegotiate2 : IID;

record Struct_IHttpNegotiate2Vtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IHttpNegotiate2],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IHttpNegotiate2]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IHttpNegotiate2]),(CULong)],
    BeginningTransaction : CCodePointer[(Pointer[Struct_IHttpNegotiate2],Pointer[UShort],Pointer[UShort],CULong,Pointer[Pointer[UShort]]),(CLong)],
    OnResponse : CCodePointer[(Pointer[Struct_IHttpNegotiate2],CULong,Pointer[UShort],Pointer[UShort],Pointer[Pointer[UShort]]),(CLong)],
    GetRootSecurityId : CCodePointer[(Pointer[Struct_IHttpNegotiate2],Pointer[CUChar],Pointer[CULong],UInt64),(CLong)],
);

alias IHttpNegotiate2Vtbl = Struct_IHttpNegotiate2Vtbl;

record Struct_IHttpNegotiate2 (
    lpVtbl : Pointer[Struct_IHttpNegotiate2Vtbl],
);

external IHttpNegotiate2_GetRootSecurityId_Proxy(
    This : Pointer[IHttpNegotiate2],
    pbSecurityId : Pointer[CUChar],
    pcbSecurityId : Pointer[CULong],
    dwReserved : UInt64) CLong;

external IHttpNegotiate2_GetRootSecurityId_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external __MIDL_itf_urlmon_0185_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_urlmon_0185_v0_0_s_ifspec : RPC_IF_HANDLE;

alias LPWININETFILESTREAM = Pointer[IWinInetFileStream];

external IID_IWinInetFileStream : IID;

record Struct_IWinInetFileStreamVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IWinInetFileStream],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IWinInetFileStream]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IWinInetFileStream]),(CULong)],
    SetHandleForUnlock : CCodePointer[(Pointer[Struct_IWinInetFileStream],UInt64,UInt64),(CLong)],
    SetDeleteFile : CCodePointer[(Pointer[Struct_IWinInetFileStream],UInt64),(CLong)],
);

alias IWinInetFileStreamVtbl = Struct_IWinInetFileStreamVtbl;

record Struct_IWinInetFileStream (
    lpVtbl : Pointer[Struct_IWinInetFileStreamVtbl],
);

external IWinInetFileStream_SetHandleForUnlock_Proxy(
    This : Pointer[IWinInetFileStream],
    hWinInetLockHandle : UInt64,
    dwReserved : UInt64) CLong;

external IWinInetFileStream_SetHandleForUnlock_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IWinInetFileStream_SetDeleteFile_Proxy(
    This : Pointer[IWinInetFileStream],
    dwReserved : UInt64) CLong;

external IWinInetFileStream_SetDeleteFile_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external __MIDL_itf_urlmon_0186_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_urlmon_0186_v0_0_s_ifspec : RPC_IF_HANDLE;

alias LPWINDOWFORBINDINGUI = Pointer[IWindowForBindingUI];

external IID_IWindowForBindingUI : IID;

record Struct_IWindowForBindingUIVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IWindowForBindingUI],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IWindowForBindingUI]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IWindowForBindingUI]),(CULong)],
    GetWindow : CCodePointer[(Pointer[Struct_IWindowForBindingUI],Pointer[Struct__GUID],Pointer[Pointer[Struct_HWND__]]),(CLong)],
);

alias IWindowForBindingUIVtbl = Struct_IWindowForBindingUIVtbl;

record Struct_IWindowForBindingUI (
    lpVtbl : Pointer[Struct_IWindowForBindingUIVtbl],
);

external IWindowForBindingUI_GetWindow_Proxy(
    This : Pointer[IWindowForBindingUI],
    rguidReason : Pointer[GUID],
    phwnd : Pointer[HWND]) CLong;

external IWindowForBindingUI_GetWindow_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external __MIDL_itf_urlmon_0187_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_urlmon_0187_v0_0_s_ifspec : RPC_IF_HANDLE;

alias LPCODEINSTALL = Pointer[ICodeInstall];

alias CIP_DISK_FULL = 0;
alias CIP_ACCESS_DENIED = 1;
alias CIP_NEWER_VERSION_EXISTS = 2;
alias CIP_OLDER_VERSION_EXISTS = 3;
alias CIP_NAME_CONFLICT = 4;
alias CIP_TRUST_VERIFICATION_COMPONENT_MISSING = 5;
alias CIP_EXE_SELF_REGISTERATION_TIMEOUT = 6;
alias CIP_UNSAFE_TO_ABORT = 7;
alias CIP_NEED_REBOOT = 8;
alias CIP_NEED_REBOOT_UI_PERMISSION = 9;

alias CIP_STATUS = Int;

external IID_ICodeInstall : IID;

record Struct_ICodeInstallVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_ICodeInstall],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_ICodeInstall]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_ICodeInstall]),(CULong)],
    GetWindow : CCodePointer[(Pointer[Struct_ICodeInstall],Pointer[Struct__GUID],Pointer[Pointer[Struct_HWND__]]),(CLong)],
    OnCodeInstallProblem : CCodePointer[(Pointer[Struct_ICodeInstall],CULong,Pointer[UShort],Pointer[UShort],CULong),(CLong)],
);

alias ICodeInstallVtbl = Struct_ICodeInstallVtbl;

record Struct_ICodeInstall (
    lpVtbl : Pointer[Struct_ICodeInstallVtbl],
);

external ICodeInstall_OnCodeInstallProblem_Proxy(
    This : Pointer[ICodeInstall],
    ulStatusCode : CULong,
    szDestination : LPCWSTR,
    szSource : LPCWSTR,
    dwReserved : CULong) CLong;

external ICodeInstall_OnCodeInstallProblem_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external __MIDL_itf_urlmon_0188_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_urlmon_0188_v0_0_s_ifspec : RPC_IF_HANDLE;

alias LPWININETINFO = Pointer[IWinInetInfo];

external IID_IWinInetInfo : IID;

record Struct_IWinInetInfoVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IWinInetInfo],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IWinInetInfo]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IWinInetInfo]),(CULong)],
    QueryOption : CCodePointer[(Pointer[Struct_IWinInetInfo],CULong,RawPointer,Pointer[CULong]),(CLong)],
);

alias IWinInetInfoVtbl = Struct_IWinInetInfoVtbl;

record Struct_IWinInetInfo (
    lpVtbl : Pointer[Struct_IWinInetInfoVtbl],
);

external IWinInetInfo_RemoteQueryOption_Proxy(
    This : Pointer[IWinInetInfo],
    dwOption : CULong,
    pBuffer : Pointer[CUChar],
    pcbBuf : Pointer[CULong]) CLong;

external IWinInetInfo_RemoteQueryOption_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external __MIDL_itf_urlmon_0189_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_urlmon_0189_v0_0_s_ifspec : RPC_IF_HANDLE;

alias LPHTTPSECURITY = Pointer[IHttpSecurity];

external IID_IHttpSecurity : IID;

record Struct_IHttpSecurityVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IHttpSecurity],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IHttpSecurity]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IHttpSecurity]),(CULong)],
    GetWindow : CCodePointer[(Pointer[Struct_IHttpSecurity],Pointer[Struct__GUID],Pointer[Pointer[Struct_HWND__]]),(CLong)],
    OnSecurityProblem : CCodePointer[(Pointer[Struct_IHttpSecurity],CULong),(CLong)],
);

alias IHttpSecurityVtbl = Struct_IHttpSecurityVtbl;

record Struct_IHttpSecurity (
    lpVtbl : Pointer[Struct_IHttpSecurityVtbl],
);

external IHttpSecurity_OnSecurityProblem_Proxy(
    This : Pointer[IHttpSecurity],
    dwProblem : CULong) CLong;

external IHttpSecurity_OnSecurityProblem_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external __MIDL_itf_urlmon_0190_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_urlmon_0190_v0_0_s_ifspec : RPC_IF_HANDLE;

alias LPWININETHTTPINFO = Pointer[IWinInetHttpInfo];

external IID_IWinInetHttpInfo : IID;

record Struct_IWinInetHttpInfoVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IWinInetHttpInfo],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IWinInetHttpInfo]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IWinInetHttpInfo]),(CULong)],
    QueryOption : CCodePointer[(Pointer[Struct_IWinInetHttpInfo],CULong,RawPointer,Pointer[CULong]),(CLong)],
    QueryInfo : CCodePointer[(Pointer[Struct_IWinInetHttpInfo],CULong,RawPointer,Pointer[CULong],Pointer[CULong],Pointer[CULong]),(CLong)],
);

alias IWinInetHttpInfoVtbl = Struct_IWinInetHttpInfoVtbl;

record Struct_IWinInetHttpInfo (
    lpVtbl : Pointer[Struct_IWinInetHttpInfoVtbl],
);

external IWinInetHttpInfo_RemoteQueryInfo_Proxy(
    This : Pointer[IWinInetHttpInfo],
    dwOption : CULong,
    pBuffer : Pointer[CUChar],
    pcbBuf : Pointer[CULong],
    pdwFlags : Pointer[CULong],
    pdwReserved : Pointer[CULong]) CLong;

external IWinInetHttpInfo_RemoteQueryInfo_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external __MIDL_itf_urlmon_0191_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_urlmon_0191_v0_0_s_ifspec : RPC_IF_HANDLE;

alias LPWININETCACHEHINTS = Pointer[IWinInetCacheHints];

external IID_IWinInetCacheHints : IID;

record Struct_IWinInetCacheHintsVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IWinInetCacheHints],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IWinInetCacheHints]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IWinInetCacheHints]),(CULong)],
    SetCacheExtension : CCodePointer[(Pointer[Struct_IWinInetCacheHints],Pointer[UShort],RawPointer,Pointer[CULong],Pointer[CULong],Pointer[CULong]),(CLong)],
);

alias IWinInetCacheHintsVtbl = Struct_IWinInetCacheHintsVtbl;

record Struct_IWinInetCacheHints (
    lpVtbl : Pointer[Struct_IWinInetCacheHintsVtbl],
);

external IWinInetCacheHints_SetCacheExtension_Proxy(
    This : Pointer[IWinInetCacheHints],
    pwzExt : LPCWSTR,
    pszCacheFile : LPVOID,
    pcbCacheFile : Pointer[CULong],
    pdwWinInetError : Pointer[CULong],
    pdwReserved : Pointer[CULong]) CLong;

external IWinInetCacheHints_SetCacheExtension_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external SID_BindHost : GUID;

external __MIDL_itf_urlmon_0192_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_urlmon_0192_v0_0_s_ifspec : RPC_IF_HANDLE;

alias LPBINDHOST = Pointer[IBindHost];

external IID_IBindHost : IID;

record Struct_IBindHostVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IBindHost],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IBindHost]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IBindHost]),(CULong)],
    CreateMoniker : CCodePointer[(Pointer[Struct_IBindHost],Pointer[UShort],Pointer[Struct_IBindCtx],Pointer[Pointer[Struct_IMoniker]],CULong),(CLong)],
    MonikerBindToStorage : CCodePointer[(Pointer[Struct_IBindHost],Pointer[Struct_IMoniker],Pointer[Struct_IBindCtx],Pointer[Struct_IBindStatusCallback],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    MonikerBindToObject : CCodePointer[(Pointer[Struct_IBindHost],Pointer[Struct_IMoniker],Pointer[Struct_IBindCtx],Pointer[Struct_IBindStatusCallback],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
);

alias IBindHostVtbl = Struct_IBindHostVtbl;

record Struct_IBindHost (
    lpVtbl : Pointer[Struct_IBindHostVtbl],
);

external IBindHost_CreateMoniker_Proxy(
    This : Pointer[IBindHost],
    szName : LPOLESTR,
    pBC : Pointer[IBindCtx],
    ppmk : Pointer[Pointer[IMoniker]],
    dwReserved : CULong) CLong;

external IBindHost_CreateMoniker_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IBindHost_RemoteMonikerBindToStorage_Proxy(
    This : Pointer[IBindHost],
    pMk : Pointer[IMoniker],
    pBC : Pointer[IBindCtx],
    pBSC : Pointer[IBindStatusCallback],
    riid : Pointer[IID],
    ppvObj : Pointer[Pointer[IUnknown]]) CLong;

external IBindHost_RemoteMonikerBindToStorage_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IBindHost_RemoteMonikerBindToObject_Proxy(
    This : Pointer[IBindHost],
    pMk : Pointer[IMoniker],
    pBC : Pointer[IBindCtx],
    pBSC : Pointer[IBindStatusCallback],
    riid : Pointer[IID],
    ppvObj : Pointer[Pointer[IUnknown]]) CLong;

external IBindHost_RemoteMonikerBindToObject_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external HlinkSimpleNavigateToString(
    szTarget : LPCWSTR,
    szLocation : LPCWSTR,
    szTargetFrameName : LPCWSTR,
    pUnk : Pointer[IUnknown],
    pbc : Pointer[IBindCtx],
    argument5 : Pointer[IBindStatusCallback],
    grfHLNF : CULong,
    dwReserved : CULong) CLong;

external HlinkSimpleNavigateToMoniker(
    pmkTarget : Pointer[IMoniker],
    szLocation : LPCWSTR,
    szTargetFrameName : LPCWSTR,
    pUnk : Pointer[IUnknown],
    pbc : Pointer[IBindCtx],
    argument5 : Pointer[IBindStatusCallback],
    grfHLNF : CULong,
    dwReserved : CULong) CLong;

external URLOpenStreamA(
    argument0 : LPUNKNOWN,
    argument1 : LPCSTR,
    argument2 : CULong,
    argument3 : LPBINDSTATUSCALLBACK) CLong;

external URLOpenStreamW(
    argument0 : LPUNKNOWN,
    argument1 : LPCWSTR,
    argument2 : CULong,
    argument3 : LPBINDSTATUSCALLBACK) CLong;

external URLOpenPullStreamA(
    argument0 : LPUNKNOWN,
    argument1 : LPCSTR,
    argument2 : CULong,
    argument3 : LPBINDSTATUSCALLBACK) CLong;

external URLOpenPullStreamW(
    argument0 : LPUNKNOWN,
    argument1 : LPCWSTR,
    argument2 : CULong,
    argument3 : LPBINDSTATUSCALLBACK) CLong;

external URLDownloadToFileA(
    argument0 : LPUNKNOWN,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : CULong,
    argument4 : LPBINDSTATUSCALLBACK) CLong;

external URLDownloadToFileW(
    argument0 : LPUNKNOWN,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR,
    argument3 : CULong,
    argument4 : LPBINDSTATUSCALLBACK) CLong;

external URLDownloadToCacheFileA(
    argument0 : LPUNKNOWN,
    argument1 : LPCSTR,
    argument2 : LPTSTR,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : LPBINDSTATUSCALLBACK) CLong;

external URLDownloadToCacheFileW(
    argument0 : LPUNKNOWN,
    argument1 : LPCWSTR,
    argument2 : LPWSTR,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : LPBINDSTATUSCALLBACK) CLong;

external URLOpenBlockingStreamA(
    argument0 : LPUNKNOWN,
    argument1 : LPCSTR,
    argument2 : Pointer[LPSTREAM],
    argument3 : CULong,
    argument4 : LPBINDSTATUSCALLBACK) CLong;

external URLOpenBlockingStreamW(
    argument0 : LPUNKNOWN,
    argument1 : LPCWSTR,
    argument2 : Pointer[LPSTREAM],
    argument3 : CULong,
    argument4 : LPBINDSTATUSCALLBACK) CLong;

external HlinkGoBack(
    pUnk : Pointer[IUnknown]) CLong;

external HlinkGoForward(
    pUnk : Pointer[IUnknown]) CLong;

external HlinkNavigateString(
    pUnk : Pointer[IUnknown],
    szTarget : LPCWSTR) CLong;

external HlinkNavigateMoniker(
    pUnk : Pointer[IUnknown],
    pmkTarget : Pointer[IMoniker]) CLong;

external __MIDL_itf_urlmon_0193_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_urlmon_0193_v0_0_s_ifspec : RPC_IF_HANDLE;

alias LPIINTERNET = Pointer[IInternet];

external IID_IInternet : IID;

record Struct_IInternetVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IInternet],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IInternet]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IInternet]),(CULong)],
);

alias IInternetVtbl = Struct_IInternetVtbl;

record Struct_IInternet (
    lpVtbl : Pointer[Struct_IInternetVtbl],
);

external __MIDL_itf_urlmon_0194_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_urlmon_0194_v0_0_s_ifspec : RPC_IF_HANDLE;

alias LPIINTERNETBINDINFO = Pointer[IInternetBindInfo];

alias BINDSTRING_HEADERS = 1;
alias BINDSTRING_ACCEPT_MIMES = 2;
alias BINDSTRING_EXTRA_URL = 3;
alias BINDSTRING_LANGUAGE = 4;
alias BINDSTRING_USERNAME = 5;
alias BINDSTRING_PASSWORD = 6;
alias BINDSTRING_UA_PIXELS = 7;
alias BINDSTRING_UA_COLOR = 8;
alias BINDSTRING_OS = 9;
alias BINDSTRING_USER_AGENT = 10;
alias BINDSTRING_ACCEPT_ENCODINGS = 11;
alias BINDSTRING_POST_COOKIE = 12;
alias BINDSTRING_POST_DATA_MIME = 13;
alias BINDSTRING_URL = 14;
alias BINDSTRING_IID = 15;
alias BINDSTRING_FLAG_BIND_TO_OBJECT = 16;
alias BINDSTRING_PTR_BIND_CONTEXT = 17;

alias BINDSTRING = Int;

external IID_IInternetBindInfo : IID;

record Struct_IInternetBindInfoVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IInternetBindInfo],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IInternetBindInfo]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IInternetBindInfo]),(CULong)],
    GetBindInfo : CCodePointer[(Pointer[Struct_IInternetBindInfo],Pointer[CULong],Pointer[Struct__tagBINDINFO]),(CLong)],
    GetBindString : CCodePointer[(Pointer[Struct_IInternetBindInfo],CULong,Pointer[Pointer[UShort]],CULong,Pointer[CULong]),(CLong)],
);

alias IInternetBindInfoVtbl = Struct_IInternetBindInfoVtbl;

record Struct_IInternetBindInfo (
    lpVtbl : Pointer[Struct_IInternetBindInfoVtbl],
);

external IInternetBindInfo_GetBindInfo_Proxy(
    This : Pointer[IInternetBindInfo],
    grfBINDF : Pointer[CULong],
    pbindinfo : Pointer[BINDINFO]) CLong;

external IInternetBindInfo_GetBindInfo_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetBindInfo_GetBindString_Proxy(
    This : Pointer[IInternetBindInfo],
    ulStringType : CULong,
    ppwzStr : Pointer[LPOLESTR],
    cEl : CULong,
    pcElFetched : Pointer[CULong]) CLong;

external IInternetBindInfo_GetBindString_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external __MIDL_itf_urlmon_0195_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_urlmon_0195_v0_0_s_ifspec : RPC_IF_HANDLE;

alias LPIINTERNETPROTOCOLROOT = Pointer[IInternetProtocolRoot];

alias PI_PARSE_URL = 1;
alias PI_FILTER_MODE = 2;
alias PI_FORCE_ASYNC = 4;
alias PI_USE_WORKERTHREAD = 8;
alias PI_MIMEVERIFICATION = 16;
alias PI_CLSIDLOOKUP = 32;
alias PI_DATAPROGRESS = 64;
alias PI_SYNCHRONOUS = 128;
alias PI_APARTMENTTHREADED = 256;
alias PI_CLASSINSTALL = 512;
alias PI_PASSONBINDCTX = 8192;
alias PI_NOMIMEHANDLER = 32768;
alias PI_LOADAPPDIRECT = 16384;
alias PD_FORCE_SWITCH = 65536;
alias PI_PREFERDEFAULTHANDLER = 131072;

alias PI_FLAGS = Int;

record Struct__tagPROTOCOLDATA (
    grfFlags : CULong,
    dwState : CULong,
    pData : LPVOID,
    cbData : CULong,
);

alias PROTOCOLDATA = Struct__tagPROTOCOLDATA;

record Struct__tagStartParam (
    iid : IID,
    pIBindCtx : Pointer[IBindCtx],
    pItf : Pointer[IUnknown],
);

alias StartParam = Struct__tagStartParam;

external IID_IInternetProtocolRoot : IID;

record Struct_IInternetProtocolRootVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IInternetProtocolRoot],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IInternetProtocolRoot]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IInternetProtocolRoot]),(CULong)],
    Start : CCodePointer[(Pointer[Struct_IInternetProtocolRoot],Pointer[UShort],Pointer[Struct_IInternetProtocolSink],Pointer[Struct_IInternetBindInfo],CULong,UInt64),(CLong)],
    Continue : CCodePointer[(Pointer[Struct_IInternetProtocolRoot],Pointer[Struct__tagPROTOCOLDATA]),(CLong)],
    Abort : CCodePointer[(Pointer[Struct_IInternetProtocolRoot],CLong,CULong),(CLong)],
    Terminate : CCodePointer[(Pointer[Struct_IInternetProtocolRoot],CULong),(CLong)],
    Suspend : CCodePointer[(Pointer[Struct_IInternetProtocolRoot]),(CLong)],
    Resume : CCodePointer[(Pointer[Struct_IInternetProtocolRoot]),(CLong)],
);

alias IInternetProtocolRootVtbl = Struct_IInternetProtocolRootVtbl;

record Struct_IInternetProtocolRoot (
    lpVtbl : Pointer[Struct_IInternetProtocolRootVtbl],
);

external IInternetProtocolRoot_Start_Proxy(
    This : Pointer[IInternetProtocolRoot],
    szUrl : LPCWSTR,
    pOIProtSink : Pointer[IInternetProtocolSink],
    pOIBindInfo : Pointer[IInternetBindInfo],
    grfPI : CULong,
    dwReserved : UInt64) CLong;

external IInternetProtocolRoot_Start_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetProtocolRoot_Continue_Proxy(
    This : Pointer[IInternetProtocolRoot],
    pProtocolData : Pointer[PROTOCOLDATA]) CLong;

external IInternetProtocolRoot_Continue_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetProtocolRoot_Abort_Proxy(
    This : Pointer[IInternetProtocolRoot],
    hrReason : CLong,
    dwOptions : CULong) CLong;

external IInternetProtocolRoot_Abort_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetProtocolRoot_Terminate_Proxy(
    This : Pointer[IInternetProtocolRoot],
    dwOptions : CULong) CLong;

external IInternetProtocolRoot_Terminate_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetProtocolRoot_Suspend_Proxy(
    This : Pointer[IInternetProtocolRoot]) CLong;

external IInternetProtocolRoot_Suspend_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetProtocolRoot_Resume_Proxy(
    This : Pointer[IInternetProtocolRoot]) CLong;

external IInternetProtocolRoot_Resume_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external __MIDL_itf_urlmon_0196_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_urlmon_0196_v0_0_s_ifspec : RPC_IF_HANDLE;

alias LPIINTERNETPROTOCOL = Pointer[IInternetProtocol];

external IID_IInternetProtocol : IID;

record Struct_IInternetProtocolVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IInternetProtocol],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IInternetProtocol]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IInternetProtocol]),(CULong)],
    Start : CCodePointer[(Pointer[Struct_IInternetProtocol],Pointer[UShort],Pointer[Struct_IInternetProtocolSink],Pointer[Struct_IInternetBindInfo],CULong,UInt64),(CLong)],
    Continue : CCodePointer[(Pointer[Struct_IInternetProtocol],Pointer[Struct__tagPROTOCOLDATA]),(CLong)],
    Abort : CCodePointer[(Pointer[Struct_IInternetProtocol],CLong,CULong),(CLong)],
    Terminate : CCodePointer[(Pointer[Struct_IInternetProtocol],CULong),(CLong)],
    Suspend : CCodePointer[(Pointer[Struct_IInternetProtocol]),(CLong)],
    Resume : CCodePointer[(Pointer[Struct_IInternetProtocol]),(CLong)],
    Read : CCodePointer[(Pointer[Struct_IInternetProtocol],RawPointer,CULong,Pointer[CULong]),(CLong)],
    Seek : CCodePointer[(Pointer[Struct_IInternetProtocol],AUnionType,CULong,OpaquePointer),(CLong)],
    LockRequest : CCodePointer[(Pointer[Struct_IInternetProtocol],CULong),(CLong)],
    UnlockRequest : CCodePointer[(Pointer[Struct_IInternetProtocol]),(CLong)],
);

alias IInternetProtocolVtbl = Struct_IInternetProtocolVtbl;

record Struct_IInternetProtocol (
    lpVtbl : Pointer[Struct_IInternetProtocolVtbl],
);

external IInternetProtocol_Read_Proxy(
    This : Pointer[IInternetProtocol],
    pv : RawPointer,
    cb : CULong,
    pcbRead : Pointer[CULong]) CLong;

external IInternetProtocol_Read_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetProtocol_Seek_Proxy(
    This : Pointer[IInternetProtocol],
    dlibMove : LARGE_INTEGER,
    dwOrigin : CULong,
    plibNewPosition : Pointer[ULARGE_INTEGER]) CLong;

external IInternetProtocol_Seek_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetProtocol_LockRequest_Proxy(
    This : Pointer[IInternetProtocol],
    dwOptions : CULong) CLong;

external IInternetProtocol_LockRequest_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetProtocol_UnlockRequest_Proxy(
    This : Pointer[IInternetProtocol]) CLong;

external IInternetProtocol_UnlockRequest_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external __MIDL_itf_urlmon_0197_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_urlmon_0197_v0_0_s_ifspec : RPC_IF_HANDLE;

alias LPIINTERNETPROTOCOLSINK = Pointer[IInternetProtocolSink];

external IID_IInternetProtocolSink : IID;

record Struct_IInternetProtocolSinkVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IInternetProtocolSink],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IInternetProtocolSink]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IInternetProtocolSink]),(CULong)],
    Switch : CCodePointer[(Pointer[Struct_IInternetProtocolSink],Pointer[Struct__tagPROTOCOLDATA]),(CLong)],
    ReportProgress : CCodePointer[(Pointer[Struct_IInternetProtocolSink],CULong,Pointer[UShort]),(CLong)],
    ReportData : CCodePointer[(Pointer[Struct_IInternetProtocolSink],CULong,CULong,CULong),(CLong)],
    ReportResult : CCodePointer[(Pointer[Struct_IInternetProtocolSink],CLong,CULong,Pointer[UShort]),(CLong)],
);

alias IInternetProtocolSinkVtbl = Struct_IInternetProtocolSinkVtbl;

record Struct_IInternetProtocolSink (
    lpVtbl : Pointer[Struct_IInternetProtocolSinkVtbl],
);

external IInternetProtocolSink_Switch_Proxy(
    This : Pointer[IInternetProtocolSink],
    pProtocolData : Pointer[PROTOCOLDATA]) CLong;

external IInternetProtocolSink_Switch_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetProtocolSink_ReportProgress_Proxy(
    This : Pointer[IInternetProtocolSink],
    ulStatusCode : CULong,
    szStatusText : LPCWSTR) CLong;

external IInternetProtocolSink_ReportProgress_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetProtocolSink_ReportData_Proxy(
    This : Pointer[IInternetProtocolSink],
    grfBSCF : CULong,
    ulProgress : CULong,
    ulProgressMax : CULong) CLong;

external IInternetProtocolSink_ReportData_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetProtocolSink_ReportResult_Proxy(
    This : Pointer[IInternetProtocolSink],
    hrResult : CLong,
    dwError : CULong,
    szResult : LPCWSTR) CLong;

external IInternetProtocolSink_ReportResult_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external __MIDL_itf_urlmon_0198_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_urlmon_0198_v0_0_s_ifspec : RPC_IF_HANDLE;

alias LPIINTERNETPROTOCOLSINKStackable = Pointer[IInternetProtocolSinkStackable];

external IID_IInternetProtocolSinkStackable : IID;

record Struct_IInternetProtocolSinkStackableVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IInternetProtocolSinkStackable],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IInternetProtocolSinkStackable]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IInternetProtocolSinkStackable]),(CULong)],
    SwitchSink : CCodePointer[(Pointer[Struct_IInternetProtocolSinkStackable],Pointer[Struct_IInternetProtocolSink]),(CLong)],
    CommitSwitch : CCodePointer[(Pointer[Struct_IInternetProtocolSinkStackable]),(CLong)],
    RollbackSwitch : CCodePointer[(Pointer[Struct_IInternetProtocolSinkStackable]),(CLong)],
);

alias IInternetProtocolSinkStackableVtbl = Struct_IInternetProtocolSinkStackableVtbl;

record Struct_IInternetProtocolSinkStackable (
    lpVtbl : Pointer[Struct_IInternetProtocolSinkStackableVtbl],
);

external IInternetProtocolSinkStackable_SwitchSink_Proxy(
    This : Pointer[IInternetProtocolSinkStackable],
    pOIProtSink : Pointer[IInternetProtocolSink]) CLong;

external IInternetProtocolSinkStackable_SwitchSink_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetProtocolSinkStackable_CommitSwitch_Proxy(
    This : Pointer[IInternetProtocolSinkStackable]) CLong;

external IInternetProtocolSinkStackable_CommitSwitch_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetProtocolSinkStackable_RollbackSwitch_Proxy(
    This : Pointer[IInternetProtocolSinkStackable]) CLong;

external IInternetProtocolSinkStackable_RollbackSwitch_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external __MIDL_itf_urlmon_0199_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_urlmon_0199_v0_0_s_ifspec : RPC_IF_HANDLE;

alias LPIINTERNETSESSION = Pointer[IInternetSession];

alias OIBDG_APARTMENTTHREADED = 256;
alias OIBDG_DATAONLY = 4096;

alias OIBDG_FLAGS = Int;

external IID_IInternetSession : IID;

record Struct_IInternetSessionVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IInternetSession],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IInternetSession]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IInternetSession]),(CULong)],
    RegisterNameSpace : CCodePointer[(Pointer[Struct_IInternetSession],Pointer[Struct_IClassFactory],Pointer[Struct__GUID],Pointer[UShort],CULong,Pointer[Pointer[UShort]],CULong),(CLong)],
    UnregisterNameSpace : CCodePointer[(Pointer[Struct_IInternetSession],Pointer[Struct_IClassFactory],Pointer[UShort]),(CLong)],
    RegisterMimeFilter : CCodePointer[(Pointer[Struct_IInternetSession],Pointer[Struct_IClassFactory],Pointer[Struct__GUID],Pointer[UShort]),(CLong)],
    UnregisterMimeFilter : CCodePointer[(Pointer[Struct_IInternetSession],Pointer[Struct_IClassFactory],Pointer[UShort]),(CLong)],
    CreateBinding : CCodePointer[(Pointer[Struct_IInternetSession],Pointer[Struct_IBindCtx],Pointer[UShort],Pointer[Struct_IUnknown],Pointer[Pointer[Struct_IUnknown]],Pointer[Pointer[Struct_IInternetProtocol]],CULong),(CLong)],
    SetSessionOption : CCodePointer[(Pointer[Struct_IInternetSession],CULong,RawPointer,CULong,CULong),(CLong)],
    GetSessionOption : CCodePointer[(Pointer[Struct_IInternetSession],CULong,RawPointer,Pointer[CULong],CULong),(CLong)],
);

alias IInternetSessionVtbl = Struct_IInternetSessionVtbl;

record Struct_IInternetSession (
    lpVtbl : Pointer[Struct_IInternetSessionVtbl],
);

external IInternetSession_RegisterNameSpace_Proxy(
    This : Pointer[IInternetSession],
    pCF : Pointer[IClassFactory],
    rclsid : Pointer[IID],
    pwzProtocol : LPCWSTR,
    cPatterns : CULong,
    ppwzPatterns : Pointer[LPCWSTR],
    dwReserved : CULong) CLong;

external IInternetSession_RegisterNameSpace_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetSession_UnregisterNameSpace_Proxy(
    This : Pointer[IInternetSession],
    pCF : Pointer[IClassFactory],
    pszProtocol : LPCWSTR) CLong;

external IInternetSession_UnregisterNameSpace_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetSession_RegisterMimeFilter_Proxy(
    This : Pointer[IInternetSession],
    pCF : Pointer[IClassFactory],
    rclsid : Pointer[IID],
    pwzType : LPCWSTR) CLong;

external IInternetSession_RegisterMimeFilter_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetSession_UnregisterMimeFilter_Proxy(
    This : Pointer[IInternetSession],
    pCF : Pointer[IClassFactory],
    pwzType : LPCWSTR) CLong;

external IInternetSession_UnregisterMimeFilter_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetSession_CreateBinding_Proxy(
    This : Pointer[IInternetSession],
    pBC : LPBC,
    szUrl : LPCWSTR,
    pUnkOuter : Pointer[IUnknown],
    ppUnk : Pointer[Pointer[IUnknown]],
    ppOInetProt : Pointer[Pointer[IInternetProtocol]],
    dwOption : CULong) CLong;

external IInternetSession_CreateBinding_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetSession_SetSessionOption_Proxy(
    This : Pointer[IInternetSession],
    dwOption : CULong,
    pBuffer : LPVOID,
    dwBufferLength : CULong,
    dwReserved : CULong) CLong;

external IInternetSession_SetSessionOption_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetSession_GetSessionOption_Proxy(
    This : Pointer[IInternetSession],
    dwOption : CULong,
    pBuffer : LPVOID,
    pdwBufferLength : Pointer[CULong],
    dwReserved : CULong) CLong;

external IInternetSession_GetSessionOption_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external __MIDL_itf_urlmon_0200_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_urlmon_0200_v0_0_s_ifspec : RPC_IF_HANDLE;

alias LPIINTERNETTHREADSWITCH = Pointer[IInternetThreadSwitch];

external IID_IInternetThreadSwitch : IID;

record Struct_IInternetThreadSwitchVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IInternetThreadSwitch],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IInternetThreadSwitch]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IInternetThreadSwitch]),(CULong)],
    Prepare : CCodePointer[(Pointer[Struct_IInternetThreadSwitch]),(CLong)],
    Continue : CCodePointer[(Pointer[Struct_IInternetThreadSwitch]),(CLong)],
);

alias IInternetThreadSwitchVtbl = Struct_IInternetThreadSwitchVtbl;

record Struct_IInternetThreadSwitch (
    lpVtbl : Pointer[Struct_IInternetThreadSwitchVtbl],
);

external IInternetThreadSwitch_Prepare_Proxy(
    This : Pointer[IInternetThreadSwitch]) CLong;

external IInternetThreadSwitch_Prepare_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetThreadSwitch_Continue_Proxy(
    This : Pointer[IInternetThreadSwitch]) CLong;

external IInternetThreadSwitch_Continue_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external __MIDL_itf_urlmon_0201_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_urlmon_0201_v0_0_s_ifspec : RPC_IF_HANDLE;

alias LPIINTERNETPRIORITY = Pointer[IInternetPriority];

external IID_IInternetPriority : IID;

record Struct_IInternetPriorityVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IInternetPriority],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IInternetPriority]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IInternetPriority]),(CULong)],
    SetPriority : CCodePointer[(Pointer[Struct_IInternetPriority],CLong),(CLong)],
    GetPriority : CCodePointer[(Pointer[Struct_IInternetPriority],Pointer[CLong]),(CLong)],
);

alias IInternetPriorityVtbl = Struct_IInternetPriorityVtbl;

record Struct_IInternetPriority (
    lpVtbl : Pointer[Struct_IInternetPriorityVtbl],
);

external IInternetPriority_SetPriority_Proxy(
    This : Pointer[IInternetPriority],
    nPriority : CLong) CLong;

external IInternetPriority_SetPriority_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetPriority_GetPriority_Proxy(
    This : Pointer[IInternetPriority],
    pnPriority : Pointer[CLong]) CLong;

external IInternetPriority_GetPriority_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external __MIDL_itf_urlmon_0202_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_urlmon_0202_v0_0_s_ifspec : RPC_IF_HANDLE;

alias LPIINTERNETPROTOCOLINFO = Pointer[IInternetProtocolInfo];

alias PARSE_CANONICALIZE = 1;
alias PARSE_FRIENDLY = 2;
alias PARSE_SECURITY_URL = 3;
alias PARSE_ROOTDOCUMENT = 4;
alias PARSE_DOCUMENT = 5;
alias PARSE_ANCHOR = 6;
alias PARSE_ENCODE = 7;
alias PARSE_DECODE = 8;
alias PARSE_PATH_FROM_URL = 9;
alias PARSE_URL_FROM_PATH = 10;
alias PARSE_MIME = 11;
alias PARSE_SERVER = 12;
alias PARSE_SCHEMA = 13;
alias PARSE_SITE = 14;
alias PARSE_DOMAIN = 15;
alias PARSE_LOCATION = 16;
alias PARSE_SECURITY_DOMAIN = 17;
alias PARSE_ESCAPE = 18;
alias PARSE_UNESCAPE = 19;

alias PARSEACTION = Int;

alias PSU_DEFAULT = 1;
alias PSU_SECURITY_URL_ONLY = 2;

alias PSUACTION = Int;

alias QUERY_EXPIRATION_DATE = 1;
alias QUERY_TIME_OF_LAST_CHANGE = 2;
alias QUERY_CONTENT_ENCODING = 3;
alias QUERY_CONTENT_TYPE = 4;
alias QUERY_REFRESH = 5;
alias QUERY_RECOMBINE = 6;
alias QUERY_CAN_NAVIGATE = 7;
alias QUERY_USES_NETWORK = 8;
alias QUERY_IS_CACHED = 9;
alias QUERY_IS_INSTALLEDENTRY = 10;
alias QUERY_IS_CACHED_OR_MAPPED = 11;
alias QUERY_USES_CACHE = 12;
alias QUERY_IS_SECURE = 13;
alias QUERY_IS_SAFE = 14;

alias QUERYOPTION = Int;

external IID_IInternetProtocolInfo : IID;

record Struct_IInternetProtocolInfoVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IInternetProtocolInfo],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IInternetProtocolInfo]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IInternetProtocolInfo]),(CULong)],
    ParseUrl : CCodePointer[(Pointer[Struct_IInternetProtocolInfo],Pointer[UShort],Int,CULong,Pointer[UShort],CULong,Pointer[CULong],CULong),(CLong)],
    CombineUrl : CCodePointer[(Pointer[Struct_IInternetProtocolInfo],Pointer[UShort],Pointer[UShort],CULong,Pointer[UShort],CULong,Pointer[CULong],CULong),(CLong)],
    CompareUrl : CCodePointer[(Pointer[Struct_IInternetProtocolInfo],Pointer[UShort],Pointer[UShort],CULong),(CLong)],
    QueryInfo : CCodePointer[(Pointer[Struct_IInternetProtocolInfo],Pointer[UShort],Int,CULong,RawPointer,CULong,Pointer[CULong],CULong),(CLong)],
);

alias IInternetProtocolInfoVtbl = Struct_IInternetProtocolInfoVtbl;

record Struct_IInternetProtocolInfo (
    lpVtbl : Pointer[Struct_IInternetProtocolInfoVtbl],
);

external IInternetProtocolInfo_ParseUrl_Proxy(
    This : Pointer[IInternetProtocolInfo],
    pwzUrl : LPCWSTR,
    ParseAction : PARSEACTION,
    dwParseFlags : CULong,
    pwzResult : LPWSTR,
    cchResult : CULong,
    pcchResult : Pointer[CULong],
    dwReserved : CULong) CLong;

external IInternetProtocolInfo_ParseUrl_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetProtocolInfo_CombineUrl_Proxy(
    This : Pointer[IInternetProtocolInfo],
    pwzBaseUrl : LPCWSTR,
    pwzRelativeUrl : LPCWSTR,
    dwCombineFlags : CULong,
    pwzResult : LPWSTR,
    cchResult : CULong,
    pcchResult : Pointer[CULong],
    dwReserved : CULong) CLong;

external IInternetProtocolInfo_CombineUrl_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetProtocolInfo_CompareUrl_Proxy(
    This : Pointer[IInternetProtocolInfo],
    pwzUrl1 : LPCWSTR,
    pwzUrl2 : LPCWSTR,
    dwCompareFlags : CULong) CLong;

external IInternetProtocolInfo_CompareUrl_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetProtocolInfo_QueryInfo_Proxy(
    This : Pointer[IInternetProtocolInfo],
    pwzUrl : LPCWSTR,
    OueryOption : QUERYOPTION,
    dwQueryFlags : CULong,
    pBuffer : LPVOID,
    cbBuffer : CULong,
    pcbBuf : Pointer[CULong],
    dwReserved : CULong) CLong;

external IInternetProtocolInfo_QueryInfo_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external CoInternetParseUrl(
    pwzUrl : LPCWSTR,
    ParseAction : PARSEACTION,
    dwFlags : CULong,
    pszResult : LPWSTR,
    cchResult : CULong,
    pcchResult : Pointer[CULong],
    dwReserved : CULong) CLong;

external CoInternetCombineUrl(
    pwzBaseUrl : LPCWSTR,
    pwzRelativeUrl : LPCWSTR,
    dwCombineFlags : CULong,
    pszResult : LPWSTR,
    cchResult : CULong,
    pcchResult : Pointer[CULong],
    dwReserved : CULong) CLong;

external CoInternetCompareUrl(
    pwzUrl1 : LPCWSTR,
    pwzUrl2 : LPCWSTR,
    dwFlags : CULong) CLong;

external CoInternetGetProtocolFlags(
    pwzUrl : LPCWSTR,
    pdwFlags : Pointer[CULong],
    dwReserved : CULong) CLong;

external CoInternetQueryInfo(
    pwzUrl : LPCWSTR,
    QueryOptions : QUERYOPTION,
    dwQueryFlags : CULong,
    pvBuffer : LPVOID,
    cbBuffer : CULong,
    pcbBuffer : Pointer[CULong],
    dwReserved : CULong) CLong;

external CoInternetGetSession(
    dwSessionMode : CULong,
    ppIInternetSession : Pointer[Pointer[IInternetSession]],
    dwReserved : CULong) CLong;

external CoInternetGetSecurityUrl(
    pwzUrl : LPCWSTR,
    ppwzSecUrl : Pointer[LPWSTR],
    psuAction : PSUACTION,
    dwReserved : CULong) CLong;

external AsyncInstallDistributionUnit(
    szDistUnit : LPCWSTR,
    szTYPE : LPCWSTR,
    szExt : LPCWSTR,
    dwFileVersionMS : CULong,
    dwFileVersionLS : CULong,
    szURL : LPCWSTR,
    pbc : Pointer[IBindCtx],
    pvReserved : LPVOID,
    flags : CULong) CLong;

alias FEATURE_OBJECT_CACHING = 0;
alias FEATURE_ZONE_ELEVATION = 1;
alias FEATURE_MIME_HANDLING = 2;
alias FEATURE_MIME_SNIFFING = 3;
alias FEATURE_WINDOW_RESTRICTIONS = 4;
alias FEATURE_WEBOC_POPUPMANAGEMENT = 5;
alias FEATURE_BEHAVIORS = 6;
alias FEATURE_DISABLE_MK_PROTOCOL = 7;
alias FEATURE_LOCALMACHINE_LOCKDOWN = 8;
alias FEATURE_SECURITYBAND = 9;
alias FEATURE_RESTRICT_ACTIVEXINSTALL = 10;
alias FEATURE_VALIDATE_NAVIGATE_URL = 11;
alias FEATURE_RESTRICT_FILEDOWNLOAD = 12;
alias FEATURE_ADDON_MANAGEMENT = 13;
alias FEATURE_PROTOCOL_LOCKDOWN = 14;
alias FEATURE_HTTP_USERNAME_PASSWORD_DISABLE = 15;
alias FEATURE_SAFE_BINDTOOBJECT = 16;
alias FEATURE_UNC_SAVEDFILECHECK = 17;
alias FEATURE_GET_URL_DOM_FILEPATH_UNENCODED = 18;
alias FEATURE_ENTRY_COUNT = 19;

alias INTERNETFEATURELIST = Int;

external CoInternetSetFeatureEnabled(
    FeatureEntry : INTERNETFEATURELIST,
    dwFlags : CULong,
    fEnable : Int) CLong;

external CoInternetIsFeatureEnabled(
    FeatureEntry : INTERNETFEATURELIST,
    dwFlags : CULong) CLong;

external CoInternetIsFeatureEnabledForUrl(
    FeatureEntry : INTERNETFEATURELIST,
    dwFlags : CULong,
    szURL : LPCWSTR,
    pSecMgr : Pointer[IInternetSecurityManager]) CLong;

external CoInternetIsFeatureZoneElevationEnabled(
    szFromURL : LPCWSTR,
    szToURL : LPCWSTR,
    pSecMgr : Pointer[IInternetSecurityManager],
    dwFlags : CULong) CLong;

external CopyStgMedium(
    pcstgmedSrc : Pointer[STGMEDIUM],
    pstgmedDest : Pointer[STGMEDIUM]) CLong;

external CopyBindInfo(
    pcbiSrc : Pointer[BINDINFO],
    pbiDest : Pointer[BINDINFO]) CLong;

external ReleaseBindInfo(
    pbindinfo : Pointer[BINDINFO]);

external CoInternetCreateSecurityManager(
    pSP : Pointer[IServiceProvider],
    ppSM : Pointer[Pointer[IInternetSecurityManager]],
    dwReserved : CULong) CLong;

external CoInternetCreateZoneManager(
    pSP : Pointer[IServiceProvider],
    ppZM : Pointer[Pointer[IInternetZoneManager]],
    dwReserved : CULong) CLong;

external CLSID_InternetSecurityManager : IID;

external CLSID_InternetZoneManager : IID;

external CLSID_PersistentZoneIdentifier : IID;

external __MIDL_itf_urlmon_0203_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_urlmon_0203_v0_0_s_ifspec : RPC_IF_HANDLE;

external IID_IInternetSecurityMgrSite : IID;

record Struct_IInternetSecurityMgrSiteVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IInternetSecurityMgrSite],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IInternetSecurityMgrSite]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IInternetSecurityMgrSite]),(CULong)],
    GetWindow : CCodePointer[(Pointer[Struct_IInternetSecurityMgrSite],Pointer[Pointer[Struct_HWND__]]),(CLong)],
    EnableModeless : CCodePointer[(Pointer[Struct_IInternetSecurityMgrSite],Int),(CLong)],
);

alias IInternetSecurityMgrSiteVtbl = Struct_IInternetSecurityMgrSiteVtbl;

record Struct_IInternetSecurityMgrSite (
    lpVtbl : Pointer[Struct_IInternetSecurityMgrSiteVtbl],
);

external IInternetSecurityMgrSite_GetWindow_Proxy(
    This : Pointer[IInternetSecurityMgrSite],
    phwnd : Pointer[HWND]) CLong;

external IInternetSecurityMgrSite_GetWindow_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetSecurityMgrSite_EnableModeless_Proxy(
    This : Pointer[IInternetSecurityMgrSite],
    fEnable : Int) CLong;

external IInternetSecurityMgrSite_EnableModeless_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external __MIDL_itf_urlmon_0204_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_urlmon_0204_v0_0_s_ifspec : RPC_IF_HANDLE;

alias PUAF_DEFAULT = 0;
alias PUAF_NOUI = 1;
alias PUAF_ISFILE = 2;
alias PUAF_WARN_IF_DENIED = 4;
alias PUAF_FORCEUI_FOREGROUND = 8;
alias PUAF_CHECK_TIFS = 16;
alias PUAF_DONTCHECKBOXINDIALOG = 32;
alias PUAF_TRUSTED = 64;
alias PUAF_ACCEPT_WILDCARD_SCHEME = 128;
alias PUAF_ENFORCERESTRICTED = 256;
alias PUAF_NOSAVEDFILECHECK = 512;
alias PUAF_REQUIRESAVEDFILECHECK = 1024;
alias PUAF_LMZ_UNLOCKED = 65536;
alias PUAF_LMZ_LOCKED = 131072;
alias PUAF_DEFAULTZONEPOL = 262144;
alias PUAF_NPL_USE_LOCKED_IF_RESTRICTED = 524288;
alias PUAF_NOUIIFLOCKED = 1048576;
alias PUAF_DRAGPROTOCOLCHECK = 2097152;

alias PUAF = Int;

alias PUAFOUT_DEFAULT = 0;
alias PUAFOUT_ISLOCKZONEPOLICY = 1;

alias PUAFOUT = Int;

alias SZM_CREATE = 0;
alias SZM_DELETE = 1;

alias SZM_FLAGS = Int;

external IID_IInternetSecurityManager : IID;

record Struct_IInternetSecurityManagerVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IInternetSecurityManager],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IInternetSecurityManager]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IInternetSecurityManager]),(CULong)],
    SetSecuritySite : CCodePointer[(Pointer[Struct_IInternetSecurityManager],Pointer[Struct_IInternetSecurityMgrSite]),(CLong)],
    GetSecuritySite : CCodePointer[(Pointer[Struct_IInternetSecurityManager],Pointer[Pointer[Struct_IInternetSecurityMgrSite]]),(CLong)],
    MapUrlToZone : CCodePointer[(Pointer[Struct_IInternetSecurityManager],Pointer[UShort],Pointer[CULong],CULong),(CLong)],
    GetSecurityId : CCodePointer[(Pointer[Struct_IInternetSecurityManager],Pointer[UShort],Pointer[CUChar],Pointer[CULong],UInt64),(CLong)],
    ProcessUrlAction : CCodePointer[(Pointer[Struct_IInternetSecurityManager],Pointer[UShort],CULong,Pointer[CUChar],CULong,Pointer[CUChar],CULong,CULong,CULong),(CLong)],
    QueryCustomPolicy : CCodePointer[(Pointer[Struct_IInternetSecurityManager],Pointer[UShort],Pointer[Struct__GUID],Pointer[Pointer[CUChar]],Pointer[CULong],Pointer[CUChar],CULong,CULong),(CLong)],
    SetZoneMapping : CCodePointer[(Pointer[Struct_IInternetSecurityManager],CULong,Pointer[UShort],CULong),(CLong)],
    GetZoneMappings : CCodePointer[(Pointer[Struct_IInternetSecurityManager],CULong,Pointer[Pointer[Struct_IEnumString]],CULong),(CLong)],
);

alias IInternetSecurityManagerVtbl = Struct_IInternetSecurityManagerVtbl;

record Struct_IInternetSecurityManager (
    lpVtbl : Pointer[Struct_IInternetSecurityManagerVtbl],
);

external IInternetSecurityManager_SetSecuritySite_Proxy(
    This : Pointer[IInternetSecurityManager],
    pSite : Pointer[IInternetSecurityMgrSite]) CLong;

external IInternetSecurityManager_SetSecuritySite_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetSecurityManager_GetSecuritySite_Proxy(
    This : Pointer[IInternetSecurityManager],
    ppSite : Pointer[Pointer[IInternetSecurityMgrSite]]) CLong;

external IInternetSecurityManager_GetSecuritySite_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetSecurityManager_MapUrlToZone_Proxy(
    This : Pointer[IInternetSecurityManager],
    pwszUrl : LPCWSTR,
    pdwZone : Pointer[CULong],
    dwFlags : CULong) CLong;

external IInternetSecurityManager_MapUrlToZone_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetSecurityManager_GetSecurityId_Proxy(
    This : Pointer[IInternetSecurityManager],
    pwszUrl : LPCWSTR,
    pbSecurityId : Pointer[CUChar],
    pcbSecurityId : Pointer[CULong],
    dwReserved : UInt64) CLong;

external IInternetSecurityManager_GetSecurityId_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetSecurityManager_ProcessUrlAction_Proxy(
    This : Pointer[IInternetSecurityManager],
    pwszUrl : LPCWSTR,
    dwAction : CULong,
    pPolicy : Pointer[CUChar],
    cbPolicy : CULong,
    pContext : Pointer[CUChar],
    cbContext : CULong,
    dwFlags : CULong,
    dwReserved : CULong) CLong;

external IInternetSecurityManager_ProcessUrlAction_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetSecurityManager_QueryCustomPolicy_Proxy(
    This : Pointer[IInternetSecurityManager],
    pwszUrl : LPCWSTR,
    guidKey : Pointer[GUID],
    ppPolicy : Pointer[Pointer[CUChar]],
    pcbPolicy : Pointer[CULong],
    pContext : Pointer[CUChar],
    cbContext : CULong,
    dwReserved : CULong) CLong;

external IInternetSecurityManager_QueryCustomPolicy_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetSecurityManager_SetZoneMapping_Proxy(
    This : Pointer[IInternetSecurityManager],
    dwZone : CULong,
    lpszPattern : LPCWSTR,
    dwFlags : CULong) CLong;

external IInternetSecurityManager_SetZoneMapping_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetSecurityManager_GetZoneMappings_Proxy(
    This : Pointer[IInternetSecurityManager],
    dwZone : CULong,
    ppenumString : Pointer[Pointer[IEnumString]],
    dwFlags : CULong) CLong;

external IInternetSecurityManager_GetZoneMappings_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IID_IInternetSecurityManagerEx : IID;

record Struct_IInternetSecurityManagerExVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IInternetSecurityManagerEx],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IInternetSecurityManagerEx]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IInternetSecurityManagerEx]),(CULong)],
    SetSecuritySite : CCodePointer[(Pointer[Struct_IInternetSecurityManagerEx],Pointer[Struct_IInternetSecurityMgrSite]),(CLong)],
    GetSecuritySite : CCodePointer[(Pointer[Struct_IInternetSecurityManagerEx],Pointer[Pointer[Struct_IInternetSecurityMgrSite]]),(CLong)],
    MapUrlToZone : CCodePointer[(Pointer[Struct_IInternetSecurityManagerEx],Pointer[UShort],Pointer[CULong],CULong),(CLong)],
    GetSecurityId : CCodePointer[(Pointer[Struct_IInternetSecurityManagerEx],Pointer[UShort],Pointer[CUChar],Pointer[CULong],UInt64),(CLong)],
    ProcessUrlAction : CCodePointer[(Pointer[Struct_IInternetSecurityManagerEx],Pointer[UShort],CULong,Pointer[CUChar],CULong,Pointer[CUChar],CULong,CULong,CULong),(CLong)],
    QueryCustomPolicy : CCodePointer[(Pointer[Struct_IInternetSecurityManagerEx],Pointer[UShort],Pointer[Struct__GUID],Pointer[Pointer[CUChar]],Pointer[CULong],Pointer[CUChar],CULong,CULong),(CLong)],
    SetZoneMapping : CCodePointer[(Pointer[Struct_IInternetSecurityManagerEx],CULong,Pointer[UShort],CULong),(CLong)],
    GetZoneMappings : CCodePointer[(Pointer[Struct_IInternetSecurityManagerEx],CULong,Pointer[Pointer[Struct_IEnumString]],CULong),(CLong)],
    ProcessUrlActionEx : CCodePointer[(Pointer[Struct_IInternetSecurityManagerEx],Pointer[UShort],CULong,Pointer[CUChar],CULong,Pointer[CUChar],CULong,CULong,CULong,Pointer[CULong]),(CLong)],
);

alias IInternetSecurityManagerExVtbl = Struct_IInternetSecurityManagerExVtbl;

record Struct_IInternetSecurityManagerEx (
    lpVtbl : Pointer[Struct_IInternetSecurityManagerExVtbl],
);

external IInternetSecurityManagerEx_ProcessUrlActionEx_Proxy(
    This : Pointer[IInternetSecurityManagerEx],
    pwszUrl : LPCWSTR,
    dwAction : CULong,
    pPolicy : Pointer[CUChar],
    cbPolicy : CULong,
    pContext : Pointer[CUChar],
    cbContext : CULong,
    dwFlags : CULong,
    dwReserved : CULong,
    pdwOutFlags : Pointer[CULong]) CLong;

external IInternetSecurityManagerEx_ProcessUrlActionEx_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external __MIDL_itf_urlmon_0205_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_urlmon_0205_v0_0_s_ifspec : RPC_IF_HANDLE;

external IID_IZoneIdentifier : IID;

record Struct_IZoneIdentifierVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IZoneIdentifier],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IZoneIdentifier]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IZoneIdentifier]),(CULong)],
    GetId : CCodePointer[(Pointer[Struct_IZoneIdentifier],Pointer[CULong]),(CLong)],
    SetId : CCodePointer[(Pointer[Struct_IZoneIdentifier],CULong),(CLong)],
    Remove : CCodePointer[(Pointer[Struct_IZoneIdentifier]),(CLong)],
);

alias IZoneIdentifierVtbl = Struct_IZoneIdentifierVtbl;

record Struct_IZoneIdentifier (
    lpVtbl : Pointer[Struct_IZoneIdentifierVtbl],
);

external IZoneIdentifier_GetId_Proxy(
    This : Pointer[IZoneIdentifier],
    pdwZone : Pointer[CULong]) CLong;

external IZoneIdentifier_GetId_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IZoneIdentifier_SetId_Proxy(
    This : Pointer[IZoneIdentifier],
    dwZone : CULong) CLong;

external IZoneIdentifier_SetId_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IZoneIdentifier_Remove_Proxy(
    This : Pointer[IZoneIdentifier]) CLong;

external IZoneIdentifier_Remove_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external __MIDL_itf_urlmon_0207_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_urlmon_0207_v0_0_s_ifspec : RPC_IF_HANDLE;

external IID_IInternetHostSecurityManager : IID;

record Struct_IInternetHostSecurityManagerVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IInternetHostSecurityManager],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IInternetHostSecurityManager]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IInternetHostSecurityManager]),(CULong)],
    GetSecurityId : CCodePointer[(Pointer[Struct_IInternetHostSecurityManager],Pointer[CUChar],Pointer[CULong],UInt64),(CLong)],
    ProcessUrlAction : CCodePointer[(Pointer[Struct_IInternetHostSecurityManager],CULong,Pointer[CUChar],CULong,Pointer[CUChar],CULong,CULong,CULong),(CLong)],
    QueryCustomPolicy : CCodePointer[(Pointer[Struct_IInternetHostSecurityManager],Pointer[Struct__GUID],Pointer[Pointer[CUChar]],Pointer[CULong],Pointer[CUChar],CULong,CULong),(CLong)],
);

alias IInternetHostSecurityManagerVtbl = Struct_IInternetHostSecurityManagerVtbl;

record Struct_IInternetHostSecurityManager (
    lpVtbl : Pointer[Struct_IInternetHostSecurityManagerVtbl],
);

external IInternetHostSecurityManager_GetSecurityId_Proxy(
    This : Pointer[IInternetHostSecurityManager],
    pbSecurityId : Pointer[CUChar],
    pcbSecurityId : Pointer[CULong],
    dwReserved : UInt64) CLong;

external IInternetHostSecurityManager_GetSecurityId_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetHostSecurityManager_ProcessUrlAction_Proxy(
    This : Pointer[IInternetHostSecurityManager],
    dwAction : CULong,
    pPolicy : Pointer[CUChar],
    cbPolicy : CULong,
    pContext : Pointer[CUChar],
    cbContext : CULong,
    dwFlags : CULong,
    dwReserved : CULong) CLong;

external IInternetHostSecurityManager_ProcessUrlAction_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetHostSecurityManager_QueryCustomPolicy_Proxy(
    This : Pointer[IInternetHostSecurityManager],
    guidKey : Pointer[GUID],
    ppPolicy : Pointer[Pointer[CUChar]],
    pcbPolicy : Pointer[CULong],
    pContext : Pointer[CUChar],
    cbContext : CULong,
    dwReserved : CULong) CLong;

external IInternetHostSecurityManager_QueryCustomPolicy_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED : GUID;

external __MIDL_itf_urlmon_0208_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_urlmon_0208_v0_0_s_ifspec : RPC_IF_HANDLE;

alias LPURLZONEMANAGER = Pointer[IInternetZoneManager];

alias URLZONE_PREDEFINED_MIN = 0;
alias URLZONE_LOCAL_MACHINE = 0;
alias URLZONE_INTRANET = 1;
alias URLZONE_TRUSTED = 2;
alias URLZONE_INTERNET = 3;
alias URLZONE_UNTRUSTED = 4;
alias URLZONE_PREDEFINED_MAX = 999;
alias URLZONE_USER_MIN = 1000;
alias URLZONE_USER_MAX = 10000;

alias URLZONE = Int;

alias URLTEMPLATE_CUSTOM = 0;
alias URLTEMPLATE_PREDEFINED_MIN = 65536;
alias URLTEMPLATE_LOW = 65536;
alias URLTEMPLATE_MEDLOW = 66816;
alias URLTEMPLATE_MEDIUM = 69632;
alias URLTEMPLATE_HIGH = 73728;
alias URLTEMPLATE_PREDEFINED_MAX = 131072;

alias URLTEMPLATE = Int;

alias MAX_ZONE_PATH = 260;
alias MAX_ZONE_DESCRIPTION = 200;

alias ZAFLAGS_CUSTOM_EDIT = 1;
alias ZAFLAGS_ADD_SITES = 2;
alias ZAFLAGS_REQUIRE_VERIFICATION = 4;
alias ZAFLAGS_INCLUDE_PROXY_OVERRIDE = 8;
alias ZAFLAGS_INCLUDE_INTRANET_SITES = 16;
alias ZAFLAGS_NO_UI = 32;
alias ZAFLAGS_SUPPORTS_VERIFICATION = 64;
alias ZAFLAGS_UNC_AS_INTRANET = 128;
alias ZAFLAGS_USE_LOCKED_ZONES = 65536;

alias ZAFLAGS = Int;

record Struct__ZONEATTRIBUTES (
    cbSize : CULong,
    szDisplayName : Array[UShort,260],
    szDescription : Array[UShort,200],
    szIconPath : Array[UShort,260],
    dwTemplateMinLevel : CULong,
    dwTemplateRecommended : CULong,
    dwTemplateCurrentLevel : CULong,
    dwFlags : CULong,
);

alias ZONEATTRIBUTES = Struct__ZONEATTRIBUTES;

alias LPZONEATTRIBUTES = Pointer[Struct__ZONEATTRIBUTES];

alias URLZONEREG_DEFAULT = 0;
alias URLZONEREG_HKLM = 1;
alias URLZONEREG_HKCU = 2;

alias URLZONEREG = Int;

external IID_IInternetZoneManager : IID;

record Struct_IInternetZoneManagerVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IInternetZoneManager],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IInternetZoneManager]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IInternetZoneManager]),(CULong)],
    GetZoneAttributes : CCodePointer[(Pointer[Struct_IInternetZoneManager],CULong,Pointer[Struct__ZONEATTRIBUTES]),(CLong)],
    SetZoneAttributes : CCodePointer[(Pointer[Struct_IInternetZoneManager],CULong,Pointer[Struct__ZONEATTRIBUTES]),(CLong)],
    GetZoneCustomPolicy : CCodePointer[(Pointer[Struct_IInternetZoneManager],CULong,Pointer[Struct__GUID],Pointer[Pointer[CUChar]],Pointer[CULong],Int),(CLong)],
    SetZoneCustomPolicy : CCodePointer[(Pointer[Struct_IInternetZoneManager],CULong,Pointer[Struct__GUID],Pointer[CUChar],CULong,Int),(CLong)],
    GetZoneActionPolicy : CCodePointer[(Pointer[Struct_IInternetZoneManager],CULong,CULong,Pointer[CUChar],CULong,Int),(CLong)],
    SetZoneActionPolicy : CCodePointer[(Pointer[Struct_IInternetZoneManager],CULong,CULong,Pointer[CUChar],CULong,Int),(CLong)],
    PromptAction : CCodePointer[(Pointer[Struct_IInternetZoneManager],CULong,Pointer[Struct_HWND__],Pointer[UShort],Pointer[UShort],CULong),(CLong)],
    LogAction : CCodePointer[(Pointer[Struct_IInternetZoneManager],CULong,Pointer[UShort],Pointer[UShort],CULong),(CLong)],
    CreateZoneEnumerator : CCodePointer[(Pointer[Struct_IInternetZoneManager],Pointer[CULong],Pointer[CULong],CULong),(CLong)],
    GetZoneAt : CCodePointer[(Pointer[Struct_IInternetZoneManager],CULong,CULong,Pointer[CULong]),(CLong)],
    DestroyZoneEnumerator : CCodePointer[(Pointer[Struct_IInternetZoneManager],CULong),(CLong)],
    CopyTemplatePoliciesToZone : CCodePointer[(Pointer[Struct_IInternetZoneManager],CULong,CULong,CULong),(CLong)],
);

alias IInternetZoneManagerVtbl = Struct_IInternetZoneManagerVtbl;

record Struct_IInternetZoneManager (
    lpVtbl : Pointer[Struct_IInternetZoneManagerVtbl],
);

external IInternetZoneManager_GetZoneAttributes_Proxy(
    This : Pointer[IInternetZoneManager],
    dwZone : CULong,
    pZoneAttributes : Pointer[ZONEATTRIBUTES]) CLong;

external IInternetZoneManager_GetZoneAttributes_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetZoneManager_SetZoneAttributes_Proxy(
    This : Pointer[IInternetZoneManager],
    dwZone : CULong,
    pZoneAttributes : Pointer[ZONEATTRIBUTES]) CLong;

external IInternetZoneManager_SetZoneAttributes_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetZoneManager_GetZoneCustomPolicy_Proxy(
    This : Pointer[IInternetZoneManager],
    dwZone : CULong,
    guidKey : Pointer[GUID],
    ppPolicy : Pointer[Pointer[CUChar]],
    pcbPolicy : Pointer[CULong],
    urlZoneReg : URLZONEREG) CLong;

external IInternetZoneManager_GetZoneCustomPolicy_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetZoneManager_SetZoneCustomPolicy_Proxy(
    This : Pointer[IInternetZoneManager],
    dwZone : CULong,
    guidKey : Pointer[GUID],
    pPolicy : Pointer[CUChar],
    cbPolicy : CULong,
    urlZoneReg : URLZONEREG) CLong;

external IInternetZoneManager_SetZoneCustomPolicy_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetZoneManager_GetZoneActionPolicy_Proxy(
    This : Pointer[IInternetZoneManager],
    dwZone : CULong,
    dwAction : CULong,
    pPolicy : Pointer[CUChar],
    cbPolicy : CULong,
    urlZoneReg : URLZONEREG) CLong;

external IInternetZoneManager_GetZoneActionPolicy_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetZoneManager_SetZoneActionPolicy_Proxy(
    This : Pointer[IInternetZoneManager],
    dwZone : CULong,
    dwAction : CULong,
    pPolicy : Pointer[CUChar],
    cbPolicy : CULong,
    urlZoneReg : URLZONEREG) CLong;

external IInternetZoneManager_SetZoneActionPolicy_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetZoneManager_PromptAction_Proxy(
    This : Pointer[IInternetZoneManager],
    dwAction : CULong,
    hwndParent : HWND,
    pwszUrl : LPCWSTR,
    pwszText : LPCWSTR,
    dwPromptFlags : CULong) CLong;

external IInternetZoneManager_PromptAction_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetZoneManager_LogAction_Proxy(
    This : Pointer[IInternetZoneManager],
    dwAction : CULong,
    pwszUrl : LPCWSTR,
    pwszText : LPCWSTR,
    dwLogFlags : CULong) CLong;

external IInternetZoneManager_LogAction_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetZoneManager_CreateZoneEnumerator_Proxy(
    This : Pointer[IInternetZoneManager],
    pdwEnum : Pointer[CULong],
    pdwCount : Pointer[CULong],
    dwFlags : CULong) CLong;

external IInternetZoneManager_CreateZoneEnumerator_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetZoneManager_GetZoneAt_Proxy(
    This : Pointer[IInternetZoneManager],
    dwEnum : CULong,
    dwIndex : CULong,
    pdwZone : Pointer[CULong]) CLong;

external IInternetZoneManager_GetZoneAt_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetZoneManager_DestroyZoneEnumerator_Proxy(
    This : Pointer[IInternetZoneManager],
    dwEnum : CULong) CLong;

external IInternetZoneManager_DestroyZoneEnumerator_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetZoneManager_CopyTemplatePoliciesToZone_Proxy(
    This : Pointer[IInternetZoneManager],
    dwTemplate : CULong,
    dwZone : CULong,
    dwReserved : CULong) CLong;

external IInternetZoneManager_CopyTemplatePoliciesToZone_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external __MIDL_itf_urlmon_0209_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_urlmon_0209_v0_0_s_ifspec : RPC_IF_HANDLE;

external IID_IInternetZoneManagerEx : IID;

record Struct_IInternetZoneManagerExVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IInternetZoneManagerEx],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IInternetZoneManagerEx]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IInternetZoneManagerEx]),(CULong)],
    GetZoneAttributes : CCodePointer[(Pointer[Struct_IInternetZoneManagerEx],CULong,Pointer[Struct__ZONEATTRIBUTES]),(CLong)],
    SetZoneAttributes : CCodePointer[(Pointer[Struct_IInternetZoneManagerEx],CULong,Pointer[Struct__ZONEATTRIBUTES]),(CLong)],
    GetZoneCustomPolicy : CCodePointer[(Pointer[Struct_IInternetZoneManagerEx],CULong,Pointer[Struct__GUID],Pointer[Pointer[CUChar]],Pointer[CULong],Int),(CLong)],
    SetZoneCustomPolicy : CCodePointer[(Pointer[Struct_IInternetZoneManagerEx],CULong,Pointer[Struct__GUID],Pointer[CUChar],CULong,Int),(CLong)],
    GetZoneActionPolicy : CCodePointer[(Pointer[Struct_IInternetZoneManagerEx],CULong,CULong,Pointer[CUChar],CULong,Int),(CLong)],
    SetZoneActionPolicy : CCodePointer[(Pointer[Struct_IInternetZoneManagerEx],CULong,CULong,Pointer[CUChar],CULong,Int),(CLong)],
    PromptAction : CCodePointer[(Pointer[Struct_IInternetZoneManagerEx],CULong,Pointer[Struct_HWND__],Pointer[UShort],Pointer[UShort],CULong),(CLong)],
    LogAction : CCodePointer[(Pointer[Struct_IInternetZoneManagerEx],CULong,Pointer[UShort],Pointer[UShort],CULong),(CLong)],
    CreateZoneEnumerator : CCodePointer[(Pointer[Struct_IInternetZoneManagerEx],Pointer[CULong],Pointer[CULong],CULong),(CLong)],
    GetZoneAt : CCodePointer[(Pointer[Struct_IInternetZoneManagerEx],CULong,CULong,Pointer[CULong]),(CLong)],
    DestroyZoneEnumerator : CCodePointer[(Pointer[Struct_IInternetZoneManagerEx],CULong),(CLong)],
    CopyTemplatePoliciesToZone : CCodePointer[(Pointer[Struct_IInternetZoneManagerEx],CULong,CULong,CULong),(CLong)],
    GetZoneActionPolicyEx : CCodePointer[(Pointer[Struct_IInternetZoneManagerEx],CULong,CULong,Pointer[CUChar],CULong,Int,CULong),(CLong)],
    SetZoneActionPolicyEx : CCodePointer[(Pointer[Struct_IInternetZoneManagerEx],CULong,CULong,Pointer[CUChar],CULong,Int,CULong),(CLong)],
);

alias IInternetZoneManagerExVtbl = Struct_IInternetZoneManagerExVtbl;

record Struct_IInternetZoneManagerEx (
    lpVtbl : Pointer[Struct_IInternetZoneManagerExVtbl],
);

external IInternetZoneManagerEx_GetZoneActionPolicyEx_Proxy(
    This : Pointer[IInternetZoneManagerEx],
    dwZone : CULong,
    dwAction : CULong,
    pPolicy : Pointer[CUChar],
    cbPolicy : CULong,
    urlZoneReg : URLZONEREG,
    dwFlags : CULong) CLong;

external IInternetZoneManagerEx_GetZoneActionPolicyEx_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IInternetZoneManagerEx_SetZoneActionPolicyEx_Proxy(
    This : Pointer[IInternetZoneManagerEx],
    dwZone : CULong,
    dwAction : CULong,
    pPolicy : Pointer[CUChar],
    cbPolicy : CULong,
    urlZoneReg : URLZONEREG,
    dwFlags : CULong) CLong;

external IInternetZoneManagerEx_SetZoneActionPolicyEx_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external CLSID_SoftDistExt : IID;

record Struct__tagCODEBASEHOLD (
    cbSize : CULong,
    szDistUnit : LPWSTR,
    szCodeBase : LPWSTR,
    dwVersionMS : CULong,
    dwVersionLS : CULong,
    dwStyle : CULong,
);

alias CODEBASEHOLD = Struct__tagCODEBASEHOLD;

alias LPCODEBASEHOLD = Pointer[Struct__tagCODEBASEHOLD];

record Struct__tagSOFTDISTINFO (
    cbSize : CULong,
    dwFlags : CULong,
    dwAdState : CULong,
    szTitle : LPWSTR,
    szAbstract : LPWSTR,
    szHREF : LPWSTR,
    dwInstalledVersionMS : CULong,
    dwInstalledVersionLS : CULong,
    dwUpdateVersionMS : CULong,
    dwUpdateVersionLS : CULong,
    dwAdvertisedVersionMS : CULong,
    dwAdvertisedVersionLS : CULong,
    dwReserved : CULong,
);

alias SOFTDISTINFO = Struct__tagSOFTDISTINFO;

alias LPSOFTDISTINFO = Pointer[Struct__tagSOFTDISTINFO];

external __MIDL_itf_urlmon_0210_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_urlmon_0210_v0_0_s_ifspec : RPC_IF_HANDLE;

external IID_ISoftDistExt : IID;

record Struct_ISoftDistExtVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_ISoftDistExt],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_ISoftDistExt]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_ISoftDistExt]),(CULong)],
    ProcessSoftDist : CCodePointer[(Pointer[Struct_ISoftDistExt],Pointer[UShort],Pointer[Struct_IXMLElement],Pointer[Struct__tagSOFTDISTINFO]),(CLong)],
    GetFirstCodeBase : CCodePointer[(Pointer[Struct_ISoftDistExt],Pointer[Pointer[UShort]],Pointer[CULong]),(CLong)],
    GetNextCodeBase : CCodePointer[(Pointer[Struct_ISoftDistExt],Pointer[Pointer[UShort]],Pointer[CULong]),(CLong)],
    AsyncInstallDistributionUnit : CCodePointer[(Pointer[Struct_ISoftDistExt],Pointer[Struct_IBindCtx],RawPointer,CULong,Pointer[Struct__tagCODEBASEHOLD]),(CLong)],
);

alias ISoftDistExtVtbl = Struct_ISoftDistExtVtbl;

record Struct_ISoftDistExt (
    lpVtbl : Pointer[Struct_ISoftDistExtVtbl],
);

external ISoftDistExt_ProcessSoftDist_Proxy(
    This : Pointer[ISoftDistExt],
    szCDFURL : LPCWSTR,
    pSoftDistElement : Pointer[IXMLElement],
    lpsdi : LPSOFTDISTINFO) CLong;

external ISoftDistExt_ProcessSoftDist_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ISoftDistExt_GetFirstCodeBase_Proxy(
    This : Pointer[ISoftDistExt],
    szCodeBase : Pointer[LPWSTR],
    dwMaxSize : LPDWORD) CLong;

external ISoftDistExt_GetFirstCodeBase_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ISoftDistExt_GetNextCodeBase_Proxy(
    This : Pointer[ISoftDistExt],
    szCodeBase : Pointer[LPWSTR],
    dwMaxSize : LPDWORD) CLong;

external ISoftDistExt_GetNextCodeBase_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ISoftDistExt_AsyncInstallDistributionUnit_Proxy(
    This : Pointer[ISoftDistExt],
    pbc : Pointer[IBindCtx],
    pvReserved : LPVOID,
    flags : CULong,
    lpcbh : LPCODEBASEHOLD) CLong;

external ISoftDistExt_AsyncInstallDistributionUnit_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external GetSoftwareUpdateInfo(
    szDistUnit : LPCWSTR,
    psdi : LPSOFTDISTINFO) CLong;

external SetSoftwareUpdateAdvertisementState(
    szDistUnit : LPCWSTR,
    dwAdState : CULong,
    dwAdvertisedVersionMS : CULong,
    dwAdvertisedVersionLS : CULong) CLong;

external __MIDL_itf_urlmon_0211_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_urlmon_0211_v0_0_s_ifspec : RPC_IF_HANDLE;

alias LPCATALOGFILEINFO = Pointer[ICatalogFileInfo];

external IID_ICatalogFileInfo : IID;

record Struct_ICatalogFileInfoVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_ICatalogFileInfo],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_ICatalogFileInfo]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_ICatalogFileInfo]),(CULong)],
    GetCatalogFile : CCodePointer[(Pointer[Struct_ICatalogFileInfo],Pointer[Pointer[CChar]]),(CLong)],
    GetJavaTrust : CCodePointer[(Pointer[Struct_ICatalogFileInfo],Pointer[RawPointer]),(CLong)],
);

alias ICatalogFileInfoVtbl = Struct_ICatalogFileInfoVtbl;

record Struct_ICatalogFileInfo (
    lpVtbl : Pointer[Struct_ICatalogFileInfoVtbl],
);

external ICatalogFileInfo_GetCatalogFile_Proxy(
    This : Pointer[ICatalogFileInfo],
    ppszCatalogFile : Pointer[LPSTR]) CLong;

external ICatalogFileInfo_GetCatalogFile_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external ICatalogFileInfo_GetJavaTrust_Proxy(
    This : Pointer[ICatalogFileInfo],
    ppJavaTrust : Pointer[RawPointer]) CLong;

external ICatalogFileInfo_GetJavaTrust_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external __MIDL_itf_urlmon_0212_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_urlmon_0212_v0_0_s_ifspec : RPC_IF_HANDLE;

alias LPDATAFILTER = Pointer[IDataFilter];

external IID_IDataFilter : IID;

record Struct_IDataFilterVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IDataFilter],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IDataFilter]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IDataFilter]),(CULong)],
    DoEncode : CCodePointer[(Pointer[Struct_IDataFilter],CULong,CLong,Pointer[CUChar],CLong,Pointer[CUChar],CLong,Pointer[CLong],Pointer[CLong],CULong),(CLong)],
    DoDecode : CCodePointer[(Pointer[Struct_IDataFilter],CULong,CLong,Pointer[CUChar],CLong,Pointer[CUChar],CLong,Pointer[CLong],Pointer[CLong],CULong),(CLong)],
    SetEncodingLevel : CCodePointer[(Pointer[Struct_IDataFilter],CULong),(CLong)],
);

alias IDataFilterVtbl = Struct_IDataFilterVtbl;

record Struct_IDataFilter (
    lpVtbl : Pointer[Struct_IDataFilterVtbl],
);

external IDataFilter_DoEncode_Proxy(
    This : Pointer[IDataFilter],
    dwFlags : CULong,
    lInBufferSize : CLong,
    pbInBuffer : Pointer[CUChar],
    lOutBufferSize : CLong,
    pbOutBuffer : Pointer[CUChar],
    lInBytesAvailable : CLong,
    plInBytesRead : Pointer[CLong],
    plOutBytesWritten : Pointer[CLong],
    dwReserved : CULong) CLong;

external IDataFilter_DoEncode_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IDataFilter_DoDecode_Proxy(
    This : Pointer[IDataFilter],
    dwFlags : CULong,
    lInBufferSize : CLong,
    pbInBuffer : Pointer[CUChar],
    lOutBufferSize : CLong,
    pbOutBuffer : Pointer[CUChar],
    lInBytesAvailable : CLong,
    plInBytesRead : Pointer[CLong],
    plOutBytesWritten : Pointer[CLong],
    dwReserved : CULong) CLong;

external IDataFilter_DoDecode_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IDataFilter_SetEncodingLevel_Proxy(
    This : Pointer[IDataFilter],
    dwEncLevel : CULong) CLong;

external IDataFilter_SetEncodingLevel_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

record Struct__tagPROTOCOLFILTERDATA (
    cbSize : CULong,
    pProtocolSink : Pointer[IInternetProtocolSink],
    pProtocol : Pointer[IInternetProtocol],
    pUnk : Pointer[IUnknown],
    dwFilterFlags : CULong,
);

alias PROTOCOLFILTERDATA = Struct__tagPROTOCOLFILTERDATA;

external __MIDL_itf_urlmon_0213_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_urlmon_0213_v0_0_s_ifspec : RPC_IF_HANDLE;

alias LPENCODINGFILTERFACTORY = Pointer[IEncodingFilterFactory];

record Struct__tagDATAINFO (
    ulTotalSize : CULong,
    ulavrPacketSize : CULong,
    ulConnectSpeed : CULong,
    ulProcessorSpeed : CULong,
);

alias DATAINFO = Struct__tagDATAINFO;

external IID_IEncodingFilterFactory : IID;

record Struct_IEncodingFilterFactoryVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IEncodingFilterFactory],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IEncodingFilterFactory]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IEncodingFilterFactory]),(CULong)],
    FindBestFilter : CCodePointer[(Pointer[Struct_IEncodingFilterFactory],Pointer[UShort],Pointer[UShort],Struct__tagDATAINFO,Pointer[Pointer[Struct_IDataFilter]]),(CLong)],
    GetDefaultFilter : CCodePointer[(Pointer[Struct_IEncodingFilterFactory],Pointer[UShort],Pointer[UShort],Pointer[Pointer[Struct_IDataFilter]]),(CLong)],
);

alias IEncodingFilterFactoryVtbl = Struct_IEncodingFilterFactoryVtbl;

record Struct_IEncodingFilterFactory (
    lpVtbl : Pointer[Struct_IEncodingFilterFactoryVtbl],
);

external IEncodingFilterFactory_FindBestFilter_Proxy(
    This : Pointer[IEncodingFilterFactory],
    pwzCodeIn : LPCWSTR,
    pwzCodeOut : LPCWSTR,
    info : DATAINFO,
    ppDF : Pointer[Pointer[IDataFilter]]) CLong;

external IEncodingFilterFactory_FindBestFilter_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IEncodingFilterFactory_GetDefaultFilter_Proxy(
    This : Pointer[IEncodingFilterFactory],
    pwzCodeIn : LPCWSTR,
    pwzCodeOut : LPCWSTR,
    ppDF : Pointer[Pointer[IDataFilter]]) CLong;

external IEncodingFilterFactory_GetDefaultFilter_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IsLoggingEnabledA(
    pszUrl : LPCSTR) Int;

external IsLoggingEnabledW(
    pwszUrl : LPCWSTR) Int;

record Struct__tagHIT_LOGGING_INFO (
    dwStructSize : CULong,
    lpszLoggedUrlName : LPSTR,
    StartTime : SYSTEMTIME,
    EndTime : SYSTEMTIME,
    lpszExtendedInfo : LPSTR,
);

alias HIT_LOGGING_INFO = Struct__tagHIT_LOGGING_INFO;

alias LPHIT_LOGGING_INFO = Pointer[Struct__tagHIT_LOGGING_INFO];

external WriteHitLogging(
    lpLogginginfo : LPHIT_LOGGING_INFO) Int;

record Struct_CONFIRMSAFETY (
    clsid : CLSID,
    pUnk : Pointer[IUnknown],
    dwFlags : CULong,
);

external GUID_CUSTOM_CONFIRMOBJECTSAFETY : GUID;

external __MIDL_itf_urlmon_0214_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_urlmon_0214_v0_0_s_ifspec : RPC_IF_HANDLE;

alias LPIWRAPPEDPROTOCOL = Pointer[IWrappedProtocol];

external IID_IWrappedProtocol : IID;

record Struct_IWrappedProtocolVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IWrappedProtocol],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IWrappedProtocol]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IWrappedProtocol]),(CULong)],
    GetWrapperCode : CCodePointer[(Pointer[Struct_IWrappedProtocol],Pointer[CLong],UInt64),(CLong)],
);

alias IWrappedProtocolVtbl = Struct_IWrappedProtocolVtbl;

record Struct_IWrappedProtocol (
    lpVtbl : Pointer[Struct_IWrappedProtocolVtbl],
);

external IWrappedProtocol_GetWrapperCode_Proxy(
    This : Pointer[IWrappedProtocol],
    pnCode : Pointer[CLong],
    dwReserved : UInt64) CLong;

external IWrappedProtocol_GetWrapperCode_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external __MIDL_itf_urlmon_0215_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_urlmon_0215_v0_0_s_ifspec : RPC_IF_HANDLE;

external IBinding_GetBindResult_Proxy(
    This : Pointer[IBinding],
    pclsidProtocol : Pointer[CLSID],
    pdwResult : Pointer[CULong],
    pszResult : Pointer[LPOLESTR],
    pdwReserved : Pointer[CULong]) CLong;

external IBinding_GetBindResult_Stub(
    This : Pointer[IBinding],
    pclsidProtocol : Pointer[CLSID],
    pdwResult : Pointer[CULong],
    pszResult : Pointer[LPOLESTR],
    dwReserved : CULong) CLong;

external IBindStatusCallback_GetBindInfo_Proxy(
    This : Pointer[IBindStatusCallback],
    grfBINDF : Pointer[CULong],
    pbindinfo : Pointer[BINDINFO]) CLong;

external IBindStatusCallback_GetBindInfo_Stub(
    This : Pointer[IBindStatusCallback],
    grfBINDF : Pointer[CULong],
    pbindinfo : Pointer[RemBINDINFO],
    pstgmed : Pointer[RemSTGMEDIUM]) CLong;

external IBindStatusCallback_OnDataAvailable_Proxy(
    This : Pointer[IBindStatusCallback],
    grfBSCF : CULong,
    dwSize : CULong,
    pformatetc : Pointer[FORMATETC],
    pstgmed : Pointer[STGMEDIUM]) CLong;

external IBindStatusCallback_OnDataAvailable_Stub(
    This : Pointer[IBindStatusCallback],
    grfBSCF : CULong,
    dwSize : CULong,
    pformatetc : Pointer[RemFORMATETC],
    pstgmed : Pointer[RemSTGMEDIUM]) CLong;

external IWinInetInfo_QueryOption_Proxy(
    This : Pointer[IWinInetInfo],
    dwOption : CULong,
    pBuffer : LPVOID,
    pcbBuf : Pointer[CULong]) CLong;

external IWinInetInfo_QueryOption_Stub(
    This : Pointer[IWinInetInfo],
    dwOption : CULong,
    pBuffer : Pointer[CUChar],
    pcbBuf : Pointer[CULong]) CLong;

external IWinInetHttpInfo_QueryInfo_Proxy(
    This : Pointer[IWinInetHttpInfo],
    dwOption : CULong,
    pBuffer : LPVOID,
    pcbBuf : Pointer[CULong],
    pdwFlags : Pointer[CULong],
    pdwReserved : Pointer[CULong]) CLong;

external IWinInetHttpInfo_QueryInfo_Stub(
    This : Pointer[IWinInetHttpInfo],
    dwOption : CULong,
    pBuffer : Pointer[CUChar],
    pcbBuf : Pointer[CULong],
    pdwFlags : Pointer[CULong],
    pdwReserved : Pointer[CULong]) CLong;

external IBindHost_MonikerBindToStorage_Proxy(
    This : Pointer[IBindHost],
    pMk : Pointer[IMoniker],
    pBC : Pointer[IBindCtx],
    pBSC : Pointer[IBindStatusCallback],
    riid : Pointer[IID],
    ppvObj : Pointer[RawPointer]) CLong;

external IBindHost_MonikerBindToStorage_Stub(
    This : Pointer[IBindHost],
    pMk : Pointer[IMoniker],
    pBC : Pointer[IBindCtx],
    pBSC : Pointer[IBindStatusCallback],
    riid : Pointer[IID],
    ppvObj : Pointer[Pointer[IUnknown]]) CLong;

external IBindHost_MonikerBindToObject_Proxy(
    This : Pointer[IBindHost],
    pMk : Pointer[IMoniker],
    pBC : Pointer[IBindCtx],
    pBSC : Pointer[IBindStatusCallback],
    riid : Pointer[IID],
    ppvObj : Pointer[RawPointer]) CLong;

external IBindHost_MonikerBindToObject_Stub(
    This : Pointer[IBindHost],
    pMk : Pointer[IMoniker],
    pBC : Pointer[IBindCtx],
    pBSC : Pointer[IBindStatusCallback],
    riid : Pointer[IID],
    ppvObj : Pointer[Pointer[IUnknown]]) CLong;

alias IPropertyStorage = Struct_IPropertyStorage;

alias IPropertySetStorage = Struct_IPropertySetStorage;

alias IEnumSTATPROPSTG = Struct_IEnumSTATPROPSTG;

alias IEnumSTATPROPSETSTG = Struct_IEnumSTATPROPSETSTG;

record Struct_tagVersionedStream (
    guidVersion : GUID,
    pStream : Pointer[IStream],
);

alias VERSIONEDSTREAM = Struct_tagVersionedStream;

alias LPVERSIONEDSTREAM = Pointer[Struct_tagVersionedStream];

alias PROPVARIANT = Struct_tagPROPVARIANT;

record Struct_tagCAC (
    cElems : CULong,
    pElems : Pointer[CChar],
);

alias CAC = Struct_tagCAC;

record Struct_tagCAUB (
    cElems : CULong,
    pElems : Pointer[CUChar],
);

alias CAUB = Struct_tagCAUB;

record Struct_tagCAI (
    cElems : CULong,
    pElems : Pointer[Short],
);

alias CAI = Struct_tagCAI;

record Struct_tagCAUI (
    cElems : CULong,
    pElems : Pointer[UShort],
);

alias CAUI = Struct_tagCAUI;

record Struct_tagCAL (
    cElems : CULong,
    pElems : Pointer[CLong],
);

alias CAL = Struct_tagCAL;

record Struct_tagCAUL (
    cElems : CULong,
    pElems : Pointer[CULong],
);

alias CAUL = Struct_tagCAUL;

record Struct_tagCAFLT (
    cElems : CULong,
    pElems : Pointer[Float],
);

alias CAFLT = Struct_tagCAFLT;

record Struct_tagCADBL (
    cElems : CULong,
    pElems : Pointer[Double],
);

alias CADBL = Struct_tagCADBL;

record Struct_tagCACY (
    cElems : CULong,
    pElems : Pointer[CY],
);

alias CACY = Struct_tagCACY;

record Struct_tagCADATE (
    cElems : CULong,
    pElems : Pointer[Double],
);

alias CADATE = Struct_tagCADATE;

record Struct_tagCABSTR (
    cElems : CULong,
    pElems : Pointer[BSTR],
);

alias CABSTR = Struct_tagCABSTR;

record Struct_tagCABSTRBLOB (
    cElems : CULong,
    pElems : Pointer[BSTRBLOB],
);

alias CABSTRBLOB = Struct_tagCABSTRBLOB;

record Struct_tagCABOOL (
    cElems : CULong,
    pElems : Pointer[Short],
);

alias CABOOL = Struct_tagCABOOL;

record Struct_tagCASCODE (
    cElems : CULong,
    pElems : Pointer[CLong],
);

alias CASCODE = Struct_tagCASCODE;

record Struct_tagCAPROPVARIANT (
    cElems : CULong,
    pElems : Pointer[PROPVARIANT],
);

alias CAPROPVARIANT = Struct_tagCAPROPVARIANT;

record Struct_tagCAH (
    cElems : CULong,
    pElems : Pointer[LARGE_INTEGER],
);

alias CAH = Struct_tagCAH;

record Struct_tagCAUH (
    cElems : CULong,
    pElems : Pointer[ULARGE_INTEGER],
);

alias CAUH = Struct_tagCAUH;

record Struct_tagCALPSTR (
    cElems : CULong,
    pElems : Pointer[LPSTR],
);

alias CALPSTR = Struct_tagCALPSTR;

record Struct_tagCALPWSTR (
    cElems : CULong,
    pElems : Pointer[LPWSTR],
);

alias CALPWSTR = Struct_tagCALPWSTR;

record Struct_tagCAFILETIME (
    cElems : CULong,
    pElems : Pointer[FILETIME],
);

alias CAFILETIME = Struct_tagCAFILETIME;

record Struct_tagCACLIPDATA (
    cElems : CULong,
    pElems : Pointer[CLIPDATA],
);

alias CACLIPDATA = Struct_tagCACLIPDATA;

record Struct_tagCACLSID (
    cElems : CULong,
    pElems : Pointer[CLSID],
);

alias CACLSID = Struct_tagCACLSID;

alias PROPVAR_PAD1 = UShort;

alias PROPVAR_PAD2 = UShort;

alias PROPVAR_PAD3 = UShort;

record Struct_tagPROPVARIANT (
    unnamed_field0 : AUnionType,
);

alias LPPROPVARIANT = Pointer[Struct_tagPROPVARIANT];

alias PIDMSI_STATUS_NORMAL = 0;
alias PIDMSI_STATUS_NEW = 1;
alias PIDMSI_STATUS_PRELIM = 2;
alias PIDMSI_STATUS_DRAFT = 3;
alias PIDMSI_STATUS_INPROGRESS = 4;
alias PIDMSI_STATUS_EDIT = 5;
alias PIDMSI_STATUS_REVIEW = 6;
alias PIDMSI_STATUS_PROOF = 7;
alias PIDMSI_STATUS_FINAL = 8;
alias PIDMSI_STATUS_OTHER = 32767;

record Struct_tagPROPSPEC (
    ulKind : CULong,
    unnamed_field1 : AUnionType,
);

alias PROPSPEC = Struct_tagPROPSPEC;

record Struct_tagSTATPROPSTG (
    lpwstrName : LPOLESTR,
    propid : CULong,
    vt : UShort,
);

alias STATPROPSTG = Struct_tagSTATPROPSTG;

record Struct_tagSTATPROPSETSTG (
    fmtid : FMTID,
    clsid : CLSID,
    grfFlags : CULong,
    mtime : FILETIME,
    ctime : FILETIME,
    atime : FILETIME,
    dwOSVersion : CULong,
);

alias STATPROPSETSTG = Struct_tagSTATPROPSETSTG;

external __MIDL_itf_propidl_0000_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_propidl_0000_v0_0_s_ifspec : RPC_IF_HANDLE;

external IID_IPropertyStorage : IID;

record Struct_IPropertyStorageVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IPropertyStorage],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IPropertyStorage]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IPropertyStorage]),(CULong)],
    ReadMultiple : CCodePointer[(Pointer[Struct_IPropertyStorage],CULong,Pointer[Struct_tagPROPSPEC],Pointer[Struct_tagPROPVARIANT]),(CLong)],
    WriteMultiple : CCodePointer[(Pointer[Struct_IPropertyStorage],CULong,Pointer[Struct_tagPROPSPEC],Pointer[Struct_tagPROPVARIANT],CULong),(CLong)],
    DeleteMultiple : CCodePointer[(Pointer[Struct_IPropertyStorage],CULong,Pointer[Struct_tagPROPSPEC]),(CLong)],
    ReadPropertyNames : CCodePointer[(Pointer[Struct_IPropertyStorage],CULong,Pointer[CULong],Pointer[Pointer[UShort]]),(CLong)],
    WritePropertyNames : CCodePointer[(Pointer[Struct_IPropertyStorage],CULong,Pointer[CULong],Pointer[Pointer[UShort]]),(CLong)],
    DeletePropertyNames : CCodePointer[(Pointer[Struct_IPropertyStorage],CULong,Pointer[CULong]),(CLong)],
    Commit : CCodePointer[(Pointer[Struct_IPropertyStorage],CULong),(CLong)],
    Revert : CCodePointer[(Pointer[Struct_IPropertyStorage]),(CLong)],
    Enum : CCodePointer[(Pointer[Struct_IPropertyStorage],Pointer[Pointer[Struct_IEnumSTATPROPSTG]]),(CLong)],
    SetTimes : CCodePointer[(Pointer[Struct_IPropertyStorage],Pointer[Struct__FILETIME],Pointer[Struct__FILETIME],Pointer[Struct__FILETIME]),(CLong)],
    SetClass : CCodePointer[(Pointer[Struct_IPropertyStorage],Pointer[Struct__GUID]),(CLong)],
    Stat : CCodePointer[(Pointer[Struct_IPropertyStorage],Pointer[Struct_tagSTATPROPSETSTG]),(CLong)],
);

alias IPropertyStorageVtbl = Struct_IPropertyStorageVtbl;

record Struct_IPropertyStorage (
    lpVtbl : Pointer[Struct_IPropertyStorageVtbl],
);

external IPropertyStorage_ReadMultiple_Proxy(
    This : Pointer[IPropertyStorage],
    cpspec : CULong,
    rgpspec : Pointer[PROPSPEC],
    rgpropvar : Pointer[PROPVARIANT]) CLong;

external IPropertyStorage_ReadMultiple_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IPropertyStorage_WriteMultiple_Proxy(
    This : Pointer[IPropertyStorage],
    cpspec : CULong,
    rgpspec : Pointer[PROPSPEC],
    rgpropvar : Pointer[PROPVARIANT],
    propidNameFirst : CULong) CLong;

external IPropertyStorage_WriteMultiple_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IPropertyStorage_DeleteMultiple_Proxy(
    This : Pointer[IPropertyStorage],
    cpspec : CULong,
    rgpspec : Pointer[PROPSPEC]) CLong;

external IPropertyStorage_DeleteMultiple_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IPropertyStorage_ReadPropertyNames_Proxy(
    This : Pointer[IPropertyStorage],
    cpropid : CULong,
    rgpropid : Pointer[CULong],
    rglpwstrName : Pointer[LPOLESTR]) CLong;

external IPropertyStorage_ReadPropertyNames_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IPropertyStorage_WritePropertyNames_Proxy(
    This : Pointer[IPropertyStorage],
    cpropid : CULong,
    rgpropid : Pointer[CULong],
    rglpwstrName : Pointer[LPOLESTR]) CLong;

external IPropertyStorage_WritePropertyNames_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IPropertyStorage_DeletePropertyNames_Proxy(
    This : Pointer[IPropertyStorage],
    cpropid : CULong,
    rgpropid : Pointer[CULong]) CLong;

external IPropertyStorage_DeletePropertyNames_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IPropertyStorage_Commit_Proxy(
    This : Pointer[IPropertyStorage],
    grfCommitFlags : CULong) CLong;

external IPropertyStorage_Commit_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IPropertyStorage_Revert_Proxy(
    This : Pointer[IPropertyStorage]) CLong;

external IPropertyStorage_Revert_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IPropertyStorage_Enum_Proxy(
    This : Pointer[IPropertyStorage],
    ppenum : Pointer[Pointer[IEnumSTATPROPSTG]]) CLong;

external IPropertyStorage_Enum_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IPropertyStorage_SetTimes_Proxy(
    This : Pointer[IPropertyStorage],
    pctime : Pointer[FILETIME],
    patime : Pointer[FILETIME],
    pmtime : Pointer[FILETIME]) CLong;

external IPropertyStorage_SetTimes_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IPropertyStorage_SetClass_Proxy(
    This : Pointer[IPropertyStorage],
    clsid : Pointer[IID]) CLong;

external IPropertyStorage_SetClass_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IPropertyStorage_Stat_Proxy(
    This : Pointer[IPropertyStorage],
    pstatpsstg : Pointer[STATPROPSETSTG]) CLong;

external IPropertyStorage_Stat_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPPROPERTYSETSTORAGE = Pointer[IPropertySetStorage];

external IID_IPropertySetStorage : IID;

record Struct_IPropertySetStorageVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IPropertySetStorage],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IPropertySetStorage]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IPropertySetStorage]),(CULong)],
    Create : CCodePointer[(Pointer[Struct_IPropertySetStorage],Pointer[Struct__GUID],Pointer[Struct__GUID],CULong,CULong,Pointer[Pointer[Struct_IPropertyStorage]]),(CLong)],
    Open : CCodePointer[(Pointer[Struct_IPropertySetStorage],Pointer[Struct__GUID],CULong,Pointer[Pointer[Struct_IPropertyStorage]]),(CLong)],
    Delete : CCodePointer[(Pointer[Struct_IPropertySetStorage],Pointer[Struct__GUID]),(CLong)],
    Enum : CCodePointer[(Pointer[Struct_IPropertySetStorage],Pointer[Pointer[Struct_IEnumSTATPROPSETSTG]]),(CLong)],
);

alias IPropertySetStorageVtbl = Struct_IPropertySetStorageVtbl;

record Struct_IPropertySetStorage (
    lpVtbl : Pointer[Struct_IPropertySetStorageVtbl],
);

external IPropertySetStorage_Create_Proxy(
    This : Pointer[IPropertySetStorage],
    rfmtid : Pointer[IID],
    pclsid : Pointer[CLSID],
    grfFlags : CULong,
    grfMode : CULong,
    ppprstg : Pointer[Pointer[IPropertyStorage]]) CLong;

external IPropertySetStorage_Create_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IPropertySetStorage_Open_Proxy(
    This : Pointer[IPropertySetStorage],
    rfmtid : Pointer[IID],
    grfMode : CULong,
    ppprstg : Pointer[Pointer[IPropertyStorage]]) CLong;

external IPropertySetStorage_Open_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IPropertySetStorage_Delete_Proxy(
    This : Pointer[IPropertySetStorage],
    rfmtid : Pointer[IID]) CLong;

external IPropertySetStorage_Delete_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IPropertySetStorage_Enum_Proxy(
    This : Pointer[IPropertySetStorage],
    ppenum : Pointer[Pointer[IEnumSTATPROPSETSTG]]) CLong;

external IPropertySetStorage_Enum_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPENUMSTATPROPSTG = Pointer[IEnumSTATPROPSTG];

external IID_IEnumSTATPROPSTG : IID;

record Struct_IEnumSTATPROPSTGVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IEnumSTATPROPSTG],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IEnumSTATPROPSTG]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IEnumSTATPROPSTG]),(CULong)],
    Next : CCodePointer[(Pointer[Struct_IEnumSTATPROPSTG],CULong,Pointer[Struct_tagSTATPROPSTG],Pointer[CULong]),(CLong)],
    Skip : CCodePointer[(Pointer[Struct_IEnumSTATPROPSTG],CULong),(CLong)],
    Reset : CCodePointer[(Pointer[Struct_IEnumSTATPROPSTG]),(CLong)],
    Clone : CCodePointer[(Pointer[Struct_IEnumSTATPROPSTG],Pointer[Pointer[Struct_IEnumSTATPROPSTG]]),(CLong)],
);

alias IEnumSTATPROPSTGVtbl = Struct_IEnumSTATPROPSTGVtbl;

record Struct_IEnumSTATPROPSTG (
    lpVtbl : Pointer[Struct_IEnumSTATPROPSTGVtbl],
);

external IEnumSTATPROPSTG_RemoteNext_Proxy(
    This : Pointer[IEnumSTATPROPSTG],
    celt : CULong,
    rgelt : Pointer[STATPROPSTG],
    pceltFetched : Pointer[CULong]) CLong;

external IEnumSTATPROPSTG_RemoteNext_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IEnumSTATPROPSTG_Skip_Proxy(
    This : Pointer[IEnumSTATPROPSTG],
    celt : CULong) CLong;

external IEnumSTATPROPSTG_Skip_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IEnumSTATPROPSTG_Reset_Proxy(
    This : Pointer[IEnumSTATPROPSTG]) CLong;

external IEnumSTATPROPSTG_Reset_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IEnumSTATPROPSTG_Clone_Proxy(
    This : Pointer[IEnumSTATPROPSTG],
    ppenum : Pointer[Pointer[IEnumSTATPROPSTG]]) CLong;

external IEnumSTATPROPSTG_Clone_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPENUMSTATPROPSETSTG = Pointer[IEnumSTATPROPSETSTG];

external IID_IEnumSTATPROPSETSTG : IID;

record Struct_IEnumSTATPROPSETSTGVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IEnumSTATPROPSETSTG],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IEnumSTATPROPSETSTG]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IEnumSTATPROPSETSTG]),(CULong)],
    Next : CCodePointer[(Pointer[Struct_IEnumSTATPROPSETSTG],CULong,Pointer[Struct_tagSTATPROPSETSTG],Pointer[CULong]),(CLong)],
    Skip : CCodePointer[(Pointer[Struct_IEnumSTATPROPSETSTG],CULong),(CLong)],
    Reset : CCodePointer[(Pointer[Struct_IEnumSTATPROPSETSTG]),(CLong)],
    Clone : CCodePointer[(Pointer[Struct_IEnumSTATPROPSETSTG],Pointer[Pointer[Struct_IEnumSTATPROPSETSTG]]),(CLong)],
);

alias IEnumSTATPROPSETSTGVtbl = Struct_IEnumSTATPROPSETSTGVtbl;

record Struct_IEnumSTATPROPSETSTG (
    lpVtbl : Pointer[Struct_IEnumSTATPROPSETSTGVtbl],
);

external IEnumSTATPROPSETSTG_RemoteNext_Proxy(
    This : Pointer[IEnumSTATPROPSETSTG],
    celt : CULong,
    rgelt : Pointer[STATPROPSETSTG],
    pceltFetched : Pointer[CULong]) CLong;

external IEnumSTATPROPSETSTG_RemoteNext_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IEnumSTATPROPSETSTG_Skip_Proxy(
    This : Pointer[IEnumSTATPROPSETSTG],
    celt : CULong) CLong;

external IEnumSTATPROPSETSTG_Skip_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IEnumSTATPROPSETSTG_Reset_Proxy(
    This : Pointer[IEnumSTATPROPSETSTG]) CLong;

external IEnumSTATPROPSETSTG_Reset_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

external IEnumSTATPROPSETSTG_Clone_Proxy(
    This : Pointer[IEnumSTATPROPSETSTG],
    ppenum : Pointer[Pointer[IEnumSTATPROPSETSTG]]) CLong;

external IEnumSTATPROPSETSTG_Clone_Stub(
    This : Pointer[IRpcStubBuffer],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer],
    _pRpcMessage : PRPC_MESSAGE,
    _pdwStubPhase : Pointer[CULong]);

alias LPPROPERTYSTORAGE = Pointer[IPropertyStorage];

external PropVariantCopy(
    pvarDest : Pointer[PROPVARIANT],
    pvarSrc : Pointer[PROPVARIANT]) CLong;

external PropVariantClear(
    pvar : Pointer[PROPVARIANT]) CLong;

external FreePropVariantArray(
    cVariants : CULong,
    rgvars : Pointer[PROPVARIANT]) CLong;

external StgCreatePropStg(
    pUnk : Pointer[IUnknown],
    fmtid : Pointer[IID],
    pclsid : Pointer[CLSID],
    grfFlags : CULong,
    dwReserved : CULong,
    ppPropStg : Pointer[Pointer[IPropertyStorage]]) CLong;

external StgOpenPropStg(
    pUnk : Pointer[IUnknown],
    fmtid : Pointer[IID],
    grfFlags : CULong,
    dwReserved : CULong,
    ppPropStg : Pointer[Pointer[IPropertyStorage]]) CLong;

external StgCreatePropSetStg(
    pStorage : Pointer[IStorage],
    dwReserved : CULong,
    ppPropSetStg : Pointer[Pointer[IPropertySetStorage]]) CLong;

external FmtIdToPropStgName(
    pfmtid : Pointer[FMTID],
    oszName : LPOLESTR) CLong;

external PropStgNameToFmtId(
    oszName : LPOLESTR,
    pfmtid : Pointer[FMTID]) CLong;

external __MIDL_itf_propidl_0120_v0_0_c_ifspec : RPC_IF_HANDLE;

external __MIDL_itf_propidl_0120_v0_0_s_ifspec : RPC_IF_HANDLE;

external LPSAFEARRAY_UserSize(
    argument0 : Pointer[CULong],
    argument1 : CULong,
    argument2 : Pointer[LPSAFEARRAY]) CULong;

external LPSAFEARRAY_UserMarshal(
    argument0 : Pointer[CULong],
    argument1 : Pointer[CUChar],
    argument2 : Pointer[LPSAFEARRAY]) Pointer[CUChar];

external LPSAFEARRAY_UserUnmarshal(
    argument0 : Pointer[CULong],
    argument1 : Pointer[CUChar],
    argument2 : Pointer[LPSAFEARRAY]) Pointer[CUChar];

external LPSAFEARRAY_UserFree(
    argument0 : Pointer[CULong],
    argument1 : Pointer[LPSAFEARRAY]);

external IEnumSTATPROPSTG_Next_Proxy(
    This : Pointer[IEnumSTATPROPSTG],
    celt : CULong,
    rgelt : Pointer[STATPROPSTG],
    pceltFetched : Pointer[CULong]) CLong;

external IEnumSTATPROPSTG_Next_Stub(
    This : Pointer[IEnumSTATPROPSTG],
    celt : CULong,
    rgelt : Pointer[STATPROPSTG],
    pceltFetched : Pointer[CULong]) CLong;

external IEnumSTATPROPSETSTG_Next_Proxy(
    This : Pointer[IEnumSTATPROPSETSTG],
    celt : CULong,
    rgelt : Pointer[STATPROPSETSTG],
    pceltFetched : Pointer[CULong]) CLong;

external IEnumSTATPROPSETSTG_Next_Stub(
    This : Pointer[IEnumSTATPROPSETSTG],
    celt : CULong,
    rgelt : Pointer[STATPROPSETSTG],
    pceltFetched : Pointer[CULong]) CLong;

external CreateStdProgressIndicator(
    hwndParent : HWND,
    pszTitle : LPCOLESTR,
    pIbscCaller : Pointer[IBindStatusCallback],
    ppIbsc : Pointer[Pointer[IBindStatusCallback]]) CLong;

external IID_StdOle : IID;

external SysAllocString(
    argument0 : Pointer[UShort]) BSTR;

external SysReAllocString(
    argument0 : Pointer[BSTR],
    argument1 : Pointer[UShort]) Int;

external SysAllocStringLen(
    argument0 : Pointer[UShort],
    argument1 : UInt) BSTR;

external SysReAllocStringLen(
    argument0 : Pointer[BSTR],
    argument1 : Pointer[UShort],
    argument2 : UInt) Int;

external SysFreeString(
    argument0 : BSTR);

external SysStringLen(
    argument0 : BSTR) UInt;

external SysStringByteLen(
    bstr : BSTR) UInt;

external SysAllocStringByteLen(
    psz : LPCSTR,
    len : UInt) BSTR;

external DosDateTimeToVariantTime(
    wDosDate : UShort,
    wDosTime : UShort,
    pvtime : Pointer[Double]) Int;

external VariantTimeToDosDateTime(
    vtime : Double,
    pwDosDate : Pointer[UShort],
    pwDosTime : Pointer[UShort]) Int;

external SystemTimeToVariantTime(
    lpSystemTime : LPSYSTEMTIME,
    pvtime : Pointer[Double]) Int;

external VariantTimeToSystemTime(
    vtime : Double,
    lpSystemTime : LPSYSTEMTIME) Int;

external SafeArrayAllocDescriptor(
    cDims : UInt,
    ppsaOut : Pointer[Pointer[SAFEARRAY]]) CLong;

external SafeArrayAllocDescriptorEx(
    vt : UShort,
    cDims : UInt,
    ppsaOut : Pointer[Pointer[SAFEARRAY]]) CLong;

external SafeArrayAllocData(
    psa : Pointer[SAFEARRAY]) CLong;

external SafeArrayCreate(
    vt : UShort,
    cDims : UInt,
    rgsabound : Pointer[SAFEARRAYBOUND]) Pointer[SAFEARRAY];

external SafeArrayCreateEx(
    vt : UShort,
    cDims : UInt,
    rgsabound : Pointer[SAFEARRAYBOUND],
    pvExtra : PVOID) Pointer[SAFEARRAY];

external SafeArrayCopyData(
    psaSource : Pointer[SAFEARRAY],
    psaTarget : Pointer[SAFEARRAY]) CLong;

external SafeArrayDestroyDescriptor(
    psa : Pointer[SAFEARRAY]) CLong;

external SafeArrayDestroyData(
    psa : Pointer[SAFEARRAY]) CLong;

external SafeArrayDestroy(
    psa : Pointer[SAFEARRAY]) CLong;

external SafeArrayRedim(
    psa : Pointer[SAFEARRAY],
    psaboundNew : Pointer[SAFEARRAYBOUND]) CLong;

external SafeArrayGetDim(
    psa : Pointer[SAFEARRAY]) UInt;

external SafeArrayGetElemsize(
    psa : Pointer[SAFEARRAY]) UInt;

external SafeArrayGetUBound(
    psa : Pointer[SAFEARRAY],
    nDim : UInt,
    plUbound : Pointer[CLong]) CLong;

external SafeArrayGetLBound(
    psa : Pointer[SAFEARRAY],
    nDim : UInt,
    plLbound : Pointer[CLong]) CLong;

external SafeArrayLock(
    psa : Pointer[SAFEARRAY]) CLong;

external SafeArrayUnlock(
    psa : Pointer[SAFEARRAY]) CLong;

external SafeArrayAccessData(
    psa : Pointer[SAFEARRAY],
    ppvData : Pointer[RawPointer]) CLong;

external SafeArrayUnaccessData(
    psa : Pointer[SAFEARRAY]) CLong;

external SafeArrayGetElement(
    psa : Pointer[SAFEARRAY],
    rgIndices : Pointer[CLong],
    pv : RawPointer) CLong;

external SafeArrayPutElement(
    psa : Pointer[SAFEARRAY],
    rgIndices : Pointer[CLong],
    pv : RawPointer) CLong;

external SafeArrayCopy(
    psa : Pointer[SAFEARRAY],
    ppsaOut : Pointer[Pointer[SAFEARRAY]]) CLong;

external SafeArrayPtrOfIndex(
    psa : Pointer[SAFEARRAY],
    rgIndices : Pointer[CLong],
    ppvData : Pointer[RawPointer]) CLong;

external SafeArraySetRecordInfo(
    psa : Pointer[SAFEARRAY],
    prinfo : Pointer[IRecordInfo]) CLong;

external SafeArrayGetRecordInfo(
    psa : Pointer[SAFEARRAY],
    prinfo : Pointer[Pointer[IRecordInfo]]) CLong;

external SafeArraySetIID(
    psa : Pointer[SAFEARRAY],
    guid : Pointer[GUID]) CLong;

external SafeArrayGetIID(
    psa : Pointer[SAFEARRAY],
    pguid : Pointer[GUID]) CLong;

external SafeArrayGetVartype(
    psa : Pointer[SAFEARRAY],
    pvt : Pointer[UShort]) CLong;

external SafeArrayCreateVector(
    vt : UShort,
    lLbound : CLong,
    cElements : CULong) Pointer[SAFEARRAY];

external SafeArrayCreateVectorEx(
    vt : UShort,
    lLbound : CLong,
    cElements : CULong,
    pvExtra : PVOID) Pointer[SAFEARRAY];

external VariantInit(
    pvarg : Pointer[VARIANTARG]);

external VariantClear(
    pvarg : Pointer[VARIANTARG]) CLong;

external VariantCopy(
    pvargDest : Pointer[VARIANTARG],
    pvargSrc : Pointer[VARIANTARG]) CLong;

external VariantCopyInd(
    pvarDest : Pointer[VARIANT],
    pvargSrc : Pointer[VARIANTARG]) CLong;

external VariantChangeType(
    pvargDest : Pointer[VARIANTARG],
    pvarSrc : Pointer[VARIANTARG],
    wFlags : UShort,
    vt : UShort) CLong;

external VariantChangeTypeEx(
    pvargDest : Pointer[VARIANTARG],
    pvarSrc : Pointer[VARIANTARG],
    lcid : CULong,
    wFlags : UShort,
    vt : UShort) CLong;

external VectorFromBstr(
    bstr : BSTR,
    ppsa : Pointer[Pointer[SAFEARRAY]]) CLong;

external BstrFromVector(
    psa : Pointer[SAFEARRAY],
    pbstr : Pointer[BSTR]) CLong;

external VarUI1FromI2(
    sIn : Short,
    pbOut : Pointer[CUChar]) CLong;

external VarUI1FromI4(
    lIn : CLong,
    pbOut : Pointer[CUChar]) CLong;

external VarUI1FromI8(
    i64In : Int64,
    pbOut : Pointer[CUChar]) CLong;

external VarUI1FromR4(
    fltIn : Float,
    pbOut : Pointer[CUChar]) CLong;

external VarUI1FromR8(
    dblIn : Double,
    pbOut : Pointer[CUChar]) CLong;

external VarUI1FromCy(
    cyIn : CY,
    pbOut : Pointer[CUChar]) CLong;

external VarUI1FromDate(
    dateIn : Double,
    pbOut : Pointer[CUChar]) CLong;

external VarUI1FromStr(
    strIn : Pointer[UShort],
    lcid : CULong,
    dwFlags : CULong,
    pbOut : Pointer[CUChar]) CLong;

external VarUI1FromDisp(
    pdispIn : Pointer[IDispatch],
    lcid : CULong,
    pbOut : Pointer[CUChar]) CLong;

external VarUI1FromBool(
    boolIn : Short,
    pbOut : Pointer[CUChar]) CLong;

external VarUI1FromI1(
    cIn : CChar,
    pbOut : Pointer[CUChar]) CLong;

external VarUI1FromUI2(
    uiIn : UShort,
    pbOut : Pointer[CUChar]) CLong;

external VarUI1FromUI4(
    ulIn : CULong,
    pbOut : Pointer[CUChar]) CLong;

external VarUI1FromUI8(
    ui64In : UInt64,
    pbOut : Pointer[CUChar]) CLong;

external VarUI1FromDec(
    pdecIn : Pointer[DECIMAL],
    pbOut : Pointer[CUChar]) CLong;

external VarI2FromUI1(
    bIn : CUChar,
    psOut : Pointer[Short]) CLong;

external VarI2FromI4(
    lIn : CLong,
    psOut : Pointer[Short]) CLong;

external VarI2FromI8(
    i64In : Int64,
    psOut : Pointer[Short]) CLong;

external VarI2FromR4(
    fltIn : Float,
    psOut : Pointer[Short]) CLong;

external VarI2FromR8(
    dblIn : Double,
    psOut : Pointer[Short]) CLong;

external VarI2FromCy(
    cyIn : CY,
    psOut : Pointer[Short]) CLong;

external VarI2FromDate(
    dateIn : Double,
    psOut : Pointer[Short]) CLong;

external VarI2FromStr(
    strIn : Pointer[UShort],
    lcid : CULong,
    dwFlags : CULong,
    psOut : Pointer[Short]) CLong;

external VarI2FromDisp(
    pdispIn : Pointer[IDispatch],
    lcid : CULong,
    psOut : Pointer[Short]) CLong;

external VarI2FromBool(
    boolIn : Short,
    psOut : Pointer[Short]) CLong;

external VarI2FromI1(
    cIn : CChar,
    psOut : Pointer[Short]) CLong;

external VarI2FromUI2(
    uiIn : UShort,
    psOut : Pointer[Short]) CLong;

external VarI2FromUI4(
    ulIn : CULong,
    psOut : Pointer[Short]) CLong;

external VarI2FromUI8(
    ui64In : UInt64,
    psOut : Pointer[Short]) CLong;

external VarI2FromDec(
    pdecIn : Pointer[DECIMAL],
    psOut : Pointer[Short]) CLong;

external VarI4FromUI1(
    bIn : CUChar,
    plOut : Pointer[CLong]) CLong;

external VarI4FromI2(
    sIn : Short,
    plOut : Pointer[CLong]) CLong;

external VarI4FromI8(
    i64In : Int64,
    plOut : Pointer[CLong]) CLong;

external VarI4FromR4(
    fltIn : Float,
    plOut : Pointer[CLong]) CLong;

external VarI4FromR8(
    dblIn : Double,
    plOut : Pointer[CLong]) CLong;

external VarI4FromCy(
    cyIn : CY,
    plOut : Pointer[CLong]) CLong;

external VarI4FromDate(
    dateIn : Double,
    plOut : Pointer[CLong]) CLong;

external VarI4FromStr(
    strIn : Pointer[UShort],
    lcid : CULong,
    dwFlags : CULong,
    plOut : Pointer[CLong]) CLong;

external VarI4FromDisp(
    pdispIn : Pointer[IDispatch],
    lcid : CULong,
    plOut : Pointer[CLong]) CLong;

external VarI4FromBool(
    boolIn : Short,
    plOut : Pointer[CLong]) CLong;

external VarI4FromI1(
    cIn : CChar,
    plOut : Pointer[CLong]) CLong;

external VarI4FromUI2(
    uiIn : UShort,
    plOut : Pointer[CLong]) CLong;

external VarI4FromUI4(
    ulIn : CULong,
    plOut : Pointer[CLong]) CLong;

external VarI4FromUI8(
    ui64In : UInt64,
    plOut : Pointer[CLong]) CLong;

external VarI4FromDec(
    pdecIn : Pointer[DECIMAL],
    plOut : Pointer[CLong]) CLong;

external VarI4FromInt(
    intIn : Int,
    plOut : Pointer[CLong]) CLong;

external VarI8FromUI1(
    bIn : CUChar,
    pi64Out : Pointer[Int64]) CLong;

external VarI8FromI2(
    sIn : Short,
    pi64Out : Pointer[Int64]) CLong;

external VarI8FromI4(
    lIn : CLong,
    pi64Out : Pointer[Int64]) CLong;

external VarI8FromR4(
    fltIn : Float,
    pi64Out : Pointer[Int64]) CLong;

external VarI8FromR8(
    dblIn : Double,
    pi64Out : Pointer[Int64]) CLong;

external VarI8FromCy(
    cyIn : CY,
    pi64Out : Pointer[Int64]) CLong;

external VarI8FromDate(
    dateIn : Double,
    pi64Out : Pointer[Int64]) CLong;

external VarI8FromStr(
    strIn : Pointer[UShort],
    lcid : CULong,
    dwFlags : CULong,
    pi64Out : Pointer[Int64]) CLong;

external VarI8FromDisp(
    pdispIn : Pointer[IDispatch],
    lcid : CULong,
    pi64Out : Pointer[Int64]) CLong;

external VarI8FromBool(
    boolIn : Short,
    pi64Out : Pointer[Int64]) CLong;

external VarI8FromI1(
    cIn : CChar,
    pi64Out : Pointer[Int64]) CLong;

external VarI8FromUI2(
    uiIn : UShort,
    pi64Out : Pointer[Int64]) CLong;

external VarI8FromUI4(
    ulIn : CULong,
    pi64Out : Pointer[Int64]) CLong;

external VarI8FromUI8(
    ui64In : UInt64,
    pi64Out : Pointer[Int64]) CLong;

external VarI8FromDec(
    pdecIn : Pointer[DECIMAL],
    pi64Out : Pointer[Int64]) CLong;

external VarI8FromInt(
    intIn : Int,
    pi64Out : Pointer[Int64]) CLong;

external VarR4FromUI1(
    bIn : CUChar,
    pfltOut : Pointer[Float]) CLong;

external VarR4FromI2(
    sIn : Short,
    pfltOut : Pointer[Float]) CLong;

external VarR4FromI4(
    lIn : CLong,
    pfltOut : Pointer[Float]) CLong;

external VarR4FromI8(
    i64In : Int64,
    pfltOut : Pointer[Float]) CLong;

external VarR4FromR8(
    dblIn : Double,
    pfltOut : Pointer[Float]) CLong;

external VarR4FromCy(
    cyIn : CY,
    pfltOut : Pointer[Float]) CLong;

external VarR4FromDate(
    dateIn : Double,
    pfltOut : Pointer[Float]) CLong;

external VarR4FromStr(
    strIn : Pointer[UShort],
    lcid : CULong,
    dwFlags : CULong,
    pfltOut : Pointer[Float]) CLong;

external VarR4FromDisp(
    pdispIn : Pointer[IDispatch],
    lcid : CULong,
    pfltOut : Pointer[Float]) CLong;

external VarR4FromBool(
    boolIn : Short,
    pfltOut : Pointer[Float]) CLong;

external VarR4FromI1(
    cIn : CChar,
    pfltOut : Pointer[Float]) CLong;

external VarR4FromUI2(
    uiIn : UShort,
    pfltOut : Pointer[Float]) CLong;

external VarR4FromUI4(
    ulIn : CULong,
    pfltOut : Pointer[Float]) CLong;

external VarR4FromUI8(
    ui64In : UInt64,
    pfltOut : Pointer[Float]) CLong;

external VarR4FromDec(
    pdecIn : Pointer[DECIMAL],
    pfltOut : Pointer[Float]) CLong;

external VarR8FromUI1(
    bIn : CUChar,
    pdblOut : Pointer[Double]) CLong;

external VarR8FromI2(
    sIn : Short,
    pdblOut : Pointer[Double]) CLong;

external VarR8FromI4(
    lIn : CLong,
    pdblOut : Pointer[Double]) CLong;

external VarR8FromI8(
    i64In : Int64,
    pdblOut : Pointer[Double]) CLong;

external VarR8FromR4(
    fltIn : Float,
    pdblOut : Pointer[Double]) CLong;

external VarR8FromCy(
    cyIn : CY,
    pdblOut : Pointer[Double]) CLong;

external VarR8FromDate(
    dateIn : Double,
    pdblOut : Pointer[Double]) CLong;

external VarR8FromStr(
    strIn : Pointer[UShort],
    lcid : CULong,
    dwFlags : CULong,
    pdblOut : Pointer[Double]) CLong;

external VarR8FromDisp(
    pdispIn : Pointer[IDispatch],
    lcid : CULong,
    pdblOut : Pointer[Double]) CLong;

external VarR8FromBool(
    boolIn : Short,
    pdblOut : Pointer[Double]) CLong;

external VarR8FromI1(
    cIn : CChar,
    pdblOut : Pointer[Double]) CLong;

external VarR8FromUI2(
    uiIn : UShort,
    pdblOut : Pointer[Double]) CLong;

external VarR8FromUI4(
    ulIn : CULong,
    pdblOut : Pointer[Double]) CLong;

external VarR8FromUI8(
    ui64In : UInt64,
    pdblOut : Pointer[Double]) CLong;

external VarR8FromDec(
    pdecIn : Pointer[DECIMAL],
    pdblOut : Pointer[Double]) CLong;

external VarDateFromUI1(
    bIn : CUChar,
    pdateOut : Pointer[Double]) CLong;

external VarDateFromI2(
    sIn : Short,
    pdateOut : Pointer[Double]) CLong;

external VarDateFromI4(
    lIn : CLong,
    pdateOut : Pointer[Double]) CLong;

external VarDateFromI8(
    i64In : Int64,
    pdateOut : Pointer[Double]) CLong;

external VarDateFromR4(
    fltIn : Float,
    pdateOut : Pointer[Double]) CLong;

external VarDateFromR8(
    dblIn : Double,
    pdateOut : Pointer[Double]) CLong;

external VarDateFromCy(
    cyIn : CY,
    pdateOut : Pointer[Double]) CLong;

external VarDateFromStr(
    strIn : Pointer[UShort],
    lcid : CULong,
    dwFlags : CULong,
    pdateOut : Pointer[Double]) CLong;

external VarDateFromDisp(
    pdispIn : Pointer[IDispatch],
    lcid : CULong,
    pdateOut : Pointer[Double]) CLong;

external VarDateFromBool(
    boolIn : Short,
    pdateOut : Pointer[Double]) CLong;

external VarDateFromI1(
    cIn : CChar,
    pdateOut : Pointer[Double]) CLong;

external VarDateFromUI2(
    uiIn : UShort,
    pdateOut : Pointer[Double]) CLong;

external VarDateFromUI4(
    ulIn : CULong,
    pdateOut : Pointer[Double]) CLong;

external VarDateFromUI8(
    ui64In : UInt64,
    pdateOut : Pointer[Double]) CLong;

external VarDateFromDec(
    pdecIn : Pointer[DECIMAL],
    pdateOut : Pointer[Double]) CLong;

external VarCyFromUI1(
    bIn : CUChar,
    pcyOut : Pointer[CY]) CLong;

external VarCyFromI2(
    sIn : Short,
    pcyOut : Pointer[CY]) CLong;

external VarCyFromI4(
    lIn : CLong,
    pcyOut : Pointer[CY]) CLong;

external VarCyFromI8(
    i64In : Int64,
    pcyOut : Pointer[CY]) CLong;

external VarCyFromR4(
    fltIn : Float,
    pcyOut : Pointer[CY]) CLong;

external VarCyFromR8(
    dblIn : Double,
    pcyOut : Pointer[CY]) CLong;

external VarCyFromDate(
    dateIn : Double,
    pcyOut : Pointer[CY]) CLong;

external VarCyFromStr(
    strIn : Pointer[UShort],
    lcid : CULong,
    dwFlags : CULong,
    pcyOut : Pointer[CY]) CLong;

external VarCyFromDisp(
    pdispIn : Pointer[IDispatch],
    lcid : CULong,
    pcyOut : Pointer[CY]) CLong;

external VarCyFromBool(
    boolIn : Short,
    pcyOut : Pointer[CY]) CLong;

external VarCyFromI1(
    cIn : CChar,
    pcyOut : Pointer[CY]) CLong;

external VarCyFromUI2(
    uiIn : UShort,
    pcyOut : Pointer[CY]) CLong;

external VarCyFromUI4(
    ulIn : CULong,
    pcyOut : Pointer[CY]) CLong;

external VarCyFromUI8(
    ui64In : UInt64,
    pcyOut : Pointer[CY]) CLong;

external VarCyFromDec(
    pdecIn : Pointer[DECIMAL],
    pcyOut : Pointer[CY]) CLong;

external VarBstrFromUI1(
    bVal : CUChar,
    lcid : CULong,
    dwFlags : CULong,
    pbstrOut : Pointer[BSTR]) CLong;

external VarBstrFromI2(
    iVal : Short,
    lcid : CULong,
    dwFlags : CULong,
    pbstrOut : Pointer[BSTR]) CLong;

external VarBstrFromI4(
    lIn : CLong,
    lcid : CULong,
    dwFlags : CULong,
    pbstrOut : Pointer[BSTR]) CLong;

external VarBstrFromI8(
    i64In : Int64,
    lcid : CULong,
    dwFlags : CULong,
    pbstrOut : Pointer[BSTR]) CLong;

external VarBstrFromR4(
    fltIn : Float,
    lcid : CULong,
    dwFlags : CULong,
    pbstrOut : Pointer[BSTR]) CLong;

external VarBstrFromR8(
    dblIn : Double,
    lcid : CULong,
    dwFlags : CULong,
    pbstrOut : Pointer[BSTR]) CLong;

external VarBstrFromCy(
    cyIn : CY,
    lcid : CULong,
    dwFlags : CULong,
    pbstrOut : Pointer[BSTR]) CLong;

external VarBstrFromDate(
    dateIn : Double,
    lcid : CULong,
    dwFlags : CULong,
    pbstrOut : Pointer[BSTR]) CLong;

external VarBstrFromDisp(
    pdispIn : Pointer[IDispatch],
    lcid : CULong,
    dwFlags : CULong,
    pbstrOut : Pointer[BSTR]) CLong;

external VarBstrFromBool(
    boolIn : Short,
    lcid : CULong,
    dwFlags : CULong,
    pbstrOut : Pointer[BSTR]) CLong;

external VarBstrFromI1(
    cIn : CChar,
    lcid : CULong,
    dwFlags : CULong,
    pbstrOut : Pointer[BSTR]) CLong;

external VarBstrFromUI2(
    uiIn : UShort,
    lcid : CULong,
    dwFlags : CULong,
    pbstrOut : Pointer[BSTR]) CLong;

external VarBstrFromUI4(
    ulIn : CULong,
    lcid : CULong,
    dwFlags : CULong,
    pbstrOut : Pointer[BSTR]) CLong;

external VarBstrFromUI8(
    ui64In : UInt64,
    lcid : CULong,
    dwFlags : CULong,
    pbstrOut : Pointer[BSTR]) CLong;

external VarBstrFromDec(
    pdecIn : Pointer[DECIMAL],
    lcid : CULong,
    dwFlags : CULong,
    pbstrOut : Pointer[BSTR]) CLong;

external VarBoolFromUI1(
    bIn : CUChar,
    pboolOut : Pointer[Short]) CLong;

external VarBoolFromI2(
    sIn : Short,
    pboolOut : Pointer[Short]) CLong;

external VarBoolFromI4(
    lIn : CLong,
    pboolOut : Pointer[Short]) CLong;

external VarBoolFromI8(
    i64In : Int64,
    pboolOut : Pointer[Short]) CLong;

external VarBoolFromR4(
    fltIn : Float,
    pboolOut : Pointer[Short]) CLong;

external VarBoolFromR8(
    dblIn : Double,
    pboolOut : Pointer[Short]) CLong;

external VarBoolFromDate(
    dateIn : Double,
    pboolOut : Pointer[Short]) CLong;

external VarBoolFromCy(
    cyIn : CY,
    pboolOut : Pointer[Short]) CLong;

external VarBoolFromStr(
    strIn : Pointer[UShort],
    lcid : CULong,
    dwFlags : CULong,
    pboolOut : Pointer[Short]) CLong;

external VarBoolFromDisp(
    pdispIn : Pointer[IDispatch],
    lcid : CULong,
    pboolOut : Pointer[Short]) CLong;

external VarBoolFromI1(
    cIn : CChar,
    pboolOut : Pointer[Short]) CLong;

external VarBoolFromUI2(
    uiIn : UShort,
    pboolOut : Pointer[Short]) CLong;

external VarBoolFromUI4(
    ulIn : CULong,
    pboolOut : Pointer[Short]) CLong;

external VarBoolFromUI8(
    i64In : UInt64,
    pboolOut : Pointer[Short]) CLong;

external VarBoolFromDec(
    pdecIn : Pointer[DECIMAL],
    pboolOut : Pointer[Short]) CLong;

external VarI1FromUI1(
    bIn : CUChar,
    pcOut : Pointer[CChar]) CLong;

external VarI1FromI2(
    uiIn : Short,
    pcOut : Pointer[CChar]) CLong;

external VarI1FromI4(
    lIn : CLong,
    pcOut : Pointer[CChar]) CLong;

external VarI1FromI8(
    i64In : Int64,
    pcOut : Pointer[CChar]) CLong;

external VarI1FromR4(
    fltIn : Float,
    pcOut : Pointer[CChar]) CLong;

external VarI1FromR8(
    dblIn : Double,
    pcOut : Pointer[CChar]) CLong;

external VarI1FromDate(
    dateIn : Double,
    pcOut : Pointer[CChar]) CLong;

external VarI1FromCy(
    cyIn : CY,
    pcOut : Pointer[CChar]) CLong;

external VarI1FromStr(
    strIn : Pointer[UShort],
    lcid : CULong,
    dwFlags : CULong,
    pcOut : Pointer[CChar]) CLong;

external VarI1FromDisp(
    pdispIn : Pointer[IDispatch],
    lcid : CULong,
    pcOut : Pointer[CChar]) CLong;

external VarI1FromBool(
    boolIn : Short,
    pcOut : Pointer[CChar]) CLong;

external VarI1FromUI2(
    uiIn : UShort,
    pcOut : Pointer[CChar]) CLong;

external VarI1FromUI4(
    ulIn : CULong,
    pcOut : Pointer[CChar]) CLong;

external VarI1FromUI8(
    i64In : UInt64,
    pcOut : Pointer[CChar]) CLong;

external VarI1FromDec(
    pdecIn : Pointer[DECIMAL],
    pcOut : Pointer[CChar]) CLong;

external VarUI2FromUI1(
    bIn : CUChar,
    puiOut : Pointer[UShort]) CLong;

external VarUI2FromI2(
    uiIn : Short,
    puiOut : Pointer[UShort]) CLong;

external VarUI2FromI4(
    lIn : CLong,
    puiOut : Pointer[UShort]) CLong;

external VarUI2FromI8(
    i64In : Int64,
    puiOut : Pointer[UShort]) CLong;

external VarUI2FromR4(
    fltIn : Float,
    puiOut : Pointer[UShort]) CLong;

external VarUI2FromR8(
    dblIn : Double,
    puiOut : Pointer[UShort]) CLong;

external VarUI2FromDate(
    dateIn : Double,
    puiOut : Pointer[UShort]) CLong;

external VarUI2FromCy(
    cyIn : CY,
    puiOut : Pointer[UShort]) CLong;

external VarUI2FromStr(
    strIn : Pointer[UShort],
    lcid : CULong,
    dwFlags : CULong,
    puiOut : Pointer[UShort]) CLong;

external VarUI2FromDisp(
    pdispIn : Pointer[IDispatch],
    lcid : CULong,
    puiOut : Pointer[UShort]) CLong;

external VarUI2FromBool(
    boolIn : Short,
    puiOut : Pointer[UShort]) CLong;

external VarUI2FromI1(
    cIn : CChar,
    puiOut : Pointer[UShort]) CLong;

external VarUI2FromUI4(
    ulIn : CULong,
    puiOut : Pointer[UShort]) CLong;

external VarUI2FromUI8(
    i64In : UInt64,
    puiOut : Pointer[UShort]) CLong;

external VarUI2FromDec(
    pdecIn : Pointer[DECIMAL],
    puiOut : Pointer[UShort]) CLong;

external VarUI4FromUI1(
    bIn : CUChar,
    pulOut : Pointer[CULong]) CLong;

external VarUI4FromI2(
    uiIn : Short,
    pulOut : Pointer[CULong]) CLong;

external VarUI4FromI4(
    lIn : CLong,
    pulOut : Pointer[CULong]) CLong;

external VarUI4FromI8(
    i64In : Int64,
    plOut : Pointer[CULong]) CLong;

external VarUI4FromR4(
    fltIn : Float,
    pulOut : Pointer[CULong]) CLong;

external VarUI4FromR8(
    dblIn : Double,
    pulOut : Pointer[CULong]) CLong;

external VarUI4FromDate(
    dateIn : Double,
    pulOut : Pointer[CULong]) CLong;

external VarUI4FromCy(
    cyIn : CY,
    pulOut : Pointer[CULong]) CLong;

external VarUI4FromStr(
    strIn : Pointer[UShort],
    lcid : CULong,
    dwFlags : CULong,
    pulOut : Pointer[CULong]) CLong;

external VarUI4FromDisp(
    pdispIn : Pointer[IDispatch],
    lcid : CULong,
    pulOut : Pointer[CULong]) CLong;

external VarUI4FromBool(
    boolIn : Short,
    pulOut : Pointer[CULong]) CLong;

external VarUI4FromI1(
    cIn : CChar,
    pulOut : Pointer[CULong]) CLong;

external VarUI4FromUI2(
    uiIn : UShort,
    pulOut : Pointer[CULong]) CLong;

external VarUI4FromUI8(
    ui64In : UInt64,
    plOut : Pointer[CULong]) CLong;

external VarUI4FromDec(
    pdecIn : Pointer[DECIMAL],
    pulOut : Pointer[CULong]) CLong;

external VarUI8FromUI1(
    bIn : CUChar,
    pi64Out : Pointer[UInt64]) CLong;

external VarUI8FromI2(
    sIn : Short,
    pi64Out : Pointer[UInt64]) CLong;

external VarUI8FromI4(
    lIn : CLong,
    pi64Out : Pointer[UInt64]) CLong;

external VarUI8FromI8(
    ui64In : Int64,
    pi64Out : Pointer[UInt64]) CLong;

external VarUI8FromR4(
    fltIn : Float,
    pi64Out : Pointer[UInt64]) CLong;

external VarUI8FromR8(
    dblIn : Double,
    pi64Out : Pointer[UInt64]) CLong;

external VarUI8FromCy(
    cyIn : CY,
    pi64Out : Pointer[UInt64]) CLong;

external VarUI8FromDate(
    dateIn : Double,
    pi64Out : Pointer[UInt64]) CLong;

external VarUI8FromStr(
    strIn : Pointer[UShort],
    lcid : CULong,
    dwFlags : CULong,
    pi64Out : Pointer[UInt64]) CLong;

external VarUI8FromDisp(
    pdispIn : Pointer[IDispatch],
    lcid : CULong,
    pi64Out : Pointer[UInt64]) CLong;

external VarUI8FromBool(
    boolIn : Short,
    pi64Out : Pointer[UInt64]) CLong;

external VarUI8FromI1(
    cIn : CChar,
    pi64Out : Pointer[UInt64]) CLong;

external VarUI8FromUI2(
    uiIn : UShort,
    pi64Out : Pointer[UInt64]) CLong;

external VarUI8FromUI4(
    ulIn : CULong,
    pi64Out : Pointer[UInt64]) CLong;

external VarUI8FromDec(
    pdecIn : Pointer[DECIMAL],
    pi64Out : Pointer[UInt64]) CLong;

external VarUI8FromInt(
    intIn : Int,
    pi64Out : Pointer[UInt64]) CLong;

external VarDecFromUI1(
    bIn : CUChar,
    pdecOut : Pointer[DECIMAL]) CLong;

external VarDecFromI2(
    uiIn : Short,
    pdecOut : Pointer[DECIMAL]) CLong;

external VarDecFromI4(
    lIn : CLong,
    pdecOut : Pointer[DECIMAL]) CLong;

external VarDecFromI8(
    i64In : Int64,
    pdecOut : Pointer[DECIMAL]) CLong;

external VarDecFromR4(
    fltIn : Float,
    pdecOut : Pointer[DECIMAL]) CLong;

external VarDecFromR8(
    dblIn : Double,
    pdecOut : Pointer[DECIMAL]) CLong;

external VarDecFromDate(
    dateIn : Double,
    pdecOut : Pointer[DECIMAL]) CLong;

external VarDecFromCy(
    cyIn : CY,
    pdecOut : Pointer[DECIMAL]) CLong;

external VarDecFromStr(
    strIn : Pointer[UShort],
    lcid : CULong,
    dwFlags : CULong,
    pdecOut : Pointer[DECIMAL]) CLong;

external VarDecFromDisp(
    pdispIn : Pointer[IDispatch],
    lcid : CULong,
    pdecOut : Pointer[DECIMAL]) CLong;

external VarDecFromBool(
    boolIn : Short,
    pdecOut : Pointer[DECIMAL]) CLong;

external VarDecFromI1(
    cIn : CChar,
    pdecOut : Pointer[DECIMAL]) CLong;

external VarDecFromUI2(
    uiIn : UShort,
    pdecOut : Pointer[DECIMAL]) CLong;

external VarDecFromUI4(
    ulIn : CULong,
    pdecOut : Pointer[DECIMAL]) CLong;

external VarDecFromUI8(
    ui64In : UInt64,
    pdecOut : Pointer[DECIMAL]) CLong;

record UnnamedStruct66 (
    cDig : Int,
    dwInFlags : CULong,
    dwOutFlags : CULong,
    cchUsed : Int,
    nBaseShift : Int,
    nPwr10 : Int,
);

alias NUMPARSE = UnnamedStruct66;

external VarParseNumFromStr(
    strIn : Pointer[UShort],
    lcid : CULong,
    dwFlags : CULong,
    pnumprs : Pointer[NUMPARSE],
    rgbDig : Pointer[CUChar]) CLong;

external VarNumFromParseNum(
    pnumprs : Pointer[NUMPARSE],
    rgbDig : Pointer[CUChar],
    dwVtBits : CULong,
    pvar : Pointer[VARIANT]) CLong;

external VarAdd(
    pvarLeft : LPVARIANT,
    pvarRight : LPVARIANT,
    pvarResult : LPVARIANT) CLong;

external VarAnd(
    pvarLeft : LPVARIANT,
    pvarRight : LPVARIANT,
    pvarResult : LPVARIANT) CLong;

external VarCat(
    pvarLeft : LPVARIANT,
    pvarRight : LPVARIANT,
    pvarResult : LPVARIANT) CLong;

external VarDiv(
    pvarLeft : LPVARIANT,
    pvarRight : LPVARIANT,
    pvarResult : LPVARIANT) CLong;

external VarEqv(
    pvarLeft : LPVARIANT,
    pvarRight : LPVARIANT,
    pvarResult : LPVARIANT) CLong;

external VarIdiv(
    pvarLeft : LPVARIANT,
    pvarRight : LPVARIANT,
    pvarResult : LPVARIANT) CLong;

external VarImp(
    pvarLeft : LPVARIANT,
    pvarRight : LPVARIANT,
    pvarResult : LPVARIANT) CLong;

external VarMod(
    pvarLeft : LPVARIANT,
    pvarRight : LPVARIANT,
    pvarResult : LPVARIANT) CLong;

external VarMul(
    pvarLeft : LPVARIANT,
    pvarRight : LPVARIANT,
    pvarResult : LPVARIANT) CLong;

external VarOr(
    pvarLeft : LPVARIANT,
    pvarRight : LPVARIANT,
    pvarResult : LPVARIANT) CLong;

external VarPow(
    pvarLeft : LPVARIANT,
    pvarRight : LPVARIANT,
    pvarResult : LPVARIANT) CLong;

external VarSub(
    pvarLeft : LPVARIANT,
    pvarRight : LPVARIANT,
    pvarResult : LPVARIANT) CLong;

external VarXor(
    pvarLeft : LPVARIANT,
    pvarRight : LPVARIANT,
    pvarResult : LPVARIANT) CLong;

external VarAbs(
    pvarIn : LPVARIANT,
    pvarResult : LPVARIANT) CLong;

external VarFix(
    pvarIn : LPVARIANT,
    pvarResult : LPVARIANT) CLong;

external VarInt(
    pvarIn : LPVARIANT,
    pvarResult : LPVARIANT) CLong;

external VarNeg(
    pvarIn : LPVARIANT,
    pvarResult : LPVARIANT) CLong;

external VarNot(
    pvarIn : LPVARIANT,
    pvarResult : LPVARIANT) CLong;

external VarRound(
    pvarIn : LPVARIANT,
    cDecimals : Int,
    pvarResult : LPVARIANT) CLong;

external VarCmp(
    pvarLeft : LPVARIANT,
    pvarRight : LPVARIANT,
    lcid : CULong,
    dwFlags : CULong) CLong;

external VarDecAdd(
    pdecLeft : LPDECIMAL,
    pdecRight : LPDECIMAL,
    pdecResult : LPDECIMAL) CLong;

external VarDecDiv(
    pdecLeft : LPDECIMAL,
    pdecRight : LPDECIMAL,
    pdecResult : LPDECIMAL) CLong;

external VarDecMul(
    pdecLeft : LPDECIMAL,
    pdecRight : LPDECIMAL,
    pdecResult : LPDECIMAL) CLong;

external VarDecSub(
    pdecLeft : LPDECIMAL,
    pdecRight : LPDECIMAL,
    pdecResult : LPDECIMAL) CLong;

external VarDecAbs(
    pdecIn : LPDECIMAL,
    pdecResult : LPDECIMAL) CLong;

external VarDecFix(
    pdecIn : LPDECIMAL,
    pdecResult : LPDECIMAL) CLong;

external VarDecInt(
    pdecIn : LPDECIMAL,
    pdecResult : LPDECIMAL) CLong;

external VarDecNeg(
    pdecIn : LPDECIMAL,
    pdecResult : LPDECIMAL) CLong;

external VarDecRound(
    pdecIn : LPDECIMAL,
    cDecimals : Int,
    pdecResult : LPDECIMAL) CLong;

external VarDecCmp(
    pdecLeft : LPDECIMAL,
    pdecRight : LPDECIMAL) CLong;

external VarDecCmpR8(
    pdecLeft : LPDECIMAL,
    dblRight : Double) CLong;

external VarCyAdd(
    cyLeft : CY,
    cyRight : CY,
    pcyResult : LPCY) CLong;

external VarCyMul(
    cyLeft : CY,
    cyRight : CY,
    pcyResult : LPCY) CLong;

external VarCyMulI4(
    cyLeft : CY,
    lRight : CLong,
    pcyResult : LPCY) CLong;

external VarCyMulI8(
    cyLeft : CY,
    lRight : Int64,
    pcyResult : LPCY) CLong;

external VarCySub(
    cyLeft : CY,
    cyRight : CY,
    pcyResult : LPCY) CLong;

external VarCyAbs(
    cyIn : CY,
    pcyResult : LPCY) CLong;

external VarCyFix(
    cyIn : CY,
    pcyResult : LPCY) CLong;

external VarCyInt(
    cyIn : CY,
    pcyResult : LPCY) CLong;

external VarCyNeg(
    cyIn : CY,
    pcyResult : LPCY) CLong;

external VarCyRound(
    cyIn : CY,
    cDecimals : Int,
    pcyResult : LPCY) CLong;

external VarCyCmp(
    cyLeft : CY,
    cyRight : CY) CLong;

external VarCyCmpR8(
    cyLeft : CY,
    dblRight : Double) CLong;

external VarBstrCat(
    bstrLeft : BSTR,
    bstrRight : BSTR,
    pbstrResult : LPBSTR) CLong;

external VarBstrCmp(
    bstrLeft : BSTR,
    bstrRight : BSTR,
    lcid : CULong,
    dwFlags : CULong) CLong;

external VarR8Pow(
    dblLeft : Double,
    dblRight : Double,
    pdblResult : Pointer[Double]) CLong;

external VarR4CmpR8(
    fltLeft : Float,
    dblRight : Double) CLong;

external VarR8Round(
    dblIn : Double,
    cDecimals : Int,
    pdblResult : Pointer[Double]) CLong;

record UnnamedStruct67 (
    st : SYSTEMTIME,
    wDayOfYear : UShort,
);

alias UDATE = UnnamedStruct67;

external VarDateFromUdate(
    pudateIn : Pointer[UDATE],
    dwFlags : CULong,
    pdateOut : Pointer[Double]) CLong;

external VarDateFromUdateEx(
    pudateIn : Pointer[UDATE],
    lcid : CULong,
    dwFlags : CULong,
    pdateOut : Pointer[Double]) CLong;

external VarUdateFromDate(
    dateIn : Double,
    dwFlags : CULong,
    pudateOut : Pointer[UDATE]) CLong;

external GetAltMonthNames(
    lcid : CULong,
    prgp : Pointer[Pointer[LPOLESTR]]) CLong;

external VarFormat(
    pvarIn : LPVARIANT,
    pstrFormat : LPOLESTR,
    iFirstDay : Int,
    iFirstWeek : Int,
    dwFlags : CULong,
    pbstrOut : Pointer[BSTR]) CLong;

external VarFormatDateTime(
    pvarIn : LPVARIANT,
    iNamedFormat : Int,
    dwFlags : CULong,
    pbstrOut : Pointer[BSTR]) CLong;

external VarFormatNumber(
    pvarIn : LPVARIANT,
    iNumDig : Int,
    iIncLead : Int,
    iUseParens : Int,
    iGroup : Int,
    dwFlags : CULong,
    pbstrOut : Pointer[BSTR]) CLong;

external VarFormatPercent(
    pvarIn : LPVARIANT,
    iNumDig : Int,
    iIncLead : Int,
    iUseParens : Int,
    iGroup : Int,
    dwFlags : CULong,
    pbstrOut : Pointer[BSTR]) CLong;

external VarFormatCurrency(
    pvarIn : LPVARIANT,
    iNumDig : Int,
    iIncLead : Int,
    iUseParens : Int,
    iGroup : Int,
    dwFlags : CULong,
    pbstrOut : Pointer[BSTR]) CLong;

external VarWeekdayName(
    iWeekday : Int,
    fAbbrev : Int,
    iFirstDay : Int,
    dwFlags : CULong,
    pbstrOut : Pointer[BSTR]) CLong;

external VarMonthName(
    iMonth : Int,
    fAbbrev : Int,
    dwFlags : CULong,
    pbstrOut : Pointer[BSTR]) CLong;

external VarFormatFromTokens(
    pvarIn : LPVARIANT,
    pstrFormat : LPOLESTR,
    pbTokCur : LPBYTE,
    dwFlags : CULong,
    pbstrOut : Pointer[BSTR],
    lcid : CULong) CLong;

external VarTokenizeFormatString(
    pstrFormat : LPOLESTR,
    rgbTok : LPBYTE,
    cbTok : Int,
    iFirstDay : Int,
    iFirstWeek : Int,
    lcid : CULong,
    pcbActual : Pointer[Int]) CLong;

external LHashValOfNameSysA(
    syskind : SYSKIND,
    lcid : CULong,
    szName : LPCSTR) CULong;

external LHashValOfNameSys(
    syskind : SYSKIND,
    lcid : CULong,
    szName : Pointer[UShort]) CULong;

external LoadTypeLib(
    szFile : Pointer[UShort],
    pptlib : Pointer[Pointer[ITypeLib]]) CLong;

alias REGKIND_DEFAULT = 0;
alias REGKIND_REGISTER = 1;
alias REGKIND_NONE = 2;

alias REGKIND = Int;

external LoadTypeLibEx(
    szFile : LPCOLESTR,
    regkind : REGKIND,
    pptlib : Pointer[Pointer[ITypeLib]]) CLong;

external LoadRegTypeLib(
    rguid : Pointer[GUID],
    wVerMajor : UShort,
    wVerMinor : UShort,
    lcid : CULong,
    pptlib : Pointer[Pointer[ITypeLib]]) CLong;

external QueryPathOfRegTypeLib(
    guid : Pointer[GUID],
    wMaj : UShort,
    wMin : UShort,
    lcid : CULong,
    lpbstrPathName : LPBSTR) CLong;

external RegisterTypeLib(
    ptlib : Pointer[ITypeLib],
    szFullPath : Pointer[UShort],
    szHelpDir : Pointer[UShort]) CLong;

external UnRegisterTypeLib(
    libID : Pointer[GUID],
    wVerMajor : UShort,
    wVerMinor : UShort,
    lcid : CULong,
    syskind : SYSKIND) CLong;

external CreateTypeLib(
    syskind : SYSKIND,
    szFile : Pointer[UShort],
    ppctlib : Pointer[Pointer[ICreateTypeLib]]) CLong;

external CreateTypeLib2(
    syskind : SYSKIND,
    szFile : LPCOLESTR,
    ppctlib : Pointer[Pointer[ICreateTypeLib2]]) CLong;

record Struct_tagPARAMDATA (
    szName : Pointer[UShort],
    vt : UShort,
);

alias PARAMDATA = Struct_tagPARAMDATA;

alias LPPARAMDATA = Pointer[Struct_tagPARAMDATA];

record Struct_tagMETHODDATA (
    szName : Pointer[UShort],
    ppdata : Pointer[PARAMDATA],
    dispid : CLong,
    iMeth : UInt,
    cc : CALLCONV,
    cArgs : UInt,
    wFlags : UShort,
    vtReturn : UShort,
);

alias METHODDATA = Struct_tagMETHODDATA;

alias LPMETHODDATA = Pointer[Struct_tagMETHODDATA];

record Struct_tagINTERFACEDATA (
    pmethdata : Pointer[METHODDATA],
    cMembers : UInt,
);

alias INTERFACEDATA = Struct_tagINTERFACEDATA;

alias LPINTERFACEDATA = Pointer[Struct_tagINTERFACEDATA];

external DispGetParam(
    pdispparams : Pointer[DISPPARAMS],
    position : UInt,
    vtTarg : UShort,
    pvarResult : Pointer[VARIANT],
    puArgErr : Pointer[UInt]) CLong;

external DispGetIDsOfNames(
    ptinfo : Pointer[ITypeInfo],
    rgszNames : Pointer[Pointer[UShort]],
    cNames : UInt,
    rgdispid : Pointer[CLong]) CLong;

external DispInvoke(
    _this : RawPointer,
    ptinfo : Pointer[ITypeInfo],
    dispidMember : CLong,
    wFlags : UShort,
    pparams : Pointer[DISPPARAMS],
    pvarResult : Pointer[VARIANT],
    pexcepinfo : Pointer[EXCEPINFO],
    puArgErr : Pointer[UInt]) CLong;

external CreateDispTypeInfo(
    pidata : Pointer[INTERFACEDATA],
    lcid : CULong,
    pptinfo : Pointer[Pointer[ITypeInfo]]) CLong;

external CreateStdDispatch(
    punkOuter : Pointer[IUnknown],
    pvThis : RawPointer,
    ptinfo : Pointer[ITypeInfo],
    ppunkStdDisp : Pointer[Pointer[IUnknown]]) CLong;

external DispCallFunc(
    pvInstance : RawPointer,
    oVft : UInt64,
    cc : CALLCONV,
    vtReturn : UShort,
    cActuals : UInt,
    prgvt : Pointer[UShort],
    prgpvarg : Pointer[Pointer[VARIANTARG]],
    pvargResult : Pointer[VARIANT]) CLong;

external RegisterActiveObject(
    punk : Pointer[IUnknown],
    rclsid : Pointer[IID],
    dwFlags : CULong,
    pdwRegister : Pointer[CULong]) CLong;

external RevokeActiveObject(
    dwRegister : CULong,
    pvReserved : RawPointer) CLong;

external GetActiveObject(
    rclsid : Pointer[IID],
    pvReserved : RawPointer,
    ppunk : Pointer[Pointer[IUnknown]]) CLong;

external SetErrorInfo(
    dwReserved : CULong,
    perrinfo : Pointer[IErrorInfo]) CLong;

external GetErrorInfo(
    dwReserved : CULong,
    pperrinfo : Pointer[Pointer[IErrorInfo]]) CLong;

external CreateErrorInfo(
    pperrinfo : Pointer[Pointer[ICreateErrorInfo]]) CLong;

external GetRecordInfoFromTypeInfo(
    pTypeInfo : Pointer[ITypeInfo],
    ppRecInfo : Pointer[Pointer[IRecordInfo]]) CLong;

external GetRecordInfoFromGuids(
    rGuidTypeLib : Pointer[GUID],
    uVerMajor : CULong,
    uVerMinor : CULong,
    lcid : CULong,
    rGuidTypeInfo : Pointer[GUID],
    ppRecInfo : Pointer[Pointer[IRecordInfo]]) CLong;

external OaBuildVersion() CULong;

external ClearCustData(
    pCustData : LPCUSTDATA);

external OleBuildVersion() CULong;

external ReadClassStg(
    pStg : LPSTORAGE,
    pclsid : Pointer[CLSID]) CLong;

external WriteClassStg(
    pStg : LPSTORAGE,
    rclsid : Pointer[IID]) CLong;

external ReadClassStm(
    pStm : LPSTREAM,
    pclsid : Pointer[CLSID]) CLong;

external WriteClassStm(
    pStm : LPSTREAM,
    rclsid : Pointer[IID]) CLong;

external WriteFmtUserTypeStg(
    pstg : LPSTORAGE,
    cf : UShort,
    lpszUserType : LPOLESTR) CLong;

external ReadFmtUserTypeStg(
    pstg : LPSTORAGE,
    pcf : Pointer[UShort],
    lplpszUserType : Pointer[LPOLESTR]) CLong;

external OleInitialize(
    pvReserved : LPVOID) CLong;

external OleUninitialize();

external OleQueryLinkFromData(
    pSrcDataObject : LPDATAOBJECT) CLong;

external OleQueryCreateFromData(
    pSrcDataObject : LPDATAOBJECT) CLong;

external OleCreate(
    rclsid : Pointer[IID],
    riid : Pointer[IID],
    renderopt : CULong,
    pFormatEtc : LPFORMATETC,
    pClientSite : LPOLECLIENTSITE,
    pStg : LPSTORAGE,
    ppvObj : Pointer[LPVOID]) CLong;

external OleCreateEx(
    rclsid : Pointer[IID],
    riid : Pointer[IID],
    dwFlags : CULong,
    renderopt : CULong,
    cFormats : CULong,
    rgAdvf : Pointer[CULong],
    rgFormatEtc : LPFORMATETC,
    lpAdviseSink : Pointer[IAdviseSink],
    rgdwConnection : Pointer[CULong],
    pClientSite : LPOLECLIENTSITE,
    pStg : LPSTORAGE,
    ppvObj : Pointer[LPVOID]) CLong;

external OleCreateFromData(
    pSrcDataObj : LPDATAOBJECT,
    riid : Pointer[IID],
    renderopt : CULong,
    pFormatEtc : LPFORMATETC,
    pClientSite : LPOLECLIENTSITE,
    pStg : LPSTORAGE,
    ppvObj : Pointer[LPVOID]) CLong;

external OleCreateFromDataEx(
    pSrcDataObj : LPDATAOBJECT,
    riid : Pointer[IID],
    dwFlags : CULong,
    renderopt : CULong,
    cFormats : CULong,
    rgAdvf : Pointer[CULong],
    rgFormatEtc : LPFORMATETC,
    lpAdviseSink : Pointer[IAdviseSink],
    rgdwConnection : Pointer[CULong],
    pClientSite : LPOLECLIENTSITE,
    pStg : LPSTORAGE,
    ppvObj : Pointer[LPVOID]) CLong;

external OleCreateLinkFromData(
    pSrcDataObj : LPDATAOBJECT,
    riid : Pointer[IID],
    renderopt : CULong,
    pFormatEtc : LPFORMATETC,
    pClientSite : LPOLECLIENTSITE,
    pStg : LPSTORAGE,
    ppvObj : Pointer[LPVOID]) CLong;

external OleCreateLinkFromDataEx(
    pSrcDataObj : LPDATAOBJECT,
    riid : Pointer[IID],
    dwFlags : CULong,
    renderopt : CULong,
    cFormats : CULong,
    rgAdvf : Pointer[CULong],
    rgFormatEtc : LPFORMATETC,
    lpAdviseSink : Pointer[IAdviseSink],
    rgdwConnection : Pointer[CULong],
    pClientSite : LPOLECLIENTSITE,
    pStg : LPSTORAGE,
    ppvObj : Pointer[LPVOID]) CLong;

external OleCreateStaticFromData(
    pSrcDataObj : LPDATAOBJECT,
    iid : Pointer[IID],
    renderopt : CULong,
    pFormatEtc : LPFORMATETC,
    pClientSite : LPOLECLIENTSITE,
    pStg : LPSTORAGE,
    ppvObj : Pointer[LPVOID]) CLong;

external OleCreateLink(
    pmkLinkSrc : LPMONIKER,
    riid : Pointer[IID],
    renderopt : CULong,
    lpFormatEtc : LPFORMATETC,
    pClientSite : LPOLECLIENTSITE,
    pStg : LPSTORAGE,
    ppvObj : Pointer[LPVOID]) CLong;

external OleCreateLinkEx(
    pmkLinkSrc : LPMONIKER,
    riid : Pointer[IID],
    dwFlags : CULong,
    renderopt : CULong,
    cFormats : CULong,
    rgAdvf : Pointer[CULong],
    rgFormatEtc : LPFORMATETC,
    lpAdviseSink : Pointer[IAdviseSink],
    rgdwConnection : Pointer[CULong],
    pClientSite : LPOLECLIENTSITE,
    pStg : LPSTORAGE,
    ppvObj : Pointer[LPVOID]) CLong;

external OleCreateLinkToFile(
    lpszFileName : LPCOLESTR,
    riid : Pointer[IID],
    renderopt : CULong,
    lpFormatEtc : LPFORMATETC,
    pClientSite : LPOLECLIENTSITE,
    pStg : LPSTORAGE,
    ppvObj : Pointer[LPVOID]) CLong;

external OleCreateLinkToFileEx(
    lpszFileName : LPCOLESTR,
    riid : Pointer[IID],
    dwFlags : CULong,
    renderopt : CULong,
    cFormats : CULong,
    rgAdvf : Pointer[CULong],
    rgFormatEtc : LPFORMATETC,
    lpAdviseSink : Pointer[IAdviseSink],
    rgdwConnection : Pointer[CULong],
    pClientSite : LPOLECLIENTSITE,
    pStg : LPSTORAGE,
    ppvObj : Pointer[LPVOID]) CLong;

external OleCreateFromFile(
    rclsid : Pointer[IID],
    lpszFileName : LPCOLESTR,
    riid : Pointer[IID],
    renderopt : CULong,
    lpFormatEtc : LPFORMATETC,
    pClientSite : LPOLECLIENTSITE,
    pStg : LPSTORAGE,
    ppvObj : Pointer[LPVOID]) CLong;

external OleCreateFromFileEx(
    rclsid : Pointer[IID],
    lpszFileName : LPCOLESTR,
    riid : Pointer[IID],
    dwFlags : CULong,
    renderopt : CULong,
    cFormats : CULong,
    rgAdvf : Pointer[CULong],
    rgFormatEtc : LPFORMATETC,
    lpAdviseSink : Pointer[IAdviseSink],
    rgdwConnection : Pointer[CULong],
    pClientSite : LPOLECLIENTSITE,
    pStg : LPSTORAGE,
    ppvObj : Pointer[LPVOID]) CLong;

external OleLoad(
    pStg : LPSTORAGE,
    riid : Pointer[IID],
    pClientSite : LPOLECLIENTSITE,
    ppvObj : Pointer[LPVOID]) CLong;

external OleSave(
    pPS : LPPERSISTSTORAGE,
    pStg : LPSTORAGE,
    fSameAsLoad : Int) CLong;

external OleLoadFromStream(
    pStm : LPSTREAM,
    iidInterface : Pointer[IID],
    ppvObj : Pointer[LPVOID]) CLong;

external OleSaveToStream(
    pPStm : LPPERSISTSTREAM,
    pStm : LPSTREAM) CLong;

external OleSetContainedObject(
    pUnknown : LPUNKNOWN,
    fContained : Int) CLong;

external OleNoteObjectVisible(
    pUnknown : LPUNKNOWN,
    fVisible : Int) CLong;

external RegisterDragDrop(
    hwnd : HWND,
    pDropTarget : LPDROPTARGET) CLong;

external RevokeDragDrop(
    hwnd : HWND) CLong;

external DoDragDrop(
    pDataObj : LPDATAOBJECT,
    pDropSource : LPDROPSOURCE,
    dwOKEffects : CULong,
    pdwEffect : LPDWORD) CLong;

external OleSetClipboard(
    pDataObj : LPDATAOBJECT) CLong;

external OleGetClipboard(
    ppDataObj : Pointer[LPDATAOBJECT]) CLong;

external OleFlushClipboard() CLong;

external OleIsCurrentClipboard(
    pDataObj : LPDATAOBJECT) CLong;

external OleCreateMenuDescriptor(
    hmenuCombined : HMENU,
    lpMenuWidths : LPOLEMENUGROUPWIDTHS) HOLEMENU;

external OleSetMenuDescriptor(
    holemenu : HOLEMENU,
    hwndFrame : HWND,
    hwndActiveObject : HWND,
    lpFrame : LPOLEINPLACEFRAME,
    lpActiveObj : LPOLEINPLACEACTIVEOBJECT) CLong;

external OleDestroyMenuDescriptor(
    holemenu : HOLEMENU) CLong;

external OleTranslateAccelerator(
    lpFrame : LPOLEINPLACEFRAME,
    lpFrameInfo : LPOLEINPLACEFRAMEINFO,
    lpmsg : LPMSG) CLong;

external OleDuplicateData(
    hSrc : HANDLE,
    cfFormat : UShort,
    uiFlags : UInt) HANDLE;

external OleDraw(
    pUnknown : LPUNKNOWN,
    dwAspect : CULong,
    hdcDraw : HDC,
    lprcBounds : LPCRECT) CLong;

external OleRun(
    pUnknown : LPUNKNOWN) CLong;

external OleIsRunning(
    pObject : LPOLEOBJECT) Int;

external OleLockRunning(
    pUnknown : LPUNKNOWN,
    fLock : Int,
    fLastUnlockCloses : Int) CLong;

external ReleaseStgMedium(
    argument0 : LPSTGMEDIUM);

external CreateOleAdviseHolder(
    ppOAHolder : Pointer[LPOLEADVISEHOLDER]) CLong;

external OleCreateDefaultHandler(
    clsid : Pointer[IID],
    pUnkOuter : LPUNKNOWN,
    riid : Pointer[IID],
    lplpObj : Pointer[LPVOID]) CLong;

external OleCreateEmbeddingHelper(
    clsid : Pointer[IID],
    pUnkOuter : LPUNKNOWN,
    flags : CULong,
    pCF : LPCLASSFACTORY,
    riid : Pointer[IID],
    lplpObj : Pointer[LPVOID]) CLong;

external IsAccelerator(
    hAccel : HACCEL,
    cAccelEntries : Int,
    lpMsg : LPMSG,
    lpwCmd : Pointer[UShort]) Int;

external OleGetIconOfFile(
    lpszPath : LPOLESTR,
    fUseFileAsLabel : Int) HGLOBAL;

external OleGetIconOfClass(
    rclsid : Pointer[IID],
    lpszLabel : LPOLESTR,
    fUseTypeAsLabel : Int) HGLOBAL;

external OleMetafilePictFromIconAndLabel(
    hIcon : HICON,
    lpszLabel : LPOLESTR,
    lpszSourceFile : LPOLESTR,
    iIconIndex : UInt) HGLOBAL;

external OleRegGetUserType(
    clsid : Pointer[IID],
    dwFormOfType : CULong,
    pszUserType : Pointer[LPOLESTR]) CLong;

external OleRegGetMiscStatus(
    clsid : Pointer[IID],
    dwAspect : CULong,
    pdwStatus : Pointer[CULong]) CLong;

external OleRegEnumFormatEtc(
    clsid : Pointer[IID],
    dwDirection : CULong,
    ppenum : Pointer[LPENUMFORMATETC]) CLong;

external OleRegEnumVerbs(
    clsid : Pointer[IID],
    ppenum : Pointer[LPENUMOLEVERB]) CLong;

alias LPOLESTREAM = Pointer[Struct__OLESTREAM];

record Struct__OLESTREAMVTBL (
    Get : CCodePointer[(Pointer[Struct__OLESTREAM],RawPointer,CULong),(CULong)],
    Put : CCodePointer[(Pointer[Struct__OLESTREAM],RawPointer,CULong),(CULong)],
);

alias OLESTREAMVTBL = Struct__OLESTREAMVTBL;

alias LPOLESTREAMVTBL = Pointer[OLESTREAMVTBL];

record Struct__OLESTREAM (
    lpstbl : LPOLESTREAMVTBL,
);

alias OLESTREAM = Struct__OLESTREAM;

external OleConvertOLESTREAMToIStorage(
    lpolestream : LPOLESTREAM,
    pstg : LPSTORAGE,
    ptd : Pointer[DVTARGETDEVICE]) CLong;

external OleConvertIStorageToOLESTREAM(
    pstg : LPSTORAGE,
    lpolestream : LPOLESTREAM) CLong;

external GetHGlobalFromILockBytes(
    plkbyt : LPLOCKBYTES,
    phglobal : Pointer[HGLOBAL]) CLong;

external CreateILockBytesOnHGlobal(
    hGlobal : HGLOBAL,
    fDeleteOnRelease : Int,
    pplkbyt : Pointer[LPLOCKBYTES]) CLong;

external GetHGlobalFromStream(
    pstm : LPSTREAM,
    phglobal : Pointer[HGLOBAL]) CLong;

external CreateStreamOnHGlobal(
    hGlobal : HGLOBAL,
    fDeleteOnRelease : Int,
    ppstm : Pointer[LPSTREAM]) CLong;

external OleDoAutoConvert(
    pStg : LPSTORAGE,
    pClsidNew : LPCLSID) CLong;

external OleGetAutoConvert(
    clsidOld : Pointer[IID],
    pClsidNew : LPCLSID) CLong;

external OleSetAutoConvert(
    clsidOld : Pointer[IID],
    clsidNew : Pointer[IID]) CLong;

external GetConvertStg(
    pStg : LPSTORAGE) CLong;

external SetConvertStg(
    pStg : LPSTORAGE,
    fConvert : Int) CLong;

external OleConvertIStorageToOLESTREAMEx(
    pstg : LPSTORAGE,
    cfFormat : UShort,
    lWidth : CLong,
    lHeight : CLong,
    dwSize : CULong,
    pmedium : LPSTGMEDIUM,
    polestm : LPOLESTREAM) CLong;

external OleConvertOLESTREAMToIStorageEx(
    polestm : LPOLESTREAM,
    pstg : LPSTORAGE,
    pcfFormat : Pointer[UShort],
    plwWidth : Pointer[CLong],
    plHeight : Pointer[CLong],
    pdwSize : Pointer[CULong],
    pmedium : LPSTGMEDIUM) CLong;

external IID_IPrintDialogCallback : GUID;

external IID_IPrintDialogServices : GUID;

alias LPOFNHOOKPROC = CCodePointer[(Pointer[Struct_HWND__],UInt,UInt64,Int64),(UInt64)];

record Struct_tagOFN_NT4A (
    lStructSize : CULong,
    hwndOwner : HWND,
    hInstance : HINSTANCE,
    lpstrFilter : LPCSTR,
    lpstrCustomFilter : LPSTR,
    nMaxCustFilter : CULong,
    nFilterIndex : CULong,
    lpstrFile : LPSTR,
    nMaxFile : CULong,
    lpstrFileTitle : LPSTR,
    nMaxFileTitle : CULong,
    lpstrInitialDir : LPCSTR,
    lpstrTitle : LPCSTR,
    Flags : CULong,
    nFileOffset : UShort,
    nFileExtension : UShort,
    lpstrDefExt : LPCSTR,
    lCustData : Int64,
    lpfnHook : LPOFNHOOKPROC,
    lpTemplateName : LPCSTR,
);

alias OPENFILENAME_NT4A = Struct_tagOFN_NT4A;

alias LPOPENFILENAME_NT4A = Pointer[Struct_tagOFN_NT4A];

record Struct_tagOFN_NT4W (
    lStructSize : CULong,
    hwndOwner : HWND,
    hInstance : HINSTANCE,
    lpstrFilter : LPCWSTR,
    lpstrCustomFilter : LPWSTR,
    nMaxCustFilter : CULong,
    nFilterIndex : CULong,
    lpstrFile : LPWSTR,
    nMaxFile : CULong,
    lpstrFileTitle : LPWSTR,
    nMaxFileTitle : CULong,
    lpstrInitialDir : LPCWSTR,
    lpstrTitle : LPCWSTR,
    Flags : CULong,
    nFileOffset : UShort,
    nFileExtension : UShort,
    lpstrDefExt : LPCWSTR,
    lCustData : Int64,
    lpfnHook : LPOFNHOOKPROC,
    lpTemplateName : LPCWSTR,
);

alias OPENFILENAME_NT4W = Struct_tagOFN_NT4W;

alias LPOPENFILENAME_NT4W = Pointer[Struct_tagOFN_NT4W];

alias OPENFILENAME_NT4 = OPENFILENAME_NT4A;

alias LPOPENFILENAME_NT4 = LPOPENFILENAME_NT4A;

record Struct_tagOFNA (
    lStructSize : CULong,
    hwndOwner : HWND,
    hInstance : HINSTANCE,
    lpstrFilter : LPCSTR,
    lpstrCustomFilter : LPSTR,
    nMaxCustFilter : CULong,
    nFilterIndex : CULong,
    lpstrFile : LPSTR,
    nMaxFile : CULong,
    lpstrFileTitle : LPSTR,
    nMaxFileTitle : CULong,
    lpstrInitialDir : LPCSTR,
    lpstrTitle : LPCSTR,
    Flags : CULong,
    nFileOffset : UShort,
    nFileExtension : UShort,
    lpstrDefExt : LPCSTR,
    lCustData : Int64,
    lpfnHook : LPOFNHOOKPROC,
    lpTemplateName : LPCSTR,
    pvReserved : RawPointer,
    dwReserved : CULong,
    FlagsEx : CULong,
);

alias OPENFILENAMEA = Struct_tagOFNA;

alias LPOPENFILENAMEA = Pointer[Struct_tagOFNA];

record Struct_tagOFNW (
    lStructSize : CULong,
    hwndOwner : HWND,
    hInstance : HINSTANCE,
    lpstrFilter : LPCWSTR,
    lpstrCustomFilter : LPWSTR,
    nMaxCustFilter : CULong,
    nFilterIndex : CULong,
    lpstrFile : LPWSTR,
    nMaxFile : CULong,
    lpstrFileTitle : LPWSTR,
    nMaxFileTitle : CULong,
    lpstrInitialDir : LPCWSTR,
    lpstrTitle : LPCWSTR,
    Flags : CULong,
    nFileOffset : UShort,
    nFileExtension : UShort,
    lpstrDefExt : LPCWSTR,
    lCustData : Int64,
    lpfnHook : LPOFNHOOKPROC,
    lpTemplateName : LPCWSTR,
    pvReserved : RawPointer,
    dwReserved : CULong,
    FlagsEx : CULong,
);

alias OPENFILENAMEW = Struct_tagOFNW;

alias LPOPENFILENAMEW = Pointer[Struct_tagOFNW];

alias OPENFILENAME = OPENFILENAMEA;

alias LPOPENFILENAME = LPOPENFILENAMEA;

external GetOpenFileNameA(
    argument0 : LPOPENFILENAMEA) Int;

external GetOpenFileNameW(
    argument0 : LPOPENFILENAMEW) Int;

external GetSaveFileNameA(
    argument0 : LPOPENFILENAMEA) Int;

external GetSaveFileNameW(
    argument0 : LPOPENFILENAMEW) Int;

external GetFileTitleA(
    argument0 : LPCSTR,
    argument1 : LPSTR,
    argument2 : UShort) Short;

external GetFileTitleW(
    argument0 : LPCWSTR,
    argument1 : LPWSTR,
    argument2 : UShort) Short;

alias LPCCHOOKPROC = CCodePointer[(Pointer[Struct_HWND__],UInt,UInt64,Int64),(UInt64)];

record Struct__OFNOTIFYA (
    hdr : NMHDR,
    lpOFN : LPOPENFILENAMEA,
    pszFile : LPSTR,
);

alias OFNOTIFYA = Struct__OFNOTIFYA;

alias LPOFNOTIFYA = Pointer[Struct__OFNOTIFYA];

record Struct__OFNOTIFYW (
    hdr : NMHDR,
    lpOFN : LPOPENFILENAMEW,
    pszFile : LPWSTR,
);

alias OFNOTIFYW = Struct__OFNOTIFYW;

alias LPOFNOTIFYW = Pointer[Struct__OFNOTIFYW];

alias OFNOTIFY = OFNOTIFYA;

alias LPOFNOTIFY = LPOFNOTIFYA;

record Struct__OFNOTIFYEXA (
    hdr : NMHDR,
    lpOFN : LPOPENFILENAMEA,
    psf : LPVOID,
    pidl : LPVOID,
);

alias OFNOTIFYEXA = Struct__OFNOTIFYEXA;

alias LPOFNOTIFYEXA = Pointer[Struct__OFNOTIFYEXA];

record Struct__OFNOTIFYEXW (
    hdr : NMHDR,
    lpOFN : LPOPENFILENAMEW,
    psf : LPVOID,
    pidl : LPVOID,
);

alias OFNOTIFYEXW = Struct__OFNOTIFYEXW;

alias LPOFNOTIFYEXW = Pointer[Struct__OFNOTIFYEXW];

alias OFNOTIFYEX = OFNOTIFYEXA;

alias LPOFNOTIFYEX = LPOFNOTIFYEXA;

record Struct_tagCHOOSECOLORA (
    lStructSize : CULong,
    hwndOwner : HWND,
    hInstance : HWND,
    rgbResult : CULong,
    lpCustColors : Pointer[CULong],
    Flags : CULong,
    lCustData : Int64,
    lpfnHook : LPCCHOOKPROC,
    lpTemplateName : LPCSTR,
);

alias CHOOSECOLORA = Struct_tagCHOOSECOLORA;

alias LPCHOOSECOLORA = Pointer[Struct_tagCHOOSECOLORA];

record Struct_tagCHOOSECOLORW (
    lStructSize : CULong,
    hwndOwner : HWND,
    hInstance : HWND,
    rgbResult : CULong,
    lpCustColors : Pointer[CULong],
    Flags : CULong,
    lCustData : Int64,
    lpfnHook : LPCCHOOKPROC,
    lpTemplateName : LPCWSTR,
);

alias CHOOSECOLORW = Struct_tagCHOOSECOLORW;

alias LPCHOOSECOLORW = Pointer[Struct_tagCHOOSECOLORW];

alias CHOOSECOLOR = CHOOSECOLORA;

alias LPCHOOSECOLOR = LPCHOOSECOLORA;

external ChooseColorA(
    argument0 : LPCHOOSECOLORA) Int;

external ChooseColorW(
    argument0 : LPCHOOSECOLORW) Int;

alias LPFRHOOKPROC = CCodePointer[(Pointer[Struct_HWND__],UInt,UInt64,Int64),(UInt64)];

record Struct_tagFINDREPLACEA (
    lStructSize : CULong,
    hwndOwner : HWND,
    hInstance : HINSTANCE,
    Flags : CULong,
    lpstrFindWhat : LPSTR,
    lpstrReplaceWith : LPSTR,
    wFindWhatLen : UShort,
    wReplaceWithLen : UShort,
    lCustData : Int64,
    lpfnHook : LPFRHOOKPROC,
    lpTemplateName : LPCSTR,
);

alias FINDREPLACEA = Struct_tagFINDREPLACEA;

alias LPFINDREPLACEA = Pointer[Struct_tagFINDREPLACEA];

record Struct_tagFINDREPLACEW (
    lStructSize : CULong,
    hwndOwner : HWND,
    hInstance : HINSTANCE,
    Flags : CULong,
    lpstrFindWhat : LPWSTR,
    lpstrReplaceWith : LPWSTR,
    wFindWhatLen : UShort,
    wReplaceWithLen : UShort,
    lCustData : Int64,
    lpfnHook : LPFRHOOKPROC,
    lpTemplateName : LPCWSTR,
);

alias FINDREPLACEW = Struct_tagFINDREPLACEW;

alias LPFINDREPLACEW = Pointer[Struct_tagFINDREPLACEW];

alias FINDREPLACE = FINDREPLACEA;

alias LPFINDREPLACE = LPFINDREPLACEA;

external FindTextA(
    argument0 : LPFINDREPLACEA) HWND;

external FindTextW(
    argument0 : LPFINDREPLACEW) HWND;

external ReplaceTextA(
    argument0 : LPFINDREPLACEA) HWND;

external ReplaceTextW(
    argument0 : LPFINDREPLACEW) HWND;

alias LPCFHOOKPROC = CCodePointer[(Pointer[Struct_HWND__],UInt,UInt64,Int64),(UInt64)];

record Struct_tagCHOOSEFONTA (
    lStructSize : CULong,
    hwndOwner : HWND,
    hDC : HDC,
    lpLogFont : LPLOGFONTA,
    iPointSize : Int,
    Flags : CULong,
    rgbColors : CULong,
    lCustData : Int64,
    lpfnHook : LPCFHOOKPROC,
    lpTemplateName : LPCSTR,
    hInstance : HINSTANCE,
    lpszStyle : LPSTR,
    nFontType : UShort,
    ___MISSING_ALIGNMENT__ : UShort,
    nSizeMin : Int,
    nSizeMax : Int,
);

alias CHOOSEFONTA = Struct_tagCHOOSEFONTA;

alias LPCHOOSEFONTA = Pointer[Struct_tagCHOOSEFONTA];

record Struct_tagCHOOSEFONTW (
    lStructSize : CULong,
    hwndOwner : HWND,
    hDC : HDC,
    lpLogFont : LPLOGFONTW,
    iPointSize : Int,
    Flags : CULong,
    rgbColors : CULong,
    lCustData : Int64,
    lpfnHook : LPCFHOOKPROC,
    lpTemplateName : LPCWSTR,
    hInstance : HINSTANCE,
    lpszStyle : LPWSTR,
    nFontType : UShort,
    ___MISSING_ALIGNMENT__ : UShort,
    nSizeMin : Int,
    nSizeMax : Int,
);

alias CHOOSEFONTW = Struct_tagCHOOSEFONTW;

alias LPCHOOSEFONTW = Pointer[Struct_tagCHOOSEFONTW];

alias CHOOSEFONT = CHOOSEFONTA;

alias LPCHOOSEFONT = LPCHOOSEFONTA;

external ChooseFontA(
    argument0 : LPCHOOSEFONTA) Int;

external ChooseFontW(
    argument0 : LPCHOOSEFONTW) Int;

alias LPPRINTHOOKPROC = CCodePointer[(Pointer[Struct_HWND__],UInt,UInt64,Int64),(UInt64)];

alias LPSETUPHOOKPROC = CCodePointer[(Pointer[Struct_HWND__],UInt,UInt64,Int64),(UInt64)];

record Struct_tagPDA (
    lStructSize : CULong,
    hwndOwner : HWND,
    hDevMode : HGLOBAL,
    hDevNames : HGLOBAL,
    hDC : HDC,
    Flags : CULong,
    nFromPage : UShort,
    nToPage : UShort,
    nMinPage : UShort,
    nMaxPage : UShort,
    nCopies : UShort,
    hInstance : HINSTANCE,
    lCustData : Int64,
    lpfnPrintHook : LPPRINTHOOKPROC,
    lpfnSetupHook : LPSETUPHOOKPROC,
    lpPrintTemplateName : LPCSTR,
    lpSetupTemplateName : LPCSTR,
    hPrintTemplate : HGLOBAL,
    hSetupTemplate : HGLOBAL,
);

alias PRINTDLGA = Struct_tagPDA;

alias LPPRINTDLGA = Pointer[Struct_tagPDA];

record Struct_tagPDW (
    lStructSize : CULong,
    hwndOwner : HWND,
    hDevMode : HGLOBAL,
    hDevNames : HGLOBAL,
    hDC : HDC,
    Flags : CULong,
    nFromPage : UShort,
    nToPage : UShort,
    nMinPage : UShort,
    nMaxPage : UShort,
    nCopies : UShort,
    hInstance : HINSTANCE,
    lCustData : Int64,
    lpfnPrintHook : LPPRINTHOOKPROC,
    lpfnSetupHook : LPSETUPHOOKPROC,
    lpPrintTemplateName : LPCWSTR,
    lpSetupTemplateName : LPCWSTR,
    hPrintTemplate : HGLOBAL,
    hSetupTemplate : HGLOBAL,
);

alias PRINTDLGW = Struct_tagPDW;

alias LPPRINTDLGW = Pointer[Struct_tagPDW];

alias PRINTDLG = PRINTDLGA;

alias LPPRINTDLG = LPPRINTDLGA;

external PrintDlgA(
    argument0 : LPPRINTDLGA) Int;

external PrintDlgW(
    argument0 : LPPRINTDLGW) Int;

record Struct_IPrintDialogCallback (
    lpVtbl : Pointer[Struct_IPrintDialogCallbackVtbl],
);

alias IPrintDialogCallback = Struct_IPrintDialogCallback;

alias IPrintDialogCallbackVtbl = Struct_IPrintDialogCallbackVtbl;

record Struct_IPrintDialogCallbackVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IPrintDialogCallback],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IPrintDialogCallback]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IPrintDialogCallback]),(CULong)],
    InitDone : CCodePointer[(Pointer[Struct_IPrintDialogCallback]),(CLong)],
    SelectionChange : CCodePointer[(Pointer[Struct_IPrintDialogCallback]),(CLong)],
    HandleMessage : CCodePointer[(Pointer[Struct_IPrintDialogCallback],Pointer[Struct_HWND__],UInt,UInt64,Int64,Pointer[Int64]),(CLong)],
);

record Struct_IPrintDialogServices (
    lpVtbl : Pointer[Struct_IPrintDialogServicesVtbl],
);

alias IPrintDialogServices = Struct_IPrintDialogServices;

alias IPrintDialogServicesVtbl = Struct_IPrintDialogServicesVtbl;

record Struct_IPrintDialogServicesVtbl (
    QueryInterface : CCodePointer[(Pointer[Struct_IPrintDialogServices],Pointer[Struct__GUID],Pointer[RawPointer]),(CLong)],
    AddRef : CCodePointer[(Pointer[Struct_IPrintDialogServices]),(CULong)],
    Release : CCodePointer[(Pointer[Struct_IPrintDialogServices]),(CULong)],
    GetCurrentDevMode : CCodePointer[(Pointer[Struct_IPrintDialogServices],Pointer[Struct__devicemodeA],Pointer[UInt]),(CLong)],
    GetCurrentPrinterName : CCodePointer[(Pointer[Struct_IPrintDialogServices],Pointer[CChar],Pointer[UInt]),(CLong)],
    GetCurrentPortName : CCodePointer[(Pointer[Struct_IPrintDialogServices],Pointer[CChar],Pointer[UInt]),(CLong)],
);

record Struct_tagPRINTPAGERANGE (
    nFromPage : CULong,
    nToPage : CULong,
);

alias PRINTPAGERANGE = Struct_tagPRINTPAGERANGE;

alias LPPRINTPAGERANGE = Pointer[Struct_tagPRINTPAGERANGE];

record Struct_tagPDEXA (
    lStructSize : CULong,
    hwndOwner : HWND,
    hDevMode : HGLOBAL,
    hDevNames : HGLOBAL,
    hDC : HDC,
    Flags : CULong,
    Flags2 : CULong,
    ExclusionFlags : CULong,
    nPageRanges : CULong,
    nMaxPageRanges : CULong,
    lpPageRanges : LPPRINTPAGERANGE,
    nMinPage : CULong,
    nMaxPage : CULong,
    nCopies : CULong,
    hInstance : HINSTANCE,
    lpPrintTemplateName : LPCSTR,
    lpCallback : LPUNKNOWN,
    nPropertyPages : CULong,
    lphPropertyPages : Pointer[HPROPSHEETPAGE],
    nStartPage : CULong,
    dwResultAction : CULong,
);

alias PRINTDLGEXA = Struct_tagPDEXA;

alias LPPRINTDLGEXA = Pointer[Struct_tagPDEXA];

record Struct_tagPDEXW (
    lStructSize : CULong,
    hwndOwner : HWND,
    hDevMode : HGLOBAL,
    hDevNames : HGLOBAL,
    hDC : HDC,
    Flags : CULong,
    Flags2 : CULong,
    ExclusionFlags : CULong,
    nPageRanges : CULong,
    nMaxPageRanges : CULong,
    lpPageRanges : LPPRINTPAGERANGE,
    nMinPage : CULong,
    nMaxPage : CULong,
    nCopies : CULong,
    hInstance : HINSTANCE,
    lpPrintTemplateName : LPCWSTR,
    lpCallback : LPUNKNOWN,
    nPropertyPages : CULong,
    lphPropertyPages : Pointer[HPROPSHEETPAGE],
    nStartPage : CULong,
    dwResultAction : CULong,
);

alias PRINTDLGEXW = Struct_tagPDEXW;

alias LPPRINTDLGEXW = Pointer[Struct_tagPDEXW];

alias PRINTDLGEX = PRINTDLGEXA;

alias LPPRINTDLGEX = LPPRINTDLGEXA;

external PrintDlgExA(
    argument0 : LPPRINTDLGEXA) CLong;

external PrintDlgExW(
    argument0 : LPPRINTDLGEXW) CLong;

record Struct_tagDEVNAMES (
    wDriverOffset : UShort,
    wDeviceOffset : UShort,
    wOutputOffset : UShort,
    wDefault : UShort,
);

alias DEVNAMES = Struct_tagDEVNAMES;

alias LPDEVNAMES = Pointer[Struct_tagDEVNAMES];

external CommDlgExtendedError() CULong;

alias LPPAGEPAINTHOOK = CCodePointer[(Pointer[Struct_HWND__],UInt,UInt64,Int64),(UInt64)];

alias LPPAGESETUPHOOK = CCodePointer[(Pointer[Struct_HWND__],UInt,UInt64,Int64),(UInt64)];

record Struct_tagPSDA (
    lStructSize : CULong,
    hwndOwner : HWND,
    hDevMode : HGLOBAL,
    hDevNames : HGLOBAL,
    Flags : CULong,
    ptPaperSize : POINT,
    rtMinMargin : RECT,
    rtMargin : RECT,
    hInstance : HINSTANCE,
    lCustData : Int64,
    lpfnPageSetupHook : LPPAGESETUPHOOK,
    lpfnPagePaintHook : LPPAGEPAINTHOOK,
    lpPageSetupTemplateName : LPCSTR,
    hPageSetupTemplate : HGLOBAL,
);

alias PAGESETUPDLGA = Struct_tagPSDA;

alias LPPAGESETUPDLGA = Pointer[Struct_tagPSDA];

record Struct_tagPSDW (
    lStructSize : CULong,
    hwndOwner : HWND,
    hDevMode : HGLOBAL,
    hDevNames : HGLOBAL,
    Flags : CULong,
    ptPaperSize : POINT,
    rtMinMargin : RECT,
    rtMargin : RECT,
    hInstance : HINSTANCE,
    lCustData : Int64,
    lpfnPageSetupHook : LPPAGESETUPHOOK,
    lpfnPagePaintHook : LPPAGEPAINTHOOK,
    lpPageSetupTemplateName : LPCWSTR,
    hPageSetupTemplate : HGLOBAL,
);

alias PAGESETUPDLGW = Struct_tagPSDW;

alias LPPAGESETUPDLGW = Pointer[Struct_tagPSDW];

alias PAGESETUPDLG = PAGESETUPDLGA;

alias LPPAGESETUPDLG = LPPAGESETUPDLGA;

external PageSetupDlgA(
    argument0 : LPPAGESETUPDLGA) Int;

external PageSetupDlgW(
    argument0 : LPPAGESETUPDLGW) Int;

external uaw_CharUpperW(
    String : LPUWSTR) LPUWSTR;

external uaw_lstrcmpW(
    String1 : PCUWSTR,
    String2 : PCUWSTR) Int;

external uaw_lstrcmpiW(
    String1 : PCUWSTR,
    String2 : PCUWSTR) Int;

external uaw_lstrlenW(
    String : LPCUWSTR) Int;

external uaw_wcschr(
    String : PCUWSTR,
    Character : UShort) PUWSTR;

external uaw_wcscpy(
    Destination : PUWSTR,
    Source : PCUWSTR) PUWSTR;

external uaw_wcsicmp(
    String1 : PCUWSTR,
    String2 : PCUWSTR) Int;

external uaw_wcslen(
    String : PCUWSTR) UInt64;

external uaw_wcsrchr(
    String : PCUWSTR,
    Character : UShort) PUWSTR;

external ua_CharUpperW(
    String : LPUWSTR) LPUWSTR;

external ua_lstrcmpW(
    String1 : LPCUWSTR,
    String2 : LPCUWSTR) Int;

external ua_lstrcmpiW(
    String1 : LPCUWSTR,
    String2 : LPCUWSTR) Int;

external ua_lstrlenW(
    String : LPCUWSTR) Int;

alias PUWSTR_C = Pointer[UShort];

external ua_wcschr(
    String : PCUWSTR,
    Character : UShort) PUWSTR_C;

external ua_wcsrchr(
    String : PCUWSTR,
    Character : UShort) PUWSTR_C;

external ua_wcscpy(
    Destination : PUWSTR,
    Source : PCUWSTR) PUWSTR;

external ua_wcslen(
    String : PCUWSTR) UInt64;

external ua_wcsicmp(
    String1 : LPCUWSTR,
    String2 : LPCUWSTR) Int;

record Struct__SERVICE_DESCRIPTIONA (
    lpDescription : LPSTR,
);

alias SERVICE_DESCRIPTIONA = Struct__SERVICE_DESCRIPTIONA;

alias LPSERVICE_DESCRIPTIONA = Pointer[Struct__SERVICE_DESCRIPTIONA];

record Struct__SERVICE_DESCRIPTIONW (
    lpDescription : LPWSTR,
);

alias SERVICE_DESCRIPTIONW = Struct__SERVICE_DESCRIPTIONW;

alias LPSERVICE_DESCRIPTIONW = Pointer[Struct__SERVICE_DESCRIPTIONW];

alias SERVICE_DESCRIPTION = SERVICE_DESCRIPTIONA;

alias LPSERVICE_DESCRIPTION = LPSERVICE_DESCRIPTIONA;

alias SC_ACTION_NONE = 0;
alias SC_ACTION_RESTART = 1;
alias SC_ACTION_REBOOT = 2;
alias SC_ACTION_RUN_COMMAND = 3;

alias SC_ACTION_TYPE = Int;

record Struct__SC_ACTION (
    Type : SC_ACTION_TYPE,
    Delay : CULong,
);

alias SC_ACTION = Struct__SC_ACTION;

alias LPSC_ACTION = Pointer[Struct__SC_ACTION];

record Struct__SERVICE_FAILURE_ACTIONSA (
    dwResetPeriod : CULong,
    lpRebootMsg : LPSTR,
    lpCommand : LPSTR,
    cActions : CULong,
    lpsaActions : Pointer[SC_ACTION],
);

alias SERVICE_FAILURE_ACTIONSA = Struct__SERVICE_FAILURE_ACTIONSA;

alias LPSERVICE_FAILURE_ACTIONSA = Pointer[Struct__SERVICE_FAILURE_ACTIONSA];

record Struct__SERVICE_FAILURE_ACTIONSW (
    dwResetPeriod : CULong,
    lpRebootMsg : LPWSTR,
    lpCommand : LPWSTR,
    cActions : CULong,
    lpsaActions : Pointer[SC_ACTION],
);

alias SERVICE_FAILURE_ACTIONSW = Struct__SERVICE_FAILURE_ACTIONSW;

alias LPSERVICE_FAILURE_ACTIONSW = Pointer[Struct__SERVICE_FAILURE_ACTIONSW];

alias SERVICE_FAILURE_ACTIONS = SERVICE_FAILURE_ACTIONSA;

alias LPSERVICE_FAILURE_ACTIONS = LPSERVICE_FAILURE_ACTIONSA;

record Struct_SC_HANDLE__ (
    unused : Int,
);

alias SC_HANDLE = Pointer[Struct_SC_HANDLE__];

alias LPSC_HANDLE = Pointer[SC_HANDLE];

record Struct_SERVICE_STATUS_HANDLE__ (
    unused : Int,
);

alias SERVICE_STATUS_HANDLE = Pointer[Struct_SERVICE_STATUS_HANDLE__];

alias SC_STATUS_PROCESS_INFO = 0;

alias SC_STATUS_TYPE = Int;

alias SC_ENUM_PROCESS_INFO = 0;

alias SC_ENUM_TYPE = Int;

record Struct__SERVICE_STATUS (
    dwServiceType : CULong,
    dwCurrentState : CULong,
    dwControlsAccepted : CULong,
    dwWin32ExitCode : CULong,
    dwServiceSpecificExitCode : CULong,
    dwCheckPoint : CULong,
    dwWaitHint : CULong,
);

alias SERVICE_STATUS = Struct__SERVICE_STATUS;

alias LPSERVICE_STATUS = Pointer[Struct__SERVICE_STATUS];

record Struct__SERVICE_STATUS_PROCESS (
    dwServiceType : CULong,
    dwCurrentState : CULong,
    dwControlsAccepted : CULong,
    dwWin32ExitCode : CULong,
    dwServiceSpecificExitCode : CULong,
    dwCheckPoint : CULong,
    dwWaitHint : CULong,
    dwProcessId : CULong,
    dwServiceFlags : CULong,
);

alias SERVICE_STATUS_PROCESS = Struct__SERVICE_STATUS_PROCESS;

alias LPSERVICE_STATUS_PROCESS = Pointer[Struct__SERVICE_STATUS_PROCESS];

record Struct__ENUM_SERVICE_STATUSA (
    lpServiceName : LPSTR,
    lpDisplayName : LPSTR,
    ServiceStatus : SERVICE_STATUS,
);

alias ENUM_SERVICE_STATUSA = Struct__ENUM_SERVICE_STATUSA;

alias LPENUM_SERVICE_STATUSA = Pointer[Struct__ENUM_SERVICE_STATUSA];

record Struct__ENUM_SERVICE_STATUSW (
    lpServiceName : LPWSTR,
    lpDisplayName : LPWSTR,
    ServiceStatus : SERVICE_STATUS,
);

alias ENUM_SERVICE_STATUSW = Struct__ENUM_SERVICE_STATUSW;

alias LPENUM_SERVICE_STATUSW = Pointer[Struct__ENUM_SERVICE_STATUSW];

alias ENUM_SERVICE_STATUS = ENUM_SERVICE_STATUSA;

alias LPENUM_SERVICE_STATUS = LPENUM_SERVICE_STATUSA;

record Struct__ENUM_SERVICE_STATUS_PROCESSA (
    lpServiceName : LPSTR,
    lpDisplayName : LPSTR,
    ServiceStatusProcess : SERVICE_STATUS_PROCESS,
);

alias ENUM_SERVICE_STATUS_PROCESSA = Struct__ENUM_SERVICE_STATUS_PROCESSA;

alias LPENUM_SERVICE_STATUS_PROCESSA = Pointer[Struct__ENUM_SERVICE_STATUS_PROCESSA];

record Struct__ENUM_SERVICE_STATUS_PROCESSW (
    lpServiceName : LPWSTR,
    lpDisplayName : LPWSTR,
    ServiceStatusProcess : SERVICE_STATUS_PROCESS,
);

alias ENUM_SERVICE_STATUS_PROCESSW = Struct__ENUM_SERVICE_STATUS_PROCESSW;

alias LPENUM_SERVICE_STATUS_PROCESSW = Pointer[Struct__ENUM_SERVICE_STATUS_PROCESSW];

alias ENUM_SERVICE_STATUS_PROCESS = ENUM_SERVICE_STATUS_PROCESSA;

alias LPENUM_SERVICE_STATUS_PROCESS = LPENUM_SERVICE_STATUS_PROCESSA;

alias SC_LOCK = LPVOID;

record Struct__QUERY_SERVICE_LOCK_STATUSA (
    fIsLocked : CULong,
    lpLockOwner : LPSTR,
    dwLockDuration : CULong,
);

alias QUERY_SERVICE_LOCK_STATUSA = Struct__QUERY_SERVICE_LOCK_STATUSA;

alias LPQUERY_SERVICE_LOCK_STATUSA = Pointer[Struct__QUERY_SERVICE_LOCK_STATUSA];

record Struct__QUERY_SERVICE_LOCK_STATUSW (
    fIsLocked : CULong,
    lpLockOwner : LPWSTR,
    dwLockDuration : CULong,
);

alias QUERY_SERVICE_LOCK_STATUSW = Struct__QUERY_SERVICE_LOCK_STATUSW;

alias LPQUERY_SERVICE_LOCK_STATUSW = Pointer[Struct__QUERY_SERVICE_LOCK_STATUSW];

alias QUERY_SERVICE_LOCK_STATUS = QUERY_SERVICE_LOCK_STATUSA;

alias LPQUERY_SERVICE_LOCK_STATUS = LPQUERY_SERVICE_LOCK_STATUSA;

record Struct__QUERY_SERVICE_CONFIGA (
    dwServiceType : CULong,
    dwStartType : CULong,
    dwErrorControl : CULong,
    lpBinaryPathName : LPSTR,
    lpLoadOrderGroup : LPSTR,
    dwTagId : CULong,
    lpDependencies : LPSTR,
    lpServiceStartName : LPSTR,
    lpDisplayName : LPSTR,
);

alias QUERY_SERVICE_CONFIGA = Struct__QUERY_SERVICE_CONFIGA;

alias LPQUERY_SERVICE_CONFIGA = Pointer[Struct__QUERY_SERVICE_CONFIGA];

record Struct__QUERY_SERVICE_CONFIGW (
    dwServiceType : CULong,
    dwStartType : CULong,
    dwErrorControl : CULong,
    lpBinaryPathName : LPWSTR,
    lpLoadOrderGroup : LPWSTR,
    dwTagId : CULong,
    lpDependencies : LPWSTR,
    lpServiceStartName : LPWSTR,
    lpDisplayName : LPWSTR,
);

alias QUERY_SERVICE_CONFIGW = Struct__QUERY_SERVICE_CONFIGW;

alias LPQUERY_SERVICE_CONFIGW = Pointer[Struct__QUERY_SERVICE_CONFIGW];

alias QUERY_SERVICE_CONFIG = QUERY_SERVICE_CONFIGA;

alias LPQUERY_SERVICE_CONFIG = LPQUERY_SERVICE_CONFIGA;

alias LPSERVICE_MAIN_FUNCTIONW = CCodePointer[(CULong,Pointer[Pointer[UShort]]),()];

alias LPSERVICE_MAIN_FUNCTIONA = CCodePointer[(CULong,Pointer[Pointer[CChar]]),()];

record Struct__SERVICE_TABLE_ENTRYA (
    lpServiceName : LPSTR,
    lpServiceProc : LPSERVICE_MAIN_FUNCTIONA,
);

alias SERVICE_TABLE_ENTRYA = Struct__SERVICE_TABLE_ENTRYA;

alias LPSERVICE_TABLE_ENTRYA = Pointer[Struct__SERVICE_TABLE_ENTRYA];

record Struct__SERVICE_TABLE_ENTRYW (
    lpServiceName : LPWSTR,
    lpServiceProc : LPSERVICE_MAIN_FUNCTIONW,
);

alias SERVICE_TABLE_ENTRYW = Struct__SERVICE_TABLE_ENTRYW;

alias LPSERVICE_TABLE_ENTRYW = Pointer[Struct__SERVICE_TABLE_ENTRYW];

alias SERVICE_TABLE_ENTRY = SERVICE_TABLE_ENTRYA;

alias LPSERVICE_TABLE_ENTRY = LPSERVICE_TABLE_ENTRYA;

alias LPHANDLER_FUNCTION = CCodePointer[(CULong),()];

alias LPHANDLER_FUNCTION_EX = CCodePointer[(CULong,CULong,RawPointer,RawPointer),(CULong)];

external ChangeServiceConfigA(
    hService : SC_HANDLE,
    dwServiceType : CULong,
    dwStartType : CULong,
    dwErrorControl : CULong,
    lpBinaryPathName : LPCSTR,
    lpLoadOrderGroup : LPCSTR,
    lpdwTagId : LPDWORD,
    lpDependencies : LPCSTR,
    lpServiceStartName : LPCSTR,
    lpPassword : LPCSTR,
    lpDisplayName : LPCSTR) Int;

external ChangeServiceConfigW(
    hService : SC_HANDLE,
    dwServiceType : CULong,
    dwStartType : CULong,
    dwErrorControl : CULong,
    lpBinaryPathName : LPCWSTR,
    lpLoadOrderGroup : LPCWSTR,
    lpdwTagId : LPDWORD,
    lpDependencies : LPCWSTR,
    lpServiceStartName : LPCWSTR,
    lpPassword : LPCWSTR,
    lpDisplayName : LPCWSTR) Int;

external ChangeServiceConfig2A(
    hService : SC_HANDLE,
    dwInfoLevel : CULong,
    lpInfo : LPVOID) Int;

external ChangeServiceConfig2W(
    hService : SC_HANDLE,
    dwInfoLevel : CULong,
    lpInfo : LPVOID) Int;

external CloseServiceHandle(
    hSCObject : SC_HANDLE) Int;

external ControlService(
    hService : SC_HANDLE,
    dwControl : CULong,
    lpServiceStatus : LPSERVICE_STATUS) Int;

external CreateServiceA(
    hSCManager : SC_HANDLE,
    lpServiceName : LPCSTR,
    lpDisplayName : LPCSTR,
    dwDesiredAccess : CULong,
    dwServiceType : CULong,
    dwStartType : CULong,
    dwErrorControl : CULong,
    lpBinaryPathName : LPCSTR,
    lpLoadOrderGroup : LPCSTR,
    lpdwTagId : LPDWORD,
    lpDependencies : LPCSTR,
    lpServiceStartName : LPCSTR,
    lpPassword : LPCSTR) SC_HANDLE;

external CreateServiceW(
    hSCManager : SC_HANDLE,
    lpServiceName : LPCWSTR,
    lpDisplayName : LPCWSTR,
    dwDesiredAccess : CULong,
    dwServiceType : CULong,
    dwStartType : CULong,
    dwErrorControl : CULong,
    lpBinaryPathName : LPCWSTR,
    lpLoadOrderGroup : LPCWSTR,
    lpdwTagId : LPDWORD,
    lpDependencies : LPCWSTR,
    lpServiceStartName : LPCWSTR,
    lpPassword : LPCWSTR) SC_HANDLE;

external DeleteService(
    hService : SC_HANDLE) Int;

external EnumDependentServicesA(
    hService : SC_HANDLE,
    dwServiceState : CULong,
    lpServices : LPENUM_SERVICE_STATUSA,
    cbBufSize : CULong,
    pcbBytesNeeded : LPDWORD,
    lpServicesReturned : LPDWORD) Int;

external EnumDependentServicesW(
    hService : SC_HANDLE,
    dwServiceState : CULong,
    lpServices : LPENUM_SERVICE_STATUSW,
    cbBufSize : CULong,
    pcbBytesNeeded : LPDWORD,
    lpServicesReturned : LPDWORD) Int;

external EnumServicesStatusA(
    hSCManager : SC_HANDLE,
    dwServiceType : CULong,
    dwServiceState : CULong,
    lpServices : LPENUM_SERVICE_STATUSA,
    cbBufSize : CULong,
    pcbBytesNeeded : LPDWORD,
    lpServicesReturned : LPDWORD,
    lpResumeHandle : LPDWORD) Int;

external EnumServicesStatusW(
    hSCManager : SC_HANDLE,
    dwServiceType : CULong,
    dwServiceState : CULong,
    lpServices : LPENUM_SERVICE_STATUSW,
    cbBufSize : CULong,
    pcbBytesNeeded : LPDWORD,
    lpServicesReturned : LPDWORD,
    lpResumeHandle : LPDWORD) Int;

external EnumServicesStatusExA(
    hSCManager : SC_HANDLE,
    InfoLevel : SC_ENUM_TYPE,
    dwServiceType : CULong,
    dwServiceState : CULong,
    lpServices : LPBYTE,
    cbBufSize : CULong,
    pcbBytesNeeded : LPDWORD,
    lpServicesReturned : LPDWORD,
    lpResumeHandle : LPDWORD,
    pszGroupName : LPCSTR) Int;

external EnumServicesStatusExW(
    hSCManager : SC_HANDLE,
    InfoLevel : SC_ENUM_TYPE,
    dwServiceType : CULong,
    dwServiceState : CULong,
    lpServices : LPBYTE,
    cbBufSize : CULong,
    pcbBytesNeeded : LPDWORD,
    lpServicesReturned : LPDWORD,
    lpResumeHandle : LPDWORD,
    pszGroupName : LPCWSTR) Int;

external GetServiceKeyNameA(
    hSCManager : SC_HANDLE,
    lpDisplayName : LPCSTR,
    lpServiceName : LPSTR,
    lpcchBuffer : LPDWORD) Int;

external GetServiceKeyNameW(
    hSCManager : SC_HANDLE,
    lpDisplayName : LPCWSTR,
    lpServiceName : LPWSTR,
    lpcchBuffer : LPDWORD) Int;

external GetServiceDisplayNameA(
    hSCManager : SC_HANDLE,
    lpServiceName : LPCSTR,
    lpDisplayName : LPSTR,
    lpcchBuffer : LPDWORD) Int;

external GetServiceDisplayNameW(
    hSCManager : SC_HANDLE,
    lpServiceName : LPCWSTR,
    lpDisplayName : LPWSTR,
    lpcchBuffer : LPDWORD) Int;

external LockServiceDatabase(
    hSCManager : SC_HANDLE) SC_LOCK;

external NotifyBootConfigStatus(
    BootAcceptable : Int) Int;

external OpenSCManagerA(
    lpMachineName : LPCSTR,
    lpDatabaseName : LPCSTR,
    dwDesiredAccess : CULong) SC_HANDLE;

external OpenSCManagerW(
    lpMachineName : LPCWSTR,
    lpDatabaseName : LPCWSTR,
    dwDesiredAccess : CULong) SC_HANDLE;

external OpenServiceA(
    hSCManager : SC_HANDLE,
    lpServiceName : LPCSTR,
    dwDesiredAccess : CULong) SC_HANDLE;

external OpenServiceW(
    hSCManager : SC_HANDLE,
    lpServiceName : LPCWSTR,
    dwDesiredAccess : CULong) SC_HANDLE;

external QueryServiceConfigA(
    hService : SC_HANDLE,
    lpServiceConfig : LPQUERY_SERVICE_CONFIGA,
    cbBufSize : CULong,
    pcbBytesNeeded : LPDWORD) Int;

external QueryServiceConfigW(
    hService : SC_HANDLE,
    lpServiceConfig : LPQUERY_SERVICE_CONFIGW,
    cbBufSize : CULong,
    pcbBytesNeeded : LPDWORD) Int;

external QueryServiceConfig2A(
    hService : SC_HANDLE,
    dwInfoLevel : CULong,
    lpBuffer : LPBYTE,
    cbBufSize : CULong,
    pcbBytesNeeded : LPDWORD) Int;

external QueryServiceConfig2W(
    hService : SC_HANDLE,
    dwInfoLevel : CULong,
    lpBuffer : LPBYTE,
    cbBufSize : CULong,
    pcbBytesNeeded : LPDWORD) Int;

external QueryServiceLockStatusA(
    hSCManager : SC_HANDLE,
    lpLockStatus : LPQUERY_SERVICE_LOCK_STATUSA,
    cbBufSize : CULong,
    pcbBytesNeeded : LPDWORD) Int;

external QueryServiceLockStatusW(
    hSCManager : SC_HANDLE,
    lpLockStatus : LPQUERY_SERVICE_LOCK_STATUSW,
    cbBufSize : CULong,
    pcbBytesNeeded : LPDWORD) Int;

external QueryServiceObjectSecurity(
    hService : SC_HANDLE,
    dwSecurityInformation : CULong,
    lpSecurityDescriptor : PSECURITY_DESCRIPTOR,
    cbBufSize : CULong,
    pcbBytesNeeded : LPDWORD) Int;

external QueryServiceStatus(
    hService : SC_HANDLE,
    lpServiceStatus : LPSERVICE_STATUS) Int;

external QueryServiceStatusEx(
    hService : SC_HANDLE,
    InfoLevel : SC_STATUS_TYPE,
    lpBuffer : LPBYTE,
    cbBufSize : CULong,
    pcbBytesNeeded : LPDWORD) Int;

external RegisterServiceCtrlHandlerA(
    lpServiceName : LPCSTR,
    lpHandlerProc : LPHANDLER_FUNCTION) SERVICE_STATUS_HANDLE;

external RegisterServiceCtrlHandlerW(
    lpServiceName : LPCWSTR,
    lpHandlerProc : LPHANDLER_FUNCTION) SERVICE_STATUS_HANDLE;

external RegisterServiceCtrlHandlerExA(
    lpServiceName : LPCSTR,
    lpHandlerProc : LPHANDLER_FUNCTION_EX,
    lpContext : LPVOID) SERVICE_STATUS_HANDLE;

external RegisterServiceCtrlHandlerExW(
    lpServiceName : LPCWSTR,
    lpHandlerProc : LPHANDLER_FUNCTION_EX,
    lpContext : LPVOID) SERVICE_STATUS_HANDLE;

external SetServiceObjectSecurity(
    hService : SC_HANDLE,
    dwSecurityInformation : CULong,
    lpSecurityDescriptor : PSECURITY_DESCRIPTOR) Int;

external SetServiceStatus(
    hServiceStatus : SERVICE_STATUS_HANDLE,
    lpServiceStatus : LPSERVICE_STATUS) Int;

external StartServiceCtrlDispatcherA(
    lpServiceStartTable : Pointer[SERVICE_TABLE_ENTRYA]) Int;

external StartServiceCtrlDispatcherW(
    lpServiceStartTable : Pointer[SERVICE_TABLE_ENTRYW]) Int;

external StartServiceA(
    hService : SC_HANDLE,
    dwNumServiceArgs : CULong,
    lpServiceArgVectors : Pointer[LPCSTR]) Int;

external StartServiceW(
    hService : SC_HANDLE,
    dwNumServiceArgs : CULong,
    lpServiceArgVectors : Pointer[LPCWSTR]) Int;

external UnlockServiceDatabase(
    ScLock : SC_LOCK) Int;

record Struct__MODEMDEVCAPS (
    dwActualSize : CULong,
    dwRequiredSize : CULong,
    dwDevSpecificOffset : CULong,
    dwDevSpecificSize : CULong,
    dwModemProviderVersion : CULong,
    dwModemManufacturerOffset : CULong,
    dwModemManufacturerSize : CULong,
    dwModemModelOffset : CULong,
    dwModemModelSize : CULong,
    dwModemVersionOffset : CULong,
    dwModemVersionSize : CULong,
    dwDialOptions : CULong,
    dwCallSetupFailTimer : CULong,
    dwInactivityTimeout : CULong,
    dwSpeakerVolume : CULong,
    dwSpeakerMode : CULong,
    dwModemOptions : CULong,
    dwMaxDTERate : CULong,
    dwMaxDCERate : CULong,
    abVariablePortion : Array[CUChar,1],
);

alias MODEMDEVCAPS = Struct__MODEMDEVCAPS;

alias PMODEMDEVCAPS = Pointer[Struct__MODEMDEVCAPS];

alias LPMODEMDEVCAPS = Pointer[Struct__MODEMDEVCAPS];

record Struct__MODEMSETTINGS (
    dwActualSize : CULong,
    dwRequiredSize : CULong,
    dwDevSpecificOffset : CULong,
    dwDevSpecificSize : CULong,
    dwCallSetupFailTimer : CULong,
    dwInactivityTimeout : CULong,
    dwSpeakerVolume : CULong,
    dwSpeakerMode : CULong,
    dwPreferredModemOptions : CULong,
    dwNegotiatedModemOptions : CULong,
    dwNegotiatedDCERate : CULong,
    abVariablePortion : Array[CUChar,1],
);

alias MODEMSETTINGS = Struct__MODEMSETTINGS;

alias PMODEMSETTINGS = Pointer[Struct__MODEMSETTINGS];

alias LPMODEMSETTINGS = Pointer[Struct__MODEMSETTINGS];

record Struct_HIMC__ (
    unused : Int,
);

alias HIMC = Pointer[Struct_HIMC__];

record Struct_HIMCC__ (
    unused : Int,
);

alias HIMCC = Pointer[Struct_HIMCC__];

alias LPHKL = Pointer[HKL];

record Struct_tagCOMPOSITIONFORM (
    dwStyle : CULong,
    ptCurrentPos : POINT,
    rcArea : RECT,
);

alias COMPOSITIONFORM = Struct_tagCOMPOSITIONFORM;

alias PCOMPOSITIONFORM = Pointer[Struct_tagCOMPOSITIONFORM];

alias NPCOMPOSITIONFORM = Pointer[Struct_tagCOMPOSITIONFORM];

alias LPCOMPOSITIONFORM = Pointer[Struct_tagCOMPOSITIONFORM];

record Struct_tagCANDIDATEFORM (
    dwIndex : CULong,
    dwStyle : CULong,
    ptCurrentPos : POINT,
    rcArea : RECT,
);

alias CANDIDATEFORM = Struct_tagCANDIDATEFORM;

alias PCANDIDATEFORM = Pointer[Struct_tagCANDIDATEFORM];

alias NPCANDIDATEFORM = Pointer[Struct_tagCANDIDATEFORM];

alias LPCANDIDATEFORM = Pointer[Struct_tagCANDIDATEFORM];

record Struct_tagCANDIDATELIST (
    dwSize : CULong,
    dwStyle : CULong,
    dwCount : CULong,
    dwSelection : CULong,
    dwPageStart : CULong,
    dwPageSize : CULong,
    dwOffset : Array[CULong,1],
);

alias CANDIDATELIST = Struct_tagCANDIDATELIST;

alias PCANDIDATELIST = Pointer[Struct_tagCANDIDATELIST];

alias NPCANDIDATELIST = Pointer[Struct_tagCANDIDATELIST];

alias LPCANDIDATELIST = Pointer[Struct_tagCANDIDATELIST];

record Struct_tagREGISTERWORDA (
    lpReading : LPSTR,
    lpWord : LPSTR,
);

alias REGISTERWORDA = Struct_tagREGISTERWORDA;

alias PREGISTERWORDA = Pointer[Struct_tagREGISTERWORDA];

alias NPREGISTERWORDA = Pointer[Struct_tagREGISTERWORDA];

alias LPREGISTERWORDA = Pointer[Struct_tagREGISTERWORDA];

record Struct_tagREGISTERWORDW (
    lpReading : LPWSTR,
    lpWord : LPWSTR,
);

alias REGISTERWORDW = Struct_tagREGISTERWORDW;

alias PREGISTERWORDW = Pointer[Struct_tagREGISTERWORDW];

alias NPREGISTERWORDW = Pointer[Struct_tagREGISTERWORDW];

alias LPREGISTERWORDW = Pointer[Struct_tagREGISTERWORDW];

alias REGISTERWORD = REGISTERWORDA;

alias PREGISTERWORD = PREGISTERWORDA;

alias NPREGISTERWORD = NPREGISTERWORDA;

alias LPREGISTERWORD = LPREGISTERWORDA;

record Struct_tagRECONVERTSTRING (
    dwSize : CULong,
    dwVersion : CULong,
    dwStrLen : CULong,
    dwStrOffset : CULong,
    dwCompStrLen : CULong,
    dwCompStrOffset : CULong,
    dwTargetStrLen : CULong,
    dwTargetStrOffset : CULong,
);

alias RECONVERTSTRING = Struct_tagRECONVERTSTRING;

alias PRECONVERTSTRING = Pointer[Struct_tagRECONVERTSTRING];

alias NPRECONVERTSTRING = Pointer[Struct_tagRECONVERTSTRING];

alias LPRECONVERTSTRING = Pointer[Struct_tagRECONVERTSTRING];

record Struct_tagSTYLEBUFA (
    dwStyle : CULong,
    szDescription : Array[CChar,32],
);

alias STYLEBUFA = Struct_tagSTYLEBUFA;

alias PSTYLEBUFA = Pointer[Struct_tagSTYLEBUFA];

alias NPSTYLEBUFA = Pointer[Struct_tagSTYLEBUFA];

alias LPSTYLEBUFA = Pointer[Struct_tagSTYLEBUFA];

record Struct_tagSTYLEBUFW (
    dwStyle : CULong,
    szDescription : Array[UShort,32],
);

alias STYLEBUFW = Struct_tagSTYLEBUFW;

alias PSTYLEBUFW = Pointer[Struct_tagSTYLEBUFW];

alias NPSTYLEBUFW = Pointer[Struct_tagSTYLEBUFW];

alias LPSTYLEBUFW = Pointer[Struct_tagSTYLEBUFW];

alias STYLEBUF = STYLEBUFA;

alias PSTYLEBUF = PSTYLEBUFA;

alias NPSTYLEBUF = NPSTYLEBUFA;

alias LPSTYLEBUF = LPSTYLEBUFA;

record Struct_tagIMEMENUITEMINFOA (
    cbSize : UInt,
    fType : UInt,
    fState : UInt,
    wID : UInt,
    hbmpChecked : HBITMAP,
    hbmpUnchecked : HBITMAP,
    dwItemData : CULong,
    szString : Array[CChar,80],
    hbmpItem : HBITMAP,
);

alias IMEMENUITEMINFOA = Struct_tagIMEMENUITEMINFOA;

alias PIMEMENUITEMINFOA = Pointer[Struct_tagIMEMENUITEMINFOA];

alias NPIMEMENUITEMINFOA = Pointer[Struct_tagIMEMENUITEMINFOA];

alias LPIMEMENUITEMINFOA = Pointer[Struct_tagIMEMENUITEMINFOA];

record Struct_tagIMEMENUITEMINFOW (
    cbSize : UInt,
    fType : UInt,
    fState : UInt,
    wID : UInt,
    hbmpChecked : HBITMAP,
    hbmpUnchecked : HBITMAP,
    dwItemData : CULong,
    szString : Array[UShort,80],
    hbmpItem : HBITMAP,
);

alias IMEMENUITEMINFOW = Struct_tagIMEMENUITEMINFOW;

alias PIMEMENUITEMINFOW = Pointer[Struct_tagIMEMENUITEMINFOW];

alias NPIMEMENUITEMINFOW = Pointer[Struct_tagIMEMENUITEMINFOW];

alias LPIMEMENUITEMINFOW = Pointer[Struct_tagIMEMENUITEMINFOW];

alias IMEMENUITEMINFO = IMEMENUITEMINFOA;

alias PIMEMENUITEMINFO = PIMEMENUITEMINFOA;

alias NPIMEMENUITEMINFO = NPIMEMENUITEMINFOA;

alias LPIMEMENUITEMINFO = LPIMEMENUITEMINFOA;

record Struct_tagIMECHARPOSITION (
    dwSize : CULong,
    dwCharPos : CULong,
    pt : POINT,
    cLineHeight : UInt,
    rcDocument : RECT,
);

alias IMECHARPOSITION = Struct_tagIMECHARPOSITION;

alias PIMECHARPOSITION = Pointer[Struct_tagIMECHARPOSITION];

alias NPIMECHARPOSITION = Pointer[Struct_tagIMECHARPOSITION];

alias LPIMECHARPOSITION = Pointer[Struct_tagIMECHARPOSITION];

alias IMCENUMPROC = CCodePointer[(Pointer[Struct_HIMC__],Int64),(Int)];

external ImmInstallIMEA(
    lpszIMEFileName : LPCSTR,
    lpszLayoutText : LPCSTR) HKL;

external ImmInstallIMEW(
    lpszIMEFileName : LPCWSTR,
    lpszLayoutText : LPCWSTR) HKL;

external ImmGetDefaultIMEWnd(
    argument0 : HWND) HWND;

external ImmGetDescriptionA(
    argument0 : HKL,
    argument1 : LPSTR,
    uBufLen : UInt) UInt;

external ImmGetDescriptionW(
    argument0 : HKL,
    argument1 : LPWSTR,
    uBufLen : UInt) UInt;

external ImmGetIMEFileNameA(
    argument0 : HKL,
    argument1 : LPSTR,
    uBufLen : UInt) UInt;

external ImmGetIMEFileNameW(
    argument0 : HKL,
    argument1 : LPWSTR,
    uBufLen : UInt) UInt;

external ImmGetProperty(
    argument0 : HKL,
    argument1 : CULong) CULong;

external ImmIsIME(
    argument0 : HKL) Int;

external ImmSimulateHotKey(
    argument0 : HWND,
    argument1 : CULong) Int;

external ImmCreateContext() HIMC;

external ImmDestroyContext(
    argument0 : HIMC) Int;

external ImmGetContext(
    argument0 : HWND) HIMC;

external ImmReleaseContext(
    argument0 : HWND,
    argument1 : HIMC) Int;

external ImmAssociateContext(
    argument0 : HWND,
    argument1 : HIMC) HIMC;

external ImmAssociateContextEx(
    argument0 : HWND,
    argument1 : HIMC,
    argument2 : CULong) Int;

external ImmGetCompositionStringA(
    argument0 : HIMC,
    argument1 : CULong,
    argument2 : LPVOID,
    argument3 : CULong) CLong;

external ImmGetCompositionStringW(
    argument0 : HIMC,
    argument1 : CULong,
    argument2 : LPVOID,
    argument3 : CULong) CLong;

external ImmSetCompositionStringA(
    argument0 : HIMC,
    dwIndex : CULong,
    lpComp : LPVOID,
    argument3 : CULong,
    lpRead : LPVOID,
    argument5 : CULong) Int;

external ImmSetCompositionStringW(
    argument0 : HIMC,
    dwIndex : CULong,
    lpComp : LPVOID,
    argument3 : CULong,
    lpRead : LPVOID,
    argument5 : CULong) Int;

external ImmGetCandidateListCountA(
    argument0 : HIMC,
    lpdwListCount : LPDWORD) CULong;

external ImmGetCandidateListCountW(
    argument0 : HIMC,
    lpdwListCount : LPDWORD) CULong;

external ImmGetCandidateListA(
    argument0 : HIMC,
    deIndex : CULong,
    argument2 : LPCANDIDATELIST,
    dwBufLen : CULong) CULong;

external ImmGetCandidateListW(
    argument0 : HIMC,
    deIndex : CULong,
    argument2 : LPCANDIDATELIST,
    dwBufLen : CULong) CULong;

external ImmGetGuideLineA(
    argument0 : HIMC,
    dwIndex : CULong,
    argument2 : LPSTR,
    dwBufLen : CULong) CULong;

external ImmGetGuideLineW(
    argument0 : HIMC,
    dwIndex : CULong,
    argument2 : LPWSTR,
    dwBufLen : CULong) CULong;

external ImmGetConversionStatus(
    argument0 : HIMC,
    argument1 : LPDWORD,
    argument2 : LPDWORD) Int;

external ImmSetConversionStatus(
    argument0 : HIMC,
    argument1 : CULong,
    argument2 : CULong) Int;

external ImmGetOpenStatus(
    argument0 : HIMC) Int;

external ImmSetOpenStatus(
    argument0 : HIMC,
    argument1 : Int) Int;

external ImmGetCompositionFontA(
    argument0 : HIMC,
    argument1 : LPLOGFONTA) Int;

external ImmGetCompositionFontW(
    argument0 : HIMC,
    argument1 : LPLOGFONTW) Int;

external ImmSetCompositionFontA(
    argument0 : HIMC,
    argument1 : LPLOGFONTA) Int;

external ImmSetCompositionFontW(
    argument0 : HIMC,
    argument1 : LPLOGFONTW) Int;

alias REGISTERWORDENUMPROCA = CCodePointer[(Pointer[CChar],CULong,Pointer[CChar],RawPointer),(Int)];

alias REGISTERWORDENUMPROCW = CCodePointer[(Pointer[UShort],CULong,Pointer[UShort],RawPointer),(Int)];

external ImmConfigureIMEA(
    argument0 : HKL,
    argument1 : HWND,
    argument2 : CULong,
    argument3 : LPVOID) Int;

external ImmConfigureIMEW(
    argument0 : HKL,
    argument1 : HWND,
    argument2 : CULong,
    argument3 : LPVOID) Int;

external ImmEscapeA(
    argument0 : HKL,
    argument1 : HIMC,
    argument2 : UInt,
    argument3 : LPVOID) Int64;

external ImmEscapeW(
    argument0 : HKL,
    argument1 : HIMC,
    argument2 : UInt,
    argument3 : LPVOID) Int64;

external ImmGetConversionListA(
    argument0 : HKL,
    argument1 : HIMC,
    argument2 : LPCSTR,
    argument3 : LPCANDIDATELIST,
    dwBufLen : CULong,
    uFlag : UInt) CULong;

external ImmGetConversionListW(
    argument0 : HKL,
    argument1 : HIMC,
    argument2 : LPCWSTR,
    argument3 : LPCANDIDATELIST,
    dwBufLen : CULong,
    uFlag : UInt) CULong;

external ImmNotifyIME(
    argument0 : HIMC,
    dwAction : CULong,
    dwIndex : CULong,
    dwValue : CULong) Int;

external ImmGetStatusWindowPos(
    argument0 : HIMC,
    argument1 : LPPOINT) Int;

external ImmSetStatusWindowPos(
    argument0 : HIMC,
    argument1 : LPPOINT) Int;

external ImmGetCompositionWindow(
    argument0 : HIMC,
    argument1 : LPCOMPOSITIONFORM) Int;

external ImmSetCompositionWindow(
    argument0 : HIMC,
    argument1 : LPCOMPOSITIONFORM) Int;

external ImmGetCandidateWindow(
    argument0 : HIMC,
    argument1 : CULong,
    argument2 : LPCANDIDATEFORM) Int;

external ImmSetCandidateWindow(
    argument0 : HIMC,
    argument1 : LPCANDIDATEFORM) Int;

external ImmIsUIMessageA(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt64,
    argument3 : Int64) Int;

external ImmIsUIMessageW(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt64,
    argument3 : Int64) Int;

external ImmGetVirtualKey(
    argument0 : HWND) UInt;

external ImmRegisterWordA(
    argument0 : HKL,
    lpszReading : LPCSTR,
    argument2 : CULong,
    lpszRegister : LPCSTR) Int;

external ImmRegisterWordW(
    argument0 : HKL,
    lpszReading : LPCWSTR,
    argument2 : CULong,
    lpszRegister : LPCWSTR) Int;

external ImmUnregisterWordA(
    argument0 : HKL,
    lpszReading : LPCSTR,
    argument2 : CULong,
    lpszUnregister : LPCSTR) Int;

external ImmUnregisterWordW(
    argument0 : HKL,
    lpszReading : LPCWSTR,
    argument2 : CULong,
    lpszUnregister : LPCWSTR) Int;

external ImmGetRegisterWordStyleA(
    argument0 : HKL,
    nItem : UInt,
    argument2 : LPSTYLEBUFA) UInt;

external ImmGetRegisterWordStyleW(
    argument0 : HKL,
    nItem : UInt,
    argument2 : LPSTYLEBUFW) UInt;

external ImmEnumRegisterWordA(
    argument0 : HKL,
    argument1 : REGISTERWORDENUMPROCA,
    lpszReading : LPCSTR,
    argument3 : CULong,
    lpszRegister : LPCSTR,
    argument5 : LPVOID) UInt;

external ImmEnumRegisterWordW(
    argument0 : HKL,
    argument1 : REGISTERWORDENUMPROCW,
    lpszReading : LPCWSTR,
    argument3 : CULong,
    lpszRegister : LPCWSTR,
    argument5 : LPVOID) UInt;

external ImmDisableIME(
    argument0 : CULong) Int;

external ImmEnumInputContext(
    idThread : CULong,
    lpfn : IMCENUMPROC,
    lParam : Int64) Int;

external ImmGetImeMenuItemsA(
    argument0 : HIMC,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPIMEMENUITEMINFOA,
    argument4 : LPIMEMENUITEMINFOA,
    argument5 : CULong) CULong;

external ImmGetImeMenuItemsW(
    argument0 : HIMC,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPIMEMENUITEMINFOW,
    argument4 : LPIMEMENUITEMINFOW,
    argument5 : CULong) CULong;

external ImmDisableTextFrameService(
    idThread : CULong) Int;
