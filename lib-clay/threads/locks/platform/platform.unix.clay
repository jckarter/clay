import unix.(
    pthread_mutex_t,
    pthread_mutexattr_t,
    pthread_mutex_init,
    pthread_mutex_destroy,
    pthread_mutex_lock,
    pthread_mutex_unlock,
    pthread_mutex_trylock,
);
import unix.errno.(EBUSY);
import threads.locks.protocol.(lock, unlock, tryLock);
import os.errors.(GenericOSError);

record Mutex (_pmutex:pthread_mutex_t);
override RegularRecord?(#Mutex) = false;

override Mutex() --> returned:Mutex
{
    var ok = pthread_mutex_init(@returned._pmutex, null(pthread_mutexattr_t));
    if (ok != 0)
        throw GenericOSError(ok, "pthread_mutex_init");
}

override destroy(m:Mutex) :
{
    // can fail if mutex is currently locked; what should it do in that case?
    var ok = pthread_mutex_destroy(@m._pmutex);
    assert(ok == 0);
}

override lock(m:Mutex) :
{
    var ok = pthread_mutex_lock(@m._pmutex);
    if (ok != 0)
        throw GenericOSError(ok, "pthread_mutex_lock");
}

override unlock(m:Mutex) :
{
    var ok = pthread_mutex_unlock(@m._pmutex);
    assert(ok == 0);
}

override tryLock(m:Mutex) : Bool
{
    var ok = pthread_mutex_trylock(@m._pmutex);
    assert(ok == 0 or ok == EBUSY);
    return ok == 0;
}
