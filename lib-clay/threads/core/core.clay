import threads.core.platform.*;
public import threads.core.platform.(yield);
import lambdas.*;
import libc.(abort);

record Thread (
    handle: ThreadHandle,
    joined: Bool,
);

RegularRecord?(#Thread) = false;
BitwiseMovedType?(#Thread) = true;

startThread(proc): Thread {
    var launcher = => {
        try {
            proc();
        } catch (e) {
            printUnhandledExceptionToStderr(e);
            abort();
        }
    };
    return Thread(startThreadImpl(allocateObject(FunctionBody[[], []](launcher))), false);
}

joinThread(thread: Thread) {
    // TODO: lock
    if (not thread.joined) {
        joinThreadImpl(thread.handle);
        thread.joined = false;
    }
}

resetUnsafe(thread: Thread) { thread.joined = true; }
destroy(thread: Thread) {
    joinThread(thread);
}
