
import data.vectors.generic.*;
import numbers.floats.(floatBits);
import referencetypes.(ReferenceType?);
import sharedpointers.*;
import data.strings.*;
import complex.*;
import data.vectors.*;


/// @section  hashing 

define hash;


/// @section  booleans, integers, floats, pointers, characters 

[when TypeSize(SizeT) == 4]
forceinline overload hash(x:Bool) = if (x) SizeT(1235232835u) else SizeT(3786054923u);
[when TypeSize(SizeT) == 8]
forceinline overload hash(x:Bool) =
    if (x) SizeT(2068536678500253190ul)
    else SizeT(12193288086786919936ul);

[T when Integer?(T)]
forceinline overload hash(x:T) = wrapCast(SizeT, x);

forceinline overload hash(x:Float32) =
    if (x == 0.0f) SizeT(0)
    else wrapCast(SizeT, floatBits(x));
[when TypeSize(SizeT) == 8]
forceinline overload hash(x:Float64) =
    if (x == 0.0f) SizeT(0)
    else wrapCast(SizeT, floatBits(x));
[when TypeSize(SizeT) == 4]
forceinline overload hash(x:Float64) = wrapCast(SizeT, bitshr(floatBits(x), 32));

forceinline overload hash(x:Float80) =
    wrapCast(SizeT, wrapAdd(floatBits(x).mantissa, floatBits(x).exponent));

[T when Imaginary?(T)]
forceinline overload hash(z:T) = hash(imagValue(z));

[T when Complex?(T)]
forceinline overload hash(z:T) = wrapAdd(
    hash(real(z)), wrapMultiply(hash(imagValue(z)), SizeT(31321)));

[T]
forceinline overload hash(x:Pointer[T]) = bitcast(SizeT, x);

forceinline default hash(x:Char) = wrapCast(SizeT, x);



/// @section  arrays 

[T,n]
forceinline overload hash(a:Array[T,n]) = hashSequence(a);



/// @section  tuples 

define hashValues;

forceinline default hashValues(..values) {
    var h = SizeT(0);
    ..for (x in values)
        h = wrapAdd(wrapMultiply(SizeT(7), h), wrapMultiply(SizeT(13), hash(x)));
    return h;
}
forceinline default hashValues(value) = hash(value);

[..T]
forceinline overload hash(x:Tuple[..T]) = hashValues(..tupleElements(x));


/// @section  records 

[T when Record?(T)]
forceinline overload hash(x:T) = hashValues(..recordFields(x));



/// @section  enumerations 

[T when Enum?(T)]
forceinline overload hash(x:T) = SizeT(x);



/// @section  shared pointers 

[T]
forceinline overload hash(x:SharedPointer[T]) = hash(x.ptr);



/// @section  strings 

forceinline default hash(a:String) = hashSequence(a);
forceinline overload hash(a:StringLiteralRef) = hashSequence(a);



/// @section  vectors 

[T]
forceinline overload hash(a:Vector[T]) = hashSequence(a);



/// @section  hashSequence 

hashSequence(a) {
    var h = SizeT(0);
    var f = SizeT(11);
    for (x in a) {
        h = wrapAdd(h, wrapMultiply(f, hashValues(x)));
        f = wrapSubtract(wrapMultiply(SizeT(2), f), SizeT(1));
    }
    return h;
}



/// @section  variants 

[T when Variant?(T)]
overload hash(x:T) = wrapAdd(SizeT(wrapMultiply(23, variantTag(x))), hash(*x));



/// @section  reference types 

[T when ReferenceType?(T)]
overload hash(x:T) = hash(referencePtr(x));


/// @section  statics 

[x]
forceinline overload hash(s:Static[x]) = SizeT(0);

[x when StringLiteral?(x)]
forceinline overload hash(#x) = hashSequence(iterator(x));
