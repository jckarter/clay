import libc;
import errors.backtrace.(showBacktrace);
import __operators__.(
    throwValue,
    continueException,
    exceptionIs?,
    exceptionAs,
    exceptionAsAny,
    unhandledExceptionInExternal,
    exceptionInInitializer,
    exceptionInFinalizer,
);


//
// Exception, NoException, currentException
//

variant Exception (NoException);

record NoException ();

overload Exception() = Exception(NoException());

private exceptionObject(exp:RawPointer) = ref Pointer[Exception](exp)^;


//
// throwValue, continueException
//

overload throwValue(x) {
    errorNoThrow(x);
}

[ when ExceptionsEnabled?]
overload throwValue(forward x) {
    var exp = allocateObject(Exception(x));
    signalException(RawPointer(exp));
}

overload continueException(exp:RawPointer) {
    signalException(exp);
}

private signalException(exp:RawPointer) __llvm__{
    %expv = load i8** %exp
    ret i8* %expv
}



//
// throwButPropagate
//

throwButPropagate(ex, ..T) {
    if (true)
        throw ex;
    else
        return forward ..mapValues(typeToLValue, ..T);
}

alias throwButPropagateLike(ex, ..expr) {
    if (true)
        throw ex;
    else
        return forward ..expr;
}



//
// exceptionIs?, exceptionAs, exceptionAsAny
//

[T]
overload exceptionIs?(#T, exp:RawPointer) = nestedVariantIs?(exceptionObject(exp), T);

[T]
overload exceptionAs(#T, exp:RawPointer) --> ex:T {
    ex <-- moveUnsafe(nestedVariantAs(exceptionObject(exp), T));
    freeRawMemory(exp);
}

overload exceptionAsAny(exp:RawPointer) --> ex:Exception {
    ex <-- moveUnsafe(exceptionObject(exp));
    freeRawMemory(exp);
}



//
// unhandledExceptionInExternal
// exceptionInInitializer, exceptionInFinalizer
//

private inline errorMsg(msg) {
    libc.fprintf(libc.stderr, cstring(msg));
    showBacktrace();
}

overload unhandledExceptionInExternal() {
    errorMsg("unhandled exception in external procedure\n");
    libc.abort();
}

overload exceptionInInitializer() {
    errorMsg("exception when initializing globals\n");
    libc.abort();
}

overload exceptionInFinalizer() {
    errorMsg("exception when destroying globals\n");
    libc.abort();
}
