import vectors.*;
import sequences.lazy.mapped.*;



/// @section  String? 

[A]
String?(#A) = false;

[A when Sequence?(A) and (Char == SequenceElementType(A))]
overload String?(#A) = true;



/// @section  SizedString? 

[A]
SizedString?(#A) = false;

[A when SizedSequence?(A) and (Char == SequenceElementType(A))]
overload SizedString?(#A) = true;



/// @section  ContiguousString? 

[A]
ContiguousString?(#A) = false;

[A when ContiguousSequence?(A) and (Char == SequenceElementType(A))]
overload ContiguousString?(#A) = true;



/// @section  CCompatibleString? 

[A]
CCompatibleString?(#A) = false;

[A when String?(A) and CallDefined?(cstring, A)]
overload CCompatibleString?(#A) = true;



/// @section  String 

alias String = Vector[Char];



/// @section  construct from sequences of bytes 

[A when Sequence?(A) and ByteSizedInteger?(SequenceElementType(A))]
forceinline overload String(a:A) = String(mapped(Char, a));



/// @section  construct from c-string 

[T when ByteSizedInteger?(T)]
forceinline overload String(cstr : Pointer[T]) = String(CStringRef(cstr));

forceinline overload String(cstr : Pointer[Char]) = String(CStringRef(cstr));



/// @section  convert to c-compatible string 

forceinline overload cstring(s: String) {
    reserve(s, size(s)+1);
    end(s)^ = Char(0);
    return Pointer[Int8](s.data);
}

/// @section  convert to cstringref 

forceinline overload CStringRef(s : String) = CStringRef(cstring(s));
