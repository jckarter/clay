import printer.protocol.(printTo,printReprTo);


/// @section  SharedPointer 

record RefCounted[T] (
    refCount:Int,
    value:T,
);

record SharedPointer[T] (
    ptr: Pointer[RefCounted[T]]
);

[T]
RegularRecord?(#SharedPointer[T]) = false;



/// @section  new 

[T]
alias new(x:T) {
    var ptr = allocateRawMemory(RefCounted[T], SizeT(1));
    ptr^.refCount = 1;
    try {
        ptr^.value <-- x;
    }
    catch (e) {
        freeRawMemory(ptr);
        throw e;
    }
    return SharedPointer(ptr);
}

alias newShared = new;


/// @section  constructors, moveUnsafe, resetUnsafe, assign, destroy 

[T]
forceinline SharedPointer[T]() {
    return SharedPointer(null(RefCounted[T]));
}

[T]
forceinline SharedPointer[T](src:SharedPointer[T]) {
    if (not null?(src))
        src.ptr^.refCount +: 1;
    return SharedPointer(src.ptr);
}

[T]
BitwiseMovedType?(#SharedPointer[T]) = true;

[T]
forceinline resetUnsafe(p : SharedPointer[T]) {
    p <-- SharedPointer[T]();
}

[T]
forceinline assign(ref dest:SharedPointer[T], ref src:SharedPointer[T]) {
    if (dest.ptr == src.ptr)
        return;
    dest = SharedPointer[T](src);
}

[T]
forceinline destroy(p : SharedPointer[T]) {
    if (not null?(p)) {
        p.ptr^.refCount -: 1;
        if (p.ptr^.refCount == 0) {
            destroy(p.ptr^.value);
            freeRawMemory(p.ptr);
        }
    }
}



/// @section  dereference, null?, nullShared 

[T]
forceinline dereference(p : SharedPointer[T]) = ref p.ptr^.value;

[T]
forceinline null?(p : SharedPointer[T]) = null?(p.ptr);

[T]
forceinline nullShared(#T) = SharedPointer[T]();



/// @section  equality 
[T]
forceinline equals?(p: SharedPointer[T], q: SharedPointer[T])
    = p.ptr == q.ptr;



/// @section  printTo - SharedPointer 

[T]
printTo(stream, x:SharedPointer[T]) {
    printTo(stream, SharedPointer[T], "(");
    if (not null?(x))
        printTo(stream, x^);
    printTo(stream, ")");
}



/// @section  printReprTo - SharedPointer 

[T]
printReprTo(stream, x:SharedPointer[T]) {
    // FIXME: handle cycles
    printTo(stream, SharedPointer[T], "(");
    if (not null?(x))
        printReprTo(stream, x^);
    printTo(stream, ")");
}
