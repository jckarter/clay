
record PushbackIterator[S, T](
  pending : Vector[S],
  base : T
);

[S, T] overload nextValue(it : PushbackIterator[S, T]) {
  if (not empty?(it.pending)) return Maybe(pop(it.pending));
  else return getMaybeValue(nextValue(it.base));
}

[S, T] overload push(it : PushbackIterator[S, T], x : S){ push(it.pending, x); }

[T] withPushback(it : T) : PushbackIterator[IteratorTargetType(T), T] {
  alias S = IteratorTargetType(T);
  return PushbackIterator(Vector[S](), it);
}
