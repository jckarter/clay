
import lua.capi.generated.*;


//
// from lua.h
//

/* option for multiple returns in `lua_pcall' and `lua_call' */
alias LUA_MULTRET = -1;

/*
** pseudo-indices
*/
alias LUA_REGISTRYINDEX = -10000;
alias LUA_ENVIRONINDEX  = -10001;
alias LUA_GLOBALSINDEX  = -10002;
lua_upvalueindex(i) = LUA_GLOBALSINDEX - i;


/* thread status; 0 is OK */
alias LUA_YIELD     = 1;
alias LUA_ERRRUN    = 2;
alias LUA_ERRSYNTAX = 3;
alias LUA_ERRMEM    = 4;
alias LUA_ERRERR    = 5;

/*
** basic types
*/
alias LUA_TNONE          = -1;
alias LUA_TNIL           = 0;
alias LUA_TBOOLEAN       = 1;
alias LUA_TLIGHTUSERDATA = 2;
alias LUA_TNUMBER        = 3;
alias LUA_TSTRING        = 4;
alias LUA_TTABLE         = 5;
alias LUA_TFUNCTION      = 6;
alias LUA_TUSERDATA      = 7;
alias LUA_TTHREAD        = 8;

/* minimum Lua stack available to a C function */
alias LUA_MINSTACK = 20;

/*
** garbage-collection function and options
*/
alias LUA_GCSTO        = 0;
alias LUA_GCRESTART    = 1;
alias LUA_GCCOLLECT    = 2;
alias LUA_GCCOUNT      = 3;
alias LUA_GCCOUNTB     = 4;
alias LUA_GCSTEP       = 5;
alias LUA_GCSETPAUSE   = 6;
alias LUA_GCSETSTEPMUL = 7;


/* 
** some useful macros
*/

lua_pop(l:Pointer[lua_State], n:Int) { lua_settop(l, -n-1); }

lua_newtable(l:Pointer[lua_State]) { lua_createtable(l, 0, 0); }

lua_register(l:Pointer[lua_State], name:Pointer[CChar], f:lua_CFunction) {
    lua_pushcfunction(l, f);
    lua_setglobal(l, name);
}

lua_pushcfunction(l:Pointer[lua_State], f:lua_CFunction) {
    lua_pushcclosure(l, f, 0);
}

lua_strlen(l:Pointer[lua_State], i:Int) = lua_objlen(l, i);

lua_isfunction(l:Pointer[lua_State], n:Int) = lua_type(l, n) == LUA_TFUNCTION;
lua_istable(l:Pointer[lua_State], n:Int) = lua_type(l, n) == LUA_TTABLE;
lua_islightuserdata(l:Pointer[lua_State], n:Int) = lua_type(l, n) == LUA_TLIGHTUSERDATA;
lua_isnil(l:Pointer[lua_State], n:Int) = lua_type(l, n) == LUA_TNIL;
lua_isboolean(l:Pointer[lua_State], n:Int) = lua_type(l, n) == LUA_TBOOLEAN;
lua_isthread(l:Pointer[lua_State], n:Int) = lua_type(l, n) == LUA_TTHREAD;
lua_isnone(l:Pointer[lua_State], n:Int) = lua_type(l, n) == LUA_TNONE;
lua_isnoneornil(l:Pointer[lua_State], n:Int) = lua_type(l, n) <= 0;

[S | ContiguousString?(S)]
lua_pushliteral(l:Pointer[lua_State], s:S) {
    lua_pushlstring(l, Pointer[CChar](begin(s)), size(s));
}

lua_setglobal(l:Pointer[lua_State], s:Pointer[CChar]) {
    lua_setfield(l, LUA_GLOBALSINDEX, s);
}

lua_getglobal(l:Pointer[lua_State], s:Pointer[CChar]) {
    lua_getfield(l, LUA_GLOBALSINDEX, s);
}

lua_tostring(l:Pointer[lua_State], i:Int) =
    lua_tolstring(l, i, null(SizeT));


/*
** compatibility macros and functions
*/

lua_open() = luaL_newstate();

lua_getregistry(l:Pointer[lua_State]) { lua_pushvalue(l, LUA_REGISTRYINDEX); }
lua_getgccount(l:Pointer[lua_State]) = lua_gc(l, LUA_GCCOUNT, 0);

/*
** Event codes
*/
alias LUA_HOOKCALL    = 0;
alias LUA_HOOKRET     = 1;
alias LUA_HOOKLINE    = 2;
alias LUA_HOOKCOUNT   = 3;
alias LUA_HOOKTAILRET = 4;

/*
** Event masks
*/
alias LUA_MASKCALL  = bitshl(1, LUA_HOOKCALL);
alias LUA_MASKRET   = bitshl(1, LUA_HOOKRET);
alias LUA_MASKLINE  = bitshl(1, LUA_HOOKLINE);
alias LUA_MASKCOUNT = bitshl(1, LUA_HOOKCOUNT);


//
// from lualib.h
//

/* Key to file-handle type */
alias LUA_FILEHANDLE = "FILE*";

alias LUA_COLIBNAME = "coroutine";
alias LUA_TABLIBNAME = "table";
alias LUA_IOLIBNAME = "io";
alias LUA_OSLIBNAME = "os";
alias LUA_STRLIBNAME = "string";
alias LUA_MATHLIBNAME = "math";
alias LUA_DBLIBNAME = "debug";
alias LUA_LOADLIBNAME = "package";


//
// from lauxlib.h
//

luaL_getn(l:Pointer[lua_State], i:Int) = Int(lua_objlen(l, i));
// luaL_setn is a no-op

alias LUA_ERRFILE = LUA_ERRERR + 1;


/*
** some useful macros
*/

alias luaL_argcheck(l:Pointer[lua_State], cond, numarg:Int, extramsg:Pointer[CChar]) {
    if (not cond)
        luaL_argerror(l, numarg, extramsg);
}

luaL_checkstring(l:Pointer[lua_State], n:Int) =
    luaL_checklstring(l, n, null(SizeT));

luaL_optstring(l:Pointer[lua_State], n:Int, d:Pointer[CChar]) =
    luaL_optlstring(l, n, d, null(SizeT));

luaL_checkint(l:Pointer[lua_State], n:Int) =
    Int(luaL_checkinteger(l, n));

luaL_optint(l:Pointer[lua_State], n:Int, d:Int) =
    Int(luaL_optinteger(l, n, CLong(d)));

luaL_checklong(l:Pointer[lua_State], n:Int) =
    CLong(luaL_checkinteger(l, n));

luaL_optlong(l:Pointer[lua_State], n:Int, d:CLong) =
    CLong(luaL_optinteger(l, n, CLong(d)));

luaL_typename(l:Pointer[lua_State], i:Int) =
    lua_typename(l, lua_type(l, i));

luaL_dofile(l:Pointer[lua_State], fileName:Pointer[CChar]) {
    var result = luaL_loadfile(l, fileName);
    if (result != 0)
        return result;
    return lua_pcall(l, 0, LUA_MULTRET, 0);
}

luaL_dostring(l:Pointer[lua_State], s:Pointer[CChar]) {
    var result = luaL_loadstring(l, s);
    if (result != 0)
        return result;
    return lua_pcall(l, 0, LUA_MULTRET, 0);
}

luaL_getmetatable(l:Pointer[lua_State], name:Pointer[CChar]) {
    lua_getfield(l, LUA_REGISTRYINDEX, name);
}

luaL_opt(l:Pointer[lua_State], f, n:Int, d) {
    if (lua_isnoneornil(l,n))
        return d;
    else
        return f(l, n);
}


/*
** Generic Buffer manipulation
*/

luaL_addchar(b:Pointer[luaL_Buffer], c) {
    if (not (b@.p < end(b@.buffer)))
        luaL_prepbuffer(b);
    b@.p = CChar(c);
    b@.p += 1;
}

luaL_putchar(b:Pointer[luaL_Buffer], c) { luaL_addchar(b, c); }

luaL_addsize(b:Pointer[luaL_Buffer], n) {
    b@.p += n;
}


/* compatibility with ref system */

alias LUA_NOREF = -2;
alias LUA_REFNIL = -1;

lua_ref(l:Pointer[lua_State], lock) {
    if (lock) {
        return luaL_ref(l, LUA_REGISTRYINDEX);
    }
    else {
        lua_pushstring(l, cstring("unlocked references are obsolete"));
        lua_error(l);
        return 0;
    }
}

lua_unref(l:Pointer[lua_State], ref_:Int) {
    luaL_unref(l, LUA_REGISTRYINDEX, ref_);
}

lua_getref(l:Pointer[lua_State], ref_:Int) {
    lua_rawget(l, LUA_REGISTRYINDEX, ref_);
}

alias luaL_reg = luaL_Reg;
