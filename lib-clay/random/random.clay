import math.native.constants.(M_PI);
import math.libm.(sqrt,cos,log);
import printer.formatter.(hex, repr);
import libc;

RNG?(G) = CallDefined?(generate, G, Static[UInt32]);

// Implementation of XOR-shift RNGs by George Marsaglia
record XORShiftRNG(
  w : UInt32,
  x : UInt32,
  y : UInt32,
  z : UInt32
);

XORShiftRNG() = XORShiftRNG(pr(), pr(), pr(), pr());

define generate;

[I when Integer?(I) and TypeSize(I) <= 32] generate(r, #I)
    = wrapCast(I, generate(r, UInt32));

generate(r : XORShiftRNG, #UInt32){
  var t = xsl(r.x, 15);
  r.x = r.y;
  r.y = r.z;
  r.z = r.w;
  r.w = xor(xsr(r.w, 21), xsr(t, 4));

  return r.w;
}

generate(r, #UInt64){
  var x = UInt64(generate(r, UInt32));
  var y = UInt64(generate(r, UInt32));

  return bitor(wrapBitshl(x, 32), y);
}

generate(r, #Int64) = wrapCast(Int64, generate(r, UInt64));

[n, T] generate(r, #Array[T, n]){
  var result = Array[T, n]();

  for(i in range(n)) result[i] <-- generate(r, i);

  return move(result);
}

define uniform;

// TODO: This is a bit of a rubbish default implementation
// It works fine for integers (I think) but is almost certainly wrong for floats
// Either way it could be a lot faster.
[T when Integer?(T)] uniform(rnd, from : T, to : T){
  if(safeFromOverflow?(from, to)){
    var ub = to - from;
    var mask = toMask(ub);

    var result = bitand(mask, generate(rnd, T));

    while(result >= ub) result = bitand(mask, generate(rnd, T));

    return result + from;
  } else {
    var result = generate(rnd, T);

    while(result < from or result >= to) result = generate(rnd, T);

    return result;
  }
}

uniform(rnd, from : Float32, to : Float32)
    = from + (to - from) * smallFloat(rnd);

uniform(rnd, from : Float64, to : Float64)
    = from + (to - from) * smallDouble(rnd);

uniform(rnd, #Float32) = uniform(rnd, 0.f ,1.f);
uniform(rnd, #Float64) = uniform(rnd, 0. ,1.);

define normal;

[T when Numeric?(T)] normal(rnd, mean:T, stdev:T)
    = mean + stdev * sqrt(-T(2) * log(uniform(rnd,T(0),T(1)))) * cos(T(2) * M_PI * uniform(rnd,T(0),T(1)));
[T when Numeric?(T)] normal(rnd, mean:T) = normal(rnd, mean, T(1));

private smallDouble(r) =
  bitcast(Double, bitor(mask(generate(r, Int64), 52), bitcast(UInt64,1.0)))-1;

private smallFloat(r) = mask(generate(r, UInt32), 24) / Float32(bitshl(1, 24));

private xor(x, y) = bitxor(x, y);
private xsl(x, n) = xor(x, wrapBitshl(x, n));
private xsr(x, n) = xor(x, bitshr(x, n));
[I] private mask(x:I, n) = bitand(x, bitshl(I(1), n) - I(1));
private pr() = UInt32(libc.random());

private define safeFromOverflow?;

[T when UnsignedInteger?(T)] safeFromOverflow?(x : T, y : T) = true;
[T when SignedInteger?(T)] safeFromOverflow?(x : T, y : T) = (x < T(0) and T(0) < y) or (y - x > T(0));

private define toMask;

private forceinline pb(x, n){ x = bitor(x, bitshr(x, n)); }
[T] toMask(x:T){
  var t = x;
  pb(t, 1);
  pb(t, 2);
  pb(t, 4);
  if (TypeSize(T) > 1) {
    pb(t, 8);
    if (TypeSize(T) > 2) {
      pb(t, 16);
      if (TypeSize(T) > 4) {
        pb(t, 32);
      }
    }
  }
  return t;
}
