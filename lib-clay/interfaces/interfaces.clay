import libc;

InterfaceType?(X) = false;
define InterfaceMembers;

private ImplicitInterfaceMembers() = [destroy, [], []];

private VtblSlotFunction(memFun) = memFun.0;
private VtblSlotInputTypes(memFun) = ..unpack(memFun.1);
private VtblSlotOutputTypes(memFun) = ..unpack(memFun.2);

InterfaceMember?(I, fn) = false;

[I, fn when InterfaceType?(I)]
overload InterfaceMember?(#I, #fn)
    = inValues?(fn, ..mapValues(VtblSlotFunction, ..InterfaceMembers(I)));

private VtblSlotType(memFun) = CodePointer[
    [Opaque, ..VtblSlotInputTypes(memFun)],
    [..VtblSlotOutputTypes(memFun)]
];

private record InterfaceVtbl[..memberFunctions]
    = ["methods", Tuple[..mapValues(VtblSlotType, ..memberFunctions)]];

interfaceType(..memberFunctions) = recordWithProperties(
    [
        [InterfaceType?, #true],
        [InterfaceMembers, 
            ..ImplicitInterfaceMembers(),
            ..memberFunctions
        ],
    ],
    ["vtbl", Pointer[InterfaceVtbl[..ImplicitInterfaceMembers(), ..memberFunctions]]],
    ["this", Opaque],
);

[I when InterfaceType?(I)]
overload RegularRecord?(#I) = false;

[I when InterfaceType?(I)]
overload destroy(i: I) { invoke(destroy, @i); }

private vtblSlotMember(T, memFun) = VtblSlotType(memFun)(
    makeCodePointer(VtblSlotFunction(memFun), T, ..VtblSlotInputTypes(memFun))
);

[I, T when InterfaceType?(I)]
private makeInterfaceVtbl(#I, #T) = InterfaceVtbl[..InterfaceMembers(I)](
    Tuple(
        ..mapValues(slot => vtblSlotMember(T, slot), ..InterfaceMembers(I))
    )
);

private var interfaceVtbl[I, T] = makeInterfaceVtbl(I, T);

BoxSize(T) = TypeSize(RawPointer) + TypeSize(T);

[I, T when InterfaceType?(I)]
alias allocateBox(#I, this: T) : Pointer[I] {
    var ptr = Pointer[I](libc.malloc(BoxSize(T)));
    ptr^.vtbl = @interfaceVtbl[I, T];

    try {
        Pointer[T](@ptr^.this)^ <-- this;
    }
    catch (ex) {
        libc.free(RawPointer(ptr));
        throw ex;
    }
    return ptr;
}

[..memberFunctions, fn]
private vtblSlot(vtbl: InterfaceVtbl[..memberFunctions], #fn)
    = staticIndex(
        vtbl.methods,
        #valueIndex(fn, ..mapValues(VtblSlotFunction, ..memberFunctions))
    );

[I, fn when InterfaceMember?(I, fn)]
invoke(#fn, i: Pointer[I], forward ..args)
    = ..vtblSlot(i^.vtbl^, fn)(i^.this, ..args);
