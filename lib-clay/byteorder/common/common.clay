import byteorder.constants.*;
import byteorder.platform.*;
import core.numbers.(wrapBitshl as shl);
import core.operators.(bitshr as shr);

alias BigEndian? = ByteOrder == BigEndian;
alias LittleEndian? = ByteOrder == LittleEndian;

[I when Integer?(I)]
define networkToHost(n:I): I;
[I when Integer?(I)]
define hostToNetwork(n:I): I;

[I when Integer?(I) and LittleEndian?]
overload networkToHost(n:I) --> returned:I {
    alias A = Array[UInt8, Int(TypeSize(I))];
    ref bytes = bitcast(A, n);
    ref returnedBytes = bitcast(A, returned);
    returnedBytes <-- array(..reverseValues(..arrayElements(bytes)));
}

[I8 when inValues?(I8, Int8, UInt8)]
overload networkToHost(n:I8) = n;

[when BigEndian?]
overload networkToHost(n) = n;
[when BigEndian?]
overload hostToNetwork(n) = n;

[when LittleEndian?]
overload hostToNetwork(n) = networkToHost(n);
