import data.sequences.force.*;


/// @section  SequenceHandle 

record SequenceHandle[A] (
    inner : Pointer[A]
);

[A]
LightweightSequence?(#SequenceHandle[A]) = true;

[A]
ContiguousSequence?(#SequenceHandle[A]) = true;

[A when CallDefined?(UnderlyingContainerConstructor, Static[A])]
UnderlyingContainerConstructor(#SequenceHandle[A]) =
    UnderlyingContainerConstructor(A);



/// @section  sequenceHandle 

[A when Sequence?(A)]
forceinline sequenceHandle(seq:A) = SequenceHandle(@seq);



/// @section  sequence operations 

[A, ..ARGS when CallDefined?(iterator, A, ..ARGS)]
forceinline iterator(seq:SequenceHandle[A], forward ..args:ARGS)
    = forward ..iterator(seq.inner^, ..args);

[A, ..ARGS when CallDefined?(reverseIterator, A, ..ARGS)]
forceinline reverseIterator(seq:SequenceHandle[A], forward ..args:ARGS)
    = forward ..reverseIterator(seq.inner^, ..args);

[A, ..ARGS when CallDefined?(size, A, ..ARGS)]
forceinline size(seq:SequenceHandle[A], forward ..args:ARGS)
    = forward ..size(seq.inner^, ..args);

[A when CallDefined?(StaticSize, Static[A])]
forceinline StaticSize(#SequenceHandle[A]) = StaticSize(A);

[A, ..ARGS when CallDefined?(index, A, ..ARGS)]
forceinline index(seq:SequenceHandle[A], forward ..args:ARGS)
    = forward ..index(seq.inner^, ..args);

[A, ..ARGS when CallDefined?(begin, A, ..ARGS)]
forceinline begin(seq:SequenceHandle[A], forward ..args:ARGS)
    = forward ..begin(seq.inner^, ..args);

[A, ..ARGS when CallDefined?(end, A, ..ARGS)]
forceinline end(seq:SequenceHandle[A], forward ..args:ARGS)
    = forward ..end(seq.inner^, ..args);

[A, ..ARGS when CallDefined?(front, A, ..ARGS)]
forceinline front(seq:SequenceHandle[A], forward ..args:ARGS)
    = forward ..front(seq.inner^, ..args);

[A, ..ARGS when CallDefined?(back, A, ..ARGS)]
forceinline back(seq:SequenceHandle[A], forward ..args:ARGS)
    = forward ..back(seq.inner^, ..args);

[A, ..ARGS when CallDefined?(push, A, ..ARGS)]
forceinline push(seq:SequenceHandle[A], forward ..args:ARGS)
    = forward ..push(seq.inner^, ..args);

[A, ..ARGS when CallDefined?(pop, A, ..ARGS)]
forceinline pop(seq:SequenceHandle[A], forward ..args:ARGS)
    = forward ..pop(seq.inner^, ..args);

[A, ..ARGS when CallDefined?(clear, A, ..ARGS)]
forceinline clear(seq:SequenceHandle[A], forward ..args:ARGS)
    = forward ..clear(seq.inner^, ..args);

[A, ..ARGS when CallDefined?(insert, A, ..ARGS)]
forceinline insert(seq:SequenceHandle[A], forward ..args:ARGS)
    = forward ..insert(seq.inner^, ..args);

[A, ..ARGS when CallDefined?(remove, A, ..ARGS)]
forceinline remove(seq:SequenceHandle[A], forward ..args:ARGS)
    = forward ..remove(seq.inner^, ..args);

[A, ..ARGS when CallDefined?(reserve, A, ..ARGS)]
forceinline reserve(seq:SequenceHandle[A], forward ..args:ARGS)
    = forward ..reserve(seq.inner^, ..args);
