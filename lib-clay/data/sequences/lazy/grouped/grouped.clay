import data.sequences.util.*;
import data.vectors.*;
import data.sequences.lazy.sliced.*;
import data.sequences.force.*;

/// @section  grouped() function 
private record Group[S] (
    seq: S,
    groupSize: SizeT,
);

[S, I when Sequence?(S) and Integer?(I)]
grouped(forward seq: S, groupSize: I) = Group(wrapSequence(seq), SizeT(groupSize));

[S when LightweightSequence?(S)]
LightweightSequence?(#Group[S]) = true;

[S when CallDefined?(UnderlyingContainerConstructor, Static[S])]
UnderlyingContainerConstructor(#Group[S]) =
    UnderlyingContainerConstructor(S);

[S when SizedSequence?(S)]
size(group: Group[S]) = size(group.seq) \ group.groupSize;

private indexEndpoints(n, groupSize) {
    var b = n * groupSize;
    var e = b + groupSize;
    return b, e;
}

[S, I when RandomAccessSequence?(S) and Integer?(I)]
index(group: Group[S], n: I) {
    var b, e = ..indexEndpoints(n, group.groupSize);
    return sliced(group.seq, b, e);
}

[S, I when CoordinateSequence?(S) and RandomAccessSequence?(S) and Integer?(I)]
index(group: Group[S], n: I) {
    var b, e = ..indexEndpoints(n, group.groupSize);
    return CoordinateRange(begin(group.seq) + b, begin(group.seq) + e);
}

[S when Sequence?(S)]
iterator(group: Group[S])
    = GroupIterator(iterator(group.seq), group.groupSize);

[S when CoordinateSequence?(S)]
iterator(group: Group[S])
    = CoordinateRange(begin(group), end(group));



/// @section  group iterator 
private record GroupIterator[I] (
    iter: I,
    groupSize: SizeT,
);

[I] nextValue(giter: GroupIterator[I]) {
    var v = Vector[IteratorTargetType(I)]();
    var i = 0;

    while (var value = nextValue(giter.iter); hasValue?(value)) {
        push(v, getValue(value));
        i +: 1;
        if (i >= giter.groupSize)
            break;
    }
    return if (i == 0) nothing(Vector[IteratorTargetType(I)]) else Maybe(move(v));
}



/// @section  forward group coordinate 
private record FGroupCoordinate[Coordinate] (
    beginCoord: Coordinate,
    endCoord: Coordinate,
    sequenceEndCoord: Coordinate,
    groupSize: SizeT,
);

[C]
equals?(i: FGroupCoordinate[C], j: FGroupCoordinate[C]) = equals?(i.beginCoord, j.beginCoord);

[S when Sequence?(S)]
begin(group: Group[S]) {
    var b = begin(group.seq);
    var e = b;
    var sequenceEnd = end(group.seq);
    for (i in range(group.groupSize))
        inc(e);

    return FGroupCoordinate(move(b), move(e), move(sequenceEnd), group.groupSize);
}
[S when Sequence?(S)]
end(group: Group[S]) {
    var e = end(group.seq);
    return FGroupCoordinate(e, e, e, group.groupSize);
}

[C]
inc(ref c: FGroupCoordinate[C]) {
    if (c.endCoord == c.sequenceEndCoord)
        c.beginCoord = c.endCoord;
    else
        for (i in range(group.groupSize)) {
            inc(c.beginCoord);
            inc(c.endCoord);
        }
}

[C]
dec(ref c: FGroupCoordinate[C]) {
    if (c.beginCoord == c.sequenceEndCoord)
        for (i in range(group.groupSize))
            dec(c.beginCoord);
    else
        for (i in range(group.groupSize)) {
            dec(c.beginCoord);
            dec(c.endCoord);
        }
}

[C]
dereference(c: FGroupCoordinate[C]) {
    return CoordinateRange(c.beginCoord, c.endCoord);
}

[C]
getValue(c: FGroupCoordinate[C]) {
    return CoordinateRange(c.beginCoord, c.endCoord);
}
[C]
hasValue?(c: FGroupCoordinate[C]) {
    return hasValue?(c.beginCoord);
}



/// @section  random access group coordinate 
private record RAGroupCoordinate[Coordinate] (
    coord: Coordinate,
    groupSize: SizeT,
);

[C]
lesser?(
    i: RAGroupCoordinate[C],
    j: RAGroupCoordinate[C]
) = lesser?(i.coord, j.coord);

[C]
equals?(
    i: RAGroupCoordinate[C],
    j: RAGroupCoordinate[C]
) = equals?(i.coord, j.coord);

[S when RandomAccessSequence?(S)]
begin(group: Group[S])
    = RAGroupCoordinate(begin(group.seq), group.groupSize);
[S when RandomAccessSequence?(S)]
end(group: Group[S])
    = RAGroupCoordinate(end(group.seq), group.groupSize);

[C, I when Integer?(I)]
add(i: RAGroupCoordinate[C], n: I)
    = RAGroupCoordinate(i.coord + n * i.groupSize, i.groupSize);
[C, I when Integer?(I)]
subtract(i: RAGroupCoordinate[C], n: I)
    = RAGroupCoordinate(i.coord - n * i.groupSize, i.groupSize);
[C, I when Integer?(I)]
updateAssign(#add, i: RAGroupCoordinate[C], n: I) {
    i.coord +: n * i.groupSize;
}
[C, I when Integer?(I)]
updateAssign(#subtract, i: RAGroupCoordinate[C], n: I) {
    i.coord -: n * i.groupSize;
}

[C]
subtract(i: RAGroupCoordinate[C], j: RAGroupCoordinate[C])
    = PtrInt(i.coord - j.coord) \ PtrInt(i.groupSize);

[C]
inc(ref i: RAGroupCoordinate[C]) {
    i.coord +: i.groupSize;
}

[C]
dec(ref i: RAGroupCoordinate[C]) {
    i.coord -: i.groupSize;
}

[C]
dereference(i: RAGroupCoordinate[C])
    = CoordinateRange(i.coord, i.coord + i.groupSize);

[C, I when Integer?(I)]
index(i: RAGroupCoordinate[C], n: I) {
    var b, e = ..indexEndpoints(n, i.groupSize);
    return CoordinateRange(i.coord + b, i.coord + e);
}

[C]
getValue(i: RAGroupCoordinate[C])
    = CoordinateRange(i.coord, i.coord + i.groupSize);
[C]
hasValue?(i: RAGroupCoordinate[C])
    = hasValue?(i.coord);

