
import data.sequences.util.*;
import data.sequences.handle.*;
import data.sequences.force.*;



/// @section  Sliced 

record Sliced[A](
    seq : A,
    first : SequenceCoordinateType(A),
    last : SequenceCoordinateType(A),
);

[A when LightweightSequence?(A)]
override LightweightSequence?(#Sliced[A]) = true;

[A when ContiguousSequence?(A)]
override ContiguousSequence?(#Sliced[A]) = true;

[A when CallDefined?(UnderlyingContainerConstructor, Static[A])]
override UnderlyingContainerConstructor(#Sliced[A]) =
    UnderlyingContainerConstructor(A);



/// @section  sliced, slicedFrom, slicedUpto 

define sliced;

[A, C when CoordinateSequence?(A) and (C == SequenceCoordinateType(A))]
forceinline override sliced(forward a:A, first:C, last:C) {
    alias T = Type(wrapSequence(a));
    return Sliced[T](wrapSequence(a), first, last);
}

[A, C when C == SequenceCoordinateType(A)]
forceinline override sliced(ref a:Sliced[A], first:C, last:C) {
    alias T = Type(wrapSequence(a.seq));
    return Sliced[T](wrapSequence(a.seq), first, last);
}

[A, C when C == SequenceCoordinateType(A)]
forceinline override sliced(rvalue a:Sliced[A], first:C, last:C) {
    alias T = Type(move(a.seq));
    Sliced[T](move(a.seq), first, last);
}

[A, I, J when RandomAccessSequence?(A) and Integer?(I) and Integer?(J)]
forceinline override sliced(forward a:A, first:I, last:J) {
    var b = begin(a);
    assert["boundsCheck"](first >= 0 and first <= size(a) and last >= 0 and last <= size(a),
        A, " sliced indices out of bounds");
    return sliced(a, b+first, b+last);
}

define slicedFrom;

[A, C when CoordinateSequence?(A) and (C == SequenceCoordinateType(A))]
forceinline override slicedFrom(forward a:A, first:C) =
    sliced(a, first, end(a));

[A, I when RandomAccessSequence?(A) and Integer?(I)]
forceinline override slicedFrom(forward a:A, first:I) {
    assert["boundsCheck"](first >= 0 and first <= size(a),
        A, " slicedFrom index out out of bounds");
    return slicedFrom(a, begin(a)+first);
}

define slicedUpto;

[A, C when CoordinateSequence?(A) and (C == SequenceCoordinateType(A))]
forceinline override slicedUpto(forward a:A, last:C) =
    sliced(a, begin(a), last);

[A, I when RandomAccessSequence?(A) and Integer?(I)]
forceinline override slicedUpto(forward a:A, last:I) {
    assert["boundsCheck"](last >= 0 and last <= size(a),
        A, " slicedUpto index out out of bounds");
    return slicedUpto(a, begin(a)+last);
}



/// @section  sequence operations 

[A]
forceinline override iterator(a:Sliced[A]) = coordinateRange(a.first, a.last);

[A when RandomAccessSequence?(A)]
forceinline override reverseIterator(a:Sliced[A]) =
    reverseCoordinateRange(a.last, a.first);

[A when RandomAccessSequence?(A)]
forceinline override size(a:Sliced[A]) =
    if (a.last < a.first) SizeT(0) else SizeT(a.last - a.first);

[A, I when RandomAccessSequence?(A) and Integer?(I)]
forceinline override index(a:Sliced[A], i:I) = forward ..(a.first + i)^;

[A]
forceinline override begin(a:Sliced[A]) = a.first;

[A]
forceinline override end(a:Sliced[A]) = a.last;

[A]
forceinline override front(a:Sliced[A]) = forward ..a.first^;

[A when RandomAccessSequence?(A)]
forceinline override back(a:Sliced[A]) = forward ..a[size(a)-1]^;
