import data.sequences.force.*;
import data.sequences.util.*;
import data.sequences.lazy.zipped.*;


/// @section  filtered 

define filtered(predicate, ..seqs);

forceinline filtered(predicate, forward ..seqs) = Filtered(predicate, zipped(..seqs));

forceinline filtered(predicate, forward seq) =
    Filtered(predicate, wrapSequence(seq));


private record Filtered[F, A] (
    predicate : F,
    seq : A,
);

[F, A when LightweightSequence?(A)]
LightweightSequence?(#Filtered[F,A]) = true;

[F,A when CallDefined?(UnderlyingContainerConstructor, Static[A])]
UnderlyingContainerConstructor(#Filtered[F,A]) =
    UnderlyingContainerConstructor(A);



/// @section  iterator, reverseIterator 

[F, A]
forceinline iterator(a:Filtered[F, A])
    = FilteredIterator(a.predicate, iterator(a.seq));

[F, A when CallDefined?(reverseIterator, A)]
forceinline reverseIterator(a:Filtered[F, A])
    = FilteredIterator(a.predicate, reverseIterator(a.seq));


/// @section  FilteredIterator 

private record FilteredIterator[F, ITER] (
    predicate : F,
    iter : ITER,
);

[F, ITER]
forceinline nextValue(iter:FilteredIterator[F, ITER]) {
    var value = nextValue(iter.iter);
    while (hasValue?(value) and not iter.predicate(..getValue(value)))
        value = nextValue(iter.iter);
    return move(value);
}

