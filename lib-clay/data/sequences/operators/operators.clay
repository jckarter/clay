import data.vectors.*;
import core.numbers.(private BiggerNumeric?);
import data.sequences.lazy.(enumerated);

/// @section  prefixOperator, infixOperator, updateAssign 

[S,F when Sequence?(S)]
override updateAssign(#F, ret:S, ..args) {
    for (i,r in enumerated(ret))
        updateAssign(F, r, ..reduceToScalar(i,..args));
}

[..S when anyValues?(s=>Sequence?(s) and Numeric?(SequenceElementType(s)),..S)]
override infixOperator(..args:S) {
    var ret = Vector[seqType(Int8,..args)]();
    resize(ret,seqSize(SizeT(0),..args));
    for (i,r in enumerated(ret))
        r = infixOperator(..reduceToScalar(i,..args));
    return move(ret);
}

[S,U,F when Sequence?(S) and Sequence?(U) 
    and CompareOpDefined?(F,SequenceElementType(S),SequenceElementType(U))]
override infixOperator(a:S, #F, b:U) = F(a,b);

[..S when Sequence?(lastValue(..S)) and Numeric?(SequenceElementType(lastValue(..S)))]
override prefixOperator(..args:S) {
    var ret = Vector[SequenceElementType(lastValue(..S))]();
    resize(ret,size(lastValue(..args)));
    for (i,r in enumerated(ret))
        r =  prefixOperator(withoutNthValue(#(countValues(..S)-1),..args), 
            lastValue(..args)[i]);
    return move(ret);
}

private define seqType;
[T when Numeric?(T)] 
forceinline override seqType(#T,a,..args) = ..seqType(T,..args);
[T,U when Numeric?(T,U) and BiggerNumeric?(T,U)]
forceinline override seqType(#T,a:U,..args) = ..seqType(T,..args);
[T,U when Numeric?(T,U) and BiggerNumeric?(U,T)]
forceinline override seqType(#T,a:U,..args) = ..seqType(U,..args);
[T,S when Numeric?(T) and Sequence?(S) and BiggerNumeric?(T,SequenceElementType(S))] 
forceinline override seqType(#T,a:S,..args) = ..seqType(T,..args);
[T,S when Numeric?(T) and Sequence?(S) and BiggerNumeric?(SequenceElementType(S),T)] 
forceinline override seqType(#T,a:S,..args) = ..seqType(SequenceElementType(S),..args);
[T when Numeric?(T)] override seqType(#T) = T;

private define seqSize;
forceinline override seqSize(s,forward a,forward ..args) = forward ..seqSize(s,..args);
[S when Sequence?(S)] 
forceinline override seqSize(s,forward a:S,forward ..args) = forward ..seqSize(max(s,size(a)),..args);
forceinline override seqSize(s) = s;

private define reduceToScalar;
[F] 
forceinline override reduceToScalar(forward i, #F, forward ..args) = forward F, ..reduceToScalar(i,..args);
[S when Sequence?(S)] 
forceinline override reduceToScalar(forward i,forward a:S, forward ..args) = forward a[i],..reduceToScalar(i,..args);
[T when Numeric?(T)] 
forceinline override reduceToScalar(forward i, forward a:T,forward ..args) = forward a,..reduceToScalar(i,..args);
forceinline override reduceToScalar(forward i) = ;



/// @section  concatenation 

[A, ..B when Sequence?(A) and allValues?(Sequence?,..B)
        and equalValues?(SequenceElementType(A),
            ..mapValues(SequenceElementType,..B)) and not StringLiteralType?(A,..B)]
override (++)(forward a:A, forward ..bs:B) {
    var result = Vector(a);
    ..for (b in bs)
        pushAll(result, b);
    return move(result);
}

[A, ..T when Sequence?(A) and equalValues?(SequenceElementType(A),..T) and not StringLiteralType?(A, ..T)]
override (++)(forward a:A, forward ..x:T) {
    var result = Vector(a);
    push(result, ..x);
    return move(result);
}

[A, T when Sequence?(A) and (SequenceElementType(A) == T)]
override (++)(forward x:T, forward a:A) = Vector[T](x) ++ a;

private define removeCatFromList;
override removeCatFromList(forward a, forward ..args) = forward a, ..removeCatFromList(..args);
override removeCatFromList(forward a, #cat, forward ..args) = forward a, ..removeCatFromList(..args);
override removeCatFromList(forward a) = forward a;

[A, ..B when Sequence?(A)]
override updateAssign(#(++), forward a:A, forward ..bs:B) {
    ..for (b in ..removeCatFromList(..bs)) {
        pushAll(a, b);
    }
}

[A, T when Sequence?(A) and (SequenceElementType(A) == T)]
override updateAssign(#(++), forward x:T, forward a:A) {
    insert(a,0,x);
}
