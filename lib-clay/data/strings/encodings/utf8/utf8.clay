import printer.protocol.(printTo);

record UTF8Decoder[Iterator] (
    iter: Iterator
);

[T] override iterator(u: UTF8Decoder[T]) = u;

alias REPLACEMENT_CHAR = UniChar(0xFFFDu);
alias MAX_CODE_POINT = UniChar(0x10FFFFu);

private validSequenceChar?(d) = bitand(UInt32(d), 0xC0u) == 0x80u;

private minUniChar(minCode, code) {
    if (code < minCode)
        return REPLACEMENT_CHAR;
    else
        return UniChar(code);
}

private rangeUniChar(minCode, maxCode, code) {
    if (code < minCode or code > maxCode)
        return REPLACEMENT_CHAR;
    else
        return UniChar(code);
}

decodeTwo(c, d) {
    if (validSequenceChar?(d)) {
        return minUniChar(0x80u, bitor(
            bitshl(bitand(UInt32(c), 0x1Fu), 6),
            bitand(UInt32(d), 0x3Fu)
        ));
    } else {
        return REPLACEMENT_CHAR;
    }
}
decodeThree(c, d, e) {
    if (validSequenceChar?(d) and validSequenceChar?(e)) {
        return minUniChar(0x800u, bitor(
            bitshl(bitand(UInt32(c), 0x0Fu), 12),
            bitshl(bitand(UInt32(d), 0x3Fu),  6),
            bitand(UInt32(e), 0x3Fu)
        ));
    } else {
        return REPLACEMENT_CHAR;
    }
}
decodeFour(c, d, e, f) {
    if (validSequenceChar?(d) and validSequenceChar?(e) and validSequenceChar?(f)) {
        return rangeUniChar(0x10000u, UInt32(MAX_CODE_POINT), bitor(
            bitshl(bitand(UInt32(c), 0x07u), 18),
            bitshl(bitand(UInt32(d), 0x3Fu), 12),
            bitshl(bitand(UInt32(e), 0x3Fu),  6),
            bitand(UInt32(f), 0x3Fu)
        ));
    } else {
        return REPLACEMENT_CHAR;
    }
}

private forceinline getByte(v) = UInt8(getValue(v));
private NEXT_VALUE_OR_EOF(varName) = stringLiteralConcat("""
    v = nextValue(decoder.iter);
    if (not hasValue?(v)) goto eof;
    var """, varName, """ = getByte(v);
""");

[T] override nextValue(decoder: UTF8Decoder[T]) {
    var v = nextValue(decoder.iter);
    if (not hasValue?(v))
        return nothing(UniChar);
    var c = getByte(v);
    if (c < 0x80u) {
        return Maybe(UniChar(c));
    } else if (c < 0xC0u) {
        return Maybe(REPLACEMENT_CHAR);
    } else {
        if (c < 0xE0u) {
            eval NEXT_VALUE_OR_EOF("d");
            return Maybe(decodeTwo(c, d));
        } else if (c < 0xF0u) {
            eval NEXT_VALUE_OR_EOF("d");
            eval NEXT_VALUE_OR_EOF("e");
            return Maybe(decodeThree(c, d, e));
        } else if (c < 0xF8u) {
            eval NEXT_VALUE_OR_EOF("d");
            eval NEXT_VALUE_OR_EOF("e");
            eval NEXT_VALUE_OR_EOF("f");
            return Maybe(decodeFour(c, d, e, f));
        }
    }

eof:
    return Maybe(REPLACEMENT_CHAR);
}

record UTF8[Sequence] (
    encoded: Sequence
);

[T] override iterator(u: UTF8[T]) = UTF8Decoder(iterator(u.encoded));

private encodeTwo(code)
    = bitor(0xC0, bitshr(bitand(code, 0x7C0), 6)),
      bitor(0x80, bitand(code, 0x3F));

private encodeThree(code)
    = bitor(0xE0, bitshr(bitand(code, 0xF000), 12)),
      bitor(0x80, bitshr(bitand(code, 0x0FC0),  6)),
      bitor(0x80, bitand(code, 0x3F));

private encodeFour(code)
    = bitor(0xF0, bitshr(bitand(code, 0x1C0000), 18)),
      bitor(0x80, bitshr(bitand(code, 0x03F000), 12)),
      bitor(0x80, bitshr(bitand(code, 0x000FC0),  6)),
      bitor(0x80, bitand(code, 0x3F));

// encode unicode char c into sequence of UTF-8 bytes
// callback is called for each UTF-8 byte
encodeUniChar(c, callback) {
    var code = UInt32(c);
    if (code > UInt32(MAX_CODE_POINT))
        code = UInt32(REPLACEMENT_CHAR);

    if (code < 0x80u) {
        callback(Char(c));
    } else if (code < 0x800u) {
        var x, y = ..encodeTwo(code);
        callback(Char(x));
        callback(Char(y));
    } else if (code < 0x10000u) {
        var x, y, z = ..encodeThree(code);
        callback(Char(x));
        callback(Char(y));
        callback(Char(z));
    } else {
        var x, y, z, w = ..encodeFour(code);
        callback(Char(x));
        callback(Char(y));
        callback(Char(z));
        callback(Char(w));
    }
}

[T] override push(u: UTF8[T], uc) {
    encodeUniChar(uc, c -> ..push(u.encoded, c));
}

