import data.algorithms.heaps as heaps;
import data.algorithms.introsort as introsort;
import comparators.(comparing,natural,Comparator?);
import data.hashmaps.(HashMap);
import data.vectors.*;
import data.sequences.lazy.*;

alias log2 = introsort.log2;


/// @section  reduce 

private getNext(iter) {
    var value = nextValue(iter);
    assert(hasValue?(value));
    return forward ..getValue(move(value));
}

define reduce;

[F, A when Sequence?(A)]
override reduce(f:F, a:A) {
    var iter = iterator(a);
    var result = getNext(iter);
    for (x in iter)
        result = f(result, x);
    return result;
}

[F, A, X when Sequence?(A) and CallDefined?(call, F, X, SequenceElementType(A))]
override reduce(f:F, initial:X, a:A) {
    var result = initial;
    for (x in a)
        result = f(result, x);
    return result;
}



/// @section  reduceBy 
[KeyF, F, A, X when Sequence?(A) and CallDefined?(call, F, X, SequenceElementType(A))]
reduceBy(keyF: KeyF, f: F, initial: X, a:A) {
    alias KeyType = Type(keyF(typeToLValue(SequenceElementType(A))));
    alias ValueType = X;
    var results = HashMap[KeyType, ValueType]();

    for (x in a) {
        var key = keyF(x);
        var resultPtr = lookup(results, key);
        if (null?(resultPtr))
            put(results, key, f(initial, x));
        else
            resultPtr^ = f(resultPtr^, x);
    }
    return results;
}



/// @section  sum, product, count 

[A when Sequence?(A)]
sum(a:A) {
    alias T = SequenceElementType(A);
    return reduce(add, T(0), a);
}

[A when Sequence?(A)]
product(a:A) {
    alias T = SequenceElementType(A);
    return reduce(multiply, T(1), a);
}

[A when Sequence?(A)]
count(pred, a:A) {
    return reduce((n,elt) => if (pred(elt)) n+1 else n, SizeT(0), a);
}



/// @section  select 

private define select;

[A when Sequence?(A)]
override select(a:A, f) {
    var iter = iterator(a);
    var result = getNext(iter);
    for (x in iter)
        if (f(x, result))
            result = x;
    return result;
}

[A when LValueSequence?(A)]
override select(a:A, f) {
    var iter = iterator(a);
    var result = @getNext(iter);
    for (x in iter)
        if (f(x, result^))
            result = @x;
    return ref result^;
}



/// @section  selectMin, selectMax for sequences 

[A when Sequence?(A)]
selectMin(a:A) = forward select(a, lesser?);

[A when Sequence?(A)]
selectMax(a:A) = forward select(a, greater?);



/// @section  findIf, reverseFindIf 

define findIf;

override findIf(seq, pred) {
    return findIf(begin(seq), end(seq), pred);
}

override findIf(_first, _last, pred) {
    var cur, last = _first, _last;
    while ((cur != last) and not pred(cur^))
        inc(cur);
    return cur;
}

define reverseFindIf;

override reverseFindIf(seq, pred) {
    return reverseFindIf(begin(seq), end(seq), pred);
}

override reverseFindIf(_first, _last, pred) {
    var first, cur = _first, _last;
    while (cur != first) {
        var prev = cur;
        dec(prev);
        if (pred(prev^))
            break;
        cur = prev;
    }
    return cur;
}

any?(seq, pred) = findIf(seq, pred) != end(seq);
all?(seq, pred) = findIf(seq, x -> not pred(x)) != end(seq);


/// @section  find 

define find;

[A, T when Sequence?(A) and CallDefined?(equals?, SequenceElementType(A), T)]
override find(a:A, x:T) {
    return find(begin(a), end(a), x);
}

[C, T when Coordinate?(C) and CallDefined?(equals?, CoordinateTargetType(C), T)]
override find(begin:C, end:C, x:T) {
    var i = begin;
    while (i != end) {
        if (i^ == x)
            break;
        inc(i);
    }
    return i;
}


[A, B when SizedSequence?(A) and SizedSequence?(B)
        and (SequenceElementType(A) == SequenceElementType(B))]
override find(a:A, b:B) {
    return find(begin(a), end(a), b);
}

[C, B when Coordinate?(C) and SizedSequence?(B)
        and (CoordinateTargetType(C) == SequenceElementType(B))]
override find(begin_:C, end_:C, b:B) {
    // FIXME: use something like boyer-moore.
    var begin, end = begin_, end_;
    var bsize = size(b);
    for (c in range(begin, end)) {
        var n = end - c;
        if (n < bsize)
            break;
        var range = coordinateRange(c, c+bsize);
        if (range == b)
            return c;
    }
    return end;
}



/// @section  reverseFind 

define reverseFind;

[A, T when Sequence?(A) and CallDefined?(equals?, SequenceElementType(A), T)]
override reverseFind(a:A, x:T) {
    return reverseFind(begin(a), end(a), x);
}

[C, T when Coordinate?(C) and CallDefined?(equals?, CoordinateTargetType(C), T)]
override reverseFind(begin:C, end:C, x:T) {
    var i = end;
    while (i != begin) {
        var j = i;
        dec(j);
        if (j^ == x)
            break;
        i = j;
    }
    return i;
}



/// @section  in? 
in?(seq, elem) = find(seq, elem) != end(seq);



/// @section  beginsWith?, endsWith? 

define beginsWith?;
define endsWith?;

[A, B when Sequence?(A) and Sequence?(B) and (SequenceElementType(A) == SequenceElementType(B))]
override beginsWith?(seq:A, prefix:B) =
    (size(seq) >= size(prefix)) and (slicedUpto(seq, size(prefix)) == prefix);

[A, T when Sequence?(A) and (T == SequenceElementType(A))]
override beginsWith?(seq:A, x:T) =
    (size(seq) > 0) and (seq[0] == x);


[A, B when Sequence?(A) and Sequence?(B) and (SequenceElementType(A) == SequenceElementType(B))]
override endsWith?(seq:A, suffix:B) =
    (size(seq) >= size(suffix))
    and (slicedFrom(seq, size(seq)-size(suffix)) == suffix);

[A, T when Sequence?(A) and (T == SequenceElementType(A))]
override endsWith?(seq:A, x:T) =
    (size(seq) > 0) and (seq[size(seq)-1] == x);



/// @section  reverseInPlace 

[A when RandomAccessSequence?(A) and LValueSequence?(A)]
reverseInPlace(a:A) {
    var n = size(a);
    for (i in range(n \ 2))
        swap(a[i], a[n-i-1]);
}



/// @section  split 

[A when CoordinateSequence?(A)]
split(a:A, sep) {
    alias T = SequenceElementType(A);
    var result = Vector[Vector[T]]();
    var cur, last = begin(a), end(a);
    while (true) {
        var pos = find(cur, last, sep);
        push(result, Vector(coordinateRange(cur, pos)));
        if (pos == last)
            break;
        cur = advancePast(pos, sep);
    }
    return move(result);
}

private define advancePast;

[C, S when Coordinate?(C) and Sequence?(S)
        and (CoordinateTargetType(C) == SequenceElementType(S))]
override advancePast(pos:C, x:S) {
    return pos + size(x);
}

[C, T when Coordinate?(C) and (CoordinateTargetType(C) == T)]
override advancePast(pos:C, x:T) {
    return pos + 1;
}



/// @section  join 

define concat(seq);

[A when Sequence?(A) and Sequence?(SequenceElementType(A))]
override concat(a:A) {
    alias T = SequenceElementType(SequenceElementType(A));
    var result = Vector[T]();
    for (x in a) {
        pushAll(result, x);
    }
    return move(result);
}

define join(sep, seq);

[S, A when Sequence?(A) and Sequence?(SequenceElementType(A))
    and Sequence?(S) and (SequenceElementType(S) == SequenceElementType(SequenceElementType(A)))]
override join(sep:S, a:A) {
    alias T = SequenceElementType(SequenceElementType(A));
    var result = Vector[T]();
    var first = true;
    for (x in a) {
        if (not first)
            pushAll(result, sep);
        else
            first = false;
        pushAll(result, x);
    }
    return move(result);
}

[S, A when Sequence?(A) and Sequence?(SequenceElementType(A))
        and S == SequenceElementType(SequenceElementType(A))]
override join(sep:S, a:A) = ..join(array(sep), a);



/// @section  binarySearch, binarySearchLowerBound, binarySearchUpperBound 

define binarySearch;
define binarySearchLowerBound;
define binarySearchUpperBound;

[A when Sequence?(A)]
override binarySearch(a:A, x) {
    return ..binarySearch(begin(a), end(a), x);
}

[A when Sequence?(A)]
override binarySearchLowerBound(a:A, x) {
    return binarySearchLowerBound(begin(a), end(a), x);
}

[A when Sequence?(A)]
override binarySearchUpperBound(a:A, x) {
    return binarySearchUpperBound(begin(a), end(a), x);
}

override binarySearch(begin, end, x) {
    var i = binarySearchLowerBound(begin, end, x);
    return i, binarySearchUpperBound(i, end, x);
}

override binarySearchLowerBound(begin_, end_, x) {
    var begin, end = begin_, end_;
    while (begin < end) {
        var mid = begin + (end - begin) \ 2;
        if (mid^ < x)
            begin = mid + 1;
        else
            end = mid;
    }
    return begin;
}

override binarySearchUpperBound(begin_, end_, x) {
    var begin, end = begin_, end_;
    while (begin < end) {
        var mid = begin + (end - begin) \ 2;
        if (mid^ <= x)
            begin = mid + 1;
        else
            end = mid;
    }
    return end;
}



/// @section  sort - use quicksort with median-of-3 partitioning 

[C when Comparator?(C)]
sortBy(a, comparator : C) {
    introsort.introSort(a, (x, y) -> lesser?(comparator, x, y));
}

define sort;

override sort(a){
  sortBy(a, natural());
}

override sort(xs, f){
  sortBy(xs, comparing(f));
}
