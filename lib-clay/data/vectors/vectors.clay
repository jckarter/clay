
import data.vectors.generic.*;
public import data.vectors.generic.(Vector?);

/// @module vector
/// vector implementation
/// see also: \a vectors.generic.generic


/// @record Vector[T]
/// A Vector of Elements

record Vector[T] (
    size:SizeT,
    capacity:SizeT,
    data:Pointer[T],
);


/// @section predicates

[T] RegularRecord?(#Vector[T]) = false;

[T]
ContiguousSequence?(#Vector[T]) = true;

[T]
SequenceContainer?(#Vector[T]) = true;


/// @section constructors


/// @overload Vector[T]()
/// construct an empty Vector.
[T]
Vector[T]() = Vector[T](SizeT(0), SizeT(0), null(T));

/// @overload Vector[T](forward a:A)
/// construct Vector from a sequence element
[T,A when Sequence?(A) and (T == SequenceElementType(A))]
Vector[T](forward a:A) {
    var v = Vector[T]();
    pushAll(v, a);
    return move(v);
}

/// @overload Vector[T](forward a:A)
/// construct Vector from a sequence.
[A when Sequence?(A)]
Vector(forward a:A) {
    alias T = SequenceElementType(A);
    return Vector[T](a);
}

/// @section varargs constructor

[T, ..A when (countValues(..A) > 0) and equalValues?(T, ..A)]
alias Vector[T](..elements:A) {
    var v = Vector[T]();
    push(v, ..elements);
    return move(v);
}

/// @section moveUnsafe, resetUnsafe, assign, destroy

[T] BitwiseMovedType?(#Vector[T]) = true;

[T]
forceinline resetUnsafe(a:Vector[T]) {
    a <-- Vector[T]();
}

[T]
assign(ref dest:Vector[T], ref src:Vector[T]) {
    resizeUnsafe(dest, size(src));
    assignNonoverlappingMemory(begin(dest), begin(src), end(src));
}

[T]
destroy(a:Vector[T]) {
    destroyMemory(begin(a), end(a));
    freeRawMemory(a.data);
}

[T]
moveVectorBuffer(a:Vector[T]) {
    var data = a.data;
    resetUnsafe(a);
    return data;
}

/// @section generic vector requirements

[T]
Vector?(#Vector[T]) = true;

[T]
forceinline vectorData(a:Vector[T]) = a.data;

[T]
forceinline vectorSize(a:Vector[T]) = a.size;

[T]
forceinline vectorSetSize(a:Vector[T], n:SizeT) {
    a.size = n;
}

[T]
forceinline vectorCapacity(a:Vector[T]) = a.capacity;

[T]
vectorRequestCapacity(a:Vector[T], capacity:SizeT) {
    assert(capacity >= a.size);
    if (capacity < a.capacity)
        return;
    var n = max(capacity, SizeT(16));
    n = max(n, 2*a.capacity);
    reallocVector(a, n);
}

private define reallocVector;

[T]
reallocVector(a:Vector[T], capacity:SizeT) {
    var data = allocateRawMemory(T, capacity);
    moveNonoverlappingMemoryUnsafe(data, a.data, a.data + a.size);
    freeRawMemory(a.data);
    a.data = data;
    a.capacity = capacity;
}

[T when BitwiseMovedType?(T) and CallDefined?(reallocateRawMemory, Pointer[T], SizeT)]
reallocVector(a:Vector[T], capacity:SizeT) {
    a.data = reallocateRawMemory(a.data, capacity);
    a.capacity = capacity;
}
