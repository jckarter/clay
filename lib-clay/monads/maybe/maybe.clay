import monads;
import lambdas.(Function);

alias MaybeMonad = Maybe[Tuple[]];

[T]
overload Functor?(#Maybe[T]) = true;

[T]
overload Monad?(#Maybe[T]) = true;

[T]
overload typeInBox(#Maybe[T]) = T;

[T, U]
overload changeTypeInBox(#Maybe[T], #U) = Maybe[U];

[A, B]
overload fmap(f : Function[[A], [B]], functor : Maybe[A]) {
    if (hasValue?(functor))
        return Maybe(f(getValue(functor)));
    else
        return nothing(B);
}

[A, MB]
overload mbind(m:Maybe[A], f:Function[[A], [MB]])
{
    if (hasValue?(m))
        return f(getValue(m));
    else
        return nothing(typeInBox(MB));
}

[A, T]
overload mreturn(a : A, #Maybe[T])= Maybe[A](a);

