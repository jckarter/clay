import monads;
import algorithms;
import lambdas.(Function);
import sequences;
import vectors.(Vector);

alias VectorMonad = Vector[Tuple[]];

[S when Sequence?(S)]
overload Monad?(#S) = true;

[S when Sequence?(S)]
overload typeInBox(#S) = SequenceElementType(S);

[T, U]
overload changeTypeInBox(#Vector[T], #U) = Vector[U];

[S when Sequence?(S)]
overload fmap(f, s : S) = sequences.map(f, s);

[A, S, MB when Sequence?(S) and A == typeInBox(S)]
overload mbind(x : S, f:Function[[A], [MB]]) = algorithms.concat(fmap(f, x));

[A, S when Sequence?(S)]
overload mreturn(a : A, #S) {
    alias SA = changeTypeInBox(S, A);
    return SA(a);
}

overload Applicative?(#S) = true;
[S when Sequence?(S)]
overload ap(fs, xs) {
    with f = mbind(fs);
    with x = mbind(xs);
    mreturn(f(x),unboxType(#S));
}


