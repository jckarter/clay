
import sequences.handle.*;



/// @section  wrapSequence 

define wrapSequence;

inline overload wrapSequence(rvalue x) = move(x);
inline overload wrapSequence(ref x) = sequenceHandle(x);

[A when LightweightSequence?(A)]
inline overload wrapSequence(ref x:A) = x;



/// @section  packSequences, unpackSequences 

inline packSequences(forward ..args) = [..mapValues(wrapSequence, ..args)];

[..T]
inline unpackSequences(x:Tuple[..T]) = ref ..unpackTupleRef(x);



/// @section  CapturedElementsType 

alias CapturedElementsType(packedSeq) =
    Type(captureValues(..dummyElements(..unpackTupleRef(packedSeq))));


private inline dummyElement(seq) = forward ..getValue(nextValue(iterator(seq)));

private inline dummyElements(..seqs) = forward ..mapValues(dummyElement, ..seqs);



/// @section  multiIterators, multiReverseIterators 

inline multiIterators(packedSeq) =
    [..mapValues(iterator, ..unpackTupleRef(packedSeq))];

inline multiReverseIterators(packedSeq) =
    [..mapValues(reverseIterator, ..unpackTupleRef(packedSeq))];

