
public import sequences.force.*;
public import sequences.lazy.*;
import vectors.*;


//
// strict wrappers around lazy sequences
//

alias zip(..args) = force(zipped(..args));
alias map(..args) = force(mapped(..args));
alias filter(..args) = force(filtered(..args));
alias enumerate(..args) = force(enumerated(..args));
alias reverse(..args) = force(reversed(..args));
alias slice(..args) = force(sliced(..args));
alias sliceFrom(..args) = force(slicedFrom(..args));
alias sliceUpto(..args) = force(slicedUpto(..args));
alias group(..args) = force(grouped(..args));



// 
//
// interleave
//

[S when Sequence?(S)]
interleave(seq:S, betweenFn, fn) {
    var i = iterator(seq);
    if (var v = nextValue(i); hasValue?(v)) {
        fn(..getValue(v));
        while (v = nextValue(i); hasValue?(v)) {
            betweenFn();
            fn(..getValue(v));
        }
    }
}


[S when StaticSizedSequence?(S) and MultiValuedSequence?(S)]
alias overload Array(s:S) = Array(mapped(Tuple, s));

[n, S when MultiValuedSequence?(S)]
overload Array(#n, forward s:S) = Array(#n, mapped(Tuple, s));

[A when MultiValuedSequence?(A)]
overload Vector(forward a:A) = Vector(mapped(Tuple, a));
