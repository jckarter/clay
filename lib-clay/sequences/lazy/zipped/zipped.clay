
import sequences.util.*;


/// @section  zipped 

inline zipped(forward first, forward ..rest) =
    Zipped(packSequences(first, ..rest));

private record Zipped[A] (
    seqs : A
);

[..S when allValues?(LightweightSequence?, ..S)]
overload LightweightSequence?(#Zipped[Tuple[..S]]) = true;



/// @section  ZippedIterator 

[A]
inline overload iterator(a:Zipped[A]) = ZippedIterator(multiIterators(a.seqs));

private record ZippedIterator[ITERS] (iters : ITERS);

private record ZippedValue[..V] (values:Tuple[..V]);

[ITERS]
inline overload nextValue(iter:ZippedIterator[ITERS]) =
    ZippedValue([..mapValues(nextValue, ..unpackTupleRef(iter.iters))]);

[..V]
inline overload hasValue?(v:ZippedValue[..V]) = allValues?(hasValue?, ..unpackTuple(v.values));
[..V]
inline overload getValue(forward v:ZippedValue[..V])
    = forward ..mapValues(getValue, ..unpackTuple(v.values));


/// @section  reverse iteration 

private AllReversible?(A) {
    var reversible? = (T => CallDefined?(reverseIterator, T));
    return allValues?(reversible?, ..Type(..unpackSequences(null(A)^)));
}

[A when AllReversible?(A)]
inline overload reverseIterator(a:Zipped[A]) =
    ZippedIterator(multiReverseIterators(a.seqs));



/// @section  size, index 

private AllSized?(A) {
    var sizeDefined? = (T => CallDefined?(size, T));
    return allValues?(sizeDefined?, ..Type(..unpackSequences(null(A)^)));
}

[A when AllSized?(A)]
inline overload size(a:Zipped[A]) {
    var f = (x => SizeT(size(x)));
    return foldValues(min, ..mapValues(f, ..unpackSequences(a.seqs)));
}

private AllStaticSized?(A) {
    var staticSizeDefined? = (T => CallDefined?(StaticSize, Static[T]));
    return allValues?(staticSizeDefined?, ..Type(..unpackSequences(null(A)^)));
}

[A when AllStaticSized?(A)]
overload StaticSize(#Zipped[A]) =
    foldValues(min, ..mapValues(StaticSize, ..Type(..unpackSequences(null(A)^))));

private AllIndexable?(A, I) {
    var indexDefined? = (T => CallDefined?(index, T, I));
    return allValues?(indexDefined?, ..Type(unpackSequences(null(A)^)));
}

[A, I when AllIndexable?(A, I)]
inline overload index(a:Zipped[A], i:I) {
    var f = (x -> { return forward ..index(x, i); });
    return forward ..mapValues(f, ..unpackSequences(a.seqs));
}
