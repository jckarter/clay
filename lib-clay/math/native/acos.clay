// acos function adapted from openlibm

import math.native.kernel.ieee754.*;
import numbers.floats.(nan);
import math.native.constants.(M_PI,M_PI_2);
import math.native.protocol.*;
import complex.*;

alias pio2_hi =  1.57079632679489655800e+00; // 0x3FF921FB, 0x54442D18 
alias pio2_lo =  6.12323399573676603587e-17; // 0x3C91A626, 0x33145C07 
// coefficients for R(x^2) 
alias pS0 =  1.66666666666666657415e-01; // 0x3FC55555, 0x55555555 
alias pS1 = -3.25565818622400915405e-01; // 0xBFD4D612, 0x03EB6F7D 
alias pS2 =  2.01212532134862925881e-01; // 0x3FC9C155, 0x0E884455 
alias pS3 = -4.00555345006794114027e-02; // 0xBFA48228, 0xB5688F3B 
alias pS4 =  7.91534994289814532176e-04; // 0x3F49EFE0, 0x7501B288 
alias pS5 =  3.47933107596021167570e-05; // 0x3F023DE1, 0x0DFDF709 
alias qS1 = -2.40339491173441421878e+00; // 0xC0033A27, 0x1C8A2D4B 
alias qS2 =  2.02094576023350569471e+00; // 0x40002AE5, 0x9C598AC8 
alias qS3 = -6.88283971605453293030e-01; // 0xBFE6066C, 0x1B8D0159 
alias qS4 =  7.70381505559019352791e-02; // 0x3FB3B8C5, 0xB12E9282 


override acos(x:Double) {
	alias ONE = 1.;
	var hx = GET_IEEE_HIGH(x);
	var ix = bitand(hx,MM);
	if(ix>=RM) {	// |x| >= 1 
	    var lx = GET_IEEE_LOW(x);
	    if(bitor(ix-RM,lx)==0) {	// |x|==1 
			if(hx>0) return 0.0;		// acos(1) = 0  
			else return M_PI+2.0*pio2_lo;	// acos(-1)= pi 
	    }
	    return nan(Double);		// acos(|x|>1) is NaN 
	}
	var z,p,q,r,s,w = 0.,0.,0.,0.,0.,0.;
	if(ix<0x3fe00000) {	// |x| < 0.5 
	    if(ix<=0x3c600000) return pio2_hi+pio2_lo;//if|x|<2**-57
	    z = x*x;
	    p = z*(pS0+z*(pS1+z*(pS2+z*(pS3+z*(pS4+z*pS5)))));
	    q = ONE+z*(qS1+z*(qS2+z*(qS3+z*qS4)));
	    r = p/q;
	    return pio2_hi - (x - (pio2_lo-x*r));
	} else  if (hx<0) {		// x < -0.5 
	    z = (ONE+x)*0.5;
	    p = z*(pS0+z*(pS1+z*(pS2+z*(pS3+z*(pS4+z*pS5)))));
	    q = ONE+z*(qS1+z*(qS2+z*(qS3+z*qS4)));
	    s = sqrt(z);
	    r = p/q;
	    w = r*s-pio2_lo;
	    return M_PI - 2.0*(s+w);
	} else {			// x > 0.5 
	    z = (ONE-x)*0.5;
	    s = sqrt(z);
	    var df = s;
		df = SET_IEEE_LOW(df,0);
	    var c  = (z-df*df)/(s+df);
	    p = z*(pS0+z*(pS1+z*(pS2+z*(pS3+z*(pS4+z*pS5)))));
	    q = ONE+z*(qS1+z*(qS2+z*(qS3+z*qS4)));
	    r = p/q;
	    w = r*s+c;
	    return 2.0*(df+w);
	}
}


// Return cosine of complex double value.

[C when Complex?(C)]
override acos(x:C) --> res:C {
	alias T = ComplexBaseType(C);
    var y = asin (x);
    res <-- Complex(T(M_PI_2) - real(y), -imagValue(y));
}
