// asinh

import math.native.kernel.ieee754.*;
import math.native.protocol.*;
import math.native.constants.(M_LN2,M_PI_2,M_PI_4);
import math.native.fpclassify.(fpclassify,FP_INFINITE,FP_ZERO,FP_NAN);
import numbers.floats.(nan,infinity);
import complex.*;

asinh(x:Float) = Float(asinh(Double(x)));

asinh(x:Double) {
	alias ONE = 1.;
	alias HUGE = GreatestPositiveFinite(Double);
	var t,w = 0.,0.;
	var hx = GET_IEEE_HIGH(x);
	var ix = bitand(hx,MM);
	if(ix>=EM) return x+x;	// x is inf or NaN 
	if(ix< CV18) {	// |x|<2**-28 
	    if(HUGE+x>ONE) return x;	// return x inexact except 0 
	}
	if(ix>0x41b00000) {	// |x| > 2**28 
	    w = log(abs(x))+M_LN2;
	} else if (ix>CV2) {	// 2**28 > |x| > 2.0 
	    t = abs(x);
	    w = log(2.0*t+ONE/(sqrt(x*x+ONE)+t));
	} else {		// 2.0 > |x| > 2**-28 
	    t = x*x;
	    w =log1p(abs(x)+t/(ONE+sqrt(ONE+t)));
	}
	if(hx>0) return w; 
	else return -w;
}

asinh(x:ComplexDouble) --> res:ComplexDouble {
  
	var rcls = fpclassify(real(x));
	var icls = fpclassify(imagValue(x));

	if (rcls <= FP_INFINITE or icls <= FP_INFINITE) {
	  	if (icls == FP_INFINITE) {
	  		res <-- Complex(copysign(infinity(Double), real(x)),
		  		(if (rcls == FP_NAN)
		    		nan(Double)
		  		else
		    		copysign((if(rcls >= FP_ZERO) M_PI_2 else M_PI_4), imagValue(x))));
		}
	  	else if (rcls <= FP_INFINITE) {
	  		res <-- Complex(real(x),(
	  		if ((rcls == FP_INFINITE and icls >= FP_ZERO) or (rcls == FP_NAN and icls == FP_ZERO))
	    		copysign(0.0, imagValue(x))
	  		else
	    		nan(Double)));
		}
	  	else {
			res <-- nan(ComplexDouble);
		}
	}
	else if (rcls == FP_ZERO and icls == FP_ZERO) {
		res <-- x;
	}
	else {
		var y = Complex((real(x) - imagValue(x)) * (real(x) + imagValue(x)) + 1.0, 2.0 * real(x) * imagValue(x));
		y = sqrt(y);
		y = Complex(real(y) + real(x), imagValue(y) + imagValue(x));
		res <--  log(y);
	}
}
