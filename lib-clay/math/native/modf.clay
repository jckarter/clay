// modf

import math.native.kernel.ieee754.*;
import math.*;

overload modf(x:Double, iptr:Pointer[Double]) {
	
	var ix = MAKE_IEEE(x);
	var j0 = bitand(bitshr(GET_IEEE_HIGH(ix),20),0x7ff)-0x3ff;	/* exponent of x */
	if(j0<20) {			/* integer part in high x */
	    if(j0<0) {			/* |x|<1 */
	        iptr^ = INSERT_WORDS(bitand(GET_IEEE_HIGH(ix),SM),0);	/* *iptr = +-0 */
			return x;
	    } 
	    else {
			var i = bitshr(NEM,j0);
			if(bitor(bitand(GET_IEEE_HIGH(ix),i),GET_IEEE_LOW(ix))==0) {		/* x is integral */
			    iptr^ = x;
			    var high = GET_IEEE_HIGH(ix);
			    SET_IEEE(ix, bitand(high,SM),0);  
			    return GET_IEEE_DB(ix);	/* return +-0 */
			} 
			else {
			  	SET_IEEE(ix, bitandc(GET_IEEE_HIGH(ix),i),0);    
			    iptr^ = GET_IEEE_DB(ix);
			    return x - iptr^;
			}
	    }
	} else if (j0>51) {		/* no fraction part */
	    if (j0 == 0x400) {		/* inf/NaN */
			iptr^ = x;
			return 0.0 / x;
	    }
	    iptr^ = x*1.;
	    SET_IEEE(ix,bitand(GET_IEEE_HIGH(ix),SM),0);
	    return GET_IEEE_DB(ix);	/* return +-0 */
	} 
	else {			/* fraction part in low x */
	    var i = bitshr(0xffffffffu,j0-20);
	    if(bitand(GET_IEEE_LOW(ix),i)==0) { 		/* x is integral */
	        iptr^ = x;
			SET_IEEE(ix,bitand(GET_IEEE_HIGH(ix),SM),0);
	    	return GET_IEEE_DB(ix);	/* return +-0 */
	    } 
	    else {
	    	SET_IEEE_LOW(ix, bitcast(Int32,bitandc(GET_IEEE_LOW(ix),i)));  		
	        iptr^ = GET_IEEE_DB(ix);
			return x - iptr^;
	    }
	}
}
