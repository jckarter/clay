import simd.*;

import math.native.protocol.*;
import complex.*;
import numbers.floats.(nan,infinity,infinity?,nan?,signbit);

private external ("llvm.x86.sse2.sqrt.sd", llvm)
    x86_sqrtsd(a:Vec[Double,2]) : Vec[Double,2];

[T when Float?(T) ]
forceinline overload sqrt(x:T) = T(x86_sqrtsd(Vec[Double,2](Double(x),0.))[0]);

forceinline overload sqrt(x:Double) = x86_sqrtsd(Vec[Double,2](x,0.))[0];

[I when Imaginary?(I) ]
forceinline overload sqrt(z:I) = sqrt(Complex(z));


alias thresh(#LongDouble) = 0xd.413cccfe77997ffp+16379fl;
alias overload thresh(#Float)  = 0x1.a82797f7a7599p+126f;
alias overload thresh(#Double) = 0x1.a827999fcef32p+1022;

[C when Complex?(C)]
overload sqrt(z:C) --> result:C {
    alias T = ComplexBaseType(C);
    alias ZERO = T(0);
    alias QUARTER = T(0.25);
    alias HALF = T(0.5);
    alias TWO = T(2);
    
    var a = real(z);
    var b = imagValue(z);

    // Handle special cases.
    if (zero?(z))
        result <-- Complex(ZERO, b);
    else if (infinity?(b))
        result <-- Complex(infinity(T), b);
    else if (nan?(a)) {
        var t = (b - b) / (b - b);  // raise invalid if b is not a NaN 
        result <-- Complex(a, t); // return NaN + NaN i 
    }
    else if (infinity?(a)) {
        // csqrt(inf + NaN i)  = inf +  NaN i
        // csqrt(inf + y i)    = inf +  0 i
        // csqrt(-inf + NaN i) = NaN +- inf i
        // csqrt(-inf + y i)   = 0   +  inf i

        if (signbit(a) == 1)
            result <-- Complex(abs(b - b), copysign(a, b));
        else
            result <-- Complex(a, copysign(b - b, b));
    }

    // The remaining special case (b is NaN) is handled just fine by
    // the normal code path below.
    // Scale to avoid overflow. 
    else {
        var scale = 0;
        if (abs(a) >= thresh(T) or abs(b) >= thresh(T)) {
            a *: QUARTER;
            b *: QUARTER;
            scale = 1;
        } 
        
        // Algorithm 312, CACM vol 10, Oct 1967. 
        if (a >= ZERO) {
            var t = sqrt((a + hypot(a, b)) * HALF);
            result <-- Complex(t, b / (TWO * t));
        } 
        else {
            var t = sqrt((-a + hypot(a, b)) * HALF);
            result <-- Complex(abs(b) / (TWO * t), copysign(t, b));
        }

        // Rescale. 
        if (scale == 1)
            result *: TWO;
    }
}
