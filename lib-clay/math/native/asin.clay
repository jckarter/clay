// asin

import math.native.kernel.ieee754.*;
import numbers.floats.*;
import math.native.protocol.*;
import complex.*;

alias pio2_hi =  1.57079632679489655800e+00; // 0x3FF921FB, 0x54442D18 
alias pio2_lo =  6.12323399573676603587e-17; // 0x3C91A626, 0x33145C07 
alias pio4_hi =  7.85398163397448278999e-01; // 0x3FE921FB, 0x54442D18 
// coefficient for R(x^2) 
alias pS0 =  1.66666666666666657415e-01; // 0x3FC55555, 0x55555555 
alias pS1 = -3.25565818622400915405e-01; // 0xBFD4D612, 0x03EB6F7D 
alias pS2 =  2.01212532134862925881e-01; // 0x3FC9C155, 0x0E884455 
alias pS3 = -4.00555345006794114027e-02; // 0xBFA48228, 0xB5688F3B 
alias pS4 =  7.91534994289814532176e-04; // 0x3F49EFE0, 0x7501B288 
alias pS5 =  3.47933107596021167570e-05; // 0x3F023DE1, 0x0DFDF709 
alias qS1 = -2.40339491173441421878e+00; // 0xC0033A27, 0x1C8A2D4B 
alias qS2 =  2.02094576023350569471e+00; // 0x40002AE5, 0x9C598AC8 
alias qS3 = -6.88283971605453293030e-01; // 0xBFE6066C, 0x1B8D0159 
alias qS4 =  7.70381505559019352791e-02; // 0x3FB3B8C5, 0xB12E9282 


asin(x:Double) {
	alias ONE = 1.;
	alias HUGE = GreatestPositiveFinite(Double);
	var t=0.;
	var hx = GET_IEEE_HIGH(x);
	var ix = bitand(hx,MM);
	if(ix>= RM) {		// |x|>= 1 
	    var lx = GET_IEEE_LOW(x);
	    if(bitor(ix-RM,lx)==0)
		    // asin(1)=+-pi/2 with inexact 
			return x*pio2_hi+x*pio2_lo;	
	    return nan(Double);		// asin(|x|>1) is NaN    
	} 
	else
		if (ix<CV3) {	// |x|<0.5 
		    if(ix<0x3e500000)		// if |x| < 2**-26 
				if(HUGE+x>ONE) return x;// return x with inexact if x!=0
		  
		    var t = x*x;
		    var p = t*(pS0+t*(pS1+t*(pS2+t*(pS3+t*(pS4+t*pS5)))));
		    var q = ONE+t*(qS1+t*(qS2+t*(qS3+t*qS4)));
		    var w = p/q;
		    return x+x*w;
		}
	// 1> |x|>= 0.5 
	var w = ONE-abs(x);
	var t = w*0.5;
	var p = t*(pS0+t*(pS1+t*(pS2+t*(pS3+t*(pS4+t*pS5)))));
	var q = ONE+t*(qS1+t*(qS2+t*(qS3+t*qS4)));
	var s = sqrt(t);
	if(ix>=0x3FEF3333) { 	// if |x| > 0.975 
	    w = p/q;
	    t = pio2_hi-(2.0*(s+s*w)-pio2_lo);
	} 
	else {
	    w  = s;
	    w = SET_IEEE_LOW(w,0);
	    var c  = (t-w*w)/(s+w);
	    var r  = p/q;
	    p  = 2.0*s*r-(pio2_lo-2.0*c);
	    q  = pio4_hi-2.0*w;
	    t  = pio4_hi-(p-q);
	}    
	if(hx>0) return t; 
	else return -t;    
}


[C when Complex?(C)]
asin(x:C) --> res:C {

    alias T = ComplexBaseType(C);
    
    if (nan?(real(x)) or nan?(imagValue(x)))
        if (real(x) == T(0))
            res <-- x;
        else if (infinity?(real(x)) or infinity?(imagValue(x)))
           	res <-- Complex(nan(T), copysign(infinity(T),imagValue(x)));
        else
        	res <-- nan(C);
    
    else {
        var y = asinh(Complex(-imagValue(x), real(x)));
        res <-- Complex(imagValue(y), -real(y));
    }
}
