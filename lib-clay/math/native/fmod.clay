// fmod

import math.native.kernel.ieee754.*;
import math.*;

overload fmod(a:Double, b:Double) {

	alias ONE = 1.0;
	alias ZERO = array(0.0, -0.0);
	var ix,iy,i,n = 0,0,0u,0;
	var x,y = a,b;
	var xdb =MAKE_IEEE(x);
	var ydb = MAKE_IEEE(y);
	var sx = bitand(GET_IEEE_HIGH(xdb),SM);		/* sign of x */
	GET_IEEE_HIGH(xdb) = bitxor(GET_IEEE_HIGH(xdb),sx);		/* |x| */
	GET_IEEE_HIGH(ydb) = bitand(GET_IEEE_HIGH(ydb),MM);	/* |y| */

    /* purge off exception values */
	if(bitor(GET_IEEE_HIGH(ydb),GET_IEEE_LOW(ydb))==0 or (GET_IEEE_HIGH(xdb)>=EM) or	/* y=0,or x not finite */
	  (bitor(GET_IEEE_HIGH(ydb),bitshr(bitor(GET_IEEE_LOW(ydb),-GET_IEEE_LOW(ydb)),31))>EM))	/* or y is NaN */
	    return (x*y)/(x*y);
	if(GET_IEEE_HIGH(xdb)<=GET_IEEE_HIGH(ydb)) {
	    if((GET_IEEE_HIGH(xdb)<GET_IEEE_HIGH(ydb)) or (GET_IEEE_LOW(xdb)<GET_IEEE_LOW(ydb))) return x;	/* |x|<|y| return x */
	    if(GET_IEEE_LOW(xdb)==GET_IEEE_LOW(ydb)) 
		return ZERO[bitshr(sx,31)];	/* |x|=|y| return x*0*/
	}

    /* determine ix = ilogb(x) */
	if(GET_IEEE_HIGH(xdb)<0x00100000) {	/* subnormal x */
	    if(GET_IEEE_HIGH(xdb)==0) {
	    	ix,i = -1043, GET_IEEE_LOW(xdb);
			while (i>0){ 
				ix -=1;
				i = bitshl(i,1);
			}
	    } 
	    else {
	    	ix,i = -1022, bitshl(GET_IEEE_HIGH(xdb),11);
			while (i>0) { 
				ix -=1;
				i = bitshl(i,1);
			}
	    }
	} 
	else ix = bitshr(GET_IEEE_HIGH(xdb),20)-1023;

    /* determine iy = ilogb(y) */
	if(GET_IEEE_HIGH(ydb)<0x00100000) {	/* subnormal y */
		if(GET_IEEE_HIGH(ydb)==0) {
	    	iy,i = -1043, GET_IEEE_LOW(ydb);
			while (i>0){ 
				iy -=1;
				i = bitshl(i,1);
			}
	    } 
	    else {
	    	iy,i = -1022, bitshl(GET_IEEE_HIGH(ydb),11);
			while (i>0) { 
				iy -=1;
				i = bitshl(i,1);
			}
	    }
	} 
	else iy = bitshr(GET_IEEE_HIGH(ydb),20)-1023;

    /* set up {GET_IEEE_HIGH(xdb),GET_IEEE_LOW(xdb)}, {GET_IEEE_HIGH(ydb),GET_IEEE_LOW(ydb)} and align y to x */
	if(ix >= -1022) 
	    GET_IEEE_HIGH(xdb) = bitor(0x00100000,bitand(0x000fffff,GET_IEEE_HIGH(xdb)));
	else {		/* subnormal x, shift x to normal */
	    n = -1022-ix;
	    if(n<=31) {
	        GET_IEEE_HIGH(xdb) = bitor(bitshl(GET_IEEE_HIGH(xdb),n),bitshr(GET_IEEE_LOW(xdb),32-n));
	        GET_IEEE_LOW(xdb) = bitshl(GET_IEEE_LOW(xdb),n);
	    } 
	    else {
			GET_IEEE_HIGH(xdb) = bitshl(GET_IEEE_LOW(xdb),n-32);
			GET_IEEE_LOW(xdb) = 0;
	    }
	}
	if(iy >= -1022) 
	    GET_IEEE_HIGH(ydb) = bitor(0x00100000,bitand(0x000fffff,GET_IEEE_HIGH(ydb)));
	else {		/* subnormal y, shift y to normal */
	    n = -1022-iy;
	    if(n<=31) {
	        GET_IEEE_HIGH(ydb) = bitor(bitshl(GET_IEEE_HIGH(ydb),n),bitshr(GET_IEEE_LOW(ydb),32-n));
	        GET_IEEE_LOW(ydb) = bitshl(GET_IEEE_LOW(ydb),n);
	    } 
	    else {
			GET_IEEE_HIGH(ydb) = bitshl(GET_IEEE_LOW(ydb),n-32);
			GET_IEEE_LOW(ydb) = 0;
	    }
	}

    /* fix point fmod */
	n = ix - iy;
	var hz,lz = 0,0u;
	while(n!=0) {
		dec(n);
	    hz = GET_IEEE_HIGH(xdb)-GET_IEEE_HIGH(ydb);
	    lz = GET_IEEE_LOW(xdb)-GET_IEEE_LOW(ydb); 
	    if(GET_IEEE_LOW(xdb) < GET_IEEE_LOW(ydb)) hz -= 1;
	    if(hz < 0){
	    	GET_IEEE_HIGH(xdb) = GET_IEEE_HIGH(xdb)+GET_IEEE_HIGH(xdb)+bitshr(GET_IEEE_LOW(xdb),31); 
	    	GET_IEEE_LOW(xdb) = GET_IEEE_LOW(xdb)+GET_IEEE_LOW(xdb);
	    }
	    else {
	    	if(bitor(hz,lz)==0) 		/* return sign(x)*0 */
		    	return ZERO[bitshr(sx,31)];
	    	GET_IEEE_HIGH(xdb) = hz+hz+bitshr(lz,31); 
	    	GET_IEEE_LOW(xdb) = lz+lz;
	    }
	}
	hz=GET_IEEE_HIGH(xdb)-GET_IEEE_HIGH(ydb);
	lz=GET_IEEE_LOW(xdb)-GET_IEEE_LOW(ydb); 
	if(GET_IEEE_LOW(xdb)<GET_IEEE_LOW(ydb)) hz -= 1;
	if(hz>=0) {
		GET_IEEE_HIGH(xdb)=hz;
		GET_IEEE_LOW(xdb)=lz;
	}

    /* convert back to floating value and restore the sign */
	if(bitor(GET_IEEE_HIGH(xdb),GET_IEEE_LOW(xdb))==0) 			/* return sign(x)*0 */
	    return ZERO[bitshr(sx,31)];
	while(GET_IEEE_HIGH(xdb)<0x00100000) {		/* normalize x */
	    GET_IEEE_HIGH(xdb) = GET_IEEE_HIGH(xdb)+GET_IEEE_HIGH(xdb)+bitshr(GET_IEEE_LOW(xdb),31);
	    GET_IEEE_LOW(xdb) = GET_IEEE_LOW(xdb)+GET_IEEE_LOW(xdb);
	    iy -= 1;
	}
	if(iy>= -1022) {	/* normalize output */
	    GET_IEEE_HIGH(xdb) = bitor((GET_IEEE_HIGH(xdb)-0x00100000),bitshl((iy+1023),20));
	    x = INSERT_WORDS(bitor(GET_IEEE_HIGH(xdb),sx),GET_IEEE_LOW(xdb));
	} else {		/* subnormal output */
	    n = -1022 - iy;
	    if(n<=20) {
			GET_IEEE_LOW(xdb) = bitor(bitshr(GET_IEEE_LOW(xdb),n),bitshl(GET_IEEE_HIGH(xdb),32-n));
			GET_IEEE_HIGH(xdb) = bitshr(GET_IEEE_HIGH(xdb),n);
	    } 
	    else if (n<=31) {
			GET_IEEE_LOW(xdb) = bitor(bitshl(GET_IEEE_HIGH(xdb),32-n),bitshr(GET_IEEE_LOW(xdb),n)); 
			GET_IEEE_HIGH(xdb) = sx;
	    } 
	    else {
			GET_IEEE_LOW(xdb) = bitshr(GET_IEEE_HIGH(xdb),n-32); 
			GET_IEEE_HIGH(xdb) = sx;
	    }
	    SET_IEEE(xdb,bitor(GET_IEEE_HIGH(xdb),sx),GET_IEEE_LOW(xdb));
	    x = GET_IEEE_DB(xdb);
	    x *= ONE;		/* create necessary signal */
	}
	return x;		/* exact output */
}
