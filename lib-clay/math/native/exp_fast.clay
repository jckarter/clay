//
//    Expponential function
//    Modified for generic Clay math lib from Naoaki Okazaki (2010)
//

import math.(M_LOG2E);
import numbers.floats.*;

private alias C1 = 6.93145751953125E-1;
private alias C2 = 1.42860682030941723212E-6;

private define uType;
private define fType;
private define expmax;

// XXX Need to fix these values
inline overload expmax(static Float) = 88.0f;
inline overload expmax(static Double) = 707.0;
inline overload expmax(static LongDouble) = 11356.0l;

inline overload uType(static Float) = UInt;
inline overload uType(static Double) = UInt64;
inline overload uType(static LongDouble) = UInt64;

inline overload fType(static 2) = Float;
inline overload fType(static 4) = Double;
inline overload uType(static 8) = LongDouble;

[T | Float?(T)]
private inline toUInt(a:T) = uType(T)(a);

[I | Integer?(I)]
private inline toFloat(a:I) = fType(TypeSize(SizeT))(a);

[T | Float?(T)]
exp_fast(x:T) --> r:T {
    if(x > expmax(T))
        r <-- infinity(T);
    else{
        r <-- x;
        /* n = floor(x / log 2) */
        var a = T(M_LOG2E) * r;
        a -= if(a < T(0)) T(1) else T(0);
        var n = toUInt(a);
        /* x -= n * log2 */
        var px = T(n);
        r -= px * T(C1);
        r -= px * T(C2);

        /* Compute e^x using a polynomial approximation. */
        a = T(2.2762932529150460619497906285755631573256951680928e-10);
        a *= r;
        a += T(1.93367224471636363463651078554697568501742984768854e-9);
        a *= r;
        a += T(2.52543927629810215309605055241333435158089916072836e-8);
        a *= r;
        a += T(2.7540144801860636516400552945824228138166510066936e-7);
        a *= r;
        a += T(2.75583147053220552447847947870361102182338458956017e-6);
        a *= r;
        a += T(2.4801546952196268386551625341270924245448949820144e-5);
        a *= r;
        a += T(1.98412709907914555147826749325174275063119441397255e-4);
        a *= r;
        a += T(1.38888888661019235625906849288500655817315802824057e-3);
        a *= r;
        a += T(8.333333333639598748175600716777066054934952111002e-3);
        a *= r;
        a += T(4.16666666666400203177888506088903193769823751590758e-2);
        a *= r;
        a += T(0.16666666666666805461760233769080472413024408831279);
        a *= r;
        a += T(0.499999999999999962289068852705038969538821467770838);
        a *= r;
        a += T(1.0000000000000000004034789178104888993769939051368);
        a *= r;
        a += T(0.99999999999999999999928421898456045238677548461656);

        /* Build 2^n in double. */
        n += exponentBias(T);
        r <-- a * floatFromParts(T,false,
            bitand(n,exponentMask(T)),floatMantissaZero(T));
    }
}


