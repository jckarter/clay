
import math.*;

// for non-zero x
//  x = frexp(arg,@exp);
// return a double fp quantity x such that 0.5 <= |x| <1.0
// and the corresponding binary exponent "exp". That is
//  arg = x*2^exp.
// If arg is inf, 0.0, or NaN, then frexp(arg,@exp) returns arg
// with *exp=0.

[T,I when Float?(T) and Integer?(I)]
overload frexp(x:T, eptr:Pointer[I]){
    var k = floatExponent(x);                      // extract exponent
    eptr^ = 0;
    if (not finite?(x)) return x+x;           // NaN or Inf
    if (k == 0) {                                   // 0 or subnormal x
        if (x == T(0)) return x;                    // +-0 
        k = floatBits(normalize(x));
        eptr^ = -(mantissaSize(T)+2);
    }
    eptr^ +: I(k-(exponentBias(T)-1)); 
    return floatFromBits(bitor(bitor(bitshl(bitshr(exponentMask(T),2),
        mantissaSize(T)+1), bitand(floatBits(x),bitnot(bitshl(exponentMask(T),
            mantissaSize(T))))),bitand(floatBits(x),mantissaMask(T))));
    
}



//[T,I when T==LongDouble and Integer?(I)]
//overload frexp(x:T, eptr:Pointer[I]){
//    var k = floatExponent(x);                       // extract exponent
//    eptr^ = 0;
//    if (k == 0) {                                   // 0 or subnormal x
//        if (x == T(0)) return x;                    // +-0 
//        k = floatBits(normalize(x));
//        eptr^ = -(mantissaSize(T)+2);
//    }
//    if (k == exponentMask(T)) return x+x;           // NaN or Inf
//    eptr^ -: (exponentBias(T)-1);
    
//    return floatFromBits(bitor(bitand(floatBits(x), bitnot(exponentMask(T))),bitshl(bitshr(exponentMask(T),1),mantissaSize(T)+1)));
//}
