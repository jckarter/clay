// cbrt function adapted from openlibm

import math.native.kernel.ieee754.*;
import math.*;

alias B1 = 715094163; /* B1 = (1023-1023/3-0.03306235651)*2**20 */
alias B2 = 696219795; /* B2 = (1023-1023/3-54/3-0.03306235651)*2**20 */

/* |1/cbrt(x) - p(x)| < 2**-23.5 (~[-7.93e-8, 7.929e-8]). */
alias CP0 =  1.87595182427177009643;		/* 0x3ffe03e6, 0x0f61e692 */
alias CP1 = -1.88497979543377169875;		/* 0xbffe28e0, 0x92f02420 */
alias CP2 =  1.621429720105354466140;		/* 0x3ff9f160, 0x4a49d6c2 */
alias CP3 = -0.758397934778766047437;		/* 0xbfe844cb, 0xbee751d9 */
alias CP4 =  0.145996192886612446982;		/* 0x3fc2b000, 0xd4e4edd7 */

overload cbrt(x:Double) {
	
	var xdb = MAKE_IEEE(x);
	var sign = bitand(GET_IEEE_HIGH(xdb),SM); 		/* sign= sign(x) */
	GET_IEEE_HIGH(xdb)  = bitxor(GET_IEEE_HIGH(xdb),sign);
	if(GET_IEEE_HIGH(xdb)>=EM) return x+x; /* cbrt(NaN,INF) is itself */

    /*
     * Rough cbrt to 5 bits:
     *    cbrt(2**e*(1+m) ~= 2**(e/3)*(1+(e%3+m)/3)
     * where e is integral and >= 0, m is real and in [0, 1), and "/" and
     * "%" are integer division and modulus with rounding towards minus
     * infinity.  The RHS is always >= the LHS and has a maximum relative
     * error of about 1 in 16.  Adding a bias of -0.03306235651 to the
     * (e%3+m)/3 term reduces the error to about 1 in 32. With the IEEE
     * floating point representation, for finite positive normal values,
     * ordinary integer divison of the value in bits magically gives
     * almost exactly the RHS of the above provided we first subtract the
     * exponent bias (1023 for doubles) and later add it back.  We do the
     * subtraction virtually to keep e >= 0 so that ordinary integer
     * division rounds towards minus infinity; this is also efficient.
     */
     
     var t = MAKE_IEEE(0l);
     if(GET_IEEE_HIGH(xdb)<CV8) { 		/* zero or subnormal? */
	    if(bitor(GET_IEEE_HIGH(xdb),GET_IEEE_LOW(xdb))==0) {
		   return x;		/* cbrt(0) is itself */
	    }
         SET_IEEE_HIGH(t,CV19); /* set t= 2**54 */
	    GET_IEEE_DB(t) *= x;
	    SET_IEEE(t,bitor(sign,bitand(GET_IEEE_HIGH(t),MM) \ 3+B2),0);
     } else
	    SET_IEEE(t,bitor(sign,GET_IEEE_HIGH(xdb) \ 3+B1),0);
        
    /*
     * New cbrt to 23 bits:
     *    cbrt(x) = t*cbrt(x/t**3) ~= t*P(t**3/x)
     * where P(r) is a polynomial of degree 4 that approximates 1/cbrt(r)
     * to within 2**-23.5 when |r - 1| < 1/10.  The rough approximation
     * has produced t such than|t/cbrt(x) - 1| ~< 1/32, and cubing this
     * gives us bounds for r = t**3/x.
     *
     * Try to optimize for parallel evaluation as in k_tanf.c.
     */
	var r = (GET_IEEE_DB(t)*GET_IEEE_DB(t))*(GET_IEEE_DB(t)/x);
	GET_IEEE_DB(t) *= ((CP0+r*(CP1+r*CP2))+((r*r)*r)*(CP3+r*CP4));

    /*
     * Round t away from zero to 23 bits (sloppily except for ensuring that
     * the result is larger in magnitude than cbrt(x) but not much more than
     * 2 23-bit ulps larger).  With rounding towards zero, the error bound
     * would be ~5/6 instead of ~4/6.  With a maximum error of 2 23-bit ulps
     * in the rounded t, the infinite-precision error in the Newton
     * approximation barely affects third digit in the final error
     * 0.667; the error in the rounded t can be up to about 3 23-bit ulps
     * before the final error is larger than 0.667 ulps.
     */
	var u = t;
	GET_IEEE_L(u) = bitand(GET_IEEE_L(u)+SM, bitcast(Int64,0xffffffffc0000000ul));
	t = u;

    /* one step Newton iteration to 53 bits with error < 0.667 ulps */
	var s = GET_IEEE_DB(t) * GET_IEEE_DB(t);				/* t*t is exact */
	r = x/s;				/* error <= 0.5 ulps; |r| < |t| */
	var w = GET_IEEE_DB(t)+GET_IEEE_DB(t);				/* t+t is exact */
	r = (r-GET_IEEE_DB(t))/(w+r);			/* r-t is exact; w+r ~= 3*t */
	return GET_IEEE_DB(t)+GET_IEEE_DB(t)*r;			/* error <= 0.5 + 0.5/3 + epsilon */
}
