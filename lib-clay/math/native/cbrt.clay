// cubic root function

define cbrt;

private var c = array(
        0.0015319394088521, -0.018843445653409,
        0.10170534986, -0.31702448761286,
        0.63520892642253, -0.88106985991189,
        1.051750376454, 0.4267412323558,
        1.507908365919e-5, -3.7095709111375e-4,
        0.0040043972242353, -0.024964114079723,
        0.10003913718511, -0.27751961573273,
        0.66256121926465, 0.53766026150315,
        1.4842542902609e-7, -7.3027601203435e-6,
        1.5766326109233e-4, -0.0019658008013138,
        0.015755176844105, -0.0874132014051,
        0.41738741349777, 0.6774094811598
);

[T | Numeric?(T)]
overload cbrt(x:T) {
    alias ZERO = T(0);
    alias HALF = T(0.5);
    alias ONE = T(1);
    alias TWO = T(2);
    alias THREE = T(3);
    alias EIGHT = T(8);

    if (x == T(0)) return T(0);
    var y,w = HALF,x;

    if (x <= ZERO) {
        w = -x;
        y = -HALF;
    }
    if (w > EIGHT) {
        while (w > T(281474976710656.0)) { /* 2@48 */
            w *= T(3.552713678800500929355621337890625e-15); /* 2@(-48) */
            y *= T(65536.0); /* 2@16 */
        }
        while (w > EIGHT) {
            w *= T(0.125);
            y *= TWO;
        }
    } else if (w < ONE) {
        while (w < T(3.552713678800500929355621337890625e-15)) {
            w *= T(281474976710656.0);
            y *= T(1.52587890625e-5); /* 2@(-16) */
        }
        while (w < ONE) {
            w *= EIGHT;
            y *= HALF;
        }
    }
    var k = 16;
    if (w < TWO) {
        k = 0;
    } else if (w < T(4)) {
        k = 8;
    }
    var u = ((((((T(c[k]) * w + T(c[k + 1])) * w +
        T(c[k + 2])) * w + T(c[k + 3])) * w +
        T(c[k + 4])) * w + T(c[k + 5])) * w +
        T(c[k + 6])) * w + T(c[k + 7]);
    y *= u + THREE * u * w / (w + TWO * u * u * u);
    return y;
}
