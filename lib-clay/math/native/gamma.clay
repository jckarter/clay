// l_gamma_r from openlibm

import math.native.kernel.ieee754.*;
import math.*;

maxGamma(#Float) = 35.04f;
overload maxGamma(#Double) = 171.6025;
overload maxGamma(#LongDouble) = 1755.5323977l;

private var signgam = 0;

alias a0  =  7.72156649015328655494e-02; /* 0x3FB3C467, 0xE37DB0C8 */
alias a1  =  3.22467033424113591611e-01; /* 0x3FD4A34C, 0xC4A60FAD */
alias a2  =  6.73523010531292681824e-02; /* 0x3FB13E00, 0x1A5562A7 */
alias a3  =  2.05808084325167332806e-02; /* 0x3F951322, 0xAC92547B */
alias a4  =  7.38555086081402883957e-03; /* 0x3F7E404F, 0xB68FEFE8 */
alias a5  =  2.89051383673415629091e-03; /* 0x3F67ADD8, 0xCCB7926B */
alias a6  =  1.19270763183362067845e-03; /* 0x3F538A94, 0x116F3F5D */
alias a7  =  5.10069792153511336608e-04; /* 0x3F40B6C6, 0x89B99C00 */
alias a8  =  2.20862790713908385557e-04; /* 0x3F2CF2EC, 0xED10E54D */
alias a9  =  1.08011567247583939954e-04; /* 0x3F1C5088, 0x987DFB07 */
alias a10 =  2.52144565451257326939e-05; /* 0x3EFA7074, 0x428CFA52 */
alias a11 =  4.48640949618915160150e-05; /* 0x3F07858E, 0x90A45837 */
alias tc  =  1.46163214496836224576e+00; /* 0x3FF762D8, 0x6356BE3F */
alias tf  = -1.21486290535849611461e-01; /* 0xBFBF19B9, 0xBCC38A42 */
/* tt = -(tail of tf) */
alias tt  = -3.63867699703950536541e-18; /* 0xBC50C7CA, 0xA48A971F */
alias t0  =  4.83836122723810047042e-01; /* 0x3FDEF72B, 0xC8EE38A2 */
alias t1  = -1.47587722994593911752e-01; /* 0xBFC2E427, 0x8DC6C509 */
alias t2  =  6.46249402391333854778e-02; /* 0x3FB08B42, 0x94D5419B */
alias t3  = -3.27885410759859649565e-02; /* 0xBFA0C9A8, 0xDF35B713 */
alias t4  =  1.79706750811820387126e-02; /* 0x3F9266E7, 0x970AF9EC */
alias t5  = -1.03142241298341437450e-02; /* 0xBF851F9F, 0xBA91EC6A */
alias t6  =  6.10053870246291332635e-03; /* 0x3F78FCE0, 0xE370E344 */
alias t7  = -3.68452016781138256760e-03; /* 0xBF6E2EFF, 0xB3E914D7 */
alias t8  =  2.25964780900612472250e-03; /* 0x3F6282D3, 0x2E15C915 */
alias t9  = -1.40346469989232843813e-03; /* 0xBF56FE8E, 0xBF2D1AF1 */
alias t10 =  8.81081882437654011382e-04; /* 0x3F4CDF0C, 0xEF61A8E9 */
alias t11 = -5.38595305356740546715e-04; /* 0xBF41A610, 0x9C73E0EC */
alias t12 =  3.15632070903625950361e-04; /* 0x3F34AF6D, 0x6C0EBBF7 */
alias t13 = -3.12754168375120860518e-04; /* 0xBF347F24, 0xECC38C38 */
alias t14 =  3.35529192635519073543e-04; /* 0x3F35FD3E, 0xE8C2D3F4 */
alias u0  = -7.72156649015328655494e-02; /* 0xBFB3C467, 0xE37DB0C8 */
alias u1  =  6.32827064025093366517e-01; /* 0x3FE4401E, 0x8B005DFF */
alias u2  =  1.45492250137234768737e+00; /* 0x3FF7475C, 0xD119BD6F */
alias u3  =  9.77717527963372745603e-01; /* 0x3FEF4976, 0x44EA8450 */
alias u4  =  2.28963728064692451092e-01; /* 0x3FCD4EAE, 0xF6010924 */
alias u5  =  1.33810918536787660377e-02; /* 0x3F8B678B, 0xBF2BAB09 */
alias v1  =  2.45597793713041134822e+00; /* 0x4003A5D7, 0xC2BD619C */
alias v2  =  2.12848976379893395361e+00; /* 0x40010725, 0xA42B18F5 */
alias v3  =  7.69285150456672783825e-01; /* 0x3FE89DFB, 0xE45050AF */
alias v4  =  1.04222645593369134254e-01; /* 0x3FBAAE55, 0xD6537C88 */
alias v5  =  3.21709242282423911810e-03; /* 0x3F6A5ABB, 0x57D0CF61 */
alias s0  = -7.72156649015328655494e-02; /* 0xBFB3C467, 0xE37DB0C8 */
alias s1  =  2.14982415960608852501e-01; /* 0x3FCB848B, 0x36E20878 */
alias s2  =  3.25778796408930981787e-01; /* 0x3FD4D98F, 0x4F139F59 */
alias s3  =  1.46350472652464452805e-01; /* 0x3FC2BB9C, 0xBEE5F2F7 */
alias s4  =  2.66422703033638609560e-02; /* 0x3F9B481C, 0x7E939961 */
alias s5  =  1.84028451407337715652e-03; /* 0x3F5E26B6, 0x7368F239 */
alias s6  =  3.19475326584100867617e-05; /* 0x3F00BFEC, 0xDD17E945 */
alias r1  =  1.39200533467621045958e+00; /* 0x3FF645A7, 0x62C4AB74 */
alias r2  =  7.21935547567138069525e-01; /* 0x3FE71A18, 0x93D3DCDC */
alias r3  =  1.71933865632803078993e-01; /* 0x3FC601ED, 0xCCFBDF27 */
alias r4  =  1.86459191715652901344e-02; /* 0x3F9317EA, 0x742ED475 */
alias r5  =  7.77942496381893596434e-04; /* 0x3F497DDA, 0xCA41A95B */
alias r6  =  7.32668430744625636189e-06; /* 0x3EDEBAF7, 0xA5B38140 */
alias w0  =  4.18938533204672725052e-01; /* 0x3FDACFE3, 0x90C97D69 */
alias w1  =  8.33333333333329678849e-02; /* 0x3FB55555, 0x5555553B */
alias w2  = -2.77777777728775536470e-03; /* 0xBF66C16C, 0x16B02E5C */
alias w3  =  7.93650558643019558500e-04; /* 0x3F4A019F, 0x98CF38B6 */
alias w4  = -5.95187557450339963135e-04; /* 0xBF4380CB, 0x8C0FE741 */
alias w5  =  8.36339918996282139126e-04; /* 0x3F4B67BA, 0x4CDAD5D1 */
alias w6  = -1.63092934096575273989e-03; /* 0xBF5AB89D, 0x0B9E43E4 */


overload lgamma_r(xarg:Double, signgamp:Pointer[Int]) {
	alias ONE = 1.;
	alias ZERO = 0.;
	alias HALF = 0.5;

	var x = xarg;
	var xdb = MAKE_IEEE(x);
	var nadj = ZERO;
	
    /* purge off +-inf, NaN, +-0, tiny and negative arguments */
	signgamp^ = 1;
	var ix = bitand(GET_IEEE_HIGH(xdb),0x7fffffff);
	if(ix>=0x7ff00000) return x*x;
	if(bitor(ix,GET_IEEE_LOW(xdb))==0) return ONE/ZERO;
	if(ix<0x3b900000) {	/* |x|<2**-70, return -log(|x|) */
	    if(GET_IEEE_HIGH(xdb)<0) {
	        signgamp^ = -1;
	        return -log(-x);
	    } else return -log(x);
	}
	    
	if(GET_IEEE_HIGH(xdb)<0) {
	    if(ix>=0x43300000) 	/* |x|>=2**52, must be -integer */
			return ONE/ZERO;
	    var t = sinpi(x);
	    if(t==ZERO) return ONE/ZERO; /* -integer */
	    nadj = log(M_PI/abs(t*x));
	    if(t<ZERO) signgamp^ = -1;
	    x = -x;
	}

	var i,y,q,r,w = 0,ZERO,ZERO,ZERO,ZERO;
	var p,p1,p2,p3 = ZERO,ZERO,ZERO,ZERO;
		   
    /* purge off 1 and 2 */
	if(bitor(ix-0x3ff00000,GET_IEEE_LOW(xdb))==0 
		or bitor(ix-0x40000000,GET_IEEE_LOW(xdb))==0) { 
			r = 0;
    /* for x < 2.0 */
	} 
	else {
		if(ix<0x40000000) {
		    if(ix<=0x3feccccc) { 	/* lgamma(x) = lgamma(x+1)-log(x) */
				r = -log(x);
				if(ix>=0x3FE76944) {
					y = ONE-x; 
					i= 0;
				}
				else 
					if(ix>=0x3FCDA661) {
						y= x-(tc-ONE); 
						i=1;
					}
			  		else {
			  			y = x; 
			  			i=2;
			  		}
		    } 
		    else {
			  	r = ZERO;
			    if(ix>=0x3FFBB4C3) {
			    	y=2.0-x;
			    	i=0;
			    } /* [1.7316,2] */
			    else 
			    	if(ix>=0x3FF3B4C4) {
			    		y=x-tc;
			    		i=1;
			    	} /* [1.23,1.73] */
					else {
						y=x-ONE;
						i=2;
					}
		    }
		    switch(i)
		      	case (0) {
					var z = y*y;
					p1 = a0+z*(a2+z*(a4+z*(a6+z*(a8+z*a10))));
					p2 = z*(a1+z*(a3+z*(a5+z*(a7+z*(a9+z*a11)))));
					p  = y*p1+p2;
					r  +: (p-0.5*y);
		      	}
		      	case (1) {
					var z = y*y;
					w = z*y;
					p1 = t0+w*(t3+w*(t6+w*(t9 +w*t12)));	/* parallel comp */
					p2 = t1+w*(t4+w*(t7+w*(t10+w*t13)));
					p3 = t2+w*(t5+w*(t8+w*(t11+w*t14)));
					p  = z*p1-(tt-w*(p2+y*p3));
					r +: (tf + p);
		      	}
		      	case (2) {	
					p1 = y*(u0+y*(u1+y*(u2+y*(u3+y*(u4+y*u5)))));
					p2 = ONE+y*(v1+y*(v2+y*(v3+y*(v4+y*v5))));
					r +: (-0.5*y + p1/p2);
		    	}
		}
		else { 
			var z = ONE;
			if(ix<0x40200000) { 			/* x < 8.0 */
			    i = wrapCast(Int32,x);
			    y = x-Double(i);
			    p = y*(s0+y*(s1+y*(s2+y*(s3+y*(s4+y*(s5+y*s6))))));
			    q = ONE+y*(r1+y*(r2+y*(r3+y*(r4+y*(r5+y*r6)))));
			    r = HALF*y+p/q;
			    /* lgamma(1+s) = log(s) + lgamma(s) */
			    
			    switch(i)
				    case (7) goto case7;	/* FALLTHRU */
				    case (6) goto case6;	/* FALLTHRU */
				    case (5) goto case5;	/* FALLTHRU */
				    case (4) goto case4;	/* FALLTHRU */
				    case (3) goto case3;	/* FALLTHRU */
					case (2,1,0) goto default;

case7:				z *: (y+6.0);	/* FALLTHRU */
case6:				z *: (y+5.0);	/* FALLTHRU */
case5:				z *: (y+4.0);	/* FALLTHRU */
case4:				z *: (y+3.0);	/* FALLTHRU */
case3:				z *: (y+2.0);	/* FALLTHRU */
default:			
				r +: log(z);
		    /* 8.0 <= x < 2**58 */
			} 
			else 
				if (ix < 0x43900000) {
				    z = ONE/x;
				    y = z*z;
				    w = w0+z*(w1+y*(w2+y*(w3+y*(w4+y*(w5+y*w6)))));
				    r = (x-HALF)*(log(x)-ONE)+w;
				} 
				else 
		    /* 2**58 <= x <= inf */
			    	r =  x*(log(x)-ONE);
		}
	}
	if(GET_IEEE_HIGH(xdb)<0) r = nadj - r;
	return r;
}


overload gamma_r (x:Double, signgamp:Pointer[Int]) {
  /* We don't have a real gamma implementation now.  We'll use lgamma
     and the exp function.  But due to the required boundary
     conditions we must check some values separately.  */

  var xdb = MAKE_IEEE(x);

  if (bitor(bitand(GET_IEEE_HIGH(xdb) , 0x7fffffff) , GET_IEEE_LOW(xdb)) == 0) {
      /* Return value for x == 0 is Inf with divide by zero exception.  */
      signgamp^ = 0;
      return 1.0 / x;
  }
  if (GET_IEEE_HIGH(xdb) < 0 and GET_IEEE_HIGH(xdb) < bitcast(Int32,0xfff00000u) and rint(x) == x) {
      /* Return value for integer x < 0 is NaN with invalid exception.  */
      signgamp^ = 0;
      return (x - x) / (x - x);
    }
  if (GET_IEEE_HIGH(xdb) == bitcast(Int32,0xfff00000u) and GET_IEEE_LOW(xdb)==0) {
      /* x == -Inf.  According to ISO this is NaN.  */
      signgamp^ = 0;
      return x - x;
  }

  /* XXX FIXME.  */
  return exp(lgamma_r(x, signgamp));
}


overload lgamma(x:Double) = lgamma_r(x,@signgam);
overload tgamma(x:Double) = gamma_r(x,@signgam);