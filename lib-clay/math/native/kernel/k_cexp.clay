
import math.native.kernel.ieee754.*;
import math.native.kernel.k_exp.(__frexp_exp);
import math.native.protocol.(sin, cos);
import complex.*;


__ldexp_cexp(z:ComplexDouble, expt) {
	var ex_expt = 0;
	var x = real(z);
	var y = imagValue(z);
	var exp_x = __frexp_exp(x, @ex_expt);
	var et = expt + ex_expt;

	// Arrange so that scale1 * scale2 == 2**expt.  We use this to
	// compensate for scalbn being horrendously slow.
	var half_expt = et \ 2;
	var scale1 = MAKE_IEEE(bitshl(0x3ff + half_expt, 20), 0).2;
	half_expt = et - half_expt;
	var scale2 = MAKE_IEEE(bitshl(0x3ff + half_expt, 20), 0).2;

	return Complex(cos(y) * exp_x * scale1 * scale2,
	    sin(y) * exp_x * scale1 * scale2);
}
