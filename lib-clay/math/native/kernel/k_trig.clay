// trig kernel routines
import math.native.kernel.ieee754.*;

alias S1  = -1.66666666666666324348e-01; /* 0xBFC55555, 0x55555549 */
alias S2  =  8.33333333332248946124e-03; /* 0x3F811111, 0x1110F8A6 */
alias S3  = -1.98412698298579493134e-04; /* 0xBF2A01A0, 0x19C161D5 */
alias S4  =  2.75573137070700676789e-06; /* 0x3EC71DE3, 0x57B1FE7D */
alias S5  = -2.50507602534068634195e-08; /* 0xBE5AE5E6, 0x8A2B9CEB */
alias S6  =  1.58969099521155010221e-10; /* 0x3DE5D93A, 0x5ACFD57C */

kernel_sin(x, y, iy) {
	var z = x*x;
	var w = z*z;
	var r,v	= S2+z*(S3+z*S4) + z*w*(S5+z*S6) , z*x;
	if(iy == 0) return x+v*(S1+z*r);
	else      return x-((z*(0.5*y-v*r)-y)-v*S1);
}

alias C1  =  4.16666666666666019037e-02; /* 0x3FA55555, 0x5555554C */
alias C2  = -1.38888888888741095749e-03; /* 0xBF56C16C, 0x16C15177 */
alias C3  =  2.48015872894767294178e-05; /* 0x3EFA01A0, 0x19CB1590 */
alias C4  = -2.75573143513906633035e-07; /* 0xBE927E4F, 0x809C52AD */
alias C5  =  2.08757232129817482790e-09; /* 0x3E21EE9E, 0xBDB4B1C4 */
alias C6  = -1.13596475577881948265e-11; /* 0xBDA8FAE9, 0xBE8838D4 */

kernel_cos(x, y) {
	var z  = x*x;
	var w  = z*z;
	var r  = z*(C1+z*(C2+z*C3)) + w*w*(C4+z*(C5+z*C6));
	var hz = 0.5*z;
	w  = 1.-hz;
	return w + (((1.-w)-hz) + (z*r-x*y));
}

private var ta = array(
		 3.33333333333334091986e-01,	/* 3FD55555, 55555563 */
		 1.33333333333201242699e-01,	/* 3FC11111, 1110FE7A */
		 5.39682539762260521377e-02,	/* 3FABA1BA, 1BB341FE */
		 2.18694882948595424599e-02,	/* 3F9664F4, 8406D637 */
		 8.86323982359930005737e-03,	/* 3F8226E3, E96E8493 */
		 3.59207910759131235356e-03,	/* 3F6D6D22, C9560328 */
		 1.45620945432529025516e-03,	/* 3F57DBC8, FEE08315 */
		 5.88041240820264096874e-04,	/* 3F4344D8, F2F26501 */
		 2.46463134818469906812e-04,	/* 3F3026F7, 1A8D1068 */
		 7.81794442939557092300e-05,	/* 3F147E88, A03792A6 */
		 7.14072491382608190305e-05,	/* 3F12B80F, 32F0A7E9 */
		-1.85586374855275456654e-05,	/* BEF375CB, DB605373 */
		 2.59073051863633712884e-05,	/* 3EFB2A70, 74BF7AD4 */
/* one */	 1.00000000000000000000e+00,	/* 3FF00000, 00000000 */
/* pio4 */	 7.85398163397448278999e-01,	/* 3FE921FB, 54442D18 */
/* pio4lo */	 3.06161699786838301793e-17	/* 3C81A626, 33145C07 */
);

private var one = ta[13];
private var  pio4 = ta[14];
private var  pio4lo = ta[15];

kernel_tan(tx, ty, iy) {
	var z,w,x,y = 0.,0.,tx,ty;
	var hx = GET_IEEE_HIGH(x);
	var ix = bitand(hx , MM);			/* high word of |x| */
	if (ix >= 0x3FE59428) {	/* |x| >= 0.6744 */
		if (hx < 0) {
			x = -x;
			y = -y;
		}
		z = pio4 - x;
		w = pio4lo - y;
		x = z + w;
		y = 0.0;
	}
	z = x * x;
	w = z * z;
	var r = ta[1] + w * (ta[3] + w * (ta[5] + w * (ta[7] + w * (ta[9] +
		w * ta[11]))));
	var v = z * (ta[2] + w * (ta[4] + w * (ta[6] + w * (ta[8] + w * (ta[10] +
		w * ta[12])))));
	var s = z * x;
	r = y + z * (s * (r + v) + y);
	r +: ta[0] * s;
	w = x + r;
	if (ix >= 0x3FE59428) {
		v = Double(iy);
		return Double (1 - bitand(bitshr(hx,30),2)) *
			(v - 2.0 * (x - (w * w / (w + v) - r)));
	}
	if (iy == 1)
		return w;
	else {
		/*
		 * if allow error up to 2 ulp, simply return
		 * -1.0 / (x+r) here
		 */
		/* compute -1.0 / (x+r) accurately */
		z = w;
		z = SET_IEEE_LOW(z,0);
		v = r - (z - x);	/* z+v = r+x */
		var a = -1.0 / w;
		var t = a;	/* a = -1.0/w */
		t = SET_IEEE_LOW(t,0);
		s = 1.0 + t * z;
		return t + a * (s + t * v);
	}
}
