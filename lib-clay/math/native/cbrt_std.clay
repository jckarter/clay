// Compute cubic root of double value.

alias CBRT2 = 1.2599210498948731648;		/* 2^(1/3) */
alias SQR_CBRT2 = 1.5874010519681994748;		/* 2^(2/3) */

private var factor = array(1.0 / SQR_CBRT2,1.0 / CBRT2,1.0,CBRT2,SQR_CBRT2);

cbrt_std(x:Double){
    double xm, ym, u, t2;
    int xe;

    // Reduce X.  XM now is an range 1.0 to 0.5.  */
    var xm = __frexp (fabs (x), &xe);

    /* If X is not finite or is null return it (with raising exceptions
    if necessary.
    Note: *Our* version of `frexp' sets XE to zero if the argument is
    Inf or NaN.  This is not portable but faster.  */
    if (xe == 0 && fpclassify (x) <= FP_ZERO)
    return x + x;

    u = (0.354895765043919860
    + ((1.50819193781584896
    + ((-2.11499494167371287
    + ((2.44693122563534430
    + ((-1.83469277483613086
    + (0.784932344976639262 - 0.145263899385486377 * xm) * xm)
    * xm))
    * xm))
    * xm))
    * xm));

    var t2 = u * u * u;

    var ym = u * (t2 + 2.0 * xm) / (2.0 * t2 + xm) * factor[2 + xe % 3];

    return __ldexp (x > 0.0 ? ym : -ym, xe / 3);
}

