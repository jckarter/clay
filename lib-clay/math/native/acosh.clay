// acosh

import math.native.kernel.ieee754.*;
import math.native.protocol.*;
import math.native.constants.(M_LN2,M_PI_4,M_PI_2,M_PI);
import math.native.fpclassify.(fpclassify,FP_NAN,FP_ZERO,FP_INFINITE);
import numbers.floats.(nan,signbit,infinity);
import complex.*;

override acosh(x:Float) = Float(acosh(Double(x)));

override acosh(x:Double) {
	alias ONE = 1.;
	var xdb = MAKE_IEEE(x);
	var t = 0.;
	if(GET_IEEE_HIGH(xdb) < RM) {	// x < 1 
	    return (x-x)/(x-x);
	} 
	else if(GET_IEEE_HIGH(xdb) >=0x41b00000) {	// x > 2**28 
	    if(GET_IEEE_HIGH(xdb) >=EM)	// x is inf of NaN 
	        return x+x;
	    else 
			return log(x)+M_LN2;	// acosh(huge)=log(2x) 
	} 
	else 
		if(bitor(GET_IEEE_HIGH(xdb)-RM,GET_IEEE_LOW(xdb)) == 0) {
	    	return 0.0;				// acosh(1) = 0 
		} else if (GET_IEEE_HIGH(xdb) > CV2) {	// 2**28 > x > 2 
	    	t = x*x;
	    	return log(2.0*x-ONE/(x+sqrt(t-ONE)));
		} else {					// 1<x<2 
	    	t = x-ONE;
	    	return log1p(t+sqrt(2.0*t+t*t));
		}
}

override acosh(x:ComplexDouble) --> res:ComplexDouble {
  
  	var rcls = fpclassify(real(x));
  	var icls = fpclassify(imagValue(x));

  	if (rcls <= FP_INFINITE or icls <= FP_INFINITE) {
      	if (icls == FP_INFINITE) {
	  		res <-- Complex(infinity(Double),

			(if (rcls == FP_NAN)
				nan(Double)
			else
				copysign((if(rcls == FP_INFINITE)
						 (if(real(x) < 0.0)
						    M_PI - M_PI_4 else M_PI_4)
						else M_PI_2), imagValue(x))));
		}
      	else if (rcls == FP_INFINITE) {
	  		res <-- Complex(infinity(Double),

	  		(if (icls >= FP_ZERO)
	    		copysign((if(signbit(real(x)) == 1) M_PI else 0.0), imagValue(x))
	 		else
	    		nan(Double)));
		}
      	else {
			res <-- nan(ComplexDouble);
		}
    }
  	else if (rcls == FP_ZERO and icls == FP_ZERO) {
      	res <-- Complex(0.0, copysign(M_PI_2, imagValue(x)));
    }
  	else {
     	var y = Complex((real(x) - imagValue(x)) * (real(x) + imagValue(x)) - 1.0, 2.0 * real(x) * imagValue(x));
      	y = sqrt (y);
      	if (real(x) < 0.0) y = -y;
      	y = Complex(real(y) + real(x), imagValue(y) + imagValue(x));
      	res <-- log(y);
      	// We have to use the positive branch.
      	if (real(res) < 0.0)
			res = -res;
	}
}
