public import math.native.protocol.*;

public import math.native.copysign.*;
public import math.native.ldexp.*;
public import math.native.frexp.*;
public import math.native.scalbn.*;
public import math.native.trunc.*;
public import math.native.ceil.*;
public import math.native.floor.*;
public import math.native.rint.*;
public import math.native.round.*;
public import math.native.llround.*;
public import math.native.modf.*;
public import math.native.fmod.*;
public import math.native.nextafter.*;
public import math.native.abs.*;
public import math.native.abscomplex.*;
public import math.native.sign.*;
public import math.native.hypot.*;
public import math.native.sqrt.*;
public import math.native.cbrt.*;
public import math.native.pow.*;
public import math.native.exp.*;
public import math.native.exp2.*;
public import math.native.expm1.*;
public import math.native.sinh.*;
public import math.native.cosh.*;
public import math.native.tanh.*;
public import math.native.ilogb.*;
public import math.native.log.*;
public import math.native.log2.*;
public import math.native.log10.*;
public import math.native.log1p.*;
public import math.native.erf.*;
public import math.native.gamma.*;
public import math.native.beta.*;
public import math.native.bessel.*;
public import math.native.sinpi.*;
public import math.native.tan.*;
public import math.native.cos.*;
public import math.native.sin.*;
public import math.native.atanh.*;
public import math.native.acosh.*;
public import math.native.asinh.*;
public import math.native.asin.*;
public import math.native.acos.*;
public import math.native.atan.*;
public import math.native.atan2.*;
public import math.native.cot.*;
public import math.native.arg.*;
public import math.native.proj.*;

public import complex.*;

import math.native.constants.(M_PI);
import numbers.floats.(floatFromBits,floatExponent,mantissaSize);

define recip;

[T when Integer?(T)]
forceinline override recip(x:T) = T(0);
[T when Float?(T)]
forceinline override recip(x:T) = T(1) / x;

[T when Float?(T)]
forceinline significand(x:T) = scalbn(x,wrapSubtract(ilogb(x)));

alias drem = remainder;

[T]
forceinline clamp(x:T, lo:T, hi:T) {
    if(x > hi)
        return hi; 
    if(x < lo)
        return lo;
    return x;
}

forceinline sec(z) = recip(cos(z));
forceinline csc(z) = recip(sin(z));
forceinline asec(y) = acos(recip(y));
forceinline acsc(y) = asin(recip(y));
forceinline acot(y) = atan(recip(y));
forceinline sech(z) = recip(cosh(z));
forceinline csch(z) = recip(sinh(z));
forceinline coth(z) = recip(tanh(z));
forceinline asech(y) = acosh(recip(y));
forceinline acsch(y) = asinh(recip(y));
forceinline acoth(y) = atanh(recip(y));

[T when CallDefined?(sin,T)]
forceinline sinc(x:T) {
    if(x==0) 
        return T(1);
    else {
        var pix = T(M_PI)*x; 
        return sin(pix)/pix;
    }
}

[T when CallDefined?(sin,T)]
forceinline cosc(x:T) { 
    if(x==0) 
        return T(0);
    else {
        var pix=T(M_PI)*x;
        return cos(pix)/x-sin(pix)/(pix*x);
    }
}

forceinline square(x) = x*x;
forceinline cube(x) = x*x*x;

forceinline fma(a, b, c) = (a * b) + c;

[T when Float?(T)] 
forceinline rsqrt(x:T) = recip(sqrt(x));

[T when Float?(T)] 
forceinline sigmoid (x:T) = T(1) / (T(1) + exp (-x));

define normcoeff;
forceinline override normcoeff(#LongDouble) = floatFromBits(UInt128(0x4035ul));
forceinline override normcoeff(#Double) = floatFromBits(0x435ul);
forceinline override normcoeff(#Float) = floatFromBits(0x4Cu);

[T when Float?(T)]
forceinline normalize(x:T) 
    = if(normalized?(x)) x else floatFromBits(floatExponent(x*normcoeff(T)) - 
        (mantissaSize(T) + 2));


[T when Float?(T)] 
forceinline epsilon(#T) = nextafter(T(1),T(2))-T(1);
