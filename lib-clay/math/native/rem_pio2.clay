// rem_pio2

import math.native.kernel.k_rem_pio2.*;
import math.native.kernel.ieee754.*;

alias two24 =  1.67772160000000000000e+07; /* 0x41700000, 0x00000000 */
alias invpio2 =  6.36619772367581382433e-01; /* 0x3FE45F30, 0x6DC9C883 */
alias pio2_1  =  1.57079632673412561417e+00; /* 0x3FF921FB, 0x54400000 */
alias pio2_1t =  6.07710050650619224932e-11; /* 0x3DD0B461, 0x1A626331 */
alias pio2_2  =  6.07710050630396597660e-11; /* 0x3DD0B461, 0x1A600000 */
alias pio2_2t =  2.02226624879595063154e-21; /* 0x3BA3198A, 0x2E037073 */
alias pio2_3  =  2.02226624871116645580e-21; /* 0x3BA3198A, 0x2E000000 */
alias pio2_3t =  8.47842766036889956997e-32; /* 0x397B839A, 0x252049C1 */

rem_pio2(x:Double, y:Pointer[Double]) {
	var med = false;
	var tx,ty = Array[Double,3](),Array[Double,2]();
	var xdb = MAKE_IEEE(x);		/* high word of x */
	var ix = bitand(GET_IEEE_HIGH(xdb),0x7fffffff);
	var z = 0.;
	if (ix <= 0x400f6a7a) {		/* |x| ~<= 5pi/4 */
	    if (bitand(ix , NEM) == 0x921fb) {  /* |x| ~= pi/2 or 2pi/2 */
			med = true;
			goto medium;		/* cancellation -- use medium case */
	    }
	    if (ix <= 0x4002d97c) {	/* |x| ~<= 3pi/4 */
			if (GET_IEEE_HIGH(xdb) > 0) {
			    z = x - pio2_1;	/* one round good to 85 bits */
			    y[0] = z - pio2_1t;
			    y[1] = (z-y[0])-pio2_1t;
			    return 1;
			} 
			else {
			    z = x + pio2_1;
			    y[0] = z + pio2_1t;
			    y[1] = (z-y[0])+pio2_1t;
			    return -1;
			}
	    } 
	    else {
			if (GET_IEEE_HIGH(xdb) > 0) {
			    z = x - 2*pio2_1;
			    y[0] = z - 2*pio2_1t;
			    y[1] = (z-y[0])-2*pio2_1t;
			    return 2;
			} 
			else {
			    z = x + 2*pio2_1;
			    y[0] = z + 2*pio2_1t;
			    y[1] = (z-y[0])+2*pio2_1t;
			    return -2;
			}
	    }
	}
	if (ix <= 0x401c463b) {		/* |x| ~<= 9pi/4 */
	    if (ix <= 0x4015fdbc) {	/* |x| ~<= 7pi/4 */
			if (ix == 0x4012d97c) {	/* |x| ~= 3pi/2 */
			    med = true;
			    goto medium;
			}
			if (GET_IEEE_HIGH(xdb) > 0) {
			    z = x - 3*pio2_1;
			    y[0] = z - 3*pio2_1t;
			    y[1] = (z-y[0])-3*pio2_1t;
			    return 3;
			} 
			else {
			    z = x + 3*pio2_1;
			    y[0] = z + 3*pio2_1t;
			    y[1] = (z-y[0])+3*pio2_1t;
			    return -3;
			}
	    } 
	    else {
			if (ix == 0x401921fb){	/* |x| ~= 4pi/2 */
				med = true;    
			    goto medium;
			}
			if (GET_IEEE_HIGH(xdb) > 0) {
			    z = x - 4*pio2_1;
			    y[0] = z - 4*pio2_1t;
			    y[1] = (z-y[0])-4*pio2_1t;
			    return 4;
			} 
			else {
			    z = x + 4*pio2_1;
			    y[0] = z + 4*pio2_1t;
			    y[1] = (z-y[0])+4*pio2_1t;
			    return -4;
			}
	    }
	}
medium:
	if(ix<0x413921fb or med) {	/* |x| ~< 2^20*(pi/2), medium size */
	    /* Use a specialized rint() to get fn.  Assume round-to-nearest. */
	    var fn = x*invpio2+0x1.8p52;
	    fn = fn-0x1.8p52;
	    var n  = wrapCast(Int32,fn);
	    var r  = x-fn*pio2_1;
	    var w  = fn*pio2_1t;	/* 1st round good to 85 bit */
        var j  = bitshr(ix,20);

        y[0] = r-w; 
		var high = GET_IEEE_HIGH(y[0]);
        var i = j-bitand(bitshr(high,20),0x7ff);
        if(i>16) {  /* 2nd iteration needed, good to 118 */
		    var t  = r;
		    w  = fn*pio2_2;	
		    r  = t-w;
		    w  = fn*pio2_2t-((t-r)-w);	
		    y[0] = r-w;
		    high = GET_IEEE_HIGH(y[0]);
		    i = j-bitand(bitshr(high,20),0x7ff);
		    if(i > 49)  {	/* 3rd iteration need, 151 bits acc */
		    	t  = r;	/* will cover all possible cases */
		    	w  = fn*pio2_3;	
		    	r  = t-w;
		    	w  = fn*pio2_3t-((t-r)-w);	
		    	y[0] = r-w;
		    }
		}
	    y[1] = (r-y[0])-w;
	    return n;
	}
        
    // all other (large) arguments
    if(ix >= EM) {		/* x is inf or NaN */
	    y[1] = x-x;
	    y[0] = y[1];  
	    return 0;
	}
    // set z = scalbn(|x|,ilogb(x)-23)
	var low = GET_IEEE_LOW(x);
	var e0 	= bitshr(ix,20)-1046;	/* e0 = ilogb(z)-23; */
	z = MAKE_IEEE(ix - bitshl(e0,20), low).2;
	tx[0] = Double(wrapCast(Int32,z));
	z     = (z-tx[0])*two24;
	tx[1] = Double(wrapCast(Int32,z));
	z     = (z-tx[1])*two24;
	tx[2] = z;
	var nx = 3;
	while(tx[nx-1]==0.) dec(nx);	/* skip zero term */
	var n  =  k_rem_pio2(@tx[0],@ty[0],e0,nx,1);
	if(GET_IEEE_HIGH(xdb)<0) {
		y[0] = -ty[0]; 
		y[1] = -ty[1]; 
		return -n;
	}
	y[0] = ty[0];
	y[1] = ty[1]; 
	return n;
}
