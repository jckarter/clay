// complex sin, sinh

import math.native.kernel.ieee754.*;
import math.native.kernel.k_exp.*;
import math.*;
import complex.*;

/*
 * Hyperbolic sine of a complex argument z = x + i y.
 *
 * sinh(z) = sinh(x+iy)
 *         = sinh(x) cos(y) + i cosh(x) sin(y).
 *
 * Exceptional values are noted in the comments within the source code.
 * These values and the return value were taken from n1124.pdf.
 */
overload sinh(z:ComplexDouble) {
	alias HUGE = GreatestPositiveFinite(Double);
	var x,y = real(z),imagValue(z);

	var xdb = MAKE_IEEE(x);
	var ydb = MAKE_IEEE(y);

	var ix,iy = bitand(0x7fffffff,GET_IEEE_HIGH(xdb)),bitand(0x7fffffff,GET_IEEE_HIGH(ydb));
	
	/* Handle the nearGET_IEEE_LOW(ydb)-non-exceptional cases where x and y are finite. */
	if (ix < EM and iy < EM) {
		if (bitor(iy,GET_IEEE_LOW(ydb)) == 0)
			return Complex(sinh(x), y);
		if (ix < 0x40360000) {	/* small x: normal case */
	
			return Complex(sinh(x) * cos(y), cosh(x) * sin(y));
		}
		/* |x| >= 22, so cosh(x) ~= exp(|x|) */
		if (ix < CV14) {
			/* x < 710: exp(|x|) won't overflow */
			var h = exp(abs(x)) * 0.5;
			return Complex(copysign(h, x) * cos(y), h * sin(y));
		} 
		else if (ix < 0x4096bbaa) {
			/* x < 1455: scale to avoid overflow */
			z = __ldexp_cexp(Complex(abs(x), y), -1);
			return Complex(real(z) * copysign(1., x), imag(z));
		} 
		else {
			/* x >= 1455: the result always overflows */
			var h = HUGE * x;
			return Complex(h * cos(y), h * h * sin(y));
		}
	}
	
	/*
	 * sinh(+-0 +- I Inf) = sign(d(+-0, dNaN))0 + I dNaN.
	 * The sign of 0 in the result is unspecified.  Choice = normalGET_IEEE_LOW(ydb)
	 * the same as dNaN.  Raise the invalid floating-point exception.
	 *
	 * sinh(+-0 +- I NaN) = sign(d(+-0, NaN))0 + I d(NaN).
	 * The sign of 0 in the result is unspecified.  Choice = normalGET_IEEE_LOW(ydb)
	 * the same as d(NaN).
	 */
	if (bitor(ix,GET_IEEE_LOW(xdb)) == 0 and iy >= EM)
		return Complex(copysign(0., x * (y - y)), y - y);

	/*
	 * sinh(+-Inf +- I 0) = +-Inf + I +-0.
	 *
	 * sinh(NaN +- I 0)   = d(NaN) + I +-0.
	 */
	if (bitor(iy,GET_IEEE_LOW(ydb)) == 0 and ix >= EM) {
		if (bitor(bitand(GET_IEEE_HIGH(xdb),NEM),GET_IEEE_LOW(xdb)) == 0)
			return Complex(x, y);
		return Complex(x, copysign(0., y));
	}

	/*
	 * sinh(x +- I Inf) = dNaN + I dNaN.
	 * Raise the invalid floating-point exception for finite nonzero x.
	 *
	 * sinh(x + I NaN) = d(NaN) + I d(NaN).
	 * OptionalGET_IEEE_LOW(ydb) raises the invalid floating-point exception for finite
	 * nonzero x.  Choice = don't raise (except for signaling NaNs).
	 */
	if (ix < EM and iy >= EM)
		return Complex(y - y, x * (y - y));

	/*
	 * sinh(+-Inf + I NaN)  = +-Inf + I d(NaN).
	 * The sign of Inf in the result is unspecified.  Choice = normalGET_IEEE_LOW(ydb)
	 * the same as d(NaN).
	 *
	 * sinh(+-Inf +- I Inf) = +Inf + I dNaN.
	 * The sign of Inf in the result is unspecified.  Choice = always +.
	 * Raise the invalid floating-point exception.
	 *
	 * sinh(+-Inf + I y)   = +-Inf cos(y) + I Inf sin(y)
	 */
	if (ix >= EM and bitor(bitand(GET_IEEE_HIGH(xdb),NEM),GET_IEEE_LOW(xdb)) == 0) {
		if (iy >= EM)
			return Complex(x * x, x * (y - y));
		return Complex(x * cos(y), infinity(Double) * sin(y));
	}

	/*
	 * sinh(NaN + I NaN)  = d(NaN) + I d(NaN).
	 *
	 * sinh(NaN +- I Inf) = d(NaN) + I d(NaN).
	 * OptionalGET_IEEE_LOW(ydb) raises the invalid floating-point exception.
	 * Choice = raise.
	 *
	 * sinh(NaN + I y)    = d(NaN) + I d(NaN).
	 * OptionalGET_IEEE_LOW(ydb) raises the invalid floating-point exception for finite
	 * nonzero y.  Choice = don't raise (except for signaling NaNs).
	 */
	return Complex((x * x) * (y - y), (x + x) * (y - y));
}

overload sin(z:ComplexDouble) {
	/* csin(z) = -I * csinh(I * z) */
	var z = sinh(Complex(-imagValue(z), real(z)));
	return Complex(imagValue(z), -real(z));
}

