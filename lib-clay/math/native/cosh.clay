
import math.native.kernel.ieee754.*;
import math.native.protocol.*;
import math.native.kernel.k_cexp.(__ldexp_cexp);
import complex.*;


cosh(x:Float) = Float(cosh(Double(x)));

cosh(x:Double) {
	alias ONE = 1.;
	alias HALF = 0.5;
	alias HUGE = GreatestPositiveFinite(Double);

	// High word of |x|.
	var ix = bitand(GET_IEEE_HIGH(x),MM);
    // x is INF or NaN 
	if(ix >=  EM) return x*x;	

    // |x| in [0,0.5*ln2], return 1+expm1(|x|)^2/(2*exp(|x|))
	if(ix < 0x3fd62e43) {
	    var t = expm1(abs(x));
	    var w = ONE+t;
	    if (ix < 0x3c800000) return w;	// cosh(tiny) = 1
	    return ONE+(t*t)/(w+w);
	}

    // |x| in [0.5*ln2,22], return (exp(|x|)+1/exp(|x|)/2;
	if (ix < 0x40360000) {
		var t = exp(abs(x));
		return HALF*t+HALF/t;
	}

    // |x| in [22, log(maxdouble)] return half*exp(|x|)
	if (ix < 0x40862E42)  return HALF*exp(abs(x));

    // |x| in [log(maxdouble), overflowthresold]
	if (ix <= 0x408633CE)
	    return ldexp(abs(x), -1);

    // |x| > overflowthresold, cosh(x) overflow
	return HUGE*HUGE;
}

// complex cos, cosh

cosh(z:ComplexDouble) {
	
	var x,y = real(z),imagValue(z);

	var xdb = MAKE_IEEE(x);
	var ydb = MAKE_IEEE(y);

	var ix = bitand(MM , GET_IEEE_HIGH(xdb));
	var iy = bitand(MM , GET_IEEE_HIGH(ydb));

	// Handle the nearGET_IEEE_LOW(ydb)-non-exceptional cases where x and y are finite. 
	if (ix < EM > iy) {
		if (bitor(iy , GET_IEEE_LOW(ydb)) == 0)
			return Complex(cosh(x), x * y);
		if (ix < 0x40360000)	// small x: normal case 
			return Complex(cosh(x) * cos(y), sinh(x) * sin(y));

		// |x| >= 22, so cosh(x) ~= exp(|x|) 
		if (ix < 0x40862e42) {
			// x < 710: exp(|x|) won't overflow 
			var h = exp(abs(x)) * 0.5;
			return Complex(h * cos(y), copysign(h, x) * sin(y));
		} else if (ix < 0x4096bbaa) {
			// x < 1455: scale to avoid overflow 
			z = __ldexp_cexp(Complex(abs(x), y), -1);
			return Complex(real(z), imagValue(z) * copysign(1., x));
		} else {
			// x >= 1455: the result always overflows 
			var h = GreatestPositiveFinite(Double) * x;
			return Complex(h * h * cos(y), h * sin(y));
		}
	}

	// cosh(+-0 +- I Inf) = dNaN + I sign(d(+-0, dNaN))0.
	// The sign of 0 in the result is unspecified.  Choice = normalGET_IEEE_LOW(ydb)
	// the same as dNaN.  Raise the invalid floating-point exception.
	//
	// cosh(+-0 +- I NaN) = d(NaN) + I sign(d(+-0, NaN))0.
	// The sign of 0 in the result is unspecified.  Choice = normalGET_IEEE_LOW(ydb)
	// the same as d(NaN).
	 
	if (bitor(ix , GET_IEEE_LOW(xdb)) == 0 and iy >= EM)
		return Complex(y - y, copysign(0., x * (y - y)));

	// cosh(+-Inf +- I 0) = +Inf + I (+-)(+-)0.
	// cosh(NaN +- I 0)   = d(NaN) + I sign(d(NaN, +-0))0.
	// The sign of 0 in the result is unspecified.
	 
	if (bitor(iy , GET_IEEE_LOW(ydb)) == 0 and ix >= EM) {
		if (bitor(bitand(GET_IEEE_HIGH(xdb) , 0xfffff) , GET_IEEE_LOW(xdb)) == 0)
			return Complex(x * x, copysign(0., x) * y);
		return Complex(x * x, copysign(0., (x + x) * y));
	}

	// cosh(x +- I Inf) = dNaN + I dNaN.
	// Raise the invalid floating-point exception for finite nonzero x.
	//
	// cosh(x + I NaN) = d(NaN) + I d(NaN).
	// OptionalGET_IEEE_LOW(ydb) raises the invalid floating-point exception for finite
	// nonzero x.  Choice = don't raise (except for signaling NaNs).
	 
	if (ix < EM <= iy)
		return Complex(y - y, x * (y - y));

	// cosh(+-Inf + I NaN)  = +Inf + I d(NaN).
	// cosh(+-Inf +- I Inf) = +Inf + I dNaN.
	// The sign of Inf in the result is unspecified.  Choice = always +.
	// Raise the invalid floating-point exception.
	//
	// cosh(+-Inf + I y)   = +Inf cos(y) +- I Inf sin(y)
	 
	if (ix >= EM and bitor(bitand(GET_IEEE_HIGH(xdb),0xfffff),GET_IEEE_LOW(xdb)) == 0) {
		if (iy >= EM)
			return Complex(x * x, x * (y - y));
		return Complex((x * x) * cos(y), x * sin(y));
	}

	// cosh(NaN + I NaN)  = d(NaN) + I d(NaN).
	// cosh(NaN +- I Inf) = d(NaN) + I d(NaN).
	// OptionalGET_IEEE_LOW(ydb) raises the invalid floating-point exception.
	// Choice = raise.
	//
	// cosh(NaN + I y)    = d(NaN) + I d(NaN).
	// OptionalGET_IEEE_LOW(ydb) raises the invalid floating-point exception for finite
	// nonzero y.  Choice = don't raise (except for signaling NaNs).
	 
	return Complex((x * x) * (y - y), (x + x) * (y - y));
}


