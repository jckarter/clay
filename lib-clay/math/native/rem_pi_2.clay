
import math.native.scs.*;

/**
 * This file include functions to compute y=x-N*pi/2 and return the last two bits of N
 * in order to know which quadrant we are considering.
 *
 * We use an scs representation to compute it by Payne and Hanek methods. For more information
 * you can read K. C. Ng research report from Sun Microsystems:
 * "Argument reduction for huge argument: Good to the last bit" (July 13, 1992)
 *
 */


var two_over_pi = Array[Int,48](
   0x28be60db, 0x24e44152, 0x27f09d5f, 0x11f534dd,
   0x3036d8a5, 0x1993c439, 0x0107f945, 0x23abdebb,
   0x31586dc9, 0x06e3a424, 0x374b8019, 0x092eea09,
   0x3464873f, 0x21deb1cb, 0x04a69cfb, 0x288235f5,
   0x0baed121, 0x0e99c702, 0x1ad17df9, 0x013991d6,
   0x0e60d4ce, 0x1f49c845, 0x3e2ef7e4, 0x283b1ff8,
   0x25fff781, 0x1980fef2, 0x3c462d68, 0x0a6d1f6d,
   0x0d9fb3c9, 0x3cb09b74, 0x3d18fd9a, 0x1e5fea2d,
   0x1d49eeb1, 0x3ebe5f17, 0x2cf41ce7, 0x378a5292,
   0x3a9afed7, 0x3b11f8d5, 0x3421580c, 0x3046fc7b,
   0x1aeafc33, 0x3bc209af, 0x10d876a7, 0x2391615e,
   0x3986c219, 0x199855f1, 0x1281a102, 0x0dffd880);


/*
 * This scs number store 211 bits of pi/2
 */
// var Pio2 = ()->{
//     return scs(array(0x00000001, 0x2487ed51, 0x042d1846, 0x26263314,
//     0x1701b839, 0x28948127, 0x01114cf9, 0x23a0105d),
//     db_one(),  0,   1 );};

var Pio2 = scs(array(0x00000001u, 0x2487ed51u, 0x042d1846u, 0x26263314u,
    0x1701b839u, 0x28948127u, 0x01114cf9u, 0x23a0105du),
    db_one(),  0,   1 );

/**
 * Case X_IND = -1:
 *               0
 *           2 @
 *  X    :   <> |--| |--| |--|   0   0 0 0 0
 *  2/Pi :   <> |--| |--| |--| |--| .....
 *
 *  Case X_IND = 0:
 *                   0
 *                2 @
 *  X    :   |--| <> |--| |--|   0   0 0 0 0
 *  2/Pi :        <> |--| |--| |--| |--| .....
 *
 *  Case X_IND = 1:
 *                       0
 *                    2 @
 *  X    :   |--| |--| <> |--| |--|   0   0 0 0 0
 *  2/Pi :             <> |--| |--| |--| |--| .....
 *
 *  Case ...
 *
 *  Step 1:
 *
 *   Compute r = X . 2/Pi where:
 *    - r[0] hold the integer part. (if x>0 or the once complement integer part if x<0 )
 *    - r[1] to r[SCS_NB_WORDS+2] hold the reduced part
 *      the 3 extra 30 bits are here to prevent possible
 *      cancellation due to a number x too close to a
 *      multiple of Pi/2.
 *
 *  Step 2:
 *   Compute result = (r[1] ... r[SCS_NB_WORDS]) . Pi/2.
 *
 * description of local variables :
 * - ind : where to start multiplying into 2opi table
 *
 */

/* TODO OPTIM
   better 64-bit multiplication, see in scs_mult */

rem_pio2_scs(result, x){
    var r,tmp,N,sign = Array[UInt64,SCS_NB_WORDS+3](), 0ul, 0u,0;
    /* result r[0],...,r[10] could store till 300 bits of precision */
    /* that is really enough for computing the reduced argument */
    if ((x.excp.1 != 1)or(x.index < -1)){
        scs_set(result, x);
        return 0;
    }

    /* Compute the product |x| * 2/Pi */
    if ((x.index == -1)){
        /* In this case we consider number between ]-1,+1[    */
        /* we may use simpler algorithm such as Cody And Waite */
        r[0] =  0;
        r[1] =  0;
        r[2] = (two_over_pi[0]) * x.h_word[0];
        r[3] = ((two_over_pi[0]) * x.h_word[1]+(two_over_pi[1]) * x.h_word[0]);
        if(x.h_word[2] == 0){
            for(i in range(4,(SCS_NB_WORDS+3))){
                r[i] = ((two_over_pi[i-3]) * x.h_word[1]
                +(two_over_pi[i-2]) * x.h_word[0]);
            }
        }else {
            for(i in range(4,SCS_NB_WORDS+3)){
                r[i] = ((two_over_pi[i-4]) * x.h_word[2]
                +(two_over_pi[i-3]) * x.h_word[1]
                +(two_over_pi[i-2]) * x.h_word[0]);
            }
        }
    }else {
        if (x.index == 0){
            r[0] =  0;
            r[1] =  (two_over_pi[0]) * x.h_word[0];
            r[2] = ((two_over_pi[0]) * x.h_word[1]
            +(two_over_pi[1]) * x.h_word[0]);
            if(x.h_word[2] == 0){
                for(i in range(3,SCS_NB_WORDS+3)){
                    r[i] = ((two_over_pi[i-2]) * x.h_word[1]
                    +(two_over_pi[i-1]) * x.h_word[0]);
                }
            }else {
                for(i in range(3,SCS_NB_WORDS+3)){
                    r[i] = ((two_over_pi[i-3]) * x.h_word[2]
                       +(two_over_pi[i-2]) * x.h_word[1]
                       +(two_over_pi[i-1]) * x.h_word[0]);
                }
            }
        }else {
            if (x.index == 1){
                r[0] =  (two_over_pi[0]) * x.h_word[0];
                r[1] = ((two_over_pi[0]) * x.h_word[1]
                       +(two_over_pi[1]) * x.h_word[0]);
                if(x.h_word[2] == 0){
                    for(i in range(2,SCS_NB_WORDS+3)){
                        r[i] = ((two_over_pi[i-1]) * x.h_word[1]
                           +(two_over_pi[ i ]) * x.h_word[0]);
                    }
                }else {
                    for(i in range(2,SCS_NB_WORDS+3)){
                      r[i] = ((two_over_pi[i-2]) * x.h_word[2]
                         +(two_over_pi[i-1]) * x.h_word[1]
                         +(two_over_pi[ i ]) * x.h_word[0]);
                    }
                }
            }else {
                if (x.index == 2){
                    r[0] = ((two_over_pi[0]) * x.h_word[1]
                     +(two_over_pi[1]) * x.h_word[0]);
                    if(x.h_word[2] == 0){
                        for(i in range(1,SCS_NB_WORDS+3)){
                          r[i] = ((two_over_pi[ i ]) * x.h_word[1]
                             +(two_over_pi[i+1]) * x.h_word[0]);
                        }
                    }else {
                        for(i in range(1,SCS_NB_WORDS+3)){
                            r[i] = ((two_over_pi[i-1]) * x.h_word[2]
                               +(two_over_pi[ i ]) * x.h_word[1]
                               +(two_over_pi[i+1]) * x.h_word[0]);
                        }
                    }
                }else {
                    var ind = (x.index - 3);
                    var two_over_pi_pt = Pointer[Int](&two_over_pi[ind]);
                    if(x.h_word[2] == 0){
                        for(i in range(SCS_NB_WORDS+3)){
                          r[i] = ((two_over_pi_pt[i+1]) * x.h_word[1]
                             +(two_over_pi_pt[i+2]) * x.h_word[0]);
                        }
                    }else {
                        for(i in range(SCS_NB_WORDS+3)){
                            r[i] = ((two_over_pi_pt[ i ]) * x.h_word[2]
                            +(two_over_pi_pt[i+1]) * x.h_word[1]
                            +(two_over_pi_pt[i+2]) * x.h_word[0]);
                        }
                    }
                }
            }
        }
    }

    /* Carry propagate */
    r[SCS_NB_WORDS+1] += bitshr(r[SCS_NB_WORDS+2],30);
    for(i in reverseRange((SCS_NB_WORDS+1),1)) {
        tmp = bitshr(r[i],30);
        r[i-1] += tmp;
        r[i] -= bitshl(tmp,30);
    }

    /* The integer part is in r[0] */
    N = UInt(r[0]);

    /* test if the reduced part is bigger than Pi/4 */
    if (r[1] > (SCS_RADIX)/2){
        N += 1;
        sign = -1;
        for(i in range(1,(SCS_NB_WORDS+3)))
            r[i] = bitand(bitnot(UInt(r[i])) , 0x3fffffff);
    }
    else
        sign = 1;


    /* Now we get the reduce argument and check for possible
    * cancellation By Kahan algorithm we will have at most 2 digits
    * of cancellations r[1] and r[2] in the worst case.
    */
    var i = 0;
    if (r[1] == 0)
        if (r[2] == 0)
            i = 3;
        else
            i = 2;
    else
        i = 1;

    for(j in range(SCS_NB_WORDS))
        result.h_word[j] = UInt(r[i+j]);

    result.excp.1   = 1;
    result.index   = -i;
    result.sign = sign*x.sign;

    /* Last step :
    *   Multiplication by pi/2
    */
    scs_mul(result, Pio2, result);
    return Int(x.sign*N);
}


