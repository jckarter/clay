
import math.native.kernel.ieee754.*;
import math.native.rem_pio2.*;
import math.native.kernel.k_trig.*;
import math.native.protocol.*;
import complex.*;


override sin(x:Double) {
	var y = Array[Double,2]();
	
    // High word of x. 
	var ix = GET_IEEE_HIGH(x);

    // |x| ~< pi/4 
	ix = bitand(ix,MM);
	if(ix <= 0x3fe921fb) {
	    if(ix<0x3e500000)			// |x| < 2**-26 
	       	if(wrapCast(Int32,x) == 0) return x;
	    	// generate inexact 
	    return kernel_sin(x,0.,0);
	}

    // sin(Inf or NaN) is NaN 
	else if (ix>=EM) return x-x;
	// argument reduction needed 
	else {
	    var n = rem_pio2(x,@y[0]);
    	switch(bitand(n,3))
		case (0) return  kernel_sin(y[0],y[1],1);
		case (1) return  kernel_cos(y[0],y[1]);
		case (2) return -kernel_sin(y[0],y[1],1);
		else return -kernel_cos(y[0],y[1]);
	   
	}
}



override sin(z:ComplexDouble) {
	// csin(z) = -I * csinh(I * z) 
	var z = sinh(Complex(-imagValue(z), real(z)));
	return Complex(imagValue(z), -real(z));
}
