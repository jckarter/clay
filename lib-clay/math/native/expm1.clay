// expm1 function adapted from openlibm

import math.native.kernel.ieee754.*;
import math.*;

alias o_threshold = 7.09782712893383973096e+02;/* 0x40862E42, 0xFEFA39EF */
/* Scaled Q's: Qn_here = 2**n * Qn_above, for R(2*z) where z = hxs = x*x/2: */
alias Q1  =  -3.33333333333331316428e-02; /* BFA11111 111110F4 */
alias Q2  =   1.58730158725481460165e-03; /* 3F5A01A0 19FE5585 */
alias Q3  =  -7.93650757867487942473e-05; /* BF14CE19 9EAADBB7 */
alias Q4  =   4.00821782732936239552e-06; /* 3ED0CFCA 86E65239 */
alias Q5  =  -2.01099218183624371326e-07; /* BE8AFDB7 6E09C32D */

[T]
overload expm1(a:T)  {
	alias ONE = T(1);
	alias HUGE = GreatestPositiveFinite(T);
	alias TINY = LeastPositive(T);

	var x = a;
	var xdb = MAKE_IEEE(x);
	var xsb = bitand(GET_IEEE_HIGH(xdb),SM);		/* sign bit of x */
	GET_IEEE_HIGH(xdb) = bitand(GET_IEEE_HIGH(xdb),MM);		/* high word of |x| */

	var hi,lo,k,c = 0.,0.,0,0.;

    /* filter out huge and non-finite argument */
	if(GET_IEEE_HIGH(xdb) >= CV13) {			/* if |x|>=56*ln2 */
	    if(GET_IEEE_HIGH(xdb) >= CV14) {		/* if |x|>=709.78... */
            if(GET_IEEE_HIGH(xdb)>=EM) {
			    if(bitor(bitand(GET_IEEE_HIGH(xdb),NEM),GET_IEEE_LOW(xdb))!=0)
			         return x+x; 	 /* NaN */
			    else return if(xsb==0) x else -1.0;/* exp(+-inf)={inf,-1} */
	        }
	        if(x > o_threshold) return HUGE*HUGE; /* overfGET_IEEE_LOW(xdb) */
	    }
	    if(xsb!=0) { /* x < -56*ln2, return -1.0 with inexact */
			if(x+TINY<0.0)		/* raise inexact */
				return TINY-ONE;	/* return -1 */
	    }
	}
	
    /* argument reduction */
	if(GET_IEEE_HIGH(xdb) > CV15) {		/* if  |x| > 0.5 ln2 */
	    if(GET_IEEE_HIGH(xdb) < CV16) {	/* and |x| < 1.5 ln2 */
			if(xsb==0) {
				hi = x - LN2HI; 
				lo =  LN2LO;  
				k =  1;
			}
			else {
				hi = x + LN2HI; 
				lo = -LN2LO;  
				k = -1;
			}
	    } 
	    else {
			k  = Int(IVLN2*x+(if(xsb==0) 0.5 else -0.5));
			var t  = Double(k);
			hi = x - t*LN2HI;	/* t*ln2_hi is exact here */
			lo = t*LN2LO;
	    }
	    x <-- hi - lo;
	    c  = (hi-x)-lo;
	}
	else if(GET_IEEE_HIGH(xdb) < CV17) {  	/* when |x|<2**-54, return x */
	    var t = HUGE+x;	/* return x with inexact flags when x!=0 */
	    return x - (t-(HUGE+x));
	}
	else 
		k = 0;

    // x is now in primary range 
	var hfx = 0.5*x;
	var hxs = x*hfx;
	var r1 = ONE+hxs*(Q1+hxs*(Q2+hxs*(Q3+hxs*(Q4+hxs*Q5))));
	var t  = 3.0-r1*hfx;
	var e  = hxs*((r1-t)/(6.0 - x*t));
	var y = 0.;

	if(k==0) {
		return x - (x*e-hxs);		/* c is 0 */
	}
	else {
	    var twopk = MAKE_IEEE(RM+bitshl(k,20),0).2;	/* 2^k */
	    e  = (x*(e-c)-c);
	    e -= hxs;
	    if(k == -1) return 0.5*(x-e)-0.5;
	    if(k == 1) {
	       	if(x < -0.25) return -2.0*(e-(x+0.5));
	       	else 	      return  ONE+2.0*(x-e);
	    }
	    if (k <= -2 or k>56) {   /* suffice to return exp(x)-1 */
	        y = ONE-(e-x);
		if (k == 1024) y = y*2.0*0x1p1023;
		else y *= twopk;
	        return y-ONE;
	    }
	    t = ONE;
	    if(k<20) {
	        t = SET_IEEE_HIGH(t,RM - bitshr(CV20,k));  /* t=1-2^-k */
	       	y = t-(e-x);
			y *= twopk;
	   } else {
			t = SET_IEEE_HIGH(t,bitshl(0x3ff-k,20));	/* 2^-k */
	       	y = x-(e+t);
	       	y += ONE;
			y *= twopk;
	    }
	}
	return y;
}
