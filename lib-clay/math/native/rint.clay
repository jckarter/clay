
import math.native.kernel.ieee754.*;
import math.native.protocol.*;

private alias DHUGE = GreatestPositiveFinite(Double);
private alias FHUGE = GreatestPositiveFinite(Float);
private alias DZERO = 0.ff;
private alias FZERO = 0.f;

private var TWO52 = array(
  4.50359962737049600000e+15, // 0x43300000, 0x00000000 
 -4.50359962737049600000e+15 // 0xC3300000, 0x00000000 
);


rint(a:Float) = Float(rint(Double(a)));


rint(a:Double){
	var x = a;
	var ix = MAKE_IEEE(x);
	var sx = bitand(bitshr(GET_IEEE_HIGH(ix),31),0x1);
	var j0 = bitand(bitshr(GET_IEEE_HIGH(ix),20),0x7ff)-0x3ff;
	if(j0<20) {
	    if(j0<0) {
			if(bitor(bitand(GET_IEEE_HIGH(ix),0x7fffffff),GET_IEEE_LOW(ix))==0) return x;
			SET_IEEE_LOW(ix,bitor(GET_IEEE_LOW(ix),bitand(GET_IEEE_HIGH(ix),0x0fffff)));
			SET_IEEE_HIGH(ix,bitand(GET_IEEE_HIGH(ix),bitcast(Int32,0xfffe0000u)));
			SET_IEEE_HIGH(ix,bitor(GET_IEEE_HIGH(ix),bitand(bitshr(bitor(GET_IEEE_LOW(ix),-GET_IEEE_LOW(ix)),12),0x80000)));
			x = SET_IEEE_HIGH(x,GET_IEEE_HIGH(ix));
		    var w = TWO52[sx]+x;
		    var t = w-TWO52[sx];
			SET_IEEE_HIGH(ix,GET_IEEE_HIGH(t));
			t = SET_IEEE_HIGH(t,bitor(bitand(GET_IEEE_HIGH(ix),0x7fffffff),bitshl(sx,31)));
		    return t;
	    } 
	    else {
			var i = bitshr(0x000fffff,j0);
			if(bitor(bitand(GET_IEEE_HIGH(ix),i),GET_IEEE_LOW(ix))==0) return x; // x is integral 
			i = bitshr(i,1);
			if(bitor(bitand(GET_IEEE_HIGH(ix),i),GET_IEEE_LOW(ix))!=0) {
			    // Some bit is set after the 0.5 bit.  To avoid the
			    // possibility of errors from double rounding in
			    // w = TWO52[sx]+x, adjust the 0.25 bit to a lower
			    // guard bit.  We do this for all j0<=51.  The
			    // adjustment is trickiest for j0==18 and j0==19
			    // since then it spans the word boundary.
			     
			    if(j0==19) SET_IEEE_LOW(ix,0x40000000); else
			    if(j0==18) SET_IEEE_LOW(ix,bitcast(Int32,0x80000000u)); else
			    SET_IEEE_HIGH(ix,bitor(bitandc(GET_IEEE_HIGH(ix),i),bitshr(0x20000,j0)));
			}
	    }
	} else if (j0>51) {
	    if(j0==0x400) return x+x;	// inf or NaN 
	    else return x;		// x is integral 
	} else {
	    var i = bitshr(0xffffffffu,j0-20);
	    if(bitand(GET_IEEE_LOW(ix),i)==0) return x;	// x is integral 
	    i = bitshr(i,1);
	    if(bitand(GET_IEEE_LOW(ix),i)!=0) 
	    	SET_IEEE_LOW(ix,bitcast(Int32,bitor(bitandc(GET_IEEE_LOW(ix),i),bitshr(0x40000000,j0-20))));
	}
	var w = TWO52[sx]+GET_IEEE_DB(ix);
	return w-TWO52[sx];
}
