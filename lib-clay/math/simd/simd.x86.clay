import simd.*;
public import math.native.defines.(sqrt);

define hadd;
define hsub;
define movemask;
define compare;

alias VD2 = Vec[Double, 2];
alias V2[T] = Vec[T, 2];

import __intrinsics__.(
    x86_sse2_div_sd as x86_divsd,
    x86_sse2_max_sd as x86_maxsd,
    x86_sse2_min_sd as x86_minsd,
    x86_sse2_mul_sd as x86_mulsd,
    x86_sse2_sub_sd as x86_subsd,
    x86_sse2_ucomieq_sd as x86_ucomieqsd,
    x86_sse2_ucomige_sd as x86_ucomigesd,
    x86_sse2_ucomigt_sd as x86_ucomigtsd,
    x86_sse2_ucomile_sd as x86_ucomilesd,
    x86_sse2_ucomilt_sd as x86_ucomiltsd,
    x86_sse2_ucomineq_sd as x86_ucomineqsd,
    x86_sse2_add_sd as x86_addsd,
    x86_sse2_sqrt_pd as x86_sqrtpd,
    x86_sse2_sqrt_sd as x86_sqrtsd,
    x86_sse3_hadd_ps as x86_haddps,
    x86_sse3_hsub_ps as x86_hsubps,
    x86_sse3_hadd_pd as x86_haddpd,
    x86_sse3_hsub_pd as x86_hsubpd,
    x86_sse2_cmp_pd as x86_cmppd,
    x86_sse2_cmp_sd as x86_cmpsd,
    x86_sse2_movmsk_pd as x86_movmskpd,
);

[T,U when Numeric?(T,U)]
forceinline override sqrt(x:T,y:U) = ..unpackVec(x86_sqrtpd(Vec(Double(x),Double(y))));

[T when Numeric?(T)]
forceinline override sqrt(x:T) = T(x86_sqrtsd(Vec(Double(x),0.))[0]);
forceinline override sqrt(x:Double) = x86_sqrtsd(Vec(x,0.))[0];

[T when Numeric?(T)]
forceinline override sqrt(x:V2[T]) = V2[T](x86_sqrtpd(VD2(x)));


[T when Numeric?(T)]
forceinline override hadd(x1:T,x2:T,y1:T,y2:T) = ..unpackVec(x86_haddpd(Vec(Double(x1),Double(x2)),Vec(Double(y1),Double(y2))));

[T,U when Numeric?(T,U)]
forceinline override hadd(x1:T,x2:U) = toBiggerNumericType(T,U,x86_haddpd(Vec(Double(x1),Double(x2)),VD2())[0]);

[T when Numeric?(T)]
forceinline override hadd(x:V2[T], y:V2[T]) = V2[T](x86_haddpd(VD2(x),VD2(y)));

[T when Numeric?(T)]
forceinline override hadd(x:V2[T]) = V2[T](x86_haddpd(VD2(x),VD2(x)));


[T when Numeric?(T)]
forceinline override hsub(x1:T,x2:T,y1:T,y2:T) = ..unpackVec(x86_hsubpd(Vec(Double(x1),Double(x2)),Vec(Double(y1),Double(y2))));

[T,U when Numeric?(T,U)]
forceinline override hsub(x1:T,x2:U) = toBiggerNumericType(T,U,x86_hsubpd(Vec(Double(x1),Double(x2)),VD2())[0]);

[T when Numeric?(T)]
forceinline override hsub(x:V2[T], y:V2[T]) = V2[T](x86_hsubpd(VD2(x),VD2(y)));


[T when Numeric?(T)]
forceinline override compare(x1:T,x2:T,y1:T,y2:T,op:Int8) = ..unpackVec(x86_cmppd(Vec(Double(x1),Double(x2)),Vec(Double(y1),Double(y2)),op));

[T,U when Numeric?(T,U)]
forceinline override compare(x1:T, x2:U, op:Int8) = toBiggerNumericType(T,U,x86_cmpsd(Vec(Double(x1),0.),Vec(Double(x2),0.),op)[0]);

[T when Numeric?(T)]
forceinline override compare(x:V2[T], y:V2[T], op:Int8) = V2[T](x86_cmppd(VD2(x),VD2(y),op));


[T,U when Numeric?(T,U)]
forceinline override movemask(x:T,y:U) = x86_movmskpd(Vec(Double(x),Double(y)));

[T when Numeric?(T)]
forceinline override movemask(x:V2[T]) = x86_movmskpd(VD2(x));
