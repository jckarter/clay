import core.errors.backtrace.(showBacktrace);
import core.libc as libc;
import hints.(likely);


/// @section  error (exceptions disabled) 

[fmt]
errorWithPrintfNoThrow(#fmt, ..e) : {
    libc.fprintf(libc.stderr, cstring(strl("error: ", fmt, "\n")), ..e);
    showBacktrace();
    libc.abort();
}

define errorWithPrintf;

[fmt when not ExceptionsEnabled?]
overload errorWithPrintf(#fmt, ..e) : {
    errorWithPrintfNoThrow(fmt, ..e);
}


/// @section  error (exceptions enabled) 

record Error (msg : CStringRef);
overload RegularRecord?(#Error) : Bool = false;
overload BitwiseMovedType?(#Error) : Bool = true;
overload Error(e:Error) --> ret:Error {
    if (null?(e.msg.ptr))
        ret <-- Error(CStringRef());
    else
        ret <-- Error(CStringRef(libc.strdup(e.msg.ptr)));
}
overload resetUnsafe(e:Error) : { e.msg.ptr = Pointer[Int8](); }
overload destroy(e:Error) : { libc.free(e.msg.ptr); }

instance Exception (Error);

[fmt when ExceptionsEnabled?]
overload errorWithPrintf(#fmt, ..e) : {
    var bufp = Pointer[CChar]();
    libc.asprintf(@bufp, fmt, ..e);
    throw Error(CStringRef(bufp));
}


/// @section  assert 

AllAssertionsEnabled?() : Bool = not Flag?("clay.DisableAssertions");
AssertionEnabled?(tag) : Bool = not Flag?(stringLiteralConcat("clay.DisableAssertions.",tag));

[..tags when allValues?(StringLiteral?, ..tags)]
record assert[..tags] ();

[..tags]
alias overload assert[..tags](..whatever) : {}

alias default assert(..whatever) : {}

[file, line, column, cond]
private assertStringLiteral(#file, #line, #column, #cond, ..etc)
    = strl(#file, "(", #line, ",", #column, "): assertion ", #cond, " failed", ..etc);

[when AllAssertionsEnabled?()]
alias default assert(cond:Bool) : {
    if (not likely(cond))
        errorWithPrintfNoThrow(
            assertStringLiteral(__FILE__, #__LINE__, #__COLUMN__, __ARG__ cond));
}

[..tags when AllAssertionsEnabled?() and allValues?(AssertionEnabled?, ..tags)]
alias overload assert[..tags](cond:Bool) : {
    if (not likely(cond))
        errorWithPrintfNoThrow(
            assertStringLiteral(__FILE__, #__LINE__, #__COLUMN__, __ARG__ cond));
}



/// @section  sourceLocation(), argAndValue() helpers 

alias sourceLocation() = StaticName(__FILE__), __LINE__, __COLUMN__;

alias argAndValue(x) = __ARG__ x, x;

