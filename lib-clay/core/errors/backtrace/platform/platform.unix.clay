import core.platform.*;

private external backtrace(array:Pointer[RawPointer], size:Int) : Int;
private external backtrace_symbols_fd(array:Pointer[RawPointer], size:Int, fd:Int) : ;

alias BacktraceSupported? =
    OS == Linux or OS == MacOSX or (OS == FreeBSD and Flag?("clay.Use_libexecinfo"));

record Backtrace (
    callstack: Array[RawPointer, 128],
    size: Int,
);

define printBacktraceToStderr(backtrace: Backtrace) :;

define captureBacktrace(): Backtrace;

forceinline override captureBacktrace() --> returned: Backtrace {
    returned.size = 0;
}

[when BacktraceSupported?]
forceinline override captureBacktrace() --> returned: Backtrace {
    returned.size = backtrace(
        begin(returned.callstack),
        Int(size(returned.callstack)));
}

forceinline override printBacktraceToStderr(backtrace: Backtrace) : { }

[when BacktraceSupported?]
override printBacktraceToStderr(bt: Backtrace) : {
    backtrace_symbols_fd(begin(bt.callstack), bt.size, 2);
}

