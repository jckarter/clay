
/// @section  StringLiteralRef 

record StringLiteralRef (
    sizep : Pointer[SizeT],
);


/// @section  predicates 

overload ContiguousSequence?(#StringLiteralRef) : Bool = true;
[s when StringLiteral?(s)]
overload ContiguousSequence?(#Static[s]) : Bool = true;



/// @section  constructors 

[s when StringLiteral?(s)]
forceinline overload StringLiteralRef(#s) = StringLiteralRef(stringTableConstant(s));
forceinline overload StringLiteralRef() = StringLiteralRef(stringTableConstant(""));


/// @section  size, begin, end, index 

forceinline overload size(a:StringLiteralRef) = a.sizep^;

forceinline overload begin(a:StringLiteralRef) : Pointer[Char] = Pointer[Char](a.sizep + 1);
forceinline overload end(a:StringLiteralRef) = begin(a) + size(a);

[I when Integer?(I)]
forceinline overload index(a:StringLiteralRef, i:I) : ByRef[Char] {
    assert["boundsChecks"](i >= 0 and i < size(a), "StringLiteralRef index out of bounds");
    return ref (begin(a) + i)^;
}

[s when StringLiteral?(s)]
forceinline overload size(#s) = stringLiteralByteSize(s);
[s when StringLiteral?(s)]
forceinline overload begin(#s) : Pointer[Char] = Pointer[Char](stringTableConstant(s) + 1);
[s when StringLiteral?(s)]
forceinline overload end(#s) = begin(s) + size(s);

[s, I when StringLiteral?(s) and Integer?(I)]
forceinline overload index(#s, i:I) : ByRef[Char] {
    assert["boundsChecks"](i >= 0 and i < size(s), "literal \"", s, "\" index out of bounds");
    return ref (begin(s) + i)^;
}

[s, n when StringLiteral?(s) and n >= 0 and n < size(s)]
forceinline overload staticIndex(#s, #n) : Char 
    = Char(stringLiteralByteIndex(#s,#n));



/// @section  cstring 

define cstring(a) : Pointer[Int8];

forceinline overload cstring(a:StringLiteralRef) : Pointer[Int8]
    = Pointer[Int8](begin(a));

[s when StringLiteral?(s)]
forceinline overload cstring(#s) : Pointer[Int8] = Pointer[Int8](begin(s));


/// @section  coordinates and iteration 

forceinline overload iterator(a:StringLiteralRef) = coordinateRange(begin(a), end(a));
[s when StringLiteral?(s)]
forceinline overload iterator(#s) = coordinateRange(begin(s), end(s));

forceinline overload reverseIterator(a:StringLiteralRef) =
    reverseCoordinateRange(end(a), begin(a));
[s when StringLiteral?(s)]
forceinline overload reverseIterator(#s) =
    reverseCoordinateRange(end(a), begin(a));


/// @section  string literal concatenation 

private define StringLiteralStatic?(s) : Bool;
default StringLiteralStatic?(s) : Bool = false;
[s]
overload StringLiteralStatic?(#Static[s]) : Bool = StringLiteral?(s);

StringLiteralType?(..SS) : Bool = allValues?(S -> StringLiteralStatic?(S), ..SS);

[..SS when StringLiteralType?(..SS)]
forceinline overload (++)(..ss:SS) = stringLiteralConcat(..ss);


/// @section  string literal manipulation 

// stringLiteralStartsWith?

define stringLiteralStartsWith?(..a) : Bool;

overload stringLiteralStartsWith?(a, b) : Bool = false;

[identifier, startsWith when size(identifier) >= size(startsWith)]
overload stringLiteralStartsWith?(#identifier, #startsWith)
      = stringLiteralByteSlice(identifier, #0, #size(startsWith))
        == startsWith;

// stringLiteralEndsWith?

define stringLiteralEndsWith?;

overload stringLiteralEndsWith?(a, b) : Bool = false;

[identifier, endsWith when size(identifier) >= size(endsWith)]
overload stringLiteralEndsWith?(#identifier, #endsWith) : Bool
    = stringLiteralByteSlice(identifier,
          #(size(identifier) - size(endsWith)),
          #size(identifier)
      ) == endsWith;

// stringLiteralFind

define stringLiteralFind;

[identifier, sub, start when
    StringLiteral?(identifier) and StringLiteral?(sub)
]
overload stringLiteralFind(#identifier, #sub, #start)
    = stringLiteralFind(identifier, sub, #(start + 1));

[identifier, sub, start when
    StringLiteral?(identifier) and StringLiteral?(sub)
    and size(identifier) < size(sub) + start
]
overload stringLiteralFind(#identifier, #sub, #start) = -1;

[identifier, sub, start when
    StringLiteral?(identifier) and StringLiteral?(sub)
    and size(identifier) >= size(sub) + start
    and stringLiteralByteSlice(identifier, #start, #(start + size(sub)))
        == sub
]
overload stringLiteralFind(#identifier, #sub, #start) = start;

overload stringLiteralFind(identifier, sub) = stringLiteralFind(identifier, sub, #0);

// strl

define strl;

default strl(..xx) = stringLiteralConcat(..mapValues(strl, ..xx));

[x]
default strl(#x) = StaticName(#x);
[i when StringLiteral?(i)]
overload strl(#i) = i;

overload strl() = "";

// stringLiteralCapitalize, stringLiteralDecapitalize

define stringLiteralCapitalize;
define stringLiteralDecapitalize;

overload stringLiteralCapitalize("") = "";
[s when StringLiteral?(s) and size(s) >= 1]
overload stringLiteralCapitalize(#s)
    = stringLiteralConcat(stringLiteralFromBytes(#(Int(asciiUpper(s.0)))), stringLiteralByteSlice(s, #1, #size(s)));

overload stringLiteralDecapitalize("") = "";
[s when StringLiteral?(s) and size(s) >= 1]
overload stringLiteralDecapitalize(#s)
    = stringLiteralConcat(stringLiteralFromBytes(#(Int(asciiLower(s.0)))), stringLiteralByteSlice(s, #1, #size(s)));

// stringLiteralChars, stringLiteralStaticChars, stringLiteralFromChars
// XXX utf8

[s when StringLiteral?(s)]
stringLiteralChars(#s) = ..mapValues(Char, ..stringLiteralBytes(s));

[s when StringLiteral?(s)]
stringLiteralStaticChars(#s) =
    ..mapValues(n -> #Char(stringLiteralByteIndex(s, n)), ..staticIntegers(#size(s)));

[c]
private staticCharToByte(#c) = #Int(c);

stringLiteralFromChars(..c) = stringLiteralFromBytes(..mapValues(staticCharToByte, ..c));
