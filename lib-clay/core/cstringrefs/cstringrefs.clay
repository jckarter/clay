import core.libc.(strlen);


/// @section  CStringRef - null terminated string 

record CStringRef (ptr : Pointer[Int8]);



/// @section  predicates 

overload ContiguousSequence?(#CStringRef) = true;



/// @section  constructors 

[T when ByteLike?(T)]
forceinline overload CStringRef(ptr : Pointer[T]) --> returned:CStringRef {
    returned.ptr = Pointer[Int8](ptr);
}



/// @section  size, index 

forceinline overload size(a:CStringRef) = SizeT(strlen(a.ptr));

[I when Integer?(I)]
forceinline overload index(a:CStringRef, i:I) {
    assert["boundsChecks"](i >= 0 and i < size(a), "CStringRef index out of bounds");
    return ref (begin(a) + i)^;
}



/// @section  coordinates and iteration 

forceinline overload begin(a:CStringRef) = Pointer[Char](a.ptr);
forceinline overload end(a:CStringRef) = Pointer[Char](a.ptr + size(a));

forceinline overload iterator(a:CStringRef) = coordinateRange(begin(a), end(a));

forceinline overload reverseIterator(a:CStringRef) =
    reverseCoordinateRange(end(a), begin(a));



/// @section  cstring 

forceinline overload cstring(a:CStringRef) = a.ptr;
