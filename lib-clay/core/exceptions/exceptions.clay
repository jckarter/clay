import core.libc as libc;
import core.errors.backtrace.(showBacktrace);
import __operators__.(
    throwValue,
    continueException,
    exceptionIs?,
    exceptionAs,
    exceptionAsAny,
    unhandledExceptionInExternal,
    exceptionInInitializer,
    exceptionInFinalizer,
);


/// @section  Exception, NoException, currentException 

variant Exception (NoException);

record NoException ();

overload Exception() = Exception(NoException());

private exceptionObject(exp:RawPointer) = ref Pointer[Exception](exp)^;



/// @section  printUnhandledExceptionToStderr

// Print unhandled exception to stderr.
// This function is called from program bootstrap code (see
// `core.system.runMain`). Must print at least one line. Last line must
// be terminated with \n character. This is very simple implementation
// that depends on nothing but core. `printer.exception` module contains
// more sophisticated version.
printUnhandledExceptionToStderr(e) {
    libc.fprintf(libc.stderr, cstring("unhandled %s exception\n"), cstring(MemberTypeName(e)));
}



/// @section  throwValue, continueException 

[T]
overload throwValue(x:T) {
    errorWithPrintfNoThrow(stringLiteralConcat("exception of type ", StaticName(T)," thrown with exceptions disabled"));
}

[ when ExceptionsEnabled?]
overload throwValue(forward x) {
    var exp = allocateObject(Exception(x));
    signalException(RawPointer(exp));
}

overload continueException(exp:RawPointer) {
    signalException(exp);
}

private signalException(exp:RawPointer) __llvm__{
    %expv = load i8** %exp
    ret i8* %expv
}



/// @section  throwButPropagate 

throwButPropagate(ex, ..T) {
    if (true)
        throw ex;
    else
        return forward ..mapValues(typeToLValue, ..T);
}

alias throwButPropagateLike(ex, ..expr) {
    if (true)
        throw ex;
    else
        return forward ..expr;
}



/// @section  exceptionIs?, exceptionAs, exceptionAsAny 

[T]
overload exceptionIs?(#T, exp:RawPointer) = nestedVariantIs?(exceptionObject(exp), T);

[T]
overload exceptionAs(#T, exp:RawPointer) --> ex:T {
    ex <-- moveUnsafe(nestedVariantAs(exceptionObject(exp), T));
    freeRawMemory(exp);
}

overload exceptionAsAny(exp:RawPointer) --> ex:Exception {
    ex <-- moveUnsafe(exceptionObject(exp));
    freeRawMemory(exp);
}



/// @section  unhandledExceptionInExternal 
//

private forceinline errorMsg(msg) {
    libc.fprintf(libc.stderr, cstring(msg));
    showBacktrace();
}

overload unhandledExceptionInExternal() {
    errorMsg("unhandled exception in external procedure\n");
    libc.abort();
}

overload exceptionInInitializer() {
    errorMsg("exception when initializing globals\n");
    libc.abort();
}

overload exceptionInFinalizer() {
    errorMsg("exception when destroying globals\n");
    libc.abort();
}
