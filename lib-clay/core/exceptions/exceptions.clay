import core.libc as libc;
import core.errors.backtrace.*;
import __operators__.(
    throwValue,
    continueException,
    exceptionIs?,
    exceptionAs,
    exceptionAsAny,
    unhandledExceptionInExternal,
    exceptionInInitializer,
    exceptionInFinalizer,
);


/// @section  Exception, NoException, currentException 

variant Exception;

record NoException ();
instance Exception (NoException);

override Exception() = Exception(NoException());

record GenericException (
    message: StringLiteralRef,
);
[S when StringLiteral?(S)]
override GenericException(#S) : GenericException 
    = GenericException(StringLiteralRef(S));

instance Exception (GenericException);



record ExceptionContext (
    backtrace: Backtrace,
    file: StringLiteralRef,
    line: UInt,
);

private record ExceptionData (
    exception: Exception,
    context: ExceptionContext,
);

private exceptionObject(exp:RawPointer) : ByRef[ExceptionData] 
    = ref Pointer[ExceptionData](exp)^;



/// @section  printUnhandledExceptionToStderr

// Print unhandled exception to stderr.
// This function is called from program bootstrap code (see
// `core.system.runMain`). Must print at least one line. Last line must
// be terminated with \n character. This is very simple implementation
// that depends on nothing but core. `printer.exception` module contains
// more sophisticated version.
define printUnhandledExceptionToStderr(e) :;

override printUnhandledExceptionToStderr(e) : {
    libc.fprintf(libc.stderr, cstring("unhandled %s exception\n"), cstring(MemberTypeName(e)));
}



/// @section  throwValue, continueException 

[T when Type?(T)]
override throwValue(x:T) : {
    errorWithPrintfNoThrow(stringLiteralConcat("exception of type ", StaticName(T)," thrown with exceptions disabled"));
}

private allocateExceptionData(forward x, file, line) : Pointer[ExceptionData] =
    allocateObject(ExceptionData(Exception(x), ExceptionContext(Backtrace(), file, line)));

[ when ExceptionsEnabled?]
alias override throwValue(x) : {
    // allocateExceptionData cannot be inlined, because allocateExceptionData is also an alias function that throws
    var exp = allocateExceptionData(x, StringLiteralRef(__FILE__), UInt(__LINE__));
    if (not Flag?("clay.DisableBacktraceOnThrow")) {
        exp^.context.backtrace = captureBacktrace();
    }
    signalException(RawPointer(exp));
}

[S when StringLiteral?(S)]
alias override throwValue(#S) : {
    throwValue(GenericException(S));
}

override continueException(exp:RawPointer) : {
    signalException(exp);
}

private signalException(exp:RawPointer) __llvm__ {
    %expv = load i8** %exp
    ret i8* %expv
}



/// @section  throwButPropagate 

throwButPropagate(ex, ..T) {
    if (true)
        throw ex;
    else
        return forward ..mapValues(typeToLValue, ..T);
}

alias throwButPropagateLike(ex, ..expr) {
    if (true)
        throw ex;
    else
        return forward ..expr;
}



/// @section  exceptionIs?, exceptionAs, exceptionAsAny 

[T]
override exceptionIs?(#T, exp:RawPointer) : Bool = nestedVariantIs?(exceptionObject(exp).exception, T);

[T]
override exceptionAs(#T, exp:RawPointer) : T, ExceptionContext {
    finally freeRawMemory(exp);
    return
        moveUnsafe(nestedVariantAs(exceptionObject(exp).exception, T)),
        moveUnsafe(exceptionObject(exp).context);
}

override exceptionAsAny(exp:RawPointer) : Exception, ExceptionContext {
    finally freeRawMemory(exp);
    return
        moveUnsafe(exceptionObject(exp).exception),
        moveUnsafe(exceptionObject(exp).context);
}



/// @section  unhandledExceptionInExternal 
//

private forceinline errorMsg(msg) : {
    libc.fprintf(libc.stderr, cstring(msg));
    showBacktrace();
}

override unhandledExceptionInExternal() : {
    errorMsg("unhandled exception in external procedure\n");
    libc.abort();
}

override exceptionInInitializer() : {
    errorMsg("exception when initializing globals\n");
    libc.abort();
}

override exceptionInFinalizer() : {
    errorMsg("exception when destroying globals\n");
    libc.abort();
}
