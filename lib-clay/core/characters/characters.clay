import __operators__;

record Char (code:Int8);

forceinline overload __operators__.charLiteral(code) = Char(code);

record UniChar (code:UInt32);

[T]
define Character?(#T) : Bool;

default Character?(x) : Bool = false;
overload Character?(#Char) : Bool = true;
overload Character?(#UniChar) : Bool = true;

// signed integer must be in range -128..128, otherwise this operation fails
[I when SignedInteger?(I)]
forceinline overload Char(c:I) --> returned:Char {
    returned.code = Int8(c);
}

// unsigned integer must be in range 0..256, otherwise this operation fails
[I when UnsignedInteger?(I)]
forceinline overload Char(c:I) --> returned:Char {
    returned.code = wrapCast(Int8, UInt8(c));
}

[I when Integer?(I)]
forceinline overload UniChar(c:I) --> returned:UniChar {
    returned.code = UInt32(c);
}

// this operation fails if character is not in ASCII range
forceinline overload UniChar(c:Char) : UniChar = UniChar(c.code);
// this operation fails if character is not in ASCII range
forceinline overload Char(c:UniChar) : Char = Char(Int8(c.code));

[I when Integer?(I)]
forceinline overload I(c:Char) : I = wrapCast(I, c.code);

[I when Integer?(I)]
forceinline overload I(c:UniChar) : I = I(c.code);

[C, D when Character?(C) and Character?(D)]
forceinline overload equals?(x:C, y:D) : Bool = equals?(x.code, y.code);

[C, D when Character?(C) and Character?(D)]
forceinline overload lesser?(x:C, y:D) : Bool = lesser?(x.code, y.code);


/// @section  asciiSpace? 

[C when Character?(C)]
asciiSpace?(c:C) {
    switch (c) case (' ', '\r', '\n', '\t', '\f')
        return true;
    else
        return false;
}

/// @section  asciiUpper, asciiLower 

[C when Character?(C)]
asciiUpper(c:C) : C = if ('a' <= c <= 'z') C(Int(c) - 0x20) else c;

[C when Character?(C)]
asciiLower(c:C) : C = if ('A' <= c <= 'Z') C(Int(c) + 0x20) else c;
