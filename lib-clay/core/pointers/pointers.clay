

/// @section  type predicates 

[T]
overload ContiguousCoordinate?(#Pointer[T]) = true;



/// @section  null? 

define null?;



/// @section  Pointer - constructor 

[T]
forceinline overload Pointer[T]() = nullPointer(Pointer[T]);



/// @section  Pointer - convert to/from integers and other pointers 

[I,T when Integer?(I)]
forceinline overload I(a:Pointer[T]) = pointerToInt(I, a);

[I,T when Integer?(I)]
forceinline overload Pointer[T](a:I) = intToPointer(Pointer[T], a);

[DEST, SRC]
forceinline overload Pointer[DEST](a:Pointer[SRC]) =
    bitcast(Pointer[DEST], a);



/// @section  Pointer - assign, equals?, lesser? 

[T]
forceinline overload equals?(a:Pointer[T], b:Pointer[T]) {
    return integerEquals?(a, b);
}

[T]
forceinline overload lesser?(a:Pointer[T], b:Pointer[T]) {
    return integerLesser?(a, b);
}



/// @section  Pointer - arithmetic 

[T,I when Integer?(I)]
forceinline overload add(p:Pointer[T], i:I) {
    return pointerOffset(p, i);
}

[T,I when Integer?(I)]
forceinline overload add(i:I, p:Pointer[T]) {
    return pointerOffset(p, i);
}

[T,I when Integer?(I)]
forceinline overload subtract(p:Pointer[T], i:I) {
    return pointerOffset(p, wrapSubtract(PtrInt(i)));
}

[T]
forceinline overload subtract(a:Pointer[T], b:Pointer[T]) {
    return wrapQuotient(wrapSubtract(PtrInt(a), PtrInt(b)), PtrInt(TypeSize(T)));
}

[T]
forceinline overload inc(ref a:Pointer[T]) {
    a +: 1;
}

[T]
forceinline overload dec(ref a:Pointer[T]) {
    a -: 1;
}



/// @section  Pointer - null, null?, dereference, index 

[T]
forceinline null(#T) = nullPointer(Pointer[T]);

[T]
forceinline overload null?(x:Pointer[T]) = x == null(T);

[T]
forceinline overload dereference(p:Pointer[T]) = ref pointerDereference(p);

[T, I when Integer?(I)]
forceinline overload index(p:Pointer[T], i:I) = ref (p + i)^;



/// @section  CodePointer?, ExternalCodePointer? 

define CodePointer?(x) : Bool;
overload CodePointer?(x) = false;
[In,Out] overload CodePointer?(#CodePointer[In,Out]) = true;

define ExternalCodePointer?(x) : Bool;
overload ExternalCodePointer?(x) = false;
[CC,V?,In,Out] overload ExternalCodePointer?(#ExternalCodePointer[CC,V?,In,Out]) = true;


/// @section  CodePointer - constructor 

[In, Out]
forceinline overload CodePointer[In,Out]() = nullPointer(CodePointer[In,Out]);



/// @section  CodePointer - convert to/from other pointers/integers 

[T, In, Out]
forceinline overload Pointer[T](a:CodePointer[In,Out]) = bitcast(Pointer[T], a);

[T, In, Out]
forceinline overload CodePointer[In,Out](a:Pointer[T]) =
    bitcast(CodePointer[In,Out], a);

[In1, Out1, In2, Out2]
forceinline overload CodePointer[In1,Out1](a:CodePointer[In2,Out2]) =
    bitcast(CodePointer[In1,Out1], a);

[In, Out, I when Integer?(I)]
forceinline overload CodePointer[In,Out](i:I) =
    intToPointer(CodePointer[In,Out], i);

[In, Out, I when Integer?(I)]
forceinline overload I(a:CodePointer[In,Out]) = pointerToInt(I, a);



//
// CodePointer - equals?, lesser?, null?

[In, Out]
forceinline overload equals?(a:CodePointer[In,Out], b:CodePointer[In,Out]) {
    return integerEquals?(a, b);
}

[In, Out]
forceinline overload lesser?(a:CodePointer[In,Out], b:CodePointer[In,Out]) {
    return integerLesser?(a, b);
}

[In, Out]
forceinline overload null?(p:CodePointer[In,Out]) = p == nullPointer(CodePointer[In,Out]);



/// @section  ExternalCodePointer - constructor 

[CC,V?,I,O]
forceinline overload ExternalCodePointer[CC,V?,I,O]() =
    nullPointer(ExternalCodePointer[CC,V?,I,O]);



/// @section  ExternalCodePointer - convert to/from other pointers/integers 

[T, CC,V?,I,O]
forceinline overload Pointer[T](a:ExternalCodePointer[CC,V?,I,O]) = bitcast(Pointer[T], a);

[T, CC,V?,I,O]
forceinline overload ExternalCodePointer[CC,V?,I,O](a:Pointer[T]) =
    bitcast(ExternalCodePointer[CC,V?,I,O], a);

[CC1,V1?,I1,O1, CC2,V2?,I2,O2]
forceinline overload ExternalCodePointer[CC1,V1?,I1,O1](a:ExternalCodePointer[CC2,V2?,I2,O2]) =
    bitcast(ExternalCodePointer[CC1,V1?,I1,O1], a);

[CC,V?,In,Out,I when Integer?(I)]
forceinline overload ExternalCodePointer[CC,V?,In,Out](i:I) =
    intToPointer(ExternalCodePointer[CC,V?,In,Out], i);

[CC,V?,In,Out,I when Integer?(I)]
forceinline overload I(a:ExternalCodePointer[CC,V?,In,Out]) =
    pointerToInt(I, a);


/// @section  ExternalCodePointer - equals?, lesser?, null? 

[C,V,I,O]
forceinline overload equals?(a:ExternalCodePointer[C,V,I,O], b:ExternalCodePointer[C,V,I,O]) {
    return integerEquals?(a, b);
}

[C,V,I,O]
forceinline overload lesser?(a:ExternalCodePointer[C,V,I,O], b:ExternalCodePointer[C,V,I,O]) {
    return integerLesser?(a, b);
}

[C,V,I,O]
forceinline overload null?(p:ExternalCodePointer[C,V,I,O]) {
    return p == nullPointer(ExternalCodePointer[C,V,I,O]);
}


/// @section  ExternalCodePointer - call 

private define CCastable?;

[F, T when Type?(F) and Type?(T)]
overload CCastable?(#F, #T) = false;

[F, T when Integer?(F) and Integer?(T) and TypeSize(T) >= TypeSize(F)]
overload CCastable?(#F, #T) = true;

[F, T when Integer?(F) and Integer?(T) and TypeSize(T) == TypeSize(F)]
overload CCastable?(#Pointer[F], #Pointer[T]) = true;

[F]
overload CCastable?(#Pointer[F], #RawPointer) = true;

[From, To]
private define cCast(from:From, #To) : To;

[F, T when CCastable?(F, T)]
overload cCast(from:F, #T) = T(from);

[S when Sequence?(S) and (Char == SequenceElementType(S))]
overload cCast(s:S, #Pointer[CChar]) = cstring(s);

[F]
overload cCast(forward from:F, #F) = forward from;

[CC, ..In, ..Out, ..A when countValues(..In) == countValues(..A)]
forceinline overload call(ptr:ExternalCodePointer[CC, false, [..In], [..Out]], ..args:A) =
    ..callExternalCodePointer(ptr,
        ..mapValues2((arg, T) => cCast(arg, T), #countValues(..A), ..args, ..In));

[CC, ..In, ..Out]
forceinline overload call(ptr:ExternalCodePointer[CC, false, [..In], [..Out]], ..args:In) =
    ..callExternalCodePointer(ptr, ..args);

[CC, ..In, ..Out, ..A when (countValues(..A) >= countValues(..In))]
forceinline overload call(ptr:ExternalCodePointer[CC, true, [..In], [..Out]], ..args:A) {
    alias N = #countValues(..In);
    return ..callExternalCodePointer(ptr,
        ..mapValues2((arg, T) => cCast(arg, T), N, ..takeValues(N, ..args), ..In),
        ..dropValues(N, ..args));
}

[CC, ..In, ..Out, ..A when (countValues(..A) >= countValues(..In))
                       and (Tuple[..takeValues(#countValues(..In), ..A)] == Tuple[..In])]
forceinline overload call(ptr:ExternalCodePointer[CC, true, [..In], [..Out]], ..args:A) =
    ..callExternalCodePointer(ptr, ..args);


/// @section  construct code pointers from #callables 

[..In, ..Out, fn when CallDefined?(fn, ..In)]
forceinline overload CodePointer[[..In], [..Out]](#fn) : CodePointer[[..In], [..Out]]
    = makeCodePointer(fn, ..In);

[CC, V?, ..In, ..Out, fn when CallDefined?(fn, ..In)]
forceinline overload ExternalCodePointer[CC, V?, [..In], [..Out]](#fn)
    : ExternalCodePointer[CC, V?, [..In], [..Out]]
    = makeExternalCodePointer(fn, #CC, #V?, ..In);


/// @section  code pointers are Mono? 

[..In, ..Out]
alias overload MonoInputTypes(f:CodePointer[[..In], [..Out]]) = ..In;
[CC, ..In, ..Out]
alias overload MonoInputTypes(f:ExternalCodePointer[CC, false, [..In], [..Out]]) = ..In;


/// @section  aliases for external code pointer types 

alias CCodePointer[I,O] = ExternalCodePointer[cdecl, false, I, O];
alias VarArgsCCodePointer[I,O] = ExternalCodePointer[cdecl, true, I, O];
alias StdCallCodePointer[I,O] = ExternalCodePointer[stdcall, false, I, O];
alias FastCallCodePointer[I,O] = ExternalCodePointer[fastcall, false, I, O];
alias ThisCallCodePointer[I,O] = ExternalCodePointer[thiscall, false, I, O];
alias LLVMCodePointer[I,O] = ExternalCodePointer[llvm, false, I, O];

alias makeCCodePointer(fn, ..In) =
    makeExternalCodePointer(fn, cdecl, #false, ..In);


/// @section  construct code pointers from mono #callables 

[fn when Mono?(fn)]
forceinline overload CodePointer(#fn) = makeCodePointer(fn, ..MonoInputTypes(fn));
[fn when Mono?(fn)]
forceinline overload CCodePointer(#fn) =
    makeExternalCodePointer(fn, cdecl, #false, ..MonoInputTypes(fn));
[fn when Mono?(fn)]
forceinline overload StdCallCodePointer(#fn) =
    makeExternalCodePointer(fn, stdcall, #false, ..MonoInputTypes(fn));
[fn when Mono?(fn)]
forceinline overload FastCallCodePointer(#fn) =
    makeExternalCodePointer(fn, fastcall, #false, ..MonoInputTypes(fn));
[fn when Mono?(fn)]
forceinline overload ThisCallCodePointer(#fn) =
    makeExternalCodePointer(fn, thiscall, #false, ..MonoInputTypes(fn));
[fn when Mono?(fn)]
forceinline overload LLVMCodePointer(#fn) =
    makeExternalCodePointer(fn, llvm, #false, ..MonoInputTypes(fn));
