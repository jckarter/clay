import core.coordinates.*;


/// @section  type predicates 

[T]
override ContiguousCoordinate?(#Pointer[T]) : Bool = true;



/// @section  null? 

define null?;



/// @section  Pointer - constructor 

[T]
forceinline override Pointer[T]() : Pointer[T] = nullPointer(Pointer[T]);



/// @section  Pointer - convert to/from integers and other pointers 

[I,T when Integer?(I)]
forceinline override I(a:Pointer[T]) : I = pointerToInt(I, a);

[I,T when Integer?(I)]
forceinline override Pointer[T](a:I) : Pointer[T] = intToPointer(Pointer[T], a);

[DEST, SRC]
forceinline override Pointer[DEST](a:Pointer[SRC]) : Pointer[DEST] 
    = bitcast(Pointer[DEST], a);



/// @section  Pointer - assign, equals?, lesser? 

[T]
forceinline override equals?(a:Pointer[T], b:Pointer[T]) : Bool
    = integerEquals?(a, b);

[T]
forceinline override lesser?(a:Pointer[T], b:Pointer[T]) : Bool 
    = integerLesser?(a, b);



/// @section  Pointer - arithmetic 

[T,I when Integer?(I)]
forceinline override add(p:Pointer[T], i:I) : Pointer[T] = pointerOffset(p, i);

[T,I when Integer?(I)]
forceinline override add(i:I, p:Pointer[T]) : Pointer[T]= pointerOffset(p, i);

[T,I when Integer?(I)]
forceinline override subtract(p:Pointer[T], i:I) : Pointer[T] 
    = pointerOffset(p, wrapSubtract(PtrInt(i)));

[T]
forceinline override subtract(a:Pointer[T], b:Pointer[T]) : PtrInt
    = wrapQuotient(wrapSubtract(PtrInt(a), PtrInt(b)), PtrInt(TypeSize(T)));

[T]
forceinline override inc(ref a:Pointer[T]) : {
    a +: 1;
}

[T]
forceinline override dec(ref a:Pointer[T]) : {
    a -: 1;
}



/// @section  Pointer - null, null?, dereference, index 

[T]
forceinline null(#T) = nullPointer(Pointer[T]);

[T]
forceinline override null?(x:Pointer[T]) : Bool = x == null(T);

[T]
forceinline override dereference(p:Pointer[T]) : ByRef[T] = ref pointerDereference(p);

[T, I when Integer?(I)]
forceinline override index(p:Pointer[T], i:I) : ByRef[T] = ref (p + i)^;



/// @section  CodePointer?, ExternalCodePointer? 

define CodePointer?(x) : Bool;
override CodePointer?(x) : Bool = false;
[In,Out] override CodePointer?(#CodePointer[In,Out]) : Bool = true;

define ExternalCodePointer?(x) : Bool;
override ExternalCodePointer?(x) : Bool = false;
[CC,V?,In,Out] override ExternalCodePointer?(#ExternalCodePointer[CC,V?,In,Out]) : Bool = true;


/// @section  CodePointer - constructor 

[In, Out]
forceinline override CodePointer[In,Out]() = nullPointer(CodePointer[In,Out]);



/// @section  CodePointer - convert to/from other pointers/integers 

[T, In, Out]
forceinline override Pointer[T](a:CodePointer[In,Out]) : Pointer[T] = bitcast(Pointer[T], a);

[T, In, Out]
forceinline override CodePointer[In,Out](a:Pointer[T]) : CodePointer[In,Out]
    = bitcast(CodePointer[In,Out], a);

[In1, Out1, In2, Out2]
forceinline override CodePointer[In1,Out1](a:CodePointer[In2,Out2]) : CodePointer[In1,Out1]
    = bitcast(CodePointer[In1,Out1], a);

[In, Out, I when Integer?(I)]
forceinline override CodePointer[In,Out](i:I) : CodePointer[In,Out]
    = intToPointer(CodePointer[In,Out], i);

[In, Out, I when Integer?(I)]
forceinline override I(a:CodePointer[In,Out]) : I = pointerToInt(I, a);



//
// CodePointer - equals?, lesser?, null?

[In, Out]
forceinline override equals?(a:CodePointer[In,Out], b:CodePointer[In,Out]) : Bool
    = integerEquals?(a, b);

[In, Out]
forceinline override lesser?(a:CodePointer[In,Out], b:CodePointer[In,Out]) : Bool
    = integerLesser?(a, b);

[In, Out]
forceinline override null?(p:CodePointer[In,Out]) : Bool 
    = p == nullPointer(CodePointer[In,Out]);



/// @section  ExternalCodePointer - constructor 

[CC,V?,I,O]
forceinline override ExternalCodePointer[CC,V?,I,O]() =
    nullPointer(ExternalCodePointer[CC,V?,I,O]);



/// @section  ExternalCodePointer - convert to/from other pointers/integers 

[T, CC,V?,I,O]
forceinline override Pointer[T](a:ExternalCodePointer[CC,V?,I,O]) : Pointer[T] 
    = bitcast(Pointer[T], a);

[T, CC,V?,I,O]
forceinline override ExternalCodePointer[CC,V?,I,O](a:Pointer[T]) 
    : ExternalCodePointer[CC,V?,I,O]
        = bitcast(ExternalCodePointer[CC,V?,I,O], a);

[CC1,V1?,I1,O1, CC2,V2?,I2,O2]
forceinline override ExternalCodePointer[CC1,V1?,I1,O1](a:ExternalCodePointer[CC2,V2?,I2,O2]) 
    : ExternalCodePointer[CC1,V1?,I1,O1]
        = bitcast(ExternalCodePointer[CC1,V1?,I1,O1], a);

[CC,V?,In,Out,I when Integer?(I)]
forceinline override ExternalCodePointer[CC,V?,In,Out](i:I) : ExternalCodePointer[CC,V?,In,Out]
    = intToPointer(ExternalCodePointer[CC,V?,In,Out], i);

[CC,V?,In,Out,I when Integer?(I)]
forceinline override I(a:ExternalCodePointer[CC,V?,In,Out]) : I 
    = pointerToInt(I, a);


/// @section  ExternalCodePointer - equals?, lesser?, null? 

[C,V,I,O]
forceinline override equals?(a:ExternalCodePointer[C,V,I,O], b:ExternalCodePointer[C,V,I,O])
    : Bool 
        = integerEquals?(a, b);

[C,V,I,O]
forceinline override lesser?(a:ExternalCodePointer[C,V,I,O], b:ExternalCodePointer[C,V,I,O]) 
    : Bool
        = integerLesser?(a, b);

[C,V,I,O]
forceinline override null?(p:ExternalCodePointer[C,V,I,O]) : Bool 
    = p == nullPointer(ExternalCodePointer[C,V,I,O]);


/// @section  ExternalCodePointer - call 

private define CCastable?;

[F, T when Type?(F) and Type?(T)]
override CCastable?(#F, #T) : Bool = false;

[F, T when Integer?(F) and Integer?(T) and TypeSize(T) >= TypeSize(F)]
override CCastable?(#F, #T) : Bool = true;

[F, T when Integer?(F) and Integer?(T) and TypeSize(T) == TypeSize(F)]
override CCastable?(#Pointer[F], #Pointer[T]) : Bool = true;

[F]
override CCastable?(#Pointer[F], #RawPointer) : Bool = true;

[From, To]
private define cCast(from:From, #To) : To;

[F, T when CCastable?(F, T)]
override cCast(from:F, #T) : T = T(from);

[S when Sequence?(S) and (Char == SequenceElementType(S))]
override cCast(s:S, #Pointer[CChar]) : Pointer[CChar] = cstring(s);

[F]
override cCast(forward from:F, #F) = forward from;

[CC, ..In, ..Out, ..A when countValues(..In) == countValues(..A)]
forceinline override call(ptr:ExternalCodePointer[CC, false, [..In], [..Out]], ..args:A) =
    ..callExternalCodePointer(ptr,
        ..mapValues2((arg, T) => cCast(arg, T), #countValues(..A), ..args, ..In));

[CC, ..In, ..Out]
forceinline override call(ptr:ExternalCodePointer[CC, false, [..In], [..Out]], ..args:In) =
    ..callExternalCodePointer(ptr, ..args);

[CC, ..In, ..Out, ..A when (countValues(..A) >= countValues(..In))]
forceinline override call(ptr:ExternalCodePointer[CC, true, [..In], [..Out]], ..args:A) {
    alias N = #countValues(..In);
    return ..callExternalCodePointer(ptr,
        ..mapValues2((arg, T) => cCast(arg, T), N, ..takeValues(N, ..args), ..In),
        ..dropValues(N, ..args));
}

[CC, ..In, ..Out, ..A when (countValues(..A) >= countValues(..In))
                       and (Tuple[..takeValues(#countValues(..In), ..A)] == Tuple[..In])]
forceinline override call(ptr:ExternalCodePointer[CC, true, [..In], [..Out]], ..args:A) =
    ..callExternalCodePointer(ptr, ..args);


/// @section  construct code pointers from #callables 

[..In, ..Out, fn when CallDefined?(fn, ..In)]
forceinline override CodePointer[[..In], [..Out]](#fn) : CodePointer[[..In], [..Out]]
    = makeCodePointer(fn, ..In);

[CC, V?, ..In, ..Out, fn when CallDefined?(fn, ..In)]
forceinline override ExternalCodePointer[CC, V?, [..In], [..Out]](#fn)
    : ExternalCodePointer[CC, V?, [..In], [..Out]]
    = makeExternalCodePointer(fn, #CC, #V?, ..In);


/// @section  code pointers are Mono? 

[..In, ..Out]
alias override MonoInputTypes(f:CodePointer[[..In], [..Out]]) = ..In;
[CC, ..In, ..Out]
alias override MonoInputTypes(f:ExternalCodePointer[CC, false, [..In], [..Out]]) = ..In;


/// @section  aliases for external code pointer types 

alias CCodePointer[I,O] = ExternalCodePointer[cdecl, false, I, O];
alias VarArgsCCodePointer[I,O] = ExternalCodePointer[cdecl, true, I, O];
alias StdCallCodePointer[I,O] = ExternalCodePointer[stdcall, false, I, O];
alias FastCallCodePointer[I,O] = ExternalCodePointer[fastcall, false, I, O];
alias ThisCallCodePointer[I,O] = ExternalCodePointer[thiscall, false, I, O];
alias LLVMCodePointer[I,O] = ExternalCodePointer[llvm, false, I, O];

alias makeCCodePointer(fn, ..In) =
    makeExternalCodePointer(fn, cdecl, #false, ..In);


/// @section  construct code pointers from mono #callables 

[fn when Mono?(fn)]
forceinline override CodePointer(#fn) = makeCodePointer(fn, ..MonoInputTypes(fn));
[fn when Mono?(fn)]
forceinline override CCodePointer(#fn) =
    makeExternalCodePointer(fn, cdecl, #false, ..MonoInputTypes(fn));
[fn when Mono?(fn)]
forceinline override StdCallCodePointer(#fn) =
    makeExternalCodePointer(fn, stdcall, #false, ..MonoInputTypes(fn));
[fn when Mono?(fn)]
forceinline override FastCallCodePointer(#fn) =
    makeExternalCodePointer(fn, fastcall, #false, ..MonoInputTypes(fn));
[fn when Mono?(fn)]
forceinline override ThisCallCodePointer(#fn) =
    makeExternalCodePointer(fn, thiscall, #false, ..MonoInputTypes(fn));
[fn when Mono?(fn)]
forceinline override LLVMCodePointer(#fn) =
    makeExternalCodePointer(fn, llvm, #false, ..MonoInputTypes(fn));
