


//
// ValueCoordinate
//

record ValueCoordinate[T] (hasValue? : Bool, value : T);
[T] overload ValueCoordinate[T](value:T) = ValueCoordinate[T](true, value);
[T] overload ValueCoordinate(value:T) = ValueCoordinate[T](true, value);

[T]
inline overload dereference(c:ValueCoordinate[T]) = c.value;

[T]
inline overload getValue(c:ValueCoordinate[T]) = c.value;
[T]
inline overload hasValue?(c:ValueCoordinate[T]) = c.hasValue?;

[T,I when CallDefined?(add, T, I)]
inline overload add(c:ValueCoordinate[T], i:I) =
    ValueCoordinate(T(c.value + i));

[T,I when CallDefined?(subtract, T, I)]
inline overload subtract(c:ValueCoordinate[T], i:I) =
    ValueCoordinate(T(c.value - i));

[T when CallDefined?(subtract, T, T)]
inline overload subtract(c1:ValueCoordinate[T], c2:ValueCoordinate[T]) =
    c1.value - c2.value;

[T]
inline overload inc(c:ValueCoordinate[T]) {
    inc(c.value);
}

[T]
inline overload dec(c:ValueCoordinate[T]) {
    dec(c.value);
}



//
// ValueReverseCoordinate
//

record ValueReverseCoordinate[T] (value : T);

[T]
inline overload dereference(c:ValueReverseCoordinate[T]) = (c.value - 1);

[T,I when CallDefined?(subtract, T, I)]
inline overload add(c:ValueReverseCoordinate[T], i:I) =
    ValueReverseCoordinate(T(c.value - i));

[T,I when CallDefined?(add, T, I)]
inline overload subtract(c:ValueReverseCoordinate[T], i:I) =
    ValueReverseCoordinate(T(c.value + i));

[T when CallDefined?(subtract, T, T)]
inline overload subtract(c1:ValueReverseCoordinate[T], c2:ValueReverseCoordinate[T]) =
    c2.value - c1.value;

[T]
inline overload inc(c:ValueReverseCoordinate[T]) {
    dec(c.value);
}

[T]
inline overload dec(c:ValueReverseCoordinate[T]) {
    inc(c.value);
}



//
// ReverseCoordinate
//

record ReverseCoordinate[T] (coord : T);

[T]
inline overload dereference(c:ReverseCoordinate[T]) = forward ..(c.coord - 1)^;

[T]
inline overload getValue(c:ReverseCoordinate[T]) = forward ..getValue(c.coord - 1);
[T]
inline overload hasValue?(c:ReverseCoordinate[T]) = hasValue?(c.coord);

[T,I when CallDefined?(subtract, T, I)]
inline overload add(c:ReverseCoordinate[T], i:I) =
    ReverseCoordinate(T(c.coord - i));

[T,I when CallDefined?(add, T, I)]
inline overload subtract(c:ReverseCoordinate[T], i:I) =
    ReverseCoordinate(T(c.coord + i));

[T when CallDefined?(subtract, T, T)]
inline overload subtract(c1:ReverseCoordinate[T], c2:ReverseCoordinate[T]) =
    c2.coord - c1.coord;

[T]
inline overload inc(c:ReverseCoordinate[T]) {
    dec(c.coord);
}

[T]
inline overload dec(c:ReverseCoordinate[T]) {
    inc(c.coord);
}
