
/// @section  coordinate type predicates 

Coordinate?(T) : Bool = CallDefined?(dereference, T);
CoordinateTargetType(T) = ..Type(..dereference(typeToLValue(T)));

RandomAccessCoordinate?(T) : Bool =
    Coordinate?(T) and
    CallDefined?((+), T, Int) and
    CallDefined?((-), T, Int) and
    CallDefined?((-), T, T);

LValueCoordinate?(T) : Bool =
    Coordinate?(T) and
    LValue?(dereference(typeToLValue(T)));

// true if adjacent coordinates point to adjacent locations in memory
[T]
define ContiguousCoordinate?(#T) : Bool;

ContiguousCoordinate?(T) : Bool = false;



/// @section  ValueCoordinate 

record ValueCoordinate[T] (hasValue? : Bool, value : T);
[T] ValueCoordinate[T](value:T) : ValueCoordinate[T] 
    = ValueCoordinate[T](true, value);
[T] ValueCoordinate(value:T) : ValueCoordinate[T]
    = ValueCoordinate[T](true, value);

[T]
forceinline dereference(c:ValueCoordinate[T]) : T = c.value;

[T]
forceinline getValue(c:ValueCoordinate[T]) : T = c.value;
[T]
forceinline hasValue?(c:ValueCoordinate[T]) : Bool = c.hasValue?;

[T,I when CallDefined?(add, T, I)]
forceinline add(c:ValueCoordinate[T], i:I) : ValueCoordinate[T]
    = ValueCoordinate(T(c.value + i));

[T,I when CallDefined?(subtract, T, I)]
forceinline subtract(c:ValueCoordinate[T], i:I) : ValueCoordinate[T] 
    = ValueCoordinate(T(c.value - i));

[T when CallDefined?(subtract, T, T)]
forceinline subtract(c1:ValueCoordinate[T], c2:ValueCoordinate[T]) : T 
    = c1.value - c2.value;

[T]
forceinline inc(ref c:ValueCoordinate[T]) : {
    inc(c.value);
}

[T]
forceinline dec(ref c:ValueCoordinate[T]) : {
    dec(c.value);
}



/// @section  ValueReverseCoordinate 

record ValueReverseCoordinate[T] (value : T);

[T]
forceinline dereference(c:ValueReverseCoordinate[T]) : T = (c.value - 1);

[T,I when CallDefined?(subtract, T, I)]
forceinline add(c:ValueReverseCoordinate[T], i:I) : ValueReverseCoordinate[T]
    = ValueReverseCoordinate(T(c.value - i));

[T,I when CallDefined?(add, T, I)]
forceinline subtract(c:ValueReverseCoordinate[T], i:I) : ValueReverseCoordinate[T]
    = ValueReverseCoordinate(T(c.value + i));

[T when CallDefined?(subtract, T, T)]
forceinline subtract(c1:ValueReverseCoordinate[T], c2:ValueReverseCoordinate[T]) : T
    = c2.value - c1.value;

[T]
forceinline inc(ref c:ValueReverseCoordinate[T]) : {
    dec(c.value);
}

[T]
forceinline dec(ref c:ValueReverseCoordinate[T]) : {
    inc(c.value);
}



/// @section  ReverseCoordinate 

record ReverseCoordinate[T] (coord : T);

[T]
forceinline dereference(c:ReverseCoordinate[T]) = forward ..(c.coord - 1)^;

[T]
forceinline getValue(c:ReverseCoordinate[T]) : T = forward ..getValue(c.coord - 1);
[T]
forceinline hasValue?(c:ReverseCoordinate[T]) : Bool = hasValue?(c.coord);

[T,I when CallDefined?(subtract, T, I)]
forceinline add(c:ReverseCoordinate[T], i:I) : ReverseCoordinate[T]
    = ReverseCoordinate(T(c.coord - i));

[T,I when CallDefined?(add, T, I)]
forceinline subtract(c:ReverseCoordinate[T], i:I) : ReverseCoordinate[T]
    = ReverseCoordinate(T(c.coord + i));

[T when CallDefined?(subtract, T, T)]
forceinline subtract(c1:ReverseCoordinate[T], c2:ReverseCoordinate[T]) : T 
    = c2.coord - c1.coord;

[T]
forceinline inc(ref c:ReverseCoordinate[T]) : {
    dec(c.coord);
}

[T]
forceinline dec(ref c:ReverseCoordinate[T]) : {
    inc(c.coord);
}
