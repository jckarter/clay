
public import __primitives__.(Static);



/// @section  Static? predicate 

define Static?(x) : Bool private overload;
alias Static?(x) : Bool = false;
[T] alias Static?(#T) : Bool = true;



/// @section  constructors, moveUnsafe, resetUnsafe, destroy 

[A]
forceinline Static[A]() --> returned:Static[A] {
}

[A]
forceinline Static[A](src:Static[A]) --> returned:Static[A] {
}

[A]
forceinline moveUnsafe(src:Static[A]) --> returned:Static[A] {
}



/// @section  equals?, lesser? 

[A, B]
forceinline equals?(a:Static[A], b:Static[B]) : Bool = false;

[A]
forceinline equals?(a:Static[A], b:Static[A]) : Bool = true;

[A]
forceinline lesser?(a:Static[A], b:Static[A]) : Bool = false;



/// @section  unwrapStatic 

[A]
forceinline unwrapStatic(#A) = A;



/// @section  call 

[F, ..AA when CallDefined?(F, ..AA)]
forceinline call(#F, forward ..args:AA) =
    forward ..F(..args);



/// @section  fieldRef 

[Module, Ident]
forceinline fieldRef(#Module, #Ident) =
    forward staticFieldRef(Module, Ident);
