import core.memory.platform.(SystemMallocAlignment);
import core.libc as libc;


/// @section  allocateObject, freeObject 

[T]
alias allocateObject(x:T) --> returned:Pointer[T] {
    var ptr = allocateRawMemory(T, 1);
    try {
        ptr^ <-- x;
    }
    catch (e) {
        freeRawMemory(ptr);
        throw e;
    }
    returned <-- ptr;
}

[T]
freeObject(ptr:Pointer[T]) : {
    destroy(ptr^);
    freeRawMemory(ptr);
}

[T, I when Integer?(I)]
allocateArray(#T, count:I) --> returned:CoordinateRange[Pointer[T]] {
    var begin = allocateRawMemory(T, SizeT(count));
    var end = begin + SizeT(count);

    try {
        initializeMemory(begin, end);
    } catch (e) {
        freeRawMemory(begin);
        throw e;
    }
    returned <-- CoordinateRange(begin, end);
}

[T]
freeArray(array:CoordinateRange[T]) : {
    destroyMemory(begin(array), end(array));
    freeRawMemory(begin(array));
}


/// @section  alignedMalloc, alignedFree 

alignedMalloc(numBytes:SizeT, alignment:SizeT) --> returned:Pointer[UInt8] {
    var ptr = libc.malloc(numBytes + alignment + TypeSize(UInt8));
    if (null?(ptr))
        returned <-- null(UInt8);
    else {
        var mask = bitnot(SizeT(alignment) - 1);
        var roundedDown = bitand(SizeT(ptr), mask);
        var alignedPtr = Pointer[UInt8](alignment + roundedDown);
        (alignedPtr - 1)^ = Byte(alignedPtr - ptr);
        returned <-- alignedPtr;
    }
}

alignedFree(ptr:Pointer[UInt8]) : {
    if (null?(ptr))
        return;
    var offset = SizeT((ptr-1)^);
    var originalPtr = ptr - offset;
    libc.free(originalPtr);
}


/// @section  allocateRawMemoryAligned, freeRawMemoryAligned 

[T, I, J when Integer?(I) and Integer?(J)]
allocateRawMemoryAligned(#T, count:I, alignment:J) : Pointer[T]
    = Pointer[T](alignedMalloc(TypeSize(T) * SizeT(count), SizeT(alignment)));

[T]
freeRawMemoryAligned(ptr:Pointer[T]) : {
    alignedFree(Pointer[UInt8](ptr));
}



/// @section  allocateRawMemory, freeRawMemory 

define allocateRawMemory;

[T,I when Integer?(I)]
override allocateRawMemory(#T, count:I) : Pointer[T]
    = Pointer[T](libc.malloc(TypeSize(T) * SizeT(count)));

[T,I when Integer?(I) and TypeAlignment(T) <= SystemMallocAlignment]
reallocateRawMemory(ptr:Pointer[T], count:I) : Pointer[T]
    = Pointer[T](libc.realloc(RawPointer(ptr), TypeSize(T) * SizeT(count)));

define freeRawMemory;

[T]
override freeRawMemory(ptr:Pointer[T]) : {
    libc.free(RawPointer(ptr));
}

[T,I when Integer?(I) and (TypeAlignment(T) > SystemMallocAlignment)]
override allocateRawMemory(#T, count:I) : Pointer[T]
    = allocateRawMemoryAligned(T, count, TypeAlignment(T));


[T when TypeAlignment(T) > SystemMallocAlignment]
override freeRawMemory(ptr:Pointer[T]) : {
    freeRawMemoryAligned(ptr);
}



/// @section  initializeMemory 

[T]
initializeMemory(begin:Pointer[T], end:Pointer[T]) : {
    eachLocationWithCleanup(begin, end, initialize);
}



/// @section  destroyMemory 

define destroyMemory;

[T when not PODType?(T)]
override destroyMemory(begin:Pointer[T], end:Pointer[T]) : {
    eachLocation(begin, end, destroy);
}



/// @section  copyNonoverlappingMemory 

define copyNonoverlappingMemory;

[T when not PODType?(T)]
override copyNonoverlappingMemory(destBegin:Pointer[T], srcBegin:Pointer[T], srcEnd:Pointer[T]) : {
    var srcPtr = srcBegin;
    eachLocationWithCleanup(destBegin, destBegin+(srcEnd-srcBegin), x => {
        x <-- srcPtr^;
        srcPtr +: 1;
    });
}


/// @section  move*Memory* 

define moveMemory;
define moveMemoryUnsafe;
define moveNonoverlappingMemory;
define moveNonoverlappingMemoryUnsafe;

[T when not PODType?(T)]
override moveMemory(destBegin:Pointer[T], srcBegin:Pointer[T], srcEnd:Pointer[T]) : {
    if (destBegin <= srcBegin) {
        moveMemoryForwardsUnsafe(destBegin, srcBegin, srcEnd);
        var destEnd = destBegin + (srcEnd - srcBegin);
        resetMemoryUnsafe(max(destEnd, srcBegin), srcEnd);
    }
    else {
        moveMemoryBackwardsUnsafe(destBegin, srcBegin, srcEnd);
        resetMemoryUnsafe(srcBegin, min(srcEnd, destBegin));
    }
}

[T when not PODType?(T)]
override moveMemoryUnsafe(destBegin:Pointer[T], srcBegin:Pointer[T], srcEnd:Pointer[T]) : {
    if (destBegin <= srcBegin)
        moveMemoryForwardsUnsafe(destBegin, srcBegin, srcEnd);
    else
        moveMemoryBackwardsUnsafe(destBegin, srcBegin, srcEnd);
}

[T when not PODType?(T)]
private moveMemoryForwardsUnsafe(destBegin:Pointer[T], srcBegin:Pointer[T], srcEnd:Pointer[T]) : {
    var srcPtr = srcBegin;
    eachLocation(destBegin, destBegin+(srcEnd-srcBegin), x => {
        x <-- moveUnsafe(srcPtr^);
        srcPtr +: 1;
    });
}

[T when not PODType?(T)]
private moveMemoryBackwardsUnsafe(destBegin:Pointer[T], srcBegin:Pointer[T], srcEnd:Pointer[T]) : {
    var srcPtr = srcEnd;
    eachLocationBackwards(destBegin, destBegin+(srcEnd-srcBegin), x => {
        srcPtr -: 1;
        x <-- moveUnsafe(srcPtr^);
    });
}

[T when not PODType?(T)]
override moveNonoverlappingMemory(destBegin:Pointer[T], srcBegin:Pointer[T], srcEnd:Pointer[T]) : {
    var srcPtr = srcBegin;
    eachLocation(destBegin, destBegin+(srcEnd-srcBegin), x => {
        x <-- move(srcPtr^);
        srcPtr +: 1;
    });
}

[T when not PODType?(T)]
override moveNonoverlappingMemoryUnsafe(destBegin:Pointer[T], srcBegin:Pointer[T], srcEnd:Pointer[T]) : {
    moveMemoryForwardsUnsafe(destBegin, srcBegin, srcEnd);
}



/// @section  resetMemoryUnsafe 

define resetMemoryUnsafe;

[T when not PODType?(T)]
override resetMemoryUnsafe(begin:Pointer[T], end:Pointer[T]) : {
    eachLocation(begin, end, resetUnsafe);
}



/// @section  fillMemory, zeroMemory 

[T]
fillMemory(begin:Pointer[T], end:Pointer[T], value:T) : {
    var ptr = @value;
    eachLocationWithCleanup(begin, end, x => { x <-- ptr^; });
}

[T]
zeroMemory(begin:Pointer[T], end:Pointer[T]) : {
    fillMemory(begin, end, T(0));
}

zeroObject(o) : { zeroMemory(Pointer[UInt8](@o), Pointer[UInt8](@o + 1)); }


/// @section  assignNonoverlappingMemory, moveAssignNonoverlappingMemory 

define assignNonoverlappingMemory;

[T, U when not (T == U and PODType?(T)) and CallDefined?(assign, T, U)]
override assignNonoverlappingMemory(destBegin:Pointer[T], srcBegin:Pointer[U], srcEnd:Pointer[U]) : {
    var srcPtr = srcBegin;
    eachLocation(destBegin, destBegin+(srcEnd-srcBegin), x => {
        x = srcPtr^;
        srcPtr +: 1;
    });
}

define moveAssignNonoverlappingMemory;

[T, U when not (T == U and PODType?(T)) and CallDefined?(assign, T, U)]
override moveAssignNonoverlappingMemory(destBegin:Pointer[T], srcBegin:Pointer[U], srcEnd:Pointer[U]) : {
    var srcPtr = srcBegin;
    eachLocation(destBegin, destBegin+(srcEnd-srcBegin), x => {
        x = move(srcPtr^);
        srcPtr +: 1;
    });
}

[T when not PODType?(T)]
override moveAssignNonoverlappingMemory(destBegin:Pointer[T], srcBegin:Pointer[T], srcEnd:Pointer[T]) : {
    var srcPtr = srcBegin;
    eachLocation(destBegin, destBegin+(srcEnd-srcBegin), x => {
        swap(x, srcPtr^);
        srcPtr +: 1;
    });
}



/// @section  eachLocation, eachLocationBackwards, eachLocationWithCleanup 

[T]
private eachLocation(_begin:Pointer[T], _end:Pointer[T], f) : {
    var begin, end = _begin, _end;
    var ptr = begin;
    while (ptr != end) {
        f(ptr^);
        ptr +: 1;
    }
}

[T]
private eachLocationBackwards(_begin:Pointer[T], _end:Pointer[T], f) : {
    var begin, end = _begin, _end;
    var ptr = end;
    while (ptr != begin) {
        ptr -: 1;
        f(ptr^);
    }
}

[T]
private eachLocationWithCleanup(_begin:Pointer[T], _end:Pointer[T], f) : {
    var begin, end = _begin, _end;
    var ptr = begin;
    try {
        while (ptr != end) {
            f(ptr^);
            ptr +: 1;
        }
    }
    catch (e) {
        destroyMemory(begin, ptr);
        throw e;
    }
}

[T]
private eachLocationBackwardsWithCleanup(_begin:Pointer[T], _end:Pointer[T], f) : {
    var begin, end = _begin, _end;
    var ptr = end;
    try {
        while (ptr != begin) {
            ptr -: 1;
            f(ptr^);
        }
    }
    catch (e) {
        destroyMemory(ptr+1, end);
        throw e;
    }
}
