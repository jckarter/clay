import __operators__;
import core.libc as libc;
import core.errors.backtrace.(printBacktraceToStderr);

private var argc = 0;
private var argv = Pointer[Pointer[Int8]]();
private var commandLineArgs = ArrayRef[CStringRef]();

commandLine() = ref commandLineArgs;

private setArgcArgv(argc_, argv_) {
    argc = argc_;
    argv = argv_;
    var argvRefs = bitcast(Pointer[CStringRef], argv);
    commandLineArgs = CoordinateRange(argvRefs, argvRefs + argc);
}

getArgcArgv() = argc, argv;

private alias runMain(argc_, argv_, f, ..args) : Int {
    setArgcArgv(argc_, argv_);
    try {
        return getExitCode(..f(..args));
    }
    catch (e in ctx) {
        try {
            printUnhandledExceptionToStderr(e);
            libc.fprintf(libc.stderr, "at %s:%d\n", cstring(ctx.file), UInt(ctx.line));
            printBacktraceToStderr(ctx.backtrace);
        } catch (f) {
            libc.fprintf(libc.stderr, "unhandled exception during unhandled exception printing\n");
        }
        return -1;
    }
}

[Main]
__operators__.callMain(#Main, argc_:Int, argv_:Pointer[Pointer[Int8]]) : Int
    = runMain(argc_, argv_, Main);

[Main when CallDefined?(Main, Type(commandLine()))]
__operators__.callMain(#Main, argc_:Int, argv_:Pointer[Pointer[Int8]])  : Int
    = runMain(argc_, argv_, Main, commandLine());

[Main when CallDefined?(Main, ..Type(argc, argv))]
__operators__.callMain(#Main, argc_:Int, argv_:Pointer[Pointer[Int8]])  : Int
    = runMain(argc_, argv_, Main, argc_, argv_);

private define getExitCode;
getExitCode() : Int = 0;
getExitCode(x) : Int = Int(x);
