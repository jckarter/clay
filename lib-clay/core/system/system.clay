import __operators__;
import core.libc as libc;

private var argc = 0;
private var argv = Pointer[Pointer[Int8]]();
private var commandLineArgs = ArrayRef[CStringRef]();

commandLine() = ref commandLineArgs;

private setArgcArgv(argc_, argv_) {
    argc = argc_;
    argv = argv_;
    var argvRefs = bitcast(Pointer[CStringRef], argv);
    commandLineArgs = CoordinateRange(argvRefs, argvRefs + argc);
}

getArgcArgv() = argc, argv;

private alias runMain(argc_, argv_, f, ..args) {
    setArgcArgv(argc_, argv_);
    try {
        return getExitCode(..f(..args));
    }
    catch (e) {
        libc.fprintf(libc.stderr, cstring("unhandled %s exception"), cstring(MemberTypeName(e)));
        return -1;
    }
}

[Main]
overload __operators__.callMain(#Main, argc_:Int, argv_:Pointer[Pointer[Int8]])
    = runMain(argc_, argv_, Main);

[Main when CallDefined?(Main, Type(commandLine()))]
overload __operators__.callMain(#Main, argc_:Int, argv_:Pointer[Pointer[Int8]])
    = runMain(argc_, argv_, Main, commandLine());

[Main when CallDefined?(Main, ..Type(argc, argv))]
overload __operators__.callMain(#Main, argc_:Int, argv_:Pointer[Pointer[Int8]])
    = runMain(argc_, argv_, Main, argc_, argv_);

private define getExitCode;
overload getExitCode() = 0;
overload getExitCode(x) = Int(x);
