

/// @section  SubVariants 

private SubVariants(V) =
    ..filterValues(Variant?, ..VariantMembers(V));



/// @section  VariantNestingPaths 

[V,M when Variant?(V)]
VariantNestingPaths(#V, #M) =
    ..VariantNestingPaths2(V, M, []);

[V,M]
private VariantNestingPaths2(#V, #M, Prefix) {
    alias SubV = Tuple(..SubVariants(V));
    return ..VariantNestingPaths3(SubV, M, Prefix, #0);
}

[V,M when VariantMember?(V,M)]
overload VariantNestingPaths2(#V, #M, Prefix) {
    alias SubV = Tuple(..SubVariants(V));
    return Tuple(..unpack(Prefix), M),
           ..VariantNestingPaths3(SubV, M, Prefix, #0);
}

[i]
private VariantNestingPaths3(Vs, M, Prefix, #i) {
    alias V = staticIndex(Vs, #i);
    alias NewPrefix = Tuple(..unpack(Prefix), V);
    return ..VariantNestingPaths2(V, M, NewPrefix),
           ..VariantNestingPaths3(Vs, M, Prefix, #(i+1));
}

[T,i when i == TupleElementCount(T)]
overload VariantNestingPaths3(Vs:T, M, Prefix, #i) = ;



/// @section  nestedVariantIs? 

[V, T when Variant?(V)]
forceinline nestedVariantIs?(x:V, #T) {
    var ptr = nestedVariantAsPtr(x, T);
    return not null?(ptr);
}



/// @section  nestedVariantAs 

[V, T when Variant?(V)]
forceinline nestedVariantAs(ref x:V, #T) {
    var ptr = nestedVariantAsPtr(x, T);
    assert(not null?(ptr));
    return ref ptr^;
}

[V, T when Variant?(V)]
forceinline overload nestedVariantAs(rvalue x:V, #T) {
    var ptr = nestedVariantAsPtr(x, T);
    assert(not null?(ptr));
    return move(ptr^);
}



/// @section  nestedVariantAsPtr 

[V, Target when Variant?(V)]
nestedVariantAsPtr(x:V, #Target) {
    return unboxAlongPaths(x, Target, ..VariantNestingPaths(V, Target));
}

private forceinline unboxAlongPaths(x, Target, firstPath, ..rest) {
    var ptr = unboxAlong(x, Target, ..unpack(firstPath));
    if (not null?(ptr))
        return ptr;
    return unboxAlongPaths(x, Target, ..rest);
}

forceinline overload unboxAlongPaths(x, Target) = null(Target);

private forceinline unboxAlong(x, Target, first, ..rest) {
    var ptr = variantAsPtr(x, first);
    if (null?(ptr))
        return null(Target);
    return unboxAlong(ptr^, Target, ..rest);
}

[Target]
forceinline overload unboxAlong(x:Target, #Target) {
    return @x;
}
