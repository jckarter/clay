import __operators__;


//
// VariantRepr
//

record VariantRepr[..T] (
    tag : Int,
    data : Union[..T],
);

[V when Variant?(V)]
overload __operators__.variantReprType(#V) = VariantRepr[..VariantMembers(V)];


//
// VariantMember?, VariantMembers
//

[V,M when Variant?(V)]
VariantMember?(#V, #M) =
    VariantMemberIndex(V, M) < VariantMemberCount(V);


//
// construct from value of member type
//

[V,T when Variant?(V) and VariantMember?(V, T)]
alias initializeVariant(#V, x:T) --> returned:V {
    ref repr = variantRepr(returned);
    alias index = Int(VariantMemberIndex(V, T));
    repr.tag <-- index;
    staticIndex(repr.data, #index) <-- x;
}

[V,T when Variant?(V) and VariantMember?(V, T)]
alias overload V(x:T) = initializeVariant(V, x);

[V,T,..AA when Variant?(V) and VariantMember?(V, T) and CallDefined?(T, ..AA)]
alias overload V(#T, ..args:AA) = V(T(..args));

private abortInvalidTag(tag:Int) {
    errorWithPrintfNoThrow("invalid variant, tag = %d", tag);
}


//
//
// copy constructor
//

[V when Variant?(V) and not BitwiseCopiedType?(V)]
overload V(src:V) --> returned:V {
    ref destRepr = variantRepr(returned);
    ref srcRepr = variantRepr(src);
    var tag = srcRepr.tag;
    destRepr.tag = tag;
    ref destData = destRepr.data;
    ref srcData = srcRepr.data;
    alias n = Int(VariantMemberCount(V));
    ..for (i in staticIntegers(#n)) {
        if (tag == unwrapStatic(i)) {
            ref dest = staticIndex(destData, i);
            ref src = staticIndex(srcData, i);
            dest <-- src;
            goto end;
        }
    }
    abortInvalidTag(tag);
    end:
}

[V when Variant?(V) and not (BitwiseMovedType?(V) and NotResetType?(V))]
inline overload V(rvalue src:V) = move(src);



//
// moveUnsafe, resetUnsafe
//

[V when Variant?(V) and not BitwiseMovedType?(V)]
overload moveUnsafe(src:V) --> returned:V {
    ref destRepr = variantRepr(returned);
    ref srcRepr = variantRepr(src);
    var tag = srcRepr.tag;
    destRepr.tag = tag;
    ref destData = destRepr.data;
    ref srcData = srcRepr.data;
    alias n = Int(VariantMemberCount(V));
    ..for (i in staticIntegers(#n)) {
        if (tag == unwrapStatic(i)) {
            ref dest = staticIndex(destData, i);
            ref src = staticIndex(srcData, i);
            dest <-- moveUnsafe(src);
            goto end;
        }
    }
    abortInvalidTag(tag);
    end:
}

[V when Variant?(V) and not NotResetType?(V)]
inline overload resetUnsafe(x:V) {
    ref repr = variantRepr(x);
    repr.tag = 0;
    resetUnsafe(staticIndex(repr.data, #0));
}



//
// assign
//

[V when Variant?(V) and not BitwiseAssignedType?(V)]
overload assign(ref dest:V, ref src:V) {
    ref destRepr = variantRepr(dest);
    ref srcRepr = variantRepr(src);
    var tag = destRepr.tag;
    if (tag != srcRepr.tag) {
        if (@dest == @src)
            return;
        var temp = moveUnsafe(dest);
        try {
            dest <-- src;
        } catch (ex) {
            dest <-- move(temp);
            throw ex;
        }
        return;
    }
    ref destData = destRepr.data;
    ref srcData = srcRepr.data;
    alias n = Int(VariantMemberCount(V));
    ..for (i in staticIntegers(#n)) {
        if (tag == unwrapStatic(i)) {
            ref dest2 = staticIndex(destData, i);
            ref src2 = staticIndex(srcData, i);
            assign(dest2, src2);
            goto end;
        }
    }
    abortInvalidTag(tag);
    end :
}



//
// destroy
//

[V when Variant?(V) and not NotDestroyedType?(V)]
overload destroy(x:V) {
    ref repr = variantRepr(x);
    var tag = repr.tag;
    ref data = repr.data;
    alias n = Int(VariantMemberCount(V));
    ..for (i in staticIntegers(#n)) {
        if (tag == unwrapStatic(i)) {
            ref dest = staticIndex(data, i);
            destroy(dest);
            return;
        }
    }
    abortInvalidTag(tag);
}



//
// equals?
//

[V when Variant?(V)]
overload equals?(a:V, b:V) {
    ref aRepr, bRepr = variantRepr(a), variantRepr(b);
    var tag = aRepr.tag;
    if (tag != bRepr.tag)
        return false;
    ref aData, bData = aRepr.data, bRepr.data;
    alias n = Int(VariantMemberCount(V));
    ..for (i in staticIntegers(#n)) {
        if (tag == unwrapStatic(i))
            return staticIndex(aData, i) == staticIndex(bData, i);
    }
    abortInvalidTag(tag);
    return false;
}



//
// variantIs?
//

[V,T when Variant?(V) and VariantMember?(V, T)]
inline variantIs?(x:V, #T) {
    ref repr = variantRepr(x);
    alias index = Int(VariantMemberIndex(V, T));
    return repr.tag == index;
}



//
// variantAs
//

define variantAs;

[V,T when Variant?(V) and VariantMember?(V, T)]
inline overload variantAs(ref x:V, #T) {
    ref repr = variantRepr(x);
    alias index = Int(VariantMemberIndex(V, T));
    assert(repr.tag == index, "invalid cast");
    return ref staticIndex(repr.data, #index);
}

[V,T when Variant?(V) and VariantMember?(V, T)]
inline overload variantAs(rvalue x:V, #T) {
    return move(variantAs(x, T));
}



//
// variantAsPtr - test and unbox in one operation
//

[V,T when Variant?(V) and VariantMember?(V,T)]
inline variantAsPtr(x:V, #T) {
    ref repr = variantRepr(x);
    alias index = Int(VariantMemberIndex(V, T));
    if (repr.tag == index)
        return @staticIndex(repr.data, #index);
    else
        return null(T);
}



//
// variantTag
//

[V when Variant?(V)]
inline variantTag(x:V) = variantRepr(x).tag;


//
// dispatch operators
//

[V when Variant?(V)]
inline overload __operators__.DispatchTagCount(#V) =
    countValues(..VariantMembers(V));

[V when Variant?(V)]
inline overload __operators__.dispatchTag(x:V) = variantRepr(x).tag;

[V,i when Variant?(V)]
inline overload __operators__.dispatchIndex(x:V, #i) =
    ref staticIndex(variantRepr(x).data, #i);

[V]
inline overload __operators__.invalidDispatch(x:V) {
    errorWithPrintfNoThrow(
        stringLiteralConcat("invalid ", StaticName(V), ", tag = %d"),
        __operators__.dispatchTag(x));
}


//
// variant matching
//

private define matchValue;
[T]
inline overload matchValue(forward x:T, forward f, forward ..fs)
    = forward ..matchValue(x, ..fs);
[T, F when CallDefined?(call, F, T)]
inline overload matchValue(forward x:T, forward f:F, forward ..fs)
    = forward ..f(x);

inline match(forward v, forward ..fs) = forward ..matchValue(*v, ..fs);


//
// VariantRef tagged pointer
//

[V when Variant?(V)]
record VariantRef[V] = tag:Int, data:Pointer[Union[..VariantMembers(V)]];

[V]
overload VariantRef[V]();

[V]
inline overload VariantRef[V](ref v:V) {
    ref repr = variantRepr(v);
    return VariantRef[V](repr.tag, @repr.data);
}

[V]
inline overload VariantRef(ref v:V) = VariantRef[V](v);

[V, T when VariantMember?(V, T)]
inline overload VariantRef[V](ref v:T) {
    alias DataPointer = Pointer[Union[..VariantMembers(V)]];
    return VariantRef[V](Int(VariantMemberIndex(V, T)), DataPointer(@v));
}

[V]
inline overload __operators__.DispatchTagCount(#VariantRef[V]) =
    __operators__.DispatchTagCount(V);
[V]
inline overload __operators__.dispatchTag(vr:VariantRef[V]) = vr.tag;
[V, i]
inline overload __operators__.dispatchIndex(vr:VariantRef[V], #i) =
    ref staticIndex(vr.data^, #i);


