

public import __operators__.(
    destroy,
    copy,
    move,
    assign,
    updateAssign,
    prefixUpdateAssign,

    case?,

    prefixOperator,
    infixOperator,

    dereference,
    call,
    fieldRef,
    staticIndex,
    index,

    fieldRefAssign,
    fieldRefUpdateAssign,
    staticIndexAssign,
    staticIndexUpdateAssign,
    indexAssign,
    indexUpdateAssign,

    iterator,

    nextValue,
    hasValue?,
    getValue,

    ifExpression,
    asExpression,

    packMultiValuedFreeVar,
    packMultiValuedFreeVarByRef,
    unpackMultiValuedFreeVar,
    unpackMultiValuedFreeVarAndDereference,
);


define inc(ref ..a) :;
define dec(ref ..a) :;

[A]
define moveUnsafe(a:A) : A;
define resetUnsafe(a) :;



/// @section  uninitialized stack allocation 

[T] uninitializedUnsafe(#T) --> x:T {}


/// @section  LValue?, RValue? 

define LValue?;
alias override LValue?(ref a) : Bool = true;
alias override LValue?(rvalue a) : Bool = false;

alias RValue?(x) : Bool = not LValue?(x);



/// @section  defaults 

define initialize;
[T] define ImplicitlyCopyable?(#T) : Bool;

override ImplicitlyCopyable?(T) : Bool = true;

[T]
forceinline override initialize(a:T) : {
    a <-- T();
}

[T when CallDefined?(T, T) and ImplicitlyCopyable?(T)]
forceinline override copy(a:T) : T = T(a);

[T when CallDefined?(moveUnsafe, T) and CallDefined?(resetUnsafe, T)]
forceinline override move(src:T) --> returned:T {
    returned <-- moveUnsafe(src);
    resetUnsafe(src);
}


Copyable?(T) = CallDefined?(copy, T);
Movable?(T)  = CallDefined?(move, T);


[T]
forceinline override assign(ref dest:T, rvalue src:T) : {
    swap(dest, src);
}

[T when
    not BitwiseAssignedType?(T)
    and CallDefined?(copy, T)
    and CallDefined?(move, T)
    and not CopyDoesNotThrowType?(T)]
forceinline override assign(ref dest:T, ref src:T) : {
    var tmp = moveUnsafe(dest);
    onerror dest <-- move(tmp);
    dest <-- copy(src);
}

[T when
    not BitwiseAssignedType?(T)
    and CallDefined?(copy, T)
    and CallDefined?(move, T)
    and CopyDoesNotThrowType?(T)]
forceinline override assign(ref dest:T, ref src:T) : {
    destroy(dest);
    dest <-- copy(src);
}

[T when CallDefined?(T) and InitializeDoesNotThrowType?(T)]
forceinline override resetUnsafe(src:T) { src <-- T(); }

[F]
forceinline override updateAssign(#F, ref dest, forward ..src) : {
    dest = infixOperator(dest,F, ..src);
}

[F]
forceinline override prefixUpdateAssign(#F, ref dest, forward ..src) : {
    dest = prefixOperator(F, dest, ..src);
}

forceinline override (!=)(a, b) : Bool = not (==)(a, b);

define ordered?;
forceinline override ordered?(a, b) : Bool = (<=)(a, b) or (<=)(b, a);

forceinline override (<=)(a, b) : Bool = not (<)(b, a);

forceinline override (>)(a, b) : Bool = (<)(b, a);

forceinline override (>=)(a, b) : Bool = not (<)(a, b);

forceinline override (&)(a, b, c, ..rest) = (&)((&)(a, b), c, ..rest);

forceinline override (|)(a, b, c, ..rest) = (|)((|)(a, b), c, ..rest);

forceinline override (~)(a, b, c, ..rest) = (~)((~)(a, b), c, ..rest);

[FIELD]
forceinline override fieldRefAssign(dest, #FIELD, forward src) : {
    assign(fieldRef(dest, #FIELD), src);
}

[F, FIELD]
forceinline override fieldRefUpdateAssign(#F, dest, #FIELD, forward ..src) : {
    updateAssign(#F, fieldRef(dest, #FIELD), ..src);
}

[F, FIELD, T when RValue?(fieldRef(typeToLValue(T), #FIELD))]
forceinline override fieldRefUpdateAssign(#F, dest:T, #FIELD, forward src) : {
    fieldRefAssign(dest, #FIELD, F(fieldRef(dest, #FIELD), src));
}

[i]
forceinline override staticIndexAssign(dest, #i, forward src) : {
    assign(staticIndex(dest, #i), src);
}

[F, i]
forceinline override staticIndexUpdateAssign(#F, dest, #i, forward ..src) : {
    updateAssign(#F, staticIndex(dest, #i), ..src);
}

[F, i, T when RValue?(staticIndex(typeToLValue(T), #i))]
forceinline override staticIndexUpdateAssign(#F, dest:T, #i, forward src) : {
    staticIndexAssign(dest, #i, F(staticIndex(dest, #i), src));
}

[..T when countValues(..T) >= 2]
forceinline override indexAssign(dest, forward ..indicesAndSrc:T) : {
    assign(
        index(dest, ..withoutNthValue(
            #(countValues(..T)-1),
            ..indicesAndSrc
        )),
        lastValue(..indicesAndSrc),
    );
}

[F, ..A when countValues(..A) >= 2]
forceinline override indexUpdateAssign(#F, dest, forward ..indicesAndSrc:A) : {
    updateAssign(
        #F,
        index(dest, ..takeValues(
            #(countIndices(..A)),
            ..indicesAndSrc
        )),
        ..dropValues(#countIndices(..A), ..indicesAndSrc),
    );
}

[F, T, ..A when
    (countValues(..A) >= 2) and
    RValue?(
        index(
            typeToLValue(T),
            ..mapValues(
                typeToLValue,
                ..takeValues(#(countIndices(..A)), ..A)
            )
        )
    )
]
forceinline override indexUpdateAssign(#F, dest:T, forward ..indicesAndSrc:A) : {
    indexAssign(
        dest,
        ..takeValues(#(countIndices(..A)), ..indicesAndSrc),
        infixOperator(
            index(
                dest,
                ..takeValues(#(countIndices(..A)), ..indicesAndSrc)
            ),
            F, ..dropValues(#countIndices(..A), ..indicesAndSrc)
        )
    );
}


/// @section  first occurence of non-numeric 

private countIndices(..A) = _countIndices(#-1, ..A);
private define _countIndices;
[n] forceinline override _countIndices(#n, a, ..A) 
    = if(not Numeric?(a)) n else _countIndices(#(n+1), ..A);
[n] forceinline override _countIndices(#n) = n;


/// @section   operators  

private define staticEquals?(a, b) : Bool;
[A, B]
forceinline override staticEquals?(a:Static[A], b:Static[B]) : Bool = false;
[A]
forceinline override staticEquals?(a:Static[A], b:Static[A]) : Bool = true;

BinaryOpDefined?(OP,T,U) : Bool = Symbol?(OP) and not Variant?(OP) and not Record?(OP) 
    and CallDefined?(OP,T,U) and staticEquals?(CallOutputTypes(OP,T,U),T); 
CompareOpDefined?(OP,T,U) : Bool = Symbol?(OP) and not Variant?(OP) and not Record?(OP) 
    and CallDefined?(OP,T,U) and staticEquals?(CallOutputTypes(OP,T,U),Bool); 

[OP] forceinline override prefixOperator(#OP, forward ..xs)
    = forward OP(..prefixOperator(..xs));
[OP] forceinline override prefixOperator(#OP, forward x) 
    = forward ..OP(x);

alias LEFT = 0;
alias RIGHT = 1;
alias VARIADIC = 2;
alias BOOLEAN = 3;

// two or three arguments (x, x) or (comparator, x, x)
define (==)(..p): Bool;
define (!=)(..p): Bool;
define (>=)(..p): Bool;
define (<=)(..p): Bool;
define (>)(..p): Bool;
define (<)(..p): Bool;

define (++)(a, b, ..cs);
define (~);
define (&)(a, b, ..cs);
define (|)(a, b, ..cs);
define (<<)(a, b);
define (>>)(a, b);
define (+)(a, ..b);
define (-)(a, ..b);
define (%)(a, b, ..cs);
define (\)(a, b, ..cs);
define (/)(a, b, ..cs);
define (*)(a, b, ..cs);

alias equals? = (==);
alias notEquals? = (!=);
alias lesser? = (<);
alias lesserEquals? = (<=);
alias greater? = (>);
alias greaterEquals? = (>=);

alias add = (+);
alias subtract = (-);
alias multiply = (*);
alias divide = (/);
alias quotient = (\);
alias remainder = (%);
alias cat = (++);

alias bitshl = (<<);
alias bitshr = (>>);
alias bitand = (&);
alias bitor = (|);
alias bitxor = (~);
alias bitnot = (~);


define operatorPrecedence(T) : Int;
define operatorAssociativity(T) : Int;


[T] override operatorPrecedence(#T) : Int = 0;
[T] override operatorAssociativity(#T) : Int = LEFT;

override operatorPrecedence(#(*)) : Int   = 1000;
override operatorPrecedence(#(/)) : Int   = 1000;
override operatorPrecedence(#(\)) : Int   = 1000;
override operatorPrecedence(#(%)) : Int   = 1000;

override operatorPrecedence(#(-)) : Int   = 2000;
override operatorPrecedence(#(+)) : Int   = 2000;

override operatorPrecedence(#(<<)) : Int  = 4000;
override operatorPrecedence(#(>>)) : Int  = 4000;

override operatorPrecedence(#(&)) : Int   = 5000;
override operatorPrecedence(#(~)) : Int   = 5000;
override operatorPrecedence(#(|)) : Int   = 5000;

override operatorPrecedence(#(++)) : Int  = 50000;

override operatorPrecedence(#(==)) : Int  = 100000;
override operatorPrecedence(#(!=)) : Int  = 100000;
override operatorPrecedence(#(<)) : Int   = 100000;
override operatorPrecedence(#(>)) : Int   = 100000;
override operatorPrecedence(#(<=)) : Int  = 100000;
override operatorPrecedence(#(>=)) : Int  = 100000;

//
// Default operatorAssociativity covers the standard 
// operators:  *, /, \, %, -, +, <<, >>, &, ~, |, ++
//

override operatorAssociativity(#(==)) : Int   = BOOLEAN;
override operatorAssociativity(#(!=)) : Int   = BOOLEAN;
override operatorAssociativity(#(<)) : Int    = BOOLEAN;
override operatorAssociativity(#(>)) : Int    = BOOLEAN;
override operatorAssociativity(#(<=)) : Int   = BOOLEAN;
override operatorAssociativity(#(>=)) : Int   = BOOLEAN;

define Operator?(..x) : Bool;
forceinline override Operator?(..x) : Bool = false;
[OP] forceinline override Operator?(#OP) : Bool 
    = Symbol?(OP) and operatorPrecedence(OP) > 0;

define BoolAssoc?(..x) : Bool;
define LeftAssoc?(..x) : Bool;
define RightAssoc?(..x) : Bool;

forceinline override BoolAssoc?(..x) : Bool = false;
forceinline override LeftAssoc?(..x) : Bool = false;
forceinline override RightAssoc?(..x) : Bool = false;

[OP] forceinline override BoolAssoc?(#OP) : Bool = integerEquals?(operatorAssociativity(OP),BOOLEAN);
[OP1,OP2] forceinline override BoolAssoc?(#OP1,#OP2) : Bool = BoolAssoc?(OP1) and BoolAssoc?(OP2);

[OP] forceinline override LeftAssoc?(#OP) : Bool = integerEquals?(operatorAssociativity(OP),LEFT);
[OP1,OP2] forceinline override LeftAssoc?(#OP1,#OP2) : Bool = LeftAssoc?(OP1) and LeftAssoc?(OP2);

[OP] forceinline override RightAssoc?(#OP) : Bool = integerEquals?(operatorAssociativity(OP),RIGHT);
[OP1,OP2] forceinline override RightAssoc?(#OP1,#OP2) : Bool = RightAssoc?(OP1) and RightAssoc?(OP2);

[OP1,OP2] forceinline GreaterPrec?(#OP1,#OP2) : Bool 
    = integerLesser?(operatorPrecedence(OP1),operatorPrecedence(OP2));
[OP1,OP2] forceinline LowerPrec?(#OP1,#OP2) : Bool = GreaterPrec?(OP2,OP1);


private define infixToPolish;

forceinline override infixToPolish(#0, #0,  ..y) = ;

[s, v, p, T when s>0 and Operator?(T)]
forceinline override infixToPolish(#0, #s, #v, forward ..y, #p, #T) 
    = forward ..infixToPolish(#0, #(s-1), #1, ..y), T, #(p+v);

[n, s, v when n>0]
forceinline override infixToPolish(#n, #s, #v,forward x, forward ..y) 
    = forward ..infixToPolish(#(n-1), #s, #(v+1), ..y), x;

[n, s, v, OP when n>0 and Operator?(OP)]
forceinline override infixToPolish(#n, #s, #v, #OP, forward ..y) 
    = forward ..infixToPolish(#(n-1), #(s+1), #0, ..y, #v, #OP);

[n, s, v, OP, p, T when n>0 and s>0 
    and ((LeftAssoc?(OP) and LowerPrec?(OP, T)) 
        or (RightAssoc?(OP) and not GreaterPrec?(OP, T)) or BoolAssoc?(OP))] 
forceinline override infixToPolish(#n, #s, #v, #OP, forward ..y, #p, #T) 
    = forward  ..infixToPolish(#n, #(s-1), #1, #OP, ..y), T,#(p+v);


private define evalPolish;
forceinline override evalPolish() = ;

forceinline override evalPolish(x, ..y) = x, ..evalPolish(..y);

[OP, v when Operator?(OP)]
forceinline override evalPolish(#OP, #v, ..x) 
    = OP(..takeValues(#v, ..evalPolish(..x))), ..dropValues(#v, ..evalPolish(..x));

[OP, v when BoolAssoc?(OP)]
forceinline override evalPolish(#OP, #v, ..x) = OP, ..evalPolish(..x);

private define evalBool;
forceinline override evalBool(..x) = ..x;

[OP, OP2 when BoolAssoc?(OP, OP2)]
forceinline override evalBool(#OP, y, #OP2, z, ..x) : Bool 
    = OP(y, z) and evalBool(#OP2, z, ..x);

[OP when BoolAssoc?(OP)]
forceinline override evalBool(#OP, x, y) : Bool = OP(x, y);

[..T]
forceinline override infixOperator(forward ..args:T) 
    = forward ..evalBool(..evalPolish(
        ..infixToPolish(#countValues(..T), #0, #0, ..reverseValues(..args))));

[OP]
forceinline override infixOperator(forward a, #OP, forward b) 
    = forward ..OP(a,b);


/// @section  swap 

define swap(a, b) :;

forceinline override swap(a, b) : {
    var temp = moveUnsafe(a);
    a <-- moveUnsafe(b);
    b <-- move(temp);
}

[T when BitwiseMovedType?(T)]
forceinline override swap(a:T, b:T) : {
    alias TBytes = Array[UInt8, Int(TypeSize(T))];
    var temp = bitcast(TBytes, a);
    bitcast(TBytes, a) <-- bitcast(TBytes, b);
    bitcast(TBytes, b) <-- temp;
}


/// @section  min, max 

[T]
define min(a:T, b:T) : T;
[T]
define max(a:T, b:T) : T;

[T]
forceinline override min(a:T, b:T) --> c:T {
    if (a <= b)
        c <-- a;
    else
        c <-- b;
}

[T]
forceinline override min(ref a:T, ref b:T)  : ByRef[T]  {
    if (a <= b)
        return ref a;
    else
        return ref b;
}

[T]
forceinline override max(a:T, b:T) --> c:T {
    if (a > b)
        c <-- a;
    else
        c <-- b;
}

[T]
forceinline override max(ref a:T, ref b:T)  : ByRef[T] {
    if (a > b)
        return ref a;
    else
        return ref b;
}



/// @section  ifExpression 

[T]
alias override ifExpression(condition, consequent:T, alternate:T) --> ret:T {
    if (condition)
        ret <-- consequent;
    else
        ret <-- alternate;
}

[T]
alias override ifExpression(condition, ref consequent:T, ref alternate:T) : ByRef[T] {
    if (condition)
        return ref consequent;
    else
        return ref alternate;
}

alias override ifExpression(#true, consequent, alternate) = forward consequent;
alias override ifExpression(#false, consequent, alternate) = forward alternate;


[consequent, alternate when StringLiteral?(consequent) and StringLiteral?(alternate)]
alias override ifExpression(condition, #consequent, #alternate) --> ret:StringLiteralRef {
    if (condition)
        ret <-- StringLiteralRef(consequent);
    else
        ret <-- StringLiteralRef(alternate);
}

/// @section  asExpression 

[T, U]
forceinline override asExpression(value:T, #U) : U = U(value);

[T, U when Numeric?(T,U)]
forceinline override asExpression(value:T, #U) : U = numericConvert(U, value);

[T]
forceinline override asExpression(value:T, #T) : T = ref value;

[T]
forceinline override asExpression(rvalue value:T, #T) : T = value;


/// @section  bitnand, bitandc, bitblend 

forceinline bitnand(a, b) = (~)((&)(a, b));
forceinline bitandc(a, b) = (&)(a, (~)(b));
forceinline bitblend(mask, ones, zeros)
    = (|)((&)(ones, mask), bitandc(zeros, mask));



/// @section  bitrol, bitror 

[I, J when Integer?(I) and Integer?(J)]
bitrol(x:I, n:J) = (|)(wrapBitshl(x, n), (>>)(x, TypeSize(I)*8 - n));

[I, J when Integer?(I) and Integer?(J)]
bitror(x:I, n:J) = (|)((>>)(x, n), wrapBitshl(x, TypeSize(I)*8 - n));



/// @section  PrimitiveType? 

[T]
define PrimitiveType?(#T) : Bool;
override PrimitiveType?(X) : Bool = false;
override PrimitiveType?(#Bool) : Bool = true;
override PrimitiveType?(#Int8) : Bool = true;
override PrimitiveType?(#Int16) : Bool = true;
override PrimitiveType?(#Int32) : Bool = true;
override PrimitiveType?(#Int64) : Bool = true;
override PrimitiveType?(#Int128) : Bool = true;
override PrimitiveType?(#UInt8) : Bool = true;
override PrimitiveType?(#UInt16) : Bool = true;
override PrimitiveType?(#UInt32) : Bool = true;
override PrimitiveType?(#UInt64) : Bool = true;
override PrimitiveType?(#UInt128) : Bool = true;
override PrimitiveType?(#Float32) : Bool = true;
override PrimitiveType?(#Float64) : Bool = true;
override PrimitiveType?(#Float80) : Bool = true;
override PrimitiveType?(#Imag32) : Bool = true;
override PrimitiveType?(#Imag64) : Bool = true;
override PrimitiveType?(#Imag80) : Bool = true;
override PrimitiveType?(#Complex32) : Bool = true;
override PrimitiveType?(#Complex64) : Bool = true;
override PrimitiveType?(#Complex80) : Bool = true;
[T] override PrimitiveType?(#Pointer[T]) : Bool = true;
[I, O] override PrimitiveType?(#CodePointer[I, O]) : Bool = true;
[C, V, I, O] override PrimitiveType?(#ExternalCodePointer[C, V, I, O]) : Bool = true;
[T] override PrimitiveType?(#Static[T]) : Bool = true;
[T,n] override PrimitiveType?(#Vec[T,n]) : Bool = true;
[E when Enum?(E)] override PrimitiveType?(#E) : Bool = true;
[..T] override PrimitiveType?(#Union[..T]) : Bool = true;
[] override PrimitiveType?(#Union[]) : Bool = true;
override PrimitiveType?(#Tuple[]) : Bool = true;



/// @section  PrimitiveCompoundType?, PrimitiveCompoundMemberTypes 

[T]
define PrimitiveCompoundType?(#T) : Bool;
override PrimitiveCompoundType?(X) : Bool = false;

[T,n] override PrimitiveCompoundType?(#Array[T,n]) : Bool = true;
[..T] override PrimitiveCompoundType?(#Tuple[..T]) : Bool = true;
[R when RegularRecord?(R)] override PrimitiveCompoundType?(#R) : Bool = true;
[V when Variant?(V)] override PrimitiveCompoundType?(#V) : Bool = true;

define PrimitiveCompoundMemberTypes;
[T,n] override PrimitiveCompoundMemberTypes(#Array[T,n]) = T;
[..T] override PrimitiveCompoundMemberTypes(#Tuple[..T]) = ..T;
[R when RegularRecord?(R)]
override PrimitiveCompoundMemberTypes(#R) = ..RecordFieldTypes(R);
[V when Variant?(V)]
override PrimitiveCompoundMemberTypes(#V) = ..VariantMembers(V);


/// @section  PODType? 

[T]
define PODType?(#T) : Bool;
override PODType?(X) : Bool = false;

[T when PrimitiveType?(T)]
override PODType?(#T) : Bool = true;

[T when PrimitiveCompoundType?(T)]
override PODType?(#T) : Bool = allValues?(PODType?, ..PrimitiveCompoundMemberTypes(T));



/// @section  Finer-grained POD-related properties 

[T]
define BitwiseCopiedType?(#T) : Bool;
[T]
define BitwiseMovedType?(#T) : Bool;
[T]
define DestroyDoesNothingType?(#T) : Bool;
[T]
define ResetDoesNothingType?(#T) : Bool;
[T]
define InitializeDoesNotThrowType?(#T) : Bool;
[T]
define CopyDoesNotThrowType?(#T) : Bool;
[T]
define AssignDoesNotThrowType?(#T) : Bool;
[T]
define BitwiseAssignedType?(#T) : Bool;
[T]
define BitwiseMoveAssignedType?(#T) : Bool;

override BitwiseCopiedType?(T) = PODType?(T);
override BitwiseMovedType?(T) = PODType?(T);
override DestroyDoesNothingType?(T) = PODType?(T);
override ResetDoesNothingType?(T) = PODType?(T);
override InitializeDoesNotThrowType?(T) = PODType?(T);
override CopyDoesNotThrowType?(T) = PODType?(T);
override AssignDoesNotThrowType?(T) = PODType?(T);
override BitwiseAssignedType?(T) = BitwiseCopiedType?(T) and DestroyDoesNothingType?(T);
override BitwiseMoveAssignedType?(T) = BitwiseMovedType?(T) and DestroyDoesNothingType?(T);

[T when PrimitiveCompoundType?(T)]
override BitwiseCopiedType?(#T) : Bool
    = allValues?(BitwiseCopiedType?, ..PrimitiveCompoundMemberTypes(T));
[T when PrimitiveCompoundType?(T)]
override BitwiseMovedType?(#T) : Bool
    = allValues?(BitwiseMovedType?, ..PrimitiveCompoundMemberTypes(T));
[T when PrimitiveCompoundType?(T)]
override DestroyDoesNothingType?(#T) : Bool
    = allValues?(DestroyDoesNothingType?, ..PrimitiveCompoundMemberTypes(T));
[T when PrimitiveCompoundType?(T)]
override ResetDoesNothingType?(#T) : Bool
    = allValues?(ResetDoesNothingType?, ..PrimitiveCompoundMemberTypes(T));
[T when PrimitiveCompoundType?(T)]
override InitializeDoesNotThrowType?(#T) : Bool
    = allValues?(InitializeDoesNotThrowType?, ..PrimitiveCompoundMemberTypes(T));
[T when PrimitiveCompoundType?(T)]
override CopyDoesNotThrowType?(#T) : Bool
    = allValues?(CopyDoesNotThrowType?, ..PrimitiveCompoundMemberTypes(T));
[T when PrimitiveCompoundType?(T)]
override AssignDoesNotThrowType?(#T) : Bool
    = allValues?(AssignDoesNotThrowType?, ..PrimitiveCompoundMemberTypes(T));
[T when PrimitiveCompoundType?(T)]
override BitwiseAssignedType?(#T) : Bool
    = allValues?(BitwiseAssignedType?, ..PrimitiveCompoundMemberTypes(T));
[T when PrimitiveCompoundType?(T)]
override BitwiseMoveAssignedType?(#T) : Bool
    = allValues?(BitwiseMoveAssignedType?, ..PrimitiveCompoundMemberTypes(T));



/// @section  identity test 

define is?;

forceinline override is?(x, y) : Bool = @x == @y;

forceinline isNot?(x, y) : Bool = not is?(x, y);


/// @section  case? 

forceinline override case?(x, forward ..ys) : Bool {
    ..for (y in ..ys)
        if ((==)(x, y))
            return true;
    return false;
}


/// @section  CallDefined?, CallOutputTypes 

define CallDefined?;
[F]
alias override CallDefined?(f:F, ..In) : Bool = StaticCallDefined?(call, F, ..In);
[f]
alias override CallDefined?(#f, ..In) : Bool = Symbol?(f) and StaticCallDefined?(f, ..In);

define CallOutputTypes;
[F]
alias override CallOutputTypes(f:F, ..In) = ..StaticCallOutputTypes(call, F, ..In);
[f]
alias override CallOutputTypes(#f, ..In) = ..StaticCallOutputTypes(f, ..In);


/// @section  Mono?, MonoInputTypes, MonoOutputTypes 

define MonoInputTypes;
[f when StaticMono?(f)]
alias override MonoInputTypes(#f) = ..StaticMonoInputTypes(f);
[F when LambdaRecord?(F) and LambdaMono?(F)]
alias override MonoInputTypes(f:F) = ..LambdaMonoInputTypes(F);

[F]
alias Mono?(f:F) : Bool = CallDefined?(MonoInputTypes, F);
forceinline MonoType?(F) : Bool = Mono?(typeToRValue(F));

[F when MonoType?(F)]
alias MonoOutputTypes(f:F) = ..CallOutputTypes(f, ..MonoInputTypes(f));

public define Monad?;
override Monad?(T) : Bool = false;


/// @section  operator functions for closure conversion 

override packMultiValuedFreeVar(..x) = [..x];

override packMultiValuedFreeVarByRef(..x) =
    Tuple(..mapValues(addressOf, ..x));

override unpackMultiValuedFreeVar(x) = forward ..unpackRef(x);

override unpackMultiValuedFreeVarAndDereference(x) =
    forward ..mapValues(dereference, ..unpack(x));
