

public import __operators__.(
    destroy,
    copy,
    move,
    assign,
    updateAssign,
    prefixUpdateAssign,

    case?,

    prefixOperator,
    infixOperator,

    dereference,
    call,
    fieldRef,
    staticIndex,
    index,

    fieldRefAssign,
    fieldRefUpdateAssign,
    staticIndexAssign,
    staticIndexUpdateAssign,
    indexAssign,
    indexUpdateAssign,

    iterator,

    nextValue,
    hasValue?,
    getValue,

    ifExpression,
);


define inc(ref ..a) :;
define dec(ref ..a) :;

[A]
define moveUnsafe(a:A) : A;
define resetUnsafe(a) :;



/// @section  uninitialized stack allocation 

[T] uninitializedUnsafe(#T) --> x:T {}


/// @section  coordinate type predicates 

Coordinate?(T) : Bool = CallDefined?(dereference, T);
CoordinateTargetType(T) = ..Type(..dereference(typeToLValue(T)));

RandomAccessCoordinate?(T) : Bool =
    Coordinate?(T) and
    CallDefined?((+), T, Int) and
    CallDefined?((-), T, Int) and
    CallDefined?((-), T, T);

LValueCoordinate?(T) =
    Coordinate?(T) and
    LValue?(dereference(typeToLValue(T)));

// true if adjacent coordinates point to adjacent locations in memory
ContiguousCoordinate?(T) : Bool = false;



/// @section  iterator type predicates 

Iterator?(T): Bool = CallDefined?(nextValue, T);
IteratorTargetType(T) = ..Type(..getValue(nextValue(typeToLValue(T))));


/// @section  Default two-arg hasValue? 

alias overload hasValue?(iter, coord) : Bool = hasValue?(coord);


/// @section  pointer as iterator value 

[T] forceinline overload hasValue?(p:Pointer[T]) : Bool = not null?(p);
[T] forceinline overload getValue(p:Pointer[T]) = ref p^;


/// @section  reverse iteration 

[S when Sequence?(S)]
define reverseIterator(s:S);



/// @section  sequence protocol 

// defined for collections
define size(s): SizeT;


[S when Sequence?(S)]
define begin(s:S);

[S when Sequence?(S)]
define end(s:S);


[S when Sequence?(S)]
define front(s:S);

[S when Sequence?(S)]
define back(s:S);


[S] // when Sequence?(S)
define push(s:S, ..vs) :;

[S, Vs when Sequence?(S) and Sequence?(Vs)]
define pushAll(s:S, vs:Vs) :;

[S when Sequence?(S)]
define pop(s:S);

// defined for collections
define clear(s) :;

[S when Sequence?(S)]
define insert(s:S, coord, v) :;

[S, Vs when Sequence?(S) and Sequence?(Vs)]
define insertAll(s:S, coord, vs:Vs) :;

// defined for collections
define remove;

[S, I when Sequence?(S) and Integer?(I)]
define reserve(s:S, n:I) :;

[S, I when Sequence?(S) and Integer?(I)]
define resize(s:S, n:I) :;

[S, I when Sequence?(S) and Integer?(I)]
define resizeUnsafe(s:S, n:I) :;


[S when Sequence?(S)]
define pushFront(s:S, v) :;

[S when Sequence?(S)]
define popFront(s:S);



// default implementation using `push`
overload pushAll(s, vs) {
    for (v in vs) {
        push(s, v);
    }
}

// default implementation using `insert`
overload insertAll(s, coord, vs) {
    var insertPoint = coord;
    for (v in vs) {
        insert(v, insertPoint, vs);
        insertPoint +: 1;
    }
}


// defined for statically sized sequences like Array[T,n]
[S]
define StaticSize(#S);


overload push(s) {}

overload push(s, forward v1, forward v2, forward ..vs) {
    ..for (v in v1, v2, ..vs) {
        push(s, v);
    }
}



/// @section  sequence type predicates 

Sequence?(T): Bool = CallDefined?(iterator, T);
SequenceElementType(T) = ..Type(..getValue(nextValue(iterator(typeToLValue(T)))));
SizedSequence?(T): Bool = Sequence?(T) and CallDefined?(size, T);
StaticSizedSequence?(T) : Bool = Sequence?(T) and CallDefined?(StaticSize, Static[T]);
RandomAccessSequence?(T) : Bool  = Sequence?(T) and CallDefined?(index, T, Int);
LValueSequence?(T) : Bool = Sequence?(T) and LValue?(getValue(nextValue(iterator(typeToLValue(T)))));

CoordinateSequence?(T) : Bool = Sequence?(T) and CallDefined?(begin, T) and CallDefined?(end, T);
SequenceCoordinateType(T) = Type(begin(typeToLValue(T)));

SequenceIteratorType(T) = Type(iterator(typeToLValue(T)));

// true if sequence elements are stored contiguously in memory
ContiguousSequence?(T) : Bool = false;

// true if copying the sequence is efficient
LightweightSequence?(T) : Bool = false;

// true for sequences which have value semantics.
SequenceContainer?(T) : Bool = false;

// true if sequence is not single-valued (0 valued sequences are included).
MultiValuedSequence?(T) : Bool =
    Sequence?(T) and multiValued?(..Type(..getValue(nextValue(iterator(typeToLValue(T))))));

private multiValued?(..x) : Bool = true;
overload multiValued?(x) : Bool = false;



/// @section  mapping protocol 

// 'index' and 'size' are available for mappings
// 'remove' is available

// get pointer to element, null if not available
define lookup(map, key);
define put(map, key, value) :;
// iterate over all items
define items(map);

forceinline contains?(map, key) : Bool = not null?(lookup(map, key));



/// @section  LValue?, RValue? 

define LValue?;
alias overload LValue?(ref a) : Bool = true;
alias overload LValue?(rvalue a) : Bool = false;

alias RValue?(x) : Bool = not LValue?(x);



/// @section  defaults 

forceinline initialize(a) : {
    a <-- Type(a)();
}

[T]
forceinline overload copy(a:T) : T = T(a);

[T]
forceinline overload move(src:T) --> returned:T {
    returned <-- moveUnsafe(src);
    resetUnsafe(src);
}

[T]
forceinline overload assign(ref dest:T, rvalue src:T) : {
    swap(dest, src);
}

[F]
forceinline overload updateAssign(#F, ref dest, forward ..src) : {
    dest = infixOperator(dest,F, ..src);
}

[F]
forceinline overload prefixUpdateAssign(#F, ref dest, forward ..src) : {
    dest = prefixOperator(F, dest, ..src);
}

forceinline overload (!=)(a, b) : Bool = not (==)(a, b);

forceinline ordered?(a, b) : Bool = (<=)(a, b) or (<=)(b, a);

forceinline overload (<=)(a, b) : Bool = not (<)(b, a);

forceinline overload (>)(a, b) : Bool = (<)(b, a);

forceinline overload (>=)(a, b) : Bool = not (<)(a, b);

forceinline overload (&)(a, b, c, ..rest) = (&)((&)(a, b), c, ..rest);

forceinline overload (|)(a, b, c, ..rest) = (|)((|)(a, b), c, ..rest);

forceinline overload (~)(a, b, c, ..rest) = (~)((~)(a, b), c, ..rest);

[FIELD]
forceinline overload fieldRefAssign(dest, #FIELD, forward src) : {
    assign(fieldRef(dest, #FIELD), src);
}

[F, FIELD]
forceinline overload fieldRefUpdateAssign(#F, dest, #FIELD, forward ..src) : {
    updateAssign(#F, fieldRef(dest, #FIELD), ..src);
}

[F, FIELD, T when RValue?(fieldRef(typeToLValue(T), #FIELD))]
forceinline overload fieldRefUpdateAssign(#F, dest:T, #FIELD, forward src) : {
    fieldRefAssign(dest, #FIELD, F(fieldRef(dest, #FIELD), src));
}

[i]
forceinline overload staticIndexAssign(dest, #i, forward src) : {
    assign(staticIndex(dest, #i), src);
}

[F, i]
forceinline overload staticIndexUpdateAssign(#F, dest, #i, forward ..src) : {
    updateAssign(#F, staticIndex(dest, #i), ..src);
}

[F, i, T when RValue?(staticIndex(typeToLValue(T), #i))]
forceinline overload staticIndexUpdateAssign(#F, dest:T, #i, forward src) : {
    staticIndexAssign(dest, #i, F(staticIndex(dest, #i), src));
}

[..T when countValues(..T) >= 2]
forceinline overload indexAssign(dest, forward ..indicesAndSrc:T) : {
    assign(
        index(dest, ..withoutNthValue(
            #(countValues(..T)-1),
            ..indicesAndSrc
        )),
        lastValue(..indicesAndSrc),
    );
}

[F, ..A when countValues(..A) >= 2]
forceinline overload indexUpdateAssign(#F, dest, forward ..indicesAndSrc:A) : {
    updateAssign(
        #F,
        index(dest, ..takeValues(
            #(countIndices(..A)),
            ..indicesAndSrc
        )),
        ..dropValues(#countIndices(..A), ..indicesAndSrc),
    );
}

[F, T, ..A when
    (countValues(..A) >= 2) and
    RValue?(
        index(
            typeToLValue(T),
            ..mapValues(
                typeToLValue,
                ..takeValues(#(countIndices(..A)), ..A)
            )
        )
    )
]
forceinline overload indexUpdateAssign(#F, dest:T, forward ..indicesAndSrc:A) : {
    indexAssign(
        dest,
        ..takeValues(#(countIndices(..A)), ..indicesAndSrc),
        infixOperator(
            index(
                dest,
                ..takeValues(#(countIndices(..A)), ..indicesAndSrc)
            ),
            F, ..dropValues(#countIndices(..A), ..indicesAndSrc)
        )
    );
}


/// @section  first occurence of non-numeric 

private countIndices(..A) = _countIndices(#-1, ..A);
private define _countIndices;
[n] forceinline overload _countIndices(#n, a, ..A) 
    = if(not Numeric?(a)) n else _countIndices(#(n+1), ..A);
[n] forceinline overload _countIndices(#n) = n;


/// @section   operators  

private define staticEquals?(a, b) : Bool;
[A, B]
forceinline overload staticEquals?(a:Static[A], b:Static[B]) : Bool = false;
[A]
forceinline overload staticEquals?(a:Static[A], b:Static[A]) : Bool = true;

BinaryOpDefined?(OP,T,U) : Bool = Symbol?(OP) and not Variant?(OP) and not Record?(OP) 
    and CallDefined?(OP,T,U) and staticEquals?(CallOutputTypes(OP,T,U),T); 
CompareOpDefined?(OP,T,U) : Bool = Symbol?(OP) and not Variant?(OP) and not Record?(OP) 
    and CallDefined?(OP,T,U) and staticEquals?(CallOutputTypes(OP,T,U),Bool); 

[OP] forceinline overload prefixOperator(#OP, forward ..xs)
    = forward OP(..prefixOperator(..xs));
[OP] forceinline overload prefixOperator(#OP, forward x) 
    = forward ..OP(x);

alias LEFT = 0;
alias RIGHT = 1;
alias VARIADIC = 2;
alias BOOLEAN = 3;

// two of three arguments (x, x) or (comparator, x, x)
define (==)(..p): Bool;
define (!=)(..p): Bool;
define (>=)(..p): Bool;
define (<=)(..p): Bool;
define (>)(..p): Bool;
define (<)(..p): Bool;

define (++)(a, b, ..cs);
define (~);
define (&)(a, b, ..cs);
define (|)(a, b, ..cs);
define (<<)(a, b);
define (>>)(a, b);
define (+)(a, ..b);
define (-)(a, ..b);
define (%)(a, b, ..cs);
define (\)(a, b, ..cs);
define (/)(a, b, ..cs);
define (*)(a, b, ..cs);

alias equals? = (==);
alias notEquals? = (!=);
alias lesser? = (<);
alias lesserEquals? = (<=);
alias greater? = (>);
alias greaterEquals? = (>=);

alias add = (+);
alias subtract = (-);
alias multiply = (*);
alias divide = (/);
alias quotient = (\);
alias remainder = (%);
alias cat = (++);

alias bitshl = (<<);
alias bitshr = (>>);
alias bitand = (&);
alias bitor = (|);
alias bitxor = (~);
alias bitnot = (~);


define operatorPrecedence(T) : Int;
define operatorAssociativity(T) : Int;


[T] overload operatorPrecedence(#T) : Int = 0;
[T] overload operatorAssociativity(#T) : Int = LEFT;

overload operatorPrecedence(#(*)) : Int   = 1000;
overload operatorPrecedence(#(/)) : Int   = 1000;
overload operatorPrecedence(#(\)) : Int   = 1000;
overload operatorPrecedence(#(%)) : Int   = 1000;

overload operatorPrecedence(#(-)) : Int   = 2000;
overload operatorPrecedence(#(+)) : Int   = 2000;

overload operatorPrecedence(#(<<)) : Int  = 4000;
overload operatorPrecedence(#(>>)) : Int  = 4000;

overload operatorPrecedence(#(&)) : Int   = 5000;
overload operatorPrecedence(#(~)) : Int   = 5000;
overload operatorPrecedence(#(|)) : Int   = 5000;

overload operatorPrecedence(#(++)) : Int  = 50000;

overload operatorPrecedence(#(==)) : Int  = 100000;
overload operatorPrecedence(#(!=)) : Int  = 100000;
overload operatorPrecedence(#(<)) : Int   = 100000;
overload operatorPrecedence(#(>)) : Int   = 100000;
overload operatorPrecedence(#(<=)) : Int  = 100000;
overload operatorPrecedence(#(>=)) : Int  = 100000;

//
// Default operatorAssociativity covers the standard 
// operators:  *, /, \, %, -, +, <<, >>, &, ~, |, ++
//

overload operatorAssociativity(#(==)) : Int   = BOOLEAN;
overload operatorAssociativity(#(!=)) : Int   = BOOLEAN;
overload operatorAssociativity(#(<)) : Int    = BOOLEAN;
overload operatorAssociativity(#(>)) : Int    = BOOLEAN;
overload operatorAssociativity(#(<=)) : Int   = BOOLEAN;
overload operatorAssociativity(#(>=)) : Int   = BOOLEAN;

forceinline Operator?(..x) : Bool = false;
[OP] forceinline overload Operator?(#OP) : Bool 
    = Symbol?(OP) and operatorPrecedence(OP) > 0;

forceinline BoolAssoc?(..x) : Bool = false;
forceinline LeftAssoc?(..x) : Bool = false;
forceinline RightAssoc?(..x) : Bool = false;

[OP] forceinline overload BoolAssoc?(#OP) : Bool = integerEquals?(operatorAssociativity(OP),BOOLEAN);
[OP1,OP2] forceinline overload BoolAssoc?(#OP1,#OP2) : Bool = BoolAssoc?(OP1) and BoolAssoc?(OP2);

[OP] forceinline overload LeftAssoc?(#OP) : Bool = integerEquals?(operatorAssociativity(OP),LEFT);
[OP1,OP2] forceinline overload LeftAssoc?(#OP1,#OP2) : Bool = LeftAssoc?(OP1) and LeftAssoc?(OP2);

[OP] forceinline overload RightAssoc?(#OP) : Bool = integerEquals?(operatorAssociativity(OP),RIGHT);
[OP1,OP2] forceinline overload RightAssoc?(#OP1,#OP2) : Bool = RightAssoc?(OP1) and RightAssoc?(OP2);

[OP1,OP2] forceinline GreaterPrec?(#OP1,#OP2) : Bool 
    = integerLesser?(operatorPrecedence(OP1),operatorPrecedence(OP2));
[OP1,OP2] forceinline LowerPrec?(#OP1,#OP2) : Bool = GreaterPrec?(OP2,OP1);


private define infixToPolish;

forceinline overload infixToPolish(#0, #0,  ..y) = ;

[s, v, p, T when s>0 and Operator?(T)]
forceinline overload infixToPolish(#0, #s, #v, forward ..y, #p, #T) 
    = forward ..infixToPolish(#0, #(s-1), #1, ..y), T, #(p+v);

[n, s, v when n>0]
forceinline overload infixToPolish(#n, #s, #v,forward x, forward ..y) 
    = forward ..infixToPolish(#(n-1), #s, #(v+1), ..y), x;

[n, s, v, OP when n>0 and Operator?(OP)]
forceinline overload infixToPolish(#n, #s, #v, #OP, forward ..y) 
    = forward ..infixToPolish(#(n-1), #(s+1), #0, ..y, #v, #OP);

[n, s, v, OP, p, T when n>0 and s>0 
    and ((LeftAssoc?(OP) and LowerPrec?(OP, T)) 
        or (RightAssoc?(OP) and not GreaterPrec?(OP, T)) or BoolAssoc?(OP))] 
forceinline overload infixToPolish(#n, #s, #v, #OP, forward ..y, #p, #T) 
    = forward  ..infixToPolish(#n, #(s-1), #1, #OP, ..y), T,#(p+v);


private define evalPolish;
forceinline overload evalPolish() = ;

forceinline overload evalPolish(x, ..y) = x, ..evalPolish(..y);

[OP, v when Operator?(OP)]
forceinline overload evalPolish(#OP, #v, ..x) 
    = OP(..takeValues(#v, ..evalPolish(..x))), ..dropValues(#v, ..evalPolish(..x));

[OP, v when BoolAssoc?(OP)]
forceinline overload evalPolish(#OP, #v, ..x) = OP, ..evalPolish(..x);

private define evalBool;
forceinline overload evalBool(..x) = ..x;

[OP, OP2 when BoolAssoc?(OP, OP2)]
forceinline overload evalBool(#OP, y, #OP2, z, ..x) : Bool 
    = OP(y, z) and evalBool(#OP2, z, ..x);

[OP when BoolAssoc?(OP)]
forceinline overload evalBool(#OP, x, y) : Bool = OP(x, y);

[..T]
forceinline overload infixOperator(forward ..args:T) 
    = forward ..evalBool(..evalPolish(
        ..infixToPolish(#countValues(..T), #0, #0, ..reverseValues(..args))));

[OP]
forceinline overload infixOperator(forward a, #OP, forward b) 
    = forward ..OP(a,b);


/// @section  swap 

forceinline swap(a, b) : {
    var temp = moveUnsafe(a);
    a <-- moveUnsafe(b);
    b <-- move(temp);
}

[T when BitwiseMovedType?(T)]
forceinline overload swap(a:T, b:T) : {
    alias TBytes = Array[UInt8, Int(TypeSize(T))];
    var temp = bitcast(TBytes, a);
    bitcast(TBytes, a) <-- bitcast(TBytes, b);
    bitcast(TBytes, b) <-- temp;
}


/// @section  min, max 

[T]
forceinline min(a:T, b:T) --> c:T {
    if (a <= b)
        c <-- a;
    else
        c <-- b;
}

[T]
forceinline overload min(ref a:T, ref b:T)  : ByRef[T]  {
    if (a <= b)
        return ref a;
    else
        return ref b;
}

[T]
forceinline max(a:T, b:T) --> c:T {
    if (a > b)
        c <-- a;
    else
        c <-- b;
}

[T]
forceinline overload max(ref a:T, ref b:T)  : ByRef[T] {
    if (a > b)
        return ref a;
    else
        return ref b;
}



/// @section  ifExpression 

[T]
alias overload ifExpression(condition, consequent:T, alternate:T) --> ret:T {
    if (condition)
        ret <-- consequent;
    else
        ret <-- alternate;
}

[T]
alias overload ifExpression(condition, ref consequent:T, ref alternate:T) : ByRef[T] {
    if (condition)
        return ref consequent;
    else
        return ref alternate;
}

alias overload ifExpression(#true, consequent, alternate) = forward consequent;
alias overload ifExpression(#false, consequent, alternate) = forward alternate;


[consequent, alternate when StringLiteral?(consequent) and StringLiteral?(alternate)]
alias overload ifExpression(condition, #consequent, #alternate) --> ret:StringLiteralRef {
    if (condition)
        ret <-- StringLiteralRef(consequent);
    else
        ret <-- StringLiteralRef(alternate);
}



/// @section  bitandc, bitblend 

forceinline bitandc(a, b) = (&)(a, (~)(b));
forceinline bitblend(mask, ones, zeros)
    = (|)((&)(ones, mask), bitandc(zeros, mask));



/// @section  bitrol, bitror 

[I, J when Integer?(I) and Integer?(J)]
bitrol(x:I, n:J) = (|)(wrapBitshl(x, n), (>>)(x, TypeSize(I)*8 - n));

[I, J when Integer?(I) and Integer?(J)]
bitror(x:I, n:J) = (|)((>>)(x, n), wrapBitshl(x, TypeSize(I)*8 - n));



/// @section  PrimitiveType? 

PrimitiveType?(X) = false;
overload PrimitiveType?(#Bool) : Bool = true;
overload PrimitiveType?(#Int8) : Bool = true;
overload PrimitiveType?(#Int16) : Bool = true;
overload PrimitiveType?(#Int32) : Bool = true;
overload PrimitiveType?(#Int64) : Bool = true;
overload PrimitiveType?(#Int128) : Bool = true;
overload PrimitiveType?(#UInt8) : Bool = true;
overload PrimitiveType?(#UInt16) : Bool = true;
overload PrimitiveType?(#UInt32) : Bool = true;
overload PrimitiveType?(#UInt64) : Bool = true;
overload PrimitiveType?(#UInt128) : Bool = true;
overload PrimitiveType?(#Float32) : Bool = true;
overload PrimitiveType?(#Float64) : Bool = true;
overload PrimitiveType?(#Float80) : Bool = true;
overload PrimitiveType?(#Imag32) : Bool = true;
overload PrimitiveType?(#Imag64) : Bool = true;
overload PrimitiveType?(#Imag80) : Bool = true;
overload PrimitiveType?(#Complex32) : Bool = true;
overload PrimitiveType?(#Complex64) : Bool = true;
overload PrimitiveType?(#Complex80) : Bool = true;
[T] overload PrimitiveType?(#Pointer[T]) : Bool = true;
[I, O] overload PrimitiveType?(#CodePointer[I, O]) : Bool = true;
[C, V, I, O] overload PrimitiveType?(#ExternalCodePointer[C, V, I, O]) : Bool = true;
[T] overload PrimitiveType?(#Static[T]) : Bool = true;
[T,n] overload PrimitiveType?(#Vec[T,n]) : Bool = true;
[E when Enum?(E)] overload PrimitiveType?(#E) : Bool = true;
[..T] overload PrimitiveType?(#Union[..T]) : Bool = true;
[] overload PrimitiveType?(#Union[]) : Bool = true;
overload PrimitiveType?(#Tuple[]) : Bool = true;



/// @section  PrimitiveCompoundType?, PrimitiveCompoundMemberTypes 

PrimitiveCompoundType?(X) : Bool = false;

[T,n] overload PrimitiveCompoundType?(#Array[T,n]) : Bool = true;
[..T] overload PrimitiveCompoundType?(#Tuple[..T]) : Bool = true;
[R when RegularRecord?(R)] overload PrimitiveCompoundType?(#R) : Bool = true;
[V when Variant?(V)] overload PrimitiveCompoundType?(#V) : Bool = true;

define PrimitiveCompoundMemberTypes;
[T,n] overload PrimitiveCompoundMemberTypes(#Array[T,n]) = T;
[..T] overload PrimitiveCompoundMemberTypes(#Tuple[..T]) = ..T;
[R when RegularRecord?(R)]
overload PrimitiveCompoundMemberTypes(#R) = ..RecordFieldTypes(R);
[V when Variant?(V)]
overload PrimitiveCompoundMemberTypes(#V) = ..VariantMembers(V);


/// @section  PODType? 

PODType?(X) : Bool = false;

[T when PrimitiveType?(T)]
overload PODType?(#T) : Bool = true;

[T when PrimitiveCompoundType?(T)]
overload PODType?(#T) : Bool = allValues?(PODType?, ..PrimitiveCompoundMemberTypes(T));



/// @section  Finer-grained POD-related properties 

BitwiseCopiedType?(T) = PODType?(T);
BitwiseMovedType?(T) = PODType?(T);
NotDestroyedType?(T) = PODType?(T);
NotResetType?(T) = PODType?(T);
CopyDoesNotThrowType?(T) = PODType?(T);
AssignDoesNotThrowType?(T) = PODType?(T);
BitwiseAssignedType?(T) = BitwiseCopiedType?(T) and NotDestroyedType?(T);
BitwiseMoveAssignedType?(T) = BitwiseMovedType?(T) and NotDestroyedType?(T);

[T when PrimitiveCompoundType?(T)]
overload BitwiseCopiedType?(#T) : Bool
    = allValues?(BitwiseCopiedType?, ..PrimitiveCompoundMemberTypes(T));
[T when PrimitiveCompoundType?(T)]
overload BitwiseMovedType?(#T) : Bool
    = allValues?(BitwiseMovedType?, ..PrimitiveCompoundMemberTypes(T));
[T when PrimitiveCompoundType?(T)]
overload NotDestroyedType?(#T) : Bool
    = allValues?(NotDestroyedType?, ..PrimitiveCompoundMemberTypes(T));
[T when PrimitiveCompoundType?(T)]
overload NotResetType?(#T) : Bool
    = allValues?(NotResetType?, ..PrimitiveCompoundMemberTypes(T));
[T when PrimitiveCompoundType?(T)]
overload CopyDoesNotThrowType?(#T) : Bool
    = allValues?(CopyDoesNotThrowType?, ..PrimitiveCompoundMemberTypes(T));
[T when PrimitiveCompoundType?(T)]
overload AssignDoesNotThrowType?(#T) : Bool
    = allValues?(AssignDoesNotThrowType?, ..PrimitiveCompoundMemberTypes(T));
[T when PrimitiveCompoundType?(T)]
overload BitwiseAssignedType?(#T) : Bool
    = allValues?(BitwiseAssignedType?, ..PrimitiveCompoundMemberTypes(T));
[T when PrimitiveCompoundType?(T)]
overload BitwiseMoveAssignedType?(#T) : Bool
    = allValues?(BitwiseMoveAssignedType?, ..PrimitiveCompoundMemberTypes(T));



/// @section  identity test 

forceinline is?(x, y) : Bool = @x == @y;
forceinline isNot?(x, y) : Bool = not is?(x, y);


/// @section  case? 

forceinline overload case?(x, forward ..ys) : Bool {
    ..for (y in ..ys)
        if ((==)(x, y))
            return true;
    return false;
}


/// @section  CallDefined?, CallOutputTypes 

define CallDefined?;
[F]
alias overload CallDefined?(f:F, ..In) : Bool = StaticCallDefined?(call, F, ..In);
[f]
alias overload CallDefined?(#f, ..In) : Bool = Symbol?(f) and StaticCallDefined?(f, ..In);

define CallOutputTypes;
[F]
alias overload CallOutputTypes(f:F, ..In) = ..StaticCallOutputTypes(call, F, ..In);
[f]
alias overload CallOutputTypes(#f, ..In) = ..StaticCallOutputTypes(f, ..In);


/// @section  Mono?, MonoInputTypes, MonoOutputTypes 

define MonoInputTypes;
[f when StaticMono?(f)]
alias overload MonoInputTypes(#f) = ..StaticMonoInputTypes(f);
[F when LambdaRecord?(F) and LambdaMono?(F)]
alias overload MonoInputTypes(f:F) = ..LambdaMonoInputTypes(F);

[F]
alias Mono?(f:F) : Bool = CallDefined?(MonoInputTypes, F);
forceinline MonoType?(F) : Bool = Mono?(typeToRValue(F));

[F when MonoType?(F)]
alias MonoOutputTypes(f:F) = ..CallOutputTypes(f, ..MonoInputTypes(f));

public define Monad?;
overload Monad?(T) : Bool = false;
