
/// @section  fieldRef, fieldRefByIndex 

[T, FIELD when RecordWithField?(T, FIELD)]
forceinline overload fieldRef(x:T, #FIELD) {
    return ref ..recordFieldRefByName(x, #FIELD);
}

[T, i when Record?(T)]
forceinline fieldRefByIndex(x:T, #i) =
    ref ..recordFieldRef(x, #SizeT(i));


/// @section  RecordFieldType, RecordFieldTypes 

[T,i when Record?(T)]
RecordFieldType(#T, #i) = ..Type(..fieldRefByIndex(null(T)^, #i));

[T when Record?(T)]
RecordFieldTypes(#T) = ..Type(..recordFields(null(T)^));



/// @section  RecordFields 

RecordFields(R) {
    alias n = RecordFieldCount(R);
    var f = i => [RecordFieldName(R,i), ..RecordFieldType(R,i)];
    return ..mapValues(f, ..staticIntegers(#n));
}

RecordFieldNames(R) = ..mapValues(
    i => RecordFieldName(R, i),
    ..staticIntegers(#RecordFieldCount(R))
);



/// @section  RegularRecord? 
// true if record's value semantics is defined in terms of its fields
//

[T]
define RegularRecord?(#T): Bool;

[T]
overload RegularRecord?(#T) = false;

[T when Record?(T)]
overload RegularRecord?(#T) = true;



/// @section  basic constructor 

[T, ..A when Record?(T)]
define initializeRecord(#T, ..args:A): T;

[T, ..A when Record?(T) and (Tuple[..RecordFieldTypes(T)] == Tuple[..A])]
alias overload initializeRecord(#T, ..args:A) --> returned:T {
    ..recordFields(returned) <-- ..args;
}

[T, ..A when Record?(T) and (Tuple[..RecordFieldTypes(T)] == Tuple[..A])]
alias overload T(..args:A) = initializeRecord(T, ..args);



/// @section  default constructor 

[T when Record?(T)]
overload initializeRecord(#T) --> returned:T {
    initializeMulti(..recordFields(returned));
}

[T when RegularRecord?(T)]
overload T() = initializeRecord(T);

[..A]
private initializeMulti(..args:A) {
    ..args <-- ..initializeTypes(..A);
}

private define initializeTypes;
forceinline overload initializeTypes(A, ..B) = A(), ..initializeTypes(..B);
forceinline overload initializeTypes() = ;



/// @section  copy constructor 

[T when Record?(T)]
copyRecord(src:T) --> returned:T {
    ..recordFields(returned) <-- ..recordFields(src);
}

[T when RegularRecord?(T) and not BitwiseCopiedType?(T)]
overload T(src:T) = copyRecord(src);



/// @section  moveUnsafe, resetUnsafe 

[T when Record?(T)]
moveRecordUnsafe(src:T) --> returned:T {
    alias n = RecordFieldCount(T);
    ..for (i in staticIntegers(#n))
        ..fieldRefByIndex(returned, i) <-- moveUnsafe(..fieldRefByIndex(src, i));
}

[T when RegularRecord?(T) and not BitwiseMovedType?(T)]
overload moveUnsafe(src:T) = moveRecordUnsafe(src);

[T when Record?(T)]
resetRecordUnsafe(a:T) {
    ..for (x in recordFields(a))
        resetUnsafe(x);
}

[T when RegularRecord?(T) and not ResetDoesNothingType?(T)]
overload resetUnsafe(a:T) {
    resetRecordUnsafe(a);
}



/// @section  destroy 

[T when Record?(T)]
destroyRecord(a:T) {
    ..for (x in recordFields(a))
        destroy(x);
}

[T when RegularRecord?(T) and not DestroyDoesNothingType?(T)]
overload destroy(a:T) {
    destroyRecord(a);
}



/// @section  assign 

[T when RegularRecord?(T) and not BitwiseAssignedType?(T)]
overload assign(ref dest:T, ref src:T) {
    alias n = RecordFieldCount(T);
    ..for (i in staticIntegers(#n))
        assign(fieldRefByIndex(dest, i), fieldRefByIndex(src, i));
}



/// @section  equals? 

[T when RegularRecord?(T)]
overload equals?(a:T, b:T) {
    alias n = RecordFieldCount(T);
    ..for (i in staticIntegers(#n)) {
        if (not equals?(fieldRefByIndex(a, i), fieldRefByIndex(b, i)))
            return false;
    }
    return true;
}



/// @section  lesser? 

[T when RegularRecord?(T)]
overload lesser?(a:T, b:T) {
    alias n = RecordFieldCount(T);
    ..for (i in staticIntegers(#n)) {
        ref av = fieldRefByIndex(a, i);
        ref bv = fieldRefByIndex(b, i);
        if (lesser?(av, bv))
            return true;
        if (lesser?(bv, av))
            return false;
    }
    return false;
}


/// @section  recordWithProperties
///
/// RecordWithProperties is a special primitive type known to the compiler.
/// can be used in computed records to set custom properties.


recordWithProperties(properties, ..fields) {
    var fieldsTuple = Tuple(..fields);

    #properties;
    #fieldsTuple;

    return RecordWithProperties[Type(properties), Type(fieldsTuple)]();
}

recordWithProperty(property, ..fields) =
    recordWithProperties(Tuple(property), ..fields);

recordWithPredicate(predicate, ..fields) =
    recordWithProperty([predicate, #true], ..fields);
