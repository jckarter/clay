import core.platform.(OSFamily, Unix, CPU, X86_64);


/// @section  numeric type predicates 

[T] SignedInteger?(#T) = false;
overload SignedInteger?(#Int8) : Bool = true;
overload SignedInteger?(#Int16) : Bool = true;
overload SignedInteger?(#Int32) : Bool = true;
overload SignedInteger?(#Int64) : Bool = true;
overload SignedInteger?(#Int128) : Bool = true;


[T] UnsignedInteger?(#T) = false;
overload UnsignedInteger?(#UInt8) : Bool = true;
overload UnsignedInteger?(#UInt16) : Bool = true;
overload UnsignedInteger?(#UInt32) : Bool = true;
overload UnsignedInteger?(#UInt64) : Bool = true;
overload UnsignedInteger?(#UInt128) : Bool = true;


[T] Integer?(#T) : Bool = SignedInteger?(T) or UnsignedInteger?(T);
[A, B] overload Integer?(#A, #B) : Bool = Integer?(A) and Integer?(B);


/// true iff integer operations work on given type
[I when Integer?(I)]
IntegerAvailable?(#I) : Bool =
    // Int128 is available only on x86-64 Unices
    TypeSize(I) <= TypeSize(Int64) or (CPU == X86_64 and OSFamily == Unix);


/// builtin integer types
BuiltinIntegerTypes() = Int8, UInt8, Int16, UInt16, Int32, UInt32, Int64, UInt64, Int128, UInt128;


/// get signed integer type by type size
[S]
define SignedIntegerOfSize(#S);

/// get unsigned integer type by type size
[S]
define UnsignedIntegerOfSize(#S);

overload SignedIntegerOfSize(#1) = Int8;
overload SignedIntegerOfSize(#2) = Int16;
overload SignedIntegerOfSize(#4) = Int32;
overload SignedIntegerOfSize(#8) = Int64;
overload SignedIntegerOfSize(#16) = Int128;

overload UnsignedIntegerOfSize(#1) = UInt8;
overload UnsignedIntegerOfSize(#2) = UInt16;
overload UnsignedIntegerOfSize(#4) = UInt32;
overload UnsignedIntegerOfSize(#8) = UInt64;
overload UnsignedIntegerOfSize(#16) = UInt128;


/// for integer type return signed integer of same type
[I when Integer?(I)]
SignedInteger(#I) = SignedIntegerOfSize(#Int(TypeSize(I)));

/// for integer type return unsigned integer of same type
[I when Integer?(I)]
UnsignedInteger(#I) = UnsignedIntegerOfSize(#Int(TypeSize(I)));


[T] ByteSizedInteger?(#T) : Bool = false;
overload ByteSizedInteger?(#Int8) : Bool  = true;
overload ByteSizedInteger?(#UInt8) : Bool  = true;

[T] Float?(#T) : Bool = false;
overload Float?(#Float32) : Bool  = true;
overload Float?(#Float64) : Bool  = true;
overload Float?(#Float80) : Bool  = true;
[A, B] overload Float?(#A, #B) : Bool = Float?(A) and Float?(B);


/// builtin float types
BuiltinFloatTypes() = Float32, Float64, Float80;


[T] Imaginary?(#T) : Bool = false;
overload Imaginary?(#Imag32) : Bool = true;
overload Imaginary?(#Imag64) : Bool = true;
overload Imaginary?(#Imag80) : Bool = true;
[A, B] overload Imaginary?(#A, #B) : Bool = Imaginary?(A) and Imaginary?(B);


/// builtin imaginary types
BuiltinImaginaryTypes() = Imag32, Imag64, Imag80;


[T] Numeric?(#T) : Bool = Integer?(T) or Float?(T) or Imaginary?(T);
[A, B] overload Numeric?(#A, #B) : Bool = Numeric?(A) and Numeric?(B);



/// @section  BiggerInteger?, BiggerFloat?, BiggerNumeric? 

[A,B when Integer?(A,B)]
private BiggerInteger?(#A, #B) : Bool =
    (TypeSize(A) > TypeSize(B)) or ((TypeSize(A) == TypeSize(B)) and
                                    UnsignedInteger?(A) and
                                    SignedInteger?(B));

private define BiggerFloat?;

[A,B when Float?(A,B) or Imaginary?(A,B)]
overload BiggerFloat?(#A, #B) : Bool  = TypeSize(A) > TypeSize(B);

[A,B when (Float?(A) and Imaginary?(B)) or (Float?(B) and Imaginary?(A))]
overload BiggerFloat?(#A, #B) : Bool  = TypeSize(A) > TypeSize(B);


private define BiggerNumeric?;

[A,B when (Float?(A) or Imaginary?(A)) and Integer?(B)]
overload BiggerNumeric?(#A, #B) : Bool  = true;

[A,B when Integer?(A) and (Float?(B) or Imaginary?(B))]
overload BiggerNumeric?(#A, #B) : Bool = false;

[A,B when Integer?(A,B)]
overload BiggerNumeric?(#A, #B): Bool = BiggerInteger?(A,B);

[A,B when Float?(A,B) or Imaginary?(A,B)]
overload BiggerNumeric?(#A, #B) : Bool = BiggerFloat?(A,B);

[A,B when (Float?(A) and Imaginary?(B)) or (Float?(B) and Imaginary?(A))]
overload BiggerNumeric?(#A, #B) : Bool = BiggerFloat?(A,B);




/// @section  toBiggerNumericType 

define toBiggerNumericType;

[A when Numeric?(A)]
forceinline overload toBiggerNumericType(#A, #A, v) : A = v;

[A,B when Numeric?(A,B) and BiggerNumeric?(A,B)]
forceinline overload toBiggerNumericType(#A, #B, v) : A = numericConvert(A,v);

[A,B when Numeric?(A,B) and BiggerNumeric?(B,A)]
forceinline overload toBiggerNumericType(#A, #B, v) : B = numericConvert(B,v);

define wrapToBiggerNumericType;

[A when Numeric?(A)]
forceinline overload wrapToBiggerNumericType(#A, #A, v) : A = v;

[A,B when Numeric?(A,B) and BiggerNumeric?(A,B)]
forceinline overload wrapToBiggerNumericType(#A, #B, v) : A = wrapCast(A, v);

[A,B when Numeric?(A,B) and BiggerNumeric?(B,A)]
forceinline overload wrapToBiggerNumericType(#A, #B, v) : B = wrapCast(B, v);

ImagBaseType(#Imag32) = Float;
overload ImagBaseType(#Imag64) = Double;
overload ImagBaseType(#Imag80) = LongDouble;



/// @section  constructors 

[T when Numeric?(T)]
forceinline overload T() : T = numericConvert(T, 0);

[T1,T2 when Numeric?(T1,T2)]
forceinline overload T1(src:T2) : T1 = numericConvert(T1, src);

[T,I when Float?(T) and Imaginary?(I)]
forceinline overload T(a:I) : T = T(0.);

[T,I when Float?(T) and Imaginary?(I)]
forceinline overload I(a:T) : T = I(0.j);



/// @section  assign 

[A, B when Numeric?(A,B) and BiggerNumeric?(A,B)]
forceinline overload assign(ref dest:A, src:B) : {
    bitcopy(dest, numericConvert(A,src));
}

[A, B when Integer?(A,B) and (TypeSize(A) == TypeSize(B))]
forceinline overload assign(ref dest:A, src:B) : {
    bitcopy(dest, A(src));
}



/// @section  equals?,  notEquals?, lesser?, lesserEquals?, greater?, greaterEquals? 

[A,B when Numeric?(A,B)]
forceinline overload (==)(a:A, b:B) : Bool  =
    (==)(toBiggerNumericType(A, B, a), toBiggerNumericType(A, B, b));

[A when Numeric?(A)]
forceinline overload (==)(a:A, b:A) : Bool = integerEquals?(a, b);

[A when Float?(A) or Imaginary?(A)]
forceinline overload (==)(a:A, b:A) : Bool  = floatOrderedEquals?(a, b);


[A, B when Numeric?(A, B)]
forceinline overload (!=)(a:A, b:B) : Bool  =
    (!=)(toBiggerNumericType(A, B, a), toBiggerNumericType(A, B, b));

[A when Numeric?(A)]
forceinline overload (!=)(a:A, b:A) : Bool = not (==)(a, b);

[A when Float?(A) or Imaginary?(A)]
forceinline overload (!=)(a:A, b:A) : Bool = floatUnorderedNotEquals?(a, b);


[A,B when Numeric?(A,B)]
forceinline overload (<)(a:A, b:B) : Bool =
    (<)(toBiggerNumericType(A, B, a), toBiggerNumericType(A, B, b));

[A when Numeric?(A)]
forceinline overload (<)(a:A, b:A) : Bool = integerLesser?(a, b);

[A when Float?(A) or Imaginary?(A)]
forceinline overload (<)(a:A, b:A) : Bool = floatOrderedLesser?(a, b);


[A, B when Numeric?(A, B)]
forceinline overload (<=)(a:A, b:B) : Bool =
    (<=)(toBiggerNumericType(A, B, a), toBiggerNumericType(A, B, b));

[A when Numeric?(A)]
forceinline overload (<=)(a:A, b:A) : Bool  = not (<)(b, a);

[A when Float?(A) or Imaginary?(A)]
forceinline overload (<=)(a:A, b:A) : Bool = floatOrderedLesserEquals?(a, b);


[A,B when Numeric?(A,B)]
forceinline overload (>)(a:A, b:B) : Bool =
    (>)(toBiggerNumericType(A, B, a), toBiggerNumericType(A, B, b));

[A when Numeric?(A)]
forceinline overload (>)(a:A, b:A) : Bool = (<)(b, a);

[A when Float?(A) or Imaginary?(A)]
forceinline overload (>)(a:A, b:A) : Bool = floatOrderedGreater?(a, b);


[A, B when Numeric?(A, B)]
forceinline overload (>=)(a:A, b:B) : Bool =
    (>=)(toBiggerNumericType(A, B, a), toBiggerNumericType(A, B, b));

[A when Numeric?(A)]
forceinline overload (>=)(a:A, b:A) : Bool = not (<)(a, b);

[A when Float?(A) or Imaginary?(A)]
forceinline overload (>=)(a:A, b:A) : Bool = floatOrderedGreaterEquals?(a, b);

forceinline inRange?(x,l,u) : Bool =  (<)(x,u) and (<=)(l,x);

forceinline inRangeEquals?(x,l,u) : Bool  =  (<=)(x,u) and (<=)(l,x);

[T when Numeric?(T)]
forceinline zero?(x:T) : Bool = (==)(x, T(0));



/// @section  binary ops 

[A,B when Numeric?(A,B)]
forceinline overload (+)(a:A, b:B) =
    (+)(toBiggerNumericType(A, B, a), toBiggerNumericType(A, B, b));

[A when Numeric?(A)]
forceinline overload (+)(a:A, b:A) : A = numericAdd(a, b);


[A,B when Numeric?(A,B)]
forceinline overload (-)(a:A, b:B) =
    (-)(toBiggerNumericType(A, B, a), toBiggerNumericType(A, B, b));

[A when Numeric?(A)]
forceinline overload (-)(a:A, b:A) : A = numericSubtract(a, b);


[A,B when Numeric?(A,B)]
forceinline overload (*)(a:A, b:B) =
    (*)(toBiggerNumericType(A, B, a), toBiggerNumericType(A, B, b));

[A when Numeric?(A)]
forceinline overload (*)(a:A, b:A) : A = numericMultiply(a, b);


[A,B when Float?(A,B)]
forceinline overload (/)(a:A, b:B) =
    (/)(toBiggerNumericType(A, B, a), toBiggerNumericType(A, B, b));

[A when Float?(A)]
forceinline overload (/)(a:A, b:A) : A = floatDivide(a, b);

[A,B when Integer?(A,B)]
forceinline overload (\)(a:A, b:B) =
    (\)(toBiggerNumericType(A, B, a), toBiggerNumericType(A, B, b));

[A when Integer?(A)]
forceinline overload (\)(a:A, b:A) : A = integerQuotient(a, b);

[A,B when Integer?(A,B)]
forceinline overload (%)(a:A, b:B) =
    (%)(toBiggerNumericType(A, B, a), toBiggerNumericType(A, B, b));

[A when Integer?(A)]
forceinline overload (%)(a:A, b:A) : A = integerRemainder(a, b);

/// @section  Variadic ops 

[A, ..AA when countValues(..AA) != 1]
forceinline overload (+)(a:A, ..aa:AA) : A = foldlValues((+), a, ..aa);

[A, ..AA when countValues(..AA) != 1]
forceinline overload (-)(a:A, ..aa:AA) : A = foldlValues((-), a, ..aa);

[A, ..AA when countValues(..AA) != 1]
forceinline overload (*)(a:A, ..aa:AA) : A = foldlValues((*), a, ..aa);

[A, ..AA when countValues(..AA) != 1]
forceinline overload (/)(a:A, ..aa:AA) : A = foldlValues((/), a, ..aa);

[A, ..AA when countValues(..AA) != 1]
forceinline overload (\)(a:A, ..aa:AA) : A = foldlValues((\), a, ..aa);

[A, ..AA when countValues(..AA) != 1]
forceinline overload (%)(a:A, ..aa:AA) : A = foldlValues((%), a, ..aa);

/// @section  Imaginary binary ops 


[A,B when Numeric?(A) and Imaginary?(B)]
forceinline overload (*)(a:A, b:B) = numericMultiply(numericConvert(B,a), b);

[A,B when Numeric?(B) and Imaginary?(A)]
forceinline overload (*)(a:A, b:B) = numericMultiply(a, numericConvert(A,b));

[A when Imaginary?(A)]
forceinline overload (*)(a:A, b:A) = numericConvert(ImagBaseType(A),(-)(numericMultiply(a, b)));

[A,B when Numeric?(A) and Imaginary?(B)]
forceinline overload (/)(a:A, b:B) = (/)(numericConvert(B,-a), b);

[A,B when Numeric?(B) and Imaginary?(A)]
forceinline overload (/)(a:A, b:B) = (/)(a, numericConvert(A,b));

[A when Imaginary?(A)]
forceinline overload (/)(a:A, b:A) = numericConvert(ImagBaseType(A),floatDivide(a, b));


/// @section  unary ops 

[A when Numeric?(A)]
forceinline overload (+)(a:A) : A = a;

[A when Numeric?(A) and not UnsignedInteger?(A)]
forceinline overload (-)(a:A) : A = numericNegate(a);



/// @section  inc, dec 

forceinline overload inc(ref ..a) : { eachValue(inc, ..a); }
forceinline overload dec(ref ..a) : { eachValue(dec, ..a); }

[A when Numeric?(A)]
forceinline overload inc(ref a:A) : {
    a +: A(1);
}

[A when Numeric?(A)]
forceinline overload dec(ref a:A) : {
    a -: A(1);
}



/// @section  bitwise ops 

[A,B when Integer?(A,B)]
forceinline overload (<<)(a:A, b:B) : A = integerShiftLeft(a, A(b));

[A,B when Integer?(A,B)]
forceinline overload (>>)(a:A, b:B) : A = integerShiftRight(a, A(b));

[A,B when Integer?(A,B)]
forceinline overload (&)(a:A, b:B) =
    integerBitwiseAnd(wrapToBiggerNumericType(A, B, a),
                      wrapToBiggerNumericType(A, B, b));

[A when Integer?(A)]
forceinline overload (&)(a:A, b:A) : A = integerBitwiseAnd(a, b);

[A,B when Integer?(A,B)]
forceinline overload (|)(a:A, b:B) =
    integerBitwiseOr(wrapToBiggerNumericType(A, B, a),
                     wrapToBiggerNumericType(A, B, b));

[A when Integer?(A)]
forceinline overload (|)(a:A, b:A) : A = integerBitwiseOr(a, b);

[A,B when Integer?(A,B)]
forceinline overload (~)(a:A, b:B) =
    integerBitwiseXor(wrapToBiggerNumericType(A, B, a),
                      wrapToBiggerNumericType(A, B, b));

[A when Integer?(A)]
forceinline overload (~)(a:A, b:A) : A = integerBitwiseXor(a, b);

[A when Integer?(A)]
forceinline overload (~)(a:A) : A = integerBitwiseNot(a);



//
// octal()

[T,I when Integer?(T) and StringLiteral?(I)]
private _octal(#T, #I)
    = #foldlValues((n,d) -> T(8)*T(n) + T(d - 0x30), T(0), ..stringLiteralBytes(I));

define octal;
overload octal(T, I) = unwrapStatic(_octal(T, I));
overload octal(I) = octal(Int, I);


/// @section  overflow-checked math 

IntegerOverflowChecks?() = AllAssertionsEnabled?()
    and AssertionEnabled?("overflowChecks");

[A when Integer?(A) and IntegerOverflowChecks?()]
forceinline overload (+)(a:A, b:A) : A
    = integerAddChecked(a, b);
[A when Integer?(A) and IntegerOverflowChecks?()]
forceinline overload (-)(a:A, b:A) : A
    = integerSubtractChecked(a, b);
[A when Integer?(A) and IntegerOverflowChecks?()]
forceinline overload (*)(a:A, b:A) : A
    = integerMultiplyChecked(a, b);
[A when Integer?(A) and IntegerOverflowChecks?()]
forceinline overload (\)(a:A, b:A) : A
    = integerQuotientChecked(a, b);
[A when Integer?(A) and IntegerOverflowChecks?()]
forceinline overload (%)(a:A, b:A) : A
    = integerRemainderChecked(a, b);

[A, B when Integer?(A, B) and IntegerOverflowChecks?()]
forceinline overload bitshl(a:A, b:B) : A
    = integerShiftLeftChecked(a, A(b));

[A when SignedInteger?(A) and IntegerOverflowChecks?()]
forceinline overload (-)(a:A) : A
    = integerNegateChecked(a);

[A, B when Integer?(A) and Numeric?(B) and IntegerOverflowChecks?()]
forceinline overload A(b:B) : A
    = integerConvertChecked(A, b);


/// @section  never-checked wrap-on-overflow math 

[A when Integer?(A)]
forceinline wrapAdd(a:A, b:A) : A = numericAdd(a, b);
[A when Integer?(A)]
forceinline wrapSubtract(a:A, b:A) : A = numericSubtract(a, b);
[A when Integer?(A)]
forceinline wrapMultiply(a:A, b:A) : A = numericMultiply(a, b);
[A when Integer?(A)]
forceinline wrapQuotient(a:A, b:A) : A =  integerQuotient(a, b);
[A when Integer?(A)]
forceinline wrapRemainder(a:A, b:A) : A = integerRemainder(a, b);

[A, ..AA when equalValues?(A,..AA) and countValues(..AA) != 1]
forceinline overload wrapAdd(a:A, ..aa:AA) : A = foldValues(wrapAdd, a, ..aa);

[A, ..AA when equalValues?(A,..AA) and countValues(..AA) != 1]
forceinline overload wrapSubtract(a:A, ..aa:AA) : A = foldlValues(wrapSubtract, a, ..aa);

[A, ..AA when equalValues?(A,..AA) and countValues(..AA) != 1]
forceinline overload wrapMultiply(a:A, ..aa:AA) : A = foldValues(wrapMultiply, a, ..aa);

[A, ..AA when equalValues?(A,..AA) and countValues(..AA) != 1]
forceinline overload wrapQuotient(a:A, ..aa:AA) : A = foldlValues(wrapQuotient, a, ..aa);

[A, ..AA when equalValues?(A,..AA) and countValues(..AA) != 1]
forceinline overload wrapRemainder(a:A, ..aa:AA) : A = foldlValues(wrapRemainder, a, ..aa);

[A, B when Integer?(A, B)]
forceinline wrapBitshl(a:A, b:B) : A = integerShiftLeft(a, A(b));

[A when SignedInteger?(A)]
forceinline overload wrapSubtract(a:A) : A = numericNegate(a);

[A, B when Integer?(A) and Numeric?(B)]
forceinline wrapCast(#A, b:B) : A = numericConvert(A, b);
