
/// @section  predicates 

[T,n]
ContiguousSequence?(#Array[T,n]) : Bool = true;

[T,n]
SequenceContainer?(#Array[T,n]) : Bool = true;



/// @section  size, index, iterator, begin, end, front, back 

[T,n]
forceinline size(a:Array[T,n]) : SizeT = SizeT(n);

[T,n]
forceinline StaticSize(#Array[T,n]) : SizeT = SizeT(n);

[T,n,I when Integer?(I)]
forceinline index(a:Array[T,n], i:I) : ByRef[T] {
    assert["boundsChecks"](i >= 0 and SizeT(i) < size(a), Array[T,n], " access out of bounds");
    return ref arrayRef(a, SizeT(i));
}

[T,n]
forceinline iterator(a:Array[T,n])
    = coordinateRange(begin(a), end(a));

[T,n]
forceinline reverseIterator(a:Array[T,n]) 
    = reverseCoordinateRange(end(a), begin(a));

[T,n]
forceinline begin(a:Array[T,n]) : Pointer[T] = Pointer[T](@a);

[T,n]
forceinline end(a:Array[T,n]) : Pointer[T] = Pointer[T](@a + 1);

[T,n]
forceinline front(a:Array[T,n]) : ByRef[T] = ref a[0];

[T,n]
forceinline back(a:Array[T,n]) : ByRef[T] = ref a[n-1];



/// @section  basic constructor 

[T,n,..A when (countValues(..A) == n) and equalValues?(T, ..A)]
alias Array[T,n](..args:A) --> returned:Array[T,n] {
    ..arrayElements(returned) <-- ..args;
}



/// @section  constructor from sequences 

[T, n, S when Sequence?(S)
           and (SequenceElementType(S) == T)]
Array[T,n](s:S) --> returned:Array[T,n] {
    var first, last = begin(returned), end(returned);
    var ptr = first;
    try {
        var srcIter = iterator(s);
        while (ptr != last) {
            var srcValue = nextValue(srcIter);
            assert(hasValue?(srcValue), "insufficient elements for array");
            ptr^ <-- getValue(srcValue);
            inc(ptr);
        }
        assert(not hasValue?(nextValue(srcIter)), "too many elements for array");
    }
    catch (e) {
        destroyMemory(first, ptr);
        throw e;
    }
}

[T, n, S when SequenceContainer?(S)
           and (SequenceElementType(S) == T)]
Array[T,n](rvalue s:S) --> returned:Array[T,n] {
    var first, last = begin(returned), end(returned);
    var ptr = first;
    try {
        var srcIter = iterator(s);
        while (ptr != last) {
            var srcValue = nextValue(srcIter);
            assert(hasValue?(srcValue), "insufficient elements for array");
            ptr^ <-- getValue(srcValue);
            inc(ptr);
        }
        assert(not hasValue?(nextValue(srcIter)), "too many elements for array");
    }
    catch (e) {
        destroyMemory(first, ptr);
        throw e;
    }
}

[T,n]
Array[T,n](elt: T) --> returned:Array[T,n] {
    var first, last = begin(returned), end(returned);
    var ptr = first;
    try {
        while (ptr != last) {
            ptr^ <-- elt;
            inc(ptr);
        }
    }
    catch (e) {
        destroyMemory(first, ptr);
        throw e;
    }
}

[n, S when Sequence?(S)]
Array(#n, forward s:S) {
    alias T = SequenceElementType(S);
    return Array[T,n](s);
}



/// @section  constructor from StaticSizedSequence 

[T,n,S when StaticSizedSequence?(S)
         and (SequenceElementType(S) == T)
         and (n == StaticSize(S))]
Array[T,n](s:S) --> returned:Array[T,n] {
    var first, last = begin(returned), end(returned);
    var ptr = first;
    try {
        for (x in s) {
            ptr^ <-- x;
            inc(ptr);
        }
    }
    catch (e) {
        destroyMemory(first, ptr);
        throw e;
    }
}

[T,n,S when StaticSizedSequence?(S)
         and SequenceContainer?(S)
         and (SequenceElementType(S) == T)
         and (n == StaticSize(S))]
Array[T,n](rvalue s:S) --> returned:Array[T,n] {
    var first, last = begin(returned), end(returned);
    var ptr = first;
    try {
        for (x in s) {
            ptr^ <-- move(x);
            inc(ptr);
        }
    }
    catch (e) {
        destroyMemory(first, ptr);
        throw e;
    }
}

[S when StaticSizedSequence?(S)]
alias Array(s:S) {
    alias T = SequenceElementType(S);
    alias n = #Int(StaticSize(S));
    return Array[T,n](s);
}



/// @section  other constructors, moveUnsafe, resetUnsafe, destroy 

[T,n]
Array[T,n]() --> returned:Array[T,n] {
    initializeMemory(begin(returned), end(returned));
}

[T,n when not BitwiseCopiedType?(T)]
Array[T,n](src:Array[T,n]) --> returned:Array[T,n] {
    copyNonoverlappingMemory(begin(returned), begin(src), end(src));
}

[T,n when not BitwiseMovedType?(T)]
moveUnsafe(src:Array[T,n]) --> returned:Array[T,n] {
    moveNonoverlappingMemoryUnsafe(begin(returned), begin(src), end(src));
}

[T,n when not ResetDoesNothingType?(T)]
resetUnsafe(a:Array[T,n]) : {
    resetMemoryUnsafe(begin(a), end(a));
}

[T,n when not DestroyDoesNothingType?(T)]
destroy(a:Array[T,n]) : {
    destroyMemory(begin(a), end(a));
}



/// @section  array - type inferring constructor 

define array private overload;

[..A when countValues(..A) > 0 and equalValues?(..A)]
alias array(..args:A) {
    return Array[takeValues(#1, ..A), countValues(..A)](..args);
}

[..SS when countValues(..SS) > 0 and StringLiteralType?(..SS)]
alias array(..strings:SS) {
    return array(..mapValues(StringLiteralRef, ..strings));
}


/// @section  integerArray 

[n]
integerArray(#n) = array(..integers(#n));



/// @section  array assignment 

[T,U,n when not (T == U and BitwiseAssignedType?(T)) and CallDefined?(assign, T, U)]
assign(ref left: Array[T,n], ref right: Array[U, n]) : {
    assignNonoverlappingMemory(begin(left), begin(right), end(right));
}

[T,U,n when not (T == U and BitwiseMoveAssignedType?(T)) and CallDefined?(assign, T, U)]
assign(ref left: Array[T,n], rvalue right: Array[U, n]) : {
    moveAssignNonoverlappingMemory(begin(left), begin(right), end(right));
}





/// @section  ArrayRef
/// ArrayRef is a pair of pointers to the begin and to the end of memory area

alias ArrayRef[T] = CoordinateRange[Pointer[T]];

[T]
ArrayRef(begin: Pointer[T], end: Pointer[T]) : ArrayRef[T] = CoordinateRange(begin, end);

[T,N]
ArrayRef(a: Array[T,N]) : ArrayRef[T] = ArrayRef(begin(a), end(a));

