// import is just to make sure equals overloaded here has higher priority
import core.records.(RecordFields);


/// @section  iterator type predicates 

Iterator?(T): Bool = CallDefined?(nextValue, T);
IteratorTargetType(T) = ..Type(..getValue(nextValue(typeToLValue(T))));


/// @section  Default two-arg hasValue? 

alias hasValue?(iter, coord) : Bool = hasValue?(coord);


/// @section  pointer as iterator value 

[T] forceinline hasValue?(p:Pointer[T]) : Bool = not null?(p);
[T] forceinline getValue(p:Pointer[T]) : ByRef[T] = ref p^;


/// @section  reverse iteration 

[S when Sequence?(S)]
define reverseIterator(s:S);



/// @section  sequence protocol 

// defined for collections
define size(s): SizeT;


[S when Sequence?(S)]
define begin(s:S);

[S when Sequence?(S)]
define end(s:S);


[S when Sequence?(S)]
define front(s:S);

[S when Sequence?(S)]
define back(s:S);


[S] // when Sequence?(S)
define push(s:S, ..vs) :;

[S, Vs when Sequence?(S) and Sequence?(Vs)]
define pushAll(s:S, vs:Vs) :;

[S when Sequence?(S)]
define pop(s:S);

// defined for collections
define clear(s) :;

[S when Sequence?(S)]
define insert(s:S, coord, v) :;

[S, Vs when Sequence?(S) and Sequence?(Vs)]
define insertAll(s:S, coord, vs:Vs) :;

// defined for collections
define remove;

[S, I when Sequence?(S) and Integer?(I)]
define reserve(s:S, n:I) :;

[S, I when Sequence?(S) and Integer?(I)]
define resize(s:S, n:I) :;

[S, I when Sequence?(S) and Integer?(I)]
define resizeUnsafe(s:S, n:I) :;


[S when Sequence?(S)]
define pushFront(s:S, v) :;

[S when Sequence?(S)]
define popFront(s:S);



// default implementation using `push`
pushAll(s, vs) : {
    for (v in vs) {
        push(s, v);
    }
}

// default implementation using `insert`
insertAll(s, coord, vs) : {
    var insertPoint = coord;
    for (v in vs) {
        insert(v, insertPoint, vs);
        insertPoint +: 1;
    }
}


// defined for statically sized sequences like Array[T,n]
[S]
define StaticSize(#S);


push(s) : {}

push(s, forward v1, forward v2, forward ..vs) : {
    ..for (v in v1, v2, ..vs) {
        push(s, v);
    }
}



/// @section  sequence type predicates 

Sequence?(T): Bool = CallDefined?(iterator, T);
SequenceElementType(T) = ..Type(..getValue(nextValue(iterator(typeToLValue(T)))));
SizedSequence?(T): Bool = Sequence?(T) and CallDefined?(size, T);
StaticSizedSequence?(T) : Bool = Sequence?(T) and CallDefined?(StaticSize, Static[T]);
RandomAccessSequence?(T) : Bool  = Sequence?(T) and CallDefined?(index, T, Int);
LValueSequence?(T) : Bool = Sequence?(T) and LValue?(getValue(nextValue(iterator(typeToLValue(T)))));
RValueSequence?(T) : Bool = Sequence?(T) and RValue?(getValue(nextValue(iterator(typeToLValue(T)))));

CoordinateSequence?(T) : Bool = Sequence?(T) and CallDefined?(begin, T) and CallDefined?(end, T);
SequenceCoordinateType(T) = Type(begin(typeToLValue(T)));

SequenceIteratorType(T) = Type(iterator(typeToLValue(T)));

// true if sequence elements are stored contiguously in memory
[T]
define ContiguousSequence?(#T) : Bool;

ContiguousSequence?(T) : Bool = false;

// true if copying the sequence is efficient
[T]
define LightweightSequence?(#T) : Bool;

LightweightSequence?(T) : Bool = false;

// true for sequences which have value semantics.
[T]
define SequenceContainer?(#T) : Bool;

SequenceContainer?(T) : Bool = false;

// true if sequence is not single-valued (0 valued sequences are included).
MultiValuedSequence?(T) : Bool =
    Sequence?(T) and multiValued?(..Type(..getValue(nextValue(iterator(typeToLValue(T))))));

private define multiValued?(..x) : Bool;
multiValued?(..x) : Bool = true;
multiValued?(x) : Bool = false;



/// @section  mapping protocol 

// 'index' and 'size' are available for mappings
// 'remove' is available

// get pointer to element, null if not available
define lookup(map, key);
define put(map, key, ..value) :;
// iterate over all items
define items(map);

forceinline contains?(map, key) : Bool = not null?(lookup(map, key));





/// @section  generic equals?, lesser? 

[A,B when Sequence?(A) and Sequence?(B) and not StringLiteralType?(A,B)]
equals?(a:A, b:B) : Bool {
    var i, j = iterator(a), iterator(b);
    while (true) {
        var iv, jv = nextValue(i), nextValue(j);
        var iv?, jv? = hasValue?(iv), hasValue?(jv);
        if (iv? != jv?)
            return false;
        if (not iv?)
            return true;
        if (getValue(iv) != getValue(jv))
            return false;
    }
}

[A,B when SizedSequence?(A) and SizedSequence?(B) and not StringLiteralType?(A,B)]
equals?(a:A, b:B) : Bool {
    if (size(a) != size(b))
        return false;
    var i, j = iterator(a), iterator(b);
    while (true) {
        var iv, jv = nextValue(i), nextValue(j);
        if (not hasValue?(iv))
            return true;
        if (getValue(iv) != getValue(jv))
            return false;
    }
}


[A,B when Sequence?(A) and Sequence?(B)]
lesser?(a:A, b:B) : Bool {
    var i, j = iterator(a), iterator(b);
    while (true) {
        var iv, jv = nextValue(i), nextValue(j);
        var iv?, jv? = hasValue?(iv), hasValue?(jv);
        if (not iv?)
            return jv?;
        if (not jv?)
            return false;

        forward x, y = getValue(iv), getValue(jv);
        if (x != y)
            return x < y;
    }
}


/// @section  empty? 

[T when SizedSequence?(T)]
forceinline empty?(a:T) : Bool = (size(a) == 0);


