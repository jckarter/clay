
alias ExternalException = Pointer[Maybe[Exception]];

// impl_fn(a:A, b:B, ..) x:X, y:Y, ..
// external_fn(ex:ExternalException, a:Pointer[A], b:Pointer[B], .., outX:Pointer[X], outY:Pointer[Y]) 
//    = ..wrapAsExternal(impl_fn, ..);
// fn(a:A, b:B, ..) x:X, y:Y, ..
//    = ..callExternal(external_fn, ..);

[inCount]
inline wrapAsExternal(impl_fn, #inCount, exp:ExternalException, ..inoutp) {
    try {
        ..mapValues(dereference, ..dropValues(#inCount, ..inoutp))
            <-- ..impl_fn(..mapValues(dereference, ..takeValues(#inCount, ..inoutp)));
        exp^ <-- nothing(Exception);
    } catch (ex) {
        exp^ <-- Maybe(ex);
    }
}

[T] private unpointer(#Pointer[T]) = T;

[..IO, ..T when
    [..T] == [..mapValues(unpointer, ..takeValues(#countValues(..T), ..IO))]
]
inline callExternal(
    external_fn:CCodePointer[[ExternalException, ..IO], []],
    ..args:T
)
    --> ..out:mapValues(unpointer, ..dropValues(#countValues(..T), ..IO))
{
    var ex = uninitializedUnsafe(Maybe[Exception]);
    external_fn(..mapValues(addressOf, ex, ..args, ..out));

    maybe(ex, e => { throw e; });
}
