import printer.(printTo,printReprTo,printReprArgumentsTo);
import sharedpointers.*;


/// @section  reference type properties 


define ReferenceType?;
ReferenceType?(x) = false;

define ReferenceTypeFieldCount;
define ReferenceTypeFieldNames;
define ReferenceTypeFieldTypes;



/// @section  reference type type-definers 

[..F when (countValues(..F) > 0)]
referenceTypeWithProperties(properties, ..fields:F) = recordWithProperties(
    [
        [RegularRecord?, #false],
        [ReferenceType?, #true],
        [ReferenceTypeFieldCount, #countValues(..F)],
        [ReferenceTypeFieldNames, ..mapValues(x => x.0, ..fields)],
        [ReferenceTypeFieldTypes, ..mapValues(x => x.1, ..fields)],
        ..unpack(properties),
    ],
    ["ptr", SharedPointer[Tuple[..mapValues(x => x.1, ..fields)]]],
);

[..F when (countValues(..F) > 0)]
referenceTypeWithProperty(property, ..fields:F) =
    referenceTypeWithProperties([property], ..fields);

[..F when (countValues(..F) > 0)]
referenceTypeWithPredicate(predicate, ..fields:F) =
    referenceTypeWithProperty([predicate, #true], ..fields);

[..F when (countValues(..F) > 0)]
referenceType(..fields:F) = referenceTypeWithProperties([], ..fields);



/// @section  referencePtr 

[T when ReferenceType?(T)]
forceinline referencePtr(x:T) =
    ref ..recordFieldRef(x, #0);



/// @section  fieldRef, staticIndex 

[T when ReferenceType?(T)]
fieldRef(x:T, field);

[T when ReferenceType?(T)]
staticIndex(x:T, i);


[T, Field when ReferenceType?(T)]
private fieldNameIndex(#T, #Field) =
    findField(#0, #Field, ..ReferenceTypeFieldNames(T));

private define findField;

[pos]
findField(#pos, field, first, ..rest) =
    findField(#pos+1, field, ..rest);

[pos, F]
findField(#pos, #F, #F, ..rest) = pos;

[pos]
findField(#pos, field) = -1;


[T, i when ReferenceType?(T) and (i >= 0) and (i < ReferenceTypeFieldCount(T))]
staticIndex(x:T, #i) =
    ref staticIndex(referencePtr(x)^, #i);

[T, Field when ReferenceType?(T) and (fieldNameIndex(T, Field) >= 0)]
fieldRef(x:T, #Field) =
    ref staticIndex(x, #fieldNameIndex(T, Field));



/// @section  referenceTypeFields 

[T when ReferenceType?(T)]
referenceTypeFields(x:T) = ref ..tupleElements(referencePtr(x)^);



/// @section  default constructor 

[T when ReferenceType?(T)]
T() --> returned:T {
    initialize(referencePtr(returned));
}



/// @section  field order constructor 

[T, ..A when ReferenceType?(T) and (Tuple[..A] == Tuple[..ReferenceTypeFieldTypes(T)])]
alias T(..args:A) --> returned:T {
    referencePtr(returned) <-- new(Tuple(..args));
}



/// @section  allocateRef 

[T when ReferenceType?(T)]
allocateRef(#T) --> returned:T {
    referencePtr(returned) <-- new(Tuple[..ReferenceTypeFieldTypes(T)]());
}

[T when ReferenceType?(T)]
allocateUninitializedRefUnsafe(#T) --> returned:T {
    alias InnerType = Tuple[..ReferenceTypeFieldTypes(T)];
    referencePtr(returned) <-- SharedPointer[InnerType](allocateRawMemory(RefCounted[InnerType], 1));
    referencePtr(returned).ptr^.refCount = 1;
}



/// @section  copy constructor 

[T when ReferenceType?(T)]
T(src:T) --> returned:T {
    referencePtr(returned) <-- referencePtr(src);
}



/// @section  moveUnsafe, resetUnsafe 

[T when ReferenceType?(T)]
BitwiseMovedType?(#T) = true;

[T when ReferenceType?(T)]
resetUnsafe(x:T) {
    resetUnsafe(referencePtr(x));
}



/// @section  destroy, assign 

[T when ReferenceType?(T)]
destroy(x:T) {
    destroy(referencePtr(x));
}

[T when ReferenceType?(T)]
assign(ref dest:T, ref src:T) {
    assign(referencePtr(dest), referencePtr(src));
}



/// @section  equals?, lesser? 

[T when ReferenceType?(T)]
equals?(a:T, b:T) {
    return equals?(referencePtr(a), referencePtr(b));
}

[T when ReferenceType?(T)]
lesser?(a:T, b:T) {
    return lesser?(referencePtr(a), referencePtr(b));
}



/// @section  null? 

[T when ReferenceType?(T)]
null?(x:T) = null?(referencePtr(x));



/// @section  is? 

[T when ReferenceType?(T)]
is?(x:T, y:T) = referencePtr(x) == referencePtr(y);




/// @section  printTo - reference types 

[T when ReferenceType?(T)]
printTo(stream, x:T) {
    if (null?(x)) {
        printTo(stream, "null");
        return;
    }
    printTo(stream, T, "(", ..weaveValues(", ", ..referenceTypeFields(x)), ")");
}


/// @section  printReprTo - reference types 

[T when ReferenceType?(T)]
printReprTo(stream, x:T) {
    // FIXME: handle cycles
    if (null?(x)) {
        printTo(stream, "null");
        return;
    }
    printTo(stream, T);
    printReprArgumentsTo(stream, ..referenceTypeFields(x));
}

