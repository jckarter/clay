

//
// reference type properties
//


define ReferenceType?;
overload ReferenceType?(x) = false;

define ReferenceTypeFieldCount;
define ReferenceTypeFieldNames;
define ReferenceTypeFieldTypes;



//
// reference type type-definers
//

[..F when (countValues(..F) > 0)]
referenceTypeWithProperties(properties, ..fields:F) = recordWithProperties(
    [
        [RegularRecord?, #false],
        [ReferenceType?, #true],
        [ReferenceTypeFieldCount, #countValues(..F)],
        [ReferenceTypeFieldNames, ..mapValues(x => x.0, ..fields)],
        [ReferenceTypeFieldTypes, ..mapValues(x => x.1, ..fields)],
        ..unpack(properties),
    ],
    ["ptr", SharedPointer[Tuple[..mapValues(x => x.1, ..fields)]]],
);

[..F when (countValues(..F) > 0)]
referenceTypeWithProperty(property, ..fields:F) =
    referenceTypeWithProperties([property], ..fields);

[..F when (countValues(..F) > 0)]
referenceTypeWithPredicate(predicate, ..fields:F) =
    referenceTypeWithProperty([predicate, #true], ..fields);

[..F when (countValues(..F) > 0)]
referenceType(..fields:F) = referenceTypeWithProperties([], ..fields);



//
// referencePtr
//

[T when ReferenceType?(T)]
inline referencePtr(x:T) =
    ref recordFieldRef(x, #0);



//
// fieldRef, staticIndex
//

[T when ReferenceType?(T)]
overload fieldRef(x:T, field);

[T when ReferenceType?(T)]
overload staticIndex(x:T, i);


[T, Field when ReferenceType?(T)]
private fieldNameIndex(#T, #Field) =
    findField(#0, #Field, ..ReferenceTypeFieldNames(T));

[pos]
private findField(#pos, field, first, ..rest) =
    findField(#pos+1, field, ..rest);

[pos, F]
overload findField(#pos, #F, #F, ..rest) = pos;

[pos]
overload findField(#pos, field) = -1;


[T, i when ReferenceType?(T) and (i >= 0) and (i < ReferenceTypeFieldCount(T))]
overload staticIndex(x:T, #i) =
    ref staticIndex(referencePtr(x)^, #i);

[T, Field when ReferenceType?(T) and (fieldNameIndex(T, Field) >= 0)]
overload fieldRef(x:T, #Field) =
    ref staticIndex(x, #fieldNameIndex(T, Field));



//
// referenceTypeFields
//

[T when ReferenceType?(T)]
referenceTypeFields(x:T) = ref ..tupleElements(referencePtr(x)^);



//
// default constructor
//

[T when ReferenceType?(T)]
overload T() --> returned:T {
    initialize(referencePtr(returned));
}



//
// field order constructor
//

[T, ..A when ReferenceType?(T) and (Tuple[..A] == Tuple[..ReferenceTypeFieldTypes(T)])]
alias overload T(..args:A) --> returned:T {
    referencePtr(returned) <-- new(Tuple(..args));
}



//
// allocateRef
//

[T when ReferenceType?(T)]
allocateRef(#T) --> returned:T {
    referencePtr(returned) <-- new(Tuple[..ReferenceTypeFieldTypes(T)]());
}

[T when ReferenceType?(T)]
allocateUninitializedRefUnsafe(#T) --> returned:T {
    alias InnerType = Tuple[..ReferenceTypeFieldTypes(T)];
    referencePtr(returned) <-- SharedPointer[InnerType](allocateRawMemory(RefCounted[InnerType], 1));
    referencePtr(returned).ptr^.refCount = 1;
}



//
// copy constructor
//

[T when ReferenceType?(T)]
overload T(src:T) --> returned:T {
    referencePtr(returned) <-- referencePtr(src);
}



//
// moveUnsafe, resetUnsafe
//

[T when ReferenceType?(T)]
overload BitwiseMovedType?(#T) = true;

[T when ReferenceType?(T)]
overload resetUnsafe(x:T) {
    resetUnsafe(referencePtr(x));
}



//
// destroy, assign
//

[T when ReferenceType?(T)]
overload destroy(x:T) {
    destroy(referencePtr(x));
}

[T when ReferenceType?(T)]
overload assign(ref dest:T, ref src:T) {
    assign(referencePtr(dest), referencePtr(src));
}



//
// equals?, lesser?
//

[T when ReferenceType?(T)]
overload equals?(a:T, b:T) {
    return equals?(referencePtr(a), referencePtr(b));
}

[T when ReferenceType?(T)]
overload lesser?(a:T, b:T) {
    return lesser?(referencePtr(a), referencePtr(b));
}



//
// null?
//

[T when ReferenceType?(T)]
overload null?(x:T) = null?(referencePtr(x));



//
// is?
//

[T when ReferenceType?(T)]
overload is?(x:T, y:T) = referencePtr(x) == referencePtr(y);
