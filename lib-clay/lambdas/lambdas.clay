// main constructor


/// @section  Function 

record Function[In, Out] (
    obj : Pointer[Opaque],
    code : CodePointer[[Opaque, ..unpack(In)], Out],
    destructor : CodePointer[[Opaque],[]],
);

[..I, ..O]
overload RegularRecord?(#Function[[..I], [..O]]) = false;

[..I, ..O]
overload BitwiseMovedType?(#Function[[..I], [..O]]) = true;

private define Function?(T) : Bool;
overload Function?(T) = false;
[..I, ..O]
overload Function?(#Function[[..I], [..O]]) = true;

[..I, ..O]
overload call(x:Function[[..I], [..O]], forward ..args:I) : ..O {
    return forward ..x.code(x.obj^, ..args);
}

[..I, ..O]
overload Function[[..I], [..O]]() --> returned:Function[[..I], [..O]] {
    returned.obj <-- Type(returned.obj)();
    returned.code <-- Type(returned.code)();
    returned.destructor <-- Type(returned.destructor)();
}

/* this comes before Function[In, Out] so that the shim isn't constructed if the object
   natively returns no values */
[..In, T when CallDefined?(call, T, ..In) and not Function?(T)]
overload Function[[..In], []](x:T) {
    return Function[[..In],[]]((forward ..args) => { x(..args); });
}

[..I, ..O, T when CallDefined?(call, T, ..I) and not Function?(T)]
overload Function[[..I],[..O]](x:T) --> returned:Function[[..I],[..O]] {
    var codePtr = makeCodePointer(call, T, ..I);
    var destructor = makeCodePointer(destroy, T);
    returned.code = CodePointer[[Opaque, ..I], [..O]](codePtr);
    returned.destructor = CodePointer[[Opaque],[]](destructor);

    var ptr = allocateRawMemoryAligned(T, 1, TypeAlignment(T));
    try {
        ptr^ <-- x;
    }
    catch (e) {
        freeRawMemoryAligned(ptr);
        throw e;
    }
    returned.obj = Pointer[Opaque](ptr);
}

[T when MonoType?(T) and not Function?(T)]
overload Function(x:T) {
    return Function[[..MonoInputTypes(x)],[..MonoOutputTypes(x)]](x);
}

[T] private define CallableWithSignature?(#T, In, Out) : Bool;

[T] overload CallableWithSignature?(#T, In, Out) = false;

[T, I, O when CallDefined?(call, T, ..unpack(I()))]
overload CallableWithSignature?(#T, In:I, Out:O) {
    var CodePtr = Type(makeCodePointer(call, T, ..unpack(In)));
    return Out == CodePointerReturnTypes(CodePtr);
}


[In,..Out]
private CodePointerReturnTypes(#CodePointer[In,[..Out]]) = [..Out];

[In, Out]
overload resetUnsafe(x:Function[In, Out]) {
    x <-- Function[In, Out]();
}

[In, Out]
overload destroy(x:Function[In, Out]) {
    if (not null?(x.obj)) {
        x.destructor(x.obj^);
        freeRawMemoryAligned(x.obj);
    }
}

staticassert(     Movable?(Type(Function(() -> {}))));
staticassert(not Copyable?(Type(Function(() -> {}))));


// makeFunction

[T]
makeFunction(forward x:T, ..In) {
    var CodePtr = Type(makeCodePointer(call, T, ..In));
    var Out = CodePointerReturnTypes(CodePtr);
    return Function[[..In],Out](x);
}


// call operator

[..I, ..O]
alias overload MonoInputTypes(x:Function[[..I], [..O]]) = ..I;

