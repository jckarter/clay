
import sharedpointers.*;


/// @section  Function - polymorphic callable object container 

record Function[In,Out] (
    body : SharedPointer[FunctionBody[In,Out]]
);


// main constructor

/* this comes before Function[In, Out] so that the shim isn't constructed if the object
   natively returns no values */
[..In, T when CallDefined?(call, T, ..In)]
alias Function[[..In], []](x:T) {
    return Function[[..In],[]](new(FunctionBody[[..In],[]]((forward ..args) => { x(..args); })));
}

[In, Out, T when CallableWithSignature?(T, In, Out)]
alias Function[In, Out](x:T) {
    return Function[In,Out](new(FunctionBody[In,Out](x)));
}

[T when MonoType?(T)]
alias Function(x:T) {
    return Function[[..MonoInputTypes(x)],[..MonoOutputTypes(x)]](x);
}

[T] private define CallableWithSignature?(#T, In, Out) : Bool;

[T] CallableWithSignature?(#T, In, Out) = false;

[T, I, O when CallDefined?(call, T, ..unpack(I()))]
CallableWithSignature?(#T, In:I, Out:O) {
    var CodePtr = Type(makeCodePointer(call, T, ..unpack(In)));
    return Out == CodePointerReturnTypes(CodePtr);
}


[In,..Out]
private CodePointerReturnTypes(#CodePointer[In,[..Out]]) = [..Out];


// redefine constructors shadowed by the primary constructor

[In,Out]
alias Function[In,Out](body : SharedPointer[FunctionBody[In,Out]]) --> returned:Function[In,Out] {
    returned.body <-- body;
}

[In,Out]
Function[In,Out](x : Function[In,Out]) --> returned:Function[In,Out] {
    returned.body <-- x.body;
}


// makeFunction

[T]
makeFunction(forward x:T, ..In) {
    var CodePtr = Type(makeCodePointer(call, T, ..In));
    var Out = CodePointerReturnTypes(CodePtr);
    return Function[[..In],Out](x);
}


// call operator

[..I, ..O]
call(x:Function[[..I], [..O]], forward ..args:I) : ..O {
    return forward call(x.body^, ..args);
}

[..I, ..O]
alias MonoInputTypes(x:Function[[..I], [..O]]) = ..I;


/// @section  FunctionBody 

record FunctionBody[In, Out] (
    obj : Pointer[Opaque],
    code : CodePointer[[Opaque, ..unpack(In)], Out],
    destructor : CodePointer[[Opaque],[]],
);

[..I, ..O]
call(x:FunctionBody[[..I], [..O]], forward ..args:I) : ..O {
    return forward ..x.code(x.obj^, ..args);
}

[..I, ..O, T]
alias FunctionBody[[..I],[..O]](x:T) --> returned:FunctionBody[[..I],[..O]] {
    var codePtr = makeCodePointer(call, T, ..I);
    var destructor = makeCodePointer(destroy, T);
    returned.code = CodePointer[[Opaque, ..I], [..O]](codePtr);
    returned.destructor = CodePointer[[Opaque],[]](destructor);

    var ptr = allocateRawMemoryAligned(T, 1, TypeAlignment(T));
    try {
        ptr^ <-- x;
    }
    catch (e) {
        freeRawMemoryAligned(ptr);
        throw e;
    }
    returned.obj = Pointer[Opaque](ptr);
}

[In, Out]
destroy(x:FunctionBody[In, Out]) {
    x.destructor(x.obj^);
    freeRawMemoryAligned(x.obj);
}

