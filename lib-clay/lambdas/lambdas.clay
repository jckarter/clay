import __operators__.(
    packMultiValuedFreeVar,
    packMultiValuedFreeVarByRef,
    unpackMultiValuedFreeVar,
    unpackMultiValuedFreeVarAndDereference,
);


//
// Function - polymorphic callable object container
//

record Function[In,Out] (
    body : SharedPointer[FunctionBody[In,Out]]
);


// main constructor

[In, Out, T when CallableWithSignature?(T, In, Out)]
alias overload Function[In, Out](x:T) {
    return Function[In,Out](new(FunctionBody[In,Out](x)));
}

[T when MonoType?(T)]
alias overload Function(x:T) {
    return Function[[..MonoInputTypes(x)],[..MonoOutputTypes(x)]](x);
}

private CallableWithSignature?(T, In, Out) {
    var CodePtr = Type(makeCodePointer(call, T, ..unpack(In)));
    return Out == CodePointerReturnTypes(CodePtr);
}

[In,..Out]
private CodePointerReturnTypes(#CodePointer[In,[..Out]]) = [..Out];


// redefine constructors shadowed by the primary constructor

[In,Out]
alias overload Function[In,Out](body : SharedPointer[FunctionBody[In,Out]]) --> returned:Function[In,Out] {
    returned.body <-- body;
}

[In,Out]
overload Function[In,Out](x : Function[In,Out]) --> returned:Function[In,Out] {
    returned.body <-- x.body;
}


// makeFunction

[T]
makeFunction(forward x:T, ..In) {
    var CodePtr = Type(makeCodePointer(call, T, ..In));
    var Out = CodePointerReturnTypes(CodePtr);
    return Function[[..In],Out](x);
}


// call operator

[..I, ..O]
overload call(x:Function[[..I], [..O]], forward ..args:I) : ..O {
    return forward ..x.body^.code(x.body^.obj^, ..args);
}

[..I, ..O]
alias overload MonoInputTypes(x:Function[[..I], [..O]]) = ..I;


//
// FunctionBody
//

private record FunctionBody[In, Out] (
    obj : Pointer[Opaque],
    code : CodePointer[[Opaque, ..unpack(In)], Out],
    destructor : CodePointer[[Opaque],[]],
);

[..I, ..O, T]
alias overload FunctionBody[[..I],[..O]](x:T) --> returned:FunctionBody[[..I],[..O]] {
    var codePtr = makeCodePointer(call, T, ..I);
    var destructor = makeCodePointer(destroy, T);
    returned.code = CodePointer[[Opaque, ..I], [..O]](codePtr);
    returned.destructor = CodePointer[[Opaque],[]](destructor);

    var ptr = allocateRawMemoryAligned(T, 1, TypeAlignment(T));
    try {
        ptr^ <-- x;
    }
    catch (e) {
        freeRawMemoryAligned(ptr);
        throw e;
    }
    returned.obj = Pointer[Opaque](ptr);
}

[In, Out]
overload destroy(x:FunctionBody[In, Out]) {
    x.destructor(x.obj^);
    freeRawMemoryAligned(x.obj);
}



//
// operator functions for closure conversion
//

overload packMultiValuedFreeVar(..x) = [..x];

overload packMultiValuedFreeVarByRef(..x) =
    Tuple(..mapValues(addressOf, ..x));

overload unpackMultiValuedFreeVar(x) = forward ..unpackRef(x);

overload unpackMultiValuedFreeVarAndDereference(x) =
    forward ..mapValues(dereference, ..unpack(x));
