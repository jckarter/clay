import numbers.parser.*;
import numbers.floats.*;
import numbers.overflow.*;


//
// numeric type predicates
//

[T] SignedInteger?(#T) = false;
overload SignedInteger?(#Int8) = true;
overload SignedInteger?(#Int16) = true;
overload SignedInteger?(#Int32) = true;
overload SignedInteger?(#Int64) = true;
overload SignedInteger?(#Int128) = true;


[T] UnsignedInteger?(#T) = false;
overload UnsignedInteger?(#UInt8) = true;
overload UnsignedInteger?(#UInt16) = true;
overload UnsignedInteger?(#UInt32) = true;
overload UnsignedInteger?(#UInt64) = true;
overload UnsignedInteger?(#UInt128) = true;


[T] Integer?(#T) = SignedInteger?(T) or UnsignedInteger?(T);
[A, B] overload Integer?(#A, #B) = Integer?(A) and Integer?(B);


[T] ByteSizedInteger?(#T) = false;
overload ByteSizedInteger?(#Int8) = true;
overload ByteSizedInteger?(#UInt8) = true;

[T] Float?(#T) = false;
overload Float?(#Float32) = true;
overload Float?(#Float64) = true;
overload Float?(#Float80) = true;
[A, B] overload Float?(#A, #B) = Float?(A) and Float?(B);

[T] Imaginary?(#T) = false;
overload Imaginary?(#Imag32) = true;
overload Imaginary?(#Imag64) = true;
overload Imaginary?(#Imag80) = true;
[A, B] overload Imaginary?(#A, #B) = Imaginary?(A) and Imaginary?(B);

[T] Numeric?(#T) = Integer?(T) or Float?(T) or Imaginary?(T);
[A, B] overload Numeric?(#A, #B) = Numeric?(A) and Numeric?(B);



//
// BiggerInteger?, BiggerFloat?, BiggerNumeric?
//

[A,B when Integer?(A,B)]
private BiggerInteger?(#A, #B) =
    (TypeSize(A) > TypeSize(B)) or ((TypeSize(A) == TypeSize(B)) and
                                    UnsignedInteger?(A) and
                                    SignedInteger?(B));

private define BiggerFloat?;

[A,B when Float?(A,B) or Imaginary?(A,B)]
overload BiggerFloat?(#A, #B) = TypeSize(A) > TypeSize(B);

[A,B when (Float?(A) and Imaginary?(B)) or (Float?(B) and Imaginary?(A))]
overload BiggerFloat?(#A, #B) = TypeSize(A) > TypeSize(B);


private define BiggerNumeric?;

[A,B when (Float?(A) or Imaginary?(A)) and Integer?(B)]
overload BiggerNumeric?(#A, #B) = true;

[A,B when Integer?(A) and (Float?(B) or Imaginary?(B))]
overload BiggerNumeric?(#A, #B) = false;

[A,B when Integer?(A,B)]
overload BiggerNumeric?(#A, #B) = BiggerInteger?(A,B);

[A,B when Float?(A,B) or Imaginary?(A,B)]
overload BiggerNumeric?(#A, #B) = BiggerFloat?(A,B);

[A,B when (Float?(A) and Imaginary?(B)) or (Float?(B) and Imaginary?(A))]
overload BiggerNumeric?(#A, #B) = BiggerFloat?(A,B);




//
// toBiggerNumericType
//

define toBiggerNumericType;

[A when Numeric?(A)]
inline overload toBiggerNumericType(#A, #A, v) = v;

[A,B when Numeric?(A,B) and BiggerNumeric?(A,B)]
inline overload toBiggerNumericType(#A, #B, v) = numericConvert(A,v);

[A,B when Numeric?(A,B) and BiggerNumeric?(B,A)]
inline overload toBiggerNumericType(#A, #B, v) = numericConvert(B,v);

define wrapToBiggerNumericType;

[A when Numeric?(A)]
inline overload wrapToBiggerNumericType(#A, #A, v) = v;

[A,B when Numeric?(A,B) and BiggerNumeric?(A,B)]
inline overload wrapToBiggerNumericType(#A, #B, v) = wrapCast(A, v);

[A,B when Numeric?(A,B) and BiggerNumeric?(B,A)]
inline overload wrapToBiggerNumericType(#A, #B, v) = wrapCast(B, v);

ImagBaseType(#Imag32) = Float;
overload ImagBaseType(#Imag64) = Double;
overload ImagBaseType(#Imag80) = LongDouble;



//
// constructors
//

[T when Numeric?(T)]
inline overload T() = numericConvert(T, 0);

[T1,T2 when Numeric?(T1,T2)]
inline overload T1(src:T2) = numericConvert(T1, src);

[T,I when Float?(T) and Imaginary?(I)]
inline overload T(a:I) = T(0.);

[T,I when Float?(T) and Imaginary?(I)]
inline overload I(a:T) = I(0.j);



//
// assign
//

[A, B when Numeric?(A,B) and BiggerNumeric?(A,B)]
inline overload assign(ref dest:A, src:B) {
    bitcopy(dest, numericConvert(A,src));
}

[A, B when Integer?(A,B) and (TypeSize(A) == TypeSize(B))]
inline overload assign(ref dest:A, src:B) {
    bitcopy(dest, A(src));
}



//
// equals?,  notEquals?, lesser?, lesserEquals?, greater?, greaterEquals?
//

[A,B when Numeric?(A,B)]
inline overload (==)(a:A, b:B) =
    (==)(toBiggerNumericType(A, B, a), toBiggerNumericType(A, B, b));

[A when Numeric?(A)]
inline overload (==)(a:A, b:A) = integerEquals?(a, b);

[A when Float?(A) or Imaginary?(A)]
inline overload (==)(a:A, b:A) = floatOrderedEquals?(a, b);


[A, B when Numeric?(A, B)]
inline overload (!=)(a:A, b:B) =
    (!=)(toBiggerNumericType(A, B, a), toBiggerNumericType(A, B, b));

[A when Numeric?(A)]
inline overload (!=)(a:A, b:A) = not (==)(a, b);

[A when Float?(A) or Imaginary?(A)]
inline overload (!=)(a:A, b:A) = floatUnorderedNotEquals?(a, b);


[A,B when Numeric?(A,B)]
inline overload (<)(a:A, b:B) =
    (<)(toBiggerNumericType(A, B, a), toBiggerNumericType(A, B, b));

[A when Numeric?(A)]
inline overload (<)(a:A, b:A) = integerLesser?(a, b);

[A when Float?(A) or Imaginary?(A)]
inline overload (<)(a:A, b:A) = floatOrderedLesser?(a, b);


[A, B when Numeric?(A, B)]
inline overload (<=)(a:A, b:B) =
    (<=)(toBiggerNumericType(A, B, a), toBiggerNumericType(A, B, b));

[A when Numeric?(A)]
inline overload (<=)(a:A, b:A) = not (<)(b, a);

[A when Float?(A) or Imaginary?(A)]
inline overload (<=)(a:A, b:A) = floatOrderedLesserEquals?(a, b);


[A,B when Numeric?(A,B)]
inline overload (>)(a:A, b:B) =
    (>)(toBiggerNumericType(A, B, a), toBiggerNumericType(A, B, b));

[A when Numeric?(A)]
inline overload (>)(a:A, b:A) = (<)(b, a);

[A when Float?(A) or Imaginary?(A)]
inline overload (>)(a:A, b:A) = floatOrderedGreater?(a, b);


[A, B when Numeric?(A, B)]
inline overload (>=)(a:A, b:B) =
    (>=)(toBiggerNumericType(A, B, a), toBiggerNumericType(A, B, b));

[A when Numeric?(A)]
inline overload (>=)(a:A, b:A) = not (<)(a, b);

[A when Float?(A) or Imaginary?(A)]
inline overload (>=)(a:A, b:A) = floatOrderedGreaterEquals?(a, b);

inline inRange?(x,l,u) =  (<)(x,u) and (<=)(l,x);

inline inRangeEquals?(x,l,u) =  (<=)(x,u) and (<=)(l,x);

[T when Numeric?(T)]
inline zero?(x:T) = (==)(x, T(0));



//
// binary ops
//

[A,B when Numeric?(A,B)]
inline overload (+)(a:A, b:B) =
    (+)(toBiggerNumericType(A, B, a), toBiggerNumericType(A, B, b));

[A when Numeric?(A)]
inline overload (+)(a:A, b:A) = numericAdd(a, b);


[A,B when Numeric?(A,B)]
inline overload (-)(a:A, b:B) =
    (-)(toBiggerNumericType(A, B, a), toBiggerNumericType(A, B, b));

[A when Numeric?(A)]
inline overload (-)(a:A, b:A) = numericSubtract(a, b);


[A,B when Numeric?(A,B)]
inline overload (*)(a:A, b:B) =
    (*)(toBiggerNumericType(A, B, a), toBiggerNumericType(A, B, b));

[A when Numeric?(A)]
inline overload (*)(a:A, b:A) = numericMultiply(a, b);


[A,B when Float?(A,B)]
inline overload (/)(a:A, b:B) =
    (/)(toBiggerNumericType(A, B, a), toBiggerNumericType(A, B, b));

[A when Float?(A)]
inline overload (/)(a:A, b:A) = floatDivide(a, b);

[A,B when Integer?(A,B)]
inline overload (\)(a:A, b:B) =
    (\)(toBiggerNumericType(A, B, a), toBiggerNumericType(A, B, b));

[A when Integer?(A)]
inline overload (\)(a:A, b:A) = integerQuotient(a, b);

[A,B when Integer?(A,B)]
inline overload (%)(a:A, b:B) =
    (%)(toBiggerNumericType(A, B, a), toBiggerNumericType(A, B, b));

[A when Integer?(A)]
inline overload (%)(a:A, b:A) = integerRemainder(a, b);

//
// Variadic ops
//

[A, ..AA when countValues(..AA) != 1]
inline overload (+)(a:A, ..aa:AA) = foldlValues((+), a, ..aa);

[A, ..AA when countValues(..AA) != 1]
inline overload (-)(a:A, ..aa:AA) = foldlValues((-), a, ..aa);

[A, ..AA when countValues(..AA) != 1]
inline overload (*)(a:A, ..aa:AA) = foldlValues((*), a, ..aa);

[A, ..AA when countValues(..AA) != 1]
inline overload (/)(a:A, ..aa:AA) = foldlValues((/), a, ..aa);

[A, ..AA when countValues(..AA) != 1]
inline overload (\)(a:A, ..aa:AA) = foldlValues((\), a, ..aa);

[A, ..AA when countValues(..AA) != 1]
inline overload (%)(a:A, ..aa:AA) = foldlValues((%), a, ..aa);

//
// Imaginary binary ops
//


[A,B when Numeric?(A) and Imaginary?(B)]
inline overload (*)(a:A, b:B) = numericMultiply(numericConvert(B,a), b);

[A,B when Numeric?(B) and Imaginary?(A)]
inline overload (*)(a:A, b:B) = numericMultiply(a, numericConvert(A,b));

[A when Imaginary?(A)]
inline overload (*)(a:A, b:A) = numericConvert(ImagBaseType(A),(-)(numericMultiply(a, b)));

[A,B when Numeric?(A) and Imaginary?(B)]
inline overload (/)(a:A, b:B) = (/)(numericConvert(B,-a), b);

[A,B when Numeric?(B) and Imaginary?(A)]
inline overload (/)(a:A, b:B) = (/)(a, numericConvert(A,b));

[A when Imaginary?(A)]
inline overload (/)(a:A, b:A) = numericConvert(ImagBaseType(A),floatDivide(a, b));


//
// unary ops
//

[A when Numeric?(A)]
inline overload (+)(a:A) = a;

[A when Numeric?(A) and not UnsignedInteger?(A)]
inline overload (-)(a:A) = numericNegate(a);



//
// inc, dec
//

[A when Numeric?(A)]
inline overload inc(a:A) {
    a +: A(1);
}

[A when Numeric?(A)]
inline overload dec(a:A) {
    a -: A(1);
}



//
// bitwise ops
//

[A,B when Integer?(A,B)]
inline overload (<<)(a:A, b:B) = integerShiftLeft(a, A(b));

[A,B when Integer?(A,B)]
inline overload (>>)(a:A, b:B) = integerShiftRight(a, A(b));

[A,B when Integer?(A,B)]
inline overload (&)(a:A, b:B) =
    integerBitwiseAnd(wrapToBiggerNumericType(A, B, a),
                      wrapToBiggerNumericType(A, B, b));

[A when Integer?(A)]
inline overload (&)(a:A, b:A) = integerBitwiseAnd(a, b);

[A,B when Integer?(A,B)]
inline overload (|)(a:A, b:B) =
    integerBitwiseOr(wrapToBiggerNumericType(A, B, a),
                     wrapToBiggerNumericType(A, B, b));

[A when Integer?(A)]
inline overload (|)(a:A, b:A) = integerBitwiseOr(a, b);

[A,B when Integer?(A,B)]
inline overload (~)(a:A, b:B) =
    integerBitwiseXor(wrapToBiggerNumericType(A, B, a),
                      wrapToBiggerNumericType(A, B, b));

[A when Integer?(A)]
inline overload (~)(a:A, b:A) = integerBitwiseXor(a, b);

[A when Integer?(A)]
inline overload (~)(a:A) = integerBitwiseNot(a);



//
// parse numbers from strings
//

[S when String?(S)]
inline overload Int8(s:S)  = parseInt8(s);

[S when String?(S)]
inline overload Int16(s:S) = parseInt16(s);

[S when String?(S)]
inline overload Int32(s:S) = parseInt32(s);

[S when String?(S)]
inline overload Int64(s:S) = parseInt64(s);

[S when String?(S)]
inline overload UInt8(s:S)  = parseUInt8(s);

[S when String?(S)]
inline overload UInt16(s:S) = parseUInt16(s);

[S when String?(S)]
inline overload UInt32(s:S) = parseUInt32(s);

[S when String?(S)]
inline overload UInt64(s:S) = parseUInt64(s);

[S when String?(S)]
inline overload Float32(s:S) = parseFloat32(s);

[S when String?(S)]
inline overload Float64(s:S) = parseFloat64(s);

[S when String?(S)]
inline overload Float80(s:S) = parseFloat80(s);

[S when String?(S)]
inline overload Imag32(s:S) = parseImag32(s);

[S when String?(S)]
inline overload Imag64(s:S) = parseImag64(s);

[S when String?(S)]
inline overload Imag80(s:S) = parseImag80(s);



//
// octal()

[T,I when Integer?(T) and StringLiteral?(I)]
private _octal(#T, #I)
    = #foldlValues((n,d) -> T(8)*T(n) + T(d - 0x30), T(0), ..stringLiteralBytes(I));

define octal;
overload octal(T, I) = unwrapStatic(_octal(T, I));
overload octal(I) = octal(Int, I);


//
// overflow-checked math
//

IntegerOverflowChecks?() = AllAssertionsEnabled?()
    and AssertionEnabled?("overflowChecks");

[A when Integer?(A) and IntegerOverflowChecks?()]
inline overload (+)(a:A, b:A) : A
    = integerAddChecked(a, b);
[A when Integer?(A) and IntegerOverflowChecks?()]
inline overload (-)(a:A, b:A) : A
    = integerSubtractChecked(a, b);
[A when Integer?(A) and IntegerOverflowChecks?()]
inline overload (*)(a:A, b:A) : A
    = integerMultiplyChecked(a, b);
[A when Integer?(A) and IntegerOverflowChecks?()]
inline overload (\)(a:A, b:A) : A
    = integerQuotientChecked(a, b);
[A when Integer?(A) and IntegerOverflowChecks?()]
inline overload (%)(a:A, b:A) : A
    = integerRemainderChecked(a, b);

[A, B when Integer?(A, B) and IntegerOverflowChecks?()]
inline overload bitshl(a:A, b:B) : A
    = integerShiftLeftChecked(a, A(b));

[A when SignedInteger?(A) and IntegerOverflowChecks?()]
inline overload (-)(a:A) : A
    = integerNegateChecked(a);

[A, B when Integer?(A) and Numeric?(B) and IntegerOverflowChecks?()]
inline overload A(b:B) : A
    = integerConvertChecked(A, b);


//
// never-checked wrap-on-overflow math
//

[A when Integer?(A)]
inline wrapAdd(a:A, b:A) : A = numericAdd(a, b);
[A when Integer?(A)]
inline wrapSubtract(a:A, b:A) : A = numericSubtract(a, b);
[A when Integer?(A)]
inline wrapMultiply(a:A, b:A) : A = numericMultiply(a, b);
[A when Integer?(A)]
inline wrapQuotient(a:A, b:A) : A =  integerQuotient(a, b);
[A when Integer?(A)]
inline wrapRemainder(a:A, b:A) : A = integerRemainder(a, b);

[A, ..AA when equalValues?(A,..AA) and countValues(..AA) != 1]
inline overload wrapAdd(a:A, ..aa:AA) : A = foldValues(wrapAdd, a, ..aa);

[A, ..AA when equalValues?(A,..AA) and countValues(..AA) != 1]
inline overload wrapSubtract(a:A, ..aa:AA) : A = foldlValues(wrapSubtract, a, ..aa);

[A, ..AA when equalValues?(A,..AA) and countValues(..AA) != 1]
inline overload wrapMultiply(a:A, ..aa:AA) : A = foldValues(wrapMultiply, a, ..aa);

[A, ..AA when equalValues?(A,..AA) and countValues(..AA) != 1]
inline overload wrapQuotient(a:A, ..aa:AA) : A = foldlValues(wrapQuotient, a, ..aa);

[A, ..AA when equalValues?(A,..AA) and countValues(..AA) != 1]
inline overload wrapRemainder(a:A, ..aa:AA) : A = foldlValues(wrapRemainder, a, ..aa);

[A, B when Integer?(A, B)]
inline wrapBitshl(a:A, b:B) : A = integerShiftLeft(a, A(b));

[A when SignedInteger?(A)]
inline overload wrapSubtract(a:A) : A = numericNegate(a);

[A, B when Integer?(A) and Numeric?(B)]
inline wrapCast(#A, b:B) : A = numericConvert(A, b);
