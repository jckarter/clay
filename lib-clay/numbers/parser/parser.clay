
import numbers.parser.errno.*;
import printer.(error);
import printer.formatter.(repr);
import strings.*;
import libc;
import sequences.*;



/// @section  Generic parsers 
[S when CCompatibleString?(S)]
parseIntWith(s:S, intType, convFunc) {
    var p = cstring(s);
    var end = null(CChar);
    var value = convFunc(p, @end, 0);
    var typeName = StaticName(intType);
    if (end^ != 0)
        error("invalid " ++ typeName ++ ": ", repr(s));
    if ((errno() == ERANGE) or value < Least(intType) or value > Greatest(intType))
        error(typeName ++ " out of range: ", repr(s));
    return intType(value);
}

[S when CCompatibleString?(S)]
parseFloatWith(s:S, floatType, convFunc) {
    var p = cstring(s);
    var end = null(CChar);
    var value = convFunc(p, @end);
    var typeName = StaticName(floatType);
    if (end^ != 0)
        error("invalid " ++ typeName ++ ": ", repr(s));
    if (errno() == ERANGE)
        error(typeName ++ " out of range: ", repr(s));
    return floatType(value);
}

[S when CCompatibleString?(S)]
parseImagWith(s:S, imagType, convFunc) {
    var p = cstring(s);
    var end = null(CChar);
    var value = convFunc(p, @end);
    var typeName = StaticName(imagType);
    if (end^ != 0)
        error("invalid " ++ typeName ++ ": ", repr(s));
    if (errno() == ERANGE)
        error(typeName ++ " out of range: ", repr(s));
    return numericConvert(imagType,value);
}

/// @section  parseInt8, parseUInt8 

define parseInt8;

[S when String?(S)]
overload parseInt8(s:S) = parseInt8(String(s));

[S when CCompatibleString?(S)]
overload parseInt8(s:S) = parseIntWith(s, Int8, libc.strtol);

define parseUInt8;

[S when String?(S)]
overload parseUInt8(s:S) = parseUInt8(String(s));

[S when CCompatibleString?(S)]
overload parseUInt8(s:S) = parseIntWith(s, UInt8, libc.strtoul);


/// @section  parseInt16, parseUInt16 

define parseInt16;

[S when String?(S)]
overload parseInt16(s:S) = parseInt16(String(s));

[S when CCompatibleString?(S)]
overload parseInt16(s:S) = parseIntWith(s, Int16, libc.strtol);

define parseUInt16;

[S when String?(S)]
overload parseUInt16(s:S) = parseUInt16(String(s));

[S when CCompatibleString?(S)]
overload parseUInt16(s:S) =  parseIntWith(s, UInt16, libc.strtoul);


/// @section  parseInt32, parseUInt32 

define parseInt32;

[S when String?(S)]
overload parseInt32(s:S) = parseInt32(String(s));

[S when CCompatibleString?(S)]
overload parseInt32(s:S) = parseIntWith(s, Int32, libc.strtol);

define parseUInt32;

[S when String?(S)]
overload parseUInt32(s:S) = parseUInt32(String(s));

[S when CCompatibleString?(S)]
overload parseUInt32(s:S) = parseIntWith(s, UInt32, libc.strtoul);


/// @section  parseInt64, parseUInt64 

define parseInt64;

[S when String?(S)]
overload parseInt64(s:S) = parseInt64(String(s));

[S when CCompatibleString?(S)]
overload parseInt64(s:S) = parseIntWith(s, Int64, libc.strtoll);

define parseUInt64;

[S when String?(S)]
overload parseUInt64(s:S) = parseUInt64(String(s));

[S when CCompatibleString?(S)]
overload parseUInt64(s:S) = parseIntWith(s, UInt64, libc.strtoull);


/// @section  parseFloat32 

define parseFloat32;

[S when String?(S)]
overload parseFloat32(s:S) = parseFloat32(String(s));

[S when CCompatibleString?(S)]
overload parseFloat32(s:S) = parseFloatWith(s, Float32, libc.strtod);


/// @section  parseFloat64 

define parseFloat64;

[S when String?(S)]
overload parseFloat64(s:S) = parseFloat64(String(s));

[S when CCompatibleString?(S)]
overload parseFloat64(s:S) = parseFloatWith(s, Float64, libc.strtod);

/// @section  parseFloat80 

define parseFloat80;

[S when String?(S)]
overload parseFloat80(s:S) = parseFloat80(String(s));

[S when CCompatibleString?(S)]
overload parseFloat80(s:S) = parseFloatWith(s, Float80, libc.strtold);


/// @section  parseImag32 

define parseImag32;

[S when String?(S)]
overload parseImag32(s:S) = parseImag32(String(s));

[S when CCompatibleString?(S)]
overload parseImag32(s:S) = parseImagWith(s, Imag32, libc.strtod);


/// @section  parseImag64 

define parseImag64;

[S when String?(S)]
overload parseImag64(s:S) = parseImag64(String(s));

[S when CCompatibleString?(S)]
overload parseImag64(s:S) = parseImagWith(s, Imag64, libc.strtod);

/// @section  parseComplex80 

define parseImag80;

[S when String?(S)]
overload parseImag80(s:S) = parseImag80(String(s));

[S when CCompatibleString?(S)]
overload parseImag80(s:S) = parseImagWith(s, Imag80, libc.strtold);





/// @section  parse numbers from strings 

[S when String?(S)]
forceinline overload Int8(s:S)  = parseInt8(s);

[S when String?(S)]
forceinline overload Int16(s:S) = parseInt16(s);

[S when String?(S)]
forceinline overload Int32(s:S) = parseInt32(s);

[S when String?(S)]
forceinline overload Int64(s:S) = parseInt64(s);

[S when String?(S)]
forceinline overload UInt8(s:S)  = parseUInt8(s);

[S when String?(S)]
forceinline overload UInt16(s:S) = parseUInt16(s);

[S when String?(S)]
forceinline overload UInt32(s:S) = parseUInt32(s);

[S when String?(S)]
forceinline overload UInt64(s:S) = parseUInt64(s);

[S when String?(S)]
forceinline overload Float32(s:S) = parseFloat32(s);

[S when String?(S)]
forceinline overload Float64(s:S) = parseFloat64(s);

[S when String?(S)]
forceinline overload Float80(s:S) = parseFloat80(s);

[S when String?(S)]
forceinline overload Imag32(s:S) = parseImag32(s);

[S when String?(S)]
forceinline overload Imag64(s:S) = parseImag64(s);

[S when String?(S)]
forceinline overload Imag80(s:S) = parseImag80(s);

