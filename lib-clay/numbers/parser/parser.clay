
import numbers.parser.errno.*;
import printer.(error);
import printer.formatter.(repr);
import data.strings.*;
import data.strings.tempcstrings.*;
import libc;
import data.sequences.*;



/// @section  Generic parsers 


[T when Type?(T)]
private define ConvFuncForType(#T);

overload ConvFuncForType(#CLongLong) = libc.strtoll;
overload ConvFuncForType(#CULongLong) = libc.strtoull;

[T when SignedInteger?(T) and TypeSize(T) <= TypeSize(CLong)]
overload ConvFuncForType(#T) = libc.strtol;
[T when UnsignedInteger?(T) and TypeSize(T) <= TypeSize(CULong)]
overload ConvFuncForType(#T) = libc.strtoul;

overload ConvFuncForType(#CLongDouble) = libc.strtold;
overload ConvFuncForType(#CDouble) = libc.strtod;
overload ConvFuncForType(#CFloat) = (nptr, endptr) -> CFloat(libc.strtod(nptr, endptr));

[T, S when Numeric?(T) and String?(S)]
define parse(#T, s:S): T;


[S, IntType when String?(S) and Integer?(IntType)]
overload parse(#IntType, s:S) {
    alias convFunc = ConvFuncForType(IntType);
    var temp = tempCString(s);
    var p = temp.ptr;
    var end = null(CChar);
    var value = convFunc(p, @end, 0);
    var typeName = StaticName(IntType);
    if (end^ != 0)
        error("invalid " ++ typeName ++ ": ", repr(s));
    if ((errno() == ERANGE) or value < Least(IntType) or value > Greatest(IntType))
        error(typeName ++ " out of range: ", repr(s));
    return IntType(value);
}

[S, FloatType when String?(S) and Float?(FloatType)]
overload parse(#FloatType, s:S) {
    alias convFunc = ConvFuncForType(FloatType);
    var temp = tempCString(s);
    var p = temp.ptr;
    var end = null(CChar);
    var value = convFunc(p, @end);
    var typeName = StaticName(FloatType);
    if (end^ != 0)
        error("invalid " ++ typeName ++ ": ", repr(s));
    if (errno() == ERANGE)
        error(typeName ++ " out of range: ", repr(s));
    return FloatType(value);
}
