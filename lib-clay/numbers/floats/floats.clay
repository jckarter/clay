record Float80Bits (mantissa:UInt64,exponent:UInt32);

define floatBits;
overload floatBits(f:LongDouble) = bitcast(Float80Bits, f);
overload floatBits(f:Double) = bitcast(UInt64, f);
overload floatBits(f:Float) = bitcast(UInt32, f);

define floatFromBits;
overload floatFromBits(m:UInt64,e:UInt32) = bitcast(LongDouble, Float80Bits(m,e));
overload floatFromBits(b:UInt64) = bitcast(Double, b);
overload floatFromBits(b:UInt32) = bitcast(Float, b);

define floatFromParts;

[I when Integer?(I)]
overload floatFromParts(#LongDouble, neg?:Bool, exp:I, mant:UInt64)
    = floatFromBits(mant, bitor( UInt64(exp),
        if (neg?) 0x0000_0000_0000_8000_ul else 0_ul));

[I when Integer?(I)]
overload floatFromParts(#Double, neg?:Bool, exp:I, mant:UInt64)
    = floatFromBits(bitor(bitand(mant, mantissaMask(Double)),
        bitshl(bitand(UInt64(exp), exponentMask(Double)), mantissaSize(Double)),
        if (neg?) 0x8000_0000_0000_0000_ul else 0_ul));

[I when Integer?(I)]
overload floatFromParts(#Float ,neg?:Bool, exp:I, mant:UInt32)
    = floatFromBits(bitor(
        bitand(mant, mantissaMask(Float)),
        bitshl(bitand(UInt32(exp), exponentMask(Float)), mantissaSize(Float)),
        if (neg?) 0x8000_0000u else 0u ));

define floatNegative?;
overload floatNegative?(f:LongDouble) = bitand(floatBits(f).exponent, 0x8000u) != 0;
overload floatNegative?(f:Double) = bitand(floatBits(f), 0x8000_0000_0000_0000_ul) != 0;
overload floatNegative?(f:Float) = bitand(floatBits(f), 0x8000_0000u) != 0;

define floatExponent;
[T when Float?(T)]
overload floatExponent(f:T) = bitand(bitshr(floatBits(f), mantissaSize(T)), exponentMask(T));
overload floatExponent(f:LongDouble) = bitand(floatBits(f).exponent, 0x7FFFu);

define floatMantissa;
overload floatMantissa(f:LongDouble) = floatBits(f).mantissa;
overload floatMantissa(f:Double) = bitand(floatBits(f), mantissaMask(Double));
overload floatMantissa(f:Float) = bitand(floatBits(f), mantissaMask(Float));

floatParts(f) = floatNegative?(f), floatExponent(f), floatMantissa(f);

define infinity;
overload infinity(#LongDouble) = floatFromBits(0x8000_0000_0000_0000_ul,0x0000_0000_0000_7FFF_ul);
overload infinity(#Double) = floatFromBits(0x7FF0_0000_0000_0000_ul);
overload infinity(#Float) = floatFromBits(0x7F80_0000u);

define negativeInfinity;
overload negativeInfinity(#LongDouble) = floatFromBits(0x8000_0000_0000_0000_ul,0x0000_0000_0000_FFFF_ul);
overload negativeInfinity(#Double) = floatFromBits(0xFFF0_0000_0000_0000_ul);
overload negativeInfinity(#Float) = floatFromBits(0xFF80_0000u);

define nan;
overload nan(#LongDouble) = floatFromBits(0xC000_0000_0000_0000_ul,0x0000_0000_0000_7FFF_ul);
overload nan(#Double) = floatFromBits(0x7FF8_0000_0000_0000_ul);
overload nan(#Float) = floatFromBits(0x7FC0_0000u);

define snan;
overload snan(#LongDouble) = floatFromBits(0x8000_0000_0000_0001_ul,0x0000_0000_0000_7FFF_ul);
overload snan(#Double) = floatFromBits(0x7FF0_0000_0000_0001_ul);
overload snan(#Float) = floatFromBits(0x7F80_0001u);

overload nan(#LongDouble, sign?:Bool, payload:UInt64) = floatFromParts(LongDouble,sign?, exponentMask(LongDouble), payload);
overload nan(#Double, sign?:Bool, payload:UInt64) = floatFromParts(Double,sign?, exponentMask(Double), payload);
overload nan(#Float, sign?:Bool, payload:UInt32) = floatFromParts(Float,sign?, exponentMask(Float), payload);

define qnanMask;
overload qnanMask(#LongDouble) = wrapBitshl(0x1ul,mantissaSize(LongDouble)-1);
overload qnanMask(#Double) = wrapBitshl(0x1ul,mantissaSize(Double)-1);
overload qnanMask(#Float) = wrapBitshl(0x1u,mantissaSize(Float)-1);

define snanMask;
overload snanMask(#LongDouble) = bitshr(mantissaMask(LongDouble),1);
overload snanMask(#Double) = bitshr(mantissaMask(Double),1);
overload snanMask(#Float) = bitshr(mantissaMask(Float),1);

[T when Float?(T)]
overload nan(sign?:Bool, payload:T) = floatFromParts(T, sign?, exponentMask(T), bitor(floatMantissa(payload),qnanMask(T)));

[T when Float?(T)]
overload snan(sign?:Bool, payload:T) = floatFromParts(T, sign?, exponentMask(T), bitand(floatMantissa(payload),snanMask(T)));

define exponentBias;
overload exponentBias(#LongDouble) = 16383;
overload exponentBias(#Double) = 1023;
overload exponentBias(#Float) = 127;

define mantissaSize;
overload mantissaSize(#LongDouble) = 64;
overload mantissaSize(#Double) = 52;
overload mantissaSize(#Float) = 23;

define mantissaMask;
overload mantissaMask(#LongDouble) = 0xFFFF_FFFF_FFFF_FFFFul;
overload mantissaMask(#Double) = 0x000F_FFFF_FFFF_FFFFul;
overload mantissaMask(#Float) = 0x007F_FFFFu;

define exponentSize;
overload exponentSize(#LongDouble) = 15;
overload exponentSize(#Double) = 11;
overload exponentSize(#Float) = 8;

define exponentMask;
overload exponentMask(#LongDouble) = 0x7FFFul;
overload exponentMask(#Double) = 0x7FFul;
overload exponentMask(#Float) = 0xFFu;

define signMask;
overload signMask(#LongDouble) = 0x8000ul;
overload signMask(#Double) = 0x8000_0000_0000_0000_ul;
overload signMask(#Float) = 0x8000_0000_u;

define floatMantissaZero;
overload floatMantissaZero(#LongDouble) = 0x8000_0000_0000_0000_ul;
overload floatMantissaZero(#Double) = 0x0000_0000_0000_0000_ul;
overload floatMantissaZero(#Float) = 0x0000_0000_u;

define signbit;
overload signbit(x:LongDouble) = Int(bitshr(floatBits(x).exponent,15));
overload signbit(x:Double) = Int(bitshr(floatBits(x),63));
overload signbit(x:Float) = Int(bitshr(floatBits(x),31));

define floatBitsUnsigned;
overload floatBitsUnsigned(x:LongDouble) {
    var tmp = floatBits(x);
    tmp.exponent = bitand(tmp.exponent,0x7FFFu);
    return tmp;
}
overload floatBitsUnsigned(x:Double) = bitand(floatBits(x),0x7FFF_FFFF_FFFF_FFFFul);
overload floatBitsUnsigned(x:Float) = bitand(floatBits(x),0x7FFF_FFFFu);

define finite?;
define infinity?;
define positiveInfinity?;
define negativeInfinity?;
define nan?;
define subnormal?;
define normalized?;

[T when Float?(T)] overload finite?(x:T) = floatExponent(x) != exponentMask(T);
[T when Float?(T)] overload infinity?(x:T) = floatExponent(x) == exponentMask(T) and floatMantissa(x)==0;
[T when Float?(T)] overload positiveInfinity?(x:T) = x == infinity(T);
[T when Float?(T)] overload negativeInfinity?(x:T) = x == negativeInfinity(T);
[T when Float?(T)] overload nan?(x:T) = floatExponent(x) == exponentMask(T) and floatMantissa(x)!=0;
[T when Float?(T)] qnan?(x:T) {
    var m = floatMantissa(x);
    return floatExponent(x) == exponentMask(T) and m!=0 and bitshr(m,mantissaSize(T)-1)==1;
}
[T when Float?(T)] snan?(x:T) {
    var m = floatMantissa(x);
    return floatExponent(x) == exponentMask(T) and m!=0 and bitshr(m,mantissaSize(T)-1)==0;
}
[T when Float?(T)] overload subnormal?(x:T) = floatExponent(x)==T(0) and x!=T(0);
[T when Float?(T)] overload normalized?(x:T) = not subnormal?(x) and finite?(x);

