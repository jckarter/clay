import vectors.*;


/// @section  TokenInput?, TokenType 

[TokenInput]
TokenInput?(#TokenInput) = Iterator?(TokenInput);

[TokenInput]
TokenType(#TokenInput) = IteratorTargetType(TokenInput);



/// @section  Parser?, Parsers? 

[TokenInput]
Parser?(#TokenInput, x) = 
    SimpleParser?(TokenInput, x) or ConvertibleParser?(TokenInput, x);


define Parsers?;

[TokenInput]
overload Parsers?(#TokenInput, first, ..rest) =
    Parser?(TokenInput, first) and Parsers?(TokenInput, ..rest);

[TokenInput]
overload Parsers?(#TokenInput) = true;



/// @section  SimpleParser? 

define SimpleParser?;

[TokenInput, Parser]
overload SimpleParser?(#TokenInput, #Parser) = false;

[TokenInput, Parser when CallDefined?(call, Parser, TokenInput)]
overload SimpleParser?(#TokenInput, #Parser) {
    alias parser = typeToLValue(Parser);
    alias input = typeToLValue(TokenInput);
    return MaybeType?(..ReturnType(..parser(input)));
}

private define MaybeType?;
overload MaybeType?(..args) = false;
[T] overload MaybeType?(#Maybe[T]) = true;



/// @section  ConvertibleParser? 

define ConvertibleParser?;

[TokenInput]
overload ConvertibleParser?(#TokenInput, x) = false;

[TokenInput, Token when TokenType(TokenInput) == Token]
overload ConvertibleParser?(#TokenInput, #Token) = true;

[TokenInput, A when Sequence?(A) and (TokenType(TokenInput) == SequenceElementType(A))]
overload ConvertibleParser?(#TokenInput, #A) = true;

[TokenInput, ..T when Parsers?(TokenInput, ..T)]
overload ConvertibleParser?(#TokenInput, #Tuple[..T]) = true;



/// @section  convertParser 

define convertParser;

[TokenInput, Token when TokenType(TokenInput) == Token]
overload convertParser(#TokenInput, token:Token) =
    literal(TokenInput, token);

[TokenInput, A when Sequence?(A) and (SequenceElementType(A) == TokenType(TokenInput))]
overload convertParser(#TokenInput, forward a:A) =
    literalString(TokenInput, a);

[TokenInput, ..T when Parsers?(TokenInput, ..T)]
overload convertParser(#TokenInput, parsers:Tuple[..T]) =
    sequence(TokenInput, ..convertParsers(TokenInput, ..unpackRef(parsers)));

[TokenInput, Parser when SimpleParser?(TokenInput, Parser)]
overload convertParser(#TokenInput, ref parser:Parser) =
    parser;

[TokenInput, Parser when SimpleParser?(TokenInput, Parser)]
overload convertParser(#TokenInput, rvalue parser:Parser) =
    move(parser);



/// @section  convertParsers 

private record Converter[TokenInput]();
[TokenInput] overload call(x:Converter[TokenInput], forward p) =
    forward convertParser(TokenInput, p);

[TokenInput, ..T when Parsers?(TokenInput, ..T)]
convertParsers(#TokenInput, forward ..parsers:T) =
    forward ..mapValues(Converter[TokenInput](), ..parsers);



/// @section  ParseResult 

[TokenInput, Parser when Parser?(TokenInput, Parser)]
ParseResult(#TokenInput, #Parser) {
    alias parser = convertParser(TokenInput, typeToLValue(Parser));
    alias input = typeToLValue(TokenInput);
    return UnwrapMaybe(ReturnType(parser(input)));
}

[T] private UnwrapMaybe(#Maybe[T]) = T;



/// @section  nextToken 

[TokenInput]
nextToken(#TokenInput, input:TokenInput) {
    var value = nextValue(input);
    if (hasValue?(value))
        return Maybe(getValue(value));
    else
        return nothing(TokenType(TokenInput));
}



/// @section  condition 

[TokenInput, Predicate]
TokenPredicate?(#TokenInput, #Predicate) {
    alias predicate = typeToLValue(Predicate);
    alias Token = TokenType(TokenInput);
    alias token = typeToLValue(Token);
    return Tuple[Bool] == Tuple[..Type(..predicate(token))];
}

[TokenInput, Predicate when TokenPredicate?(TokenInput, Predicate)]
condition(#TokenInput, predicate:Predicate) =
    input => {
        var saved = input;
        return maybe(nextToken(TokenInput, input),
            x -> {
                if (predicate(x))
                    return Maybe(move(x));
                input = move(saved);
                return nothing(TokenType(TokenInput));
            },
            () -> nothing(TokenType(TokenInput)),
        );
    };



/// @section  literal 

[TokenInput, Token when TokenType(TokenInput) == Token]
literal(#TokenInput, expected:Token) =
    condition(TokenInput, x => (x == expected));



/// @section  literalString 

define literalString;

[TokenInput, A when Sequence?(A) and (SequenceElementType(A) == TokenType(TokenInput))]
overload literalString(#TokenInput, forward a:A) {
    return input => {
        var saved = input;
        for (item in a) {
            var parsed? = maybe(nextToken(TokenInput, input),
                (x) -> (x == item),
                () => false,
            );
            if (not parsed?) {
                input = move(saved);
                return nothing(A);
            }
        }
        return Maybe(a);
    };
}

[TokenInput, S when
    StringLiteral?(S) and Sequence?(Type(S)) and (SequenceElementType(Type(S)) == TokenType(TokenInput))]
overload literalString(#TokenInput, #S) =
    literalString(#TokenInput, StringLiteralRef(S));
    



/// @section  optional 

[TokenInput, Parser when Parser?(TokenInput, Parser)]
optional(#TokenInput, forward _parser:Parser) {
    var parser = convertParser(TokenInput, _parser);
    return input => Maybe(parser(input));
}



/// @section  choice 

UniformParsers?(TokenInput, ..Parsers) =
    Parsers?(TokenInput, ..Parsers) and
    equalValues?(..mapValues(P => ParseResult(TokenInput, P), ..Parsers));

[TokenInput, First, ..Rest when UniformParsers?(TokenInput, First, ..Rest)]
choice(#TokenInput, forward first:First, forward ..rest:Rest) {
    var parsers = Tuple(..convertParsers(TokenInput, first, ..rest));
    return input => {
        ..for (parser in unpackRef(parsers)) {
            var result = parser(input);
            if (not nothing?(result))
                return move(result);
        }
        return nothing(ParseResult(TokenInput, First));
    };
}



/// @section  sequence, sequenceAs 

[TokenInput, First, ..Rest when Parsers?(TokenInput, First, ..Rest)]
sequence(#TokenInput, forward first:First, forward ..rest:Rest) {
    var parsers = Tuple(..convertParsers(TokenInput, first, ..rest));
    return input => {
        alias f = (parser -> require(parser(input)));
        alias result = Tuple(..mapValues(f, ..unpackRef(parsers)));
        var saved = input;
        try {
            return Maybe(result);
        }
        catch (e:ValueMissing) {
            input = saved;
            return nothing(Type(result));
        }
    };
}

[TokenInput, Result, ..Parsers when Parsers?(TokenInput, ..Parsers)]
sequenceAs(#TokenInput, result:Result, forward .._parsers:Parsers) {
    var parsers = Tuple(..convertParsers(TokenInput, .._parsers));
    return input => {
        var saved = input;
        ..for (parser in unpackRef(parsers)) {
            var result = parser(input);
            if (nothing?(result)) {
                input = saved;
                return nothing(Result);
            }
        }
        return Maybe(result);
    };
}



/// @section  modify 

Modifier?(TokenInput, Modifier, Parser) {
    alias M = typeToLValue(Modifier);
    alias T = ParseResult(TokenInput, Parser);
    return (Parser?(TokenInput, Parser) and CallDefined?(M, T));
}

[TokenInput, Modifier, Parser when Modifier?(TokenInput, Modifier, Parser)]
modify(#TokenInput, modifier:Modifier, forward _parser:Parser) {
    var parser = convertParser(TokenInput, _parser);
    return input => {
        alias T = Type(modifier(require(parser(input))));
        return maybe(parser(input),
            x -> Maybe(modifier(move(x))),
            () -> nothing(T),
        );
    };
}



/// @section  repeated, repeatedAs 

[TokenInput, Parser when Parser?(TokenInput, Parser)]
repeated(#TokenInput, min:Int, max:Int, forward _parser:Parser) {
    var parser = convertParser(TokenInput, _parser);
    return input => {
        alias T = ParseResult(TokenInput, Parser);
        var saved = input;
        var v = Vector[T]();
        while (size(v) < max) {
            var parsed? = maybe(parser(input),
                x -> { push(v, move(x)); return true; },
                () => false,
            );
            if (not parsed?)
                break;
        }
        if (size(v) < min) {
            input = saved;
            return nothing(Vector[T]);
        }
        return Maybe(move(v));
    };
}

[TokenInput, Result, Parser when Parser?(TokenInput, Parser)]
repeatedAs(#TokenInput, result:Result, min:Int, max:Int, forward _parser:Parser) {
    var parser = convertParser(TokenInput, _parser);
    return input => {
        var saved = input;
        var count = 0;
        while (count < max) {
            var result = parser(input);
            if (nothing?(result))
                break;
            count +: 1;
        }
        if (count < min) {
            input = saved;
            return nothing(Result);
        }
        return Maybe(result);
    };
}



/// @section  zeroOrMore, oneOrMore 
//

[TokenInput, Parser when Parser?(TokenInput, Parser)]
zeroOrMore(#TokenInput, forward parser:Parser) =
    repeated(TokenInput, 0, Greatest(Int), parser);

[TokenInput, Parser when Parser?(TokenInput, Parser)]
oneOrMore(#TokenInput, forward parser:Parser) =
    repeated(TokenInput, 1, Greatest(Int), parser);

[TokenInput, Result, Parser when Parser?(TokenInput, Parser)]
zeroOrMoreAs(#TokenInput, result:Result, forward parser:Parser) =
    repeatedAs(TokenInput, result, 0, Greatest(Int), parser);

[TokenInput, Result, Parser when Parser?(TokenInput, Parser)]
oneOrMoreAs(#TokenInput, result:Result, forward parser:Parser) =
    repeatedAs(TokenInput, result, 1, Greatest(Int), parser);



/// @section  separatedList, optSeparatedList, 
//

[TokenInput, Separator, Element when Parsers?(TokenInput, Separator, Element)]
separatedList(#TokenInput, forward _separator:Separator, forward _element:Element) {
    var separator = convertParser(TokenInput, _separator);
    var element = convertParser(TokenInput, _element);
    return input => {
        alias T = ParseResult(TokenInput, Element);
        var v = Vector[T]();
        while (true) {
            var parsed? = maybe(element(input),
                x -> { push(v, move(x)); return true; },
                () => false,
            );
            if (not parsed?)
                break;
            var sep = separator(input);
            if (nothing?(sep))
                break;
        }
        if (empty?(v))
            return nothing(Vector[T]);
        return Maybe(move(v));
    };
}

[TokenInput, Separator, Element when Parsers?(TokenInput, Separator, Element)]
optSeparatedList(#TokenInput, forward _separator:Separator, forward _element:Element) {
    alias T = ParseResult(TokenInput, Element);
    return modify(
        TokenInput,
        x => maybe(move(x), y => move(y), () => Vector[T]()),
        optional(TokenInput, separatedList(TokenInput, _separator, _element)),
    );
}

[TokenInput, Separator, Element when Parsers?(TokenInput, Separator, Element)]
separatedListStrict(#TokenInput, forward _separator:Separator, forward _element:Element) {
    var separator = convertParser(TokenInput, _separator);
    var element = convertParser(TokenInput, _element);
    return input => {
        alias T = ParseResult(TokenInput, Element);
        var v = Vector[T]();
        var saved = input;
        while (true) {
            var parsed? = maybe(element(input),
                x -> { push(v, move(x)); return true; },
                () => false,
            );
            if (not parsed?)
                break;
            saved = input;
            var sep = separator(input);
            if (nothing?(sep))
                break;
        }
        input = saved;
        if (empty?(v))
            return nothing(Vector[T]);
        return Maybe(move(v));
    };
}

[TokenInput, Separator, Element when Parsers?(TokenInput, Separator, Element)]
optSeparatedListStrict(#TokenInput, forward _separator:Separator, forward _element:Element) {
    alias T = ParseResult(TokenInput, Element);
    return modify(
        TokenInput,
        x => maybe(move(x), y => move(y), () => Vector[T]()),
        optional(TokenInput, separatedListStrict(TokenInput, _separator, _element)),
    );
}
