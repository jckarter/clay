
import parsing.combinators.generic as generic;



/// @section  Combinators 

record Combinators[TokenInput] ();

[TokenInput, Name]
override fieldRef(x:Combinators[TokenInput], #Name) {
    var f = fieldRef(generic, Name);
    return partialApply(f, TokenInput);
}



/// @section  partialApply 

private partialApply(f, ..args) = CallableAndArgs(f, [..args]);

private record CallableAndArgs[F, Args] (
    callable:F,
    args:Args,
);

[F, Args]
override call(x:CallableAndArgs[F, Args], forward ..args) =
    forward ..x.callable(..unpack(x.args), ..args);
