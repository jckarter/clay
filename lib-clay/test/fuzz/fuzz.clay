import test.(passed, failed, printFailure, TEST_FAILURE_INDENT);
import printer.(println, str, printlnTo);
import printer.formatter.(repr);
import random.(RNG?, XORShiftRNG, generate, uniform);
import data.vectors.(Vector);

// protocol for generating arbitrary values of a type

[G, T when RNG?(G)]
define arbitrary(gen:G, #T) : T;

arbitraryValues(gen, ..TT) = ..mapValues(T -> arbitrary(gen, T), ..TT);

// lookForFailures function

[G, F when RNG?(G) and MonoType?(F)]
lookForFailures(g:G, numberOfTries:UInt, f:F)
{
    var failedInputs = Vector[Tuple[..MonoInputTypes(f)]]();

    if (#Flag?("test.fuzz.Verbose"))
        println("  ", f);

    for (i in range(numberOfTries)) {
        var inputs = [..arbitraryValues(g, ..MonoInputTypes(f))];
        if (#Flag?("test.fuzz.Verbose"))
            println("  -- ", inputs);
        if (not f(..unpack(inputs)))
            push(failedInputs, move(inputs));
    }

    return move(failedInputs);
}

// expectForAll function

define expectForAll private overload;

[F when MonoType?(F)]
override expectForAll(numberOfTries:UInt, f:F)
{
    var g = XORShiftRNG();
    var failedInputs = lookForFailures(g, numberOfTries, f);

    if (empty?(failedInputs))
        passed();
    else {
        failed();
        println();
        var failureMessage = str(
            "axiom `", f, "` failed for ", size(failedInputs), " out of ",
            numberOfTries, " inputs:\n");
        for (inputs in failedInputs)
            printlnTo(failureMessage,
                TEST_FAILURE_INDENT, TEST_FAILURE_INDENT,
                repr(inputs));
        printFailure(failureMessage);
    }
}

alias DEFAULT_NUMBER_OF_TRIES = 1000u;

[F when MonoType?(F)]
override expectForAll(f:F) { expectForAll(DEFAULT_NUMBER_OF_TRIES, f); }

// `arbitrary` for builtin types and aggregates

override arbitrary(g, #Bool) = generate(g, UInt32) & 0x8000_0000u != 0;
[I when Integer?(I) and TypeSize(I) <= TypeSize(UInt32)]
override arbitrary(g, #I) = wrapCast(I, generate(g, UInt32));
[I when I == Int64 or I == UInt64]
override arbitrary(g, #I) =
    wrapCast(I, (UInt64(generate(g, UInt32)) << 32) | UInt64(generate(g, UInt32)));
override arbitrary(g, #Float32) = bitcast(Float32, generate(g, UInt32));
override arbitrary(g, #Float64) = bitcast(Float64, arbitrary(g, UInt64));

override arbitrary(g, #Imag32) = bitcast(Imag32, arbitrary(g, Float32));
override arbitrary(g, #Imag64) = bitcast(Imag64, arbitrary(g, Float64));

[C when Complex?(C)]
override arbitrary(g, #C) = C(
    arbitrary(g, ComplexBaseType(C)), arbitrary(g, ComplexBaseType(C)));

[E when Enum?(E)]
override arbitrary(g, #E) = bitcast(E, uniform(g, 0, Int(EnumMemberCount(E))));

[X] override arbitrary(g, #Static[X]) = Static[X]();

[..T]
override arbitrary(g, #Tuple[..T]) = [..arbitraryValues(g, ..T)];

[R when RegularRecord?(R)]
override arbitrary(g, #R) =
    initializeRecord(R, ..arbitraryValues(g, ..RecordFieldTypes(R)));

[V when Variant?(V)]
override arbitrary(g, #V)
{
    var tag = uniform(g, SizeT(0), VariantMemberCount(V));
    ..for (t in staticIntegers(VariantMemberCount(V)))
        if (tag == unwrapStatic(t))
            return V(arbitrary(g, nthValue(t, ..VariantMembers(V))));
}

alias DEFAULT_MAXIMUM_ARBITRARY_SEQUENCE_LENGTH = SizeT(1000);

[C when Sequence?(C) and CallDefined?(push, C, SequenceElementType(C))]
override arbitrary(g, #C)
{
    var length = uniform(g, SizeT(0), DEFAULT_MAXIMUM_ARBITRARY_SEQUENCE_LENGTH);
    var seq = C();
    for (i in range(length))
        push(seq, arbitrary(g, SequenceElementType(C)));
    return move(seq);
}
