import
    commandline.options.*,
    console.color.*,
    printer.(println,print,str),
    io.streams.*,
    io.files.*,
    data.strings.*,
    lambdas.*,
    data.vectors.*,
    printer.formatter.(repr);


record TestStatus (
    passed: UInt,
    failed: UInt,
    xfail: UInt,
);

overload TestStatus() = TestStatus(UInt(0), UInt(0), UInt(0));

alias TestFunction = Function[[], []];

record TestCase (
    name: String,
    _case: TestFunction,
    xfail?: Bool,
);

staticassert (     Movable?(TestCase));
staticassert (not Copyable?(TestCase));

[T, F when String?(T) and CallDefined?(call, F)]
overload TestCase(name:T, _case:F, xfail?)
    = initializeRecord(TestCase, String(name), TestFunction(_case), xfail?);

[T when String?(T)]
overload TestCase(name:T, rvalue _case:TestFunction, xfail?)
    = initializeRecord(TestCase, String(name), move(_case), xfail?);

overload TestCase(name, fn) = TestCase(name, TestFunction(fn), false);

XFAILTestCase(name, fn) = TestCase(name, TestFunction(fn), true);

record TestSuite (
    name: String,
    testCases: Vector[TestCase]
);

[S, T when S != String or T != Vector[TestCase]]
overload TestSuite(name : S, rvalue testCases : T) =
    TestSuite(String(name), Vector[TestCase](move(testCases)));

alias TEST_CASE_INDENT = "  ";
alias TEST_FAILURE_INDENT = TEST_CASE_INDENT++TEST_CASE_INDENT;
alias TEST_FAIL_CASE_INDENT = TEST_FAILURE_INDENT++TEST_CASE_INDENT;

accumulateTestStatus(test: TestStatus, newTest: TestStatus) {
    test.passed  +: newTest.passed;
    test.failed  +: newTest.failed;
    test.xfail +: newTest.xfail;
}

reportTest(test: TestStatus, ..prefix) {
    println(
        ..prefix,
        test.passed, " expectations passed; ",
        test.failed, " failed (",
        test.xfail, " xfail",
        ")"
    );
}

runTestSuite(suite: TestSuite) : TestStatus {
    var test = TestStatus();
    println("Testing ", suite.name, ":");
    for (_case in suite.testCases)
        if(runCase?(_case))
            accumulateTestStatus(test, runTestCase(_case));

    reportTest(test, "-- ", suite.name, ": ");
    return test;
}

xfailMessage(xfail?: Bool) : String = 
    String(if (xfail?) "(xfail) " else "");

define printFailure;

overload printFailure(..xs) {
    printlnColored(Red, TEST_FAILURE_INDENT, ..xs);
}
[when Flag?("test.minimal")]
overload printFailure(..xs) {
    println(TEST_FAILURE_INDENT, ..xs);
}

var g_testCaseStatus = Maybe[TestStatus]();

runTestCase(_case: TestCase) : TestStatus {
    print(TEST_CASE_INDENT, xfailMessage(_case.xfail?), _case.name, ":");
    flush(stdout);

    assert(nothing?(g_testCaseStatus));
    g_testCaseStatus = Maybe(TestStatus());
    finally g_testCaseStatus = nothing(TestStatus);

    try {
        _case._case();
    } catch(e:RequiredExpectationFailed) {
        println();
        printFailure("required expectation did not pass");
    } catch(e) {
        failed();
        println();
        printFailure("uncaught exception:");
        printFailure(TEST_CASE_INDENT, *e);
    }

    ref test = just(g_testCaseStatus);

    if (test.failed > 0) {
        if (_case.xfail?) {
            test.xfail = test.failed;
            test.failed = 0;
        } else {
            printFailure("-- FAILED");
        }
    } else {
        if (_case.xfail?) {
            println();
            printFailure("-- FIXED (should clear xfail flag)");
            test.failed = 1;
        } else {
            if(#Flag?("test.minimal"))
                println(" passed");
            else
                printlnColored(Green, " passed");
        }
    }

    return test;
}

passed() { just(g_testCaseStatus).passed +: 1; }
failed() { just(g_testCaseStatus).failed +: 1; }

define expect;

// primitive assertion function
overload expect(passed?: Bool, failReportFn) {
    if (passed?) {
        passed();
    } else {
        failed();
        println();
        failReportFn();
    }
}

overload expect(passed?: Bool, failReportMsg:String) {
    if (passed?) {
        passed();
    } else {
        failed();
        println();
        printFailure(failReportMsg);
    }
}

alias overload expect(passed?:Bool) {
    expect(passed?, str("`", __ARG__ passed?, "` returned false"));
}

alias expectTrue(value:Bool) {
    expect(value, str("`", __ARG__ value, "` is expected to be true but isn't"));
}
 
alias expectFalse(value:Bool) {
    expect(not value, str("`", __ARG__ value, "` is expected to be false but isn't"));
}

alias expectType(ExpectedType, result) {
    expectType2(__ARG__ result, ExpectedType, Type(result));
}

private expectType2(name, ExpectedType, ResultType) {
    expect(ResultType == ExpectedType, str("`", name,
        "` is expected to be of type ", ExpectedType, " but is of type ", 
        ResultType));
}

private expectEqual2(name, expected, result) {
    expect(
        expected == result,
        str("`", name, "` is expected to equal ", 
            repr(expected), " but is ", repr(result)));
}

alias expectEqual(expected, result) {
    expectEqual2(__ARG__ result, expected, result);
}

alias expectNotEqual(expected, result) {
    expect(
        expected != result,
        str("`", __ARG__ result, "` is expected not to equal ", 
            repr(expected), " but is ", repr(result)));
}

define expectedResults?;
overload expectedResults?(expected, result) = false;
[T when Tuple?(T)]
overload expectedResults?(expected: T, result: T) = expected == result;

alias expectEqualValues(expectedTuple, ..results) {
    expect(
        expectedResults?(expectedTuple, Tuple(..results)),
        str("`", __ARG__ results, "` are expected to equal:\n", 
            TEST_FAIL_CASE_INDENT, 
            ..weaveValues(", ", ..mapValues(repr, ..unpack(expectedTuple))), "\n", 
            TEST_FAILURE_INDENT, "but are:\n", 
            TEST_FAIL_CASE_INDENT, 
            ..weaveValues(", ", ..mapValues(repr, ..results))));
}

alias expectCallDefined(Proc, ..Types) {
    expect(
        CallDefined?(Proc, ..Types),
        str("`", __ARG__ Proc, "` isn't callable with the expected argument types:\n",
            TEST_FAIL_CASE_INDENT, ..weaveValues(", ", ..Types)));
}

expectCallUndefined(Proc, ..Types) {
    expect(
        not CallDefined?(Proc, ..Types),
        str("`", Proc, "` shouldn't be callable with the expected argument types:\n",
            TEST_FAIL_CASE_INDENT, ..weaveValues(", ", ..Types)));
}

[I]
private expectIterator2(name, iter:I, ..expected) {
    var expectedV = Vector[IteratorTargetType(I)]([..expected]);
    var resultV = Vector[IteratorTargetType(I)]();
    pushAll(resultV, iter);
    var msg = str("`", name, "` is expected to contain:\n");
    for (expectedX in expectedV)
        push(msg, TEST_FAIL_CASE_INDENT, str(repr(expectedX)),"\n");
    push(msg, TEST_FAILURE_INDENT, "but contains:\n");
    for (resultX in resultV)
        push(msg, TEST_FAIL_CASE_INDENT, str(repr(resultX)), "\n");
    pop(msg);
    expect(
        expectedV == resultV,
        msg
    );
}

alias expectIterator(iter, ..expected) {
    expectIterator2(__ARG__ iter, iter, ..expected);
}

alias expectSequence(seq, ..expected) {
    expectIterator2(__ARG__ seq, iterator(seq), ..expected);
}

alias expectExceptionType(T, fn) {
    try {
        fn();
    } catch(x: T) {
        expect(true, str());
        return;
    } catch(x) {
        expect(false, str("`", __ARG__ fn,
            "` is expected to throw exception of type ", T, " but throws ", x));
        return;
    }

    expect(false, str("`", __ARG__ fn,
        "` is expected to throw exception of type ", T, " but doesn't throw"));
}

[E]
alias expectException(expectedException:E, fn) {
    try {
        fn();
    } catch(x:E) {
        expect(x == expectedException, 
            str("`", __ARG__ fn, "` is expected to throw ", 
                expectedException, " but throws ", x));
        return;
    } catch(x) {
        expect(false,
            str("`", __ARG__ fn, "` is expected to throw ", 
                expectedException, " but throws ", x));
        return;
    }

    expect(false, 
        str("`", __ARG__ fn, "` is expected to throw ", 
            expectedException, " but doesn't throw"));
}

alias expectPrinted(expectedOutput, ..values) {
    expectEqual2(__ARG__ values, expectedOutput, str(..values));
}

record RequiredExpectationFailed();
instance Exception (RequiredExpectationFailed);

required(block) {
    ref test = just(g_testCaseStatus);
    var preFailed = test.failed;
    block();
    if (test.failed != preFailed)
        throw RequiredExpectationFailed();
}

var testOptionSpecs = vector(
    OptionSpec("s", "suite", HAS_VALUE, ALLOWS_REPEATS),
    OptionSpec("c", "case", HAS_VALUE, ALLOWS_REPEATS),
    OptionSpec("n", "nc", "no-color")
);

var testOptionsInitialized? = false;
var _testOptions = OptionTable();

private testOptions() {
    if(not testOptionsInitialized?){
        _testOptions = CommandlineOptionTable(testOptionSpecs);
        testOptionsInitialized? = true;
    }
    return ref _testOptions;
}

ifPasses(block, then) {
    ref test = just(g_testCaseStatus);
    var preFailed = test.failed;
    block();
    if (test.failed == preFailed)
        then();
}

testMain(..suites) {
    var test = TestStatus();

    ..for (suite in suites)
      if(runSuite?(suite))
        accumulateTestStatus(test, runTestSuite(suite));

    reportTest(test, "Overall: ");

    if (test.failed > 0) {
        println("TESTS FAILED");
        return 1;
    } else {
        return 0;
    }
}

private printlnColored(c : Color, ..values) {
    if (colored?()) { 
        textColor(c);
        println(..values);
        resetConsole();
    } else
        println(..values);    
}

private define runSuite?;
private define runCase?;
private define colored?;

overload runSuite?(suite) = optionsInclude?("suite", suite.name);
overload runCase?(_case) = optionsInclude?("case", _case.name);
overload colored?() = not(optionGiven?(testOptions(), "no-color"));

private optionsInclude?(name, elt){
    forward seq = getOptions(testOptions(), name);
    return empty?(seq) or include?(seq, elt);
}

private include?(seq, elt){
    for(x in seq) if(x == elt) return true;
    return false;
}

[when Flag?("test.minimal")]
overload runSuite?(suite) = true;
[when Flag?("test.minimal")]
overload runCase?(_case) = true;
[when Flag?("test.minimal")]
overload colored?() = false;

