
import io.files.raw.*;
import io.files.api.*;
import io.streams.*;
import io.streams.buffered.*;
import sharedpointers.*;
import strings.*;
import algorithms.(in?);


/// @section  File 

record File (
    ptr : SharedPointer[FileData],
);

private record FileData (
    file : RawFilePointer,

    inputStream : BufferedInputStream[RawFilePointer],
    outputStream : BufferedOutputStream[RawFilePointer],
);



/// @section  constructors 

[S when CCompatibleString?(S)]
overload File(path:S, mode:OpenMode) =
    File(new(FileData(RawFile(path, mode))));

[S when CCompatibleString?(S)]
overload File(path:S) = File(new(FileData(RawFile(path))));

overload File(rvalue f:RawFile) =
    File(new(FileData(move(f))));

overload FileData(rvalue file:RawFile) --> returned:FileData {
    var lineBuffered? = terminal?(file);
    var file = RawFilePointer(move(file));
    return FileData(
        file,
        BufferedInputStream(file),
        BufferedOutputStream(file, lineBuffered?));
}



/// @section  stdinFile, stdoutFile, stderrFile 

stdinFile()  = File(new(FileData(stdinRawFile())));
stdoutFile() = File(new(FileData(stdoutRawFile())));
stderrFile() = File(new(FileData(stderrRawFile())));


/// @section  fileHandle 

overload fileHandle(f:File) = fileHandle(f.ptr^.file);



/// @section  read, write, flush 

overload readBytes(f:File, buffer:Pointer[Byte], _requested:SizeT) =
    readBytes(f.ptr^.inputStream, buffer, _requested);

overload writeBytes(f:File, buffer:Pointer[Byte], n:SizeT) =
    writeBytes(f.ptr^.outputStream, buffer, n);

overload flush(f:File) {
    flush(f.ptr^.outputStream);
}


/// @section  fileSize, seek 

overload fileSize(f:File) {
    flush(f);
    return fileSize(f.ptr^.file);
}

overload seek(f:File, offset, whence) {
    flush(f);
    return seek(f.ptr^.file, offset, whence);
}



/// @section  terminal? 

overload terminal?(f:File) = terminal?(f.ptr^.file);



/// @section  asserts

staticassert(OutputStream?(File));
staticassert( InputStream?(File));
