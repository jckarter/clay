import unix.*;
import io.errors.*;
import maybe.(Maybe, nothing);



//
// directoryListing
//

directoryListing(x) =
    filtered(notCurrentOrPrevious?, mapped(direntName, direntSequence(x)));

private notCurrentOrPrevious?(x) = not (x == "." or x == "..");
private direntName(x) = CStringRef(begin(x.d_name));



//
// DirentSequence
//

record DirentSequence (
    dir : Pointer[DIR],
);

overload RegularRecord?(#DirentSequence) = false;
overload BitwiseMovedType?(#DirentSequence) = true;

[T when CCompatibleString?(T)]
overload DirentSequence(dir:T) --> returned: DirentSequence {
    returned.dir = opendir(cstring(dir));
    if (null?(returned.dir))
        throw GenericIOError(errno());
}

overload destroy(s: DirentSequence) {
    if (not null?(s.dir)) {
        var result = closedir(s.dir);
        if (result == Type(result)(-1))
            errorNoThrow(errorMessage(errno()));
    }
}
overload resetUnsafe(s: DirentSequence) {
    s.dir = null(DIR);
}

[T when CCompatibleString?(T)]
direntSequence(dir:T) = DirentSequence(dir);

overload iterator(s:DirentSequence) = DirentIterator(s.dir, Struct_dirent());



//
// DirentIterator
//

private record DirentIterator (dir : Pointer[DIR]);

overload nextValue(x:DirentIterator) {
    var entry = Struct_dirent();
    var ptr = Pointer[Struct_dirent]();
    var returnCode = readdir_r(x.dir, @x.entry, @ptr);
    if (returnCode != 0)
        throw GenericIOError(errno());
    if (null?(ptr))
        return nothing(Struct_dirent);
    else
        return Maybe(entry);
}
