import io.errors.*;
import unix.(opendir, readdir_r, closedir, DIR, Struct_dirent, errno, rmdir, mkdir, mode_t);
import data.strings.*;


import io.directories.common.*;


/// @section DirectoryIterator

record DirectoryIterator (
    dir : Pointer[DIR],
    dirent: Struct_dirent,
);

[S when CCompatibleString?(S)]
DirectoryIterator(dir: S) --> returned: DirectoryIterator {
    returned.dir = opendir(cstring(dir));
    if (null?(returned.dir))
        throw GenericIOError(errno(), "opendir");
}


RegularRecord?(#DirectoryIterator) = false;
BitwiseMovedType?(#DirectoryIterator) = true;

destroy(s: DirectoryIterator) {
    if (not null?(s.dir)) {
        var result = closedir(s.dir);
        assert(result != wrapCast(Type(result), -1));
    }
}
resetUnsafe(s: DirectoryIterator) {
    s.dir = null(DIR);
}

iterator(x:DirectoryIterator) = forward x;

nextValue(x:DirectoryIterator) {
    while (true) {
    var ptr = Pointer[Struct_dirent]();
    var returnCode = readdir_r(x.dir, @x.dirent, @ptr);
    if (returnCode != 0)
        throw GenericIOError(errno(), "readdir_r");
    if (null?(ptr))
        return nothing(DirectoryEntry);
        var name = CStringRef(begin(x.dirent.d_name));
        if (name == "." or name == "..")
            continue;
        return Maybe(DirectoryEntry(name));
    }
}



/// @section makeDirectory, deleteDirectory

makeDirectory(path) {
    alias oct777 = 511;
    var r = mkdir(cstring(path), mode_t(oct777));
    if (r < 0) {
        throw GenericIOError(errno(), "mkdir");
    }
}

deleteDirectory(path) {
    var r = rmdir(cstring(path));
    if (r < 0) {
        throw GenericIOError(errno(), "rmdir");
    }
}

