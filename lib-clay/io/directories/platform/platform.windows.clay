import win32.*;

import strings.*;

import io.errors.*;
import io.directories.common.*;

record DirectoryIterator (
    handle: HANDLE,
    first: Bool,
    findData: WIN32_FIND_DATA,
);

overload RegularRecord?(#DirectoryIterator) = false;
overload BitwiseMovedType?(#DirectoryIterator) = true;

[S when CCompatibleString?(S)]
overload DirectoryIterator(dir: S) --> returned: DirectoryIterator {
    var pattern = String() ++ dir ++ "\\*";

    returned.first = true;
    returned.handle = INVALID_HANDLE_VALUE;

    returned.handle = FindFirstFileA(cstring(pattern), @returned.findData);
    if (returned.handle == INVALID_HANDLE_VALUE) {
        throw GenericIOError(GetLastError());
    }
}

overload destroy(it: DirectoryIterator) {
    if (it.handle != INVALID_HANDLE_VALUE) {
        var result = FindClose(it.handle);
        assert(result != 0);
    }
}

overload resetUnsafe(it: DirectoryIterator) {
    it.handle = INVALID_HANDLE_VALUE;
}

overload iterator(it: DirectoryIterator) = forward it;

overload nextValue(it: DirectoryIterator) {
    if (it.first) {
        it.first = false;
    } else {
        var ok = FindNextFileA(it.handle, @it.findData);
        if (ok == 0) {
            if (GetLastError() == ERROR_NO_MORE_FILES) {
                return nothing(DirectoryEntry);
            } else {
                throw GenericIOError(GetLastError());
            }
        }
    }

    return Maybe(DirectoryEntry(CStringRef(begin(it.findData.cFileName))));
}

