public import os.errors.*;
import printer.protocol.(printTo,printReprTo);


record GenericIOError(code:Int, where:StringLiteralRef);

[I, S when Integer?(I) and StringLiteral?(S)]
GenericIOError(code:I, #S) --> returned:GenericIOError {
    returned.code = Int(code);
    returned.where = StringLiteralRef(S);
}

printTo(stream, x:GenericIOError) {
    printTo(stream, x.where, ": ");
    printTo(stream, "error(", x.code, "): ");
    printErrorMessageTo(stream, x.code);
}

printReprTo(stream, x:GenericIOError) {
    printTo(stream, "GenericIOError(", errorCodeName(x.code), ", ", repr(x.where), ")");
}

variant IOError;

instance OSError (IOError);

instance IOError (GenericIOError);

[T when VariantMember?(IOError, T)]
Exception(forward x:T) = Exception(IOError(x));
