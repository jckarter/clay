import paged.misc.*;

import data.strings;
import io.mapping.*;
import io.filesystem.*;
import io.files.*;


/// @section  NamedScalar[T] 

record NamedScalar[T] (
    fileName : data.strings.String,
    file : File,
    mapping : FileMapping,
);

[T]
RegularRecord?(#NamedScalar[T]) = false;



/// @section  constructor 

[S,T when String?(S)]
NamedScalar[T](fileName:S, initial:T) {
    if (pathExists?(fileName)) {
        var f = File(fileName, READ_WRITE);
        var mapping = FileMapping(f, MAP_READ_WRITE);
        return NamedScalar[T](data.strings.String(fileName), f, mapping);
    }
    else {
        var f = File(fileName, CREATE);
        // FIXME: not exception safe
        resizeFile(f, TypeSize(T));
        var mapping = FileMapping(f, MAP_READ_WRITE);
        var ptr = Pointer[T](mappingAddress(mapping));
        ptr^ <-- initial;
        return NamedScalar[T](data.strings.String(fileName), f, mapping);
    }
}



/// @section  destroy 

[T]
destroy(x:NamedScalar[T]) {
    destroy(x.mapping);
    destroy(x.file);
    destroy(x.fileName);
}



/// @section  dereference 

[T]
dereference(x:NamedScalar[T]) =
    ref Pointer[T](mappingAddress(x.mapping))^;
