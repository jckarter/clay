import paged.allocator.*;


/// @section  SharedPointer 

record RefCounted[T] (
    refCount:Int,
    value:T,
);

record SharedPointer[T] (
    ptr: PagedPointer[RefCounted[T]]
);

[T]
RegularRecord?(#SharedPointer[T]) = false;



/// @section  new, constructors 
// assign, destroy
//

[T]
alias new(x:T) {
    var ptr = allocatePaged(RefCounted[T], SizeT(1));
    ptr^.refCount = 1;
    ptr^.value <-- x;
    return SharedPointer(ptr);
}

[T]
SharedPointer[T]() {
    return SharedPointer(nullPaged(RefCounted[T]));
}

[T]
SharedPointer[T](src:SharedPointer[T]) {
    if (not null?(src))
        src.ptr^.refCount +: 1;
    return SharedPointer(src.ptr);
}

[T]
moveUnsafe(src:SharedPointer[T]) --> returned:SharedPointer[T] {
    returned.ptr = src.ptr;
}

[T]
resetUnsafe(p : SharedPointer[T]) {
    p <-- SharedPointer[T]();
}

[T]
assign(ref dest:SharedPointer[T], ref src:SharedPointer[T]) {
    if (dest.ptr == src.ptr)
        return;
    destroy(dest);
    dest <-- src;
}

[T]
destroy(p : SharedPointer[T]) {
    if (not null?(p)) {
        p.ptr^.refCount -: 1;
        if (p.ptr^.refCount == 0) {
            destroy(p.ptr^.value);
            freePaged(p.ptr);
        }
    }
}



/// @section  dereference 

[T]
dereference(p : SharedPointer[T]) = ref p.ptr^.value;



/// @section  null?, nullShared 

[T]
null?(p : SharedPointer[T]) = null?(p.ptr);

[T]
nullShared(#T) = SharedPointer[T]();
