

//
// type predicates
//

[T]
overload ContiguousCoordinate?(static Pointer[T]) = true;



//
// null?
//

define null?;



//
// Pointer - constructor
//

[T]
inline overload Pointer[T]() = nullPointer(Pointer[T]);



//
// Pointer - convert to/from integers and other pointers
//

[I,T|Integer?(I)]
inline overload I(a:Pointer[T]) = pointerToInt(I, a);

[I,T|Integer?(I)]
inline overload Pointer[T](a:I) = intToPointer(Pointer[T], a);

[DEST, SRC]
inline overload Pointer[DEST](a:Pointer[SRC]) =
    bitcast(Pointer[DEST], a);



//
// Pointer - assign, equals?, lesser?
//

[T]
inline overload equals?(a:Pointer[T], b:Pointer[T]) {
    return integerEquals?(a, b);
}

[T]
inline overload lesser?(a:Pointer[T], b:Pointer[T]) {
    return integerLesser?(a, b);
}



//
// Pointer - arithmetic
//

[T,I|Integer?(I)]
inline overload add(p:Pointer[T], i:I) {
    return pointerOffset(p, i);
}

[T,I|Integer?(I)]
inline overload add(i:I, p:Pointer[T]) {
    return pointerOffset(p, i);
}

[T,I|Integer?(I)]
inline overload subtract(p:Pointer[T], i:I) {
    return pointerOffset(p, -PtrInt(i));
}

[T]
inline overload subtract(a:Pointer[T], b:Pointer[T]) {
    return (PtrInt(a) - PtrInt(b)) / PtrInt(TypeSize(T));
}

[T]
inline overload inc(a:Pointer[T]) {
    a += 1;
}

[T]
inline overload dec(a:Pointer[T]) {
    a -= 1;
}



//
// Pointer - null, null?, dereference, index
//

[T]
inline null(static T) = nullPointer(Pointer[T]);

[T]
inline overload null?(x:Pointer[T]) = x == null(T);

[T]
inline overload dereference(p:Pointer[T]) = ref pointerDereference(p);

[T, I | Integer?(I)]
inline overload index(p:Pointer[T], i:I) = ref (p + i)@;



//
// CodePointer?, ExternalCodePointer?
//

CodePointer?(x) = false;
[In,Out] overload CodePointer?(static CodePointer[In,Out]) = true;

ExternalCodePointer?(x) = false;
[CC,V?,In,Out] overload ExternalCodePointer?(static ExternalCodePointer[CC,V?,In,Out]) = true;


//
// CodePointer - constructor
//

[In, Out]
inline overload CodePointer[In,Out]() = nullPointer(CodePointer[In,Out]);



//
// CodePointer - convert to/from other pointers/integers
//

[T, In, Out]
inline overload Pointer[T](a:CodePointer[In,Out]) = bitcast(Pointer[T], a);

[T, In, Out]
inline overload CodePointer[In,Out](a:Pointer[T]) =
    bitcast(CodePointer[In,Out], a);

[In1, Out1, In2, Out2]
inline overload CodePointer[In1,Out1](a:CodePointer[In2,Out2]) =
    bitcast(CodePointer[In1,Out1], a);

[In, Out, I | Integer?(I)]
inline overload CodePointer[In,Out](i:I) =
    intToPointer(CodePointer[In,Out], i);

[In, Out, I | Integer?(I)]
inline overload I(a:CodePointer[In,Out]) = pointerToInt(I, a);



//
// CodePointer - equals?, lesser?, null?

[In, Out]
inline overload equals?(a:CodePointer[In,Out], b:CodePointer[In,Out]) {
    return integerEquals?(a, b);
}

[In, Out]
inline overload lesser?(a:CodePointer[In,Out], b:CodePointer[In,Out]) {
    return integerLesser?(a, b);
}

[In, Out]
inline overload null?(p:CodePointer[In,Out]) = p == nullPointer(CodePointer[In,Out]);



//
// ExternalCodePointer - constructor
//

[CC,V?,I,O]
inline overload ExternalCodePointer[CC,V?,I,O]() =
    nullPointer(ExternalCodePointer[CC,V?,I,O]);



//
// ExternalCodePointer - convert to/from other pointers/integers
//

[T, CC,V?,I,O]
inline overload Pointer[T](a:ExternalCodePointer[CC,V?,I,O]) = bitcast(Pointer[T], a);

[T, CC,V?,I,O]
inline overload ExternalCodePointer[CC,V?,I,O](a:Pointer[T]) =
    bitcast(ExternalCodePointer[CC,V?,I,O], a);

[CC1,V1?,I1,O1, CC2,V2?,I2,O2]
inline overload ExternalCodePointer[CC1,V1?,I1,O1](a:ExternalCodePointer[CC2,V2?,I2,O2]) =
    bitcast(ExternalCodePointer[CC1,V1?,I1,O1], a);

[CC,V?,In,Out,I | Integer?(I)]
inline overload ExternalCodePointer[CC,V?,In,Out](i:I) =
    intToPointer(ExternalCodePointer[CC,V?,In,Out], i);

[CC,V?,In,Out,I | Integer?(I)]
inline overload I(a:ExternalCodePointer[CC,V?,In,Out]) =
    pointerToInt(I, a);


//
// ExternalCodePointer - equals?, lesser?, null?
//

[C,V,I,O]
inline overload equals?(a:ExternalCodePointer[C,V,I,O], b:ExternalCodePointer[C,V,I,O]) {
    return integerEquals?(a, b);
}

[C,V,I,O]
inline overload lesser?(a:ExternalCodePointer[C,V,I,O], b:ExternalCodePointer[C,V,I,O]) {
    return integerLesser?(a, b);
}

[C,V,I,O]
inline overload null?(p:ExternalCodePointer[C,V,I,O]) {
    return p == nullPointer(ExternalCodePointer[C,V,I,O]);
}


//
// ExternalCodePointer - call
//

[F, T]
private CCastable?(static F, static T) = false;

[F, T | Integer?(F) and Integer?(T) and TypeSize(T) >= TypeSize(F)]
overload CCastable?(static F, static T) = true;

[F, T | Integer?(F) and Integer?(T) and TypeSize(T) == TypeSize(F)]
overload CCastable?(static Pointer[F], static Pointer[T]) = true;

[F]
overload CCastable?(static Pointer[F], static RawPointer) = true;

[F, T | CCastable?(F, T)]
private cCast(from:F, static T) = T(from);

[S | String?(S)]
overload cCast(s:S, static Pointer[CChar]) = cstring(s);

[F]
overload cCast(forward from:F, static F) = forward from;

[CC, ..In, ..Out, ..A | countValues(..In) == countValues(..A)]
inline overload call(ptr:ExternalCodePointer[CC, false, [..In], [..Out]], ..args:A) =
    ..callExternalCodePointer(ptr,
        ..mapValues2((arg, T) => cCast(arg, T), static countValues(..A), ..args, ..In));

[CC, ..In, ..Out]
inline overload call(ptr:ExternalCodePointer[CC, false, [..In], [..Out]], ..args:In) =
    ..callExternalCodePointer(ptr, ..args);

[CC, ..In, ..Out, ..A | (countValues(..A) >= countValues(..In))]
inline overload call(ptr:ExternalCodePointer[CC, true, [..In], [..Out]], ..args:A) {
    alias N = static countValues(..In);
    return ..callExternalCodePointer(ptr,
        ..mapValues2((arg, T) => cCast(arg, T), N, ..takeValues(N, ..args), ..In),
        ..dropValues(N, ..args));
}

[CC, ..In, ..Out, ..A | (countValues(..A) >= countValues(..In))
                       and (Tuple[..takeValues(static countValues(..In), ..A)] == Tuple[..In])]
inline overload call(ptr:ExternalCodePointer[CC, true, [..In], [..Out]], ..args:A) =
    ..callExternalCodePointer(ptr, ..args);


//
// construct code pointers from static callables
//

[..In, ..Out, fn | CallDefined?(fn, ..In)]
inline overload CodePointer[[..In], [..Out]](static fn) : CodePointer[[..In], [..Out]]
    = makeCodePointer(fn, ..In);

[CC, V?, ..In, ..Out, fn | CallDefined?(fn, ..In)]
inline overload ExternalCodePointer[CC, V?, [..In], [..Out]](static fn)
    : ExternalCodePointer[CC, V?, [..In], [..Out]]
    = makeExternalCodePointer(fn, static CC, static V?, ..In);


//
// code pointers are Mono?
//

[..In, ..Out]
alias overload MonoInputTypes(f:CodePointer[[..In], [..Out]]) = ..In;
[CC, ..In, ..Out]
alias overload MonoInputTypes(f:ExternalCodePointer[CC, false, [..In], [..Out]]) = ..In;


//
// aliases for external code pointer types
//

alias CCodePointer[I,O] = ExternalCodePointer[cdecl, false, I, O];
alias VarArgsCCodePointer[I,O] = ExternalCodePointer[cdecl, true, I, O];
alias StdCallCodePointer[I,O] = ExternalCodePointer[stdcall, false, I, O];
alias FastCallCodePointer[I,O] = ExternalCodePointer[fastcall, false, I, O];
alias ThisCallCodePointer[I,O] = ExternalCodePointer[thiscall, false, I, O];
alias LLVMCodePointer[I,O] = ExternalCodePointer[llvm, false, I, O];

alias makeCCodePointer(fn, ..In) =
    makeExternalCodePointer(fn, cdecl, static false, ..In);


//
// construct code pointers from mono static callables
//

[fn | Mono?(fn)]
inline overload CodePointer(static fn) = makeCodePointer(fn, ..MonoInputTypes(fn));
[fn | Mono?(fn)]
inline overload CCodePointer(static fn) =
    makeExternalCodePointer(fn, cdecl, static false, ..MonoInputTypes(fn));
[fn | Mono?(fn)]
inline overload StdCallCodePointer(static fn) =
    makeExternalCodePointer(fn, stdcall, static false, ..MonoInputTypes(fn));
[fn | Mono?(fn)]
inline overload FastCallCodePointer(static fn) =
    makeExternalCodePointer(fn, fastcall, static false, ..MonoInputTypes(fn));
[fn | Mono?(fn)]
inline overload ThisCallCodePointer(static fn) =
    makeExternalCodePointer(fn, thiscall, static false, ..MonoInputTypes(fn));
[fn | Mono?(fn)]
inline overload LLVMCodePointer(static fn) =
    makeExternalCodePointer(fn, llvm, static false, ..MonoInputTypes(fn));
