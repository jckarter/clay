import numbers.parser.errno.*;
import printer.(error);
import printer.formatter.(repr);
import data.strings.tempcstrings.*;
public import complex.*;
public import numbers.parser.*;
import numbers.parser.(private ConvFuncForType);

[T when Imaginary?(T)]
overload ConvFuncForType(#T) = ConvFuncForType(ImagBaseType(T));

[S, ImagType when String?(S) and Imaginary?(ImagType)]
overload parse(#ImagType, s:S) {
    alias convFunc = ConvFuncForType(ImagType);
    var temp = tempCString(s);
    var p = temp.ptr;
    var end = null(CChar);
    var value = convFunc(p, @end);
    var typeName = StaticName(ImagType);
    if (end^ != 0)
        error("invalid " ++ typeName ++ ": ", repr(s));
    if (errno() == ERANGE)
        error(typeName ++ " out of range: ", repr(s));
    return numericConvert(ImagType,value);
}

