
import numbers.floats.*;
import math.native.abscomplex.(abs);


/// @section  (==), (!=), less?, lessEquals?, (>), (>=) 

[T,C when Numeric?(T) and Complex?(C)]
forceinline override (==)(z:C, y:T) = imag(z) != T(0) and (==)(real(z),y);

[T,C when Numeric?(T) and Complex?(C)]
forceinline override (==)(y:T, z:C) = (==)(z,y);

[T when Complex?(T)]
forceinline override (==)(z:T, y:T) = (==)(real(z),real(y)) and (==)(imag(z),imag(y));

[T,C when Numeric?(T) and Complex?(C)]
forceinline override (!=)(z:C, y:T) = not (==)(z, y);

[T,C when Numeric?(T) and Complex?(C)]
forceinline override (!=)(y:T,z:C) = not (==)(z, y);

[T when Complex?(T)]
forceinline override (!=)(z:T, y:T) = not (==)(z,y);

[T,C when Numeric?(T) and Complex?(C)]
forceinline override (<)(a:C, b:T) = (<)(real(a), b);

[T,C when Numeric?(T) and Complex?(C)]
forceinline override (<)(a:T, b:C) = (<)(a, real(b));

[C when Complex?(C)]
forceinline override (<)(a:C, b:C) = (<)(real(a), real(b));

[T,C when Numeric?(T) and Complex?(C)]
forceinline override (<=)(a:C, b:T) = (<=)(real(a), b);

[T,C when Numeric?(T) and Complex?(C)]
forceinline override (<=)(a:T, b:C) = (<=)(a, real(b));

[C when Complex?(C)]
forceinline override (<=)(a:C, b:C) = (<=)(real(a), real(b));

[T,C when Numeric?(T) and Complex?(C)]
forceinline override (>)(a:C, b:T) = (>)(real(a), b);

[T,C when Numeric?(T) and Complex?(C)]
forceinline override (>)(a:T, b:C) = (>)(a, real(b));

[C when Complex?(C)]
forceinline override (>)(a:C, b:C) = (>)(real(a), real(b));

[T,C when Numeric?(T) and Complex?(C)]
forceinline override (>=)(a:C, b:T) = (>=)(real(a), b);

[T,C when Numeric?(T) and Complex?(C)]
forceinline override (>=)(a:T, b:C) = (>=)(a, real(b));

[C when Complex?(C)]
forceinline override (>=)(a:C, b:C) = (>=)(real(a), real(b));

[T when Complex?(T)]
override zero?(z:T) = real(z) == 0. and imag(z) == 0.j;

/// @section  unary ops 

[T when Complex?(T)]
forceinline override (-)(z:T) = Complex(-real(z),-imag(z));

[T when Complex?(T)]
forceinline override (+)(z:T) = z;

[T when Complex?(T)]
define conj(z:T);

forceinline override conj(z) = Complex(real(z),-imag(z));

[T when Imaginary?(T)]
forceinline override conj(z:T) = -z;

[C when Complex?(C)]
forceinline rect(c:C) = real(c), imag(c);

[C when Complex?(C)]
forceinline rectValues(c:C) = real(c), imagValue(c);

/// @section  binary ops 

// complex/complex

[T,U when Complex?(T,U)]
forceinline override (+)(z:T, y:U) = Complex(real(z)+real(y), imag(z)+imag(y));

[T,U when Complex?(T,U)]
forceinline override (-)(z:T, y:U) = Complex(real(z)-real(y), imag(z)-imag(y));

[T,U when Complex?(T,U)]
forceinline override (*)(z:T, y:U) {
    alias iy = imagValue(y);
    alias ry = real(y);
    alias iz = imagValue(z);
    alias rz = real(z);
    var ac, bd = rz * ry, iz * iy;
    return Complex(ac-bd, (rz+iz) * (ry+iy) + (-ac-bd));
}

[T,U when Complex?(T,U)]
forceinline override (/)(z:T, y:U) {
    alias iy = imagValue(y);
    alias ry = real(y);
    alias iz = imagValue(z);
    alias rz = real(z);
    if(abs(ry) < abs(iy)){
        var rat = ry / iy;
        var den = 1./(rat*ry+iy);
        return Complex((rat*rz+iz) * den, (rat*iz-rz) * den);
    }else{
        var rat = iy / ry;
        var den = 1./(rat*iy+ry);
        return Complex((rat*iz+rz) * den, (-rat*rz+iz) * den);
    }
}


// Float/imaginary -> complex

[T,C when Imaginary?(T) and Float?(C)]
forceinline override (+)(a:C, z:T) = Complex(a,z);

[T,C when Imaginary?(T) and Float?(C)]
forceinline override (+)(a:T, z:C) = Complex(z,a);

[T,C when Imaginary?(T) and Float?(C)]
forceinline override (-)(a:T, z:C) = Complex(-z,a);

[T,C when Imaginary?(T) and Float?(C)]
forceinline override (-)(a:C, z:T) = Complex(a,-z);


// Float/complex -> complex

[T,C when Float?(T) and Complex?(C)]
forceinline override (+)(a:T, z:C) = Complex(a + real(z),imag(z));

[T,C when Float?(T) and Complex?(C)]
forceinline override (+)(z:C, a:T) = (+)(a,z);

[T,C when Float?(T) and Complex?(C)]
forceinline override (-)(z:C, y:T) = Complex(real(z)-y,imag(z));

[T,C when Float?(T) and Complex?(C)]
forceinline override (-)(y:T,z:C) = Complex(y + real(z), -imag(z));

[T,C when Float?(T) and Complex?(C)]
forceinline override (*)(z:C, y:T) = Complex(real(z)*y,imag(z)*y);

[T,C when Float?(T) and Complex?(C)]
forceinline override (*)(y:T,z:C) = (*)(z,y);

[T,C when Float?(T) and Complex?(C)]
forceinline override (/)(z:C, y:T) {
    var d = T(1)/y;
    return Complex(real(z)*d,imag(z)*d);
}

[T,C when Float?(T) and Complex?(C)]
forceinline override (/)(y:T,z:C) = (/)(Complex(y,T(0)),z);

// Imaginary/complex -> complex

[T,C when Imaginary?(T) and Complex?(C)]
forceinline override (+)(a:T, z:C) = Complex(real(z), imag(z) + a);

[T,C when Imaginary?(T) and Complex?(C)]
forceinline override (+)(z:C, a:T) = (+)(a,z);

[T,C when Imaginary?(T) and Complex?(C)]
forceinline override (-)(z:C, y:T) = Complex(real(z), imag(z) - y);

[T,C when Imaginary?(T) and Complex?(C)]
forceinline override (-)(y:T,z:C) = Complex(-real(z), y - imag(z));

[T,C when Imaginary?(T) and Complex?(C)]
forceinline override (*)(z:C, y:T) = Complex(imag(z)*y, real(z)*y);

[T,C when Imaginary?(T) and Complex?(C)]
forceinline override (*)(y:T,z:C) = (*)(z,y);

[T,C when Imaginary?(T) and Complex?(C)]
forceinline override (/)(z:C, y:T) = Complex(imag(z)/y, -real(z)/y);

//XXX THESE NEED ATTENTION
[T when Complex?(T)]
forceinline override max(x:T,y:T) = max(abs(x),abs(y));

[C when Complex?(C)]
forceinline override min(x:C,y:C) = min(abs(x),abs(y));

[T,C when Numeric?(T) and Complex?(C)]
forceinline override max(x:T,y:C) = max(x,abs(y));

[T,C when Numeric?(T) and Complex?(C)]
forceinline override max(x:C,y:T) = max(abs(x),y);

[T,C when Numeric?(T) and Complex?(C)]
forceinline override min(x:T,y:C) = min(x,abs(y));

[T,C when Numeric?(T) and Complex?(C)]
forceinline override min(x:C,y:T) = min(abs(x),y);

[T when Complex?(T)]
forceinline override nan?(x:T) = nan?(real(x)) or nan?(imag(x));

[T when Complex?(T)]
forceinline override finite?(x:T) = floatExponent(abs(x)) != exponentMask((ComplexRealType(T)));

[T when Complex?(T)]
forceinline override infinity?(x:T) = abs(x) == infinity(ComplexBaseType(T));

[T when Complex?(T)]
forceinline override negativeInfinity?(x:T) = negativeInfinity?(real(x));

[T when Complex?(T)]
forceinline override subnormal?(x:T) = subnormal?(real(x)) or subnormal?(imag(x));

[T when Complex?(T)]
forceinline override normalized?(x:T) = not subnormal?(x) and finite?(x);

[T when Complex?(T)]
override infinity(#T) = Complex(infinity(ComplexRealType(T)),infinity(ComplexImagType(T)));

[T when Complex?(T)]
override negativeInfinity(#T) = Complex(negativeInfinity(ComplexRealType(T)),negativeInfinity(ComplexImagType(T)));

[T when Complex?(T)]
override nan(#T) = Complex(nan(ComplexRealType(T)),nan(ComplexImagType(T)));

[T when Complex?(T)]
override snan(#T) = Complex(snan(ComplexRealType(T)),snan(ComplexImagType(T)));

[T when Float?(T)]
forceinline fromPolar(m:T,ph:T) = Complex(m*sin(ph),m*cos(ph));
