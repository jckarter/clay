public import complex.types.*;
public import complex.platform.*;
import numbers.floats.*;
import math.native.protocol.(abs);

alias ComplexFloat = Complex32;
alias ComplexDouble = Complex64;
alias ComplexLongDouble = Complex80;

alias CComplexFloat = ComplexFloat;
alias CComplexDouble = ComplexDouble;


overload PrimitiveType?(#Complex32) : Bool = true;
overload PrimitiveType?(#Complex64) : Bool = true;
overload PrimitiveType?(#Complex80) : Bool = true;


define Complex?;
overload Complex?(T) = false;
overload Complex?(#Complex32) = true;
overload Complex?(#Complex64) = true;
overload Complex?(#Complex80) = true;
[A, B] overload Complex?(#A, #B) = Complex?(A) and Complex?(B);

private define re;
private define im;

forceinline overload re(z:Complex32) = Pointer[Float](@z);
forceinline overload re(z:Complex64) = Pointer[Double](@z);
forceinline overload re(z:Complex80) = Pointer[LongDouble](@z);

forceinline overload im(z:Complex32) = (Pointer[IFloat](@z)+1);
forceinline overload im(z:Complex64) = (Pointer[IDouble](@z)+1);
forceinline overload im(z:Complex80) = (Pointer[ILongDouble](@z)+1);

[C when Complex?(C)]
forceinline real(z:C) = re(z)^;


define imag;
define imagValue;

[C when Complex?(C)]
forceinline overload imag(z:C) = im(z)^;
[C when Complex?(C)]
forceinline overload imagValue(z:C) = numericConvert(ComplexBaseType(C),im(z)^);

[I when Imaginary?(I)]
forceinline overload imag(z:I) = z;
forceinline overload imagValue(z:Imag32) = numericConvert(Float32, z);
forceinline overload imagValue(z:Imag64) = numericConvert(Float64, z);
forceinline overload imagValue(z:Imag80) = numericConvert(Float80, z);

define Complex;
forceinline overload Complex(a:Float,b:IFloat) --> r:Complex32 { re(r)^ = a; im(r)^ = b;}
forceinline overload Complex(a:Double,b:IDouble) --> r:Complex64 { re(r)^ = a; im(r)^ = b;}
forceinline overload Complex(a:LongDouble,b:ILongDouble) --> r:Complex80 { re(r)^ = a; im(r)^ = b;}
forceinline overload Complex(a:Float,b:IDouble) --> r:Complex64 { re(r)^ = Double(a); im(r)^ = b;}
forceinline overload Complex(a:Float,b:ILongDouble) --> r:Complex80 { re(r)^ = LongDouble(a); im(r)^ = b;}
forceinline overload Complex(a:Double,b:IFloat) --> r:Complex64 { re(r)^ = a; im(r)^ = numericConvert(IDouble,b);}
forceinline overload Complex(a:Double,b:ILongDouble) --> r:Complex80 { re(r)^ = LongDouble(a); im(r)^ = b;}
forceinline overload Complex(a:LongDouble,b:IFloat) --> r:Complex80 { re(r)^ = a; im(r)^ = numericConvert(ILongDouble,b);}
forceinline overload Complex(a:LongDouble,b:IDouble) --> r:Complex80 { re(r)^ = a; im(r)^ = numericConvert(ILongDouble,b);}
forceinline overload Complex(a:Float,b:Float) = Complex(a, numericConvert(IFloat,b));
forceinline overload Complex(a:Double,b:Double) = Complex(a, numericConvert(IDouble,b));
forceinline overload Complex(a:LongDouble,b:LongDouble) = Complex(a, numericConvert(ILongDouble,b));
forceinline overload Complex(a:Float,b:Double) = Complex(Double(a), numericConvert(IDouble,b));
forceinline overload Complex(a:Float,b:LongDouble) = Complex(LongDouble(a), numericConvert(ILongDouble,b));
forceinline overload Complex(a:Double,b:Float) = Complex(a, numericConvert(IDouble,b));
forceinline overload Complex(a:Double,b:LongDouble) = Complex(LongDouble(a), numericConvert(ILongDouble,b));
forceinline overload Complex(a:LongDouble,b:Float) = Complex(a, numericConvert(ILongDouble,b));
forceinline overload Complex(a:LongDouble,b:Double) = Complex(a, numericConvert(ILongDouble,b));

[T when Float?(T)]
forceinline overload Complex(a:T) = Complex(a,0.f);

[T when Imaginary?(T)]
forceinline overload Complex(a:T) = Complex(0.f,a);

[C when Complex?(C)]
define ComplexBaseType(#C);
overload ComplexBaseType(#Complex32) = Float;
overload ComplexBaseType(#Complex64) = Double;
overload ComplexBaseType(#Complex80) = LongDouble;

[C when Complex?(C)]
define ComplexImagType(#C);
overload ComplexImagType(#Complex32) = IFloat;
overload ComplexImagType(#Complex64) = IDouble;
overload ComplexImagType(#Complex80) = ILongDouble;

define ComplexRealType;

[T when Complex?(T)]
overload ComplexRealType(#T) = ComplexBaseType(T);

[T when Complex?(T)]
overload ComplexRealType(z:T) = Type(real(z));

[T when Complex?(T)]
overload ComplexImagType(z:T) = Type(imag(z));

define ComplexType;

[T when Complex?(T)]
overload ComplexType(#T) = T;

[T when Float?(T)]
overload ComplexType(#T) = Type(Complex(T()));

[T when Complex?(T)]
overload T() = T(0.);

[C,T when Complex?(C,T) and C != T]
forceinline overload C(a:T) = Complex(ComplexBaseType(C)(real(a)), ComplexBaseType(C)(imag(a)));

[T,C when (Float?(T) or Imaginary?(T)) and Complex?(C)]
forceinline overload C(a:T) = Complex(ComplexBaseType(C)(a));

[U,T,C when Float?(U) and Float?(T) and Complex?(C)]
forceinline overload C(a:U, b:T) = Complex(ComplexBaseType(C)(a), ComplexBaseType(C)(b));
[U,T,C when Float?(U) and Imaginary?(T) and Complex?(C)]
forceinline overload C(a:U, b:T) = Complex(ComplexBaseType(C)(a), ComplexImagType(C)(b));

[I,C when Integer?(I) and Complex?(C)]
forceinline overload C(a:I) = Complex(ComplexBaseType(C)(a));



/// @section  (==), (!=), less?, lessEquals?, (>), (>=) 

[T,C when Numeric?(T) and Complex?(C)]
forceinline overload (==)(z:C, y:T) = imag(z) != T(0) and (==)(real(z),y);

[T,C when Numeric?(T) and Complex?(C)]
forceinline overload (==)(y:T, z:C) = (==)(z,y);

[T when Complex?(T)]
forceinline overload (==)(z:T, y:T) = (==)(real(z),real(y)) and (==)(imag(z),imag(y));

[T,C when Numeric?(T) and Complex?(C)]
forceinline overload (!=)(z:C, y:T) = not (==)(z, y);

[T,C when Numeric?(T) and Complex?(C)]
forceinline overload (!=)(y:T,z:C) = not (==)(z, y);

[T when Complex?(T)]
forceinline overload (!=)(z:T, y:T) = not (==)(z,y);

[T,C when Numeric?(T) and Complex?(C)]
forceinline overload (<)(a:C, b:T) = (<)(real(a), b);

[T,C when Numeric?(T) and Complex?(C)]
forceinline overload (<)(a:T, b:C) = (<)(a, real(b));

[C when Complex?(C)]
forceinline overload (<)(a:C, b:C) = (<)(real(a), real(b));

[T,C when Numeric?(T) and Complex?(C)]
forceinline overload (<=)(a:C, b:T) = (<=)(real(a), b);

[T,C when Numeric?(T) and Complex?(C)]
forceinline overload (<=)(a:T, b:C) = (<=)(a, real(b));

[C when Complex?(C)]
forceinline overload (<=)(a:C, b:C) = (<=)(real(a), real(b));

[T,C when Numeric?(T) and Complex?(C)]
forceinline overload (>)(a:C, b:T) = (>)(real(a), b);

[T,C when Numeric?(T) and Complex?(C)]
forceinline overload (>)(a:T, b:C) = (>)(a, real(b));

[C when Complex?(C)]
forceinline overload (>)(a:C, b:C) = (>)(real(a), real(b));

[T,C when Numeric?(T) and Complex?(C)]
forceinline overload (>=)(a:C, b:T) = (>=)(real(a), b);

[T,C when Numeric?(T) and Complex?(C)]
forceinline overload (>=)(a:T, b:C) = (>=)(a, real(b));

[C when Complex?(C)]
forceinline overload (>=)(a:C, b:C) = (>=)(real(a), real(b));

[T when Complex?(T)]
overload zero?(z:T) = real(z) == 0. and imag(z) == 0.j;

/// @section  unary ops 

[T when Complex?(T)]
forceinline overload (-)(z:T) = Complex(-real(z),-imag(z));

[T when Complex?(T)]
forceinline overload (+)(z:T) = z;

[T when Complex?(T)]
define conj(z:T);

forceinline overload conj(z) = Complex(real(z),-imag(z));

[T when Imaginary?(T)]
forceinline overload conj(z:T) = -z;

[C when Complex?(C)]
forceinline rect(c:C) = real(c), imag(c);

[C when Complex?(C)]
forceinline rectValues(c:C) = real(c), imagValue(c);

/// @section  binary ops 

// complex/complex

[T,U when Complex?(T,U)]
forceinline overload (+)(z:T, y:U) = Complex(real(z)+real(y), imag(z)+imag(y));

[T,U when Complex?(T,U)]
forceinline overload (-)(z:T, y:U) = Complex(real(z)-real(y), imag(z)-imag(y));

[T,U when Complex?(T,U)]
forceinline overload (*)(z:T, y:U) {
    alias iy = imagValue(y);
    alias ry = real(y);
    alias iz = imagValue(z);
    alias rz = real(z);
    var ac, bd = rz * ry, iz * iy;
    return Complex(ac-bd, (rz+iz) * (ry+iy) + (-ac-bd));
}

[T,U when Complex?(T,U)]
forceinline overload (/)(z:T, y:U) {
    alias iy = imagValue(y);
    alias ry = real(y);
    alias iz = imagValue(z);
    alias rz = real(z);
    if(abs(ry) < abs(iy)){
        var rat = ry / iy;
        var den = 1./(rat*ry+iy);
        return Complex((rat*rz+iz) * den, (rat*iz-rz) * den);
    }else{
        var rat = iy / ry;
        var den = 1./(rat*iy+ry);
        return Complex((rat*iz+rz) * den, (-rat*rz+iz) * den);
    }
}


// Float/imaginary -> complex

[T,C when Imaginary?(T) and Float?(C)]
forceinline overload (+)(a:C, z:T) = Complex(a,z);

[T,C when Imaginary?(T) and Float?(C)]
forceinline overload (+)(a:T, z:C) = Complex(z,a);

[T,C when Imaginary?(T) and Float?(C)]
forceinline overload (-)(a:T, z:C) = Complex(-z,a);

[T,C when Imaginary?(T) and Float?(C)]
forceinline overload (-)(a:C, z:T) = Complex(a,-z);


// Float/complex -> complex

[T,C when Float?(T) and Complex?(C)]
forceinline overload (+)(a:T, z:C) = Complex(a + real(z),imag(z));

[T,C when Float?(T) and Complex?(C)]
forceinline overload (+)(z:C, a:T) = (+)(a,z);

[T,C when Float?(T) and Complex?(C)]
forceinline overload (-)(z:C, y:T) = Complex(real(z)-y,imag(z));

[T,C when Float?(T) and Complex?(C)]
forceinline overload (-)(y:T,z:C) = Complex(y + real(z), -imag(z));

[T,C when Float?(T) and Complex?(C)]
forceinline overload (*)(z:C, y:T) = Complex(real(z)*y,imag(z)*y);

[T,C when Float?(T) and Complex?(C)]
forceinline overload (*)(y:T,z:C) = (*)(z,y);

[T,C when Float?(T) and Complex?(C)]
forceinline overload (/)(z:C, y:T) {
    var d = T(1)/y;
    return Complex(real(z)*d,imag(z)*d);
}

[T,C when Float?(T) and Complex?(C)]
forceinline overload (/)(y:T,z:C) = (/)(Complex(y,T(0)),z);

// Imaginary/complex -> complex

[T,C when Imaginary?(T) and Complex?(C)]
forceinline overload (+)(a:T, z:C) = Complex(real(z), imag(z) + a);

[T,C when Imaginary?(T) and Complex?(C)]
forceinline overload (+)(z:C, a:T) = (+)(a,z);

[T,C when Imaginary?(T) and Complex?(C)]
forceinline overload (-)(z:C, y:T) = Complex(real(z), imag(z) - y);

[T,C when Imaginary?(T) and Complex?(C)]
forceinline overload (-)(y:T,z:C) = Complex(-real(z), y - imag(z));

[T,C when Imaginary?(T) and Complex?(C)]
forceinline overload (*)(z:C, y:T) = Complex(imag(z)*y, real(z)*y);

[T,C when Imaginary?(T) and Complex?(C)]
forceinline overload (*)(y:T,z:C) = (*)(z,y);

[T,C when Imaginary?(T) and Complex?(C)]
forceinline overload (/)(z:C, y:T) = Complex(imag(z)/y, -real(z)/y);

//XXX THESE NEED ATTENTION
[T when Complex?(T)]
forceinline overload max(x:T,y:T) = max(abs(x),abs(y));

[C when Complex?(C)]
forceinline overload min(x:C,y:C) = min(abs(x),abs(y));

[T,C when Numeric?(T) and Complex?(C)]
forceinline overload max(x:T,y:C) = max(x,abs(y));

[T,C when Numeric?(T) and Complex?(C)]
forceinline overload max(x:C,y:T) = max(abs(x),y);

[T,C when Numeric?(T) and Complex?(C)]
forceinline overload min(x:T,y:C) = min(x,abs(y));

[T,C when Numeric?(T) and Complex?(C)]
forceinline overload min(x:C,y:T) = min(abs(x),y);

[T when Complex?(T)]
forceinline overload nan?(x:T) = nan?(real(x)) or nan?(imag(x));

[T when Complex?(T)]
forceinline overload finite?(x:T) = floatExponent(abs(x)) != exponentMask((ComplexRealType(T)));

[T when Complex?(T)]
forceinline overload infinity?(x:T) = abs(x) == infinity(ComplexBaseType(T));

[T when Complex?(T)]
forceinline overload negativeInfinity?(x:T) = negativeInfinity?(real(x));

[T when Complex?(T)]
forceinline overload subnormal?(x:T) = subnormal?(real(x)) or subnormal?(imag(x));

[T when Complex?(T)]
forceinline overload normalized?(x:T) = not subnormal?(x) and finite?(x);

[T when Complex?(T)]
overload infinity(#T) = Complex(infinity(ComplexRealType(T)),infinity(ComplexImagType(T)));

[T when Complex?(T)]
overload negativeInfinity(#T) = Complex(negativeInfinity(ComplexRealType(T)),negativeInfinity(ComplexImagType(T)));

[T when Complex?(T)]
overload nan(#T) = Complex(nan(ComplexRealType(T)),nan(ComplexImagType(T)));

[T when Complex?(T)]
overload snan(#T) = Complex(snan(ComplexRealType(T)),snan(ComplexImagType(T)));

[T when Float?(T)]
forceinline fromPolar(m:T,ph:T) = Complex(m*sin(ph),m*cos(ph));
