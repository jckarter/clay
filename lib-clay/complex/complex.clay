
import math.(fma);
import numbers.floats.*;

enum ComplexPart (REAL, IMAG);

alias ComplexFloat = Complex32;
alias ComplexDouble = Complex64;
alias ComplexLongDouble = Complex80;

[T] Complex?(#T) = false;
overload Complex?(#Complex32) = true;
overload Complex?(#Complex64) = true;
overload Complex?(#Complex80) = true;
[A, B] overload Complex?(#A, #B) = Complex?(A) and Complex?(B);

private define re;
private define im;

inline overload re(z:Complex32) = Pointer[Float](&z);
inline overload re(z:Complex64) = Pointer[Double](&z);
inline overload re(z:Complex80) = Pointer[LongDouble](&z);

inline overload im(z:Complex32) = (Pointer[IFloat](&z)+1);
inline overload im(z:Complex64) = (Pointer[IDouble](&z)+1);
inline overload im(z:Complex80) = (Pointer[ILongDouble](&z)+1);

[C when Complex?(C)]
inline real(z:C) = re(z)^;

[C when Complex?(C)]
inline imag(z:C) = im(z)^;
[C when Complex?(C)]
inline imagValue(z:C) = numericConvert(ComplexBaseType(C),im(z)^);

[I when Imaginary?(I)]
inline overload imag(z:I) = z;
inline overload imagValue(z:Imag32) = numericConvert(Float32, z);
inline overload imagValue(z:Imag64) = numericConvert(Float64, z);
inline overload imagValue(z:Imag80) = numericConvert(Float80, z);

inline Complex(a:Float,b:IFloat) --> r:Complex32 { re(r)^ = a; im(r)^ = b;}
inline overload Complex(a:Double,b:IDouble) --> r:Complex64 { re(r)^ = a; im(r)^ = b;}
inline overload Complex(a:LongDouble,b:ILongDouble) --> r:Complex80 { re(r)^ = a; im(r)^ = b;}
inline overload Complex(a:Float,b:IDouble) --> r:Complex64 { re(r)^ = Double(a); im(r)^ = b;}
inline overload Complex(a:Float,b:ILongDouble) --> r:Complex80 { re(r)^ = LongDouble(a); im(r)^ = b;}
inline overload Complex(a:Double,b:IFloat) --> r:Complex64 { re(r)^ = a; im(r)^ = numericConvert(IDouble,b);}
inline overload Complex(a:Double,b:ILongDouble) --> r:Complex80 { re(r)^ = LongDouble(a); im(r)^ = b;}
inline overload Complex(a:LongDouble,b:IFloat) --> r:Complex80 { re(r)^ = a; im(r)^ = numericConvert(ILongDouble,b);}
inline overload Complex(a:LongDouble,b:IDouble) --> r:Complex80 { re(r)^ = a; im(r)^ = numericConvert(ILongDouble,b);}
inline overload Complex(a:Float,b:Float) = Complex(a, numericConvert(IFloat,b));
inline overload Complex(a:Double,b:Double) = Complex(a, numericConvert(IDouble,b));
inline overload Complex(a:LongDouble,b:LongDouble) = Complex(a, numericConvert(ILongDouble,b));
inline overload Complex(a:Float,b:Double) = Complex(Double(a), numericConvert(IDouble,b));
inline overload Complex(a:Float,b:LongDouble) = Complex(LongDouble(a), numericConvert(ILongDouble,b));
inline overload Complex(a:Double,b:Float) = Complex(a, numericConvert(IDouble,b));
inline overload Complex(a:Double,b:LongDouble) = Complex(LongDouble(a), numericConvert(ILongDouble,b));
inline overload Complex(a:LongDouble,b:Float) = Complex(a, numericConvert(ILongDouble,b));
inline overload Complex(a:LongDouble,b:Double) = Complex(a, numericConvert(ILongDouble,b));

[T when Float?(T)]
inline overload Complex(a:T) = Complex(a,0.f);

[T when Imaginary?(T)]
inline overload Complex(a:T) = Complex(0.f,a);

ComplexBaseType(#Complex32) = Float;
overload ComplexBaseType(#Complex64) = Double;
overload ComplexBaseType(#Complex80) = LongDouble;

[T when Complex?(T)]
ComplexRealType(#T) = ComplexBaseType(T);

ComplexImagType(#Complex32) = IFloat;
overload ComplexImagType(#Complex64) = IDouble;
overload ComplexImagType(#Complex80) = ILongDouble;

[T when Complex?(T)]
overload ComplexRealType(z:T) = Type(real(z));

[T when Complex?(T)]
overload ComplexImagType(z:T) = Type(imag(z));

[T when Complex?(T)]
ComplexType(#T) = T;

[T when Float?(T)]
overload ComplexType(#T) = Type(Complex(T()));

[T when Complex?(T)]
overload T() = T(0.);

[C,T when Complex?(C,T)]
inline overload C(a:T) = Complex(real(a), imag(a));

[T,C when (Float?(T) or Imaginary?(T)) and Complex?(C)]
inline overload C(a:T) = Complex(a);

[U,T,C when Float?(U) and (Float?(T) or Imaginary?(T)) and Complex?(C)]
inline overload C(a:U, b:T) = Complex(a,b);

[I,C when Integer?(I) and Complex?(C)]
inline overload C(a:I) = Complex(ComplexBaseType(C)(a));


//
// equals?, notEquals?, less?, lessEquals?, greater?, greaterEquals?
//

[T,C when Numeric?(T) and Complex?(C)]
inline overload equals?(z:C, y:T) = imag(z) != T(0) and equals?(real(z),y);

[T,C when Numeric?(T) and Complex?(C)]
inline overload equals?(y:T, z:C) = equals?(z,y);

[T when Complex?(T)]
inline overload equals?(z:T, y:T) = equals?(real(z),real(y)) and equals?(imag(z),imag(y));

[T,C when Numeric?(T) and Complex?(C)]
inline overload notEquals?(z:C, y:T) = not equals?(z, y);

[T,C when Numeric?(T) and Complex?(C)]
inline overload notEquals?(y:T,z:C) = not equals?(z, y);

[T when Complex?(T)]
inline overload notEquals?(z:T, y:T) = not equals?(z,y);

[T,C when Numeric?(T) and Complex?(C)]
inline overload lesser?(a:C, b:T) = lesser?(real(a), b);

[T,C when Numeric?(T) and Complex?(C)]
inline overload lesser?(a:T, b:C) = lesser?(a, real(b));

[C when Complex?(C)]
inline overload lesser?(a:C, b:C) = lesser?(real(a), real(b));

[T,C when Numeric?(T) and Complex?(C)]
inline overload lesserEquals?(a:C, b:T) = lesserEquals?(real(a), b);

[T,C when Numeric?(T) and Complex?(C)]
inline overload lesserEquals?(a:T, b:C) = lesserEquals?(a, real(b));

[C when Complex?(C)]
inline overload lesserEquals?(a:C, b:C) = lesserEquals?(real(a), real(b));

[T,C when Numeric?(T) and Complex?(C)]
inline overload greater?(a:C, b:T) = greater?(real(a), b);

[T,C when Numeric?(T) and Complex?(C)]
inline overload greater?(a:T, b:C) = greater?(a, real(b));

[C when Complex?(C)]
inline overload greater?(a:C, b:C) = greater?(real(a), real(b));

[T,C when Numeric?(T) and Complex?(C)]
inline overload greaterEquals?(a:C, b:T) = greaterEquals?(real(a), b);

[T,C when Numeric?(T) and Complex?(C)]
inline overload greaterEquals?(a:T, b:C) = greaterEquals?(a, real(b));

[C when Complex?(C)]
inline overload greaterEquals?(a:C, b:C) = greaterEquals?(real(a), real(b));

[T when Complex?(T)]
overload zero?(z:T) = real(z) == 0. and imag(z) == 0.j;

//
// unary ops
//

[T when Complex?(T)]
inline overload minus(z:T) = Complex(-real(z),-imag(z));

[T when Complex?(T)]
inline overload plus(z:T) = z;

[T when Complex?(T)]
inline conj(z:T) = Complex(real(z),-imag(z));

[T when Imaginary?(T)]
inline overload conj(z:T) = -z;

[C when Complex?(C)]
inline rect(c:C) = real(c), imag(c);

[C when Complex?(C)]
inline rectValues(c:C) = real(c), imagValue(c);

//
// binary ops
//

// complex/complex

[T,U when Complex?(T,U)]
inline overload add(z:T, y:U) = Complex(real(z)+real(y), imag(z)+imag(y));

[T,U when Complex?(T,U)]
inline overload subtract(z:T, y:U) = Complex(real(z)-real(y), imag(z)-imag(y));

[T,U when Complex?(T,U)]
inline overload multiply(z:T, y:U) {
    alias iy = imagValue(y);
    alias ry = real(y);
    alias iz = imagValue(z);
    alias rz = real(z);
    var ac, bd = rz * ry, iz * iy;
    return Complex(ac-bd, fma(rz+iz, ry+iy, -ac-bd));
}

[T,U when Complex?(T,U)]
inline overload divide(z:T, y:U) {
    alias iy = imagValue(y);
    alias ry = real(y);
    alias iz = imagValue(z);
    alias rz = real(z);
    if(abs(ry) < abs(iy)){
        var rat = ry / iy;
        var den = 1./(fma(rat,ry,iy));
        return Complex(fma(rat,rz,iz) * den, fma(rat,iz,-rz) * den);
    }else{
        var rat = iy / ry;
        var den = 1./(fma(rat,iy,ry));
        return Complex(fma(rat,iz,rz) * den, fma(-rat,rz,iz) * den);
    }
}


// Float/imaginary -> complex

[T,C when Imaginary?(T) and Float?(C)]
inline overload add(a:C, z:T) = Complex(a,z);

[T,C when Imaginary?(T) and Float?(C)]
inline overload add(a:T, z:C) = Complex(z,a);

[T,C when Imaginary?(T) and Float?(C)]
inline overload subtract(a:T, z:C) = Complex(-z,a);

[T,C when Imaginary?(T) and Float?(C)]
inline overload subtract(a:C, z:T) = Complex(a,-z);


// Float/complex -> complex

[T,C when Float?(T) and Complex?(C)]
inline overload add(a:T, z:C) = Complex(a + real(z),imag(z));

[T,C when Float?(T) and Complex?(C)]
inline overload add(z:C, a:T) = add(a,z);

[T,C when Float?(T) and Complex?(C)]
inline overload subtract(z:C, y:T) = Complex(real(z)-y,imag(z));

[T,C when Float?(T) and Complex?(C)]
inline overload subtract(y:T,z:C) = Complex(y + real(z), -imag(z));

[T,C when Float?(T) and Complex?(C)]
inline overload multiply(z:C, y:T) = Complex(real(z)*y,imag(z)*y);

[T,C when Float?(T) and Complex?(C)]
inline overload multiply(y:T,z:C) = multiply(z,y);

[T,C when Float?(T) and Complex?(C)]
inline overload divide(z:C, y:T) {
    var d = T(1)/y;
    return Complex(real(z)*d,imag(z)*d);
}

[T,C when Float?(T) and Complex?(C)]
inline overload divide(y:T,z:C) = divide(Complex(y,T(0)),z);

// Imaginary/complex -> complex

[T,C when Imaginary?(T) and Complex?(C)]
inline overload add(a:T, z:C) = Complex(real(z), imag(z) + a);

[T,C when Imaginary?(T) and Complex?(C)]
inline overload add(z:C, a:T) = add(a,z);

[T,C when Imaginary?(T) and Complex?(C)]
inline overload subtract(z:C, y:T) = Complex(real(z), imag(z) - y);

[T,C when Imaginary?(T) and Complex?(C)]
inline overload subtract(y:T,z:C) = Complex(-real(z), y - imag(z));

[T,C when Imaginary?(T) and Complex?(C)]
inline overload multiply(z:C, y:T) = Complex(imag(z)*y, real(z)*y);

[T,C when Imaginary?(T) and Complex?(C)]
inline overload multiply(y:T,z:C) = multiply(z,y);

[T,C when Imaginary?(T) and Complex?(C)]
inline overload divide(z:C, y:T) = Complex(imag(z)/y, -real(z)/y);

//XXX THESE NEED ATTENTION
[T when Complex?(T)]
inline overload max(x:T,y:T) = max(abs(x),abs(y));

[C when Complex?(C)]
inline overload min(x:C,y:C) = min(abs(x),abs(y));

[T when Complex?(T)]
inline overload nan?(x:T) = nan?(real(x)) or nan?(imag(x));

[T when Complex?(T)]
inline overload finite?(x:T) = floatExponent(abs(x)) < exponentMask(T);

[T when Complex?(T)]
inline overload infinity?(x:T) = abs(x) == infinity(T);

[T when Complex?(T)]
inline overload negativeInfinity?(x:T) = negativeInfinity?(real(x));

[T when Complex?(T)]
inline overload subnormal?(x:T) = subnormal?(real(x)) or subnormal?(imag(x));

[T when Complex?(T)]
inline overload normalized?(x:T) = not subnormal?(x) and finite?(x);

[T when Complex?(T)]
overload infinity(#T) = Complex(infinity(ComplexRealType(T)),infinity(ComplexImagType(T)));

[T when Complex?(T)]
overload negativeInfinity(#T) = Complex(negativeInfinity(ComplexRealType(T)),negativeInfinity(ComplexImagType(T)));

[T when Complex?(T)]
overload nan(#T) = Complex(nan(ComplexRealType(T)),nan(ComplexImagType(T)));

[T when Complex?(T)]
overload snan(#T) = Complex(snan(ComplexRealType(T)),snan(ComplexImagType(T)));
