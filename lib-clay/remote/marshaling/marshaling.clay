import data.hashmaps.(HashMap);
import data.algorithms.(reduce);
import uniquepointers.(UniquePointer,nullUnique);
import sharedpointers.*;
import data.vectors.*;
import data.sequences.*;


//
// marshaling/unmarshaling context
//

alias MarshalSize = UInt32;

private record MarshalPointerTracker (
    id: MarshalSize,
    sized?: Bool,
    marshaled?: Bool,
);

record MarshalContext (
    pointerCount: MarshalSize,
    pointers: HashMap[RawPointer, MarshalPointerTracker],
);

MarshalContext() = MarshalContext(
    MarshalSize(0), HashMap[RawPointer, MarshalPointerTracker]()
);

record UnmarshalContext (
    pointers: HashMap[MarshalSize, RawPointer],
);



//
// marshaling object protocol
//

// [T] marshaledSize(context: MarshalContext, x: T) MarshalSize
// -- should not throw
define marshaledSize;
// [T] marshalTo(context: MarshalContext, buffer: Pointer[Byte], x: T) Pointer[Byte]
// -- should not throw
define marshalTo;
// [T] unmarshalFrom(
//    context: UnmarshalContext,
//    begin: Pointer[Byte],
//    end: Pointer[Byte],
//    #T
// )
//     UnmarshaledType(T), Pointer[Byte]
// -- may throw
// -- must throw UnmarshalUnexpectedEOF if unmarshal code would have to read past end
define unmarshalFrom;
// [T] UnmarshaledType(#T) T2
// -- type that value of type T should be unmarshaled into
define UnmarshaledType;

UnmarshaledType(T) = T;

record UnmarshalUnexpectedEOF ();
instance Exception (UnmarshalUnexpectedEOF);

define Marshalable?;

Marshalable?(T)
    =     CallDefined?(marshaledSize, MarshalContext, T)
      and CallDefined?(marshalTo, MarshalContext, Pointer[Byte], T)
      and CallDefined?(unmarshalFrom,
            UnmarshalContext, Pointer[Byte], Pointer[Byte], Static[T]
      );

Marshalable?(#MarshalContext) = false;
Marshalable?(#UnmarshalContext) = false;



//
// bitwise-marshalable implementation
//
define BitwiseMarshalable?;

BitwiseMarshalable?(T) = false;

[T when BitwiseMarshalable?(T)]
marshaledSize(context, x: T) = MarshalSize(TypeSize(T));

[T when BitwiseMarshalable?(T)]
marshalTo(context, buffer: Pointer[Byte], x: T) {
    Pointer[T](buffer)^ <-- x;
    return buffer + TypeSize(T);
}

[T when BitwiseMarshalable?(T)]
unmarshalFrom(context, begin: Pointer[Byte], end: Pointer[Byte], #T)
    --> returned: T, newBegin: Pointer[Byte]
{
    var newBegin_ = begin + TypeSize(T);
    if (newBegin_ > end)
        throw UnmarshalUnexpectedEOF();
    copyNonoverlappingMemory(Pointer[Byte](@returned), begin, newBegin_);
    newBegin <-- newBegin_;
}

BitwiseMarshalable?(#Bool) = true;
[C when Character?(C)] BitwiseMarshalable?(#C) = true;
[I when Integer?(I)] BitwiseMarshalable?(#I) = true;
[F when Float?(F)] BitwiseMarshalable?(#F) = true;
[E when Enum?(E)] BitwiseMarshalable?(#E) = true;
[R when RegularRecord?(R) and allValues?(BitwiseMarshalable?, ..RecordFieldTypes(R))]
BitwiseMarshalable?(#R) = true;
[..TupleMembers when allValues?(BitwiseMarshalable?, ..TupleMembers)]
BitwiseMarshalable?(#Tuple[..TupleMembers]) = true;
[..UnionMembers when allValues?(BitwiseMarshalable?, ..UnionMembers)]
BitwiseMarshalable?(#Union[..UnionMembers]) = true;

[T, n when BitwiseMarshalable?(T)] BitwiseMarshalable?(#Array[T, n]) = true;



//
// memberwise record marshaling
//
private RecordMarshalable?(R) = allValues?(Marshalable?, ..RecordFieldTypes(R));
private RecordMemberwiseMarshalable?(R)
    = RecordMarshalable?(R) and not BitwiseMarshalable?(R);

[R when Record?(R) and RecordMemberwiseMarshalable?(R)]
marshaledSize(context, r: R)
    = ..foldValues(add,
        ..mapValues(f -> marshaledSize(context, f), ..recordFields(r))
    );

marshalMemberwise(context, buffer:Pointer[Byte], forward ..fields) {
    ..for (x in fields)
        buffer = marshalTo(context, buffer, x);
}

[R when Record?(R) and RecordMemberwiseMarshalable?(R)]
marshalTo(context, buffer_: Pointer[Byte], forward r: R) --> buffer: Pointer[Byte] {
    buffer <-- buffer_;
    marshalMemberwise(context, buffer, ..recordFields(r));
}

define unmarshalMemberwise;

[FieldT]
unmarshalMemberwise(
    context,
    begin: Pointer[Byte],
    end: Pointer[Byte],
    field: FieldT,
    ..fields
) {
    field, begin <-- ..unmarshalFrom(context, begin, end, FieldT);
    try {
        unmarshalMemberwise(context, begin, end, ..fields);
    } catch (ex) {
        destroy(field);
        throw ex;
    }
}

unmarshalMemberwise(context, begin: Pointer[Byte], end: Pointer[Byte]) {}

[R when Record?(R) and RecordMemberwiseMarshalable?(R)]
unmarshalFrom(context, begin_: Pointer[Byte], end: Pointer[Byte], #R)
    --> returned: R, begin: Pointer[Byte]
{
    begin <-- begin_;
    unmarshalMemberwise(context, begin, end, ..recordFields(returned));
}



//
// memberwise tuple marshaling
//
[..T] private TupleMarshalable?(#Tuple[..T]) = allValues?(Marshalable?, ..T);
[T] private TupleMemberwiseMarshalable?(#T)
    = TupleMarshalable?(T) and not BitwiseMarshalable?(T);

[T when Tuple?(T) and TupleMemberwiseMarshalable?(T)]
marshaledSize(context, t: T)
    = ..foldValues(add,
        ..mapValues(f -> marshaledSize(context, f), ..unpack(t))
    );

[T when Tuple?(T) and TupleMemberwiseMarshalable?(T)]
marshalTo(context, buffer_: Pointer[Byte], forward t: T) --> buffer: Pointer[Byte] {
    buffer <-- buffer_;
    ..for (x in unpack(t))
        buffer = marshalTo(context, buffer, x);
}

[T when Tuple?(T) and TupleMemberwiseMarshalable?(T)]
unmarshalFrom(context, begin_: Pointer[Byte], end: Pointer[Byte], #T)
    --> returned: T, begin: Pointer[Byte]
{
    begin <-- begin_;
    unmarshalMemberwise(context, begin, end, ..unpackRef(returned));
}



//
// memberwise variant marshaling
//
private VariantMarshalable?(V) = allValues?(Marshalable?, ..VariantMembers(V));
private VariantMemberwiseMarshalable?(V)
    = VariantMarshalable?(V) and not BitwiseMarshalable?(V);

[V when Variant?(V) and VariantMemberwiseMarshalable?(V)]
marshaledSize(context, v: V)
    = MarshalSize(TypeSize(Int)) + marshaledSize(context, *v);

[V when Variant?(V) and VariantMemberwiseMarshalable?(V)]
marshalTo(context, buffer_: Pointer[Byte], v: V) --> buffer: Pointer[Byte] {
    buffer <-- buffer_;
    buffer = marshalTo(context, buffer, variantTag(v));
    buffer = marshalTo(context, buffer, *v);
}

record UnmarshalInvalidVariantTag (tag: Int);
instance Exception (UnmarshalInvalidVariantTag);

private define unmarshalVariantMember;

[..T, n]
unmarshalVariantMember(
    context,
    begin: Pointer[Byte],
    end: Pointer[Byte],
    repr: VariantRepr[..T],
    #n
) {
    throw UnmarshalInvalidVariantTag(repr.tag);
}

[..T, n when n < countValues(..T)]
unmarshalVariantMember(
    context,
    begin: Pointer[Byte],
    end: Pointer[Byte],
    repr: VariantRepr[..T],
    #n
) {
    if (repr.tag == Int(n))
        staticIndex(repr.data, #n), begin
            <-- ..unmarshalFrom(context,
                begin, end, Type(staticIndex(repr.data, #n))
            );
    else
        unmarshalVariantMember(context, begin, end, repr, #(n+1));
}


[V when Variant?(V) and VariantMemberwiseMarshalable?(V)]
unmarshalFrom(context, begin_: Pointer[Byte], end: Pointer[Byte], #V)
    --> returned: V, begin: Pointer[Byte]
{
    begin <-- begin_;
    ref repr = variantRepr(returned);
    repr.tag, begin <-- ..unmarshalFrom(context, begin, end, Int);

    unmarshalVariantMember(context, begin, end, repr, #MarshalSize(0));
}



//
// general sequence marshaling
//
private define MarshalableSequence?;

MarshalableSequence?(S)
    = SequenceContainer?(S) and Marshalable?(SequenceElementType(S));

MarshalableSequence?(#StringLiteralRef) = true;

private UnmarshalAsVectorSequence?(S)
    = MarshalableSequence?(S) and not CallDefined?(push, S, SequenceElementType(S));

private sequenceMarshaledSize(context, seq)
    = MarshalSize(TypeSize(MarshalSize))
    + reduce(add, MarshalSize(0), mapped(f -> marshaledSize(context, f), seq));

[S when MarshalableSequence?(S)]
marshaledSize(context, seq: S) = sequenceMarshaledSize(context, seq);

[S when MarshalableSequence?(S)]
marshalTo(context, buffer_: Pointer[Byte], forward seq: S) --> buffer: Pointer[Byte] {
    buffer <-- buffer_;
    var sizeBuffer = buffer;
    buffer +: TypeSize(MarshalSize);
    var n = MarshalSize(0);
    for (x in seq) {
        inc(n);
        buffer = marshalTo(context, buffer, x);
    }
    marshalTo(context, sizeBuffer, n);
}

[S when MarshalableSequence?(S) and SizedSequence?(S)]
marshalTo(context, buffer_: Pointer[Byte], forward seq: S) --> buffer: Pointer[Byte] {
    buffer <-- marshalTo(context, buffer_, MarshalSize(size(seq)));
    for (x in seq)
        buffer = marshalTo(context, buffer, x);
}

[S when MarshalableSequence?(S)]
unmarshalFrom(context, begin_: Pointer[Byte], end: Pointer[Byte], #S) {
    var n, begin = ..unmarshalFrom(context, begin_, end, MarshalSize);
    var s = UnmarshaledType(S)();

    for (x in range(n)) {
        var n, begin2 = ..unmarshalFrom(context, begin, end, SequenceElementType(S));
        push(s, move(n));
        begin = begin2;
    }
    return move(s), begin;
}

[S when UnmarshalAsVectorSequence?(S)]
UnmarshaledType(#S) = Vector[UnmarshaledType(SequenceElementType(S))];


//
// null marshaling of #values
//
[x] marshaledSize(context, #x) = MarshalSize(0);
[x] marshalTo(context, buffer: Pointer[Byte], #x) = buffer;
[x] unmarshalFrom(context,
    begin: Pointer[Byte], end: Pointer[Byte], #Static[x]
) = #x, begin;



//
// null marshaling of empty records, tuples
//
[R when RegularRecord?(R) and countValues(..RecordFieldTypes(R)) == 0]
marshaledSize(context, r: R) = MarshalSize(0);
[R when RegularRecord?(R) and countValues(..RecordFieldTypes(R)) == 0]
marshalTo(context, buffer: Pointer[Byte], r: R) = buffer;
[R when RegularRecord?(R) and countValues(..RecordFieldTypes(R)) == 0]
unmarshalFrom(context, begin: Pointer[Byte], end: Pointer[Byte], #R)
    = R(), begin;

[T when T == Type([])]
marshaledSize(context, r: T) = MarshalSize(0);
[T when T == Type([])]
marshalTo(context, buffer: Pointer[Byte], r: T) = buffer;
[T when T == Type([])]
unmarshalFrom(context, begin: Pointer[Byte], end: Pointer[Byte], #T)
    = [], begin;



//
// unique pointers
//
[T]
marshaledSize(context, p: UniquePointer[T]) {
    if (null?(p))
        return marshaledSize(context, false);
    else
        return marshaledSize(context, true) + marshaledSize(context, p^);
}

[T]
marshalTo(context, buffer_: Pointer[Byte], p: UniquePointer[T]) {
    if (null?(p))
        return marshalTo(context, buffer_, false);
    else {
        var buffer = marshalTo(context, buffer_, true);
        return marshalTo(context, buffer, p^);
    }
}

[T]
unmarshalFrom(
    context,
    begin_: Pointer[Byte], end: Pointer[Byte],
    #UniquePointer[T]
) --> p: UniquePointer[UnmarshaledType(T)], begin: Pointer[Byte] {
    var isNotNull? = Bool();
    isNotNull?, begin <-- ..unmarshalFrom(context, begin_, end, Bool);

    if (isNotNull?) {
        p <-- UniquePointer(allocateRawMemory(UnmarshaledType(T), MarshalSize(1)));
        try {
            p^, begin <-- ..unmarshalFrom(context, begin, end, T);
        } catch (ex) {
            freeRawMemory(p.ptr);
            throw ex;
        }
    } else
        p <-- nullUnique(UnmarshaledType(T));
}

[T]
UnmarshaledType(#UniquePointer[T]) = UniquePointer[UnmarshaledType(T)];



//
// shared pointers
//
private alias SHARED_POINTER_NULL = 0uss;
private alias SHARED_POINTER_REF = 1uss;
private alias SHARED_POINTER_DATA = 2uss;

[T]
marshaledSize(context: MarshalContext, p: SharedPointer[T]) {
    if (null?(p))
        return marshaledSize(context, SHARED_POINTER_NULL);
    else {
        var rawPtr = RawPointer(p.ptr);
        var pointerState = lookup(context.pointers, rawPtr);
        if (null?(pointerState)) {
            var id = context.pointerCount;
            context.pointers[rawPtr]
                = MarshalPointerTracker(id, true, false);
            context.pointerCount +: 1;
            return marshaledSize(context, SHARED_POINTER_DATA)
                + marshaledSize(context, id)
                + marshaledSize(context, p^);
        } else if (not pointerState^.sized?) {
            pointerState^.sized? = true;
            return marshaledSize(context, SHARED_POINTER_DATA)
                + marshaledSize(context, pointerState^.id)
                + marshaledSize(context, p^);
        } else {
            return marshaledSize(context, SHARED_POINTER_REF)
                + marshaledSize(context, pointerState^.id);
        }
    }
}

[T]
marshalTo(context: MarshalContext, buffer_: Pointer[Byte], p: SharedPointer[T]) {
    var rawPtr = RawPointer(p.ptr);
    if (null?(p))
        return marshalTo(context, buffer_, SHARED_POINTER_NULL);
    else {
        var pointerState = lookup(context.pointers, rawPtr);
        if (null?(pointerState)) {
            var id = context.pointerCount;
            context.pointers[rawPtr]
                = MarshalPointerTracker(id, false, true);
            context.pointerCount +: 1;
            var buffer = marshalTo(context, buffer_, SHARED_POINTER_DATA);
            buffer = marshalTo(context, buffer, id);
            buffer = marshalTo(context, buffer, p^);
            return buffer;
        } else if (not pointerState^.marshaled?) {
            pointerState^.marshaled? = true;
            var buffer = marshalTo(context, buffer_, SHARED_POINTER_DATA);
            buffer = marshalTo(context, buffer, pointerState^.id);
            buffer = marshalTo(context, buffer, p^);
            return buffer;
        } else {
            var buffer = marshalTo(context, buffer_, SHARED_POINTER_REF);
            buffer = marshalTo(context, buffer, pointerState^.id);
            return buffer;
        }
    }
}

record UnmarshalIncompleteObjectGraph ();
record UnmarshalInconsistentObjectGraph ();
record UnmarshalInvalidObjectGraphData ();

instance Exception (
    UnmarshalIncompleteObjectGraph,
    UnmarshalInconsistentObjectGraph,
    UnmarshalInvalidObjectGraphData,
);

[T]
unmarshalFrom(context: UnmarshalContext,
    begin_: Pointer[Byte], end: Pointer[Byte],
    #SharedPointer[T]
) {
    var mode, begin = ..unmarshalFrom(context, begin_, end, UInt8); 
    switch (mode)
    case (SHARED_POINTER_NULL) {
        return nullShared(UnmarshaledType(T)), begin;
    }
    case (SHARED_POINTER_REF) {
        var id = MarshalSize();
        id, begin = ..unmarshalFrom(context, begin, end, MarshalSize);
        var pointerState = lookup(context.pointers, id);

        if (null?(pointerState))
            throw UnmarshalIncompleteObjectGraph();

        var ptr = Pointer[RefCounted[UnmarshaledType(T)]](pointerState^);
        ptr^.refCount +: 1;
        return SharedPointer[UnmarshaledType(T)](ptr), begin;
    }
    case (SHARED_POINTER_DATA) {
        var id = MarshalSize();
        id, begin = ..unmarshalFrom(context, begin, end, MarshalSize);
        if (not null?(lookup(context.pointers, id)))
            throw UnmarshalInconsistentObjectGraph();

        var ptr = allocateRawMemory(RefCounted[UnmarshaledType(T)], MarshalSize(1));
        try {
            ptr^.refCount = 1;
            ptr^.value, begin <-- ..unmarshalFrom(context, begin, end, T);
            context.pointers[id] = RawPointer(ptr);
            return SharedPointer[UnmarshaledType(T)](ptr), begin;
        } catch (ex) {
            freeRawMemory(ptr);
            throw ex;
        }
    }
    else {
        throw UnmarshalInvalidObjectGraphData();
    }
}

[T]
UnmarshaledType(#SharedPointer[T]) = SharedPointer[UnmarshaledType(T)];



//
// high-level interface
//
define marshal;

[T when T != MarshalContext]
marshal(forward value:T, forward ..values)
    = marshal(MarshalContext(), value, ..values);

marshal() = Vector[Byte]();

marshal(context: MarshalContext, forward ..values) --> returned: Vector[Byte] {
    var sz = foldValues(add, ..mapValues(v -> marshaledSize(context, v), ..values));
    returned <-- Vector[Byte]();
    resize(returned, sz);

    var buffer = begin(returned);
    ..for (value in values) {
        buffer = marshalTo(context, buffer, value);
    }
    assert(buffer == end(returned));
}

marshal(context: MarshalContext) = Vector[Byte]();

define unmarshal;

unmarshal(data: Vector[Byte], ..Types)
    = ..unmarshal(UnmarshalContext(), data, ..Types);
unmarshal(context: UnmarshalContext, data: Vector[Byte], ..Types) {
    var b = begin(data);
    var e = end(data);

    return ..mapValues(T => {
        var n, b2 = ..unmarshalFrom(context, b, e, T);
        b = b2;
        return move(n);
    }, ..Types);
}
