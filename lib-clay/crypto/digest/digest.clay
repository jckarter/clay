import printer.protocol.(printTo);
import printer.formatter.(hexString);
import hash.(hash);

import crypto.digest.internal.*;
public import crypto.digest.internal.(
        Digest,
        Digest?,
        Algorithm?,
        DigestContext,
        DigestContext?,
        BlockSizeBytes,
        digestUpdate,
    );


// print digest as hex
[H when Digest?(H)]
printTo(stream, forward sha:H) {
    printTo(stream, hexString(sha.digest));
}

[H when Digest?(H)]
hash(x:H) = bitcast(SizeT, x.digest);


// complete digest computation and return the digest of type Digest(..)
[C when DigestContext?(C)]
define digestFinish(c: C);

[A, S when Algorithm?(A) and MessagePart?(S)]
digest(message: S, #A) --> returned: Digest(#A) {
    var context = DigestContext(#A)();
    digestUpdate(context, message);
    returned <-- digestFinish(context);
}

