// This code is intended for digest implementations only. It is not
// a part of public API. Do not use it directly.


import byteorder.*;


// true iff A is digest algorithm name
[A]
Algorithm?(#A) = #false;

// true iff T is digest output
[T]
Digest?(#T) = false;

// algorithm name by digest or by digest context
[T when Digest?(T) or DigestContext?(T)]
define Algorithm(#T);

// hash size in bytes
[A when Algorithm?(A)]
define DigestSize(#A): UInt;

// true iff T is digest compute context
[T]
DigestContext?(#T) = false;

// Hash function input block size. This function is a part of public API
// because some algorithms (like HMAC) need to know it
[A when Algorithm?(A)]
define BlockSizeBytes(#A): UInt;

// digest type by algorithm name
[A when Algorithm?(A)]
define Digest(#A);

// digest context type by algorithm name
[A when Algorithm?(A)]
define DigestContext(#A);

// digest internal word
[A when Algorithm?(A)]
define Word(#A);

[A when Algorithm?(A)]
define WordIsBigEndian?(#A): Bool;

// number of words in computation state
[A when Algorithm?(A)]
define StateSizeWords(#A): Int;

// algorithm internal state
[A when Algorithm?(A)]
State(#A) = Array[Word(#A), StateSizeWords(#A)];

// initial data for state
[A when Algorithm?(A)]
define stateInitial(#A): State(#A);

// digest update block size in words
[A when Algorithm?(A)]
define BlockSizeWords(#A);

// block size in bytes
[A when Algorithm?(A)]
overload BlockSizeBytes(#A): UInt = UInt(BlockSizeWords(#A) * TypeSize(Word(#A)));

// shortcut
[A when Algorithm?(A)]
BlockBytes(#A) = Array[UInt8, Int(BlockSizeBytes(#A))];

[A when Algorithm?(A)]
define BitCountWord(#A);

// core of the algorithm
[A, S, B when Algorithm?(A) and S == State(#A) and B == BlockSizeBytes(#A)]
define processBlock(#A, state: S, block: Array[UInt8, B]):;

// make digest output record
[A when Algorithm?(A)]
MakeDigest(#A) = recordWithProperties(
        [
            [Digest?, #true],
            [Algorithm, #A],
        ],
        // data itself
        digest: Array[UInt8, Int(DigestSize(#A))]
    );

// get digest and context by algorith name
[A when Algorithm?(A)]
define AlgorithmTypes(#A);

[A when Algorithm?(A)]
overload Digest(#A) = nthValue(#0, ..AlgorithmTypes(#A));

[A when Algorithm?(A)]
overload DigestContext(#A) = nthValue(#1, ..AlgorithmTypes(#A));

// make digest context record
[A when Algorithm?(A)]
MakeDigestContext(#A) = recordWithProperties(
        [
            [DigestContext?, #true],
            [Algorithm, #A],
        ],
        total: UInt64, // in bytes
        state: State(#A),
        buffer: Array[UInt8, Int(BlockSizeBytes(#A))],
    );

// digest context record is initialized with initial algorithm state
[C when DigestContext?(C)]
overload C() --> returned:C {
    returned.total <-- 0ul;
    returned.state <-- stateInitial(Algorithm(C));
    // returned.buffer does not need to be initialized
}


[N, Word, ReverseBytes when N % TypeSize(Word) == 0]
private define bytesToWordsImpl(#Word, #ReverseBytes, bytes: Array[UInt8, N]);

[N, Word]
overload bytesToWordsImpl(#Word, #false, bytes: Array[UInt8, N]) --> returned: Array[Word, Int(N \ Int(TypeSize(Word)))] {
    ref returnedBytes = bitcast(Type(bytes), returned);
    returnedBytes <-- bytes;
}

[N, Word]
overload bytesToWordsImpl(#Word, #true, bytes: Array[UInt8, N]) --> returned: Array[Word, Int(N \ Int(TypeSize(Word)))] {
    returned <-- bytesToWordsImpl(#Word, #false, bytes);
    for (word in returned) {
        word = reverseBytes(word);
    }
}

[Word]
bytesToWordsLittle(#Word, bytes) = bytesToWordsImpl(#Word, #BigEndian?, bytes);
[Word]
bytesToWordsBig(#Word, bytes) = bytesToWordsImpl(#Word, #LittleEndian?, bytes);


[Word, K, ReverseBytes]
private define wordsToBytesImpl(array: Array[Word, K], #ReverseBytes): Array[UInt8, Int(TypeSize(Word) * K)];

[Word, K]
overload wordsToBytesImpl(array: Array[Word, K], #false) --> returned: Array[UInt8, Int(TypeSize(Word) * K)] {
    ref arrayBytes = bitcast(Type(returned), array);
    returned <-- arrayBytes;
}

[Word, K]
overload wordsToBytesImpl(words: Array[Word, K], #true) --> returned: Array[UInt8, Int(TypeSize(Word) * K)] {
    for (i in range(K)) {
        var word = reverseBytes(words[i]);
        ref wordBytes = bitcast(Array[UInt8, Int(TypeSize(Word))], word);
        copyNonoverlappingMemory(begin(returned) + i * TypeSize(Word), begin(wordBytes), end(wordBytes));
    }
}

littleWordsToBytes(words) = wordsToBytesImpl(words, #BigEndian?);
bigWordsToBytes(words) = wordsToBytesImpl(words, #LittleEndian?);

private define wordsToBytes(words, bigEndian);
overload wordsToBytes(words, #true) = bigWordsToBytes(words);
overload wordsToBytes(words, #false) = littleWordsToBytes(words);



/// Poor man UInt128

/// 128-bit types are not available everywhere
record PoorManUInt128 (
    w: Array[UInt64, 2],
);

overload UnsignedInteger?(#PoorManUInt128) = true;

overload assign(dest: PoorManUInt128, src: PoorManUInt128) {
    dest.w = src.w;
}

overload PoorManUInt128(src: PoorManUInt128) --> returned:PoorManUInt128 {
    returned.w = src.w;
}

[when LittleEndian?]
overload PoorManUInt128(i: UInt64) --> returned:PoorManUInt128 {
    returned.w[0] = i;
    returned.w[1] = 0;
}

[when BigEndian?]
overload PoorManUInt128(i: UInt64) --> returned:PoorManUInt128 {
    returned.w[0] = 0;
    returned.w[1] = i;
}



/// generic digestFinish. Works for SHA-2, MD5 and probably something else

[A when Algorithm?(A)]
private var padding[A] = array(0x80uss, ..replicateValue(0uss, #Int(2 * BlockSizeBytes(A) - 1)));

[I, B when Integer?(I)]
private define hostToByteOrder(n:I, #B): I;

overload hostToByteOrder(n, #true) = hostToBig(n);
overload hostToByteOrder(n, #false) = hostToLittle(n);


[S]
MessagePart?(#S) = ContiguousSequence?(S) and ByteLike?(SequenceElementType(S));


// generic update code
[C, S when DigestContext?(C) and MessagePart?(S)]
digestUpdate(context: C, input: S) {
    alias A = Algorithm(#C);

    var inputBegin = Pointer[Char](begin(input));
    var inputEnd   = Pointer[Char](end(input));
    var inputSize  = size(input);

    var left = SizeT(context.total % BlockSizeBytes(#A));
    var fill = BlockSizeBytes(#A) - left;

    context.total +: inputSize;

    if (left > 0 and inputSize >= fill) {
        copyNonoverlappingMemory(
            Pointer[Char](@context.buffer) + left,
            inputBegin,
            inputBegin + fill);
        processBlock(#A, context.state, context.buffer);
        inputSize  -: fill;
        inputBegin +: fill;
        left        = 0;
    }

    while (inputSize >= BlockSizeBytes(#A)) {
        processBlock(#A, context.state, Pointer[BlockBytes(#A)](inputBegin)^);
        inputSize  -: BlockSizeBytes(#A);
        inputBegin +: BlockSizeBytes(#A);
    }

    if (inputSize >= 0) {
        copyNonoverlappingMemory(
            Pointer[Char](@context.buffer) + left,
            inputBegin,
            inputBegin + inputSize);
    }
}


// finish and return computed sum
// context cannot be reused after computation
[C when DigestContext?(C)]
digestFinishGeneric(context: C) --> returned: Digest(Algorithm(C)) {
    alias A = Algorithm(C);
    alias BS = BlockSizeBytes(A);
    alias BC = BitCountWord(A);
    alias BCS = Int(TypeSize(BC));
    
    var total = context.total;
    
    alias paddingForThis = padding[A];

    var last = total % BS;
    var padn = if (last < BS - BCS) BS - BCS - last else 2 * BS - BCS - last;
    digestUpdate(context, coordinateRange(begin(paddingForThis), begin(paddingForThis) + padn));

    var msglen = Union[Array[UInt8, BCS], BC]();
    msglen.1 = hostToByteOrder(BC(total * 8), #WordIsBigEndian?(A));
    digestUpdate(context, msglen.0);

    assert(context.total % BS == 0);

    returned.digest = wordsToBytes(context.state, #WordIsBigEndian?(A));
}


