// Automatically generated by clay-bindgen
// language: objective-c

import cocoa.objc.*;

import libc.*;
import cocoa.corefoundation.*;
import cocoa.applicationservices.*;
import cocoa.foundation.*;

private alias OpaquePointer = RawPointer;
private alias UnknownType = Int;
private alias AUnionType = Int;


selector("AMSymbol") = NSString;
selector("API") = UInt;
selector("CATransform3DValue") = CATransform3D;
selector("HTTPBody") = NSData;
selector("HTTPBodyStream") = NSInputStream;
selector("HTTPMethod") = NSString;
selector("HTTPShouldHandleCookies") = Bool;
selector("HTTPShouldUsePipelining") = Bool;
selector("ISOCountryCodes") = NSArray;
selector("ISOCurrencyCodes") = NSArray;
selector("ISOLanguageCodes") = NSArray;
selector("MIMEType") = NSString;
selector("PMSymbol") = NSString;
selector("TXTRecordData") = NSData;
selector("URL") = NSURL;
selector("URLByAppendingPathComponent:") = NSURL, NSString;
selector("URLByAppendingPathExtension:") = NSURL, NSString;
selector("URLByDeletingLastPathComponent") = NSURL;
selector("URLByDeletingPathExtension") = NSURL;
selector("URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:") = Id, NSData, UInt, NSURL, Pointer[Bool], Pointer[NSError];
selector("URLByResolvingSymlinksInPath") = NSURL;
selector("URLByStandardizingPath") = NSURL;
selector("URLForAuxiliaryExecutable:") = NSURL, NSString;
selector("URLForDirectory:inDomain:appropriateForURL:create:error:") = NSURL, UInt, UInt, NSURL, Bool, Pointer[NSError];
selector("URLForKey:") = NSURL, NSString;
selector("URLForResource:withExtension:") = NSURL, NSString, NSString;
selector("URLForResource:withExtension:subdirectory:") = NSURL, NSString, NSString, NSString;
selector("URLForResource:withExtension:subdirectory:inBundleWithURL:") = NSURL, NSString, NSString, NSString, NSURL;
selector("URLForResource:withExtension:subdirectory:localization:") = NSURL, NSString, NSString, NSString, NSString;
selector("URLProtocol:cachedResponseIsValid:") = Void, NSURLProtocol, NSCachedURLResponse;
selector("URLProtocol:didCancelAuthenticationChallenge:") = Void, NSURLProtocol, NSURLAuthenticationChallenge;
selector("URLProtocol:didFailWithError:") = Void, NSURLProtocol, NSError;
selector("URLProtocol:didLoadData:") = Void, NSURLProtocol, NSData;
selector("URLProtocol:didReceiveAuthenticationChallenge:") = Void, NSURLProtocol, NSURLAuthenticationChallenge;
selector("URLProtocol:didReceiveResponse:cacheStoragePolicy:") = Void, NSURLProtocol, NSURLResponse, UInt;
selector("URLProtocol:wasRedirectedToRequest:redirectResponse:") = Void, NSURLProtocol, NSURLRequest, NSURLResponse;
selector("URLProtocolDidFinishLoading:") = Void, NSURLProtocol;
selector("URLWithString:") = Id, NSString;
selector("URLWithString:relativeToURL:") = Id, NSString, NSURL;
selector("URLsForDirectory:inDomains:") = NSArray, UInt, UInt;
selector("URLsForResourcesWithExtension:subdirectory:") = NSArray, NSString, NSString;
selector("URLsForResourcesWithExtension:subdirectory:inBundleWithURL:") = NSArray, NSString, NSString, NSURL;
selector("URLsForResourcesWithExtension:subdirectory:localization:") = NSArray, NSString, NSString, NSString;
selector("UTF8String") = Pointer[CChar];
selector("abbreviation") = NSString;
selector("abbreviationDictionary") = NSDictionary;
selector("abbreviationForDate:") = NSString, NSDate;
selector("abortParsing") = Void;
selector("absoluteString") = NSString;
selector("absoluteURL") = NSURL;
selector("acceptConnectionInBackgroundAndNotify") = Void;
selector("acceptConnectionInBackgroundAndNotifyForModes:") = Void, NSArray;
selector("acceptInputForMode:beforeDate:") = Void, NSString, NSDate;
selector("accessInstanceVariablesDirectly") = Bool;
selector("actionForKey:") = Id, NSString;
selector("actionForLayer:forKey:") = Id, CALayer, NSString;
selector("actions") = NSDictionary;
selector("activeProcessorCount") = UInt;
selector("addAnimation:forKey:") = Void, CAAnimation, NSString;
selector("addAttribute:value:range:") = Void, NSString, Id, NSRange;
selector("addAttributes:range:") = Void, NSDictionary, NSRange;
selector("addCharactersInRange:") = Void, NSRange;
selector("addCharactersInString:") = Void, NSString;
selector("addDependency:") = Void, NSOperation;
selector("addEntriesFromDictionary:") = Void, NSDictionary;
selector("addExecutionBlock:") = Void, UnknownType;
selector("addFileWithPath:") = NSString, NSString;
selector("addFileWrapper:") = NSString, NSFileWrapper;
selector("addIndex:") = Void, UInt;
selector("addIndexes:") = Void, NSIndexSet;
selector("addIndexesInRange:") = Void, NSRange;
selector("addObject:") = Void, Id;
selector("addObjectsFromArray:") = Void, NSArray;
selector("addObserver:forKeyPath:options:context:") = Void, NSObject, NSString, UInt, RawPointer;
selector("addObserver:selector:name:object:") = Void, Id, SelectorHandle, NSString, Id;
selector("addObserver:toObjectsAtIndexes:forKeyPath:options:context:") = Void, NSObject, NSIndexSet, NSString, UInt, RawPointer;
selector("addObserverForName:object:queue:usingBlock:") = Id, NSString, Id, NSOperationQueue, UnknownType;
selector("addOperation:") = Void, NSOperation;
selector("addOperationWithBlock:") = Void, UnknownType;
selector("addOperations:waitUntilFinished:") = Void, NSArray, Bool;
selector("addPort:forMode:") = Void, NSPort, NSString;
selector("addRegularFileWithContents:preferredFilename:") = NSString, NSData, NSString;
selector("addSublayer:") = Void, CALayer;
selector("addSuiteNamed:") = Void, NSString;
selector("addSymbolicLinkWithDestination:preferredFilename:") = NSString, NSString, NSString;
selector("addTimeInterval:") = Id, Double;
selector("addTimer:forMode:") = Void, NSTimer, NSString;
selector("addToRunLoop:forMode:") = Void, NSRunLoop, NSString;
selector("addValue:forHTTPHeaderField:") = Void, NSString, NSString;
selector("addressCheckingResultWithRange:components:") = NSTextCheckingResult, NSRange, NSDictionary;
selector("addressComponents") = NSDictionary;
selector("addresses") = NSArray;
selector("affineTransform") = CGAffineTransform;
selector("alignmentMode") = NSString;
selector("allBundles") = NSArray;
selector("allCredentials") = NSDictionary;
selector("allFrameworks") = NSArray;
selector("allHTTPHeaderFields") = NSDictionary;
selector("allHeaderFields") = NSDictionary;
selector("allKeys") = NSArray;
selector("allKeysForObject:") = NSArray, Id;
selector("allLanguages") = NSArray;
selector("allObjects") = NSArray;
selector("allScripts") = NSArray;
selector("allValues") = NSArray;
selector("alloc") = Id;
selector("allocWithZone:") = Id, Pointer[NSZone];
selector("allowsFloats") = Bool;
selector("allowsKeyedCoding") = Bool;
selector("allowsReverseTransformation") = Bool;
selector("alphanumericCharacterSet") = Id;
selector("alwaysShowsDecimalSeparator") = Bool;
selector("anchorPoint") = CGPoint;
selector("anchorPointZ") = Float;
selector("andPredicateWithSubpredicates:") = NSPredicate, NSArray;
selector("animation") = Id;
selector("animationDidStart:") = Void, CAAnimation;
selector("animationDidStop:finished:") = Void, CAAnimation, Bool;
selector("animationDuration") = Double;
selector("animationForKey:") = CAAnimation, NSString;
selector("animationKeys") = NSArray;
selector("animationTimingFunction") = CAMediaTimingFunction;
selector("animationWithKeyPath:") = Id, NSString;
selector("animations") = NSArray;
selector("anyObject") = Id;
selector("appendAttributedString:") = Void, NSAttributedString;
selector("appendBytes:length:") = Void, RawPointer, UInt;
selector("appendData:") = Void, NSData;
varargSelector("appendFormat:") = Void, NSString;
selector("appendString:") = Void, NSString;
selector("archiveRootObject:toFile:") = Bool, Id, NSString;
selector("archivedDataWithRootObject:") = NSData, Id;
selector("archiver:didEncodeObject:") = Void, NSKeyedArchiver, Id;
selector("archiver:willEncodeObject:") = Id, NSKeyedArchiver, Id;
selector("archiver:willReplaceObject:withObject:") = Void, NSKeyedArchiver, Id, Id;
selector("archiverDidFinish:") = Void, NSKeyedArchiver;
selector("archiverWillFinish:") = Void, NSKeyedArchiver;
selector("arguments") = NSArray;
selector("argumentsRetained") = Bool;
selector("array") = Id;
selector("arrayByAddingObject:") = NSArray, Id;
selector("arrayByAddingObjectsFromArray:") = NSArray, NSArray;
selector("arrayForKey:") = NSArray, NSString;
selector("arrayWithArray:") = Id, NSArray;
selector("arrayWithCapacity:") = Id, UInt;
selector("arrayWithContentsOfFile:") = Id, NSString;
selector("arrayWithContentsOfURL:") = Id, NSURL;
selector("arrayWithObject:") = Id, Id;
varargSelector("arrayWithObjects:") = Id, Id;
selector("arrayWithObjects:count:") = Id, Pointer[Id], UInt;
selector("ascending") = Bool;
selector("attemptRecoveryFromError:optionIndex:") = Bool, NSError, UInt;
selector("attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:") = Void, NSError, UInt, Id, SelectorHandle, RawPointer;
selector("attribute:atIndex:effectiveRange:") = Id, NSString, UInt, NSRangePointer;
selector("attribute:atIndex:longestEffectiveRange:inRange:") = Id, NSString, UInt, NSRangePointer, NSRange;
selector("attributedStringForObjectValue:withDefaultAttributes:") = NSAttributedString, Id, NSDictionary;
selector("attributedSubstringFromRange:") = NSAttributedString, NSRange;
selector("attributesAtIndex:effectiveRange:") = NSDictionary, UInt, NSRangePointer;
selector("attributesAtIndex:longestEffectiveRange:inRange:") = NSDictionary, UInt, NSRangePointer, NSRange;
selector("attributesOfFileSystemForPath:error:") = NSDictionary, NSString, Pointer[NSError];
selector("attributesOfItemAtPath:error:") = NSDictionary, NSString, Pointer[NSError];
selector("authenticationMethod") = NSString;
selector("autoContentAccessingProxy") = Id;
selector("automaticallyNotifiesObserversForKey:") = Bool, NSString;
selector("autorelease") = Id;
selector("autoreverses") = Bool;
selector("autoupdatingCurrentCalendar") = Id;
selector("autoupdatingCurrentLocale") = Id;
selector("availableData") = NSData;
selector("availableLocaleIdentifiers") = NSArray;
selector("availableStringEncodings") = Pointer[UInt];
selector("awakeAfterUsingCoder:") = Id, NSCoder;
selector("backgroundColor") = CGColorRef;
selector("backgroundFilters") = NSArray;
selector("baseURL") = NSURL;
selector("begin") = Void;
selector("beginContentAccess") = Bool;
selector("beginEditing") = Void;
selector("beginTime") = Double;
selector("beginUndoGrouping") = Void;
selector("biasValues") = NSArray;
selector("bitmapRepresentation") = NSData;
selector("blockOperationWithBlock:") = Id, UnknownType;
selector("bookmarkDataWithContentsOfURL:error:") = NSData, NSURL, Pointer[NSError];
selector("bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:") = NSData, UInt, NSArray, NSURL, Pointer[NSError];
selector("boolForKey:") = Bool, NSString;
selector("boolValue") = Bool;
selector("borderColor") = CGColorRef;
selector("borderWidth") = Float;
selector("bounds") = CGRect;
selector("broadcast") = Void;
selector("builtInPlugInsPath") = NSString;
selector("builtInPlugInsURL") = NSURL;
selector("bundleForClass:") = NSBundle, Id;
selector("bundleIdentifier") = NSString;
selector("bundlePath") = NSString;
selector("bundleURL") = NSURL;
selector("bundleWithIdentifier:") = NSBundle, NSString;
selector("bundleWithPath:") = NSBundle, NSString;
selector("bundleWithURL:") = NSBundle, NSURL;
selector("byValue") = Id;
selector("bytes") = RawPointer;
selector("cString") = Pointer[CChar];
selector("cStringLength") = UInt;
selector("cStringUsingEncoding:") = Pointer[CChar], UInt;
selector("cache:willEvictObject:") = Void, NSCache, Id;
selector("cachePolicy") = UInt;
selector("cachedResponse") = NSCachedURLResponse;
selector("cachedResponseForRequest:") = NSCachedURLResponse, NSURLRequest;
selector("calculationMode") = NSString;
selector("calendar") = NSCalendar;
selector("calendarIdentifier") = NSString;
selector("callStackReturnAddresses") = NSArray;
selector("callStackSymbols") = NSArray;
selector("canBeConvertedToEncoding:") = Bool, UInt;
selector("canHandleRequest:") = Bool, NSURLRequest;
selector("canInitWithRequest:") = Bool, NSURLRequest;
selector("canRedo") = Bool;
selector("canUndo") = Bool;
selector("cancel") = Void;
selector("cancelAllOperations") = Void;
selector("cancelAuthenticationChallenge:") = Void, NSURLAuthenticationChallenge;
selector("cancelPerformSelector:target:argument:") = Void, SelectorHandle, Id, Id;
selector("cancelPerformSelectorsWithTarget:") = Void, Id;
selector("cancelPreviousPerformRequestsWithTarget:") = Void, Id;
selector("cancelPreviousPerformRequestsWithTarget:selector:object:") = Void, Id, SelectorHandle, Id;
selector("canonicalLanguageIdentifierFromString:") = NSString, NSString;
selector("canonicalLocaleIdentifierFromString:") = NSString, NSString;
selector("canonicalRequestForRequest:") = NSURLRequest, NSURLRequest;
selector("capitalizedLetterCharacterSet") = Id;
selector("capitalizedString") = NSString;
selector("caseInsensitiveCompare:") = Int, NSString;
selector("caseSensitive") = Bool;
selector("certificates") = NSArray;
selector("changeCurrentDirectoryPath:") = Bool, NSString;
selector("changeFileAttributes:atPath:") = Bool, NSDictionary, NSString;
selector("charValue") = CChar;
selector("characterAtIndex:") = UShort, UInt;
selector("characterDirectionForLanguage:") = UInt, NSString;
selector("characterIsMember:") = Bool, UShort;
selector("characterSetWithBitmapRepresentation:") = Id, NSData;
selector("characterSetWithCharactersInString:") = Id, NSString;
selector("characterSetWithContentsOfFile:") = Id, NSString;
selector("characterSetWithRange:") = Id, NSRange;
selector("charactersToBeSkipped") = NSCharacterSet;
selector("checkResourceIsReachableAndReturnError:") = Bool, Pointer[NSError];
selector("checkingTypes") = UInt64;
selector("class") = Id;
selector("classFallbacksForKeyedArchiver") = NSArray;
selector("classForClassName:") = Id, NSString;
selector("classForCoder") = Id;
selector("classForKeyedArchiver") = Id;
selector("classForKeyedUnarchiver") = Id;
selector("classNameForClass:") = NSString, Id;
selector("classNamed:") = Id, NSString;
selector("client") = Id;
selector("close") = Void;
selector("closeFile") = Void;
selector("code") = Int;
selector("collection") = Id;
selector("colors") = NSArray;
selector("columnNumber") = Int;
selector("comment") = NSString;
selector("commentURL") = NSURL;
selector("commit") = Void;
selector("commonISOCurrencyCodes") = NSArray;
selector("commonPrefixWithString:options:") = NSString, NSString, UInt;
selector("comparator") = NSComparator;
selector("compare:") = Int, NSNumber;
selector("compare:options:") = Int, NSString, UInt;
selector("compare:options:range:") = Int, NSString, UInt, NSRange;
selector("compare:options:range:locale:") = Int, NSString, UInt, NSRange, Id;
selector("compareObject:toObject:") = Int, Id, Id;
selector("comparisonPredicateModifier") = UInt;
selector("completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:") = UInt, Pointer[NSString], Bool, Pointer[NSArray], NSArray;
selector("completionBlock") = UnknownType;
selector("components") = NSDictionary;
selector("components:fromDate:") = NSDateComponents, UInt, NSDate;
selector("components:fromDate:toDate:options:") = NSDateComponents, UInt, NSDate, NSDate, UInt;
selector("componentsFromLocaleIdentifier:") = NSDictionary, NSString;
selector("componentsJoinedByString:") = NSString, NSString;
selector("componentsSeparatedByCharactersInSet:") = NSArray, NSCharacterSet;
selector("componentsSeparatedByString:") = NSArray, NSString;
selector("componentsToDisplayForPath:") = NSArray, NSString;
selector("compositingFilter") = Id;
selector("compoundPredicateType") = UInt;
selector("condition") = Int;
selector("conformsToProtocol:") = Bool, Id;
selector("connection:canAuthenticateAgainstProtectionSpace:") = Bool, NSURLConnection, NSURLProtectionSpace;
selector("connection:didCancelAuthenticationChallenge:") = Void, NSURLConnection, NSURLAuthenticationChallenge;
selector("connection:didFailWithError:") = Void, NSURLConnection, NSError;
selector("connection:didReceiveAuthenticationChallenge:") = Void, NSURLConnection, NSURLAuthenticationChallenge;
selector("connection:didReceiveData:") = Void, NSURLConnection, NSData;
selector("connection:didReceiveResponse:") = Void, NSURLConnection, NSURLResponse;
selector("connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:") = Void, NSURLConnection, Int, Int, Int;
selector("connection:needNewBodyStream:") = NSInputStream, NSURLConnection, NSURLRequest;
selector("connection:willCacheResponse:") = NSCachedURLResponse, NSURLConnection, NSCachedURLResponse;
selector("connection:willSendRequest:redirectResponse:") = NSURLRequest, NSURLConnection, NSURLRequest, NSURLResponse;
selector("connectionDidFinishLoading:") = Void, NSURLConnection;
selector("connectionShouldUseCredentialStorage:") = Bool, NSURLConnection;
selector("connectionWithRequest:delegate:") = NSURLConnection, NSURLRequest, Id;
selector("constantValue") = Id;
selector("containsIndex:") = Bool, UInt;
selector("containsIndexes:") = Bool, NSIndexSet;
selector("containsIndexesInRange:") = Bool, NSRange;
selector("containsObject:") = Bool, Id;
selector("containsPoint:") = Bool, CGPoint;
selector("containsValueForKey:") = Bool, NSString;
selector("contents") = Id;
selector("contentsAreFlipped") = Bool;
selector("contentsAtPath:") = NSData, NSString;
selector("contentsCenter") = CGRect;
selector("contentsEqualAtPath:andPath:") = Bool, NSString, NSString;
selector("contentsGravity") = NSString;
selector("contentsOfDirectoryAtPath:error:") = NSArray, NSString, Pointer[NSError];
selector("contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:") = NSArray, NSURL, NSArray, UInt, Pointer[NSError];
selector("contentsRect") = CGRect;
selector("contentsScale") = Float;
selector("continueWithoutCredentialForAuthenticationChallenge:") = Void, NSURLAuthenticationChallenge;
selector("continuityValues") = NSArray;
selector("controlCharacterSet") = Id;
selector("convertPoint:fromLayer:") = CGPoint, CGPoint, CALayer;
selector("convertPoint:toLayer:") = CGPoint, CGPoint, CALayer;
selector("convertRect:fromLayer:") = CGRect, CGRect, CALayer;
selector("convertRect:toLayer:") = CGRect, CGRect, CALayer;
selector("convertTime:fromLayer:") = Double, Double, CALayer;
selector("convertTime:toLayer:") = Double, Double, CALayer;
selector("cookieAcceptPolicy") = UInt;
selector("cookieWithProperties:") = Id, NSDictionary;
selector("cookies") = NSArray;
selector("cookiesForURL:") = NSArray, NSURL;
selector("cookiesWithResponseHeaderFields:forURL:") = NSArray, NSDictionary, NSURL;
selector("copy") = Id;
selector("copyItemAtPath:toPath:error:") = Bool, NSString, NSString, Pointer[NSError];
selector("copyItemAtURL:toURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
selector("copyWithZone:") = Id, Pointer[NSZone];
selector("cornerRadius") = Float;
selector("correctionCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
selector("count") = UInt;
selector("countByEnumeratingWithState:objects:count:") = UInt, Pointer[NSFastEnumerationState], Pointer[Id], UInt;
selector("countForObject:") = UInt, Id;
selector("countLimit") = UInt;
selector("countOfIndexesInRange:") = UInt, NSRange;
selector("createDirectoryAtPath:attributes:") = Bool, NSString, NSDictionary;
selector("createDirectoryAtPath:withIntermediateDirectories:attributes:error:") = Bool, NSString, Bool, NSDictionary, Pointer[NSError];
selector("createFileAtPath:contents:attributes:") = Bool, NSString, NSData, NSDictionary;
selector("createSymbolicLinkAtPath:pathContent:") = Bool, NSString, NSString;
selector("createSymbolicLinkAtPath:withDestinationPath:error:") = Bool, NSString, NSString, Pointer[NSError];
selector("credentialForTrust:") = NSURLCredential, SecTrustRef;
selector("credentialWithIdentity:certificates:persistence:") = NSURLCredential, SecIdentityRef, NSArray, UInt;
selector("credentialWithUser:password:persistence:") = NSURLCredential, NSString, NSString, UInt;
selector("credentialsForProtectionSpace:") = NSDictionary, NSURLProtectionSpace;
selector("currencyCode") = NSString;
selector("currencyDecimalSeparator") = NSString;
selector("currencyGroupingSeparator") = NSString;
selector("currencySymbol") = NSString;
selector("currentCalendar") = Id;
selector("currentContext") = EAGLContext;
selector("currentDirectoryPath") = NSString;
selector("currentDiskUsage") = UInt;
selector("currentHandler") = NSAssertionHandler;
selector("currentLocale") = Id;
selector("currentMemoryUsage") = UInt;
selector("currentMode") = NSString;
selector("currentQueue") = Id;
selector("currentRunLoop") = NSRunLoop;
selector("currentThread") = NSThread;
selector("customSelector") = SelectorHandle;
selector("dashCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
selector("data") = Id;
selector("dataDetectorWithTypes:error:") = NSDataDetector, UInt64, Pointer[NSError];
selector("dataForKey:") = NSData, NSString;
selector("dataFromPropertyList:format:errorDescription:") = NSData, Id, UInt, Pointer[NSString];
selector("dataFromTXTRecordDictionary:") = NSData, NSDictionary;
selector("dataUsingEncoding:") = NSData, UInt;
selector("dataUsingEncoding:allowLossyConversion:") = NSData, UInt, Bool;
selector("dataWithBytes:length:") = Id, RawPointer, UInt;
selector("dataWithBytesNoCopy:length:") = Id, RawPointer, UInt;
selector("dataWithBytesNoCopy:length:freeWhenDone:") = Id, RawPointer, UInt, Bool;
selector("dataWithCapacity:") = Id, UInt;
selector("dataWithContentsOfFile:") = Id, NSString;
selector("dataWithContentsOfFile:options:error:") = Id, NSString, UInt, Pointer[NSError];
selector("dataWithContentsOfMappedFile:") = Id, NSString;
selector("dataWithContentsOfURL:") = Id, NSURL;
selector("dataWithContentsOfURL:options:error:") = Id, NSURL, UInt, Pointer[NSError];
selector("dataWithData:") = Id, NSData;
selector("dataWithLength:") = Id, UInt;
selector("dataWithPropertyList:format:options:error:") = NSData, Id, UInt, UInt, Pointer[NSError];
selector("date") = Id;
selector("dateByAddingComponents:toDate:options:") = NSDate, NSDateComponents, NSDate, UInt;
selector("dateByAddingTimeInterval:") = Id, Double;
selector("dateCheckingResultWithRange:date:") = NSTextCheckingResult, NSRange, NSDate;
selector("dateCheckingResultWithRange:date:timeZone:duration:") = NSTextCheckingResult, NSRange, NSDate, NSTimeZone, Double;
selector("dateFormat") = NSString;
selector("dateFormatFromTemplate:options:locale:") = NSString, NSString, UInt, NSLocale;
selector("dateFromComponents:") = NSDate, NSDateComponents;
selector("dateFromString:") = NSDate, NSString;
selector("dateStyle") = UInt;
selector("dateWithTimeInterval:sinceDate:") = Id, Double, NSDate;
selector("dateWithTimeIntervalSince1970:") = Id, Double;
selector("dateWithTimeIntervalSinceNow:") = Id, Double;
selector("dateWithTimeIntervalSinceReferenceDate:") = Id, Double;
selector("day") = Int;
selector("daylightSavingTimeOffset") = Double;
selector("daylightSavingTimeOffsetForDate:") = Double, NSDate;
selector("dealloc") = Void;
selector("decimalDigitCharacterSet") = Id;
selector("decimalNumberByAdding:") = NSDecimalNumber, NSDecimalNumber;
selector("decimalNumberByAdding:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
selector("decimalNumberByDividingBy:") = NSDecimalNumber, NSDecimalNumber;
selector("decimalNumberByDividingBy:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
selector("decimalNumberByMultiplyingBy:") = NSDecimalNumber, NSDecimalNumber;
selector("decimalNumberByMultiplyingBy:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
selector("decimalNumberByMultiplyingByPowerOf10:") = NSDecimalNumber, Short;
selector("decimalNumberByMultiplyingByPowerOf10:withBehavior:") = NSDecimalNumber, Short, Id;
selector("decimalNumberByRaisingToPower:") = NSDecimalNumber, UInt;
selector("decimalNumberByRaisingToPower:withBehavior:") = NSDecimalNumber, UInt, Id;
selector("decimalNumberByRoundingAccordingToBehavior:") = NSDecimalNumber, Id;
selector("decimalNumberBySubtracting:") = NSDecimalNumber, NSDecimalNumber;
selector("decimalNumberBySubtracting:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
selector("decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:") = Id, UInt, Short, Bool, Bool, Bool, Bool;
selector("decimalNumberWithDecimal:") = NSDecimalNumber, NSDecimal;
selector("decimalNumberWithMantissa:exponent:isNegative:") = NSDecimalNumber, UInt64, Short, Bool;
selector("decimalNumberWithString:") = NSDecimalNumber, NSString;
selector("decimalNumberWithString:locale:") = NSDecimalNumber, NSString, Id;
selector("decimalSeparator") = NSString;
selector("decimalValue") = NSDecimal;
selector("decodeArrayOfObjCType:count:at:") = Void, Pointer[CChar], UInt, RawPointer;
selector("decodeBoolForKey:") = Bool, NSString;
selector("decodeBytesForKey:returnedLength:") = Pointer[CUChar], NSString, Pointer[UInt];
selector("decodeBytesWithReturnedLength:") = RawPointer, Pointer[UInt];
selector("decodeDataObject") = NSData;
selector("decodeDoubleForKey:") = Double, NSString;
selector("decodeFloatForKey:") = Float, NSString;
selector("decodeInt32ForKey:") = Int, NSString;
selector("decodeInt64ForKey:") = Int64, NSString;
selector("decodeIntForKey:") = Int, NSString;
selector("decodeIntegerForKey:") = Int, NSString;
selector("decodeObject") = Id;
selector("decodeObjectForKey:") = Id, NSString;
selector("decodeValueOfObjCType:at:") = Void, Pointer[CChar], RawPointer;
varargSelector("decodeValuesOfObjCTypes:") = Void, Pointer[CChar];
selector("decomposableCharacterSet") = Id;
selector("decomposedStringWithCanonicalMapping") = NSString;
selector("decomposedStringWithCompatibilityMapping") = NSString;
selector("defaultActionForKey:") = Id, NSString;
selector("defaultBehavior") = Id;
selector("defaultCStringEncoding") = UInt;
selector("defaultCenter") = Id;
selector("defaultCredentialForProtectionSpace:") = NSURLCredential, NSURLProtectionSpace;
selector("defaultDate") = NSDate;
selector("defaultDecimalNumberHandler") = Id;
selector("defaultFormatterBehavior") = UInt;
selector("defaultManager") = NSFileManager;
selector("defaultQueue") = Id;
selector("defaultTimeZone") = NSTimeZone;
selector("defaultValueForKey:") = Id, NSString;
selector("delegate") = Id;
selector("deleteCharactersInRange:") = Void, NSRange;
selector("deleteCookie:") = Void, NSHTTPCookie;
selector("dependencies") = NSArray;
selector("dequeueNotificationsMatching:coalesceMask:") = Void, NSNotification, UInt;
selector("description") = NSString;
selector("descriptionInStringsFileFormat") = NSString;
selector("descriptionWithLocale:") = NSString, Id;
selector("descriptionWithLocale:indent:") = NSString, Id, UInt;
selector("destinationOfSymbolicLinkAtPath:error:") = NSString, NSString, Pointer[NSError];
selector("detachNewThreadSelector:toTarget:withObject:") = Void, SelectorHandle, Id, Id;
selector("developmentLocalization") = NSString;
selector("dictionary") = Id;
selector("dictionaryForKey:") = NSDictionary, NSString;
selector("dictionaryFromTXTRecordData:") = NSDictionary, NSData;
selector("dictionaryRepresentation") = NSDictionary;
selector("dictionaryWithCapacity:") = Id, UInt;
selector("dictionaryWithContentsOfFile:") = Id, NSString;
selector("dictionaryWithContentsOfURL:") = Id, NSURL;
selector("dictionaryWithDictionary:") = Id, NSDictionary;
selector("dictionaryWithObject:forKey:") = Id, Id, Id;
selector("dictionaryWithObjects:forKeys:") = Id, NSArray, NSArray;
selector("dictionaryWithObjects:forKeys:count:") = Id, Pointer[Id], Pointer[Id], UInt;
varargSelector("dictionaryWithObjectsAndKeys:") = Id, Id;
selector("dictionaryWithValuesForKeys:") = NSDictionary, NSArray;
selector("didChange:valuesAtIndexes:forKey:") = Void, UInt, NSIndexSet, NSString;
selector("didChangeValueForKey:") = Void, NSString;
selector("didChangeValueForKey:withSetMutation:usingObjects:") = Void, NSString, UInt, NSSet;
selector("directoryAttributes") = NSDictionary;
selector("directoryContentsAtPath:") = NSArray, NSString;
selector("disableActions") = Bool;
selector("disableUndoRegistration") = Void;
selector("discardContentIfPossible") = Void;
selector("diskCapacity") = UInt;
selector("display") = Void;
selector("displayIfNeeded") = Void;
selector("displayLayer:") = Void, CALayer;
selector("displayLinkWithTarget:selector:") = CADisplayLink, Id, SelectorHandle;
selector("displayNameAtPath:") = NSString, NSString;
selector("displayNameForKey:value:") = NSString, Id, Id;
selector("distantFuture") = Id;
selector("distantPast") = Id;
selector("distinguishedNames") = NSArray;
selector("doesNotRecognizeSelector:") = Void, SelectorHandle;
selector("doesRelativeDateFormatting") = Bool;
selector("domain") = NSString;
selector("dominantLanguage") = NSString;
selector("dominantLanguageForScript:") = NSString, NSString;
selector("dominantScript") = NSString;
selector("doubleForKey:") = Double, NSString;
selector("doubleValue") = Double;
selector("drain") = Void;
selector("drawInContext:") = Void, CGContextRef;
selector("drawLayer:inContext:") = Void, CALayer, CGContextRef;
selector("drawableProperties") = NSDictionary;
selector("duration") = Double;
selector("earlierDate:") = NSDate, NSDate;
selector("edgeAntialiasingMask") = UInt;
selector("editingStringForObjectValue:") = NSString, Id;
selector("enableUndoRegistration") = Void;
selector("encodeArrayOfObjCType:count:at:") = Void, Pointer[CChar], UInt, RawPointer;
selector("encodeBool:forKey:") = Void, Bool, NSString;
selector("encodeBycopyObject:") = Void, Id;
selector("encodeByrefObject:") = Void, Id;
selector("encodeBytes:length:") = Void, RawPointer, UInt;
selector("encodeBytes:length:forKey:") = Void, Pointer[CUChar], UInt, NSString;
selector("encodeConditionalObject:") = Void, Id;
selector("encodeConditionalObject:forKey:") = Void, Id, NSString;
selector("encodeDataObject:") = Void, NSData;
selector("encodeDouble:forKey:") = Void, Double, NSString;
selector("encodeFloat:forKey:") = Void, Float, NSString;
selector("encodeInt32:forKey:") = Void, Int, NSString;
selector("encodeInt64:forKey:") = Void, Int64, NSString;
selector("encodeInt:forKey:") = Void, Int, NSString;
selector("encodeInteger:forKey:") = Void, Int, NSString;
selector("encodeObject:") = Void, Id;
selector("encodeObject:forKey:") = Void, Id, NSString;
selector("encodeRootObject:") = Void, Id;
selector("encodeValueOfObjCType:at:") = Void, Pointer[CChar], RawPointer;
varargSelector("encodeValuesOfObjCTypes:") = Void, Pointer[CChar];
selector("encodeWithCoder:") = Void, NSCoder;
selector("endContentAccess") = Void;
selector("endEditing") = Void;
selector("endPoint") = CGPoint;
selector("endProgress") = Float;
selector("endUndoGrouping") = Void;
selector("enqueueNotification:postingStyle:") = Void, NSNotification, UInt;
selector("enqueueNotification:postingStyle:coalesceMask:forModes:") = Void, NSNotification, UInt, UInt, NSArray;
selector("enumerateAttribute:inRange:options:usingBlock:") = Void, NSString, NSRange, UInt, UnknownType;
selector("enumerateAttributesInRange:options:usingBlock:") = Void, NSRange, UInt, UnknownType;
selector("enumerateIndexesInRange:options:usingBlock:") = Void, NSRange, UInt, UnknownType;
selector("enumerateIndexesUsingBlock:") = Void, UnknownType;
selector("enumerateIndexesWithOptions:usingBlock:") = Void, UInt, UnknownType;
selector("enumerateKeysAndObjectsUsingBlock:") = Void, UnknownType;
selector("enumerateKeysAndObjectsWithOptions:usingBlock:") = Void, UInt, UnknownType;
selector("enumerateLinesUsingBlock:") = Void, UnknownType;
selector("enumerateMatchesInString:options:range:usingBlock:") = Void, NSString, UInt, NSRange, UnknownType;
selector("enumerateObjectsAtIndexes:options:usingBlock:") = Void, NSIndexSet, UInt, UnknownType;
selector("enumerateObjectsUsingBlock:") = Void, UnknownType;
selector("enumerateObjectsWithOptions:usingBlock:") = Void, UInt, UnknownType;
selector("enumerateSubstringsInRange:options:usingBlock:") = Void, NSRange, UInt, UnknownType;
selector("enumeratorAtPath:") = NSDirectoryEnumerator, NSString;
selector("enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:") = NSDirectoryEnumerator, NSURL, NSArray, UInt, UnknownType;
selector("environment") = NSDictionary;
selector("era") = Int;
selector("eraSymbols") = NSArray;
selector("error") = NSError;
selector("errorWithDomain:code:userInfo:") = Id, NSString, Int, NSDictionary;
selector("escapedPatternForString:") = NSString, NSString;
selector("escapedTemplateForString:") = NSString, NSString;
selector("evaluateWithObject:") = Bool, Id;
selector("evaluateWithObject:substitutionVariables:") = Bool, Id, NSDictionary;
selector("evictsObjectsWithDiscardedContent") = Bool;
selector("exceptionDuringOperation:error:leftOperand:rightOperand:") = NSDecimalNumber, SelectorHandle, UInt, NSDecimalNumber, NSDecimalNumber;
selector("exceptionWithName:reason:userInfo:") = NSException, NSString, NSString, NSDictionary;
selector("exchangeObjectAtIndex:withObjectAtIndex:") = Void, UInt, UInt;
selector("executableArchitectures") = NSArray;
selector("executablePath") = NSString;
selector("executableURL") = NSURL;
selector("executionBlocks") = NSArray;
selector("exit") = Void;
selector("expectedContentLength") = Int64;
selector("expiresDate") = NSDate;
selector("exponentSymbol") = NSString;
selector("expressionBlock") = UnknownType;
selector("expressionForAggregate:") = NSExpression, NSArray;
selector("expressionForBlock:arguments:") = NSExpression, UnknownType, NSArray;
selector("expressionForConstantValue:") = NSExpression, Id;
selector("expressionForEvaluatedObject") = NSExpression;
selector("expressionForFunction:arguments:") = NSExpression, NSString, NSArray;
selector("expressionForFunction:selectorName:arguments:") = NSExpression, NSExpression, NSString, NSArray;
selector("expressionForIntersectSet:with:") = NSExpression, NSExpression, NSExpression;
selector("expressionForKeyPath:") = NSExpression, NSString;
selector("expressionForMinusSet:with:") = NSExpression, NSExpression, NSExpression;
selector("expressionForSubquery:usingIteratorVariable:predicate:") = NSExpression, NSExpression, NSString, Id;
selector("expressionForUnionSet:with:") = NSExpression, NSExpression, NSExpression;
selector("expressionForVariable:") = NSExpression, NSString;
selector("expressionType") = UInt;
selector("expressionValueWithObject:context:") = Id, Id, NSMutableDictionary;
selector("fadeDuration") = Double;
selector("failureResponse") = NSURLResponse;
selector("fastestEncoding") = UInt;
selector("fileAttributes") = NSDictionary;
selector("fileAttributesAtPath:traverseLink:") = NSDictionary, NSString, Bool;
selector("fileCreationDate") = NSDate;
selector("fileDescriptor") = Int;
selector("fileExistsAtPath:") = Bool, NSString;
selector("fileExistsAtPath:isDirectory:") = Bool, NSString, Pointer[Bool];
selector("fileExtensionHidden") = Bool;
selector("fileGroupOwnerAccountID") = NSNumber;
selector("fileGroupOwnerAccountName") = NSString;
selector("fileHFSCreatorCode") = CULong;
selector("fileHFSTypeCode") = CULong;
selector("fileHandleForReading") = NSFileHandle;
selector("fileHandleForReadingAtPath:") = Id, NSString;
selector("fileHandleForReadingFromURL:error:") = Id, NSURL, Pointer[NSError];
selector("fileHandleForUpdatingAtPath:") = Id, NSString;
selector("fileHandleForUpdatingURL:error:") = Id, NSURL, Pointer[NSError];
selector("fileHandleForWriting") = NSFileHandle;
selector("fileHandleForWritingAtPath:") = Id, NSString;
selector("fileHandleForWritingToURL:error:") = Id, NSURL, Pointer[NSError];
selector("fileHandleWithNullDevice") = Id;
selector("fileHandleWithStandardError") = Id;
selector("fileHandleWithStandardInput") = Id;
selector("fileHandleWithStandardOutput") = Id;
selector("fileIsAppendOnly") = Bool;
selector("fileIsImmutable") = Bool;
selector("fileManager:shouldCopyItemAtPath:toPath:") = Bool, NSFileManager, NSString, NSString;
selector("fileManager:shouldCopyItemAtURL:toURL:") = Bool, NSFileManager, NSURL, NSURL;
selector("fileManager:shouldLinkItemAtPath:toPath:") = Bool, NSFileManager, NSString, NSString;
selector("fileManager:shouldLinkItemAtURL:toURL:") = Bool, NSFileManager, NSURL, NSURL;
selector("fileManager:shouldMoveItemAtPath:toPath:") = Bool, NSFileManager, NSString, NSString;
selector("fileManager:shouldMoveItemAtURL:toURL:") = Bool, NSFileManager, NSURL, NSURL;
selector("fileManager:shouldProceedAfterError:") = Bool, NSFileManager, NSDictionary;
selector("fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:") = Bool, NSFileManager, NSError, NSString, NSString;
selector("fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:") = Bool, NSFileManager, NSError, NSURL, NSURL;
selector("fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:") = Bool, NSFileManager, NSError, NSString, NSString;
selector("fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:") = Bool, NSFileManager, NSError, NSURL, NSURL;
selector("fileManager:shouldProceedAfterError:movingItemAtPath:toPath:") = Bool, NSFileManager, NSError, NSString, NSString;
selector("fileManager:shouldProceedAfterError:movingItemAtURL:toURL:") = Bool, NSFileManager, NSError, NSURL, NSURL;
selector("fileManager:shouldProceedAfterError:removingItemAtPath:") = Bool, NSFileManager, NSError, NSString;
selector("fileManager:shouldProceedAfterError:removingItemAtURL:") = Bool, NSFileManager, NSError, NSURL;
selector("fileManager:shouldRemoveItemAtPath:") = Bool, NSFileManager, NSString;
selector("fileManager:shouldRemoveItemAtURL:") = Bool, NSFileManager, NSURL;
selector("fileManager:willProcessPath:") = Void, NSFileManager, NSString;
selector("fileModificationDate") = NSDate;
selector("fileOwnerAccountID") = NSNumber;
selector("fileOwnerAccountName") = NSString;
selector("filePathURL") = NSURL;
selector("filePosixPermissions") = UInt;
selector("fileReferenceURL") = NSURL;
selector("fileSize") = UInt64;
selector("fileSystemAttributesAtPath:") = NSDictionary, NSString;
selector("fileSystemFileNumber") = UInt;
selector("fileSystemNumber") = Int;
selector("fileSystemRepresentation") = Pointer[CChar];
selector("fileSystemRepresentationWithPath:") = Pointer[CChar], NSString;
selector("fileType") = NSString;
selector("fileURLWithPath:") = Id, NSString;
selector("fileURLWithPath:isDirectory:") = Id, NSString, Bool;
selector("fileURLWithPathComponents:") = NSURL, NSArray;
selector("fileWrappers") = NSDictionary;
selector("filename") = NSString;
selector("fillColor") = CGColorRef;
selector("fillMode") = NSString;
selector("fillRule") = NSString;
selector("filter") = Id;
selector("filterUsingPredicate:") = Void, NSPredicate;
selector("filteredArrayUsingPredicate:") = NSArray, NSPredicate;
selector("filteredSetUsingPredicate:") = NSSet, NSPredicate;
selector("filters") = NSArray;
selector("finalize") = Void;
selector("finishDecoding") = Void;
selector("finishEncoding") = Void;
selector("fire") = Void;
selector("fireDate") = NSDate;
selector("firstIndex") = UInt;
selector("firstMatchInString:options:range:") = NSTextCheckingResult, NSString, UInt, NSRange;
selector("firstObjectCommonWithArray:") = Id, NSArray;
selector("firstWeekday") = UInt;
selector("floatForKey:") = Float, NSString;
selector("floatValue") = Float;
selector("flush") = Void;
selector("font") = CFTypeRef;
selector("fontSize") = Float;
selector("foregroundColor") = CGColorRef;
selector("formIntersectionWithCharacterSet:") = Void, NSCharacterSet;
selector("formUnionWithCharacterSet:") = Void, NSCharacterSet;
selector("formatWidth") = UInt;
selector("formatterBehavior") = UInt;
selector("forwardInvocation:") = Void, NSInvocation;
selector("forwardingTargetForSelector:") = Id, SelectorHandle;
selector("fragment") = NSString;
selector("frame") = CGRect;
selector("frameInterval") = Int;
selector("frameLength") = UInt;
selector("fromValue") = Id;
selector("function") = NSString;
selector("functionWithControlPoints::::") = Id, Float, Float, Float, Float;
selector("functionWithName:") = Id, NSString;
selector("generatesCalendarDates") = Bool;
selector("generatesDecimalNumbers") = Bool;
selector("getArgument:atIndex:") = Void, RawPointer, Int;
selector("getArgumentTypeAtIndex:") = Pointer[CChar], UInt;
selector("getBuffer:length:") = Bool, Pointer[Pointer[CUChar]], Pointer[UInt];
selector("getBytes:") = Void, RawPointer;
selector("getBytes:length:") = Void, RawPointer, UInt;
selector("getBytes:maxLength:usedLength:encoding:options:range:remainingRange:") = Bool, RawPointer, UInt, Pointer[UInt], UInt, UInt, NSRange, NSRangePointer;
selector("getBytes:range:") = Void, RawPointer, NSRange;
selector("getCFRunLoop") = CFRunLoopRef;
selector("getCString:") = Void, Pointer[CChar];
selector("getCString:maxLength:") = Void, Pointer[CChar], UInt;
selector("getCString:maxLength:encoding:") = Bool, Pointer[CChar], UInt, UInt;
selector("getCString:maxLength:range:remainingRange:") = Void, Pointer[CChar], UInt, NSRange, NSRangePointer;
selector("getCharacters:") = Void, Pointer[UShort];
selector("getCharacters:range:") = Void, Pointer[UShort], NSRange;
selector("getControlPointAtIndex:values:") = Void, UInt, Pointer[Float];
selector("getFileSystemRepresentation:maxLength:") = Bool, Pointer[CChar], UInt;
selector("getIndexes:") = Void, Pointer[UInt];
selector("getIndexes:maxCount:inIndexRange:") = UInt, Pointer[UInt], UInt, NSRangePointer;
selector("getInputStream:outputStream:") = Bool, Pointer[NSInputStream], Pointer[NSOutputStream];
selector("getLineStart:end:contentsEnd:forRange:") = Void, Pointer[UInt], Pointer[UInt], Pointer[UInt], NSRange;
selector("getObjectValue:forString:errorDescription:") = Bool, Pointer[Id], NSString, Pointer[NSString];
selector("getObjectValue:forString:range:error:") = Bool, Pointer[Id], NSString, Pointer[NSRange], Pointer[NSError];
selector("getObjects:") = Void, Pointer[Id];
selector("getObjects:andKeys:") = Void, Pointer[Id], Pointer[Id];
selector("getObjects:range:") = Void, Pointer[Id], NSRange;
selector("getParagraphStart:end:contentsEnd:forRange:") = Void, Pointer[UInt], Pointer[UInt], Pointer[UInt], NSRange;
selector("getResourceValue:forKey:error:") = Bool, Pointer[Id], NSString, Pointer[NSError];
selector("getReturnValue:") = Void, RawPointer;
selector("getValue:") = Void, RawPointer;
selector("globallyUniqueString") = NSString;
selector("grammarCheckingResultWithRange:details:") = NSTextCheckingResult, NSRange, NSArray;
selector("grammarDetails") = NSArray;
selector("gregorianStartDate") = NSDate;
selector("groupingLevel") = Int;
selector("groupingSeparator") = NSString;
selector("groupingSize") = UInt;
selector("groupsByEvent") = Bool;
varargSelector("handleFailureInFunction:file:lineNumber:description:") = Void, NSString, NSString, Int, NSString;
varargSelector("handleFailureInMethod:object:file:lineNumber:description:") = Void, SelectorHandle, Id, NSString, Int, NSString;
selector("handleMachMessage:") = Void, RawPointer;
selector("handlePortMessage:") = Void, NSPortMessage;
selector("hasBytesAvailable") = Bool;
selector("hasMemberInPlane:") = Bool, CUChar;
selector("hasPassword") = Bool;
selector("hasPrefix:") = Bool, NSString;
selector("hasSpaceAvailable") = Bool;
selector("hasSuffix:") = Bool, NSString;
selector("hash") = UInt;
selector("helpAnchor") = NSString;
selector("hitTest:") = CALayer, CGPoint;
selector("host") = NSString;
selector("hostName") = NSString;
selector("hour") = Int;
selector("identity") = SecIdentityRef;
selector("illegalCharacterSet") = Id;
selector("increaseLengthBy:") = Void, UInt;
selector("indexAtPosition:") = UInt, UInt;
selector("indexGreaterThanIndex:") = UInt, UInt;
selector("indexGreaterThanOrEqualToIndex:") = UInt, UInt;
selector("indexInRange:options:passingTest:") = UInt, NSRange, UInt, UnknownType;
selector("indexLessThanIndex:") = UInt, UInt;
selector("indexLessThanOrEqualToIndex:") = UInt, UInt;
selector("indexOfObject:") = UInt, Id;
selector("indexOfObject:inRange:") = UInt, Id, NSRange;
selector("indexOfObject:inSortedRange:options:usingComparator:") = UInt, Id, NSRange, UInt, NSComparator;
selector("indexOfObjectAtIndexes:options:passingTest:") = UInt, NSIndexSet, UInt, UnknownType;
selector("indexOfObjectIdenticalTo:") = UInt, Id;
selector("indexOfObjectIdenticalTo:inRange:") = UInt, Id, NSRange;
selector("indexOfObjectPassingTest:") = UInt, UnknownType;
selector("indexOfObjectWithOptions:passingTest:") = UInt, UInt, UnknownType;
selector("indexPassingTest:") = UInt, UnknownType;
selector("indexPathByAddingIndex:") = NSIndexPath, UInt;
selector("indexPathByRemovingLastIndex") = NSIndexPath;
selector("indexPathWithIndex:") = Id, UInt;
selector("indexPathWithIndexes:length:") = Id, Pointer[UInt], UInt;
selector("indexSet") = Id;
selector("indexSetWithIndex:") = Id, UInt;
selector("indexSetWithIndexesInRange:") = Id, NSRange;
selector("indexWithOptions:passingTest:") = UInt, UInt, UnknownType;
selector("indexesInRange:options:passingTest:") = NSIndexSet, NSRange, UInt, UnknownType;
selector("indexesOfObjectsAtIndexes:options:passingTest:") = NSIndexSet, NSIndexSet, UInt, UnknownType;
selector("indexesOfObjectsPassingTest:") = NSIndexSet, UnknownType;
selector("indexesOfObjectsWithOptions:passingTest:") = NSIndexSet, UInt, UnknownType;
selector("indexesPassingTest:") = NSIndexSet, UnknownType;
selector("indexesWithOptions:passingTest:") = NSIndexSet, UInt, UnknownType;
selector("infoDictionary") = NSDictionary;
selector("init") = Id;
selector("initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:") = Id, NSData, UInt, NSURL, Pointer[Bool], Pointer[NSError];
selector("initDirectoryWithFileWrappers:") = Id, NSDictionary;
selector("initFileURLWithPath:") = Id, NSString;
selector("initFileURLWithPath:isDirectory:") = Id, NSString, Bool;
selector("initForReadingWithData:") = Id, NSData;
selector("initForWritingWithMutableData:") = Id, NSMutableData;
selector("initRegularFileWithContents:") = Id, NSData;
selector("initSymbolicLinkWithDestination:") = Id, NSString;
selector("initSymbolicLinkWithDestinationURL:") = Id, NSURL;
selector("initToBuffer:capacity:") = Id, Pointer[CUChar], UInt;
selector("initToFileAtPath:append:") = Id, NSString, Bool;
selector("initToMemory") = Id;
selector("initWithAPI:") = Id, UInt;
selector("initWithAPI:sharegroup:") = Id, UInt, EAGLSharegroup;
selector("initWithArray:") = Id, NSArray;
selector("initWithArray:copyItems:") = Id, NSArray, Bool;
selector("initWithAttributedString:") = Id, NSAttributedString;
selector("initWithAuthenticationChallenge:sender:") = Id, NSURLAuthenticationChallenge, Id;
selector("initWithBool:") = Id, Bool;
selector("initWithBytes:length:") = Id, RawPointer, UInt;
selector("initWithBytes:length:encoding:") = Id, RawPointer, UInt, UInt;
selector("initWithBytes:objCType:") = Id, RawPointer, Pointer[CChar];
selector("initWithBytesNoCopy:length:") = Id, RawPointer, UInt;
selector("initWithBytesNoCopy:length:encoding:freeWhenDone:") = Id, RawPointer, UInt, UInt, Bool;
selector("initWithBytesNoCopy:length:freeWhenDone:") = Id, RawPointer, UInt, Bool;
selector("initWithCString:") = Id, Pointer[CChar];
selector("initWithCString:encoding:") = Id, Pointer[CChar], UInt;
selector("initWithCString:length:") = Id, Pointer[CChar], UInt;
selector("initWithCStringNoCopy:length:freeWhenDone:") = Id, Pointer[CChar], UInt, Bool;
selector("initWithCalendarIdentifier:") = Id, NSString;
selector("initWithCapacity:") = Id, UInt;
selector("initWithChar:") = Id, CChar;
selector("initWithCharacters:length:") = Id, Pointer[UShort], UInt;
selector("initWithCharactersNoCopy:length:freeWhenDone:") = Id, Pointer[UShort], UInt, Bool;
selector("initWithCoder:") = Id, NSCoder;
selector("initWithCondition:") = Id, Int;
selector("initWithContentsOfFile:") = Id, NSString;
selector("initWithContentsOfFile:encoding:error:") = Id, NSString, UInt, Pointer[NSError];
selector("initWithContentsOfFile:options:error:") = Id, NSString, UInt, Pointer[NSError];
selector("initWithContentsOfFile:usedEncoding:error:") = Id, NSString, Pointer[UInt], Pointer[NSError];
selector("initWithContentsOfMappedFile:") = Id, NSString;
selector("initWithContentsOfURL:") = Id, NSURL;
selector("initWithContentsOfURL:encoding:error:") = Id, NSURL, UInt, Pointer[NSError];
selector("initWithContentsOfURL:options:error:") = Id, NSURL, UInt, Pointer[NSError];
selector("initWithContentsOfURL:usedEncoding:error:") = Id, NSURL, Pointer[UInt], Pointer[NSError];
selector("initWithControlPoints::::") = Id, Float, Float, Float, Float;
selector("initWithData:") = Id, NSData;
selector("initWithData:encoding:") = Id, NSData, UInt;
selector("initWithDecimal:") = Id, NSDecimal;
selector("initWithDictionary:") = Id, NSDictionary;
selector("initWithDictionary:copyItems:") = Id, NSDictionary, Bool;
selector("initWithDomain:code:userInfo:") = Id, NSString, Int, NSDictionary;
selector("initWithDomain:type:name:") = Id, NSString, NSString, NSString;
selector("initWithDomain:type:name:port:") = Id, NSString, NSString, NSString, Int;
selector("initWithDominantScript:languageMap:") = Id, NSString, NSDictionary;
selector("initWithDouble:") = Id, Double;
selector("initWithExpressionType:") = Id, UInt;
selector("initWithFileAtPath:") = Id, NSString;
selector("initWithFileDescriptor:") = Id, Int;
selector("initWithFileDescriptor:closeOnDealloc:") = Id, Int, Bool;
selector("initWithFireDate:interval:target:selector:userInfo:repeats:") = Id, NSDate, Double, Id, SelectorHandle, Id, Bool;
selector("initWithFloat:") = Id, Float;
varargSelector("initWithFormat:") = Id, NSString;
selector("initWithFormat:arguments:") = Id, NSString, va_list;
varargSelector("initWithFormat:locale:") = Id, NSString, Id;
selector("initWithFormat:locale:arguments:") = Id, NSString, Id, va_list;
selector("initWithHost:port:protocol:realm:authenticationMethod:") = Id, NSString, Int, NSString, NSString, NSString;
selector("initWithIdentity:certificates:persistence:") = Id, SecIdentityRef, NSArray, UInt;
selector("initWithIndex:") = Id, UInt;
selector("initWithIndexSet:") = Id, NSIndexSet;
selector("initWithIndexes:length:") = Id, Pointer[UInt], UInt;
selector("initWithIndexesInRange:") = Id, NSRange;
selector("initWithInt:") = Id, Int;
selector("initWithInteger:") = Id, Int;
selector("initWithInvocation:") = Id, NSInvocation;
selector("initWithKey:ascending:") = Id, NSString, Bool;
selector("initWithKey:ascending:comparator:") = Id, NSString, Bool, NSComparator;
selector("initWithKey:ascending:selector:") = Id, NSString, Bool, SelectorHandle;
selector("initWithLayer:") = Id, Id;
selector("initWithLeftExpression:rightExpression:customSelector:") = Id, NSExpression, NSExpression, SelectorHandle;
selector("initWithLeftExpression:rightExpression:modifier:type:options:") = Id, NSExpression, NSExpression, UInt, UInt, UInt;
selector("initWithLength:") = Id, UInt;
selector("initWithLocaleIdentifier:") = Id, NSString;
selector("initWithLong:") = Id, CLong;
selector("initWithLongLong:") = Id, Int64;
selector("initWithMachPort:") = Id, UInt;
selector("initWithMachPort:options:") = Id, UInt, UInt;
selector("initWithMantissa:exponent:isNegative:") = Id, UInt64, Short, Bool;
selector("initWithMemoryCapacity:diskCapacity:diskPath:") = Id, UInt, UInt, NSString;
selector("initWithName:") = Id, NSString;
selector("initWithName:data:") = Id, NSString, NSData;
selector("initWithName:reason:userInfo:") = Id, NSString, NSString, NSDictionary;
selector("initWithNotificationCenter:") = Id, NSNotificationCenter;
varargSelector("initWithObjects:") = Id, Id;
selector("initWithObjects:count:") = Id, Pointer[Id], UInt;
selector("initWithObjects:forKeys:") = Id, NSArray, NSArray;
selector("initWithObjects:forKeys:count:") = Id, Pointer[Id], Pointer[Id], UInt;
varargSelector("initWithObjectsAndKeys:") = Id, Id;
selector("initWithPath:") = Id, NSString;
selector("initWithPattern:options:error:") = Id, NSString, UInt, Pointer[NSError];
selector("initWithProperties:") = Id, NSDictionary;
selector("initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:sender:") = Id, NSURLProtectionSpace, NSURLCredential, Int, NSURLResponse, NSError, Id;
selector("initWithProxyHost:port:type:realm:authenticationMethod:") = Id, NSString, Int, NSString, NSString, NSString;
selector("initWithRequest:cachedResponse:client:") = Id, NSURLRequest, NSCachedURLResponse, Id;
selector("initWithRequest:delegate:") = Id, NSURLRequest, Id;
selector("initWithRequest:delegate:startImmediately:") = Id, NSURLRequest, Id, Bool;
selector("initWithResponse:data:") = Id, NSURLResponse, NSData;
selector("initWithResponse:data:userInfo:storagePolicy:") = Id, NSURLResponse, NSData, NSDictionary, UInt;
selector("initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:") = Id, UInt, Short, Bool, Bool, Bool, Bool;
selector("initWithScheme:host:path:") = Id, NSString, NSString, NSString;
selector("initWithSerializedRepresentation:") = Id, NSData;
selector("initWithSet:") = Id, NSSet;
selector("initWithSet:copyItems:") = Id, NSSet, Bool;
selector("initWithShort:") = Id, Short;
selector("initWithStorageLocation:") = Id, NSURL;
selector("initWithString:") = Id, NSString;
selector("initWithString:attributes:") = Id, NSString, NSDictionary;
selector("initWithString:locale:") = Id, NSString, Id;
selector("initWithString:relativeToURL:") = Id, NSString, NSURL;
selector("initWithTarget:selector:object:") = Id, Id, SelectorHandle, Id;
selector("initWithTimeInterval:sinceDate:") = Id, Double, NSDate;
selector("initWithTimeIntervalSince1970:") = Id, Double;
selector("initWithTimeIntervalSinceNow:") = Id, Double;
selector("initWithTimeIntervalSinceReferenceDate:") = Id, Double;
selector("initWithTrust:") = Id, SecTrustRef;
selector("initWithType:subpredicates:") = Id, UInt, NSArray;
selector("initWithTypes:error:") = Id, UInt64, Pointer[NSError];
selector("initWithURL:") = Id, NSURL;
selector("initWithURL:MIMEType:expectedContentLength:textEncodingName:") = Id, NSURL, NSString, Int, NSString;
selector("initWithURL:append:") = Id, NSURL, Bool;
selector("initWithURL:cachePolicy:timeoutInterval:") = Id, NSURL, UInt, Double;
selector("initWithURL:options:error:") = Id, NSURL, UInt, Pointer[NSError];
selector("initWithUTF8String:") = Id, Pointer[CChar];
selector("initWithUnsignedChar:") = Id, CUChar;
selector("initWithUnsignedInt:") = Id, UInt;
selector("initWithUnsignedInteger:") = Id, UInt;
selector("initWithUnsignedLong:") = Id, CULong;
selector("initWithUnsignedLongLong:") = Id, UInt64;
selector("initWithUnsignedShort:") = Id, UShort;
selector("initWithUser:") = Id, NSString;
selector("initWithUser:password:persistence:") = Id, NSString, NSString, UInt;
selector("initialize") = Void;
selector("inputStreamWithData:") = Id, NSData;
selector("inputStreamWithFileAtPath:") = Id, NSString;
selector("inputStreamWithURL:") = Id, NSURL;
selector("insertAttributedString:atIndex:") = Void, NSAttributedString, UInt;
selector("insertObject:atIndex:") = Void, Id, UInt;
selector("insertObjects:atIndexes:") = Void, NSArray, NSIndexSet;
selector("insertString:atIndex:") = Void, NSString, UInt;
selector("insertSublayer:above:") = Void, CALayer, CALayer;
selector("insertSublayer:atIndex:") = Void, CALayer, UInt;
selector("insertSublayer:below:") = Void, CALayer, CALayer;
selector("instanceAlphaOffset") = Float;
selector("instanceBlueOffset") = Float;
selector("instanceColor") = CGColorRef;
selector("instanceCount") = Int;
selector("instanceDelay") = Double;
selector("instanceGreenOffset") = Float;
selector("instanceMethodForSelector:") = IMP, SelectorHandle;
selector("instanceMethodSignatureForSelector:") = NSMethodSignature, SelectorHandle;
selector("instanceRedOffset") = Float;
selector("instanceTransform") = CATransform3D;
selector("instancesRespondToSelector:") = Bool, SelectorHandle;
selector("intValue") = Int;
selector("integerForKey:") = Int, NSString;
selector("integerValue") = Int;
selector("internationalCurrencySymbol") = NSString;
selector("intersectSet:") = Void, NSSet;
selector("intersectsIndexesInRange:") = Bool, NSRange;
selector("intersectsSet:") = Bool, NSSet;
selector("invalidate") = Void;
selector("invert") = Void;
selector("invertedSet") = NSCharacterSet;
selector("invocation") = NSInvocation;
selector("invocationWithMethodSignature:") = NSInvocation, NSMethodSignature;
selector("invoke") = Void;
selector("invokeWithTarget:") = Void, Id;
selector("isAbsolutePath") = Bool;
selector("isAdditive") = Bool;
selector("isAtEnd") = Bool;
selector("isCancelled") = Bool;
selector("isConcurrent") = Bool;
selector("isContentDiscarded") = Bool;
selector("isCumulative") = Bool;
selector("isDaylightSavingTime") = Bool;
selector("isDaylightSavingTimeForDate:") = Bool, NSDate;
selector("isDeletableFileAtPath:") = Bool, NSString;
selector("isDirectory") = Bool;
selector("isDoubleSided") = Bool;
selector("isEqual:") = Bool, Id;
selector("isEqualToArray:") = Bool, NSArray;
selector("isEqualToAttributedString:") = Bool, NSAttributedString;
selector("isEqualToData:") = Bool, NSData;
selector("isEqualToDate:") = Bool, NSDate;
selector("isEqualToDictionary:") = Bool, NSDictionary;
selector("isEqualToIndexSet:") = Bool, NSIndexSet;
selector("isEqualToNumber:") = Bool, NSNumber;
selector("isEqualToSet:") = Bool, NSSet;
selector("isEqualToString:") = Bool, NSString;
selector("isEqualToTimeZone:") = Bool, NSTimeZone;
selector("isEqualToValue:") = Bool, NSValue;
selector("isExecutableFileAtPath:") = Bool, NSString;
selector("isExecuting") = Bool;
selector("isFileReferenceURL") = Bool;
selector("isFileURL") = Bool;
selector("isFinished") = Bool;
selector("isGeometryFlipped") = Bool;
selector("isHTTPOnly") = Bool;
selector("isHidden") = Bool;
selector("isKindOfClass:") = Bool, Id;
selector("isLenient") = Bool;
selector("isLoaded") = Bool;
selector("isMainThread") = Bool;
selector("isMemberOfClass:") = Bool, Id;
selector("isMultiThreaded") = Bool;
selector("isOneway") = Bool;
selector("isOpaque") = Bool;
selector("isPartialStringValid:newEditingString:errorDescription:") = Bool, NSString, Pointer[NSString], Pointer[NSString];
selector("isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:") = Bool, Pointer[NSString], NSRangePointer, NSString, NSRange, Pointer[NSString];
selector("isPartialStringValidationEnabled") = Bool;
selector("isPaused") = Bool;
selector("isProxy") = Bool;
selector("isReadableFileAtPath:") = Bool, NSString;
selector("isReady") = Bool;
selector("isRedoing") = Bool;
selector("isRegularFile") = Bool;
selector("isRemovedOnCompletion") = Bool;
selector("isSecure") = Bool;
selector("isSessionOnly") = Bool;
selector("isSubclassOfClass:") = Bool, Id;
selector("isSubsetOfSet:") = Bool, NSSet;
selector("isSupersetOfSet:") = Bool, NSCharacterSet;
selector("isSuspended") = Bool;
selector("isSymbolicLink") = Bool;
selector("isUndoRegistrationEnabled") = Bool;
selector("isUndoing") = Bool;
selector("isValid") = Bool;
selector("isWrapped") = Bool;
selector("isWritableFileAtPath:") = Bool, NSString;
selector("key") = NSString;
selector("keyEnumerator") = NSEnumerator;
selector("keyForFileWrapper:") = NSString, NSFileWrapper;
selector("keyPath") = NSString;
selector("keyPathsForValuesAffectingValueForKey:") = NSSet, NSString;
selector("keyTimes") = NSArray;
selector("keysOfEntriesPassingTest:") = NSSet, UnknownType;
selector("keysOfEntriesWithOptions:passingTest:") = NSSet, UInt, UnknownType;
selector("keysSortedByValueUsingComparator:") = NSArray, NSComparator;
selector("keysSortedByValueUsingSelector:") = NSArray, SelectorHandle;
selector("keysSortedByValueWithOptions:usingComparator:") = NSArray, UInt, NSComparator;
selector("knownTimeZoneNames") = NSArray;
selector("languageMap") = NSDictionary;
selector("languagesForScript:") = NSArray, NSString;
selector("lastIndex") = UInt;
selector("lastObject") = Id;
selector("lastPathComponent") = NSString;
selector("laterDate:") = NSDate, NSDate;
selector("layer") = Id;
selector("layoutIfNeeded") = Void;
selector("layoutSublayers") = Void;
selector("layoutSublayersOfLayer:") = Void, CALayer;
selector("leftExpression") = NSExpression;
selector("length") = UInt;
selector("lengthOfBytesUsingEncoding:") = UInt, UInt;
selector("letterCharacterSet") = Id;
selector("level") = UInt;
selector("levelsOfDetail") = UInt;
selector("levelsOfDetailBias") = UInt;
selector("levelsOfUndo") = UInt;
selector("limitDateForMode:") = NSDate, NSString;
selector("lineCap") = NSString;
selector("lineDashPattern") = NSArray;
selector("lineDashPhase") = Float;
selector("lineDirectionForLanguage:") = UInt, NSString;
selector("lineJoin") = NSString;
selector("lineNumber") = Int;
selector("lineRangeForRange:") = NSRange, NSRange;
selector("lineWidth") = Float;
selector("linkCheckingResultWithRange:URL:") = NSTextCheckingResult, NSRange, NSURL;
selector("linkItemAtPath:toPath:error:") = Bool, NSString, NSString, Pointer[NSError];
selector("linkItemAtURL:toURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
selector("load") = Bool;
selector("loadAndReturnError:") = Bool, Pointer[NSError];
selector("localTimeZone") = NSTimeZone;
selector("locale") = Id;
selector("localeIdentifier") = NSString;
selector("localeIdentifierFromComponents:") = NSString, NSDictionary;
selector("localeIdentifierFromWindowsLocaleCode:") = NSString, UInt;
selector("localizations") = NSArray;
selector("localizedCaseInsensitiveCompare:") = Int, NSString;
selector("localizedCompare:") = Int, NSString;
selector("localizedDescription") = NSString;
selector("localizedFailureReason") = NSString;
selector("localizedInfoDictionary") = NSDictionary;
selector("localizedName:locale:") = NSString, Int, NSLocale;
selector("localizedNameOfStringEncoding:") = NSString, UInt;
selector("localizedRecoveryOptions") = NSArray;
selector("localizedRecoverySuggestion") = NSString;
selector("localizedScannerWithString:") = Id, NSString;
selector("localizedStandardCompare:") = Int, NSString;
selector("localizedStringForKey:value:table:") = NSString, NSString, NSString, NSString;
selector("localizedStringForStatusCode:") = NSString, Int;
selector("localizedStringFromDate:dateStyle:timeStyle:") = NSString, NSDate, UInt, UInt;
selector("localizedStringFromNumber:numberStyle:") = NSString, NSNumber, UInt;
varargSelector("localizedStringWithFormat:") = Id, NSString;
selector("locations") = NSArray;
selector("lock") = Void;
selector("lockBeforeDate:") = Bool, NSDate;
selector("lockWhenCondition:") = Void, Int;
selector("lockWhenCondition:beforeDate:") = Bool, Int, NSDate;
selector("longCharacterIsMember:") = Bool, CULong;
selector("longEraSymbols") = NSArray;
selector("longLongValue") = Int64;
selector("longValue") = CLong;
selector("lossyCString") = Pointer[CChar];
selector("lowercaseLetterCharacterSet") = Id;
selector("lowercaseString") = NSString;
selector("machPort") = UInt;
selector("magnificationFilter") = NSString;
selector("main") = Void;
selector("mainBundle") = NSBundle;
selector("mainDocumentURL") = NSURL;
selector("mainQueue") = Id;
selector("mainRunLoop") = NSRunLoop;
selector("mainThread") = NSThread;
selector("makeObjectsPerformSelector:") = Void, SelectorHandle;
selector("makeObjectsPerformSelector:withObject:") = Void, SelectorHandle, Id;
selector("mask") = CALayer;
selector("masksToBounds") = Bool;
selector("matchesContentsOfURL:") = Bool, NSURL;
selector("matchesInString:options:range:") = NSArray, NSString, UInt, NSRange;
selector("maxConcurrentOperationCount") = Int;
selector("maximum") = NSNumber;
selector("maximumDecimalNumber") = NSDecimalNumber;
selector("maximumFractionDigits") = UInt;
selector("maximumIntegerDigits") = UInt;
selector("maximumLengthOfBytesUsingEncoding:") = UInt, UInt;
selector("maximumRangeOfUnit:") = NSRange, UInt;
selector("maximumSignificantDigits") = UInt;
selector("member:") = Id, Id;
selector("memoryCapacity") = UInt;
selector("methodForSelector:") = IMP, SelectorHandle;
selector("methodReturnLength") = UInt;
selector("methodReturnType") = Pointer[CChar];
selector("methodSignature") = NSMethodSignature;
selector("methodSignatureForSelector:") = NSMethodSignature, SelectorHandle;
selector("minificationFilter") = NSString;
selector("minificationFilterBias") = Float;
selector("minimum") = NSNumber;
selector("minimumDaysInFirstWeek") = UInt;
selector("minimumDecimalNumber") = NSDecimalNumber;
selector("minimumFractionDigits") = UInt;
selector("minimumIntegerDigits") = UInt;
selector("minimumRangeOfUnit:") = NSRange, UInt;
selector("minimumSignificantDigits") = UInt;
selector("minusSet:") = Void, NSSet;
selector("minusSign") = NSString;
selector("minute") = Int;
selector("miterLimit") = Float;
selector("modelLayer") = Id;
selector("month") = Int;
selector("monthSymbols") = NSArray;
selector("mountedVolumeURLsIncludingResourceValuesForKeys:options:") = NSArray, NSArray, UInt;
selector("moveItemAtPath:toPath:error:") = Bool, NSString, NSString, Pointer[NSError];
selector("moveItemAtURL:toURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
selector("multiplier") = NSNumber;
selector("mutableArrayValueForKey:") = NSMutableArray, NSString;
selector("mutableArrayValueForKeyPath:") = NSMutableArray, NSString;
selector("mutableBytes") = RawPointer;
selector("mutableCopy") = Id;
selector("mutableCopyWithZone:") = Id, Pointer[NSZone];
selector("mutableSetValueForKey:") = NSMutableSet, NSString;
selector("mutableSetValueForKeyPath:") = NSMutableSet, NSString;
selector("mutableString") = NSMutableString;
selector("name") = NSString;
selector("needsDisplay") = Bool;
selector("needsDisplayForKey:") = Bool, NSString;
selector("needsDisplayOnBoundsChange") = Bool;
selector("needsLayout") = Bool;
selector("needsToBeUpdatedFromPath:") = Bool, NSString;
selector("negativeFormat") = NSString;
selector("negativeInfinitySymbol") = NSString;
selector("negativePrefix") = NSString;
selector("negativeSuffix") = NSString;
selector("netService:didNotPublish:") = Void, NSNetService, NSDictionary;
selector("netService:didNotResolve:") = Void, NSNetService, NSDictionary;
selector("netService:didUpdateTXTRecordData:") = Void, NSNetService, NSData;
selector("netServiceBrowser:didFindDomain:moreComing:") = Void, NSNetServiceBrowser, NSString, Bool;
selector("netServiceBrowser:didFindService:moreComing:") = Void, NSNetServiceBrowser, NSNetService, Bool;
selector("netServiceBrowser:didNotSearch:") = Void, NSNetServiceBrowser, NSDictionary;
selector("netServiceBrowser:didRemoveDomain:moreComing:") = Void, NSNetServiceBrowser, NSString, Bool;
selector("netServiceBrowser:didRemoveService:moreComing:") = Void, NSNetServiceBrowser, NSNetService, Bool;
selector("netServiceBrowserDidStopSearch:") = Void, NSNetServiceBrowser;
selector("netServiceBrowserWillSearch:") = Void, NSNetServiceBrowser;
selector("netServiceDidPublish:") = Void, NSNetService;
selector("netServiceDidResolveAddress:") = Void, NSNetService;
selector("netServiceDidStop:") = Void, NSNetService;
selector("netServiceWillPublish:") = Void, NSNetService;
selector("netServiceWillResolve:") = Void, NSNetService;
selector("networkServiceType") = UInt;
selector("new") = Id;
selector("newlineCharacterSet") = Id;
selector("nextDaylightSavingTimeTransition") = NSDate;
selector("nextDaylightSavingTimeTransitionAfterDate:") = NSDate, NSDate;
selector("nextObject") = Id;
selector("nilSymbol") = NSString;
selector("nonBaseCharacterSet") = Id;
selector("nonretainedObjectValue") = Id;
selector("notANumber") = NSDecimalNumber;
selector("notANumberSymbol") = NSString;
selector("notPredicateWithSubpredicate:") = NSPredicate, NSPredicate;
selector("notificationWithName:object:") = Id, NSString, Id;
selector("notificationWithName:object:userInfo:") = Id, NSString, Id, NSDictionary;
selector("null") = NSNull;
selector("numberFromString:") = NSNumber, NSString;
selector("numberOfArguments") = UInt;
selector("numberOfCaptureGroups") = UInt;
selector("numberOfMatchesInString:options:range:") = UInt, NSString, UInt, NSRange;
selector("numberOfRanges") = UInt;
selector("numberStyle") = UInt;
selector("numberWithBool:") = NSNumber, Bool;
selector("numberWithChar:") = NSNumber, CChar;
selector("numberWithDouble:") = NSNumber, Double;
selector("numberWithFloat:") = NSNumber, Float;
selector("numberWithInt:") = NSNumber, Int;
selector("numberWithInteger:") = NSNumber, Int;
selector("numberWithLong:") = NSNumber, CLong;
selector("numberWithLongLong:") = NSNumber, Int64;
selector("numberWithShort:") = NSNumber, Short;
selector("numberWithUnsignedChar:") = NSNumber, CUChar;
selector("numberWithUnsignedInt:") = NSNumber, UInt;
selector("numberWithUnsignedInteger:") = NSNumber, UInt;
selector("numberWithUnsignedLong:") = NSNumber, CULong;
selector("numberWithUnsignedLongLong:") = NSNumber, UInt64;
selector("numberWithUnsignedShort:") = NSNumber, UShort;
selector("objCType") = Pointer[CChar];
selector("object") = Id;
selector("objectAtIndex:") = Id, UInt;
selector("objectEnumerator") = NSEnumerator;
selector("objectForInfoDictionaryKey:") = Id, NSString;
selector("objectForKey:") = Id, Id;
selector("objectIsForcedForKey:") = Bool, NSString;
selector("objectIsForcedForKey:inDomain:") = Bool, NSString, NSString;
selector("objectZone") = Pointer[NSZone];
selector("objectsAtIndexes:") = NSArray, NSIndexSet;
selector("objectsForKeys:notFoundMarker:") = NSArray, NSArray, Id;
selector("objectsPassingTest:") = NSSet, UnknownType;
selector("objectsWithOptions:passingTest:") = NSSet, UInt, UnknownType;
selector("observationInfo") = RawPointer;
selector("observeValueForKeyPath:ofObject:change:context:") = Void, NSString, Id, NSDictionary, RawPointer;
selector("offsetInFile") = UInt64;
selector("one") = NSDecimalNumber;
selector("opacity") = Float;
selector("open") = Void;
selector("operand") = NSExpression;
selector("operatingSystem") = UInt;
selector("operatingSystemName") = NSString;
selector("operatingSystemVersionString") = NSString;
selector("operationCount") = UInt;
selector("operations") = NSArray;
selector("options") = UInt;
selector("orPredicateWithSubpredicates:") = NSPredicate, NSArray;
selector("ordinalityOfUnit:inUnit:forDate:") = UInt, UInt, UInt, NSDate;
selector("orthography") = NSOrthography;
selector("orthographyCheckingResultWithRange:orthography:") = NSTextCheckingResult, NSRange, NSOrthography;
selector("orthographyWithDominantScript:languageMap:") = Id, NSString, NSDictionary;
selector("outputFormat") = UInt;
selector("outputStreamToBuffer:capacity:") = Id, Pointer[CUChar], UInt;
selector("outputStreamToFileAtPath:append:") = Id, NSString, Bool;
selector("outputStreamToMemory") = Id;
selector("outputStreamWithURL:append:") = Id, NSURL, Bool;
selector("paddingCharacter") = NSString;
selector("paddingPosition") = UInt;
selector("paragraphRangeForRange:") = NSRange, NSRange;
selector("parameterString") = NSString;
selector("parse") = Bool;
selector("parser:didEndElement:namespaceURI:qualifiedName:") = Void, NSXMLParser, NSString, NSString, NSString;
selector("parser:didEndMappingPrefix:") = Void, NSXMLParser, NSString;
selector("parser:didStartElement:namespaceURI:qualifiedName:attributes:") = Void, NSXMLParser, NSString, NSString, NSString, NSDictionary;
selector("parser:didStartMappingPrefix:toURI:") = Void, NSXMLParser, NSString, NSString;
selector("parser:foundAttributeDeclarationWithName:forElement:type:defaultValue:") = Void, NSXMLParser, NSString, NSString, NSString, NSString;
selector("parser:foundCDATA:") = Void, NSXMLParser, NSData;
selector("parser:foundCharacters:") = Void, NSXMLParser, NSString;
selector("parser:foundComment:") = Void, NSXMLParser, NSString;
selector("parser:foundElementDeclarationWithName:model:") = Void, NSXMLParser, NSString, NSString;
selector("parser:foundExternalEntityDeclarationWithName:publicID:systemID:") = Void, NSXMLParser, NSString, NSString, NSString;
selector("parser:foundIgnorableWhitespace:") = Void, NSXMLParser, NSString;
selector("parser:foundInternalEntityDeclarationWithName:value:") = Void, NSXMLParser, NSString, NSString;
selector("parser:foundNotationDeclarationWithName:publicID:systemID:") = Void, NSXMLParser, NSString, NSString, NSString;
selector("parser:foundProcessingInstructionWithTarget:data:") = Void, NSXMLParser, NSString, NSString;
selector("parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:") = Void, NSXMLParser, NSString, NSString, NSString, NSString;
selector("parser:parseErrorOccurred:") = Void, NSXMLParser, NSError;
selector("parser:resolveExternalEntityName:systemID:") = NSData, NSXMLParser, NSString, NSString;
selector("parser:validationErrorOccurred:") = Void, NSXMLParser, NSError;
selector("parserDidEndDocument:") = Void, NSXMLParser;
selector("parserDidStartDocument:") = Void, NSXMLParser;
selector("parserError") = NSError;
selector("password") = NSString;
selector("path") = NSString;
selector("pathComponents") = NSArray;
selector("pathContentOfSymbolicLinkAtPath:") = NSString, NSString;
selector("pathExtension") = NSString;
selector("pathForAuxiliaryExecutable:") = NSString, NSString;
selector("pathForResource:ofType:") = NSString, NSString, NSString;
selector("pathForResource:ofType:inDirectory:") = NSString, NSString, NSString, NSString;
selector("pathForResource:ofType:inDirectory:forLocalization:") = NSString, NSString, NSString, NSString, NSString;
selector("pathWithComponents:") = NSString, NSArray;
selector("pathsForResourcesOfType:inDirectory:") = NSArray, NSString, NSString;
selector("pathsForResourcesOfType:inDirectory:forLocalization:") = NSArray, NSString, NSString, NSString;
selector("pathsMatchingExtensions:") = NSArray, NSArray;
selector("pattern") = NSString;
selector("perMillSymbol") = NSString;
selector("percentSymbol") = NSString;
selector("performSelector:") = Id, SelectorHandle;
selector("performSelector:onThread:withObject:waitUntilDone:") = Void, SelectorHandle, NSThread, Id, Bool;
selector("performSelector:onThread:withObject:waitUntilDone:modes:") = Void, SelectorHandle, NSThread, Id, Bool, NSArray;
selector("performSelector:target:argument:order:modes:") = Void, SelectorHandle, Id, Id, UInt, NSArray;
selector("performSelector:withObject:") = Id, SelectorHandle, Id;
selector("performSelector:withObject:afterDelay:") = Void, SelectorHandle, Id, Double;
selector("performSelector:withObject:afterDelay:inModes:") = Void, SelectorHandle, Id, Double, NSArray;
selector("performSelector:withObject:withObject:") = Id, SelectorHandle, Id, Id;
selector("performSelectorInBackground:withObject:") = Void, SelectorHandle, Id;
selector("performSelectorOnMainThread:withObject:waitUntilDone:") = Void, SelectorHandle, Id, Bool;
selector("performSelectorOnMainThread:withObject:waitUntilDone:modes:") = Void, SelectorHandle, Id, Bool, NSArray;
selector("persistence") = UInt;
selector("persistentDomainForName:") = NSDictionary, NSString;
selector("persistentDomainNames") = NSArray;
selector("phoneNumber") = NSString;
selector("phoneNumberCheckingResultWithRange:phoneNumber:") = NSTextCheckingResult, NSRange, NSString;
selector("physicalMemory") = UInt64;
selector("pipe") = Id;
selector("plusSign") = NSString;
selector("pointerValue") = RawPointer;
selector("port") = Id;
selector("portList") = NSArray;
selector("portWithMachPort:") = NSPort, UInt;
selector("portWithMachPort:options:") = NSPort, UInt, UInt;
selector("position") = CGPoint;
selector("positiveFormat") = NSString;
selector("positiveInfinitySymbol") = NSString;
selector("positivePrefix") = NSString;
selector("positiveSuffix") = NSString;
selector("postNotification:") = Void, NSNotification;
selector("postNotificationName:object:") = Void, NSString, Id;
selector("postNotificationName:object:userInfo:") = Void, NSString, Id, NSDictionary;
selector("precomposedStringWithCanonicalMapping") = NSString;
selector("precomposedStringWithCompatibilityMapping") = NSString;
selector("predicate") = NSPredicate;
selector("predicateFormat") = NSString;
selector("predicateOperatorType") = UInt;
selector("predicateWithBlock:") = NSPredicate, UnknownType;
varargSelector("predicateWithFormat:") = NSPredicate, NSString;
selector("predicateWithFormat:argumentArray:") = NSPredicate, NSString, NSArray;
selector("predicateWithFormat:arguments:") = NSPredicate, NSString, va_list;
selector("predicateWithLeftExpression:rightExpression:customSelector:") = NSPredicate, NSExpression, NSExpression, SelectorHandle;
selector("predicateWithLeftExpression:rightExpression:modifier:type:options:") = NSPredicate, NSExpression, NSExpression, UInt, UInt, UInt;
selector("predicateWithSubstitutionVariables:") = NSPredicate, NSDictionary;
selector("predicateWithValue:") = NSPredicate, Bool;
selector("preferredFilename") = NSString;
selector("preferredFrameSize") = CGSize;
selector("preferredLanguages") = NSArray;
selector("preferredLocalizations") = NSArray;
selector("preferredLocalizationsFromArray:") = NSArray, NSArray;
selector("preferredLocalizationsFromArray:forPreferences:") = NSArray, NSArray, NSArray;
selector("preflightAndReturnError:") = Bool, Pointer[NSError];
selector("prepareWithInvocationTarget:") = Id, Id;
selector("presentRenderbuffer:") = Bool, UInt;
selector("presentationLayer") = Id;
selector("preservesDepth") = Bool;
selector("previousFailureCount") = Int;
selector("principalClass") = Id;
selector("privateFrameworksPath") = NSString;
selector("privateFrameworksURL") = NSURL;
selector("processIdentifier") = Int;
selector("processInfo") = NSProcessInfo;
selector("processName") = NSString;
selector("processorCount") = UInt;
selector("properties") = NSDictionary;
selector("propertyForKey:") = Id, NSString;
selector("propertyForKey:inRequest:") = Id, NSString, NSURLRequest;
selector("propertyList") = Id;
selector("propertyList:isValidForFormat:") = Bool, Id, UInt;
selector("propertyListFromData:mutabilityOption:format:errorDescription:") = Id, NSData, UInt, Pointer[UInt], Pointer[NSString];
selector("propertyListFromStringsFileFormat") = NSDictionary;
selector("propertyListWithData:options:format:error:") = Id, NSData, UInt, Pointer[UInt], Pointer[NSError];
selector("propertyListWithStream:options:format:error:") = Id, NSInputStream, UInt, Pointer[UInt], Pointer[NSError];
selector("proposedCredential") = NSURLCredential;
selector("protectionSpace") = NSURLProtectionSpace;
selector("protocol") = NSString;
selector("proxyType") = NSString;
selector("publicID") = NSString;
selector("publish") = Void;
selector("publishWithOptions:") = Void, UInt;
selector("punctuationCharacterSet") = Id;
selector("quarter") = Int;
selector("quarterSymbols") = NSArray;
selector("query") = NSString;
selector("queuePriority") = Int;
selector("quoteCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
selector("raise") = Void;
varargSelector("raise:format:") = Void, NSString, NSString;
selector("raise:format:arguments:") = Void, NSString, NSString, va_list;
selector("range") = NSRange;
selector("rangeAtIndex:") = NSRange, UInt;
selector("rangeOfCharacterFromSet:") = NSRange, NSCharacterSet;
selector("rangeOfCharacterFromSet:options:") = NSRange, NSCharacterSet, UInt;
selector("rangeOfCharacterFromSet:options:range:") = NSRange, NSCharacterSet, UInt, NSRange;
selector("rangeOfComposedCharacterSequenceAtIndex:") = NSRange, UInt;
selector("rangeOfComposedCharacterSequencesForRange:") = NSRange, NSRange;
selector("rangeOfData:options:range:") = NSRange, NSData, UInt, NSRange;
selector("rangeOfFirstMatchInString:options:range:") = NSRange, NSString, UInt, NSRange;
selector("rangeOfString:") = NSRange, NSString;
selector("rangeOfString:options:") = NSRange, NSString, UInt;
selector("rangeOfString:options:range:") = NSRange, NSString, UInt, NSRange;
selector("rangeOfString:options:range:locale:") = NSRange, NSString, UInt, NSRange, NSLocale;
selector("rangeOfUnit:inUnit:forDate:") = NSRange, UInt, UInt, NSDate;
selector("rangeOfUnit:startDate:interval:forDate:") = Bool, UInt, Pointer[NSDate], Pointer[Double], NSDate;
selector("rangeValue") = NSRange;
selector("rasterizationScale") = Float;
selector("read:maxLength:") = Int, Pointer[CUChar], UInt;
selector("readDataOfLength:") = NSData, UInt;
selector("readDataToEndOfFile") = NSData;
selector("readFromURL:options:error:") = Bool, NSURL, UInt, Pointer[NSError];
selector("readInBackgroundAndNotify") = Void;
selector("readInBackgroundAndNotifyForModes:") = Void, NSArray;
selector("readToEndOfFileInBackgroundAndNotify") = Void;
selector("readToEndOfFileInBackgroundAndNotifyForModes:") = Void, NSArray;
selector("realm") = NSString;
selector("reason") = NSString;
selector("receivesCredentialSecurely") = Bool;
selector("recoveryAttempter") = Id;
selector("redo") = Void;
selector("redoActionName") = NSString;
selector("redoMenuItemTitle") = NSString;
selector("redoMenuTitleForUndoActionName:") = NSString, NSString;
selector("registerClass:") = Bool, Id;
selector("registerDefaults:") = Void, NSDictionary;
selector("registerUndoWithTarget:selector:object:") = Void, Id, SelectorHandle, Id;
selector("regularExpression") = NSRegularExpression;
selector("regularExpressionCheckingResultWithRanges:count:regularExpression:") = NSTextCheckingResult, NSRangePointer, UInt, NSRegularExpression;
selector("regularExpressionWithPattern:options:error:") = NSRegularExpression, NSString, UInt, Pointer[NSError];
selector("regularFileContents") = NSData;
selector("relativePath") = NSString;
selector("relativeString") = NSString;
selector("release") = Void;
selector("removeAllActions") = Void;
selector("removeAllActionsWithTarget:") = Void, Id;
selector("removeAllAnimations") = Void;
selector("removeAllCachedResponses") = Void;
selector("removeAllIndexes") = Void;
selector("removeAllObjects") = Void;
selector("removeAnimationForKey:") = Void, NSString;
selector("removeAttribute:range:") = Void, NSString, NSRange;
selector("removeCachedResponseForRequest:") = Void, NSURLRequest;
selector("removeCharactersInRange:") = Void, NSRange;
selector("removeCharactersInString:") = Void, NSString;
selector("removeCredential:forProtectionSpace:") = Void, NSURLCredential, NSURLProtectionSpace;
selector("removeDependency:") = Void, NSOperation;
selector("removeFileWrapper:") = Void, NSFileWrapper;
selector("removeFromRunLoop:forMode:") = Void, NSRunLoop, NSString;
selector("removeFromSuperlayer") = Void;
selector("removeIndex:") = Void, UInt;
selector("removeIndexes:") = Void, NSIndexSet;
selector("removeIndexesInRange:") = Void, NSRange;
selector("removeItemAtPath:error:") = Bool, NSString, Pointer[NSError];
selector("removeItemAtURL:error:") = Bool, NSURL, Pointer[NSError];
selector("removeLastObject") = Void;
selector("removeObject:") = Void, Id;
selector("removeObject:inRange:") = Void, Id, NSRange;
selector("removeObjectAtIndex:") = Void, UInt;
selector("removeObjectForKey:") = Void, Id;
selector("removeObjectIdenticalTo:") = Void, Id;
selector("removeObjectIdenticalTo:inRange:") = Void, Id, NSRange;
selector("removeObjectsAtIndexes:") = Void, NSIndexSet;
selector("removeObjectsForKeys:") = Void, NSArray;
selector("removeObjectsFromIndices:numIndices:") = Void, Pointer[UInt], UInt;
selector("removeObjectsInArray:") = Void, NSArray;
selector("removeObjectsInRange:") = Void, NSRange;
selector("removeObserver:") = Void, Id;
selector("removeObserver:forKeyPath:") = Void, NSObject, NSString;
selector("removeObserver:fromObjectsAtIndexes:forKeyPath:") = Void, NSObject, NSIndexSet, NSString;
selector("removeObserver:name:object:") = Void, Id, NSString, Id;
selector("removePersistentDomainForName:") = Void, NSString;
selector("removePort:forMode:") = Void, NSPort, NSString;
selector("removePropertyForKey:inRequest:") = Void, NSString, NSMutableURLRequest;
selector("removeSuiteNamed:") = Void, NSString;
selector("removeVolatileDomainForName:") = Void, NSString;
selector("renderInContext:") = Void, CGContextRef;
selector("renderbufferStorage:fromDrawable:") = Bool, UInt, Id;
selector("repeatCount") = Float;
selector("repeatDuration") = Double;
selector("replaceBytesInRange:withBytes:") = Void, NSRange, RawPointer;
selector("replaceBytesInRange:withBytes:length:") = Void, NSRange, RawPointer, UInt;
selector("replaceCharactersInRange:withAttributedString:") = Void, NSRange, NSAttributedString;
selector("replaceCharactersInRange:withString:") = Void, NSRange, NSString;
selector("replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:") = Bool, NSURL, NSURL, NSString, UInt, Pointer[NSURL], Pointer[NSError];
selector("replaceMatchesInString:options:range:withTemplate:") = UInt, NSMutableString, UInt, NSRange, NSString;
selector("replaceObjectAtIndex:withObject:") = Void, UInt, Id;
selector("replaceObjectsAtIndexes:withObjects:") = Void, NSIndexSet, NSArray;
selector("replaceObjectsInRange:withObjectsFromArray:") = Void, NSRange, NSArray;
selector("replaceObjectsInRange:withObjectsFromArray:range:") = Void, NSRange, NSArray, NSRange;
selector("replaceOccurrencesOfString:withString:options:range:") = UInt, NSString, NSString, UInt, NSRange;
selector("replaceSublayer:with:") = Void, CALayer, CALayer;
selector("replacementCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
selector("replacementObjectForCoder:") = Id, NSCoder;
selector("replacementObjectForKeyedArchiver:") = Id, NSKeyedArchiver;
selector("replacementString") = NSString;
selector("replacementStringForResult:inString:offset:template:") = NSString, NSTextCheckingResult, NSString, Int, NSString;
selector("request") = NSURLRequest;
selector("requestHeaderFieldsWithCookies:") = NSDictionary, NSArray;
selector("requestIsCacheEquivalent:toRequest:") = Bool, NSURLRequest, NSURLRequest;
selector("requestWithURL:") = Id, NSURL;
selector("requestWithURL:cachePolicy:timeoutInterval:") = Id, NSURL, UInt, Double;
selector("reservedSpaceLength") = UInt;
selector("resetBytesInRange:") = Void, NSRange;
selector("resetStandardUserDefaults") = Void;
selector("resetSystemTimeZone") = Void;
selector("resolve") = Void;
selector("resolveClassMethod:") = Bool, SelectorHandle;
selector("resolveInstanceMethod:") = Bool, SelectorHandle;
selector("resolveWithTimeout:") = Void, Double;
selector("resourcePath") = NSString;
selector("resourceSpecifier") = NSString;
selector("resourceURL") = NSURL;
selector("resourceValuesForKeys:error:") = NSDictionary, NSArray, Pointer[NSError];
selector("resourceValuesForKeys:fromBookmarkData:") = NSDictionary, NSArray, NSData;
selector("respondsToSelector:") = Bool, SelectorHandle;
selector("response") = NSURLResponse;
selector("result") = Id;
selector("resultType") = UInt64;
selector("retain") = Id;
selector("retainArguments") = Void;
selector("retainCount") = UInt;
selector("reverseObjectEnumerator") = NSEnumerator;
selector("reverseTransformedValue:") = Id, Id;
selector("reversedSortDescriptor") = Id;
selector("rightExpression") = NSExpression;
selector("rotationMode") = NSString;
selector("roundingIncrement") = NSNumber;
selector("roundingMode") = UInt;
selector("run") = Void;
selector("runActionForKey:object:arguments:") = Void, NSString, Id, NSDictionary;
selector("runLoopModes") = NSArray;
selector("runMode:beforeDate:") = Bool, NSString, NSDate;
selector("runUntilDate:") = Void, NSDate;
selector("scale") = Short;
selector("scanCharactersFromSet:intoString:") = Bool, NSCharacterSet, Pointer[NSString];
selector("scanDecimal:") = Bool, Pointer[NSDecimal];
selector("scanDouble:") = Bool, Pointer[Double];
selector("scanFloat:") = Bool, Pointer[Float];
selector("scanHexDouble:") = Bool, Pointer[Double];
selector("scanHexFloat:") = Bool, Pointer[Float];
selector("scanHexInt:") = Bool, Pointer[UInt];
selector("scanHexLongLong:") = Bool, Pointer[UInt64];
selector("scanInt:") = Bool, Pointer[Int];
selector("scanInteger:") = Bool, Pointer[Int];
selector("scanLocation") = UInt;
selector("scanLongLong:") = Bool, Pointer[Int64];
selector("scanString:intoString:") = Bool, NSString, Pointer[NSString];
selector("scanUpToCharactersFromSet:intoString:") = Bool, NSCharacterSet, Pointer[NSString];
selector("scanUpToString:intoString:") = Bool, NSString, Pointer[NSString];
selector("scannerWithString:") = Id, NSString;
selector("scheduleInRunLoop:forMode:") = Void, NSRunLoop, NSString;
selector("scheduledTimerWithTimeInterval:invocation:repeats:") = NSTimer, Double, NSInvocation, Bool;
selector("scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:") = NSTimer, Double, Id, SelectorHandle, Id, Bool;
selector("scheme") = NSString;
selector("scrollMode") = NSString;
selector("scrollPoint:") = Void, CGPoint;
selector("scrollRectToVisible:") = Void, CGRect;
selector("scrollToPoint:") = Void, CGPoint;
selector("scrollToRect:") = Void, CGRect;
selector("searchForBrowsableDomains") = Void;
selector("searchForRegistrationDomains") = Void;
selector("searchForServicesOfType:inDomain:") = Void, NSString, NSString;
selector("second") = Int;
selector("secondaryGroupingSize") = UInt;
selector("secondsFromGMT") = Int;
selector("secondsFromGMTForDate:") = Int, NSDate;
selector("seekToEndOfFile") = UInt64;
selector("seekToFileOffset:") = Void, UInt64;
selector("selector") = SelectorHandle;
selector("self") = Id;
selector("sendBeforeDate:components:from:reserved:") = Bool, NSDate, NSMutableArray, NSPort, UInt;
selector("sendBeforeDate:msgid:components:from:reserved:") = Bool, NSDate, UInt, NSMutableArray, NSPort, UInt;
selector("sendSynchronousRequest:returningResponse:error:") = NSData, NSURLRequest, Pointer[NSURLResponse], Pointer[NSError];
selector("sender") = Id;
selector("serializedRepresentation") = NSData;
selector("serverTrust") = SecTrustRef;
selector("set") = Id;
selector("setAMSymbol:") = Void, NSString;
selector("setAbbreviationDictionary:") = Void, NSDictionary;
selector("setActionName:") = Void, NSString;
selector("setActions:") = Void, NSDictionary;
selector("setAdditive:") = Void, Bool;
selector("setAffineTransform:") = Void, CGAffineTransform;
selector("setAlignmentMode:") = Void, NSString;
selector("setAllHTTPHeaderFields:") = Void, NSDictionary;
selector("setAllowsFloats:") = Void, Bool;
selector("setAlwaysShowsDecimalSeparator:") = Void, Bool;
selector("setAnchorPoint:") = Void, CGPoint;
selector("setAnchorPointZ:") = Void, Float;
selector("setAnimationDuration:") = Void, Double;
selector("setAnimationTimingFunction:") = Void, CAMediaTimingFunction;
selector("setAnimations:") = Void, NSArray;
selector("setArgument:atIndex:") = Void, RawPointer, Int;
selector("setArray:") = Void, NSArray;
selector("setAttributedString:") = Void, NSAttributedString;
selector("setAttributes:ofItemAtPath:error:") = Bool, NSDictionary, NSString, Pointer[NSError];
selector("setAttributes:range:") = Void, NSDictionary, NSRange;
selector("setAutoreverses:") = Void, Bool;
selector("setBackgroundColor:") = Void, CGColorRef;
selector("setBackgroundFilters:") = Void, NSArray;
selector("setBeginTime:") = Void, Double;
selector("setBiasValues:") = Void, NSArray;
selector("setBool:forKey:") = Void, Bool, NSString;
selector("setBorderColor:") = Void, CGColorRef;
selector("setBorderWidth:") = Void, Float;
selector("setBounds:") = Void, CGRect;
selector("setByAddingObject:") = NSSet, Id;
selector("setByAddingObjectsFromArray:") = NSSet, NSArray;
selector("setByAddingObjectsFromSet:") = NSSet, NSSet;
selector("setByValue:") = Void, Id;
selector("setCachePolicy:") = Void, UInt;
selector("setCalculationMode:") = Void, NSString;
selector("setCalendar:") = Void, NSCalendar;
selector("setCaseSensitive:") = Void, Bool;
selector("setCharactersToBeSkipped:") = Void, NSCharacterSet;
selector("setClass:forClassName:") = Void, Id, NSString;
selector("setClassName:forClass:") = Void, NSString, Id;
selector("setColors:") = Void, NSArray;
selector("setCompletionBlock:") = Void, UnknownType;
selector("setCompositingFilter:") = Void, Id;
selector("setContents:") = Void, Id;
selector("setContentsCenter:") = Void, CGRect;
selector("setContentsGravity:") = Void, NSString;
selector("setContentsRect:") = Void, CGRect;
selector("setContentsScale:") = Void, Float;
selector("setContinuityValues:") = Void, NSArray;
selector("setCookie:") = Void, NSHTTPCookie;
selector("setCookieAcceptPolicy:") = Void, UInt;
selector("setCookies:forURL:mainDocumentURL:") = Void, NSArray, NSURL, NSURL;
selector("setCornerRadius:") = Void, Float;
selector("setCountLimit:") = Void, UInt;
selector("setCredential:forProtectionSpace:") = Void, NSURLCredential, NSURLProtectionSpace;
selector("setCumulative:") = Void, Bool;
selector("setCurrencyCode:") = Void, NSString;
selector("setCurrencyDecimalSeparator:") = Void, NSString;
selector("setCurrencyGroupingSeparator:") = Void, NSString;
selector("setCurrencySymbol:") = Void, NSString;
selector("setCurrentContext:") = Bool, EAGLContext;
selector("setData:") = Void, NSData;
selector("setDateFormat:") = Void, NSString;
selector("setDateStyle:") = Void, UInt;
selector("setDay:") = Void, Int;
selector("setDecimalSeparator:") = Void, NSString;
selector("setDefaultBehavior:") = Void, Id;
selector("setDefaultCredential:forProtectionSpace:") = Void, NSURLCredential, NSURLProtectionSpace;
selector("setDefaultDate:") = Void, NSDate;
selector("setDefaultFormatterBehavior:") = Void, UInt;
selector("setDefaultTimeZone:") = Void, NSTimeZone;
selector("setDelegate:") = Void, Id;
selector("setDictionary:") = Void, NSDictionary;
selector("setDisableActions:") = Void, Bool;
selector("setDiskCapacity:") = Void, UInt;
selector("setDoesRelativeDateFormatting:") = Void, Bool;
selector("setDouble:forKey:") = Void, Double, NSString;
selector("setDoubleSided:") = Void, Bool;
selector("setDrawableProperties:") = Void, NSDictionary;
selector("setDuration:") = Void, Double;
selector("setEdgeAntialiasingMask:") = Void, UInt;
selector("setEndPoint:") = Void, CGPoint;
selector("setEndProgress:") = Void, Float;
selector("setEra:") = Void, Int;
selector("setEraSymbols:") = Void, NSArray;
selector("setEvictsObjectsWithDiscardedContent:") = Void, Bool;
selector("setExponentSymbol:") = Void, NSString;
selector("setFileAttributes:") = Void, NSDictionary;
selector("setFilename:") = Void, NSString;
selector("setFillColor:") = Void, CGColorRef;
selector("setFillMode:") = Void, NSString;
selector("setFillRule:") = Void, NSString;
selector("setFilter:") = Void, Id;
selector("setFilters:") = Void, NSArray;
selector("setFireDate:") = Void, NSDate;
selector("setFirstWeekday:") = Void, UInt;
selector("setFloat:forKey:") = Void, Float, NSString;
selector("setFont:") = Void, CFTypeRef;
selector("setFontSize:") = Void, Float;
selector("setForegroundColor:") = Void, CGColorRef;
selector("setFormatWidth:") = Void, UInt;
selector("setFormatterBehavior:") = Void, UInt;
selector("setFrame:") = Void, CGRect;
selector("setFrameInterval:") = Void, Int;
selector("setFromValue:") = Void, Id;
selector("setGeneratesCalendarDates:") = Void, Bool;
selector("setGeneratesDecimalNumbers:") = Void, Bool;
selector("setGeometryFlipped:") = Void, Bool;
selector("setGregorianStartDate:") = Void, NSDate;
selector("setGroupingSeparator:") = Void, NSString;
selector("setGroupingSize:") = Void, UInt;
selector("setGroupsByEvent:") = Void, Bool;
selector("setHTTPBody:") = Void, NSData;
selector("setHTTPBodyStream:") = Void, NSInputStream;
selector("setHTTPMethod:") = Void, NSString;
selector("setHTTPShouldHandleCookies:") = Void, Bool;
selector("setHTTPShouldUsePipelining:") = Void, Bool;
selector("setHidden:") = Void, Bool;
selector("setHour:") = Void, Int;
selector("setInstanceAlphaOffset:") = Void, Float;
selector("setInstanceBlueOffset:") = Void, Float;
selector("setInstanceColor:") = Void, CGColorRef;
selector("setInstanceCount:") = Void, Int;
selector("setInstanceDelay:") = Void, Double;
selector("setInstanceGreenOffset:") = Void, Float;
selector("setInstanceRedOffset:") = Void, Float;
selector("setInstanceTransform:") = Void, CATransform3D;
selector("setInteger:forKey:") = Void, Int, NSString;
selector("setInternationalCurrencySymbol:") = Void, NSString;
selector("setKeyPath:") = Void, NSString;
selector("setKeyTimes:") = Void, NSArray;
selector("setLength:") = Void, UInt;
selector("setLenient:") = Void, Bool;
selector("setLevelsOfDetail:") = Void, UInt;
selector("setLevelsOfDetailBias:") = Void, UInt;
selector("setLevelsOfUndo:") = Void, UInt;
selector("setLineCap:") = Void, NSString;
selector("setLineDashPattern:") = Void, NSArray;
selector("setLineDashPhase:") = Void, Float;
selector("setLineJoin:") = Void, NSString;
selector("setLineWidth:") = Void, Float;
selector("setLocale:") = Void, NSLocale;
selector("setLocations:") = Void, NSArray;
selector("setLongEraSymbols:") = Void, NSArray;
selector("setMagnificationFilter:") = Void, NSString;
selector("setMainDocumentURL:") = Void, NSURL;
selector("setMask:") = Void, CALayer;
selector("setMasksToBounds:") = Void, Bool;
selector("setMaxConcurrentOperationCount:") = Void, Int;
selector("setMaximum:") = Void, NSNumber;
selector("setMaximumFractionDigits:") = Void, UInt;
selector("setMaximumIntegerDigits:") = Void, UInt;
selector("setMaximumSignificantDigits:") = Void, UInt;
selector("setMemoryCapacity:") = Void, UInt;
selector("setMinificationFilter:") = Void, NSString;
selector("setMinificationFilterBias:") = Void, Float;
selector("setMinimum:") = Void, NSNumber;
selector("setMinimumDaysInFirstWeek:") = Void, UInt;
selector("setMinimumFractionDigits:") = Void, UInt;
selector("setMinimumIntegerDigits:") = Void, UInt;
selector("setMinimumSignificantDigits:") = Void, UInt;
selector("setMinusSign:") = Void, NSString;
selector("setMinute:") = Void, Int;
selector("setMiterLimit:") = Void, Float;
selector("setMonth:") = Void, Int;
selector("setMonthSymbols:") = Void, NSArray;
selector("setMultiplier:") = Void, NSNumber;
selector("setName:") = Void, NSString;
selector("setNeedsDisplay") = Void;
selector("setNeedsDisplayInRect:") = Void, CGRect;
selector("setNeedsDisplayOnBoundsChange:") = Void, Bool;
selector("setNeedsLayout") = Void;
selector("setNegativeFormat:") = Void, NSString;
selector("setNegativeInfinitySymbol:") = Void, NSString;
selector("setNegativePrefix:") = Void, NSString;
selector("setNegativeSuffix:") = Void, NSString;
selector("setNetworkServiceType:") = Void, UInt;
selector("setNilSymbol:") = Void, NSString;
selector("setNilValueForKey:") = Void, NSString;
selector("setNotANumberSymbol:") = Void, NSString;
selector("setNumberStyle:") = Void, UInt;
selector("setObject:forKey:") = Void, Id, Id;
selector("setObject:forKey:cost:") = Void, Id, Id, UInt;
selector("setObjectZone:") = Void, Pointer[NSZone];
selector("setObservationInfo:") = Void, RawPointer;
selector("setOpacity:") = Void, Float;
selector("setOpaque:") = Void, Bool;
selector("setOutputFormat:") = Void, UInt;
selector("setPMSymbol:") = Void, NSString;
selector("setPaddingCharacter:") = Void, NSString;
selector("setPaddingPosition:") = Void, UInt;
selector("setPartialStringValidationEnabled:") = Void, Bool;
selector("setPath:") = Void, CGPathRef;
selector("setPaused:") = Void, Bool;
selector("setPerMillSymbol:") = Void, NSString;
selector("setPercentSymbol:") = Void, NSString;
selector("setPersistentDomain:forName:") = Void, NSDictionary, NSString;
selector("setPlusSign:") = Void, NSString;
selector("setPosition:") = Void, CGPoint;
selector("setPositiveFormat:") = Void, NSString;
selector("setPositiveInfinitySymbol:") = Void, NSString;
selector("setPositivePrefix:") = Void, NSString;
selector("setPositiveSuffix:") = Void, NSString;
selector("setPreferredFilename:") = Void, NSString;
selector("setPreservesDepth:") = Void, Bool;
selector("setProcessName:") = Void, NSString;
selector("setProperty:forKey:") = Bool, Id, NSString;
selector("setProperty:forKey:inRequest:") = Void, Id, NSString, NSMutableURLRequest;
selector("setQuarter:") = Void, Int;
selector("setQuarterSymbols:") = Void, NSArray;
selector("setQueuePriority:") = Void, Int;
selector("setRasterizationScale:") = Void, Float;
selector("setRemovedOnCompletion:") = Void, Bool;
selector("setRepeatCount:") = Void, Float;
selector("setRepeatDuration:") = Void, Double;
selector("setResourceValue:forKey:error:") = Bool, Id, NSString, Pointer[NSError];
selector("setResourceValues:error:") = Bool, NSDictionary, Pointer[NSError];
selector("setReturnValue:") = Void, RawPointer;
selector("setRotationMode:") = Void, NSString;
selector("setRoundingIncrement:") = Void, NSNumber;
selector("setRoundingMode:") = Void, UInt;
selector("setRunLoopModes:") = Void, NSArray;
selector("setScanLocation:") = Void, UInt;
selector("setScrollMode:") = Void, NSString;
selector("setSecond:") = Void, Int;
selector("setSecondaryGroupingSize:") = Void, UInt;
selector("setSelector:") = Void, SelectorHandle;
selector("setSet:") = Void, NSSet;
selector("setShadowColor:") = Void, CGColorRef;
selector("setShadowOffset:") = Void, CGSize;
selector("setShadowOpacity:") = Void, Float;
selector("setShadowPath:") = Void, CGPathRef;
selector("setShadowRadius:") = Void, Float;
selector("setSharedURLCache:") = Void, NSURLCache;
selector("setShortMonthSymbols:") = Void, NSArray;
selector("setShortQuarterSymbols:") = Void, NSArray;
selector("setShortStandaloneMonthSymbols:") = Void, NSArray;
selector("setShortStandaloneQuarterSymbols:") = Void, NSArray;
selector("setShortStandaloneWeekdaySymbols:") = Void, NSArray;
selector("setShortWeekdaySymbols:") = Void, NSArray;
selector("setShouldProcessNamespaces:") = Void, Bool;
selector("setShouldRasterize:") = Void, Bool;
selector("setShouldReportNamespacePrefixes:") = Void, Bool;
selector("setShouldResolveExternalEntities:") = Void, Bool;
selector("setSpeed:") = Void, Float;
selector("setStackSize:") = Void, UInt;
selector("setStandaloneMonthSymbols:") = Void, NSArray;
selector("setStandaloneQuarterSymbols:") = Void, NSArray;
selector("setStandaloneWeekdaySymbols:") = Void, NSArray;
selector("setStartPoint:") = Void, CGPoint;
selector("setStartProgress:") = Void, Float;
selector("setString:") = Void, NSString;
selector("setStrokeColor:") = Void, CGColorRef;
selector("setStyle:") = Void, NSDictionary;
selector("setSublayerTransform:") = Void, CATransform3D;
selector("setSublayers:") = Void, NSArray;
selector("setSubtype:") = Void, NSString;
selector("setSuspended:") = Void, Bool;
selector("setTXTRecordData:") = Bool, NSData;
selector("setTarget:") = Void, Id;
selector("setTensionValues:") = Void, NSArray;
selector("setTextAttributesForNegativeInfinity:") = Void, NSDictionary;
selector("setTextAttributesForNegativeValues:") = Void, NSDictionary;
selector("setTextAttributesForNil:") = Void, NSDictionary;
selector("setTextAttributesForNotANumber:") = Void, NSDictionary;
selector("setTextAttributesForPositiveInfinity:") = Void, NSDictionary;
selector("setTextAttributesForPositiveValues:") = Void, NSDictionary;
selector("setTextAttributesForZero:") = Void, NSDictionary;
selector("setThreadPriority:") = Bool, Double;
selector("setTileSize:") = Void, CGSize;
selector("setTimeOffset:") = Void, Double;
selector("setTimeStyle:") = Void, UInt;
selector("setTimeZone:") = Void, NSTimeZone;
selector("setTimeoutInterval:") = Void, Double;
selector("setTimingFunction:") = Void, CAMediaTimingFunction;
selector("setTimingFunctions:") = Void, NSArray;
selector("setToValue:") = Void, Id;
selector("setTotalCostLimit:") = Void, UInt;
selector("setTransform:") = Void, CATransform3D;
selector("setTruncationMode:") = Void, NSString;
selector("setTwoDigitStartDate:") = Void, NSDate;
selector("setType:") = Void, NSString;
selector("setURL:") = Void, NSURL;
selector("setURL:forKey:") = Void, NSURL, NSString;
selector("setUsesGroupingSeparator:") = Void, Bool;
selector("setUsesSignificantDigits:") = Void, Bool;
selector("setValue:forHTTPHeaderField:") = Void, NSString, NSString;
selector("setValue:forKey:") = Void, Id, NSString;
selector("setValue:forKeyPath:") = Void, Id, NSString;
selector("setValue:forUndefinedKey:") = Void, Id, NSString;
selector("setValueFunction:") = Void, CAValueFunction;
selector("setValueTransformer:forName:") = Void, NSValueTransformer, NSString;
selector("setValues:") = Void, NSArray;
selector("setValuesForKeysWithDictionary:") = Void, NSDictionary;
selector("setVersion:") = Void, Int;
selector("setVeryShortMonthSymbols:") = Void, NSArray;
selector("setVeryShortStandaloneMonthSymbols:") = Void, NSArray;
selector("setVeryShortStandaloneWeekdaySymbols:") = Void, NSArray;
selector("setVeryShortWeekdaySymbols:") = Void, NSArray;
selector("setVolatileDomain:forName:") = Void, NSDictionary, NSString;
selector("setWeek:") = Void, Int;
selector("setWeekday:") = Void, Int;
selector("setWeekdayOrdinal:") = Void, Int;
selector("setWeekdaySymbols:") = Void, NSArray;
selector("setWithArray:") = Id, NSArray;
selector("setWithCapacity:") = Id, UInt;
selector("setWithObject:") = Id, Id;
varargSelector("setWithObjects:") = Id, Id;
selector("setWithObjects:count:") = Id, Pointer[Id], UInt;
selector("setWithSet:") = Id, NSSet;
selector("setWrapped:") = Void, Bool;
selector("setYear:") = Void, Int;
selector("setZPosition:") = Void, Float;
selector("setZeroSymbol:") = Void, NSString;
selector("shadowColor") = CGColorRef;
selector("shadowOffset") = CGSize;
selector("shadowOpacity") = Float;
selector("shadowPath") = CGPathRef;
selector("shadowRadius") = Float;
selector("sharedCredentialStorage") = NSURLCredentialStorage;
selector("sharedFrameworksPath") = NSString;
selector("sharedFrameworksURL") = NSURL;
selector("sharedHTTPCookieStorage") = NSHTTPCookieStorage;
selector("sharedSupportPath") = NSString;
selector("sharedSupportURL") = NSURL;
selector("sharedURLCache") = NSURLCache;
selector("sharegroup") = EAGLSharegroup;
selector("shiftIndexesStartingAtIndex:by:") = Void, UInt, Int;
selector("shortMonthSymbols") = NSArray;
selector("shortQuarterSymbols") = NSArray;
selector("shortStandaloneMonthSymbols") = NSArray;
selector("shortStandaloneQuarterSymbols") = NSArray;
selector("shortStandaloneWeekdaySymbols") = NSArray;
selector("shortValue") = Short;
selector("shortWeekdaySymbols") = NSArray;
selector("shouldArchiveValueForKey:") = Bool, NSString;
selector("shouldProcessNamespaces") = Bool;
selector("shouldRasterize") = Bool;
selector("shouldReportNamespacePrefixes") = Bool;
selector("shouldResolveExternalEntities") = Bool;
selector("signal") = Void;
selector("signatureWithObjCTypes:") = NSMethodSignature, Pointer[CChar];
selector("skipDescendants") = Void;
selector("skipDescendents") = Void;
selector("sleepForTimeInterval:") = Void, Double;
selector("sleepUntilDate:") = Void, NSDate;
selector("smallestEncoding") = UInt;
selector("sortDescriptorWithKey:ascending:") = Id, NSString, Bool;
selector("sortDescriptorWithKey:ascending:comparator:") = Id, NSString, Bool, NSComparator;
selector("sortDescriptorWithKey:ascending:selector:") = Id, NSString, Bool, SelectorHandle;
selector("sortUsingComparator:") = Void, NSComparator;
selector("sortUsingDescriptors:") = Void, NSArray;
selector("sortUsingFunction:context:") = Void, CCodePointer[[Id,Id,RawPointer],[Int]], RawPointer;
selector("sortUsingSelector:") = Void, SelectorHandle;
selector("sortWithOptions:usingComparator:") = Void, UInt, NSComparator;
selector("sortedArrayHint") = NSData;
selector("sortedArrayUsingComparator:") = NSArray, NSComparator;
selector("sortedArrayUsingDescriptors:") = NSArray, NSArray;
selector("sortedArrayUsingFunction:context:") = NSArray, CCodePointer[[Id,Id,RawPointer],[Int]], RawPointer;
selector("sortedArrayUsingFunction:context:hint:") = NSArray, CCodePointer[[Id,Id,RawPointer],[Int]], RawPointer, NSData;
selector("sortedArrayUsingSelector:") = NSArray, SelectorHandle;
selector("sortedArrayWithOptions:usingComparator:") = NSArray, UInt, NSComparator;
selector("speed") = Float;
selector("spellCheckingResultWithRange:") = NSTextCheckingResult, NSRange;
selector("stackSize") = UInt;
selector("standaloneMonthSymbols") = NSArray;
selector("standaloneQuarterSymbols") = NSArray;
selector("standaloneWeekdaySymbols") = NSArray;
selector("standardUserDefaults") = NSUserDefaults;
selector("standardizedURL") = NSURL;
selector("start") = Void;
selector("startLoading") = Void;
selector("startMonitoring") = Void;
selector("startPoint") = CGPoint;
selector("startProgress") = Float;
selector("statusCode") = Int;
selector("stop") = Void;
selector("stopLoading") = Void;
selector("stopMonitoring") = Void;
selector("storagePolicy") = UInt;
selector("storeCachedResponse:forRequest:") = Void, NSCachedURLResponse, NSURLRequest;
selector("stream:handleEvent:") = Void, NSStream, UInt;
selector("streamError") = NSError;
selector("streamStatus") = UInt;
selector("string") = Id;
selector("stringArrayForKey:") = NSArray, NSString;
selector("stringByAbbreviatingWithTildeInPath") = NSString;
selector("stringByAddingPercentEscapesUsingEncoding:") = NSString, UInt;
varargSelector("stringByAppendingFormat:") = NSString, NSString;
selector("stringByAppendingPathComponent:") = NSString, NSString;
selector("stringByAppendingPathExtension:") = NSString, NSString;
selector("stringByAppendingString:") = NSString, NSString;
selector("stringByDeletingLastPathComponent") = NSString;
selector("stringByDeletingPathExtension") = NSString;
selector("stringByExpandingTildeInPath") = NSString;
selector("stringByFoldingWithOptions:locale:") = NSString, UInt, NSLocale;
selector("stringByPaddingToLength:withString:startingAtIndex:") = NSString, UInt, NSString, UInt;
selector("stringByReplacingCharactersInRange:withString:") = NSString, NSRange, NSString;
selector("stringByReplacingMatchesInString:options:range:withTemplate:") = NSString, NSString, UInt, NSRange, NSString;
selector("stringByReplacingOccurrencesOfString:withString:") = NSString, NSString, NSString;
selector("stringByReplacingOccurrencesOfString:withString:options:range:") = NSString, NSString, NSString, UInt, NSRange;
selector("stringByReplacingPercentEscapesUsingEncoding:") = NSString, UInt;
selector("stringByResolvingSymlinksInPath") = NSString;
selector("stringByStandardizingPath") = NSString;
selector("stringByTrimmingCharactersInSet:") = NSString, NSCharacterSet;
selector("stringForKey:") = NSString, NSString;
selector("stringForObjectValue:") = NSString, Id;
selector("stringFromDate:") = NSString, NSDate;
selector("stringFromNumber:") = NSString, NSNumber;
selector("stringValue") = NSString;
selector("stringWithCString:") = Id, Pointer[CChar];
selector("stringWithCString:encoding:") = Id, Pointer[CChar], UInt;
selector("stringWithCString:length:") = Id, Pointer[CChar], UInt;
selector("stringWithCapacity:") = Id, UInt;
selector("stringWithCharacters:length:") = Id, Pointer[UShort], UInt;
selector("stringWithContentsOfFile:") = Id, NSString;
selector("stringWithContentsOfFile:encoding:error:") = Id, NSString, UInt, Pointer[NSError];
selector("stringWithContentsOfFile:usedEncoding:error:") = Id, NSString, Pointer[UInt], Pointer[NSError];
selector("stringWithContentsOfURL:") = Id, NSURL;
selector("stringWithContentsOfURL:encoding:error:") = Id, NSURL, UInt, Pointer[NSError];
selector("stringWithContentsOfURL:usedEncoding:error:") = Id, NSURL, Pointer[UInt], Pointer[NSError];
selector("stringWithFileSystemRepresentation:length:") = NSString, Pointer[CChar], UInt;
varargSelector("stringWithFormat:") = Id, NSString;
selector("stringWithString:") = Id, NSString;
selector("stringWithUTF8String:") = Id, Pointer[CChar];
selector("stringsByAppendingPaths:") = NSArray, NSArray;
selector("strokeColor") = CGColorRef;
selector("style") = NSDictionary;
selector("subarrayWithRange:") = NSArray, NSRange;
selector("subdataWithRange:") = NSData, NSRange;
selector("sublayerTransform") = CATransform3D;
selector("sublayers") = NSArray;
selector("subpathsAtPath:") = NSArray, NSString;
selector("subpathsOfDirectoryAtPath:error:") = NSArray, NSString, Pointer[NSError];
selector("subpredicates") = NSArray;
selector("substringFromIndex:") = NSString, UInt;
selector("substringToIndex:") = NSString, UInt;
selector("substringWithRange:") = NSString, NSRange;
selector("subtype") = NSString;
selector("suggestedFilename") = NSString;
selector("superclass") = Id;
selector("superlayer") = CALayer;
selector("symbolCharacterSet") = Id;
selector("symbolicLinkDestination") = NSString;
selector("symbolicLinkDestinationURL") = NSURL;
selector("synchronize") = Bool;
selector("synchronizeFile") = Void;
selector("systemID") = NSString;
selector("systemLocale") = Id;
selector("systemTimeZone") = NSTimeZone;
selector("systemUptime") = Double;
selector("systemVersion") = UInt;
selector("target") = Id;
selector("tensionValues") = NSArray;
selector("textAttributesForNegativeInfinity") = NSDictionary;
selector("textAttributesForNegativeValues") = NSDictionary;
selector("textAttributesForNil") = NSDictionary;
selector("textAttributesForNotANumber") = NSDictionary;
selector("textAttributesForPositiveInfinity") = NSDictionary;
selector("textAttributesForPositiveValues") = NSDictionary;
selector("textAttributesForZero") = NSDictionary;
selector("textEncodingName") = NSString;
selector("threadDictionary") = NSMutableDictionary;
selector("threadPriority") = Double;
selector("tileSize") = CGSize;
selector("timeInterval") = Double;
selector("timeIntervalSince1970") = Double;
selector("timeIntervalSinceDate:") = Double, NSDate;
selector("timeIntervalSinceNow") = Double;
selector("timeIntervalSinceReferenceDate") = Double;
selector("timeOffset") = Double;
selector("timeStyle") = UInt;
selector("timeZone") = NSTimeZone;
selector("timeZoneDataVersion") = NSString;
selector("timeZoneForSecondsFromGMT:") = Id, Int;
selector("timeZoneWithAbbreviation:") = Id, NSString;
selector("timeZoneWithName:") = Id, NSString;
selector("timeZoneWithName:data:") = Id, NSString, NSData;
selector("timeoutInterval") = Double;
selector("timerWithTimeInterval:invocation:repeats:") = NSTimer, Double, NSInvocation, Bool;
selector("timerWithTimeInterval:target:selector:userInfo:repeats:") = NSTimer, Double, Id, SelectorHandle, Id, Bool;
selector("timestamp") = Double;
selector("timingFunction") = CAMediaTimingFunction;
selector("timingFunctions") = NSArray;
selector("toValue") = Id;
selector("totalCostLimit") = UInt;
selector("transform") = CATransform3D;
selector("transformedValue:") = Id, Id;
selector("transformedValueClass") = Id;
selector("transitInformationCheckingResultWithRange:components:") = NSTextCheckingResult, NSRange, NSDictionary;
selector("truncateFileAtOffset:") = Void, UInt64;
selector("truncationMode") = NSString;
selector("tryLock") = Bool;
selector("tryLockWhenCondition:") = Bool, Int;
selector("twoDigitStartDate") = NSDate;
selector("type") = NSString;
selector("unarchiveObjectWithData:") = Id, NSData;
selector("unarchiveObjectWithFile:") = Id, NSString;
selector("unarchiver:cannotDecodeObjectOfClassName:originalClasses:") = Id, NSKeyedUnarchiver, NSString, NSArray;
selector("unarchiver:didDecodeObject:") = Id, NSKeyedUnarchiver, Id;
selector("unarchiver:willReplaceObject:withObject:") = Void, NSKeyedUnarchiver, Id, Id;
selector("unarchiverDidFinish:") = Void, NSKeyedUnarchiver;
selector("unarchiverWillFinish:") = Void, NSKeyedUnarchiver;
selector("undo") = Void;
selector("undoActionName") = NSString;
selector("undoMenuItemTitle") = NSString;
selector("undoMenuTitleForUndoActionName:") = NSString, NSString;
selector("undoNestedGroup") = Void;
selector("unionSet:") = Void, NSSet;
selector("unload") = Bool;
selector("unlock") = Void;
selector("unlockWithCondition:") = Void, Int;
selector("unregisterClass:") = Void, Id;
selector("unscheduleFromRunLoop:forMode:") = Void, NSRunLoop, NSString;
selector("unsignedCharValue") = CUChar;
selector("unsignedIntValue") = UInt;
selector("unsignedIntegerValue") = UInt;
selector("unsignedLongLongValue") = UInt64;
selector("unsignedLongValue") = CULong;
selector("unsignedShortValue") = UShort;
selector("updateFromPath:") = Bool, NSString;
selector("uppercaseLetterCharacterSet") = Id;
selector("uppercaseString") = NSString;
selector("useCredential:forAuthenticationChallenge:") = Void, NSURLCredential, NSURLAuthenticationChallenge;
selector("user") = NSString;
selector("userInfo") = Id;
selector("usesGroupingSeparator") = Bool;
selector("usesSignificantDigits") = Bool;
selector("validateValue:forKey:error:") = Bool, Pointer[Id], NSString, Pointer[NSError];
selector("validateValue:forKeyPath:error:") = Bool, Pointer[Id], NSString, Pointer[NSError];
selector("value") = NSString;
selector("value:withObjCType:") = NSValue, RawPointer, Pointer[CChar];
selector("valueForHTTPHeaderField:") = NSString, NSString;
selector("valueForKey:") = Id, NSString;
selector("valueForKeyPath:") = Id, NSString;
selector("valueForUndefinedKey:") = Id, NSString;
selector("valueFunction") = CAValueFunction;
selector("valueTransformerForName:") = NSValueTransformer, NSString;
selector("valueTransformerNames") = NSArray;
selector("valueWithBytes:objCType:") = NSValue, RawPointer, Pointer[CChar];
selector("valueWithCATransform3D:") = NSValue, CATransform3D;
selector("valueWithNonretainedObject:") = NSValue, Id;
selector("valueWithPointer:") = NSValue, RawPointer;
selector("valueWithRange:") = NSValue, NSRange;
selector("values") = NSArray;
selector("variable") = NSString;
selector("version") = Int;
selector("versionForClassName:") = Int, NSString;
selector("veryShortMonthSymbols") = NSArray;
selector("veryShortStandaloneMonthSymbols") = NSArray;
selector("veryShortStandaloneWeekdaySymbols") = NSArray;
selector("veryShortWeekdaySymbols") = NSArray;
selector("visibleRect") = CGRect;
selector("volatileDomainForName:") = NSDictionary, NSString;
selector("volatileDomainNames") = NSArray;
selector("wait") = Void;
selector("waitForDataInBackgroundAndNotify") = Void;
selector("waitForDataInBackgroundAndNotifyForModes:") = Void, NSArray;
selector("waitUntilAllOperationsAreFinished") = Void;
selector("waitUntilDate:") = Bool, NSDate;
selector("waitUntilFinished") = Void;
selector("week") = Int;
selector("weekday") = Int;
selector("weekdayOrdinal") = Int;
selector("weekdaySymbols") = NSArray;
selector("whitespaceAndNewlineCharacterSet") = Id;
selector("whitespaceCharacterSet") = Id;
selector("willChange:valuesAtIndexes:forKey:") = Void, UInt, NSIndexSet, NSString;
selector("willChangeValueForKey:") = Void, NSString;
selector("willChangeValueForKey:withSetMutation:usingObjects:") = Void, NSString, UInt, NSSet;
selector("windowsLocaleCodeFromLocaleIdentifier:") = UInt, NSString;
selector("write:maxLength:") = Int, Pointer[CUChar], UInt;
selector("writeBookmarkData:toURL:options:error:") = Bool, NSData, NSURL, UInt, Pointer[NSError];
selector("writeData:") = Void, NSData;
selector("writePropertyList:toStream:format:options:error:") = Int, Id, NSOutputStream, UInt, UInt, Pointer[NSError];
selector("writeToFile:atomically:") = Bool, NSString, Bool;
selector("writeToFile:atomically:encoding:error:") = Bool, NSString, Bool, UInt, Pointer[NSError];
selector("writeToFile:atomically:updateFilenames:") = Bool, NSString, Bool, Bool;
selector("writeToFile:options:error:") = Bool, NSString, UInt, Pointer[NSError];
selector("writeToURL:atomically:") = Bool, NSURL, Bool;
selector("writeToURL:atomically:encoding:error:") = Bool, NSURL, Bool, UInt, Pointer[NSError];
selector("writeToURL:options:error:") = Bool, NSURL, UInt, Pointer[NSError];
selector("writeToURL:options:originalContentsURL:error:") = Bool, NSURL, UInt, NSURL, Pointer[NSError];
selector("year") = Int;
selector("zPosition") = Float;
selector("zero") = NSDecimalNumber;
selector("zeroSymbol") = NSString;
selector("zone") = Pointer[NSZone];

record CAAnimation = externalClass(NSObject);
externalInstanceMethod(#CAAnimation, "encodeWithCoder:") = Void, NSCoder;
externalInstanceMethod(#CAAnimation, "initWithCoder:") = Id, NSCoder;
externalInstanceMethod(#CAAnimation, "copyWithZone:") = Id, Pointer[NSZone];
externalInstanceMethod(#CAAnimation, "beginTime") = Double;
externalInstanceMethod(#CAAnimation, "setBeginTime:") = Void, Double;
externalInstanceMethod(#CAAnimation, "duration") = Double;
externalInstanceMethod(#CAAnimation, "setDuration:") = Void, Double;
externalInstanceMethod(#CAAnimation, "speed") = Float;
externalInstanceMethod(#CAAnimation, "setSpeed:") = Void, Float;
externalInstanceMethod(#CAAnimation, "timeOffset") = Double;
externalInstanceMethod(#CAAnimation, "setTimeOffset:") = Void, Double;
externalInstanceMethod(#CAAnimation, "repeatCount") = Float;
externalInstanceMethod(#CAAnimation, "setRepeatCount:") = Void, Float;
externalInstanceMethod(#CAAnimation, "repeatDuration") = Double;
externalInstanceMethod(#CAAnimation, "setRepeatDuration:") = Void, Double;
externalInstanceMethod(#CAAnimation, "autoreverses") = Bool;
externalInstanceMethod(#CAAnimation, "setAutoreverses:") = Void, Bool;
externalInstanceMethod(#CAAnimation, "fillMode") = NSString;
externalInstanceMethod(#CAAnimation, "setFillMode:") = Void, NSString;
externalInstanceMethod(#CAAnimation, "runActionForKey:object:arguments:") = Void, NSString, Id, NSDictionary;
externalClassMethod(#CAAnimation, "animation") = Id;
externalClassMethod(#CAAnimation, "defaultValueForKey:") = Id, NSString;
externalInstanceMethod(#CAAnimation, "shouldArchiveValueForKey:") = Bool, NSString;
externalInstanceMethod(#CAAnimation, "timingFunction") = CAMediaTimingFunction;
externalInstanceMethod(#CAAnimation, "setTimingFunction:") = Void, CAMediaTimingFunction;
externalInstanceMethod(#CAAnimation, "delegate") = Id;
externalInstanceMethod(#CAAnimation, "setDelegate:") = Void, Id;
externalInstanceMethod(#CAAnimation, "isRemovedOnCompletion") = Bool;
externalInstanceMethod(#CAAnimation, "setRemovedOnCompletion:") = Void, Bool;

record CAAnimationGroup = externalClass(CAAnimation);
externalInstanceMethod(#CAAnimationGroup, "animations") = NSArray;
externalInstanceMethod(#CAAnimationGroup, "setAnimations:") = Void, NSArray;

record CABasicAnimation = externalClass(CAPropertyAnimation);
externalInstanceMethod(#CABasicAnimation, "fromValue") = Id;
externalInstanceMethod(#CABasicAnimation, "setFromValue:") = Void, Id;
externalInstanceMethod(#CABasicAnimation, "toValue") = Id;
externalInstanceMethod(#CABasicAnimation, "setToValue:") = Void, Id;
externalInstanceMethod(#CABasicAnimation, "byValue") = Id;
externalInstanceMethod(#CABasicAnimation, "setByValue:") = Void, Id;

record CADisplayLink = externalClass(NSObject);
externalClassMethod(#CADisplayLink, "displayLinkWithTarget:selector:") = CADisplayLink, Id, SelectorHandle;
externalInstanceMethod(#CADisplayLink, "addToRunLoop:forMode:") = Void, NSRunLoop, NSString;
externalInstanceMethod(#CADisplayLink, "removeFromRunLoop:forMode:") = Void, NSRunLoop, NSString;
externalInstanceMethod(#CADisplayLink, "invalidate") = Void;
externalInstanceMethod(#CADisplayLink, "timestamp") = Double;
externalInstanceMethod(#CADisplayLink, "duration") = Double;
externalInstanceMethod(#CADisplayLink, "isPaused") = Bool;
externalInstanceMethod(#CADisplayLink, "setPaused:") = Void, Bool;
externalInstanceMethod(#CADisplayLink, "frameInterval") = Int;
externalInstanceMethod(#CADisplayLink, "setFrameInterval:") = Void, Int;

record CAEAGLLayer = externalClass(CALayer);
externalInstanceMethod(#CAEAGLLayer, "drawableProperties") = NSDictionary;
externalInstanceMethod(#CAEAGLLayer, "setDrawableProperties:") = Void, NSDictionary;

record CAGradientLayer = externalClass(CALayer);
externalInstanceMethod(#CAGradientLayer, "colors") = NSArray;
externalInstanceMethod(#CAGradientLayer, "setColors:") = Void, NSArray;
externalInstanceMethod(#CAGradientLayer, "locations") = NSArray;
externalInstanceMethod(#CAGradientLayer, "setLocations:") = Void, NSArray;
externalInstanceMethod(#CAGradientLayer, "startPoint") = CGPoint;
externalInstanceMethod(#CAGradientLayer, "setStartPoint:") = Void, CGPoint;
externalInstanceMethod(#CAGradientLayer, "endPoint") = CGPoint;
externalInstanceMethod(#CAGradientLayer, "setEndPoint:") = Void, CGPoint;
externalInstanceMethod(#CAGradientLayer, "type") = NSString;
externalInstanceMethod(#CAGradientLayer, "setType:") = Void, NSString;

record CAKeyframeAnimation = externalClass(CAPropertyAnimation);
externalInstanceMethod(#CAKeyframeAnimation, "values") = NSArray;
externalInstanceMethod(#CAKeyframeAnimation, "setValues:") = Void, NSArray;
externalInstanceMethod(#CAKeyframeAnimation, "path") = CGPathRef;
externalInstanceMethod(#CAKeyframeAnimation, "setPath:") = Void, CGPathRef;
externalInstanceMethod(#CAKeyframeAnimation, "keyTimes") = NSArray;
externalInstanceMethod(#CAKeyframeAnimation, "setKeyTimes:") = Void, NSArray;
externalInstanceMethod(#CAKeyframeAnimation, "timingFunctions") = NSArray;
externalInstanceMethod(#CAKeyframeAnimation, "setTimingFunctions:") = Void, NSArray;
externalInstanceMethod(#CAKeyframeAnimation, "calculationMode") = NSString;
externalInstanceMethod(#CAKeyframeAnimation, "setCalculationMode:") = Void, NSString;
externalInstanceMethod(#CAKeyframeAnimation, "tensionValues") = NSArray;
externalInstanceMethod(#CAKeyframeAnimation, "setTensionValues:") = Void, NSArray;
externalInstanceMethod(#CAKeyframeAnimation, "continuityValues") = NSArray;
externalInstanceMethod(#CAKeyframeAnimation, "setContinuityValues:") = Void, NSArray;
externalInstanceMethod(#CAKeyframeAnimation, "biasValues") = NSArray;
externalInstanceMethod(#CAKeyframeAnimation, "setBiasValues:") = Void, NSArray;
externalInstanceMethod(#CAKeyframeAnimation, "rotationMode") = NSString;
externalInstanceMethod(#CAKeyframeAnimation, "setRotationMode:") = Void, NSString;

record CALayer = externalClass(NSObject);
externalInstanceMethod(#CALayer, "encodeWithCoder:") = Void, NSCoder;
externalInstanceMethod(#CALayer, "initWithCoder:") = Id, NSCoder;
externalInstanceMethod(#CALayer, "beginTime") = Double;
externalInstanceMethod(#CALayer, "setBeginTime:") = Void, Double;
externalInstanceMethod(#CALayer, "duration") = Double;
externalInstanceMethod(#CALayer, "setDuration:") = Void, Double;
externalInstanceMethod(#CALayer, "speed") = Float;
externalInstanceMethod(#CALayer, "setSpeed:") = Void, Float;
externalInstanceMethod(#CALayer, "timeOffset") = Double;
externalInstanceMethod(#CALayer, "setTimeOffset:") = Void, Double;
externalInstanceMethod(#CALayer, "repeatCount") = Float;
externalInstanceMethod(#CALayer, "setRepeatCount:") = Void, Float;
externalInstanceMethod(#CALayer, "repeatDuration") = Double;
externalInstanceMethod(#CALayer, "setRepeatDuration:") = Void, Double;
externalInstanceMethod(#CALayer, "autoreverses") = Bool;
externalInstanceMethod(#CALayer, "setAutoreverses:") = Void, Bool;
externalInstanceMethod(#CALayer, "fillMode") = NSString;
externalInstanceMethod(#CALayer, "setFillMode:") = Void, NSString;
externalClassMethod(#CALayer, "layer") = Id;
externalInstanceMethod(#CALayer, "init") = Id;
externalInstanceMethod(#CALayer, "initWithLayer:") = Id, Id;
externalInstanceMethod(#CALayer, "presentationLayer") = Id;
externalInstanceMethod(#CALayer, "modelLayer") = Id;
externalClassMethod(#CALayer, "defaultValueForKey:") = Id, NSString;
externalClassMethod(#CALayer, "needsDisplayForKey:") = Bool, NSString;
externalInstanceMethod(#CALayer, "shouldArchiveValueForKey:") = Bool, NSString;
externalInstanceMethod(#CALayer, "affineTransform") = CGAffineTransform;
externalInstanceMethod(#CALayer, "setAffineTransform:") = Void, CGAffineTransform;
externalInstanceMethod(#CALayer, "contentsAreFlipped") = Bool;
externalInstanceMethod(#CALayer, "removeFromSuperlayer") = Void;
externalInstanceMethod(#CALayer, "addSublayer:") = Void, CALayer;
externalInstanceMethod(#CALayer, "insertSublayer:atIndex:") = Void, CALayer, UInt;
externalInstanceMethod(#CALayer, "insertSublayer:below:") = Void, CALayer, CALayer;
externalInstanceMethod(#CALayer, "insertSublayer:above:") = Void, CALayer, CALayer;
externalInstanceMethod(#CALayer, "replaceSublayer:with:") = Void, CALayer, CALayer;
externalInstanceMethod(#CALayer, "convertPoint:fromLayer:") = CGPoint, CGPoint, CALayer;
externalInstanceMethod(#CALayer, "convertPoint:toLayer:") = CGPoint, CGPoint, CALayer;
externalInstanceMethod(#CALayer, "convertRect:fromLayer:") = CGRect, CGRect, CALayer;
externalInstanceMethod(#CALayer, "convertRect:toLayer:") = CGRect, CGRect, CALayer;
externalInstanceMethod(#CALayer, "convertTime:fromLayer:") = Double, Double, CALayer;
externalInstanceMethod(#CALayer, "convertTime:toLayer:") = Double, Double, CALayer;
externalInstanceMethod(#CALayer, "hitTest:") = CALayer, CGPoint;
externalInstanceMethod(#CALayer, "containsPoint:") = Bool, CGPoint;
externalInstanceMethod(#CALayer, "display") = Void;
externalInstanceMethod(#CALayer, "setNeedsDisplay") = Void;
externalInstanceMethod(#CALayer, "setNeedsDisplayInRect:") = Void, CGRect;
externalInstanceMethod(#CALayer, "needsDisplay") = Bool;
externalInstanceMethod(#CALayer, "displayIfNeeded") = Void;
externalInstanceMethod(#CALayer, "drawInContext:") = Void, CGContextRef;
externalInstanceMethod(#CALayer, "renderInContext:") = Void, CGContextRef;
externalInstanceMethod(#CALayer, "preferredFrameSize") = CGSize;
externalInstanceMethod(#CALayer, "setNeedsLayout") = Void;
externalInstanceMethod(#CALayer, "needsLayout") = Bool;
externalInstanceMethod(#CALayer, "layoutIfNeeded") = Void;
externalInstanceMethod(#CALayer, "layoutSublayers") = Void;
externalClassMethod(#CALayer, "defaultActionForKey:") = Id, NSString;
externalInstanceMethod(#CALayer, "actionForKey:") = Id, NSString;
externalInstanceMethod(#CALayer, "addAnimation:forKey:") = Void, CAAnimation, NSString;
externalInstanceMethod(#CALayer, "removeAllAnimations") = Void;
externalInstanceMethod(#CALayer, "removeAnimationForKey:") = Void, NSString;
externalInstanceMethod(#CALayer, "animationKeys") = NSArray;
externalInstanceMethod(#CALayer, "animationForKey:") = CAAnimation, NSString;
externalInstanceMethod(#CALayer, "bounds") = CGRect;
externalInstanceMethod(#CALayer, "setBounds:") = Void, CGRect;
externalInstanceMethod(#CALayer, "position") = CGPoint;
externalInstanceMethod(#CALayer, "setPosition:") = Void, CGPoint;
externalInstanceMethod(#CALayer, "zPosition") = Float;
externalInstanceMethod(#CALayer, "setZPosition:") = Void, Float;
externalInstanceMethod(#CALayer, "anchorPoint") = CGPoint;
externalInstanceMethod(#CALayer, "setAnchorPoint:") = Void, CGPoint;
externalInstanceMethod(#CALayer, "anchorPointZ") = Float;
externalInstanceMethod(#CALayer, "setAnchorPointZ:") = Void, Float;
externalInstanceMethod(#CALayer, "transform") = CATransform3D;
externalInstanceMethod(#CALayer, "setTransform:") = Void, CATransform3D;
externalInstanceMethod(#CALayer, "frame") = CGRect;
externalInstanceMethod(#CALayer, "setFrame:") = Void, CGRect;
externalInstanceMethod(#CALayer, "isHidden") = Bool;
externalInstanceMethod(#CALayer, "setHidden:") = Void, Bool;
externalInstanceMethod(#CALayer, "isDoubleSided") = Bool;
externalInstanceMethod(#CALayer, "setDoubleSided:") = Void, Bool;
externalInstanceMethod(#CALayer, "isGeometryFlipped") = Bool;
externalInstanceMethod(#CALayer, "setGeometryFlipped:") = Void, Bool;
externalInstanceMethod(#CALayer, "superlayer") = CALayer;
externalInstanceMethod(#CALayer, "sublayers") = NSArray;
externalInstanceMethod(#CALayer, "setSublayers:") = Void, NSArray;
externalInstanceMethod(#CALayer, "sublayerTransform") = CATransform3D;
externalInstanceMethod(#CALayer, "setSublayerTransform:") = Void, CATransform3D;
externalInstanceMethod(#CALayer, "mask") = CALayer;
externalInstanceMethod(#CALayer, "setMask:") = Void, CALayer;
externalInstanceMethod(#CALayer, "masksToBounds") = Bool;
externalInstanceMethod(#CALayer, "setMasksToBounds:") = Void, Bool;
externalInstanceMethod(#CALayer, "contents") = Id;
externalInstanceMethod(#CALayer, "setContents:") = Void, Id;
externalInstanceMethod(#CALayer, "contentsRect") = CGRect;
externalInstanceMethod(#CALayer, "setContentsRect:") = Void, CGRect;
externalInstanceMethod(#CALayer, "contentsGravity") = NSString;
externalInstanceMethod(#CALayer, "setContentsGravity:") = Void, NSString;
externalInstanceMethod(#CALayer, "contentsScale") = Float;
externalInstanceMethod(#CALayer, "setContentsScale:") = Void, Float;
externalInstanceMethod(#CALayer, "contentsCenter") = CGRect;
externalInstanceMethod(#CALayer, "setContentsCenter:") = Void, CGRect;
externalInstanceMethod(#CALayer, "minificationFilter") = NSString;
externalInstanceMethod(#CALayer, "setMinificationFilter:") = Void, NSString;
externalInstanceMethod(#CALayer, "magnificationFilter") = NSString;
externalInstanceMethod(#CALayer, "setMagnificationFilter:") = Void, NSString;
externalInstanceMethod(#CALayer, "minificationFilterBias") = Float;
externalInstanceMethod(#CALayer, "setMinificationFilterBias:") = Void, Float;
externalInstanceMethod(#CALayer, "isOpaque") = Bool;
externalInstanceMethod(#CALayer, "setOpaque:") = Void, Bool;
externalInstanceMethod(#CALayer, "needsDisplayOnBoundsChange") = Bool;
externalInstanceMethod(#CALayer, "setNeedsDisplayOnBoundsChange:") = Void, Bool;
externalInstanceMethod(#CALayer, "edgeAntialiasingMask") = UInt;
externalInstanceMethod(#CALayer, "setEdgeAntialiasingMask:") = Void, UInt;
externalInstanceMethod(#CALayer, "backgroundColor") = CGColorRef;
externalInstanceMethod(#CALayer, "setBackgroundColor:") = Void, CGColorRef;
externalInstanceMethod(#CALayer, "cornerRadius") = Float;
externalInstanceMethod(#CALayer, "setCornerRadius:") = Void, Float;
externalInstanceMethod(#CALayer, "borderWidth") = Float;
externalInstanceMethod(#CALayer, "setBorderWidth:") = Void, Float;
externalInstanceMethod(#CALayer, "borderColor") = CGColorRef;
externalInstanceMethod(#CALayer, "setBorderColor:") = Void, CGColorRef;
externalInstanceMethod(#CALayer, "opacity") = Float;
externalInstanceMethod(#CALayer, "setOpacity:") = Void, Float;
externalInstanceMethod(#CALayer, "compositingFilter") = Id;
externalInstanceMethod(#CALayer, "setCompositingFilter:") = Void, Id;
externalInstanceMethod(#CALayer, "filters") = NSArray;
externalInstanceMethod(#CALayer, "setFilters:") = Void, NSArray;
externalInstanceMethod(#CALayer, "backgroundFilters") = NSArray;
externalInstanceMethod(#CALayer, "setBackgroundFilters:") = Void, NSArray;
externalInstanceMethod(#CALayer, "shouldRasterize") = Bool;
externalInstanceMethod(#CALayer, "setShouldRasterize:") = Void, Bool;
externalInstanceMethod(#CALayer, "rasterizationScale") = Float;
externalInstanceMethod(#CALayer, "setRasterizationScale:") = Void, Float;
externalInstanceMethod(#CALayer, "shadowColor") = CGColorRef;
externalInstanceMethod(#CALayer, "setShadowColor:") = Void, CGColorRef;
externalInstanceMethod(#CALayer, "shadowOpacity") = Float;
externalInstanceMethod(#CALayer, "setShadowOpacity:") = Void, Float;
externalInstanceMethod(#CALayer, "shadowOffset") = CGSize;
externalInstanceMethod(#CALayer, "setShadowOffset:") = Void, CGSize;
externalInstanceMethod(#CALayer, "shadowRadius") = Float;
externalInstanceMethod(#CALayer, "setShadowRadius:") = Void, Float;
externalInstanceMethod(#CALayer, "shadowPath") = CGPathRef;
externalInstanceMethod(#CALayer, "setShadowPath:") = Void, CGPathRef;
externalInstanceMethod(#CALayer, "actions") = NSDictionary;
externalInstanceMethod(#CALayer, "setActions:") = Void, NSDictionary;
externalInstanceMethod(#CALayer, "name") = NSString;
externalInstanceMethod(#CALayer, "setName:") = Void, NSString;
externalInstanceMethod(#CALayer, "delegate") = Id;
externalInstanceMethod(#CALayer, "setDelegate:") = Void, Id;
externalInstanceMethod(#CALayer, "style") = NSDictionary;
externalInstanceMethod(#CALayer, "setStyle:") = Void, NSDictionary;
externalInstanceMethod(#CALayer, "scrollPoint:") = Void, CGPoint;
externalInstanceMethod(#CALayer, "scrollRectToVisible:") = Void, CGRect;
externalInstanceMethod(#CALayer, "visibleRect") = CGRect;

record CAMediaTimingFunction = externalClass(NSObject);
externalInstanceMethod(#CAMediaTimingFunction, "encodeWithCoder:") = Void, NSCoder;
externalInstanceMethod(#CAMediaTimingFunction, "initWithCoder:") = Id, NSCoder;
externalClassMethod(#CAMediaTimingFunction, "functionWithName:") = Id, NSString;
externalClassMethod(#CAMediaTimingFunction, "functionWithControlPoints::::") = Id, Float, Float, Float, Float;
externalInstanceMethod(#CAMediaTimingFunction, "initWithControlPoints::::") = Id, Float, Float, Float, Float;
externalInstanceMethod(#CAMediaTimingFunction, "getControlPointAtIndex:values:") = Void, UInt, Pointer[Float];

record CAPropertyAnimation = externalClass(CAAnimation);
externalClassMethod(#CAPropertyAnimation, "animationWithKeyPath:") = Id, NSString;
externalInstanceMethod(#CAPropertyAnimation, "keyPath") = NSString;
externalInstanceMethod(#CAPropertyAnimation, "setKeyPath:") = Void, NSString;
externalInstanceMethod(#CAPropertyAnimation, "isAdditive") = Bool;
externalInstanceMethod(#CAPropertyAnimation, "setAdditive:") = Void, Bool;
externalInstanceMethod(#CAPropertyAnimation, "isCumulative") = Bool;
externalInstanceMethod(#CAPropertyAnimation, "setCumulative:") = Void, Bool;
externalInstanceMethod(#CAPropertyAnimation, "valueFunction") = CAValueFunction;
externalInstanceMethod(#CAPropertyAnimation, "setValueFunction:") = Void, CAValueFunction;

record CAReplicatorLayer = externalClass(CALayer);
externalInstanceMethod(#CAReplicatorLayer, "instanceCount") = Int;
externalInstanceMethod(#CAReplicatorLayer, "setInstanceCount:") = Void, Int;
externalInstanceMethod(#CAReplicatorLayer, "preservesDepth") = Bool;
externalInstanceMethod(#CAReplicatorLayer, "setPreservesDepth:") = Void, Bool;
externalInstanceMethod(#CAReplicatorLayer, "instanceDelay") = Double;
externalInstanceMethod(#CAReplicatorLayer, "setInstanceDelay:") = Void, Double;
externalInstanceMethod(#CAReplicatorLayer, "instanceTransform") = CATransform3D;
externalInstanceMethod(#CAReplicatorLayer, "setInstanceTransform:") = Void, CATransform3D;
externalInstanceMethod(#CAReplicatorLayer, "instanceColor") = CGColorRef;
externalInstanceMethod(#CAReplicatorLayer, "setInstanceColor:") = Void, CGColorRef;
externalInstanceMethod(#CAReplicatorLayer, "instanceRedOffset") = Float;
externalInstanceMethod(#CAReplicatorLayer, "setInstanceRedOffset:") = Void, Float;
externalInstanceMethod(#CAReplicatorLayer, "instanceGreenOffset") = Float;
externalInstanceMethod(#CAReplicatorLayer, "setInstanceGreenOffset:") = Void, Float;
externalInstanceMethod(#CAReplicatorLayer, "instanceBlueOffset") = Float;
externalInstanceMethod(#CAReplicatorLayer, "setInstanceBlueOffset:") = Void, Float;
externalInstanceMethod(#CAReplicatorLayer, "instanceAlphaOffset") = Float;
externalInstanceMethod(#CAReplicatorLayer, "setInstanceAlphaOffset:") = Void, Float;

record CAScrollLayer = externalClass(CALayer);
externalInstanceMethod(#CAScrollLayer, "scrollToPoint:") = Void, CGPoint;
externalInstanceMethod(#CAScrollLayer, "scrollToRect:") = Void, CGRect;
externalInstanceMethod(#CAScrollLayer, "scrollMode") = NSString;
externalInstanceMethod(#CAScrollLayer, "setScrollMode:") = Void, NSString;

record CAShapeLayer = externalClass(CALayer);
externalInstanceMethod(#CAShapeLayer, "path") = CGPathRef;
externalInstanceMethod(#CAShapeLayer, "setPath:") = Void, CGPathRef;
externalInstanceMethod(#CAShapeLayer, "fillColor") = CGColorRef;
externalInstanceMethod(#CAShapeLayer, "setFillColor:") = Void, CGColorRef;
externalInstanceMethod(#CAShapeLayer, "fillRule") = NSString;
externalInstanceMethod(#CAShapeLayer, "setFillRule:") = Void, NSString;
externalInstanceMethod(#CAShapeLayer, "strokeColor") = CGColorRef;
externalInstanceMethod(#CAShapeLayer, "setStrokeColor:") = Void, CGColorRef;
externalInstanceMethod(#CAShapeLayer, "lineWidth") = Float;
externalInstanceMethod(#CAShapeLayer, "setLineWidth:") = Void, Float;
externalInstanceMethod(#CAShapeLayer, "miterLimit") = Float;
externalInstanceMethod(#CAShapeLayer, "setMiterLimit:") = Void, Float;
externalInstanceMethod(#CAShapeLayer, "lineCap") = NSString;
externalInstanceMethod(#CAShapeLayer, "setLineCap:") = Void, NSString;
externalInstanceMethod(#CAShapeLayer, "lineJoin") = NSString;
externalInstanceMethod(#CAShapeLayer, "setLineJoin:") = Void, NSString;
externalInstanceMethod(#CAShapeLayer, "lineDashPhase") = Float;
externalInstanceMethod(#CAShapeLayer, "setLineDashPhase:") = Void, Float;
externalInstanceMethod(#CAShapeLayer, "lineDashPattern") = NSArray;
externalInstanceMethod(#CAShapeLayer, "setLineDashPattern:") = Void, NSArray;

record CATextLayer = externalClass(CALayer);
externalInstanceMethod(#CATextLayer, "string") = Id;
externalInstanceMethod(#CATextLayer, "setString:") = Void, Id;
externalInstanceMethod(#CATextLayer, "font") = CFTypeRef;
externalInstanceMethod(#CATextLayer, "setFont:") = Void, CFTypeRef;
externalInstanceMethod(#CATextLayer, "fontSize") = Float;
externalInstanceMethod(#CATextLayer, "setFontSize:") = Void, Float;
externalInstanceMethod(#CATextLayer, "foregroundColor") = CGColorRef;
externalInstanceMethod(#CATextLayer, "setForegroundColor:") = Void, CGColorRef;
externalInstanceMethod(#CATextLayer, "isWrapped") = Bool;
externalInstanceMethod(#CATextLayer, "setWrapped:") = Void, Bool;
externalInstanceMethod(#CATextLayer, "truncationMode") = NSString;
externalInstanceMethod(#CATextLayer, "setTruncationMode:") = Void, NSString;
externalInstanceMethod(#CATextLayer, "alignmentMode") = NSString;
externalInstanceMethod(#CATextLayer, "setAlignmentMode:") = Void, NSString;

record CATiledLayer = externalClass(CALayer);
externalClassMethod(#CATiledLayer, "fadeDuration") = Double;
externalInstanceMethod(#CATiledLayer, "levelsOfDetail") = UInt;
externalInstanceMethod(#CATiledLayer, "setLevelsOfDetail:") = Void, UInt;
externalInstanceMethod(#CATiledLayer, "levelsOfDetailBias") = UInt;
externalInstanceMethod(#CATiledLayer, "setLevelsOfDetailBias:") = Void, UInt;
externalInstanceMethod(#CATiledLayer, "tileSize") = CGSize;
externalInstanceMethod(#CATiledLayer, "setTileSize:") = Void, CGSize;

record CATransaction = externalClass(NSObject);
externalClassMethod(#CATransaction, "begin") = Void;
externalClassMethod(#CATransaction, "commit") = Void;
externalClassMethod(#CATransaction, "flush") = Void;
externalClassMethod(#CATransaction, "lock") = Void;
externalClassMethod(#CATransaction, "unlock") = Void;
externalClassMethod(#CATransaction, "animationDuration") = Double;
externalClassMethod(#CATransaction, "setAnimationDuration:") = Void, Double;
externalClassMethod(#CATransaction, "animationTimingFunction") = CAMediaTimingFunction;
externalClassMethod(#CATransaction, "setAnimationTimingFunction:") = Void, CAMediaTimingFunction;
externalClassMethod(#CATransaction, "disableActions") = Bool;
externalClassMethod(#CATransaction, "setDisableActions:") = Void, Bool;
externalClassMethod(#CATransaction, "completionBlock") = UnknownType;
externalClassMethod(#CATransaction, "setCompletionBlock:") = Void, UnknownType;
externalClassMethod(#CATransaction, "valueForKey:") = Id, NSString;
externalClassMethod(#CATransaction, "setValue:forKey:") = Void, Id, NSString;

record CATransformLayer = externalClass(CALayer);

record CATransition = externalClass(CAAnimation);
externalInstanceMethod(#CATransition, "type") = NSString;
externalInstanceMethod(#CATransition, "setType:") = Void, NSString;
externalInstanceMethod(#CATransition, "subtype") = NSString;
externalInstanceMethod(#CATransition, "setSubtype:") = Void, NSString;
externalInstanceMethod(#CATransition, "startProgress") = Float;
externalInstanceMethod(#CATransition, "setStartProgress:") = Void, Float;
externalInstanceMethod(#CATransition, "endProgress") = Float;
externalInstanceMethod(#CATransition, "setEndProgress:") = Void, Float;
externalInstanceMethod(#CATransition, "filter") = Id;
externalInstanceMethod(#CATransition, "setFilter:") = Void, Id;

record CAValueFunction = externalClass(NSObject);
externalInstanceMethod(#CAValueFunction, "encodeWithCoder:") = Void, NSCoder;
externalInstanceMethod(#CAValueFunction, "initWithCoder:") = Id, NSCoder;
externalClassMethod(#CAValueFunction, "functionWithName:") = Id, NSString;
externalInstanceMethod(#CAValueFunction, "name") = NSString;

externalInstanceMethod(#NSObject, "displayLayer:") = Void, CALayer;
externalInstanceMethod(#NSObject, "drawLayer:inContext:") = Void, CALayer, CGContextRef;
externalInstanceMethod(#NSObject, "layoutSublayersOfLayer:") = Void, CALayer;
externalInstanceMethod(#NSObject, "actionForLayer:forKey:") = Id, CALayer, NSString;
externalInstanceMethod(#NSObject, "animationDidStart:") = Void, CAAnimation;
externalInstanceMethod(#NSObject, "animationDidStop:finished:") = Void, CAAnimation, Bool;

externalClassMethod(#NSValue, "valueWithCATransform3D:") = NSValue, CATransform3D;
externalInstanceMethod(#NSValue, "CATransform3DValue") = CATransform3D;


external CACurrentMediaTime() : Double;

record Struct_CATransform3D (
    m11 : Float,
    m12 : Float,
    m13 : Float,
    m14 : Float,
    m21 : Float,
    m22 : Float,
    m23 : Float,
    m24 : Float,
    m31 : Float,
    m32 : Float,
    m33 : Float,
    m34 : Float,
    m41 : Float,
    m42 : Float,
    m43 : Float,
    m44 : Float,
);

alias CATransform3D = Struct_CATransform3D;

external CATransform3DIdentity : CATransform3D;

external CATransform3DIsIdentity(
    t : CATransform3D) : Bool;

external CATransform3DEqualToTransform(
    a : CATransform3D,
    b : CATransform3D) : Bool;

external CATransform3DMakeTranslation(
    tx : Float,
    ty : Float,
    tz : Float) : CATransform3D;

external CATransform3DMakeScale(
    sx : Float,
    sy : Float,
    sz : Float) : CATransform3D;

external CATransform3DMakeRotation(
    angle : Float,
    x : Float,
    y : Float,
    z : Float) : CATransform3D;

external CATransform3DTranslate(
    t : CATransform3D,
    tx : Float,
    ty : Float,
    tz : Float) : CATransform3D;

external CATransform3DScale(
    t : CATransform3D,
    sx : Float,
    sy : Float,
    sz : Float) : CATransform3D;

external CATransform3DRotate(
    t : CATransform3D,
    angle : Float,
    x : Float,
    y : Float,
    z : Float) : CATransform3D;

external CATransform3DConcat(
    a : CATransform3D,
    b : CATransform3D) : CATransform3D;

external CATransform3DInvert(
    t : CATransform3D) : CATransform3D;

external CATransform3DMakeAffineTransform(
    m : CGAffineTransform) : CATransform3D;

external CATransform3DIsAffine(
    t : CATransform3D) : Bool;

external CATransform3DGetAffineTransform(
    t : CATransform3D) : CGAffineTransform;

external kCAFillModeForwards : NSString;

external kCAFillModeBackwards : NSString;

external kCAFillModeBoth : NSString;

external kCAFillModeRemoved : NSString;

external kCAFillModeFrozen : NSString;

alias kCALayerLeftEdge = 1;
alias kCALayerRightEdge = 2;
alias kCALayerBottomEdge = 4;
alias kCALayerTopEdge = 8;

external kCAGravityCenter : NSString;

external kCAGravityTop : NSString;

external kCAGravityBottom : NSString;

external kCAGravityLeft : NSString;

external kCAGravityRight : NSString;

external kCAGravityTopLeft : NSString;

external kCAGravityTopRight : NSString;

external kCAGravityBottomLeft : NSString;

external kCAGravityBottomRight : NSString;

external kCAGravityResize : NSString;

external kCAGravityResizeAspect : NSString;

external kCAGravityResizeAspectFill : NSString;

external kCAFilterNearest : NSString;

external kCAFilterLinear : NSString;

external kCAFilterTrilinear : NSString;

external kCAOnOrderIn : NSString;

external kCAOnOrderOut : NSString;

external kCATransition : NSString;

external kCAAnimationLinear : NSString;

external kCAAnimationDiscrete : NSString;

external kCAAnimationPaced : NSString;

external kCAAnimationCubic : NSString;

external kCAAnimationCubicPaced : NSString;

external kCAAnimationRotateAuto : NSString;

external kCAAnimationRotateAutoReverse : NSString;

external kCATransitionFade : NSString;

external kCATransitionMoveIn : NSString;

external kCATransitionPush : NSString;

external kCATransitionReveal : NSString;

external kCATransitionFromRight : NSString;

external kCATransitionFromLeft : NSString;

external kCATransitionFromTop : NSString;

external kCATransitionFromBottom : NSString;

external kCAGradientLayerAxial : NSString;

external kCAMediaTimingFunctionLinear : NSString;

external kCAMediaTimingFunctionEaseIn : NSString;

external kCAMediaTimingFunctionEaseOut : NSString;

external kCAMediaTimingFunctionEaseInEaseOut : NSString;

external kCAMediaTimingFunctionDefault : NSString;

external kCAScrollNone : NSString;

external kCAScrollVertically : NSString;

external kCAScrollHorizontally : NSString;

external kCAScrollBoth : NSString;

external kCAFillRuleNonZero : NSString;

external kCAFillRuleEvenOdd : NSString;

external kCALineJoinMiter : NSString;

external kCALineJoinRound : NSString;

external kCALineJoinBevel : NSString;

external kCALineCapButt : NSString;

external kCALineCapRound : NSString;

external kCALineCapSquare : NSString;

external kCATruncationNone : NSString;

external kCATruncationStart : NSString;

external kCATruncationEnd : NSString;

external kCATruncationMiddle : NSString;

external kCAAlignmentNatural : NSString;

external kCAAlignmentLeft : NSString;

external kCAAlignmentRight : NSString;

external kCAAlignmentCenter : NSString;

external kCAAlignmentJustified : NSString;

external kCATransactionAnimationDuration : NSString;

external kCATransactionDisableActions : NSString;

external kCATransactionAnimationTimingFunction : NSString;

external kCATransactionCompletionBlock : NSString;

external kCAValueFunctionRotateX : NSString;

external kCAValueFunctionRotateY : NSString;

external kCAValueFunctionRotateZ : NSString;

external kCAValueFunctionScale : NSString;

external kCAValueFunctionScaleX : NSString;

external kCAValueFunctionScaleY : NSString;

external kCAValueFunctionScaleZ : NSString;

external kCAValueFunctionTranslate : NSString;

external kCAValueFunctionTranslateX : NSString;

external kCAValueFunctionTranslateY : NSString;

external kCAValueFunctionTranslateZ : NSString;
