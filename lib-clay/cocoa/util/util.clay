import cocoa.objc.runtime;
import cocoa.objc.*;
import cocoa.nib.*;
import cocoa.foundation.*;
import hash.(hash);
import printer.(printTo, str);
import strings.(String);
import sequences.*;
import vectors.*;

public import cocoa.util.platform.*;



/// @section  object identity 
[T1, T2 when ObjectRef?(T1) and ObjectRef?(T2)]
overload is?(x: T1, y: T2) = objectHandle(x) == objectHandle(y);



/// @section  NSNumber overloads 
overload NSNumber(x: Int8)  = NSNumber.numberWithChar(x);
overload NSNumber(x: Int16) = NSNumber.numberWithShort(x);
overload NSNumber(x: Int32) = NSNumber.numberWithInt(x);
overload NSNumber(x: Int64) = NSNumber.numberWithLongLong(x);
overload NSNumber(x: UInt8)  = NSNumber.numberWithUnsignedChar(x);
overload NSNumber(x: UInt16) = NSNumber.numberWithUnsignedShort(x);
overload NSNumber(x: UInt32) = NSNumber.numberWithUnsignedInt(x);
overload NSNumber(x: UInt64) = NSNumber.numberWithUnsignedLongLong(x);
overload NSNumber(x: Float32) = NSNumber.numberWithFloat(x);
overload NSNumber(x: Float64) = NSNumber.numberWithDouble(x);
overload NSNumber(x: Bool) = NSNumber.numberWithBool(x);

[O when ObjectRef?(O)] overload Int8(o: O)  = o.intValue();
[O when ObjectRef?(O)] overload Int16(o: O) = o.shortValue();
[O when ObjectRef?(O)] overload Int32(o: O) = o.intValue();
[O when ObjectRef?(O)] overload Int64(o: O) = o.longLongValue();
[O when ObjectRef?(O)] overload UInt8(o: O)  = o.unsignedIntValue();
[O when ObjectRef?(O)] overload UInt16(o: O) = o.unsignedShortValue();
[O when ObjectRef?(O)] overload UInt32(o: O) = o.unsignedIntValue();
[O when ObjectRef?(O)] overload UInt64(o: O) = o.unsignedLongLongValue();
[O when ObjectRef?(O)] overload Float32(o: O) = o.floatValue();
[O when ObjectRef?(O)] overload Float64(o: O) = o.doubleValue();
[O when ObjectRef?(O)] overload Bool(o: O) = o.boolValue();



/// @section  NSString overloads 
[ident when StringLiteral?(ident)]
overload NSString(#ident) = NSString(NSSTR(ident));

[S when CCompatibleString?(S)]
overload NSString(s: S) = NSString(NSString.stringWithUTF8String(cstring(s)));

[O when ObjectRef?(O)]
overload String(o: O) = String(CStringRef(o.description().UTF8String()));

[O when Class?(O) and Subclass?(NSString, O)]
overload String(o: O) = String(CStringRef(o.UTF8String()));

[O when Class?(O) and Subclass?(NSString, O)]
overload cstring(o: O) = o.UTF8String();



/// @section  NSValue overloads 
[T]
makeNSValue(value: T)
    = NSValue.valueWithBytes_objCType(RawPointer(@value), cstring(encode(T)));
[T when ObjectRef?(T)]
overload makeNSValue(obj: T) = NSValue.valueWithNonretainedObject(obj);

record NSValueTypeMismatch (object: Id);
instance Exception (NSValueTypeMismatch);

[T, O when ObjectRef?(O)]
fromNSValue(#T, o: O) {
    if (CStringRef(o.objCType()) != encode(T))
        throw NSValueTypeMismatch(Id(o));
    else
        return fromNSValueUnsafe(T, o);
}

[T, O when ObjectRef?(O)]
fromNSValueUnsafe(#T, o: O) --> returned: T {
    o.getValue(RawPointer(@returned));
}

[T, O when ObjectRef?(O)]
overload fromNSValueUnsafe(#Pointer[T], o: O) = Pointer[T](o.pointerValue());


/// @section  primitive-as-object boxing 

[N when Numeric?(N) or N == Bool]
overload ObjectParameterType(#N) = NSNumber;
[N when Numeric?(N) or N == Bool]
overload objectHandle(n: N) = objectHandle(NSNumber(n));

[T when RegularRecord?(T) and not ObjectRef?(T)]
overload ObjectParameterType(#T) = NSValue;
[T when RegularRecord?(T) and not ObjectRef?(T)]
overload objectHandle(r: T) = objectHandle(makeNSValue(r));

[S when CCompatibleString?(S)]
overload ObjectParameterType(#S) = NSString;
[S when CCompatibleString?(S)]
overload objectHandle(s: S) = objectHandle(NSString(s));

[i when StringLiteral?(i)]
overload ObjectParameterType(#Static[i]) = NSString;
[i when StringLiteral?(i)]
overload objectHandle(#i) = NSSTR(i);



/// @section  object equality and comparison 

[O1, O2 when ObjectRef?(O1) and ObjectRef?(O2)]
overload equals?(o1: O1, o2: O2) = o1.isEqual(o2);

[O1, O2 when ObjectRef?(O1) and ObjectRef?(O2)]
overload lesser?(o1: O1, o2: O2) = o1.compare(o2) < 0;

[O, T when ObjectRef?(O) and not ObjectRef?(T) and ObjectParameterType?(T)]
overload equals?(o: O, v: T) = o.isEqual(objectHandle(v));

[O, T when ObjectRef?(O) and not ObjectRef?(T) and ObjectParameterType?(T)]
overload equals?(v: T, o: O) = o.isEqual(objectHandle(v));

[O, T when ObjectRef?(O) and not ObjectRef?(T) and ObjectParameterType?(T)]
overload lesser?(o: O, v: T) = o.compare(objectHandle(v)) < 0;

[O, T when ObjectRef?(O) and not ObjectRef?(T) and ObjectParameterType?(T)]
overload lesser?(v: T, o: O) = o.compare(objectHandle(v)) > 0;



/// @section  object hashing 

[O when ObjectRef?(O)]
overload hash(o: O) = o.hash();



/// @section  object enumeration 

private alias FAST_ENUMERATION_BUFFER_SIZE = 16;

record NSFastEnumerationIterator (
    delegate: MethodDelegate[Id, "countByEnumeratingWithState:objects:count:"],
    n: NSUInteger,
    state: NSFastEnumerationState,
    count: NSUInteger,
    objects: Array[Id, FAST_ENUMERATION_BUFFER_SIZE]
);

overload iterator(x:NSFastEnumerationIterator) = x;

private refreshIterator(i: NSFastEnumerationIterator) {
    i.n = NSUInteger(0);
    i.count = i.delegate(
        @i.state, begin(i.objects), NSUInteger(FAST_ENUMERATION_BUFFER_SIZE)
    );
}

[O when ObjectRef?(O)]
overload iterator(o: O) --> returned: NSFastEnumerationIterator {
    returned.delegate = MethodDelegate(Id(o), "countByEnumeratingWithState:objects:count:");
    returned.state.state = 0;
    refreshIterator(returned);
}

overload nextValue(i: NSFastEnumerationIterator) --> returned: Maybe[Id] {
    if (i.count != 0) {
        returned <-- Maybe(i.state.itemsPtr[i.n]);
        inc(i.n);
        if (i.n == i.count)
            refreshIterator(i);
    } else {
        returned <-- nothing(Id);
    }
}

[O when ObjectRef?(O)]
overload size(o: O) = SizeT(o.count());



/// @section  object indexing as array, dictionary 

[OD, OK when ObjectRef?(OD) and ObjectParameterType?(OK)]
overload index(o: OD, k: OK) = o.objectForKey(objectHandle(k));

[O, I when ObjectRef?(O) and Integer?(I)]
overload index(o: O, n: I) = o.objectAtIndex(NSUInteger(n));



/// @section  array and dictionary constructors 
[T, ..E when Class?(T) and allValues?(ObjectParameterType?, ..E)]
makeArrayOfClass(#T, forward ..elements: E)
    = T.arrayWithObjects(..mapValues(objectHandle, ..elements), nilHandle);

[..E when allValues?(ObjectParameterType?, ..E)]
makeNSArray(forward ..elements: E)
    = makeArrayOfClass(NSArray, ..elements);
[..E when allValues?(ObjectParameterType?, ..E)]
makeNSMutableArray(forward ..elements: E)
    = makeArrayOfClass(NSMutableArray, ..elements);

private swapValuePairs() = ;
overload swapValuePairs(forward x, forward y, forward ..xys)
    = forward y, x, ..swapValuePairs(..xys);

private ValidDictionaryKVs?(..E)
    = countValues(..E) % 2 == 0
      and allValues?(ObjectParameterType?, ..E);

[T, ..E when Class?(T) and ValidDictionaryKVs?(..E)]
private makeDictionaryOfClass(#T, forward ..kvs: E)
    = T.dictionaryWithObjectsAndKeys(
        ..mapValues(objectHandle, ..swapValuePairs(..kvs)),
        nilHandle
    );

[..E when ValidDictionaryKVs?(..E)]
makeNSDictionary(forward ..kvs: E)
    = makeDictionaryOfClass(NSDictionary, ..kvs);
[..E when ValidDictionaryKVs?(..E)]
makeNSMutableDictionary(forward ..kvs: E)
    = makeDictionaryOfClass(NSMutableDictionary, ..kvs);



/// @section  push, insert, remove operations on objects as arrays 

[O, OV when ObjectRef?(O) and ObjectParameterType?(OV)]
overload push(o: O, v: OV) { o.addObject(objectHandle(v)); }

[O, I, OV when ObjectRef?(O) and Integer?(I) and ObjectParameterType?(OV)]
overload insert(o: O, n: I, v: OV) {
    o.insertObject_atIndex(objectHandle(v), NSUInteger(n));
}

[O, I when ObjectRef?(O) and Integer?(I)]
overload remove(o: O, n: I) { o.removeObjectAtIndex(NSUInteger(n)); }



/// @section  withAutoreleasePool 

private record Drained (pool: NSAutoreleasePool);
overload destroy(x: Drained) { x.pool.drain(); }

withAutoreleasePool(fn) {
    var pool = Drained(NSAutoreleasePool(NSAutoreleasePool.alloc().init()));
    return forward ..fn();
}



/// @section  standard implementations of lifecycle methods (init*, copyWithZone:, dealloc)  

[O, superSelector, F, ..A when
    Class?(O)
    and Selector?(superSelector)
    and CallDefined?(call, F,
        O, ..dropValues(#SelectorArgumentCount(superSelector), ..A)
    )
]
initObjectWith(
    self_: O, #superSelector, forward initFn_: F, forward ..args:A
) {
    var self = self_;
    forward initFn = initFn_;
    var superArgCount = #SelectorArgumentCount(superSelector);

    // self = super(self).init...(...);
    self = callMethod(super(self), superSelector,
        ..takeValues(superArgCount, ..args)
    );

    if (not nil?(self))
        self = initFn(self,
            ..dropValues(superArgCount, ..args)
        );
    return self;
}

initObject(self) = initObjectWith(self, "init", self => self);

overload initObject(self, superSelector, forward ..args)
    = initObjectWith(self, superSelector, initObjectMembers, ..args);

[O when Class?(O)]
private objectMembers(self: O)
    = ref ..mapValues(ivar => ref fieldRef(self^, ivar.0), ..ClassInstanceVars(O));

[O when Class?(O)]
initObjectMembers(self: O) {
    ..for (member in objectMembers(self))
        member <-- Type(member)();
    return self;
}

[O, ..A when Class?(O) and (Tuple[..ClassIvarTypes(O)] == Tuple[..A])]
overload initObjectMembers(self: O, forward ..args: A) {
    ..objectMembers(self) <-- ..args;
    return self;
}

[O when Class?(O)]
copyRootObject(self: O, zone: Pointer[NSZone]) --> returned: O {
    var copy = O(self.class().allocWithZone(zone));
    copy = super(copy).init();
    return initObjectMembers(copy, ..objectMembers(self));
}

[O when Class?(O)]
copyInheritingObject(self: O, zone: Pointer[NSZone]) --> returned: O {
    var copy = O(super(self).copyWithZone(zone));
    return initObjectMembers(copy, ..objectMembers(self));
}

[O when Class?(O)]
copyImmutableObject(self: O, zone: Pointer[NSZone]) = self.retain();

[O when Class?(O)]
deallocObject(self: O) {
    ..for (member in objectMembers(self))
        destroy(member);
    super(self).dealloc();
}



/// @section  templates to define lifecycle methods 

[selector when Selector?(selector)]
AutoreleasedClassMethod(#selector)
    = [selector, class => class.alloc().init().autorelease()];

[selector, instanceSelector when Selector?(selector) and Selector?(instanceSelector)]
overload AutoreleasedClassMethod(#selector, #instanceSelector)
    = [selector, (class, ..args) =>
        callMethod(class.alloc(), instanceSelector, ..args).autorelease()
    ];

[selector, superSelector when Selector?(selector) and Selector?(superSelector)]
InitInstanceMethod(#selector, #superSelector, ..Types)
    = [selector, (self, ..args) => initObject(self, superSelector, ..args), ..Types];

overload InitInstanceMethod(selector) = InitInstanceMethod(selector, "init");
overload InitInstanceMethod() = InitInstanceMethod("init", "init");

// symbols for CopyInstanceMethod
define CopyRoot;
define CopyInheriting;
define CopyImmutable;

[selector when Selector?(selector)]
CopyInstanceMethod(#selector, #CopyRoot)
    = [selector, copyRootObject];
[selector when Selector?(selector)]
overload CopyInstanceMethod(#selector, #CopyInheriting)
    = [selector, copyInheritingObject];
[selector when Selector?(selector)]
overload CopyInstanceMethod(#selector, #CopyImmutable)
    = [selector, copyImmutableObject];

[Flag when Flag == CopyRoot or Flag == CopyInheriting or Flag == CopyImmutable]
overload CopyInstanceMethod(#Flag)
    = CopyInstanceMethod("copyWithZone:", Flag);

[selector when Selector?(selector)]
DeallocInstanceMethod(#selector) = [selector, deallocObject];

overload DeallocInstanceMethod() = DeallocInstanceMethod("dealloc");


[ivarName, readerSelector when StringLiteral?(ivarName) and Selector?(readerSelector)]
ReaderInstanceMethod(#ivarName, #readerSelector, T)
    = [readerSelector, self => T(fieldRef(self^, ivarName)), T];

[ivarName when StringLiteral?(ivarName) and Selector?(ivarName)]
overload ReaderInstanceMethod(#ivarName, T)
    = ReaderInstanceMethod(ivarName, ivarName, T);

[ivarName, readerSelector when StringLiteral?(ivarName) and Selector?(readerSelector)]
overload ReaderInstanceMethod(#ivarName, #readerSelector)
    = [readerSelector, self => SelectorReturnType(Id, readerSelector)(fieldRef(self^, ivarName))];

[ivarName when StringLiteral?(ivarName) and Selector?(ivarName)]
overload ReaderInstanceMethod(#ivarName)
    = ReaderInstanceMethod(ivarName, ivarName);


defaultWriterSelector(ivarName)
    = "set" ++ stringLiteralCapitalize(ivarName) ++ ":";

[ivarName, writerSelector when StringLiteral?(ivarName) and Selector?(writerSelector)]
WriterInstanceMethod(#ivarName, #writerSelector, T)
    = [writerSelector, (self, value) => { fieldRef(self^, ivarName) = value; }, Void, T];

[ivarName when StringLiteral?(ivarName) and Selector?(defaultWriterSelector(ivarName))]
overload WriterInstanceMethod(#ivarName, T)
    = WriterInstanceMethod(ivarName, defaultWriterSelector(ivarName), Void, T);

[ivarName, writerSelector when StringLiteral?(ivarName) and Selector?(writerSelector)]
overload WriterInstanceMethod(#ivarName, #writerSelector)
    = [writerSelector, (self, value) => { fieldRef(self^, ivarName) = value; }];

[ivarName when StringLiteral?(ivarName) and Selector?(defaultWriterSelector(ivarName))]
overload WriterInstanceMethod(#ivarName)
    = WriterInstanceMethod(ivarName, defaultWriterSelector(ivarName));


[ivarName, readerSelector, writerSelector when
    StringLiteral?(ivarName)
    and Selector?(readerSelector)
    and Selector?(writerSelector)
]
PropertyInstanceMethods(#ivarName, #readerSelector, #writerSelector, T)
    = ReaderInstanceMethod(ivarName, readerSelector, T),
      WriterInstanceMethod(ivarName, writerSelector, T);

[ivarName, readerSelector when
    StringLiteral?(ivarName)
    and Selector?(readerSelector)
    and Selector?(defaultWriterSelector(readerSelector))
]
overload PropertyInstanceMethods(#ivarName, #readerSelector, T)
    = ..PropertyInstanceMethods(ivarName, readerSelector, defaultWriterSelector(readerSelector), T);

[ivarName when
    StringLiteral?(ivarName)
    and Selector?(ivarName)
    and Selector?(defaultWriterSelector(ivarName))
]
overload PropertyInstanceMethods(#ivarName, T)
    = ..PropertyInstanceMethods(ivarName, ivarName, defaultWriterSelector(ivarName), T);

[ivarName, readerSelector, writerSelector when
    StringLiteral?(ivarName)
    and Selector?(readerSelector)
    and Selector?(writerSelector)
]
overload PropertyInstanceMethods(#ivarName, #readerSelector, #writerSelector)
    = ReaderInstanceMethod(ivarName, readerSelector),
      WriterInstanceMethod(ivarName, writerSelector);

[ivarName, readerSelector when
    StringLiteral?(ivarName)
    and Selector?(readerSelector)
    and Selector?(defaultWriterSelector(readerSelector))
]
overload PropertyInstanceMethods(#ivarName, #readerSelector)
    = ..PropertyInstanceMethods(ivarName, readerSelector, defaultWriterSelector(readerSelector));

[ivarName when
    StringLiteral?(ivarName)
    and Selector?(ivarName)
    and Selector?(defaultWriterSelector(ivarName))
]
overload PropertyInstanceMethods(#ivarName)
    = ..PropertyInstanceMethods(ivarName, ivarName, defaultWriterSelector(ivarName));



/// @section  printing 

[O when ObjectRef?(O)]
overload printTo(stream, o: O) {
    if (nil?(o))
        printTo(stream, "(nil)");
    else
        printTo(stream, CStringRef(o.description().UTF8String()));
}



/// @section  IBOutlets/IBActions 

private toIBOutlet(ivar) = [ivar.0, IBOutlet(ivar.1)];
private toIBAction(method) = [method.0, IBAction(method.1),
    ..dropValues(#2, ..unpack(method))
];

IBOutlets(..ivars) = ..mapValues(toIBOutlet, ..ivars);
IBActions(..methods) = ..mapValues(toIBAction, ..methods);



/// @section  regularClass 

private regularClassInstanceMethods(..fields)
    = InitInstanceMethod(),
      ..regularClassInitMethod(..fields),
      CopyInstanceMethod(CopyRoot),
      DeallocInstanceMethod(),
      ..regularClassPropertyMethods(..fields);

private regularClassInitMethod() = ;
overload regularClassInitMethod(..fields)
    = InitInstanceMethod(regularClassInitMethodName(..fields), "init",
        Id, ..mapValues(x => x.1, ..fields)
    );

private regularClassInitMethodName(field1, ..fields)
    = cat("initWith", stringLiteralCapitalize(field1.0), ":",
        ..mapValues(x => (x.0, ":"), ..fields));

private regularClassPropertyMethods(..fields)
    = ..mapValues(field => ..PropertyInstanceMethods(field.0, field.1), ..fields);

regularClass(..fields) = newClass(NSObject,
    InstanceVars(..fields),
    ClassMethods(),
    InstanceMethods(..regularClassInstanceMethods(..fields))
);



/// @section  indexSetIndices 

[O when ObjectRef?(O)]
indexSetIndices(o: O) {
    var indices = Vector[NSUInteger]();
    var indexCount = o.count();
    resize(indices, indexCount);
    o.getIndexes_maxCount_inIndexRange(
        begin(indices),
        indexCount,
        NSRangePointer(0),
    );
    return move(indices);
}
