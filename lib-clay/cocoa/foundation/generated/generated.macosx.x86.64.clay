// Automatically generated by clay-bindgen
// language: objective-c

import cocoa.objc.*;

import libc.*;
import cocoa.corefoundation.*;
import cocoa.applicationservices.*;

private alias OpaquePointer = RawPointer;
private alias UnknownType = Int;
private alias AUnionType = Int;


override selector("AMSymbol") = NSString;
override selector("DTD") = NSXMLDTD;
override selector("DTDKind") = CULong;
override selector("DTDNodeWithXMLString:") = Id, NSString;
override selector("HTTPBody") = NSData;
override selector("HTTPBodyStream") = NSInputStream;
override selector("HTTPMethod") = NSString;
override selector("HTTPShouldHandleCookies") = Bool;
override selector("ISOCountryCodes") = NSArray;
override selector("ISOCurrencyCodes") = NSArray;
override selector("ISOLanguageCodes") = NSArray;
override selector("MIMEType") = NSString;
override selector("PMSymbol") = NSString;
override selector("TXTRecordData") = NSData;
override selector("URI") = NSString;
override selector("URL") = NSURL;
override selector("URL:resourceDataDidBecomeAvailable:") = Void, NSURL, NSData;
override selector("URL:resourceDidFailLoadingWithReason:") = Void, NSURL, NSString;
override selector("URLByAppendingPathComponent:") = NSURL, NSString;
override selector("URLByAppendingPathExtension:") = NSURL, NSString;
override selector("URLByDeletingLastPathComponent") = NSURL;
override selector("URLByDeletingPathExtension") = NSURL;
override selector("URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:") = Id, NSData, CULong, NSURL, Pointer[Bool], Pointer[NSError];
override selector("URLByResolvingSymlinksInPath") = NSURL;
override selector("URLByStandardizingPath") = NSURL;
override selector("URLForAuxiliaryExecutable:") = NSURL, NSString;
override selector("URLForDirectory:inDomain:appropriateForURL:create:error:") = NSURL, CULong, CULong, NSURL, Bool, Pointer[NSError];
override selector("URLForKey:") = NSURL, NSString;
override selector("URLForResource:withExtension:") = NSURL, NSString, NSString;
override selector("URLForResource:withExtension:subdirectory:") = NSURL, NSString, NSString, NSString;
override selector("URLForResource:withExtension:subdirectory:inBundleWithURL:") = NSURL, NSString, NSString, NSString, NSURL;
override selector("URLForResource:withExtension:subdirectory:localization:") = NSURL, NSString, NSString, NSString, NSString;
override selector("URLHandle:resourceDataDidBecomeAvailable:") = Void, NSURLHandle, NSData;
override selector("URLHandle:resourceDidFailLoadingWithReason:") = Void, NSURLHandle, NSString;
override selector("URLHandleClassForURL:") = Id, NSURL;
override selector("URLHandleResourceDidBeginLoading:") = Void, NSURLHandle;
override selector("URLHandleResourceDidCancelLoading:") = Void, NSURLHandle;
override selector("URLHandleResourceDidFinishLoading:") = Void, NSURLHandle;
override selector("URLHandleUsingCache:") = NSURLHandle, Bool;
override selector("URLProtocol:cachedResponseIsValid:") = Void, NSURLProtocol, NSCachedURLResponse;
override selector("URLProtocol:didCancelAuthenticationChallenge:") = Void, NSURLProtocol, NSURLAuthenticationChallenge;
override selector("URLProtocol:didFailWithError:") = Void, NSURLProtocol, NSError;
override selector("URLProtocol:didLoadData:") = Void, NSURLProtocol, NSData;
override selector("URLProtocol:didReceiveAuthenticationChallenge:") = Void, NSURLProtocol, NSURLAuthenticationChallenge;
override selector("URLProtocol:didReceiveResponse:cacheStoragePolicy:") = Void, NSURLProtocol, NSURLResponse, CULong;
override selector("URLProtocol:wasRedirectedToRequest:redirectResponse:") = Void, NSURLProtocol, NSURLRequest, NSURLResponse;
override selector("URLProtocolDidFinishLoading:") = Void, NSURLProtocol;
override selector("URLResourceDidCancelLoading:") = Void, NSURL;
override selector("URLResourceDidFinishLoading:") = Void, NSURL;
override selector("URLWithString:") = Id, NSString;
override selector("URLWithString:relativeToURL:") = Id, NSString, NSURL;
override selector("URLsForDirectory:inDomains:") = NSArray, CULong, CULong;
override selector("URLsForResourcesWithExtension:subdirectory:") = NSArray, NSString, NSString;
override selector("URLsForResourcesWithExtension:subdirectory:inBundleWithURL:") = NSArray, NSString, NSString, NSURL;
override selector("URLsForResourcesWithExtension:subdirectory:localization:") = NSArray, NSString, NSString, NSString;
override selector("UTF8String") = Pointer[CChar];
override selector("XMLData") = NSData;
override selector("XMLDataWithOptions:") = NSData, CULong;
override selector("XMLString") = NSString;
override selector("XMLStringWithOptions:") = NSString, CULong;
override selector("XPath") = NSString;
override selector("abbreviation") = NSString;
override selector("abbreviationDictionary") = NSDictionary;
override selector("abbreviationForDate:") = NSString, NSDate;
override selector("abortParsing") = Void;
override selector("absoluteString") = NSString;
override selector("absoluteURL") = NSURL;
override selector("acceptConnectionInBackgroundAndNotify") = Void;
override selector("acceptConnectionInBackgroundAndNotifyForModes:") = Void, NSArray;
override selector("acceptInputForMode:beforeDate:") = Void, NSString, NSDate;
override selector("accessInstanceVariablesDirectly") = Bool;
override selector("acquireFunction") = CCodePointer[[RawPointer,CCodePointer[[RawPointer],[CULong]],CChar],[RawPointer]];
override selector("activeProcessorCount") = CULong;
override selector("addAttribute:") = Void, NSXMLNode;
override selector("addAttribute:value:range:") = Void, NSString, Id, NSRange;
override selector("addAttributes:range:") = Void, NSDictionary, NSRange;
override selector("addCharactersInRange:") = Void, NSRange;
override selector("addCharactersInString:") = Void, NSString;
override selector("addChild:") = Void, NSXMLNode;
override selector("addClient:") = Void, Id;
override selector("addConnection:toRunLoop:forMode:") = Void, NSConnection, NSRunLoop, NSString;
override selector("addDependency:") = Void, NSOperation;
override selector("addEntriesFromDictionary:") = Void, NSDictionary;
override selector("addExecutionBlock:") = Void, UnknownType;
override selector("addIndex:") = Void, CULong;
override selector("addIndexes:") = Void, NSIndexSet;
override selector("addIndexesInRange:") = Void, NSRange;
override selector("addNamespace:") = Void, NSXMLNode;
override selector("addObject:") = Void, Id;
override selector("addObjectsFromArray:") = Void, NSArray;
override selector("addObserver:forKeyPath:options:context:") = Void, NSObject, NSString, CULong, RawPointer;
override selector("addObserver:selector:name:object:") = Void, Id, SelectorHandle, NSString, Id;
override selector("addObserver:selector:name:object:suspensionBehavior:") = Void, Id, SelectorHandle, NSString, NSString, CULong;
override selector("addObserver:toObjectsAtIndexes:forKeyPath:options:context:") = Void, NSObject, NSIndexSet, NSString, CULong, RawPointer;
override selector("addObserverForName:object:queue:usingBlock:") = Id, NSString, Id, NSOperationQueue, UnknownType;
override selector("addOperation:") = Void, NSOperation;
override selector("addOperationWithBlock:") = Void, UnknownType;
override selector("addOperations:waitUntilFinished:") = Void, NSArray, Bool;
override selector("addPointer:") = Void, RawPointer;
override selector("addPort:forMode:") = Void, NSPort, NSString;
override selector("addRequestMode:") = Void, NSString;
override selector("addRunLoop:") = Void, NSRunLoop;
override selector("addSuiteNamed:") = Void, NSString;
override selector("addTimeInterval:") = Id, Double;
override selector("addTimer:forMode:") = Void, NSTimer, NSString;
override selector("addValue:forHTTPHeaderField:") = Void, NSString, NSString;
override selector("address") = Id;
override selector("addressCheckingResultWithRange:components:") = NSTextCheckingResult, NSRange, NSDictionary;
override selector("addressComponents") = NSDictionary;
override selector("addresses") = NSArray;
override selector("aeDesc") = Pointer[AEDesc];
override selector("aeteResource:") = NSData, NSString;
override selector("allBundles") = NSArray;
override selector("allConnections") = NSArray;
override selector("allCredentials") = NSDictionary;
override selector("allFrameworks") = NSArray;
override selector("allHTTPHeaderFields") = NSDictionary;
override selector("allHeaderFields") = NSDictionary;
override selector("allKeys") = NSArray;
override selector("allKeysForObject:") = NSArray, Id;
override selector("allLanguages") = NSArray;
override selector("allObjects") = NSArray;
override selector("allScripts") = NSArray;
override selector("allValues") = NSArray;
override selector("alloc") = Id;
override selector("allocWithZone:") = Id, Pointer[NSZone];
override selector("allowsFloats") = Bool;
override selector("allowsKeyedCoding") = Bool;
override selector("allowsNaturalLanguage") = Bool;
override selector("allowsReverseTransformation") = Bool;
override selector("alphanumericCharacterSet") = Id;
override selector("alwaysShowsDecimalSeparator") = Bool;
override selector("andPredicateWithSubpredicates:") = NSPredicate, NSArray;
override selector("anyObject") = Id;
override selector("appendAttributedString:") = Void, NSAttributedString;
override selector("appendBytes:length:") = Void, RawPointer, CULong;
override selector("appendData:") = Void, NSData;
override varargSelector("appendFormat:") = Void, NSString;
override selector("appendString:") = Void, NSString;
override selector("appendTransform:") = Void, NSAffineTransform;
override selector("appleEvent") = NSAppleEventDescriptor;
override selector("appleEventClassCode") = UInt;
override selector("appleEventCode") = UInt;
override selector("appleEventCodeForArgumentWithName:") = UInt, NSString;
override selector("appleEventCodeForKey:") = UInt, NSString;
override selector("appleEventCodeForReturnType") = UInt;
override selector("appleEventCodeForSuite:") = UInt, NSString;
override selector("appleEventForSuspensionID:") = NSAppleEventDescriptor, NSAppleEventManagerSuspensionID;
override selector("appleEventWithEventClass:eventID:targetDescriptor:returnID:transactionID:") = NSAppleEventDescriptor, UInt, UInt, NSAppleEventDescriptor, Short, Int;
override selector("archiveRootObject:toFile:") = Bool, Id, NSString;
override selector("archivedDataWithRootObject:") = NSData, Id;
override selector("archiver:didEncodeObject:") = Void, NSKeyedArchiver, Id;
override selector("archiver:willEncodeObject:") = Id, NSKeyedArchiver, Id;
override selector("archiver:willReplaceObject:withObject:") = Void, NSKeyedArchiver, Id, Id;
override selector("archiverData") = NSMutableData;
override selector("archiverDidFinish:") = Void, NSKeyedArchiver;
override selector("archiverWillFinish:") = Void, NSKeyedArchiver;
override selector("argumentNames") = NSArray;
override selector("arguments") = Id;
override selector("argumentsRetained") = Bool;
override selector("array") = Id;
override selector("arrayByAddingObject:") = NSArray, Id;
override selector("arrayByAddingObjectsFromArray:") = NSArray, NSArray;
override selector("arrayForKey:") = NSArray, NSString;
override selector("arrayWithArray:") = Id, NSArray;
override selector("arrayWithCapacity:") = Id, CULong;
override selector("arrayWithContentsOfFile:") = Id, NSString;
override selector("arrayWithContentsOfURL:") = Id, NSURL;
override selector("arrayWithObject:") = Id, Id;
override varargSelector("arrayWithObjects:") = Id, Id;
override selector("arrayWithObjects:count:") = Id, Pointer[Id], CULong;
override selector("ascending") = Bool;
override selector("attemptRecoveryFromError:optionIndex:") = Bool, NSError, CULong;
override selector("attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:") = Void, NSError, CULong, Id, SelectorHandle, RawPointer;
override selector("attribute") = NSString;
override selector("attribute:atIndex:effectiveRange:") = Id, NSString, CULong, NSRangePointer;
override selector("attribute:atIndex:longestEffectiveRange:inRange:") = Id, NSString, CULong, NSRangePointer, NSRange;
override selector("attributeDeclarationForName:elementName:") = NSXMLDTDNode, NSString, NSString;
override selector("attributeDescriptorForKeyword:") = NSAppleEventDescriptor, UInt;
override selector("attributeForLocalName:URI:") = NSXMLNode, NSString, NSString;
override selector("attributeForName:") = NSXMLNode, NSString;
override selector("attributeKeys") = NSArray;
override selector("attributeWithName:URI:stringValue:") = Id, NSString, NSString, NSString;
override selector("attributeWithName:stringValue:") = Id, NSString, NSString;
override selector("attributedStringForNil") = NSAttributedString;
override selector("attributedStringForNotANumber") = NSAttributedString;
override selector("attributedStringForObjectValue:withDefaultAttributes:") = NSAttributedString, Id, NSDictionary;
override selector("attributedStringForZero") = NSAttributedString;
override selector("attributedSubstringFromRange:") = NSAttributedString, NSRange;
override selector("attributes") = NSArray;
override selector("attributesAtIndex:effectiveRange:") = NSDictionary, CULong, NSRangePointer;
override selector("attributesAtIndex:longestEffectiveRange:inRange:") = NSDictionary, CULong, NSRangePointer, NSRange;
override selector("attributesOfFileSystemForPath:error:") = NSDictionary, NSString, Pointer[NSError];
override selector("attributesOfItemAtPath:error:") = NSDictionary, NSString, Pointer[NSError];
override selector("authenticateComponents:withData:") = Bool, NSArray, NSData;
override selector("authenticationDataForComponents:") = NSData, NSArray;
override selector("authenticationMethod") = NSString;
override selector("autoContentAccessingProxy") = Id;
override selector("automaticallyNotifiesObserversForKey:") = Bool, NSString;
override selector("autorelease") = Id;
override selector("autoupdatingCurrentCalendar") = Id;
override selector("autoupdatingCurrentLocale") = Id;
override selector("availableData") = NSData;
override selector("availableLocaleIdentifiers") = NSArray;
override selector("availableResourceData") = NSData;
override selector("availableStringEncodings") = Pointer[CULong];
override selector("awakeAfterUsingCoder:") = Id, NSCoder;
override selector("backgroundLoadDidFailWithReason:") = Void, NSString;
override selector("baseSpecifier") = NSScriptObjectSpecifier;
override selector("baseURL") = NSURL;
override selector("beginContentAccess") = Bool;
override selector("beginEditing") = Void;
override selector("beginLoadInBackground") = Void;
override selector("beginUndoGrouping") = Void;
override selector("bitmapRepresentation") = NSData;
override selector("blockOperationWithBlock:") = Id, UnknownType;
override selector("bookmarkDataWithContentsOfURL:error:") = NSData, NSURL, Pointer[NSError];
override selector("bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:") = NSData, CULong, NSArray, NSURL, Pointer[NSError];
override selector("boolForKey:") = Bool, NSString;
override selector("boolValue") = Bool;
override selector("booleanValue") = CUChar;
override selector("breakLock") = Void;
override selector("broadcast") = Void;
override selector("builtInPlugInsPath") = NSString;
override selector("builtInPlugInsURL") = NSURL;
override selector("bundleForClass:") = NSBundle, Id;
override selector("bundleForSuite:") = NSBundle, NSString;
override selector("bundleIdentifier") = NSString;
override selector("bundlePath") = NSString;
override selector("bundleURL") = NSURL;
override selector("bundleWithIdentifier:") = NSBundle, NSString;
override selector("bundleWithPath:") = NSBundle, NSString;
override selector("bundleWithURL:") = NSBundle, NSURL;
override selector("bytes") = RawPointer;
override selector("cString") = Pointer[CChar];
override selector("cStringLength") = CULong;
override selector("cStringUsingEncoding:") = Pointer[CChar], CULong;
override selector("cache:willEvictObject:") = Void, NSCache, Id;
override selector("cachePolicy") = CULong;
override selector("cachedHandleForURL:") = NSURLHandle, NSURL;
override selector("cachedResponse") = NSCachedURLResponse;
override selector("cachedResponseForRequest:") = NSCachedURLResponse, NSURLRequest;
override selector("calendar") = NSCalendar;
override selector("calendarDate") = Id;
override selector("calendarFormat") = NSString;
override selector("calendarIdentifier") = NSString;
override selector("callStackReturnAddresses") = NSArray;
override selector("callStackSymbols") = NSArray;
override selector("canBeConvertedToEncoding:") = Bool, CULong;
override selector("canHandleRequest:") = Bool, NSURLRequest;
override selector("canInitWithRequest:") = Bool, NSURLRequest;
override selector("canInitWithURL:") = Bool, NSURL;
override selector("canRedo") = Bool;
override selector("canResumeDownloadDecodedWithEncodingMIMEType:") = Bool, NSString;
override selector("canUndo") = Bool;
override selector("cancel") = Void;
override selector("cancelAllOperations") = Void;
override selector("cancelAuthenticationChallenge:") = Void, NSURLAuthenticationChallenge;
override selector("cancelLoadInBackground") = Void;
override selector("cancelPerformSelector:target:argument:") = Void, SelectorHandle, Id, Id;
override selector("cancelPerformSelectorsWithTarget:") = Void, Id;
override selector("cancelPreviousPerformRequestsWithTarget:") = Void, Id;
override selector("cancelPreviousPerformRequestsWithTarget:selector:object:") = Void, Id, SelectorHandle, Id;
override selector("canonicalLanguageIdentifierFromString:") = NSString, NSString;
override selector("canonicalLocaleIdentifierFromString:") = NSString, NSString;
override selector("canonicalRequestForRequest:") = NSURLRequest, NSURLRequest;
override selector("canonicalXMLStringPreservingComments:") = NSString, Bool;
override selector("capitalizedLetterCharacterSet") = Id;
override selector("capitalizedString") = NSString;
override selector("caseInsensitiveCompare:") = CLong, NSString;
override selector("caseSensitive") = Bool;
override selector("certificates") = NSArray;
override selector("changeCurrentDirectoryPath:") = Bool, NSString;
override selector("changeFileAttributes:atPath:") = Bool, NSDictionary, NSString;
override selector("charValue") = CChar;
override selector("characterAtIndex:") = UShort, CULong;
override selector("characterDirectionForLanguage:") = CULong, NSString;
override selector("characterEncoding") = NSString;
override selector("characterIsMember:") = Bool, UShort;
override selector("characterSetWithBitmapRepresentation:") = Id, NSData;
override selector("characterSetWithCharactersInString:") = Id, NSString;
override selector("characterSetWithContentsOfFile:") = Id, NSString;
override selector("characterSetWithRange:") = Id, NSRange;
override selector("charactersToBeSkipped") = NSCharacterSet;
override selector("checkResourceIsReachableAndReturnError:") = Bool, Pointer[NSError];
override selector("childAtIndex:") = NSXMLNode, CULong;
override selector("childCount") = CULong;
override selector("childSpecifier") = NSScriptObjectSpecifier;
override selector("children") = NSArray;
override selector("class") = Id;
override selector("classCode") = UInt;
override selector("classDescription") = NSClassDescription;
override selector("classDescriptionForClass:") = Id, Id;
override selector("classDescriptionForKey:") = NSScriptClassDescription, NSString;
override selector("classDescriptionWithAppleEventCode:") = NSScriptClassDescription, UInt;
override selector("classDescriptionsInSuite:") = NSDictionary, NSString;
override selector("classFallbacksForKeyedArchiver") = NSArray;
override selector("classForArchiver") = Id;
override selector("classForClassName:") = Id, NSString;
override selector("classForCoder") = Id;
override selector("classForKeyedArchiver") = Id;
override selector("classForKeyedUnarchiver") = Id;
override selector("classForPortCoder") = Id;
override selector("className") = NSString;
override selector("classNameDecodedForArchiveClassName:") = NSString, NSString;
override selector("classNameEncodedForTrueClassName:") = NSString, NSString;
override selector("classNameForClass:") = NSString, Id;
override selector("classNamed:") = Id, NSString;
override selector("client") = Id;
override selector("close") = Void;
override selector("closeFile") = Void;
override selector("code") = CLong;
override selector("coerceToDescriptorType:") = NSAppleEventDescriptor, UInt;
override selector("coerceValue:forKey:") = Id, Id, NSString;
override selector("coerceValue:toClass:") = Id, Id, Id;
override selector("collectExhaustively") = Void;
override selector("collectIfNeeded") = Void;
override selector("collection") = Id;
override selector("columnNumber") = CLong;
override selector("commandClassName") = NSString;
override selector("commandDescription") = NSScriptCommandDescription;
override selector("commandDescriptionWithAppleEventClass:andAppleEventCode:") = NSScriptCommandDescription, UInt, UInt;
override selector("commandDescriptionsInSuite:") = NSDictionary, NSString;
override selector("commandName") = NSString;
override selector("comment") = NSString;
override selector("commentURL") = NSURL;
override selector("commentWithStringValue:") = Id, NSString;
override selector("commonISOCurrencyCodes") = NSArray;
override selector("commonPrefixWithString:options:") = NSString, NSString, CULong;
override selector("compact") = Void;
override selector("comparator") = NSComparator;
override selector("compare:") = CLong, NSNumber;
override selector("compare:options:") = CLong, NSString, CULong;
override selector("compare:options:range:") = CLong, NSString, CULong, NSRange;
override selector("compare:options:range:locale:") = CLong, NSString, CULong, NSRange, Id;
override selector("compareObject:toObject:") = CLong, Id, Id;
override selector("comparisonPredicateModifier") = CULong;
override selector("compileAndReturnError:") = Bool, Pointer[NSDictionary];
override selector("completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:") = CULong, Pointer[NSString], Bool, Pointer[NSArray], NSArray;
override selector("completionBlock") = UnknownType;
override selector("components") = NSArray;
override selector("components:fromDate:") = NSDateComponents, CULong, NSDate;
override selector("components:fromDate:toDate:options:") = NSDateComponents, CULong, NSDate, NSDate, CULong;
override selector("componentsFromLocaleIdentifier:") = NSDictionary, NSString;
override selector("componentsJoinedByString:") = NSString, NSString;
override selector("componentsSeparatedByCharactersInSet:") = NSArray, NSCharacterSet;
override selector("componentsSeparatedByString:") = NSArray, NSString;
override selector("componentsToDisplayForPath:") = NSArray, NSString;
override selector("compoundPredicateType") = CULong;
override selector("condition") = CLong;
override selector("configureAsServer") = Void;
override selector("conformsToProtocol:") = Bool, Id;
override selector("connection") = NSConnection;
override selector("connection:canAuthenticateAgainstProtectionSpace:") = Bool, NSURLConnection, NSURLProtectionSpace;
override selector("connection:didCancelAuthenticationChallenge:") = Void, NSURLConnection, NSURLAuthenticationChallenge;
override selector("connection:didFailWithError:") = Void, NSURLConnection, NSError;
override selector("connection:didReceiveAuthenticationChallenge:") = Void, NSURLConnection, NSURLAuthenticationChallenge;
override selector("connection:didReceiveData:") = Void, NSURLConnection, NSData;
override selector("connection:didReceiveResponse:") = Void, NSURLConnection, NSURLResponse;
override selector("connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:") = Void, NSURLConnection, CLong, CLong, CLong;
override selector("connection:handleRequest:") = Bool, NSConnection, NSDistantObjectRequest;
override selector("connection:needNewBodyStream:") = NSInputStream, NSURLConnection, NSURLRequest;
override selector("connection:shouldMakeNewConnection:") = Bool, NSConnection, NSConnection;
override selector("connection:willCacheResponse:") = NSCachedURLResponse, NSURLConnection, NSCachedURLResponse;
override selector("connection:willSendRequest:redirectResponse:") = NSURLRequest, NSURLConnection, NSURLRequest, NSURLResponse;
override selector("connectionDidFinishLoading:") = Void, NSURLConnection;
override selector("connectionForProxy") = NSConnection;
override selector("connectionShouldUseCredentialStorage:") = Bool, NSURLConnection;
override selector("connectionWithReceivePort:sendPort:") = Id, NSPort, NSPort;
override selector("connectionWithRegisteredName:host:") = Id, NSString, NSString;
override selector("connectionWithRegisteredName:host:usingNameServer:") = Id, NSString, NSString, NSPortNameServer;
override selector("connectionWithRequest:delegate:") = NSURLConnection, NSURLRequest, Id;
override selector("constantValue") = Id;
override selector("containerClassDescription") = NSScriptClassDescription;
override selector("containerIsObjectBeingTested") = Bool;
override selector("containerIsRangeContainerObject") = Bool;
override selector("containerSpecifier") = NSScriptObjectSpecifier;
override selector("containsIndex:") = Bool, CULong;
override selector("containsIndexes:") = Bool, NSIndexSet;
override selector("containsIndexesInRange:") = Bool, NSRange;
override selector("containsObject:") = Bool, Id;
override selector("containsValueForKey:") = Bool, NSString;
override selector("contentsAtPath:") = NSData, NSString;
override selector("contentsEqualAtPath:andPath:") = Bool, NSString, NSString;
override selector("contentsOfDirectoryAtPath:error:") = NSArray, NSString, Pointer[NSError];
override selector("contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:") = NSArray, NSURL, NSArray, CULong, Pointer[NSError];
override selector("continueWithoutCredentialForAuthenticationChallenge:") = Void, NSURLAuthenticationChallenge;
override selector("controlCharacterSet") = Id;
override selector("conversation") = Id;
override selector("cookieAcceptPolicy") = CULong;
override selector("cookieWithProperties:") = Id, NSDictionary;
override selector("cookies") = NSArray;
override selector("cookiesForURL:") = NSArray, NSURL;
override selector("cookiesWithResponseHeaderFields:forURL:") = NSArray, NSDictionary, NSURL;
override selector("copy") = Id;
override selector("copyItemAtPath:toPath:error:") = Bool, NSString, NSString, Pointer[NSError];
override selector("copyItemAtURL:toURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
override selector("copyPath:toPath:handler:") = Bool, NSString, NSString, Id;
override selector("copyScriptingValue:forKey:withProperties:") = Id, Id, NSString, NSDictionary;
override selector("copyWithZone:") = Id, Pointer[NSZone];
override selector("correctionCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
override selector("count") = CULong;
override selector("countByEnumeratingWithState:objects:count:") = CULong, Pointer[NSFastEnumerationState], Pointer[Id], CULong;
override selector("countForObject:") = CULong, Id;
override selector("countLimit") = CULong;
override selector("countOfIndexesInRange:") = CULong, NSRange;
override selector("createClassDescription") = NSScriptClassDescription;
override selector("createCommandInstance") = NSScriptCommand;
override selector("createCommandInstanceWithZone:") = NSScriptCommand, Pointer[NSZone];
override selector("createConversationForConnection:") = Id, NSConnection;
override selector("createDirectoryAtPath:attributes:") = Bool, NSString, NSDictionary;
override selector("createDirectoryAtPath:withIntermediateDirectories:attributes:error:") = Bool, NSString, Bool, NSDictionary, Pointer[NSError];
override selector("createFileAtPath:contents:attributes:") = Bool, NSString, NSData, NSDictionary;
override selector("createSymbolicLinkAtPath:pathContent:") = Bool, NSString, NSString;
override selector("createSymbolicLinkAtPath:withDestinationPath:error:") = Bool, NSString, NSString, Pointer[NSError];
override selector("credentialForTrust:") = NSURLCredential, SecTrustRef;
override selector("credentialWithIdentity:certificates:persistence:") = NSURLCredential, SecIdentityRef, NSArray, CULong;
override selector("credentialWithUser:password:persistence:") = NSURLCredential, NSString, NSString, CULong;
override selector("credentialsForProtectionSpace:") = NSDictionary, NSURLProtectionSpace;
override selector("currencyCode") = NSString;
override selector("currencyDecimalSeparator") = NSString;
override selector("currencyGroupingSeparator") = NSString;
override selector("currencySymbol") = NSString;
override selector("currentAppleEvent") = NSAppleEventDescriptor;
override selector("currentCalendar") = Id;
override selector("currentCommand") = NSScriptCommand;
override selector("currentConversation") = Id;
override selector("currentDirectoryPath") = NSString;
override selector("currentDiskUsage") = CULong;
override selector("currentHandler") = NSAssertionHandler;
override selector("currentHost") = NSHost;
override selector("currentLocale") = Id;
override selector("currentMemoryUsage") = CULong;
override selector("currentMode") = NSString;
override selector("currentQueue") = Id;
override selector("currentReplyAppleEvent") = NSAppleEventDescriptor;
override selector("currentRunLoop") = NSRunLoop;
override selector("currentThread") = NSThread;
override selector("customSelector") = SelectorHandle;
override selector("dashCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
override selector("data") = Id;
override selector("dataForKey:") = NSData, NSString;
override selector("dataFromPropertyList:format:errorDescription:") = NSData, Id, CULong, Pointer[NSString];
override selector("dataFromTXTRecordDictionary:") = NSData, NSDictionary;
override selector("dataUsingEncoding:") = NSData, CULong;
override selector("dataUsingEncoding:allowLossyConversion:") = NSData, CULong, Bool;
override selector("dataWithBytes:length:") = Id, RawPointer, CULong;
override selector("dataWithBytesNoCopy:length:") = Id, RawPointer, CULong;
override selector("dataWithBytesNoCopy:length:freeWhenDone:") = Id, RawPointer, CULong, Bool;
override selector("dataWithCapacity:") = Id, CULong;
override selector("dataWithContentsOfFile:") = Id, NSString;
override selector("dataWithContentsOfFile:options:error:") = Id, NSString, CULong, Pointer[NSError];
override selector("dataWithContentsOfMappedFile:") = Id, NSString;
override selector("dataWithContentsOfURL:") = Id, NSURL;
override selector("dataWithContentsOfURL:options:error:") = Id, NSURL, CULong, Pointer[NSError];
override selector("dataWithData:") = Id, NSData;
override selector("dataWithLength:") = Id, CULong;
override selector("dataWithPropertyList:format:options:error:") = NSData, Id, CULong, CULong, Pointer[NSError];
override selector("date") = Id;
override selector("dateByAddingComponents:toDate:options:") = NSDate, NSDateComponents, NSDate, CULong;
override selector("dateByAddingTimeInterval:") = Id, Double;
override selector("dateByAddingYears:months:days:hours:minutes:seconds:") = NSCalendarDate, CLong, CLong, CLong, CLong, CLong, CLong;
override selector("dateCheckingResultWithRange:date:") = NSTextCheckingResult, NSRange, NSDate;
override selector("dateCheckingResultWithRange:date:timeZone:duration:") = NSTextCheckingResult, NSRange, NSDate, NSTimeZone, Double;
override selector("dateFormat") = NSString;
override selector("dateFormatFromTemplate:options:locale:") = NSString, NSString, CULong, NSLocale;
override selector("dateFromComponents:") = NSDate, NSDateComponents;
override selector("dateFromString:") = NSDate, NSString;
override selector("dateStyle") = CULong;
override selector("dateWithCalendarFormat:timeZone:") = NSCalendarDate, NSString, NSTimeZone;
override selector("dateWithNaturalLanguageString:") = Id, NSString;
override selector("dateWithNaturalLanguageString:locale:") = Id, NSString, Id;
override selector("dateWithString:") = Id, NSString;
override selector("dateWithString:calendarFormat:") = Id, NSString, NSString;
override selector("dateWithString:calendarFormat:locale:") = Id, NSString, NSString, Id;
override selector("dateWithTimeInterval:sinceDate:") = Id, Double, NSDate;
override selector("dateWithTimeIntervalSince1970:") = Id, Double;
override selector("dateWithTimeIntervalSinceNow:") = Id, Double;
override selector("dateWithTimeIntervalSinceReferenceDate:") = Id, Double;
override selector("dateWithYear:month:day:hour:minute:second:timeZone:") = Id, CLong, CULong, CULong, CULong, CULong, CULong, NSTimeZone;
override selector("day") = CLong;
override selector("dayOfCommonEra") = CLong;
override selector("dayOfMonth") = CLong;
override selector("dayOfWeek") = CLong;
override selector("dayOfYear") = CLong;
override selector("daylightSavingTimeOffset") = Double;
override selector("daylightSavingTimeOffsetForDate:") = Double, NSDate;
override selector("dealloc") = Void;
override selector("decimalDigitCharacterSet") = Id;
override selector("decimalNumberByAdding:") = NSDecimalNumber, NSDecimalNumber;
override selector("decimalNumberByAdding:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
override selector("decimalNumberByDividingBy:") = NSDecimalNumber, NSDecimalNumber;
override selector("decimalNumberByDividingBy:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
override selector("decimalNumberByMultiplyingBy:") = NSDecimalNumber, NSDecimalNumber;
override selector("decimalNumberByMultiplyingBy:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
override selector("decimalNumberByMultiplyingByPowerOf10:") = NSDecimalNumber, Short;
override selector("decimalNumberByMultiplyingByPowerOf10:withBehavior:") = NSDecimalNumber, Short, Id;
override selector("decimalNumberByRaisingToPower:") = NSDecimalNumber, CULong;
override selector("decimalNumberByRaisingToPower:withBehavior:") = NSDecimalNumber, CULong, Id;
override selector("decimalNumberByRoundingAccordingToBehavior:") = NSDecimalNumber, Id;
override selector("decimalNumberBySubtracting:") = NSDecimalNumber, NSDecimalNumber;
override selector("decimalNumberBySubtracting:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
override selector("decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:") = Id, CULong, Short, Bool, Bool, Bool, Bool;
override selector("decimalNumberWithDecimal:") = NSDecimalNumber, NSDecimal;
override selector("decimalNumberWithMantissa:exponent:isNegative:") = NSDecimalNumber, UInt64, Short, Bool;
override selector("decimalNumberWithString:") = NSDecimalNumber, NSString;
override selector("decimalNumberWithString:locale:") = NSDecimalNumber, NSString, Id;
override selector("decimalSeparator") = NSString;
override selector("decimalValue") = NSDecimal;
override selector("decodeArrayOfObjCType:count:at:") = Void, Pointer[CChar], CULong, RawPointer;
override selector("decodeBoolForKey:") = Bool, NSString;
override selector("decodeBytesForKey:returnedLength:") = Pointer[CUChar], NSString, Pointer[CULong];
override selector("decodeBytesWithReturnedLength:") = RawPointer, Pointer[CULong];
override selector("decodeClassName:asClassName:") = Void, NSString, NSString;
override selector("decodeDataObject") = NSData;
override selector("decodeDoubleForKey:") = Double, NSString;
override selector("decodeFloatForKey:") = Float, NSString;
override selector("decodeInt32ForKey:") = Int, NSString;
override selector("decodeInt64ForKey:") = Int64, NSString;
override selector("decodeIntForKey:") = Int, NSString;
override selector("decodeIntegerForKey:") = CLong, NSString;
override selector("decodeNXObject") = Id;
override selector("decodeObject") = Id;
override selector("decodeObjectForKey:") = Id, NSString;
override selector("decodePoint") = NSPoint;
override selector("decodePointForKey:") = NSPoint, NSString;
override selector("decodePortObject") = NSPort;
override selector("decodePropertyList") = Id;
override selector("decodeRect") = NSRect;
override selector("decodeRectForKey:") = NSRect, NSString;
override selector("decodeSize") = NSSize;
override selector("decodeSizeForKey:") = NSSize, NSString;
override selector("decodeValueOfObjCType:at:") = Void, Pointer[CChar], RawPointer;
override varargSelector("decodeValuesOfObjCTypes:") = Void, Pointer[CChar];
override selector("decomposableCharacterSet") = Id;
override selector("decomposedStringWithCanonicalMapping") = NSString;
override selector("decomposedStringWithCompatibilityMapping") = NSString;
override selector("defaultBehavior") = Id;
override selector("defaultCStringEncoding") = CULong;
override selector("defaultCenter") = Id;
override selector("defaultCollector") = Id;
override selector("defaultConnection") = NSConnection;
override selector("defaultCredentialForProtectionSpace:") = NSURLCredential, NSURLProtectionSpace;
override selector("defaultDate") = NSDate;
override selector("defaultDecimalNumberHandler") = Id;
override selector("defaultFormatterBehavior") = CULong;
override selector("defaultManager") = NSFileManager;
override selector("defaultNameServerPortNumber") = UShort;
override selector("defaultQueue") = Id;
override selector("defaultSubcontainerAttributeKey") = NSString;
override selector("defaultTimeZone") = NSTimeZone;
override selector("delegate") = Id;
override selector("deleteCharactersInRange:") = Void, NSRange;
override selector("deleteCookie:") = Void, NSHTTPCookie;
override selector("deletesFileUponFailure") = Bool;
override selector("dependencies") = NSArray;
override selector("dequeueNotificationsMatching:coalesceMask:") = Void, NSNotification, CULong;
override selector("description") = NSString;
override selector("descriptionFunction") = CCodePointer[[RawPointer],[NSString]];
override selector("descriptionInStringsFileFormat") = NSString;
override selector("descriptionWithCalendarFormat:") = NSString, NSString;
override selector("descriptionWithCalendarFormat:locale:") = NSString, NSString, Id;
override selector("descriptionWithCalendarFormat:timeZone:locale:") = NSString, NSString, NSTimeZone, Id;
override selector("descriptionWithLocale:") = NSString, Id;
override selector("descriptionWithLocale:indent:") = NSString, Id, CULong;
override selector("descriptor") = NSAppleEventDescriptor;
override selector("descriptorAtIndex:") = NSAppleEventDescriptor, CLong;
override selector("descriptorForKeyword:") = NSAppleEventDescriptor, UInt;
override selector("descriptorType") = UInt;
override selector("descriptorWithBoolean:") = NSAppleEventDescriptor, CUChar;
override selector("descriptorWithDescriptorType:bytes:length:") = NSAppleEventDescriptor, UInt, RawPointer, CULong;
override selector("descriptorWithDescriptorType:data:") = NSAppleEventDescriptor, UInt, NSData;
override selector("descriptorWithEnumCode:") = NSAppleEventDescriptor, UInt;
override selector("descriptorWithInt32:") = NSAppleEventDescriptor, Int;
override selector("descriptorWithString:") = NSAppleEventDescriptor, NSString;
override selector("descriptorWithTypeCode:") = NSAppleEventDescriptor, UInt;
override selector("destinationOfSymbolicLinkAtPath:error:") = NSString, NSString, Pointer[NSError];
override selector("detach") = Void;
override selector("detachNewThreadSelector:toTarget:withObject:") = Void, SelectorHandle, Id, Id;
override selector("developmentLocalization") = NSString;
override selector("dictionary") = Id;
override selector("dictionaryForKey:") = NSDictionary, NSString;
override selector("dictionaryFromTXTRecordData:") = NSDictionary, NSData;
override selector("dictionaryRepresentation") = NSDictionary;
override selector("dictionaryWithCapacity:") = Id, CULong;
override selector("dictionaryWithContentsOfFile:") = Id, NSString;
override selector("dictionaryWithContentsOfURL:") = Id, NSURL;
override selector("dictionaryWithDictionary:") = Id, NSDictionary;
override selector("dictionaryWithObject:forKey:") = Id, Id, Id;
override selector("dictionaryWithObjects:forKeys:") = Id, NSArray, NSArray;
override selector("dictionaryWithObjects:forKeys:count:") = Id, Pointer[Id], Pointer[Id], CULong;
override varargSelector("dictionaryWithObjectsAndKeys:") = Id, Id;
override selector("dictionaryWithValuesForKeys:") = NSDictionary, NSArray;
override selector("didChange:valuesAtIndexes:forKey:") = Void, CULong, NSIndexSet, NSString;
override selector("didChangeValueForKey:") = Void, NSString;
override selector("didChangeValueForKey:withSetMutation:usingObjects:") = Void, NSString, CULong, NSSet;
override selector("didLoadBytes:loadComplete:") = Void, NSData, Bool;
override selector("directParameter") = Id;
override selector("directoryAttributes") = NSDictionary;
override selector("directoryContentsAtPath:") = NSArray, NSString;
override selector("disable") = Void;
override selector("disableCollectorForPointer:") = Void, RawPointer;
override selector("disableSuddenTermination") = Void;
override selector("disableUndoRegistration") = Void;
override selector("disableUpdates") = Void;
override selector("discardContentIfPossible") = Void;
override selector("diskCapacity") = CULong;
override selector("dispatch") = Void;
override selector("dispatchRawAppleEvent:withRawReply:handlerRefCon:") = Short, Pointer[AppleEvent], Pointer[AppleEvent], SRefCon;
override selector("displayNameAtPath:") = NSString, NSString;
override selector("displayNameForKey:value:") = NSString, Id, Id;
override selector("distantFuture") = Id;
override selector("distantPast") = Id;
override selector("distinguishedNames") = NSArray;
override selector("document") = Id;
override selector("documentContentKind") = CULong;
override selector("documentWithRootElement:") = Id, NSXMLElement;
override selector("doesContain:") = Bool, Id;
override selector("doesNotRecognizeSelector:") = Void, SelectorHandle;
override selector("doesRelativeDateFormatting") = Bool;
override selector("domain") = NSString;
override selector("dominantLanguage") = NSString;
override selector("dominantLanguageForScript:") = NSString, NSString;
override selector("dominantScript") = NSString;
override selector("doubleForKey:") = Double, NSString;
override selector("doubleValue") = Double;
override selector("download:canAuthenticateAgainstProtectionSpace:") = Bool, NSURLDownload, NSURLProtectionSpace;
override selector("download:decideDestinationWithSuggestedFilename:") = Void, NSURLDownload, NSString;
override selector("download:didCancelAuthenticationChallenge:") = Void, NSURLDownload, NSURLAuthenticationChallenge;
override selector("download:didCreateDestination:") = Void, NSURLDownload, NSString;
override selector("download:didFailWithError:") = Void, NSURLDownload, NSError;
override selector("download:didReceiveAuthenticationChallenge:") = Void, NSURLDownload, NSURLAuthenticationChallenge;
override selector("download:didReceiveDataOfLength:") = Void, NSURLDownload, CULong;
override selector("download:didReceiveResponse:") = Void, NSURLDownload, NSURLResponse;
override selector("download:shouldDecodeSourceDataOfMIMEType:") = Bool, NSURLDownload, NSString;
override selector("download:willResumeWithResponse:fromByte:") = Void, NSURLDownload, NSURLResponse, Int64;
override selector("download:willSendRequest:redirectResponse:") = NSURLRequest, NSURLDownload, NSURLRequest, NSURLResponse;
override selector("downloadDidBegin:") = Void, NSURLDownload;
override selector("downloadDidFinish:") = Void, NSURLDownload;
override selector("downloadShouldUseCredentialStorage:") = Bool, NSURLDownload;
override selector("drain") = Void;
override selector("duration") = Double;
override selector("earlierDate:") = NSDate, NSDate;
override selector("editingStringForObjectValue:") = NSString, Id;
override selector("elementDeclarationForName:") = NSXMLDTDNode, NSString;
override selector("elementWithName:") = Id, NSString;
override selector("elementWithName:URI:") = Id, NSString, NSString;
override selector("elementWithName:children:attributes:") = Id, NSString, NSArray, NSArray;
override selector("elementWithName:stringValue:") = Id, NSString, NSString;
override selector("elementsForLocalName:URI:") = NSArray, NSString, NSString;
override selector("elementsForName:") = NSArray, NSString;
override selector("enable") = Void;
override selector("enableCollectorForPointer:") = Void, RawPointer;
override selector("enableMultipleThreads") = Void;
override selector("enableSuddenTermination") = Void;
override selector("enableUndoRegistration") = Void;
override selector("enableUpdates") = Void;
override selector("encodeArrayOfObjCType:count:at:") = Void, Pointer[CChar], CULong, RawPointer;
override selector("encodeBool:forKey:") = Void, Bool, NSString;
override selector("encodeBycopyObject:") = Void, Id;
override selector("encodeByrefObject:") = Void, Id;
override selector("encodeBytes:length:") = Void, RawPointer, CULong;
override selector("encodeBytes:length:forKey:") = Void, Pointer[CUChar], CULong, NSString;
override selector("encodeClassName:intoClassName:") = Void, NSString, NSString;
override selector("encodeConditionalObject:") = Void, Id;
override selector("encodeConditionalObject:forKey:") = Void, Id, NSString;
override selector("encodeDataObject:") = Void, NSData;
override selector("encodeDouble:forKey:") = Void, Double, NSString;
override selector("encodeFloat:forKey:") = Void, Float, NSString;
override selector("encodeInt32:forKey:") = Void, Int, NSString;
override selector("encodeInt64:forKey:") = Void, Int64, NSString;
override selector("encodeInt:forKey:") = Void, Int, NSString;
override selector("encodeInteger:forKey:") = Void, CLong, NSString;
override selector("encodeNXObject:") = Void, Id;
override selector("encodeObject:") = Void, Id;
override selector("encodeObject:forKey:") = Void, Id, NSString;
override selector("encodePoint:") = Void, NSPoint;
override selector("encodePoint:forKey:") = Void, NSPoint, NSString;
override selector("encodePortObject:") = Void, NSPort;
override selector("encodePropertyList:") = Void, Id;
override selector("encodeRect:") = Void, NSRect;
override selector("encodeRect:forKey:") = Void, NSRect, NSString;
override selector("encodeRootObject:") = Void, Id;
override selector("encodeSize:") = Void, NSSize;
override selector("encodeSize:forKey:") = Void, NSSize, NSString;
override selector("encodeValueOfObjCType:at:") = Void, Pointer[CChar], RawPointer;
override varargSelector("encodeValuesOfObjCTypes:") = Void, Pointer[CChar];
override selector("encodeWithCoder:") = Void, NSCoder;
override selector("endContentAccess") = Void;
override selector("endEditing") = Void;
override selector("endLoadInBackground") = Void;
override selector("endSpecifier") = NSScriptObjectSpecifier;
override selector("endSubelementIdentifier") = CULong;
override selector("endSubelementIndex") = CLong;
override selector("endUndoGrouping") = Void;
override selector("enqueueNotification:postingStyle:") = Void, NSNotification, CULong;
override selector("enqueueNotification:postingStyle:coalesceMask:forModes:") = Void, NSNotification, CULong, CULong, NSArray;
override selector("entityDeclarationForName:") = NSXMLDTDNode, NSString;
override selector("enumCodeValue") = UInt;
override selector("enumerateAttribute:inRange:options:usingBlock:") = Void, NSString, NSRange, CULong, UnknownType;
override selector("enumerateAttributesInRange:options:usingBlock:") = Void, NSRange, CULong, UnknownType;
override selector("enumerateIndexesInRange:options:usingBlock:") = Void, NSRange, CULong, UnknownType;
override selector("enumerateIndexesUsingBlock:") = Void, UnknownType;
override selector("enumerateIndexesWithOptions:usingBlock:") = Void, CULong, UnknownType;
override selector("enumerateKeysAndObjectsUsingBlock:") = Void, UnknownType;
override selector("enumerateKeysAndObjectsWithOptions:usingBlock:") = Void, CULong, UnknownType;
override selector("enumerateLinesUsingBlock:") = Void, UnknownType;
override selector("enumerateObjectsAtIndexes:options:usingBlock:") = Void, NSIndexSet, CULong, UnknownType;
override selector("enumerateObjectsUsingBlock:") = Void, UnknownType;
override selector("enumerateObjectsWithOptions:usingBlock:") = Void, CULong, UnknownType;
override selector("enumerateSubstringsInRange:options:usingBlock:") = Void, NSRange, CULong, UnknownType;
override selector("enumeratorAtPath:") = NSDirectoryEnumerator, NSString;
override selector("enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:") = NSDirectoryEnumerator, NSURL, NSArray, CULong, UnknownType;
override selector("environment") = NSDictionary;
override selector("era") = CLong;
override selector("eraSymbols") = NSArray;
override selector("error") = NSError;
override selector("errorWithDomain:code:userInfo:") = Id, NSString, CLong, NSDictionary;
override selector("evaluate") = Void;
override selector("evaluateWithObject:") = Bool, Id;
override selector("evaluateWithObject:substitutionVariables:") = Bool, Id, NSDictionary;
override selector("evaluatedArguments") = NSDictionary;
override selector("evaluatedReceivers") = Id;
override selector("evaluationErrorNumber") = CLong;
override selector("evaluationErrorSpecifier") = NSScriptObjectSpecifier;
override selector("eventClass") = UInt;
override selector("eventID") = UInt;
override selector("evictsObjectsWithDiscardedContent") = Bool;
override selector("exceptionDuringOperation:error:leftOperand:rightOperand:") = NSDecimalNumber, SelectorHandle, CULong, NSDecimalNumber, NSDecimalNumber;
override selector("exceptionWithName:reason:userInfo:") = NSException, NSString, NSString, NSDictionary;
override selector("exchangeObjectAtIndex:withObjectAtIndex:") = Void, CULong, CULong;
override selector("executableArchitectures") = NSArray;
override selector("executablePath") = NSString;
override selector("executableURL") = NSURL;
override selector("executeAndReturnError:") = NSAppleEventDescriptor, Pointer[NSDictionary];
override selector("executeAppleEvent:error:") = NSAppleEventDescriptor, NSAppleEventDescriptor, Pointer[NSDictionary];
override selector("executeCommand") = Id;
override selector("executionBlocks") = NSArray;
override selector("exit") = Void;
override selector("expectedContentLength") = Int64;
override selector("expectedResourceDataSize") = Int64;
override selector("expiresDate") = NSDate;
override selector("exponentSymbol") = NSString;
override selector("expressionBlock") = UnknownType;
override selector("expressionForAggregate:") = NSExpression, NSArray;
override selector("expressionForBlock:arguments:") = NSExpression, UnknownType, NSArray;
override selector("expressionForConstantValue:") = NSExpression, Id;
override selector("expressionForEvaluatedObject") = NSExpression;
override selector("expressionForFunction:arguments:") = NSExpression, NSString, NSArray;
override selector("expressionForFunction:selectorName:arguments:") = NSExpression, NSExpression, NSString, NSArray;
override selector("expressionForIntersectSet:with:") = NSExpression, NSExpression, NSExpression;
override selector("expressionForKeyPath:") = NSExpression, NSString;
override selector("expressionForMinusSet:with:") = NSExpression, NSExpression, NSExpression;
override selector("expressionForSubquery:usingIteratorVariable:predicate:") = NSExpression, NSExpression, NSString, Id;
override selector("expressionForUnionSet:with:") = NSExpression, NSExpression, NSExpression;
override selector("expressionForVariable:") = NSExpression, NSString;
override selector("expressionType") = CULong;
override selector("expressionValueWithObject:context:") = Id, Id, NSMutableDictionary;
override selector("failureReason") = NSString;
override selector("failureResponse") = NSURLResponse;
override selector("fastestEncoding") = CULong;
override selector("fileAttributes") = NSDictionary;
override selector("fileAttributesAtPath:traverseLink:") = NSDictionary, NSString, Bool;
override selector("fileCreationDate") = NSDate;
override selector("fileDescriptor") = Int;
override selector("fileExistsAtPath:") = Bool, NSString;
override selector("fileExistsAtPath:isDirectory:") = Bool, NSString, Pointer[Bool];
override selector("fileExtensionHidden") = Bool;
override selector("fileGroupOwnerAccountID") = NSNumber;
override selector("fileGroupOwnerAccountName") = NSString;
override selector("fileHFSCreatorCode") = UInt;
override selector("fileHFSTypeCode") = UInt;
override selector("fileHandleForReading") = NSFileHandle;
override selector("fileHandleForReadingAtPath:") = Id, NSString;
override selector("fileHandleForReadingFromURL:error:") = Id, NSURL, Pointer[NSError];
override selector("fileHandleForUpdatingAtPath:") = Id, NSString;
override selector("fileHandleForUpdatingURL:error:") = Id, NSURL, Pointer[NSError];
override selector("fileHandleForWriting") = NSFileHandle;
override selector("fileHandleForWritingAtPath:") = Id, NSString;
override selector("fileHandleForWritingToURL:error:") = Id, NSURL, Pointer[NSError];
override selector("fileHandleWithNullDevice") = Id;
override selector("fileHandleWithStandardError") = Id;
override selector("fileHandleWithStandardInput") = Id;
override selector("fileHandleWithStandardOutput") = Id;
override selector("fileIsAppendOnly") = Bool;
override selector("fileIsImmutable") = Bool;
override selector("fileManager:shouldCopyItemAtPath:toPath:") = Bool, NSFileManager, NSString, NSString;
override selector("fileManager:shouldCopyItemAtURL:toURL:") = Bool, NSFileManager, NSURL, NSURL;
override selector("fileManager:shouldLinkItemAtPath:toPath:") = Bool, NSFileManager, NSString, NSString;
override selector("fileManager:shouldLinkItemAtURL:toURL:") = Bool, NSFileManager, NSURL, NSURL;
override selector("fileManager:shouldMoveItemAtPath:toPath:") = Bool, NSFileManager, NSString, NSString;
override selector("fileManager:shouldMoveItemAtURL:toURL:") = Bool, NSFileManager, NSURL, NSURL;
override selector("fileManager:shouldProceedAfterError:") = Bool, NSFileManager, NSDictionary;
override selector("fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:") = Bool, NSFileManager, NSError, NSString, NSString;
override selector("fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:") = Bool, NSFileManager, NSError, NSURL, NSURL;
override selector("fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:") = Bool, NSFileManager, NSError, NSString, NSString;
override selector("fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:") = Bool, NSFileManager, NSError, NSURL, NSURL;
override selector("fileManager:shouldProceedAfterError:movingItemAtPath:toPath:") = Bool, NSFileManager, NSError, NSString, NSString;
override selector("fileManager:shouldProceedAfterError:movingItemAtURL:toURL:") = Bool, NSFileManager, NSError, NSURL, NSURL;
override selector("fileManager:shouldProceedAfterError:removingItemAtPath:") = Bool, NSFileManager, NSError, NSString;
override selector("fileManager:shouldProceedAfterError:removingItemAtURL:") = Bool, NSFileManager, NSError, NSURL;
override selector("fileManager:shouldRemoveItemAtPath:") = Bool, NSFileManager, NSString;
override selector("fileManager:shouldRemoveItemAtURL:") = Bool, NSFileManager, NSURL;
override selector("fileManager:willProcessPath:") = Void, NSFileManager, NSString;
override selector("fileModificationDate") = NSDate;
override selector("fileOwnerAccountID") = NSNumber;
override selector("fileOwnerAccountName") = NSString;
override selector("filePathURL") = NSURL;
override selector("filePosixPermissions") = CULong;
override selector("fileReferenceURL") = NSURL;
override selector("fileSize") = UInt64;
override selector("fileSystemAttributesAtPath:") = NSDictionary, NSString;
override selector("fileSystemFileNumber") = CULong;
override selector("fileSystemNumber") = CLong;
override selector("fileSystemRepresentation") = Pointer[CChar];
override selector("fileSystemRepresentationWithPath:") = Pointer[CChar], NSString;
override selector("fileType") = NSString;
override selector("fileURLWithPath:") = Id, NSString;
override selector("fileURLWithPath:isDirectory:") = Id, NSString, Bool;
override selector("fileURLWithPathComponents:") = NSURL, NSArray;
override selector("filterUsingPredicate:") = Void, NSPredicate;
override selector("filteredArrayUsingPredicate:") = NSArray, NSPredicate;
override selector("filteredSetUsingPredicate:") = NSSet, NSPredicate;
override selector("finalize") = Void;
override selector("finishDecoding") = Void;
override selector("finishEncoding") = Void;
override selector("fire") = Void;
override selector("fireDate") = NSDate;
override selector("firstIndex") = CULong;
override selector("firstObjectCommonWithArray:") = Id, NSArray;
override selector("firstWeekday") = CULong;
override selector("floatForKey:") = Float, NSString;
override selector("floatValue") = Float;
override selector("flushCachedData") = Void;
override selector("flushHostCache") = Void;
override selector("formIntersectionWithCharacterSet:") = Void, NSCharacterSet;
override selector("formUnionWithCharacterSet:") = Void, NSCharacterSet;
override selector("format") = NSString;
override selector("formatWidth") = CULong;
override selector("formatterBehavior") = CULong;
override selector("forwardInvocation:") = Void, NSInvocation;
override selector("forwardingTargetForSelector:") = Id, SelectorHandle;
override selector("fragment") = NSString;
override selector("frameLength") = CULong;
override selector("function") = NSString;
override selector("generatesCalendarDates") = Bool;
override selector("generatesDecimalNumbers") = Bool;
override selector("getArgument:atIndex:") = Void, RawPointer, CLong;
override selector("getArgumentTypeAtIndex:") = Pointer[CChar], CULong;
override selector("getBuffer:length:") = Bool, Pointer[Pointer[CUChar]], Pointer[CULong];
override selector("getBytes:") = Void, RawPointer;
override selector("getBytes:length:") = Void, RawPointer, CULong;
override selector("getBytes:maxLength:usedLength:encoding:options:range:remainingRange:") = Bool, RawPointer, CULong, Pointer[CULong], CULong, CULong, NSRange, NSRangePointer;
override selector("getBytes:range:") = Void, RawPointer, NSRange;
override selector("getCFRunLoop") = CFRunLoopRef;
override selector("getCString:") = Void, Pointer[CChar];
override selector("getCString:maxLength:") = Void, Pointer[CChar], CULong;
override selector("getCString:maxLength:encoding:") = Bool, Pointer[CChar], CULong, CULong;
override selector("getCString:maxLength:range:remainingRange:") = Void, Pointer[CChar], CULong, NSRange, NSRangePointer;
override selector("getCharacters:") = Void, Pointer[UShort];
override selector("getCharacters:range:") = Void, Pointer[UShort], NSRange;
override selector("getFileSystemRepresentation:maxLength:") = Bool, Pointer[CChar], CULong;
override selector("getIndexes:") = Void, Pointer[CULong];
override selector("getIndexes:maxCount:inIndexRange:") = CULong, Pointer[CULong], CULong, NSRangePointer;
override selector("getInputStream:outputStream:") = Bool, Pointer[NSInputStream], Pointer[NSOutputStream];
override selector("getLineStart:end:contentsEnd:forRange:") = Void, Pointer[CULong], Pointer[CULong], Pointer[CULong], NSRange;
override selector("getObjectValue:forString:errorDescription:") = Bool, Pointer[Id], NSString, Pointer[NSString];
override selector("getObjectValue:forString:range:error:") = Bool, Pointer[Id], NSString, Pointer[NSRange], Pointer[NSError];
override selector("getObjects:") = Void, Pointer[Id];
override selector("getObjects:andKeys:") = Void, Pointer[Id], Pointer[Id];
override selector("getObjects:range:") = Void, Pointer[Id], NSRange;
override selector("getParagraphStart:end:contentsEnd:forRange:") = Void, Pointer[CULong], Pointer[CULong], Pointer[CULong], NSRange;
override selector("getResourceValue:forKey:error:") = Bool, Pointer[Id], NSString, Pointer[NSError];
override selector("getReturnValue:") = Void, RawPointer;
override selector("getStreamsToHost:port:inputStream:outputStream:") = Void, NSHost, CLong, Pointer[NSInputStream], Pointer[NSOutputStream];
override selector("getValue:") = Void, RawPointer;
override selector("globallyUniqueString") = NSString;
override selector("grammarCheckingResultWithRange:details:") = NSTextCheckingResult, NSRange, NSArray;
override selector("grammarDetails") = NSArray;
override selector("gregorianStartDate") = NSDate;
override selector("groupedResults") = NSArray;
override selector("groupingAttributes") = NSArray;
override selector("groupingLevel") = CLong;
override selector("groupingSeparator") = NSString;
override selector("groupingSize") = CULong;
override selector("groupsByEvent") = Bool;
override varargSelector("handleFailureInFunction:file:lineNumber:description:") = Void, NSString, NSString, CLong, NSString;
override varargSelector("handleFailureInMethod:object:file:lineNumber:description:") = Void, SelectorHandle, Id, NSString, CLong, NSString;
override selector("handleMachMessage:") = Void, RawPointer;
override selector("handlePortMessage:") = Void, NSPortMessage;
override selector("handleQueryWithUnboundKey:") = Id, NSString;
override selector("handleTakeValue:forUnboundKey:") = Void, Id, NSString;
override selector("hasBytesAvailable") = Bool;
override selector("hasMemberInPlane:") = Bool, CUChar;
override selector("hasOrderedToManyRelationshipForKey:") = Bool, NSString;
override selector("hasPassword") = Bool;
override selector("hasPrefix:") = Bool, NSString;
override selector("hasPropertyForKey:") = Bool, NSString;
override selector("hasReadablePropertyForKey:") = Bool, NSString;
override selector("hasSpaceAvailable") = Bool;
override selector("hasSuffix:") = Bool, NSString;
override selector("hasThousandSeparators") = Bool;
override selector("hasWritablePropertyForKey:") = Bool, NSString;
override selector("hash") = CULong;
override selector("hashFunction") = CCodePointer[[RawPointer,CCodePointer[[RawPointer],[CULong]]],[CULong]];
override selector("hashTableWithOptions:") = Id, CULong;
override selector("hashTableWithWeakObjects") = Id;
override selector("helpAnchor") = NSString;
override selector("host") = NSString;
override selector("hostName") = NSString;
override selector("hostWithAddress:") = NSHost, NSString;
override selector("hostWithName:") = NSHost, NSString;
override selector("hour") = CLong;
override selector("hourOfDay") = CLong;
override selector("identity") = SecIdentityRef;
override selector("illegalCharacterSet") = Id;
override selector("implementationClassName") = NSString;
override selector("increaseLengthBy:") = Void, CULong;
override selector("independentConversationQueueing") = Bool;
override selector("index") = CULong;
override selector("indexAtPosition:") = CULong, CULong;
override selector("indexGreaterThanIndex:") = CULong, CULong;
override selector("indexGreaterThanOrEqualToIndex:") = CULong, CULong;
override selector("indexInRange:options:passingTest:") = CULong, NSRange, CULong, UnknownType;
override selector("indexLessThanIndex:") = CULong, CULong;
override selector("indexLessThanOrEqualToIndex:") = CULong, CULong;
override selector("indexOfObject:") = CULong, Id;
override selector("indexOfObject:inRange:") = CULong, Id, NSRange;
override selector("indexOfObject:inSortedRange:options:usingComparator:") = CULong, Id, NSRange, CULong, NSComparator;
override selector("indexOfObjectAtIndexes:options:passingTest:") = CULong, NSIndexSet, CULong, UnknownType;
override selector("indexOfObjectIdenticalTo:") = CULong, Id;
override selector("indexOfObjectIdenticalTo:inRange:") = CULong, Id, NSRange;
override selector("indexOfObjectPassingTest:") = CULong, UnknownType;
override selector("indexOfObjectWithOptions:passingTest:") = CULong, CULong, UnknownType;
override selector("indexOfResult:") = CULong, Id;
override selector("indexPassingTest:") = CULong, UnknownType;
override selector("indexPathByAddingIndex:") = NSIndexPath, CULong;
override selector("indexPathByRemovingLastIndex") = NSIndexPath;
override selector("indexPathWithIndex:") = Id, CULong;
override selector("indexPathWithIndexes:length:") = Id, Pointer[CULong], CULong;
override selector("indexSet") = Id;
override selector("indexSetWithIndex:") = Id, CULong;
override selector("indexSetWithIndexesInRange:") = Id, NSRange;
override selector("indexWithOptions:passingTest:") = CULong, CULong, UnknownType;
override selector("indexesInRange:options:passingTest:") = NSIndexSet, NSRange, CULong, UnknownType;
override selector("indexesOfObjectsAtIndexes:options:passingTest:") = NSIndexSet, NSIndexSet, CULong, UnknownType;
override selector("indexesOfObjectsPassingTest:") = NSIndexSet, UnknownType;
override selector("indexesOfObjectsWithOptions:passingTest:") = NSIndexSet, CULong, UnknownType;
override selector("indexesPassingTest:") = NSIndexSet, UnknownType;
override selector("indexesWithOptions:passingTest:") = NSIndexSet, CULong, UnknownType;
override selector("indicesOfObjectsByEvaluatingObjectSpecifier:") = NSArray, NSScriptObjectSpecifier;
override selector("indicesOfObjectsByEvaluatingWithContainer:count:") = Pointer[CLong], Id, Pointer[CLong];
override selector("infoDictionary") = NSDictionary;
override selector("init") = Id;
override selector("initAndTestWithTests:") = Id, NSArray;
override selector("initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:") = Id, NSData, CULong, NSURL, Pointer[Bool], Pointer[NSError];
override selector("initFileURLWithPath:") = Id, NSString;
override selector("initFileURLWithPath:isDirectory:") = Id, NSString, Bool;
override selector("initForReadingWithData:") = Id, NSData;
override selector("initForWritingWithMutableData:") = Id, NSMutableData;
override selector("initListDescriptor") = Id;
override selector("initNotTestWithTest:") = Id, NSScriptWhoseTest;
override selector("initOrTestWithTests:") = Id, NSArray;
override selector("initRecordDescriptor") = Id;
override selector("initRemoteWithProtocolFamily:socketType:protocol:address:") = Id, Int, Int, Int, NSData;
override selector("initRemoteWithTCPPort:host:") = Id, UShort, NSString;
override selector("initToBuffer:capacity:") = Id, Pointer[CUChar], CULong;
override selector("initToFileAtPath:append:") = Id, NSString, Bool;
override selector("initToMemory") = Id;
override selector("initWithAEDescNoCopy:") = Id, Pointer[AEDesc];
override selector("initWithArray:") = Id, NSArray;
override selector("initWithArray:copyItems:") = Id, NSArray, Bool;
override selector("initWithAttributedString:") = Id, NSAttributedString;
override selector("initWithAuthenticationChallenge:sender:") = Id, NSURLAuthenticationChallenge, Id;
override selector("initWithBool:") = Id, Bool;
override selector("initWithBytes:length:") = Id, RawPointer, CULong;
override selector("initWithBytes:length:encoding:") = Id, RawPointer, CULong, CULong;
override selector("initWithBytes:objCType:") = Id, RawPointer, Pointer[CChar];
override selector("initWithBytesNoCopy:length:") = Id, RawPointer, CULong;
override selector("initWithBytesNoCopy:length:encoding:freeWhenDone:") = Id, RawPointer, CULong, CULong, Bool;
override selector("initWithBytesNoCopy:length:freeWhenDone:") = Id, RawPointer, CULong, Bool;
override selector("initWithCString:") = Id, Pointer[CChar];
override selector("initWithCString:encoding:") = Id, Pointer[CChar], CULong;
override selector("initWithCString:length:") = Id, Pointer[CChar], CULong;
override selector("initWithCStringNoCopy:length:freeWhenDone:") = Id, Pointer[CChar], CULong, Bool;
override selector("initWithCalendarIdentifier:") = Id, NSString;
override selector("initWithCapacity:") = Id, CULong;
override selector("initWithChar:") = Id, CChar;
override selector("initWithCharacters:length:") = Id, Pointer[UShort], CULong;
override selector("initWithCharactersNoCopy:length:freeWhenDone:") = Id, Pointer[UShort], CULong, Bool;
override selector("initWithCoder:") = Id, NSCoder;
override selector("initWithCommandDescription:") = Id, NSScriptCommandDescription;
override selector("initWithCondition:") = Id, CLong;
override selector("initWithContainerClassDescription:containerSpecifier:key:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString;
override selector("initWithContainerClassDescription:containerSpecifier:key:index:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, CLong;
override selector("initWithContainerClassDescription:containerSpecifier:key:name:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, NSString;
override selector("initWithContainerClassDescription:containerSpecifier:key:relativePosition:baseSpecifier:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, CULong, NSScriptObjectSpecifier;
override selector("initWithContainerClassDescription:containerSpecifier:key:startSpecifier:endSpecifier:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, NSScriptObjectSpecifier, NSScriptObjectSpecifier;
override selector("initWithContainerClassDescription:containerSpecifier:key:test:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, NSScriptWhoseTest;
override selector("initWithContainerClassDescription:containerSpecifier:key:uniqueID:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, Id;
override selector("initWithContainerSpecifier:key:") = Id, NSScriptObjectSpecifier, NSString;
override selector("initWithContentsOfFile:") = Id, NSString;
override selector("initWithContentsOfFile:encoding:error:") = Id, NSString, CULong, Pointer[NSError];
override selector("initWithContentsOfFile:options:error:") = Id, NSString, CULong, Pointer[NSError];
override selector("initWithContentsOfFile:usedEncoding:error:") = Id, NSString, Pointer[CULong], Pointer[NSError];
override selector("initWithContentsOfMappedFile:") = Id, NSString;
override selector("initWithContentsOfURL:") = Id, NSURL;
override selector("initWithContentsOfURL:encoding:error:") = Id, NSURL, CULong, Pointer[NSError];
override selector("initWithContentsOfURL:error:") = Id, NSURL, Pointer[NSDictionary];
override selector("initWithContentsOfURL:options:error:") = Id, NSURL, CULong, Pointer[NSError];
override selector("initWithContentsOfURL:usedEncoding:error:") = Id, NSURL, Pointer[CULong], Pointer[NSError];
override selector("initWithData:") = Id, NSData;
override selector("initWithData:encoding:") = Id, NSData, CULong;
override selector("initWithData:options:error:") = Id, NSData, CULong, Pointer[NSError];
override selector("initWithDateFormat:allowNaturalLanguage:") = Id, NSString, Bool;
override selector("initWithDecimal:") = Id, NSDecimal;
override selector("initWithDescriptorType:bytes:length:") = Id, UInt, RawPointer, CULong;
override selector("initWithDescriptorType:data:") = Id, UInt, NSData;
override selector("initWithDictionary:") = Id, NSDictionary;
override selector("initWithDictionary:copyItems:") = Id, NSDictionary, Bool;
override selector("initWithDomain:code:userInfo:") = Id, NSString, CLong, NSDictionary;
override selector("initWithDomain:type:name:") = Id, NSString, NSString, NSString;
override selector("initWithDomain:type:name:port:") = Id, NSString, NSString, NSString, Int;
override selector("initWithDominantScript:languageMap:") = Id, NSString, NSDictionary;
override selector("initWithDouble:") = Id, Double;
override selector("initWithEventClass:eventID:targetDescriptor:returnID:transactionID:") = Id, UInt, UInt, NSAppleEventDescriptor, Short, Int;
override selector("initWithExpressionType:") = Id, CULong;
override selector("initWithFileAtPath:") = Id, NSString;
override selector("initWithFileDescriptor:") = Id, Int;
override selector("initWithFileDescriptor:closeOnDealloc:") = Id, Int, Bool;
override selector("initWithFireDate:interval:target:selector:userInfo:repeats:") = Id, NSDate, Double, Id, SelectorHandle, Id, Bool;
override selector("initWithFloat:") = Id, Float;
override varargSelector("initWithFormat:") = Id, NSString;
override selector("initWithFormat:arguments:") = Id, NSString, Pointer[__va_list_tag];
override varargSelector("initWithFormat:locale:") = Id, NSString, Id;
override selector("initWithFormat:locale:arguments:") = Id, NSString, Id, Pointer[__va_list_tag];
override selector("initWithHost:port:protocol:realm:authenticationMethod:") = Id, NSString, CLong, NSString, NSString, NSString;
override selector("initWithIdentity:certificates:persistence:") = Id, SecIdentityRef, NSArray, CULong;
override selector("initWithIndex:") = Id, CULong;
override selector("initWithIndexSet:") = Id, NSIndexSet;
override selector("initWithIndexes:length:") = Id, Pointer[CULong], CULong;
override selector("initWithIndexesInRange:") = Id, NSRange;
override selector("initWithInt:") = Id, Int;
override selector("initWithInteger:") = Id, CLong;
override selector("initWithInvocation:") = Id, NSInvocation;
override selector("initWithKey:ascending:") = Id, NSString, Bool;
override selector("initWithKey:ascending:comparator:") = Id, NSString, Bool, NSComparator;
override selector("initWithKey:ascending:selector:") = Id, NSString, Bool, SelectorHandle;
override selector("initWithKeyOptions:valueOptions:capacity:") = Id, CULong, CULong, CULong;
override selector("initWithKeyPointerFunctions:valuePointerFunctions:capacity:") = Id, NSPointerFunctions, NSPointerFunctions, CULong;
override selector("initWithKind:") = Id, CULong;
override selector("initWithKind:options:") = Id, CULong, CULong;
override selector("initWithLeftExpression:rightExpression:customSelector:") = Id, NSExpression, NSExpression, SelectorHandle;
override selector("initWithLeftExpression:rightExpression:modifier:type:options:") = Id, NSExpression, NSExpression, CULong, CULong, CULong;
override selector("initWithLength:") = Id, CULong;
override selector("initWithLocal:connection:") = Id, Id, NSConnection;
override selector("initWithLocaleIdentifier:") = Id, NSString;
override selector("initWithLong:") = Id, CLong;
override selector("initWithLongLong:") = Id, Int64;
override selector("initWithMachPort:") = Id, UInt;
override selector("initWithMachPort:options:") = Id, UInt, CULong;
override selector("initWithMantissa:exponent:isNegative:") = Id, UInt64, Short, Bool;
override selector("initWithMemoryCapacity:diskCapacity:diskPath:") = Id, CULong, CULong, NSString;
override selector("initWithName:") = Id, NSString;
override selector("initWithName:URI:") = Id, NSString, NSString;
override selector("initWithName:data:") = Id, NSString, NSData;
override selector("initWithName:reason:userInfo:") = Id, NSString, NSString, NSDictionary;
override selector("initWithName:stringValue:") = Id, NSString, NSString;
override selector("initWithNotificationCenter:") = Id, NSNotificationCenter;
override selector("initWithObjectSpecifier:comparisonOperator:testObject:") = Id, NSScriptObjectSpecifier, CULong, Id;
override varargSelector("initWithObjects:") = Id, Id;
override selector("initWithObjects:count:") = Id, Pointer[Id], CULong;
override selector("initWithObjects:forKeys:") = Id, NSArray, NSArray;
override selector("initWithObjects:forKeys:count:") = Id, Pointer[Id], Pointer[Id], CULong;
override varargSelector("initWithObjectsAndKeys:") = Id, Id;
override selector("initWithOptions:") = Id, CULong;
override selector("initWithOptions:capacity:") = Id, CULong, CULong;
override selector("initWithPath:") = Id, NSString;
override selector("initWithPointerFunctions:") = Id, NSPointerFunctions;
override selector("initWithPointerFunctions:capacity:") = Id, NSPointerFunctions, CULong;
override selector("initWithPosition:objectSpecifier:") = Id, CULong, NSScriptObjectSpecifier;
override selector("initWithProperties:") = Id, NSDictionary;
override selector("initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:sender:") = Id, NSURLProtectionSpace, NSURLCredential, CLong, NSURLResponse, NSError, Id;
override selector("initWithProtocolFamily:socketType:protocol:address:") = Id, Int, Int, Int, NSData;
override selector("initWithProtocolFamily:socketType:protocol:socket:") = Id, Int, Int, Int, Int;
override selector("initWithProxyHost:port:type:realm:authenticationMethod:") = Id, NSString, CLong, NSString, NSString, NSString;
override selector("initWithReceivePort:sendPort:") = Id, NSPort, NSPort;
override selector("initWithReceivePort:sendPort:components:") = Id, NSPort, NSPort, NSArray;
override selector("initWithRequest:cachedResponse:client:") = Id, NSURLRequest, NSCachedURLResponse, Id;
override selector("initWithRequest:delegate:") = Id, NSURLRequest, Id;
override selector("initWithRequest:delegate:startImmediately:") = Id, NSURLRequest, Id, Bool;
override selector("initWithResponse:data:") = Id, NSURLResponse, NSData;
override selector("initWithResponse:data:userInfo:storagePolicy:") = Id, NSURLResponse, NSData, NSDictionary, CULong;
override selector("initWithResumeData:delegate:path:") = Id, NSData, Id, NSString;
override selector("initWithRootElement:") = Id, NSXMLElement;
override selector("initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:") = Id, CULong, Short, Bool, Bool, Bool, Bool;
override selector("initWithScheme:host:path:") = Id, NSString, NSString, NSString;
override selector("initWithSendPort:receivePort:components:") = Id, NSPort, NSPort, NSArray;
override selector("initWithSet:") = Id, NSSet;
override selector("initWithSet:copyItems:") = Id, NSSet, Bool;
override selector("initWithShort:") = Id, Short;
override selector("initWithSource:") = Id, NSString;
override selector("initWithStorageLocation:") = Id, NSURL;
override selector("initWithString:") = Id, NSString;
override selector("initWithString:attributes:") = Id, NSString, NSDictionary;
override selector("initWithString:calendarFormat:") = Id, NSString, NSString;
override selector("initWithString:calendarFormat:locale:") = Id, NSString, NSString, Id;
override selector("initWithString:locale:") = Id, NSString, Id;
override selector("initWithString:relativeToURL:") = Id, NSString, NSURL;
override selector("initWithSuiteName:className:dictionary:") = Id, NSString, NSString, NSDictionary;
override selector("initWithSuiteName:commandName:dictionary:") = Id, NSString, NSString, NSDictionary;
override selector("initWithTCPPort:") = Id, UShort;
override selector("initWithTarget:connection:") = Id, Id, NSConnection;
override selector("initWithTarget:protocol:") = Id, NSObject, Id;
override selector("initWithTarget:selector:object:") = Id, Id, SelectorHandle, Id;
override selector("initWithTimeInterval:sinceDate:") = Id, Double, NSDate;
override selector("initWithTimeIntervalSince1970:") = Id, Double;
override selector("initWithTimeIntervalSinceNow:") = Id, Double;
override selector("initWithTimeIntervalSinceReferenceDate:") = Id, Double;
override selector("initWithTransform:") = Id, NSAffineTransform;
override selector("initWithTrust:") = Id, SecTrustRef;
override selector("initWithType:subpredicates:") = Id, CULong, NSArray;
override selector("initWithURL:") = Id, NSURL;
override selector("initWithURL:MIMEType:expectedContentLength:textEncodingName:") = Id, NSURL, NSString, CLong, NSString;
override selector("initWithURL:append:") = Id, NSURL, Bool;
override selector("initWithURL:cachePolicy:timeoutInterval:") = Id, NSURL, CULong, Double;
override selector("initWithURL:cached:") = Id, NSURL, Bool;
override selector("initWithUTF8String:") = Id, Pointer[CChar];
override selector("initWithUnsignedChar:") = Id, CUChar;
override selector("initWithUnsignedInt:") = Id, UInt;
override selector("initWithUnsignedInteger:") = Id, CULong;
override selector("initWithUnsignedLong:") = Id, CULong;
override selector("initWithUnsignedLongLong:") = Id, UInt64;
override selector("initWithUnsignedShort:") = Id, UShort;
override selector("initWithUser:") = Id, NSString;
override selector("initWithUser:password:persistence:") = Id, NSString, NSString, CULong;
override selector("initWithXMLString:") = Id, NSString;
override selector("initWithXMLString:error:") = Id, NSString, Pointer[NSError];
override selector("initWithXMLString:options:error:") = Id, NSString, CULong, Pointer[NSError];
override selector("initWithYear:month:day:hour:minute:second:timeZone:") = Id, CLong, CULong, CULong, CULong, CULong, CULong, NSTimeZone;
override selector("initialize") = Void;
override selector("inputStreamWithData:") = Id, NSData;
override selector("inputStreamWithFileAtPath:") = Id, NSString;
override selector("inputStreamWithURL:") = Id, NSURL;
override selector("insertAttributedString:atIndex:") = Void, NSAttributedString, CULong;
override selector("insertChild:atIndex:") = Void, NSXMLNode, CULong;
override selector("insertChildren:atIndex:") = Void, NSArray, CULong;
override selector("insertDescriptor:atIndex:") = Void, NSAppleEventDescriptor, CLong;
override selector("insertObject:atIndex:") = Void, Id, CULong;
override selector("insertObjects:atIndexes:") = Void, NSArray, NSIndexSet;
override selector("insertPointer:atIndex:") = Void, RawPointer, CULong;
override selector("insertString:atIndex:") = Void, NSString, CULong;
override selector("insertValue:atIndex:inPropertyWithKey:") = Void, Id, CULong, NSString;
override selector("insertValue:inPropertyWithKey:") = Void, Id, NSString;
override selector("insertionContainer") = Id;
override selector("insertionIndex") = CLong;
override selector("insertionKey") = NSString;
override selector("insertionReplaces") = Bool;
override selector("instanceMethodForSelector:") = IMP, SelectorHandle;
override selector("instanceMethodSignatureForSelector:") = NSMethodSignature, SelectorHandle;
override selector("instancesRespondToSelector:") = Bool, SelectorHandle;
override selector("int32Value") = Int;
override selector("intValue") = Int;
override selector("integerForKey:") = CLong, NSString;
override selector("integerValue") = CLong;
override selector("internationalCurrencySymbol") = NSString;
override selector("interrupt") = Void;
override selector("intersectHashTable:") = Void, NSHashTable;
override selector("intersectSet:") = Void, NSSet;
override selector("intersectsHashTable:") = Bool, NSHashTable;
override selector("intersectsIndexesInRange:") = Bool, NSRange;
override selector("intersectsSet:") = Bool, NSSet;
override selector("invalidate") = Void;
override selector("invalidateClassDescriptionCache") = Void;
override selector("inverseForRelationshipKey:") = NSString, NSString;
override selector("invert") = Void;
override selector("invertedSet") = NSCharacterSet;
override selector("invocation") = NSInvocation;
override selector("invocationWithMethodSignature:") = NSInvocation, NSMethodSignature;
override selector("invoke") = Void;
override selector("invokeWithTarget:") = Void, Id;
override selector("isAbsolutePath") = Bool;
override selector("isAtEnd") = Bool;
override selector("isBycopy") = Bool;
override selector("isByref") = Bool;
override selector("isCancelled") = Bool;
override selector("isCaseInsensitiveLike:") = Bool, NSString;
override selector("isCollecting") = Bool;
override selector("isCompiled") = Bool;
override selector("isConcurrent") = Bool;
override selector("isContentDiscarded") = Bool;
override selector("isDaylightSavingTime") = Bool;
override selector("isDaylightSavingTimeForDate:") = Bool, NSDate;
override selector("isDeletableFileAtPath:") = Bool, NSString;
override selector("isEnabled") = Bool;
override selector("isEqual:") = Bool, Id;
override selector("isEqualFunction") = CCodePointer[[RawPointer,RawPointer,CCodePointer[[RawPointer],[CULong]]],[CChar]];
override selector("isEqualTo:") = Bool, Id;
override selector("isEqualToArray:") = Bool, NSArray;
override selector("isEqualToAttributedString:") = Bool, NSAttributedString;
override selector("isEqualToData:") = Bool, NSData;
override selector("isEqualToDate:") = Bool, NSDate;
override selector("isEqualToDictionary:") = Bool, NSDictionary;
override selector("isEqualToHashTable:") = Bool, NSHashTable;
override selector("isEqualToHost:") = Bool, NSHost;
override selector("isEqualToIndexSet:") = Bool, NSIndexSet;
override selector("isEqualToNumber:") = Bool, NSNumber;
override selector("isEqualToSet:") = Bool, NSSet;
override selector("isEqualToString:") = Bool, NSString;
override selector("isEqualToTimeZone:") = Bool, NSTimeZone;
override selector("isEqualToValue:") = Bool, NSValue;
override selector("isExecutableFileAtPath:") = Bool, NSString;
override selector("isExecuting") = Bool;
override selector("isExternal") = Bool;
override selector("isFileReferenceURL") = Bool;
override selector("isFileURL") = Bool;
override selector("isFinished") = Bool;
override selector("isGathering") = Bool;
override selector("isGreaterThan:") = Bool, Id;
override selector("isGreaterThanOrEqualTo:") = Bool, Id;
override selector("isHTTPOnly") = Bool;
override selector("isHostCacheEnabled") = Bool;
override selector("isKindOfClass:") = Bool, Id;
override selector("isLenient") = Bool;
override selector("isLessThan:") = Bool, Id;
override selector("isLessThanOrEqualTo:") = Bool, Id;
override selector("isLike:") = Bool, NSString;
override selector("isLoaded") = Bool;
override selector("isLocationRequiredToCreateForKey:") = Bool, NSString;
override selector("isMainThread") = Bool;
override selector("isMemberOfClass:") = Bool, Id;
override selector("isMultiThreaded") = Bool;
override selector("isNotEqualTo:") = Bool, Id;
override selector("isOneway") = Bool;
override selector("isOptionalArgumentWithName:") = Bool, NSString;
override selector("isPartialStringValid:newEditingString:errorDescription:") = Bool, NSString, Pointer[NSString], Pointer[NSString];
override selector("isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:") = Bool, Pointer[NSString], NSRangePointer, NSString, NSRange, Pointer[NSString];
override selector("isPartialStringValidationEnabled") = Bool;
override selector("isProxy") = Bool;
override selector("isReadOnlyKey:") = Bool, NSString;
override selector("isReadableFileAtPath:") = Bool, NSString;
override selector("isReady") = Bool;
override selector("isRedoing") = Bool;
override selector("isRunning") = Bool;
override selector("isSecure") = Bool;
override selector("isSessionOnly") = Bool;
override selector("isStandalone") = Bool;
override selector("isStarted") = Bool;
override selector("isStopped") = Bool;
override selector("isSubclassOfClass:") = Bool, Id;
override selector("isSubsetOfHashTable:") = Bool, NSHashTable;
override selector("isSubsetOfSet:") = Bool, NSSet;
override selector("isSupersetOfSet:") = Bool, NSCharacterSet;
override selector("isSuspended") = Bool;
override selector("isTrue") = Bool;
override selector("isUndoRegistrationEnabled") = Bool;
override selector("isUndoing") = Bool;
override selector("isValid") = Bool;
override selector("isWellFormed") = Bool;
override selector("isWordInUserDictionaries:caseSensitive:") = Bool, NSString, Bool;
override selector("isWritableFileAtPath:") = Bool, NSString;
override selector("key") = NSString;
override selector("keyClassDescription") = NSScriptClassDescription;
override selector("keyEnumerator") = NSEnumerator;
override selector("keyPath") = NSString;
override selector("keyPathsForValuesAffectingValueForKey:") = NSSet, NSString;
override selector("keyPointerFunctions") = NSPointerFunctions;
override selector("keySpecifier") = NSScriptObjectSpecifier;
override selector("keyWithAppleEventCode:") = NSString, UInt;
override selector("keysOfEntriesPassingTest:") = NSSet, UnknownType;
override selector("keysOfEntriesWithOptions:passingTest:") = NSSet, CULong, UnknownType;
override selector("keysSortedByValueUsingComparator:") = NSArray, NSComparator;
override selector("keysSortedByValueUsingSelector:") = NSArray, SelectorHandle;
override selector("keysSortedByValueWithOptions:usingComparator:") = NSArray, CULong, NSComparator;
override selector("keywordForDescriptorAtIndex:") = UInt, CLong;
override selector("kind") = CULong;
override selector("knownTimeZoneNames") = NSArray;
override selector("languageMap") = NSDictionary;
override selector("languagesForScript:") = NSArray, NSString;
override selector("lastIndex") = CULong;
override selector("lastObject") = Id;
override selector("lastPathComponent") = NSString;
override selector("laterDate:") = NSDate, NSDate;
override selector("launch") = Void;
override selector("launchPath") = NSString;
override selector("launchedTaskWithLaunchPath:arguments:") = NSTask, NSString, NSArray;
override selector("leftExpression") = NSExpression;
override selector("length") = CULong;
override selector("lengthOfBytesUsingEncoding:") = CULong, CULong;
override selector("letterCharacterSet") = Id;
override selector("level") = CULong;
override selector("levelsOfUndo") = CULong;
override selector("limitDateForMode:") = NSDate, NSString;
override selector("lineDirectionForLanguage:") = CULong, NSString;
override selector("lineNumber") = CLong;
override selector("lineRangeForRange:") = NSRange, NSRange;
override selector("linkCheckingResultWithRange:URL:") = NSTextCheckingResult, NSRange, NSURL;
override selector("linkItemAtPath:toPath:error:") = Bool, NSString, NSString, Pointer[NSError];
override selector("linkItemAtURL:toURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
override selector("linkPath:toPath:handler:") = Bool, NSString, NSString, Id;
override selector("listDescriptor") = NSAppleEventDescriptor;
override selector("load") = Bool;
override selector("loadAndReturnError:") = Bool, Pointer[NSError];
override selector("loadInBackground") = Void;
override selector("loadInForeground") = NSData;
override selector("loadResourceDataNotifyingClient:usingCache:") = Void, Id, Bool;
override selector("loadSuiteWithDictionary:fromBundle:") = Void, NSDictionary, NSBundle;
override selector("loadSuitesFromBundle:") = Void, NSBundle;
override selector("localName") = NSString;
override selector("localNameForName:") = NSString, NSString;
override selector("localObjects") = NSArray;
override selector("localTimeZone") = NSTimeZone;
override selector("locale") = Id;
override selector("localeIdentifier") = NSString;
override selector("localeIdentifierFromComponents:") = NSString, NSDictionary;
override selector("localeIdentifierFromWindowsLocaleCode:") = NSString, UInt;
override selector("localizations") = NSArray;
override selector("localizedCaseInsensitiveCompare:") = CLong, NSString;
override selector("localizedCompare:") = CLong, NSString;
override selector("localizedDescription") = NSString;
override selector("localizedFailureReason") = NSString;
override selector("localizedInfoDictionary") = NSDictionary;
override selector("localizedName") = NSString;
override selector("localizedName:locale:") = NSString, CLong, NSLocale;
override selector("localizedNameOfStringEncoding:") = NSString, CULong;
override selector("localizedRecoveryOptions") = NSArray;
override selector("localizedRecoverySuggestion") = NSString;
override selector("localizedScannerWithString:") = Id, NSString;
override selector("localizedStandardCompare:") = CLong, NSString;
override selector("localizedStringForKey:value:table:") = NSString, NSString, NSString, NSString;
override selector("localizedStringForStatusCode:") = NSString, CLong;
override selector("localizedStringFromDate:dateStyle:timeStyle:") = NSString, NSDate, CULong, CULong;
override selector("localizedStringFromNumber:numberStyle:") = NSString, NSNumber, CULong;
override varargSelector("localizedStringWithFormat:") = Id, NSString;
override selector("localizesFormat") = Bool;
override selector("lock") = Void;
override selector("lockBeforeDate:") = Bool, NSDate;
override selector("lockDate") = NSDate;
override selector("lockWhenCondition:") = Void, CLong;
override selector("lockWhenCondition:beforeDate:") = Bool, CLong, NSDate;
override selector("lockWithPath:") = NSDistributedLock, NSString;
override selector("longCharacterIsMember:") = Bool, UInt;
override selector("longEraSymbols") = NSArray;
override selector("longLongValue") = Int64;
override selector("longValue") = CLong;
override selector("lossyCString") = Pointer[CChar];
override selector("lowercaseLetterCharacterSet") = Id;
override selector("lowercaseString") = NSString;
override selector("machPort") = UInt;
override selector("main") = Void;
override selector("mainBundle") = NSBundle;
override selector("mainDocumentURL") = NSURL;
override selector("mainQueue") = Id;
override selector("mainRunLoop") = NSRunLoop;
override selector("mainThread") = NSThread;
override selector("makeNewConnection:sender:") = Bool, NSConnection, NSConnection;
override selector("makeObjectsPerformSelector:") = Void, SelectorHandle;
override selector("makeObjectsPerformSelector:withObject:") = Void, SelectorHandle, Id;
override selector("mapTableWithKeyOptions:valueOptions:") = Id, CULong, CULong;
override selector("mapTableWithStrongToStrongObjects") = Id;
override selector("mapTableWithStrongToWeakObjects") = Id;
override selector("mapTableWithWeakToStrongObjects") = Id;
override selector("mapTableWithWeakToWeakObjects") = Id;
override selector("matchesAppleEventCode:") = Bool, UInt;
override selector("maxConcurrentOperationCount") = CLong;
override selector("maximum") = NSNumber;
override selector("maximumDecimalNumber") = NSDecimalNumber;
override selector("maximumFractionDigits") = CULong;
override selector("maximumIntegerDigits") = CULong;
override selector("maximumLengthOfBytesUsingEncoding:") = CULong, CULong;
override selector("maximumRangeOfUnit:") = NSRange, CULong;
override selector("maximumSignificantDigits") = CULong;
override selector("member:") = Id, Id;
override selector("memoryCapacity") = CULong;
override selector("metadataQuery:replacementObjectForResultObject:") = Id, NSMetadataQuery, NSMetadataItem;
override selector("metadataQuery:replacementValueForAttribute:value:") = Id, NSMetadataQuery, NSString, Id;
override selector("methodForSelector:") = IMP, SelectorHandle;
override selector("methodReturnLength") = CULong;
override selector("methodReturnType") = Pointer[CChar];
override selector("methodSignature") = NSMethodSignature;
override selector("methodSignatureForSelector:") = NSMethodSignature, SelectorHandle;
override selector("minimum") = NSNumber;
override selector("minimumDaysInFirstWeek") = CULong;
override selector("minimumDecimalNumber") = NSDecimalNumber;
override selector("minimumFractionDigits") = CULong;
override selector("minimumIntegerDigits") = CULong;
override selector("minimumRangeOfUnit:") = NSRange, CULong;
override selector("minimumSignificantDigits") = CULong;
override selector("minusHashTable:") = Void, NSHashTable;
override selector("minusSet:") = Void, NSSet;
override selector("minusSign") = NSString;
override selector("minute") = CLong;
override selector("minuteOfHour") = CLong;
override selector("month") = CLong;
override selector("monthOfYear") = CLong;
override selector("monthSymbols") = NSArray;
override selector("mountedVolumeURLsIncludingResourceValuesForKeys:options:") = NSArray, NSArray, CULong;
override selector("moveItemAtPath:toPath:error:") = Bool, NSString, NSString, Pointer[NSError];
override selector("moveItemAtURL:toURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
override selector("movePath:toPath:handler:") = Bool, NSString, NSString, Id;
override selector("msgid") = UInt;
override selector("multipleThreadsEnabled") = Bool;
override selector("multiplier") = NSNumber;
override selector("mutableArrayValueForKey:") = NSMutableArray, NSString;
override selector("mutableArrayValueForKeyPath:") = NSMutableArray, NSString;
override selector("mutableBytes") = RawPointer;
override selector("mutableCopy") = Id;
override selector("mutableCopyWithZone:") = Id, Pointer[NSZone];
override selector("mutableSetValueForKey:") = NSMutableSet, NSString;
override selector("mutableSetValueForKeyPath:") = NSMutableSet, NSString;
override selector("mutableString") = NSMutableString;
override selector("name") = NSString;
override selector("names") = NSArray;
override selector("namespaceForPrefix:") = NSXMLNode, NSString;
override selector("namespaceWithName:stringValue:") = Id, NSString, NSString;
override selector("namespaces") = NSArray;
override selector("negativeFormat") = NSString;
override selector("negativeInfinitySymbol") = NSString;
override selector("negativePrefix") = NSString;
override selector("negativeSuffix") = NSString;
override selector("netService:didNotPublish:") = Void, NSNetService, NSDictionary;
override selector("netService:didNotResolve:") = Void, NSNetService, NSDictionary;
override selector("netService:didUpdateTXTRecordData:") = Void, NSNetService, NSData;
override selector("netServiceBrowser:didFindDomain:moreComing:") = Void, NSNetServiceBrowser, NSString, Bool;
override selector("netServiceBrowser:didFindService:moreComing:") = Void, NSNetServiceBrowser, NSNetService, Bool;
override selector("netServiceBrowser:didNotSearch:") = Void, NSNetServiceBrowser, NSDictionary;
override selector("netServiceBrowser:didRemoveDomain:moreComing:") = Void, NSNetServiceBrowser, NSString, Bool;
override selector("netServiceBrowser:didRemoveService:moreComing:") = Void, NSNetServiceBrowser, NSNetService, Bool;
override selector("netServiceBrowserDidStopSearch:") = Void, NSNetServiceBrowser;
override selector("netServiceBrowserWillSearch:") = Void, NSNetServiceBrowser;
override selector("netServiceDidPublish:") = Void, NSNetService;
override selector("netServiceDidResolveAddress:") = Void, NSNetService;
override selector("netServiceDidStop:") = Void, NSNetService;
override selector("netServiceWillPublish:") = Void, NSNetService;
override selector("netServiceWillResolve:") = Void, NSNetService;
override selector("new") = Id;
override selector("newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:") = Id, Id, NSString, Id, NSDictionary;
override selector("newlineCharacterSet") = Id;
override selector("nextDaylightSavingTimeTransition") = NSDate;
override selector("nextDaylightSavingTimeTransitionAfterDate:") = NSDate, NSDate;
override selector("nextNode") = NSXMLNode;
override selector("nextObject") = Id;
override selector("nextSibling") = NSXMLNode;
override selector("nilSymbol") = NSString;
override selector("nodesForXPath:error:") = NSArray, NSString, Pointer[NSError];
override selector("nonBaseCharacterSet") = Id;
override selector("nonretainedObjectValue") = Id;
override selector("normalizeAdjacentTextNodesPreservingCDATA:") = Void, Bool;
override selector("notANumber") = NSDecimalNumber;
override selector("notANumberSymbol") = NSString;
override selector("notPredicateWithSubpredicate:") = NSPredicate, NSPredicate;
override selector("notationDeclarationForName:") = NSXMLDTDNode, NSString;
override selector("notationName") = NSString;
override selector("notificationBatchingInterval") = Double;
override selector("notificationCenterForType:") = NSDistributedNotificationCenter, NSString;
override selector("notificationWithName:object:") = Id, NSString, Id;
override selector("notificationWithName:object:userInfo:") = Id, NSString, Id, NSDictionary;
override selector("null") = NSNull;
override selector("nullDescriptor") = NSAppleEventDescriptor;
override selector("numberFromString:") = NSNumber, NSString;
override selector("numberOfArguments") = CULong;
override selector("numberOfItems") = CLong;
override selector("numberStyle") = CULong;
override selector("numberWithBool:") = NSNumber, Bool;
override selector("numberWithChar:") = NSNumber, CChar;
override selector("numberWithDouble:") = NSNumber, Double;
override selector("numberWithFloat:") = NSNumber, Float;
override selector("numberWithInt:") = NSNumber, Int;
override selector("numberWithInteger:") = NSNumber, CLong;
override selector("numberWithLong:") = NSNumber, CLong;
override selector("numberWithLongLong:") = NSNumber, Int64;
override selector("numberWithShort:") = NSNumber, Short;
override selector("numberWithUnsignedChar:") = NSNumber, CUChar;
override selector("numberWithUnsignedInt:") = NSNumber, UInt;
override selector("numberWithUnsignedInteger:") = NSNumber, CULong;
override selector("numberWithUnsignedLong:") = NSNumber, CULong;
override selector("numberWithUnsignedLongLong:") = NSNumber, UInt64;
override selector("numberWithUnsignedShort:") = NSNumber, UShort;
override selector("objCType") = Pointer[CChar];
override selector("object") = Id;
override selector("objectAtIndex:") = Id, CULong;
override selector("objectBeingTested") = Id;
override selector("objectByApplyingXSLT:arguments:error:") = Id, NSData, NSDictionary, Pointer[NSError];
override selector("objectByApplyingXSLTAtURL:arguments:error:") = Id, NSURL, NSDictionary, Pointer[NSError];
override selector("objectByApplyingXSLTString:arguments:error:") = Id, NSString, NSDictionary, Pointer[NSError];
override selector("objectEnumerator") = NSEnumerator;
override selector("objectForInfoDictionaryKey:") = Id, NSString;
override selector("objectForKey:") = Id, Id;
override selector("objectIsForcedForKey:") = Bool, NSString;
override selector("objectIsForcedForKey:inDomain:") = Bool, NSString, NSString;
override selector("objectSpecifier") = NSScriptObjectSpecifier;
override selector("objectSpecifierWithDescriptor:") = NSScriptObjectSpecifier, NSAppleEventDescriptor;
override selector("objectValue") = Id;
override selector("objectZone") = Pointer[NSZone];
override selector("objectsAtIndexes:") = NSArray, NSIndexSet;
override selector("objectsByEvaluatingSpecifier") = Id;
override selector("objectsByEvaluatingWithContainers:") = Id, Id;
override selector("objectsForKeys:notFoundMarker:") = NSArray, NSArray, Id;
override selector("objectsForXQuery:constants:error:") = NSArray, NSString, NSDictionary, Pointer[NSError];
override selector("objectsForXQuery:error:") = NSArray, NSString, Pointer[NSError];
override selector("objectsPassingTest:") = NSSet, UnknownType;
override selector("objectsWithOptions:passingTest:") = NSSet, CULong, UnknownType;
override selector("observationInfo") = RawPointer;
override selector("observeValueForKeyPath:ofObject:change:context:") = Void, NSString, Id, NSDictionary, RawPointer;
override selector("offsetInFile") = UInt64;
override selector("one") = NSDecimalNumber;
override selector("open") = Void;
override selector("operand") = NSExpression;
override selector("operatingSystem") = CULong;
override selector("operatingSystemName") = NSString;
override selector("operatingSystemVersionString") = NSString;
override selector("operationCount") = CULong;
override selector("operations") = NSArray;
override selector("options") = CULong;
override selector("orPredicateWithSubpredicates:") = NSPredicate, NSArray;
override selector("ordinalityOfUnit:inUnit:forDate:") = CULong, CULong, CULong, NSDate;
override selector("orthography") = NSOrthography;
override selector("orthographyCheckingResultWithRange:orthography:") = NSTextCheckingResult, NSRange, NSOrthography;
override selector("orthographyWithDominantScript:languageMap:") = Id, NSString, NSDictionary;
override selector("outputFormat") = CULong;
override selector("outputStreamToBuffer:capacity:") = Id, Pointer[CUChar], CULong;
override selector("outputStreamToFileAtPath:append:") = Id, NSString, Bool;
override selector("outputStreamToMemory") = Id;
override selector("outputStreamWithURL:append:") = Id, NSURL, Bool;
override selector("paddingCharacter") = NSString;
override selector("paddingPosition") = CULong;
override selector("paragraphRangeForRange:") = NSRange, NSRange;
override selector("paramDescriptorForKeyword:") = NSAppleEventDescriptor, UInt;
override selector("parameterString") = NSString;
override selector("parent") = NSXMLNode;
override selector("parse") = Bool;
override selector("parser:didEndElement:namespaceURI:qualifiedName:") = Void, NSXMLParser, NSString, NSString, NSString;
override selector("parser:didEndMappingPrefix:") = Void, NSXMLParser, NSString;
override selector("parser:didStartElement:namespaceURI:qualifiedName:attributes:") = Void, NSXMLParser, NSString, NSString, NSString, NSDictionary;
override selector("parser:didStartMappingPrefix:toURI:") = Void, NSXMLParser, NSString, NSString;
override selector("parser:foundAttributeDeclarationWithName:forElement:type:defaultValue:") = Void, NSXMLParser, NSString, NSString, NSString, NSString;
override selector("parser:foundCDATA:") = Void, NSXMLParser, NSData;
override selector("parser:foundCharacters:") = Void, NSXMLParser, NSString;
override selector("parser:foundComment:") = Void, NSXMLParser, NSString;
override selector("parser:foundElementDeclarationWithName:model:") = Void, NSXMLParser, NSString, NSString;
override selector("parser:foundExternalEntityDeclarationWithName:publicID:systemID:") = Void, NSXMLParser, NSString, NSString, NSString;
override selector("parser:foundIgnorableWhitespace:") = Void, NSXMLParser, NSString;
override selector("parser:foundInternalEntityDeclarationWithName:value:") = Void, NSXMLParser, NSString, NSString;
override selector("parser:foundNotationDeclarationWithName:publicID:systemID:") = Void, NSXMLParser, NSString, NSString, NSString;
override selector("parser:foundProcessingInstructionWithTarget:data:") = Void, NSXMLParser, NSString, NSString;
override selector("parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:") = Void, NSXMLParser, NSString, NSString, NSString, NSString;
override selector("parser:parseErrorOccurred:") = Void, NSXMLParser, NSError;
override selector("parser:resolveExternalEntityName:systemID:") = NSData, NSXMLParser, NSString, NSString;
override selector("parser:validationErrorOccurred:") = Void, NSXMLParser, NSError;
override selector("parserDidEndDocument:") = Void, NSXMLParser;
override selector("parserDidStartDocument:") = Void, NSXMLParser;
override selector("parserError") = NSError;
override selector("password") = NSString;
override selector("path") = NSString;
override selector("pathComponents") = NSArray;
override selector("pathContentOfSymbolicLinkAtPath:") = NSString, NSString;
override selector("pathExtension") = NSString;
override selector("pathForAuxiliaryExecutable:") = NSString, NSString;
override selector("pathForResource:ofType:") = NSString, NSString, NSString;
override selector("pathForResource:ofType:inDirectory:") = NSString, NSString, NSString, NSString;
override selector("pathForResource:ofType:inDirectory:forLocalization:") = NSString, NSString, NSString, NSString, NSString;
override selector("pathWithComponents:") = NSString, NSArray;
override selector("pathsForResourcesOfType:inDirectory:") = NSArray, NSString, NSString;
override selector("pathsForResourcesOfType:inDirectory:forLocalization:") = NSArray, NSString, NSString, NSString;
override selector("pathsMatchingExtensions:") = NSArray, NSArray;
override selector("perMillSymbol") = NSString;
override selector("percentSymbol") = NSString;
override selector("performDefaultImplementation") = Id;
override selector("performSelector:") = Id, SelectorHandle;
override selector("performSelector:onThread:withObject:waitUntilDone:") = Void, SelectorHandle, NSThread, Id, Bool;
override selector("performSelector:onThread:withObject:waitUntilDone:modes:") = Void, SelectorHandle, NSThread, Id, Bool, NSArray;
override selector("performSelector:target:argument:order:modes:") = Void, SelectorHandle, Id, Id, CULong, NSArray;
override selector("performSelector:withObject:") = Id, SelectorHandle, Id;
override selector("performSelector:withObject:afterDelay:") = Void, SelectorHandle, Id, Double;
override selector("performSelector:withObject:afterDelay:inModes:") = Void, SelectorHandle, Id, Double, NSArray;
override selector("performSelector:withObject:withObject:") = Id, SelectorHandle, Id, Id;
override selector("performSelectorInBackground:withObject:") = Void, SelectorHandle, Id;
override selector("performSelectorOnMainThread:withObject:waitUntilDone:") = Void, SelectorHandle, Id, Bool;
override selector("performSelectorOnMainThread:withObject:waitUntilDone:modes:") = Void, SelectorHandle, Id, Bool, NSArray;
override selector("persistence") = CULong;
override selector("persistentDomainForName:") = NSDictionary, NSString;
override selector("persistentDomainNames") = NSArray;
override selector("physicalMemory") = UInt64;
override selector("pipe") = Id;
override selector("plusSign") = NSString;
override selector("pointValue") = NSPoint;
override selector("pointerArrayWithOptions:") = Id, CULong;
override selector("pointerArrayWithPointerFunctions:") = Id, NSPointerFunctions;
override selector("pointerArrayWithStrongObjects") = Id;
override selector("pointerArrayWithWeakObjects") = Id;
override selector("pointerAtIndex:") = RawPointer, CULong;
override selector("pointerFunctions") = NSPointerFunctions;
override selector("pointerFunctionsWithOptions:") = Id, CULong;
override selector("pointerValue") = RawPointer;
override selector("port") = Id;
override selector("portCoderWithReceivePort:sendPort:components:") = Id, NSPort, NSPort, NSArray;
override selector("portForName:") = NSPort, NSString;
override selector("portForName:host:") = NSPort, NSString, NSString;
override selector("portForName:host:nameServerPortNumber:") = NSPort, NSString, NSString, UShort;
override selector("portList") = NSArray;
override selector("portWithMachPort:") = NSPort, UInt;
override selector("portWithMachPort:options:") = NSPort, UInt, CULong;
override selector("poseAsClass:") = Void, Id;
override selector("position") = CULong;
override selector("positiveFormat") = NSString;
override selector("positiveInfinitySymbol") = NSString;
override selector("positivePrefix") = NSString;
override selector("positiveSuffix") = NSString;
override selector("postNotification:") = Void, NSNotification;
override selector("postNotificationName:object:") = Void, NSString, Id;
override selector("postNotificationName:object:userInfo:") = Void, NSString, Id, NSDictionary;
override selector("postNotificationName:object:userInfo:deliverImmediately:") = Void, NSString, NSString, NSDictionary, Bool;
override selector("postNotificationName:object:userInfo:options:") = Void, NSString, NSString, NSDictionary, CULong;
override selector("precomposedStringWithCanonicalMapping") = NSString;
override selector("precomposedStringWithCompatibilityMapping") = NSString;
override selector("predefinedEntityDeclarationForName:") = NSXMLDTDNode, NSString;
override selector("predefinedNamespaceForPrefix:") = NSXMLNode, NSString;
override selector("predicate") = NSPredicate;
override selector("predicateFormat") = NSString;
override selector("predicateOperatorType") = CULong;
override selector("predicateWithBlock:") = NSPredicate, UnknownType;
override varargSelector("predicateWithFormat:") = NSPredicate, NSString;
override selector("predicateWithFormat:argumentArray:") = NSPredicate, NSString, NSArray;
override selector("predicateWithFormat:arguments:") = NSPredicate, NSString, Pointer[__va_list_tag];
override selector("predicateWithLeftExpression:rightExpression:customSelector:") = NSPredicate, NSExpression, NSExpression, SelectorHandle;
override selector("predicateWithLeftExpression:rightExpression:modifier:type:options:") = NSPredicate, NSExpression, NSExpression, CULong, CULong, CULong;
override selector("predicateWithSubstitutionVariables:") = NSPredicate, NSDictionary;
override selector("predicateWithValue:") = NSPredicate, Bool;
override selector("preferredLanguages") = NSArray;
override selector("preferredLocalizations") = NSArray;
override selector("preferredLocalizationsFromArray:") = NSArray, NSArray;
override selector("preferredLocalizationsFromArray:forPreferences:") = NSArray, NSArray, NSArray;
override selector("prefix") = NSString;
override selector("prefixForName:") = NSString, NSString;
override selector("preflightAndReturnError:") = Bool, Pointer[NSError];
override selector("prepareWithInvocationTarget:") = Id, Id;
override selector("prependTransform:") = Void, NSAffineTransform;
override selector("previousFailureCount") = CLong;
override selector("previousNode") = NSXMLNode;
override selector("previousSibling") = NSXMLNode;
override selector("principalClass") = Id;
override selector("privateFrameworksPath") = NSString;
override selector("privateFrameworksURL") = NSURL;
override selector("processIdentifier") = Int;
override selector("processInfo") = NSProcessInfo;
override selector("processName") = NSString;
override selector("processingInstructionWithName:stringValue:") = Id, NSString, NSString;
override selector("processorCount") = CULong;
override selector("properties") = NSDictionary;
override selector("propertyForKey:") = Id, NSString;
override selector("propertyForKey:inRequest:") = Id, NSString, NSURLRequest;
override selector("propertyForKeyIfAvailable:") = Id, NSString;
override selector("propertyList") = Id;
override selector("propertyList:isValidForFormat:") = Bool, Id, CULong;
override selector("propertyListFromData:mutabilityOption:format:errorDescription:") = Id, NSData, CULong, Pointer[CULong], Pointer[NSString];
override selector("propertyListFromStringsFileFormat") = NSDictionary;
override selector("propertyListWithData:options:format:error:") = Id, NSData, CULong, Pointer[CULong], Pointer[NSError];
override selector("propertyListWithStream:options:format:error:") = Id, NSInputStream, CULong, Pointer[CULong], Pointer[NSError];
override selector("proposedCredential") = NSURLCredential;
override selector("protectionSpace") = NSURLProtectionSpace;
override selector("protocol") = Int;
override selector("protocolCheckerWithTarget:protocol:") = Id, NSObject, Id;
override selector("protocolFamily") = Int;
override selector("protocolSpecificInformation") = NSString;
override selector("proxyType") = NSString;
override selector("proxyWithLocal:connection:") = NSDistantObject, Id, NSConnection;
override selector("proxyWithTarget:connection:") = NSDistantObject, Id, NSConnection;
override selector("publicID") = NSString;
override selector("publish") = Void;
override selector("publishWithOptions:") = Void, CULong;
override selector("punctuationCharacterSet") = Id;
override selector("quarter") = CLong;
override selector("quarterSymbols") = NSArray;
override selector("query") = NSString;
override selector("queuePriority") = CLong;
override selector("quoteCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
override selector("raise") = Void;
override varargSelector("raise:format:") = Void, NSString, NSString;
override selector("raise:format:arguments:") = Void, NSString, NSString, Pointer[__va_list_tag];
override selector("range") = NSRange;
override selector("rangeContainerObject") = Id;
override selector("rangeOfCharacterFromSet:") = NSRange, NSCharacterSet;
override selector("rangeOfCharacterFromSet:options:") = NSRange, NSCharacterSet, CULong;
override selector("rangeOfCharacterFromSet:options:range:") = NSRange, NSCharacterSet, CULong, NSRange;
override selector("rangeOfComposedCharacterSequenceAtIndex:") = NSRange, CULong;
override selector("rangeOfComposedCharacterSequencesForRange:") = NSRange, NSRange;
override selector("rangeOfData:options:range:") = NSRange, NSData, CULong, NSRange;
override selector("rangeOfString:") = NSRange, NSString;
override selector("rangeOfString:options:") = NSRange, NSString, CULong;
override selector("rangeOfString:options:range:") = NSRange, NSString, CULong, NSRange;
override selector("rangeOfString:options:range:locale:") = NSRange, NSString, CULong, NSRange, NSLocale;
override selector("rangeOfUnit:inUnit:forDate:") = NSRange, CULong, CULong, NSDate;
override selector("rangeOfUnit:startDate:interval:forDate:") = Bool, CULong, Pointer[NSDate], Pointer[Double], NSDate;
override selector("rangeValue") = NSRange;
override selector("read:maxLength:") = CLong, Pointer[CUChar], CULong;
override selector("readDataOfLength:") = NSData, CULong;
override selector("readDataToEndOfFile") = NSData;
override selector("readInBackgroundAndNotify") = Void;
override selector("readInBackgroundAndNotifyForModes:") = Void, NSArray;
override selector("readToEndOfFileInBackgroundAndNotify") = Void;
override selector("readToEndOfFileInBackgroundAndNotifyForModes:") = Void, NSArray;
override selector("realm") = NSString;
override selector("reason") = NSString;
override selector("receivePort") = NSPort;
override selector("receiversSpecifier") = NSScriptObjectSpecifier;
override selector("receivesCredentialSecurely") = Bool;
override selector("recordDescriptor") = NSAppleEventDescriptor;
override selector("recoveryAttempter") = Id;
override selector("rectValue") = NSRect;
override selector("redo") = Void;
override selector("redoActionName") = NSString;
override selector("redoMenuItemTitle") = NSString;
override selector("redoMenuTitleForUndoActionName:") = NSString, NSString;
override selector("registerClass:") = Bool, Id;
override selector("registerClassDescription:") = Void, NSScriptClassDescription;
override selector("registerClassDescription:forClass:") = Void, NSClassDescription, Id;
override selector("registerCoercer:selector:toConvertFromClass:toClass:") = Void, Id, SelectorHandle, Id, Id;
override selector("registerCommandDescription:") = Void, NSScriptCommandDescription;
override selector("registerDefaults:") = Void, NSDictionary;
override selector("registerLanguage:byVendor:") = Bool, NSString, NSString;
override selector("registerName:") = Bool, NSString;
override selector("registerName:withNameServer:") = Bool, NSString, NSPortNameServer;
override selector("registerPort:name:") = Bool, NSPort, NSString;
override selector("registerPort:name:nameServerPortNumber:") = Bool, NSPort, NSString, UShort;
override selector("registerURLHandleClass:") = Void, Id;
override selector("registerUndoWithTarget:selector:object:") = Void, Id, SelectorHandle, Id;
override selector("relativePath") = NSString;
override selector("relativePosition") = CULong;
override selector("relativeString") = NSString;
override selector("release") = Void;
override selector("relinquishFunction") = CCodePointer[[RawPointer,CCodePointer[[RawPointer],[CULong]]],[]];
override selector("remoteObjects") = NSArray;
override selector("removeAllActions") = Void;
override selector("removeAllActionsWithTarget:") = Void, Id;
override selector("removeAllCachedResponses") = Void;
override selector("removeAllIndexes") = Void;
override selector("removeAllObjects") = Void;
override selector("removeAttribute:range:") = Void, NSString, NSRange;
override selector("removeAttributeForName:") = Void, NSString;
override selector("removeCachedResponseForRequest:") = Void, NSURLRequest;
override selector("removeCharactersInRange:") = Void, NSRange;
override selector("removeCharactersInString:") = Void, NSString;
override selector("removeChildAtIndex:") = Void, CULong;
override selector("removeClient:") = Void, Id;
override selector("removeConnection:fromRunLoop:forMode:") = Void, NSConnection, NSRunLoop, NSString;
override selector("removeCredential:forProtectionSpace:") = Void, NSURLCredential, NSURLProtectionSpace;
override selector("removeDependency:") = Void, NSOperation;
override selector("removeDescriptorAtIndex:") = Void, CLong;
override selector("removeDescriptorWithKeyword:") = Void, UInt;
override selector("removeEventHandlerForEventClass:andEventID:") = Void, UInt, UInt;
override selector("removeFileAtPath:handler:") = Bool, NSString, Id;
override selector("removeFromRunLoop:forMode:") = Void, NSRunLoop, NSString;
override selector("removeIndex:") = Void, CULong;
override selector("removeIndexes:") = Void, NSIndexSet;
override selector("removeIndexesInRange:") = Void, NSRange;
override selector("removeItemAtPath:error:") = Bool, NSString, Pointer[NSError];
override selector("removeItemAtURL:error:") = Bool, NSURL, Pointer[NSError];
override selector("removeLastObject") = Void;
override selector("removeNamespaceForPrefix:") = Void, NSString;
override selector("removeObject:") = Void, Id;
override selector("removeObject:inRange:") = Void, Id, NSRange;
override selector("removeObjectAtIndex:") = Void, CULong;
override selector("removeObjectForKey:") = Void, Id;
override selector("removeObjectIdenticalTo:") = Void, Id;
override selector("removeObjectIdenticalTo:inRange:") = Void, Id, NSRange;
override selector("removeObjectsAtIndexes:") = Void, NSIndexSet;
override selector("removeObjectsForKeys:") = Void, NSArray;
override selector("removeObjectsFromIndices:numIndices:") = Void, Pointer[CULong], CULong;
override selector("removeObjectsInArray:") = Void, NSArray;
override selector("removeObjectsInRange:") = Void, NSRange;
override selector("removeObserver:") = Void, Id;
override selector("removeObserver:forKeyPath:") = Void, NSObject, NSString;
override selector("removeObserver:fromObjectsAtIndexes:forKeyPath:") = Void, NSObject, NSIndexSet, NSString;
override selector("removeObserver:name:object:") = Void, Id, NSString, Id;
override selector("removeParamDescriptorWithKeyword:") = Void, UInt;
override selector("removePersistentDomainForName:") = Void, NSString;
override selector("removePointerAtIndex:") = Void, CULong;
override selector("removePort:forMode:") = Void, NSPort, NSString;
override selector("removePortForName:") = Bool, NSString;
override selector("removePropertyForKey:inRequest:") = Void, NSString, NSMutableURLRequest;
override selector("removeRequestMode:") = Void, NSString;
override selector("removeRunLoop:") = Void, NSRunLoop;
override selector("removeSuiteNamed:") = Void, NSString;
override selector("removeValueAtIndex:fromPropertyWithKey:") = Void, CULong, NSString;
override selector("removeVolatileDomainForName:") = Void, NSString;
override selector("replaceBytesInRange:withBytes:") = Void, NSRange, RawPointer;
override selector("replaceBytesInRange:withBytes:length:") = Void, NSRange, RawPointer, CULong;
override selector("replaceCharactersInRange:withAttributedString:") = Void, NSRange, NSAttributedString;
override selector("replaceCharactersInRange:withString:") = Void, NSRange, NSString;
override selector("replaceChildAtIndex:withNode:") = Void, CULong, NSXMLNode;
override selector("replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:") = Bool, NSURL, NSURL, NSString, CULong, Pointer[NSURL], Pointer[NSError];
override selector("replaceObject:withObject:") = Void, Id, Id;
override selector("replaceObjectAtIndex:withObject:") = Void, CULong, Id;
override selector("replaceObjectsAtIndexes:withObjects:") = Void, NSIndexSet, NSArray;
override selector("replaceObjectsInRange:withObjectsFromArray:") = Void, NSRange, NSArray;
override selector("replaceObjectsInRange:withObjectsFromArray:range:") = Void, NSRange, NSArray, NSRange;
override selector("replaceOccurrencesOfString:withString:options:range:") = CULong, NSString, NSString, CULong, NSRange;
override selector("replacePointerAtIndex:withPointer:") = Void, CULong, RawPointer;
override selector("replaceValueAtIndex:inPropertyWithKey:withValue:") = Void, CULong, NSString, Id;
override selector("replacementCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
override selector("replacementClassForClass:") = Id, Id;
override selector("replacementObjectForArchiver:") = Id, NSArchiver;
override selector("replacementObjectForCoder:") = Id, NSCoder;
override selector("replacementObjectForKeyedArchiver:") = Id, NSKeyedArchiver;
override selector("replacementObjectForPortCoder:") = Id, NSPortCoder;
override selector("replacementString") = NSString;
override selector("replyAppleEventForSuspensionID:") = NSAppleEventDescriptor, NSAppleEventManagerSuspensionID;
override selector("replyTimeout") = Double;
override selector("replyWithException:") = Void, NSException;
override selector("request") = NSURLRequest;
override selector("requestHeaderFieldsWithCookies:") = NSDictionary, NSArray;
override selector("requestIsCacheEquivalent:toRequest:") = Bool, NSURLRequest, NSURLRequest;
override selector("requestModes") = NSArray;
override selector("requestTimeout") = Double;
override selector("requestWithURL:") = Id, NSURL;
override selector("requestWithURL:cachePolicy:timeoutInterval:") = Id, NSURL, CULong, Double;
override selector("reservedSpaceLength") = CULong;
override selector("resetBytesInRange:") = Void, NSRange;
override selector("resetStandardUserDefaults") = Void;
override selector("resetSystemTimeZone") = Void;
override selector("resolve") = Void;
override selector("resolveClassMethod:") = Bool, SelectorHandle;
override selector("resolveInstanceMethod:") = Bool, SelectorHandle;
override selector("resolveNamespaceForName:") = NSXMLNode, NSString;
override selector("resolvePrefixForNamespaceURI:") = NSString, NSString;
override selector("resolveWithTimeout:") = Void, Double;
override selector("resolvedKeyDictionary") = NSDictionary;
override selector("resourceData") = NSData;
override selector("resourceDataUsingCache:") = NSData, Bool;
override selector("resourcePath") = NSString;
override selector("resourceSpecifier") = NSString;
override selector("resourceURL") = NSURL;
override selector("resourceValuesForKeys:error:") = NSDictionary, NSArray, Pointer[NSError];
override selector("resourceValuesForKeys:fromBookmarkData:") = NSDictionary, NSArray, NSData;
override selector("respondsToSelector:") = Bool, SelectorHandle;
override selector("response") = NSURLResponse;
override selector("result") = Id;
override selector("resultAtIndex:") = Id, CULong;
override selector("resultCount") = CULong;
override selector("resultType") = UInt64;
override selector("results") = NSArray;
override selector("resume") = Bool;
override selector("resumeData") = NSData;
override selector("resumeExecutionWithResult:") = Void, Id;
override selector("resumeWithSuspensionID:") = Void, NSAppleEventManagerSuspensionID;
override selector("retain") = Id;
override selector("retainArguments") = Void;
override selector("retainCount") = CULong;
override selector("returnID") = Short;
override selector("returnType") = NSString;
override selector("reverseObjectEnumerator") = NSEnumerator;
override selector("reverseTransformedValue:") = Id, Id;
override selector("reversedSortDescriptor") = Id;
override selector("rightExpression") = NSExpression;
override selector("rootDocument") = NSXMLDocument;
override selector("rootElement") = NSXMLElement;
override selector("rootObject") = Id;
override selector("rootProxy") = NSDistantObject;
override selector("rootProxyForConnectionWithRegisteredName:host:") = NSDistantObject, NSString, NSString;
override selector("rootProxyForConnectionWithRegisteredName:host:usingNameServer:") = NSDistantObject, NSString, NSString, NSPortNameServer;
override selector("rotateByDegrees:") = Void, Double;
override selector("rotateByRadians:") = Void, Double;
override selector("roundingBehavior") = NSDecimalNumberHandler;
override selector("roundingIncrement") = NSNumber;
override selector("roundingMode") = CULong;
override selector("run") = Void;
override selector("runInNewThread") = Void;
override selector("runLoopModes") = NSArray;
override selector("runMode:beforeDate:") = Bool, NSString, NSDate;
override selector("runUntilDate:") = Void, NSDate;
override selector("saveOptions") = CULong;
override selector("scale") = Short;
override selector("scaleBy:") = Void, Double;
override selector("scaleXBy:yBy:") = Void, Double, Double;
override selector("scanCharactersFromSet:intoString:") = Bool, NSCharacterSet, Pointer[NSString];
override selector("scanDecimal:") = Bool, Pointer[NSDecimal];
override selector("scanDouble:") = Bool, Pointer[Double];
override selector("scanFloat:") = Bool, Pointer[Float];
override selector("scanHexDouble:") = Bool, Pointer[Double];
override selector("scanHexFloat:") = Bool, Pointer[Float];
override selector("scanHexInt:") = Bool, Pointer[UInt];
override selector("scanHexLongLong:") = Bool, Pointer[UInt64];
override selector("scanInt:") = Bool, Pointer[Int];
override selector("scanInteger:") = Bool, Pointer[CLong];
override selector("scanLocation") = CULong;
override selector("scanLongLong:") = Bool, Pointer[Int64];
override selector("scanString:intoString:") = Bool, NSString, Pointer[NSString];
override selector("scanUpToCharactersFromSet:intoString:") = Bool, NSCharacterSet, Pointer[NSString];
override selector("scanUpToString:intoString:") = Bool, NSString, Pointer[NSString];
override selector("scannerWithString:") = Id, NSString;
override selector("scheduleInRunLoop:forMode:") = Void, NSRunLoop, NSString;
override selector("scheduledTimerWithTimeInterval:invocation:repeats:") = NSTimer, Double, NSInvocation, Bool;
override selector("scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:") = NSTimer, Double, Id, SelectorHandle, Id, Bool;
override selector("scheme") = NSString;
override selector("scriptErrorExpectedTypeDescriptor") = NSAppleEventDescriptor;
override selector("scriptErrorNumber") = Int;
override selector("scriptErrorOffendingObjectDescriptor") = NSAppleEventDescriptor;
override selector("scriptErrorString") = NSString;
override selector("scriptingBeginsWith:") = Bool, Id;
override selector("scriptingContains:") = Bool, Id;
override selector("scriptingEndsWith:") = Bool, Id;
override selector("scriptingIsEqualTo:") = Bool, Id;
override selector("scriptingIsGreaterThan:") = Bool, Id;
override selector("scriptingIsGreaterThanOrEqualTo:") = Bool, Id;
override selector("scriptingIsLessThan:") = Bool, Id;
override selector("scriptingIsLessThanOrEqualTo:") = Bool, Id;
override selector("scriptingProperties") = NSDictionary;
override selector("scriptingValueForSpecifier:") = Id, NSScriptObjectSpecifier;
override selector("searchForAllDomains") = Void;
override selector("searchForBrowsableDomains") = Void;
override selector("searchForRegistrationDomains") = Void;
override selector("searchForServicesOfType:inDomain:") = Void, NSString, NSString;
override selector("searchScopes") = NSArray;
override selector("second") = CLong;
override selector("secondOfMinute") = CLong;
override selector("secondaryGroupingSize") = CULong;
override selector("secondsFromGMT") = CLong;
override selector("secondsFromGMTForDate:") = CLong, NSDate;
override selector("seekToEndOfFile") = UInt64;
override selector("seekToFileOffset:") = Void, UInt64;
override selector("selector") = SelectorHandle;
override selector("selectorForCommand:") = SelectorHandle, NSScriptCommandDescription;
override selector("self") = Id;
override selector("sendBeforeDate:") = Bool, NSDate;
override selector("sendBeforeDate:components:from:reserved:") = Bool, NSDate, NSMutableArray, NSPort, CULong;
override selector("sendBeforeDate:msgid:components:from:reserved:") = Bool, NSDate, CULong, NSMutableArray, NSPort, CULong;
override selector("sendPort") = NSPort;
override selector("sendSynchronousRequest:returningResponse:error:") = NSData, NSURLRequest, Pointer[NSURLResponse], Pointer[NSError];
override selector("sender") = Id;
override selector("serverTrust") = SecTrustRef;
override selector("serviceConnectionWithName:rootObject:") = Id, NSString, Id;
override selector("serviceConnectionWithName:rootObject:usingNameServer:") = Id, NSString, Id, NSPortNameServer;
override selector("servicePortWithName:") = NSPort, NSString;
override selector("set") = Id;
override selector("setAMSymbol:") = Void, NSString;
override selector("setAbbreviationDictionary:") = Void, NSDictionary;
override selector("setAcquireFunction:") = Void, CCodePointer[[RawPointer,CCodePointer[[RawPointer],[CULong]],CChar],[RawPointer]];
override selector("setActionName:") = Void, NSString;
override selector("setAllHTTPHeaderFields:") = Void, NSDictionary;
override selector("setAllowsFloats:") = Void, Bool;
override selector("setAlwaysShowsDecimalSeparator:") = Void, Bool;
override selector("setArgument:atIndex:") = Void, RawPointer, CLong;
override selector("setArguments:") = Void, NSArray;
override selector("setArray:") = Void, NSArray;
override selector("setAttributeDescriptor:forKeyword:") = Void, NSAppleEventDescriptor, UInt;
override selector("setAttributedString:") = Void, NSAttributedString;
override selector("setAttributedStringForNil:") = Void, NSAttributedString;
override selector("setAttributedStringForNotANumber:") = Void, NSAttributedString;
override selector("setAttributedStringForZero:") = Void, NSAttributedString;
override selector("setAttributes:") = Void, NSArray;
override selector("setAttributes:ofItemAtPath:error:") = Bool, NSDictionary, NSString, Pointer[NSError];
override selector("setAttributes:range:") = Void, NSDictionary, NSRange;
override selector("setAttributesAsDictionary:") = Void, NSDictionary;
override selector("setBaseSpecifier:") = Void, NSScriptObjectSpecifier;
override selector("setBool:forKey:") = Void, Bool, NSString;
override selector("setByAddingObject:") = NSSet, Id;
override selector("setByAddingObjectsFromArray:") = NSSet, NSArray;
override selector("setByAddingObjectsFromSet:") = NSSet, NSSet;
override selector("setCachePolicy:") = Void, CULong;
override selector("setCalendar:") = Void, NSCalendar;
override selector("setCalendarFormat:") = Void, NSString;
override selector("setCaseSensitive:") = Void, Bool;
override selector("setCharacterEncoding:") = Void, NSString;
override selector("setCharactersToBeSkipped:") = Void, NSCharacterSet;
override selector("setChildSpecifier:") = Void, NSScriptObjectSpecifier;
override selector("setChildren:") = Void, NSArray;
override selector("setClass:forClassName:") = Void, Id, NSString;
override selector("setClassName:forClass:") = Void, NSString, Id;
override selector("setCompletionBlock:") = Void, UnknownType;
override selector("setContainerClassDescription:") = Void, NSScriptClassDescription;
override selector("setContainerIsObjectBeingTested:") = Void, Bool;
override selector("setContainerIsRangeContainerObject:") = Void, Bool;
override selector("setContainerSpecifier:") = Void, NSScriptObjectSpecifier;
override selector("setCookie:") = Void, NSHTTPCookie;
override selector("setCookieAcceptPolicy:") = Void, CULong;
override selector("setCookies:forURL:mainDocumentURL:") = Void, NSArray, NSURL, NSURL;
override selector("setCount:") = Void, CULong;
override selector("setCountLimit:") = Void, CULong;
override selector("setCredential:forProtectionSpace:") = Void, NSURLCredential, NSURLProtectionSpace;
override selector("setCurrencyCode:") = Void, NSString;
override selector("setCurrencyDecimalSeparator:") = Void, NSString;
override selector("setCurrencyGroupingSeparator:") = Void, NSString;
override selector("setCurrencySymbol:") = Void, NSString;
override selector("setCurrentAppleEventAndReplyEventWithSuspensionID:") = Void, NSAppleEventManagerSuspensionID;
override selector("setCurrentDirectoryPath:") = Void, NSString;
override selector("setDTD:") = Void, NSXMLDTD;
override selector("setDTDKind:") = Void, CULong;
override selector("setData:") = Void, NSData;
override selector("setDateFormat:") = Void, NSString;
override selector("setDateStyle:") = Void, CULong;
override selector("setDay:") = Void, CLong;
override selector("setDecimalSeparator:") = Void, NSString;
override selector("setDefaultBehavior:") = Void, Id;
override selector("setDefaultCredential:forProtectionSpace:") = Void, NSURLCredential, NSURLProtectionSpace;
override selector("setDefaultDate:") = Void, NSDate;
override selector("setDefaultFormatterBehavior:") = Void, CULong;
override selector("setDefaultNameServerPortNumber:") = Void, UShort;
override selector("setDefaultTimeZone:") = Void, NSTimeZone;
override selector("setDelegate:") = Void, Id;
override selector("setDeletesFileUponFailure:") = Void, Bool;
override selector("setDescriptionFunction:") = Void, CCodePointer[[RawPointer],[NSString]];
override selector("setDescriptor:forKeyword:") = Void, NSAppleEventDescriptor, UInt;
override selector("setDestination:allowOverwrite:") = Void, NSString, Bool;
override selector("setDictionary:") = Void, NSDictionary;
override selector("setDirectParameter:") = Void, Id;
override selector("setDiskCapacity:") = Void, CULong;
override selector("setDocumentContentKind:") = Void, CULong;
override selector("setDoesRelativeDateFormatting:") = Void, Bool;
override selector("setDouble:forKey:") = Void, Double, NSString;
override selector("setEndSpecifier:") = Void, NSScriptObjectSpecifier;
override selector("setEndSubelementIdentifier:") = Void, CULong;
override selector("setEndSubelementIndex:") = Void, CLong;
override selector("setEnvironment:") = Void, NSDictionary;
override selector("setEra:") = Void, CLong;
override selector("setEraSymbols:") = Void, NSArray;
override selector("setEvaluationErrorNumber:") = Void, CLong;
override selector("setEventHandler:andSelector:forEventClass:andEventID:") = Void, Id, SelectorHandle, UInt, UInt;
override selector("setEvictsObjectsWithDiscardedContent:") = Void, Bool;
override selector("setExponentSymbol:") = Void, NSString;
override selector("setFireDate:") = Void, NSDate;
override selector("setFirstWeekday:") = Void, CULong;
override selector("setFloat:forKey:") = Void, Float, NSString;
override selector("setFormat:") = Void, NSString;
override selector("setFormatWidth:") = Void, CULong;
override selector("setFormatterBehavior:") = Void, CULong;
override selector("setGeneratesCalendarDates:") = Void, Bool;
override selector("setGeneratesDecimalNumbers:") = Void, Bool;
override selector("setGregorianStartDate:") = Void, NSDate;
override selector("setGroupingAttributes:") = Void, NSArray;
override selector("setGroupingSeparator:") = Void, NSString;
override selector("setGroupingSize:") = Void, CULong;
override selector("setGroupsByEvent:") = Void, Bool;
override selector("setHTTPBody:") = Void, NSData;
override selector("setHTTPBodyStream:") = Void, NSInputStream;
override selector("setHTTPMethod:") = Void, NSString;
override selector("setHTTPShouldHandleCookies:") = Void, Bool;
override selector("setHasThousandSeparators:") = Void, Bool;
override selector("setHashFunction:") = Void, CCodePointer[[RawPointer,CCodePointer[[RawPointer],[CULong]]],[CULong]];
override selector("setHostCacheEnabled:") = Void, Bool;
override selector("setHour:") = Void, CLong;
override selector("setIndependentConversationQueueing:") = Void, Bool;
override selector("setIndex:") = Void, CLong;
override selector("setInsertionClassDescription:") = Void, NSScriptClassDescription;
override selector("setInteger:forKey:") = Void, CLong, NSString;
override selector("setInternationalCurrencySymbol:") = Void, NSString;
override selector("setIsEqualFunction:") = Void, CCodePointer[[RawPointer,RawPointer,CCodePointer[[RawPointer],[CULong]]],[CChar]];
override selector("setKey:") = Void, NSString;
override selector("setKeys:triggerChangeNotificationsForDependentKey:") = Void, NSArray, NSString;
override selector("setLaunchPath:") = Void, NSString;
override selector("setLength:") = Void, CULong;
override selector("setLenient:") = Void, Bool;
override selector("setLevelsOfUndo:") = Void, CULong;
override selector("setLocale:") = Void, NSLocale;
override selector("setLocalizesFormat:") = Void, Bool;
override selector("setLongEraSymbols:") = Void, NSArray;
override selector("setMIMEType:") = Void, NSString;
override selector("setMainDocumentURL:") = Void, NSURL;
override selector("setMaxConcurrentOperationCount:") = Void, CLong;
override selector("setMaximum:") = Void, NSNumber;
override selector("setMaximumFractionDigits:") = Void, CULong;
override selector("setMaximumIntegerDigits:") = Void, CULong;
override selector("setMaximumSignificantDigits:") = Void, CULong;
override selector("setMemoryCapacity:") = Void, CULong;
override selector("setMinimum:") = Void, NSNumber;
override selector("setMinimumDaysInFirstWeek:") = Void, CULong;
override selector("setMinimumFractionDigits:") = Void, CULong;
override selector("setMinimumIntegerDigits:") = Void, CULong;
override selector("setMinimumSignificantDigits:") = Void, CULong;
override selector("setMinusSign:") = Void, NSString;
override selector("setMinute:") = Void, CLong;
override selector("setMonth:") = Void, CLong;
override selector("setMonthSymbols:") = Void, NSArray;
override selector("setMsgid:") = Void, UInt;
override selector("setMultiplier:") = Void, NSNumber;
override selector("setName:") = Void, NSString;
override selector("setNamespaces:") = Void, NSArray;
override selector("setNegativeFormat:") = Void, NSString;
override selector("setNegativeInfinitySymbol:") = Void, NSString;
override selector("setNegativePrefix:") = Void, NSString;
override selector("setNegativeSuffix:") = Void, NSString;
override selector("setNilSymbol:") = Void, NSString;
override selector("setNilValueForKey:") = Void, NSString;
override selector("setNotANumberSymbol:") = Void, NSString;
override selector("setNotationName:") = Void, NSString;
override selector("setNotificationBatchingInterval:") = Void, Double;
override selector("setNumberStyle:") = Void, CULong;
override selector("setObject:forKey:") = Void, Id, Id;
override selector("setObject:forKey:cost:") = Void, Id, Id, CULong;
override selector("setObjectBeingTested:") = Void, Id;
override selector("setObjectValue:") = Void, Id;
override selector("setObjectZone:") = Void, Pointer[NSZone];
override selector("setObservationInfo:") = Void, RawPointer;
override selector("setOutputFormat:") = Void, CULong;
override selector("setPMSymbol:") = Void, NSString;
override selector("setPaddingCharacter:") = Void, NSString;
override selector("setPaddingPosition:") = Void, CULong;
override selector("setParamDescriptor:forKeyword:") = Void, NSAppleEventDescriptor, UInt;
override selector("setPartialStringValidationEnabled:") = Void, Bool;
override selector("setPerMillSymbol:") = Void, NSString;
override selector("setPercentSymbol:") = Void, NSString;
override selector("setPersistentDomain:forName:") = Void, NSDictionary, NSString;
override selector("setPlusSign:") = Void, NSString;
override selector("setPositiveFormat:") = Void, NSString;
override selector("setPositiveInfinitySymbol:") = Void, NSString;
override selector("setPositivePrefix:") = Void, NSString;
override selector("setPositiveSuffix:") = Void, NSString;
override selector("setPredicate:") = Void, NSPredicate;
override selector("setProcessName:") = Void, NSString;
override selector("setProperty:forKey:") = Bool, Id, NSString;
override selector("setProperty:forKey:inRequest:") = Void, Id, NSString, NSMutableURLRequest;
override selector("setProtocolForProxy:") = Void, Id;
override selector("setProtocolSpecificInformation:") = Void, NSString;
override selector("setPublicID:") = Void, NSString;
override selector("setQuarter:") = Void, CLong;
override selector("setQuarterSymbols:") = Void, NSArray;
override selector("setQueuePriority:") = Void, CLong;
override selector("setRangeContainerObject:") = Void, Id;
override selector("setReceiversSpecifier:") = Void, NSScriptObjectSpecifier;
override selector("setRelativePosition:") = Void, CULong;
override selector("setRelinquishFunction:") = Void, CCodePointer[[RawPointer,CCodePointer[[RawPointer],[CULong]]],[]];
override selector("setReplyTimeout:") = Void, Double;
override selector("setRepresentation") = NSSet;
override selector("setRequestTimeout:") = Void, Double;
override selector("setResourceData:") = Bool, NSData;
override selector("setResourceValue:forKey:error:") = Bool, Id, NSString, Pointer[NSError];
override selector("setResourceValues:error:") = Bool, NSDictionary, Pointer[NSError];
override selector("setReturnValue:") = Void, RawPointer;
override selector("setRootElement:") = Void, NSXMLNode;
override selector("setRootObject:") = Void, Id;
override selector("setRoundingBehavior:") = Void, NSDecimalNumberHandler;
override selector("setRoundingIncrement:") = Void, NSNumber;
override selector("setRoundingMode:") = Void, CULong;
override selector("setRunLoopModes:") = Void, NSArray;
override selector("setScanLocation:") = Void, CULong;
override selector("setScriptErrorExpectedTypeDescriptor:") = Void, NSAppleEventDescriptor;
override selector("setScriptErrorNumber:") = Void, Int;
override selector("setScriptErrorOffendingObjectDescriptor:") = Void, NSAppleEventDescriptor;
override selector("setScriptErrorString:") = Void, NSString;
override selector("setScriptingProperties:") = Void, NSDictionary;
override selector("setSearchScopes:") = Void, NSArray;
override selector("setSecond:") = Void, CLong;
override selector("setSecondaryGroupingSize:") = Void, CULong;
override selector("setSelector:") = Void, SelectorHandle;
override selector("setSet:") = Void, NSSet;
override selector("setSharedScriptSuiteRegistry:") = Void, NSScriptSuiteRegistry;
override selector("setSharedURLCache:") = Void, NSURLCache;
override selector("setShortMonthSymbols:") = Void, NSArray;
override selector("setShortQuarterSymbols:") = Void, NSArray;
override selector("setShortStandaloneMonthSymbols:") = Void, NSArray;
override selector("setShortStandaloneQuarterSymbols:") = Void, NSArray;
override selector("setShortStandaloneWeekdaySymbols:") = Void, NSArray;
override selector("setShortWeekdaySymbols:") = Void, NSArray;
override selector("setShouldProcessNamespaces:") = Void, Bool;
override selector("setShouldReportNamespacePrefixes:") = Void, Bool;
override selector("setShouldResolveExternalEntities:") = Void, Bool;
override selector("setSizeFunction:") = Void, CCodePointer[[RawPointer],[CULong]];
override selector("setSortDescriptors:") = Void, NSArray;
override selector("setStackSize:") = Void, CULong;
override selector("setStandalone:") = Void, Bool;
override selector("setStandaloneMonthSymbols:") = Void, NSArray;
override selector("setStandaloneQuarterSymbols:") = Void, NSArray;
override selector("setStandaloneWeekdaySymbols:") = Void, NSArray;
override selector("setStandardError:") = Void, Id;
override selector("setStandardInput:") = Void, Id;
override selector("setStandardOutput:") = Void, Id;
override selector("setStartSpecifier:") = Void, NSScriptObjectSpecifier;
override selector("setStartSubelementIdentifier:") = Void, CULong;
override selector("setStartSubelementIndex:") = Void, CLong;
override selector("setString:") = Void, NSString;
override selector("setStringValue:") = Void, NSString;
override selector("setStringValue:resolvingEntities:") = Void, NSString, Bool;
override selector("setSuspended:") = Void, Bool;
override selector("setSystemID:") = Void, NSString;
override selector("setTXTRecordData:") = Bool, NSData;
override selector("setTarget:") = Void, Id;
override selector("setTest:") = Void, NSScriptWhoseTest;
override selector("setTextAttributesForNegativeInfinity:") = Void, NSDictionary;
override selector("setTextAttributesForNegativeValues:") = Void, NSDictionary;
override selector("setTextAttributesForNil:") = Void, NSDictionary;
override selector("setTextAttributesForNotANumber:") = Void, NSDictionary;
override selector("setTextAttributesForPositiveInfinity:") = Void, NSDictionary;
override selector("setTextAttributesForPositiveValues:") = Void, NSDictionary;
override selector("setTextAttributesForZero:") = Void, NSDictionary;
override selector("setThousandSeparator:") = Void, NSString;
override selector("setThreadPriority:") = Bool, Double;
override selector("setTimeStyle:") = Void, CULong;
override selector("setTimeZone:") = Void, NSTimeZone;
override selector("setTimeoutInterval:") = Void, Double;
override selector("setTopLevelObject:") = Void, Id;
override selector("setTotalCostLimit:") = Void, CULong;
override selector("setTransformStruct:") = Void, NSAffineTransformStruct;
override selector("setTwoDigitStartDate:") = Void, NSDate;
override selector("setURI:") = Void, NSString;
override selector("setURL:") = Void, NSURL;
override selector("setURL:forKey:") = Void, NSURL, NSString;
override selector("setUniqueID:") = Void, Id;
override selector("setUsesGroupingSeparator:") = Void, Bool;
override selector("setUsesSignificantDigits:") = Void, Bool;
override selector("setUsesStrongWriteBarrier:") = Void, Bool;
override selector("setUsesWeakReadAndWriteBarriers:") = Void, Bool;
override selector("setValue:forHTTPHeaderField:") = Void, NSString, NSString;
override selector("setValue:forKey:") = Void, Id, NSString;
override selector("setValue:forKeyPath:") = Void, Id, NSString;
override selector("setValue:forUndefinedKey:") = Void, Id, NSString;
override selector("setValueListAttributes:") = Void, NSArray;
override selector("setValueTransformer:forName:") = Void, NSValueTransformer, NSString;
override selector("setValuesForKeysWithDictionary:") = Void, NSDictionary;
override selector("setVersion:") = Void, CLong;
override selector("setVeryShortMonthSymbols:") = Void, NSArray;
override selector("setVeryShortStandaloneMonthSymbols:") = Void, NSArray;
override selector("setVeryShortStandaloneWeekdaySymbols:") = Void, NSArray;
override selector("setVeryShortWeekdaySymbols:") = Void, NSArray;
override selector("setVolatileDomain:forName:") = Void, NSDictionary, NSString;
override selector("setWeek:") = Void, CLong;
override selector("setWeekday:") = Void, CLong;
override selector("setWeekdayOrdinal:") = Void, CLong;
override selector("setWeekdaySymbols:") = Void, NSArray;
override selector("setWithArray:") = Id, NSArray;
override selector("setWithCapacity:") = Id, CULong;
override selector("setWithObject:") = Id, Id;
override varargSelector("setWithObjects:") = Id, Id;
override selector("setWithObjects:count:") = Id, Pointer[Id], CULong;
override selector("setWithSet:") = Id, NSSet;
override selector("setYear:") = Void, CLong;
override selector("setZeroSymbol:") = Void, NSString;
override selector("sharedAppleEventManager") = NSAppleEventManager;
override selector("sharedCoercionHandler") = NSScriptCoercionHandler;
override selector("sharedCredentialStorage") = NSURLCredentialStorage;
override selector("sharedFrameworksPath") = NSString;
override selector("sharedFrameworksURL") = NSURL;
override selector("sharedHTTPCookieStorage") = NSHTTPCookieStorage;
override selector("sharedInstance") = Id;
override selector("sharedScriptExecutionContext") = NSScriptExecutionContext;
override selector("sharedScriptSuiteRegistry") = NSScriptSuiteRegistry;
override selector("sharedSupportPath") = NSString;
override selector("sharedSupportURL") = NSURL;
override selector("sharedURLCache") = NSURLCache;
override selector("shiftIndexesStartingAtIndex:by:") = Void, CULong, CLong;
override selector("shortMonthSymbols") = NSArray;
override selector("shortQuarterSymbols") = NSArray;
override selector("shortStandaloneMonthSymbols") = NSArray;
override selector("shortStandaloneQuarterSymbols") = NSArray;
override selector("shortStandaloneWeekdaySymbols") = NSArray;
override selector("shortValue") = Short;
override selector("shortWeekdaySymbols") = NSArray;
override selector("shouldProcessNamespaces") = Bool;
override selector("shouldReportNamespacePrefixes") = Bool;
override selector("shouldResolveExternalEntities") = Bool;
override selector("signal") = Void;
override selector("signatureWithObjCTypes:") = NSMethodSignature, Pointer[CChar];
override selector("sizeFunction") = CCodePointer[[RawPointer],[CULong]];
override selector("sizeValue") = NSSize;
override selector("skipDescendants") = Void;
override selector("skipDescendents") = Void;
override selector("sleepForTimeInterval:") = Void, Double;
override selector("sleepUntilDate:") = Void, NSDate;
override selector("smallestEncoding") = CULong;
override selector("socket") = Int;
override selector("socketType") = Int;
override selector("sortDescriptorWithKey:ascending:") = Id, NSString, Bool;
override selector("sortDescriptorWithKey:ascending:comparator:") = Id, NSString, Bool, NSComparator;
override selector("sortDescriptorWithKey:ascending:selector:") = Id, NSString, Bool, SelectorHandle;
override selector("sortDescriptors") = NSArray;
override selector("sortUsingComparator:") = Void, NSComparator;
override selector("sortUsingDescriptors:") = Void, NSArray;
override selector("sortUsingFunction:context:") = Void, CCodePointer[[Id,Id,RawPointer],[CLong]], RawPointer;
override selector("sortUsingSelector:") = Void, SelectorHandle;
override selector("sortWithOptions:usingComparator:") = Void, CULong, NSComparator;
override selector("sortedArrayHint") = NSData;
override selector("sortedArrayUsingComparator:") = NSArray, NSComparator;
override selector("sortedArrayUsingDescriptors:") = NSArray, NSArray;
override selector("sortedArrayUsingFunction:context:") = NSArray, CCodePointer[[Id,Id,RawPointer],[CLong]], RawPointer;
override selector("sortedArrayUsingFunction:context:hint:") = NSArray, CCodePointer[[Id,Id,RawPointer],[CLong]], RawPointer, NSData;
override selector("sortedArrayUsingSelector:") = NSArray, SelectorHandle;
override selector("sortedArrayWithOptions:usingComparator:") = NSArray, CULong, NSComparator;
override selector("source") = NSString;
override selector("spellCheckingResultWithRange:") = NSTextCheckingResult, NSRange;
override selector("spellServer:checkGrammarInString:language:details:") = NSRange, NSSpellServer, NSString, NSString, Pointer[NSArray];
override selector("spellServer:checkString:offset:types:options:orthography:wordCount:") = NSArray, NSSpellServer, NSString, CULong, UInt64, NSDictionary, NSOrthography, Pointer[CLong];
override selector("spellServer:didForgetWord:inLanguage:") = Void, NSSpellServer, NSString, NSString;
override selector("spellServer:didLearnWord:inLanguage:") = Void, NSSpellServer, NSString, NSString;
override selector("spellServer:findMisspelledWordInString:language:wordCount:countOnly:") = NSRange, NSSpellServer, NSString, NSString, Pointer[CLong], Bool;
override selector("spellServer:suggestCompletionsForPartialWordRange:inString:language:") = NSArray, NSSpellServer, NSRange, NSString, NSString;
override selector("spellServer:suggestGuessesForWord:inLanguage:") = NSArray, NSSpellServer, NSString, NSString;
override selector("stackSize") = CULong;
override selector("standaloneMonthSymbols") = NSArray;
override selector("standaloneQuarterSymbols") = NSArray;
override selector("standaloneWeekdaySymbols") = NSArray;
override selector("standardError") = Id;
override selector("standardInput") = Id;
override selector("standardOutput") = Id;
override selector("standardUserDefaults") = NSUserDefaults;
override selector("standardizedURL") = NSURL;
override selector("start") = Void;
override selector("startLoading") = Void;
override selector("startMonitoring") = Void;
override selector("startQuery") = Bool;
override selector("startSpecifier") = NSScriptObjectSpecifier;
override selector("startSubelementIdentifier") = CULong;
override selector("startSubelementIndex") = CLong;
override selector("statistics") = NSDictionary;
override selector("status") = CULong;
override selector("statusCode") = CLong;
override selector("stop") = Void;
override selector("stopLoading") = Void;
override selector("stopMonitoring") = Void;
override selector("stopQuery") = Void;
override selector("storagePolicy") = CULong;
override selector("storeCachedResponse:forRequest:") = Void, NSCachedURLResponse, NSURLRequest;
override selector("storedValueForKey:") = Id, NSString;
override selector("stream:handleEvent:") = Void, NSStream, CULong;
override selector("streamError") = NSError;
override selector("streamStatus") = CULong;
override selector("string") = Id;
override selector("stringArrayForKey:") = NSArray, NSString;
override selector("stringByAbbreviatingWithTildeInPath") = NSString;
override selector("stringByAddingPercentEscapesUsingEncoding:") = NSString, CULong;
override varargSelector("stringByAppendingFormat:") = NSString, NSString;
override selector("stringByAppendingPathComponent:") = NSString, NSString;
override selector("stringByAppendingPathExtension:") = NSString, NSString;
override selector("stringByAppendingString:") = NSString, NSString;
override selector("stringByDeletingLastPathComponent") = NSString;
override selector("stringByDeletingPathExtension") = NSString;
override selector("stringByExpandingTildeInPath") = NSString;
override selector("stringByFoldingWithOptions:locale:") = NSString, CULong, NSLocale;
override selector("stringByPaddingToLength:withString:startingAtIndex:") = NSString, CULong, NSString, CULong;
override selector("stringByReplacingCharactersInRange:withString:") = NSString, NSRange, NSString;
override selector("stringByReplacingOccurrencesOfString:withString:") = NSString, NSString, NSString;
override selector("stringByReplacingOccurrencesOfString:withString:options:range:") = NSString, NSString, NSString, CULong, NSRange;
override selector("stringByReplacingPercentEscapesUsingEncoding:") = NSString, CULong;
override selector("stringByResolvingSymlinksInPath") = NSString;
override selector("stringByStandardizingPath") = NSString;
override selector("stringByTrimmingCharactersInSet:") = NSString, NSCharacterSet;
override selector("stringForKey:") = NSString, NSString;
override selector("stringForObjectValue:") = NSString, Id;
override selector("stringFromDate:") = NSString, NSDate;
override selector("stringFromNumber:") = NSString, NSNumber;
override selector("stringValue") = NSString;
override selector("stringWithCString:") = Id, Pointer[CChar];
override selector("stringWithCString:encoding:") = Id, Pointer[CChar], CULong;
override selector("stringWithCString:length:") = Id, Pointer[CChar], CULong;
override selector("stringWithCapacity:") = Id, CULong;
override selector("stringWithCharacters:length:") = Id, Pointer[UShort], CULong;
override selector("stringWithContentsOfFile:") = Id, NSString;
override selector("stringWithContentsOfFile:encoding:error:") = Id, NSString, CULong, Pointer[NSError];
override selector("stringWithContentsOfFile:usedEncoding:error:") = Id, NSString, Pointer[CULong], Pointer[NSError];
override selector("stringWithContentsOfURL:") = Id, NSURL;
override selector("stringWithContentsOfURL:encoding:error:") = Id, NSURL, CULong, Pointer[NSError];
override selector("stringWithContentsOfURL:usedEncoding:error:") = Id, NSURL, Pointer[CULong], Pointer[NSError];
override selector("stringWithFileSystemRepresentation:length:") = NSString, Pointer[CChar], CULong;
override varargSelector("stringWithFormat:") = Id, NSString;
override selector("stringWithString:") = Id, NSString;
override selector("stringWithUTF8String:") = Id, Pointer[CChar];
override selector("stringsByAppendingPaths:") = NSArray, NSArray;
override selector("subarrayWithRange:") = NSArray, NSRange;
override selector("subdataWithRange:") = NSData, NSRange;
override selector("subgroups") = NSArray;
override selector("subpathsAtPath:") = NSArray, NSString;
override selector("subpathsOfDirectoryAtPath:error:") = NSArray, NSString, Pointer[NSError];
override selector("subpredicates") = NSArray;
override selector("substringFromIndex:") = NSString, CULong;
override selector("substringToIndex:") = NSString, CULong;
override selector("substringWithRange:") = NSString, NSRange;
override selector("suggestedFilename") = NSString;
override selector("suiteForAppleEventCode:") = NSString, UInt;
override selector("suiteName") = NSString;
override selector("suiteNames") = NSArray;
override selector("superclass") = Id;
override selector("superclassDescription") = NSScriptClassDescription;
override selector("supportsCommand:") = Bool, NSScriptCommandDescription;
override selector("suspend") = Bool;
override selector("suspendCurrentAppleEvent") = NSAppleEventManagerSuspensionID;
override selector("suspendExecution") = Void;
override selector("suspended") = Bool;
override selector("symbolCharacterSet") = Id;
override selector("synchronize") = Bool;
override selector("synchronizeFile") = Void;
override selector("systemDefaultPortNameServer") = NSPortNameServer;
override selector("systemID") = NSString;
override selector("systemLocale") = Id;
override selector("systemTimeZone") = NSTimeZone;
override selector("systemUptime") = Double;
override selector("systemVersion") = UInt;
override selector("takeStoredValue:forKey:") = Void, Id, NSString;
override selector("takeValue:forKey:") = Void, Id, NSString;
override selector("takeValue:forKeyPath:") = Void, Id, NSString;
override selector("takeValuesFromDictionary:") = Void, NSDictionary;
override selector("target") = Id;
override selector("terminate") = Void;
override selector("terminationReason") = CLong;
override selector("terminationStatus") = Int;
override selector("test") = NSScriptWhoseTest;
override selector("textAttributesForNegativeInfinity") = NSDictionary;
override selector("textAttributesForNegativeValues") = NSDictionary;
override selector("textAttributesForNil") = NSDictionary;
override selector("textAttributesForNotANumber") = NSDictionary;
override selector("textAttributesForPositiveInfinity") = NSDictionary;
override selector("textAttributesForPositiveValues") = NSDictionary;
override selector("textAttributesForZero") = NSDictionary;
override selector("textEncodingName") = NSString;
override selector("textWithStringValue:") = Id, NSString;
override selector("thousandSeparator") = NSString;
override selector("threadDictionary") = NSMutableDictionary;
override selector("threadPriority") = Double;
override selector("timeInterval") = Double;
override selector("timeIntervalSince1970") = Double;
override selector("timeIntervalSinceDate:") = Double, NSDate;
override selector("timeIntervalSinceNow") = Double;
override selector("timeIntervalSinceReferenceDate") = Double;
override selector("timeStyle") = CULong;
override selector("timeZone") = NSTimeZone;
override selector("timeZoneDataVersion") = NSString;
override selector("timeZoneForSecondsFromGMT:") = Id, CLong;
override selector("timeZoneWithAbbreviation:") = Id, NSString;
override selector("timeZoneWithName:") = Id, NSString;
override selector("timeZoneWithName:data:") = Id, NSString, NSData;
override selector("timeoutInterval") = Double;
override selector("timerWithTimeInterval:invocation:repeats:") = NSTimer, Double, NSInvocation, Bool;
override selector("timerWithTimeInterval:target:selector:userInfo:repeats:") = NSTimer, Double, Id, SelectorHandle, Id, Bool;
override selector("toManyRelationshipKeys") = NSArray;
override selector("toOneRelationshipKeys") = NSArray;
override selector("topLevelObject") = Id;
override selector("totalCostLimit") = CULong;
override selector("transactionID") = Int;
override selector("transform") = NSAffineTransform;
override selector("transformPoint:") = NSPoint, NSPoint;
override selector("transformSize:") = NSSize, NSSize;
override selector("transformStruct") = NSAffineTransformStruct;
override selector("transformedValue:") = Id, Id;
override selector("transformedValueClass") = Id;
override selector("translateXBy:yBy:") = Void, Double, Double;
override selector("truncateFileAtOffset:") = Void, UInt64;
override selector("tryLock") = Bool;
override selector("tryLockWhenCondition:") = Bool, CLong;
override selector("twoDigitStartDate") = NSDate;
override selector("type") = NSString;
override selector("typeCodeValue") = UInt;
override selector("typeForArgumentWithName:") = NSString, NSString;
override selector("typeForKey:") = NSString, NSString;
override selector("unableToSetNilForKey:") = Void, NSString;
override selector("unarchiveObjectWithData:") = Id, NSData;
override selector("unarchiveObjectWithFile:") = Id, NSString;
override selector("unarchiver:cannotDecodeObjectOfClassName:originalClasses:") = Id, NSKeyedUnarchiver, NSString, NSArray;
override selector("unarchiver:didDecodeObject:") = Id, NSKeyedUnarchiver, Id;
override selector("unarchiver:willReplaceObject:withObject:") = Void, NSKeyedUnarchiver, Id, Id;
override selector("unarchiverDidFinish:") = Void, NSKeyedUnarchiver;
override selector("unarchiverWillFinish:") = Void, NSKeyedUnarchiver;
override selector("undo") = Void;
override selector("undoActionName") = NSString;
override selector("undoMenuItemTitle") = NSString;
override selector("undoMenuTitleForUndoActionName:") = NSString, NSString;
override selector("undoNestedGroup") = Void;
override selector("unionHashTable:") = Void, NSHashTable;
override selector("unionSet:") = Void, NSSet;
override selector("uniqueID") = Id;
override selector("unload") = Bool;
override selector("unlock") = Void;
override selector("unlockWithCondition:") = Void, CLong;
override selector("unregisterClass:") = Void, Id;
override selector("unscheduleFromRunLoop:forMode:") = Void, NSRunLoop, NSString;
override selector("unsignedCharValue") = CUChar;
override selector("unsignedIntValue") = UInt;
override selector("unsignedIntegerValue") = CULong;
override selector("unsignedLongLongValue") = UInt64;
override selector("unsignedLongValue") = CULong;
override selector("unsignedShortValue") = UShort;
override selector("uppercaseLetterCharacterSet") = Id;
override selector("uppercaseString") = NSString;
override selector("useCredential:forAuthenticationChallenge:") = Void, NSURLCredential, NSURLAuthenticationChallenge;
override selector("useStoredAccessor") = Bool;
override selector("user") = NSString;
override selector("userInfo") = Id;
override selector("usesGroupingSeparator") = Bool;
override selector("usesSignificantDigits") = Bool;
override selector("usesStrongWriteBarrier") = Bool;
override selector("usesWeakReadAndWriteBarriers") = Bool;
override selector("validateAndReturnError:") = Bool, Pointer[NSError];
override selector("validateValue:forKey:error:") = Bool, Pointer[Id], NSString, Pointer[NSError];
override selector("validateValue:forKeyPath:error:") = Bool, Pointer[Id], NSString, Pointer[NSError];
override selector("value") = Id;
override selector("value:withObjCType:") = NSValue, RawPointer, Pointer[CChar];
override selector("valueAtIndex:inPropertyWithKey:") = Id, CULong, NSString;
override selector("valueForAttribute:") = Id, NSString;
override selector("valueForHTTPHeaderField:") = NSString, NSString;
override selector("valueForKey:") = Id, NSString;
override selector("valueForKeyPath:") = Id, NSString;
override selector("valueForUndefinedKey:") = Id, NSString;
override selector("valueListAttributes") = NSArray;
override selector("valueLists") = NSDictionary;
override selector("valueOfAttribute:forResultAtIndex:") = Id, NSString, CULong;
override selector("valuePointerFunctions") = NSPointerFunctions;
override selector("valueTransformerForName:") = NSValueTransformer, NSString;
override selector("valueTransformerNames") = NSArray;
override selector("valueWithBytes:objCType:") = NSValue, RawPointer, Pointer[CChar];
override selector("valueWithName:inPropertyWithKey:") = Id, NSString, NSString;
override selector("valueWithNonretainedObject:") = NSValue, Id;
override selector("valueWithPoint:") = NSValue, NSPoint;
override selector("valueWithPointer:") = NSValue, RawPointer;
override selector("valueWithRange:") = NSValue, NSRange;
override selector("valueWithRect:") = NSValue, NSRect;
override selector("valueWithSize:") = NSValue, NSSize;
override selector("valueWithUniqueID:inPropertyWithKey:") = Id, Id, NSString;
override selector("valuesForAttributes:") = NSDictionary, NSArray;
override selector("valuesForKeys:") = NSDictionary, NSArray;
override selector("variable") = NSString;
override selector("version") = CLong;
override selector("versionForClassName:") = CLong, NSString;
override selector("veryShortMonthSymbols") = NSArray;
override selector("veryShortStandaloneMonthSymbols") = NSArray;
override selector("veryShortStandaloneWeekdaySymbols") = NSArray;
override selector("veryShortWeekdaySymbols") = NSArray;
override selector("volatileDomainForName:") = NSDictionary, NSString;
override selector("volatileDomainNames") = NSArray;
override selector("wait") = Void;
override selector("waitForDataInBackgroundAndNotify") = Void;
override selector("waitForDataInBackgroundAndNotifyForModes:") = Void, NSArray;
override selector("waitUntilAllOperationsAreFinished") = Void;
override selector("waitUntilDate:") = Bool, NSDate;
override selector("waitUntilExit") = Void;
override selector("waitUntilFinished") = Void;
override selector("week") = CLong;
override selector("weekday") = CLong;
override selector("weekdayOrdinal") = CLong;
override selector("weekdaySymbols") = NSArray;
override selector("whitespaceAndNewlineCharacterSet") = Id;
override selector("whitespaceCharacterSet") = Id;
override selector("willChange:valuesAtIndexes:forKey:") = Void, CULong, NSIndexSet, NSString;
override selector("willChangeValueForKey:") = Void, NSString;
override selector("willChangeValueForKey:withSetMutation:usingObjects:") = Void, NSString, CULong, NSSet;
override selector("windowsLocaleCodeFromLocaleIdentifier:") = UInt, NSString;
override selector("write:maxLength:") = CLong, Pointer[CUChar], CULong;
override selector("writeBookmarkData:toURL:options:error:") = Bool, NSData, NSURL, CULong, Pointer[NSError];
override selector("writeData:") = Bool, NSData;
override selector("writeProperty:forKey:") = Bool, Id, NSString;
override selector("writePropertyList:toStream:format:options:error:") = CLong, Id, NSOutputStream, CULong, CULong, Pointer[NSError];
override selector("writeToFile:atomically:") = Bool, NSString, Bool;
override selector("writeToFile:atomically:encoding:error:") = Bool, NSString, Bool, CULong, Pointer[NSError];
override selector("writeToFile:options:error:") = Bool, NSString, CULong, Pointer[NSError];
override selector("writeToURL:atomically:") = Bool, NSURL, Bool;
override selector("writeToURL:atomically:encoding:error:") = Bool, NSURL, Bool, CULong, Pointer[NSError];
override selector("writeToURL:options:error:") = Bool, NSURL, CULong, Pointer[NSError];
override selector("year") = CLong;
override selector("yearOfCommonEra") = CLong;
override selector("years:months:days:hours:minutes:seconds:sinceDate:") = Void, Pointer[CLong], Pointer[CLong], Pointer[CLong], Pointer[CLong], Pointer[CLong], Pointer[CLong], NSCalendarDate;
override selector("zero") = NSDecimalNumber;
override selector("zeroSymbol") = NSString;
override selector("zone") = Pointer[NSZone];

record NSAffineTransform = externalClass(NSObject);
override externalInstanceMethod(#NSAffineTransform, "copyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSAffineTransform, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSAffineTransform, "initWithCoder:") = Id, NSCoder;
override externalClassMethod(#NSAffineTransform, "transform") = NSAffineTransform;
override externalInstanceMethod(#NSAffineTransform, "initWithTransform:") = Id, NSAffineTransform;
override externalInstanceMethod(#NSAffineTransform, "translateXBy:yBy:") = Void, Double, Double;
override externalInstanceMethod(#NSAffineTransform, "rotateByDegrees:") = Void, Double;
override externalInstanceMethod(#NSAffineTransform, "rotateByRadians:") = Void, Double;
override externalInstanceMethod(#NSAffineTransform, "scaleBy:") = Void, Double;
override externalInstanceMethod(#NSAffineTransform, "scaleXBy:yBy:") = Void, Double, Double;
override externalInstanceMethod(#NSAffineTransform, "invert") = Void;
override externalInstanceMethod(#NSAffineTransform, "appendTransform:") = Void, NSAffineTransform;
override externalInstanceMethod(#NSAffineTransform, "prependTransform:") = Void, NSAffineTransform;
override externalInstanceMethod(#NSAffineTransform, "transformPoint:") = NSPoint, NSPoint;
override externalInstanceMethod(#NSAffineTransform, "transformSize:") = NSSize, NSSize;
override externalInstanceMethod(#NSAffineTransform, "transformStruct") = NSAffineTransformStruct;
override externalInstanceMethod(#NSAffineTransform, "setTransformStruct:") = Void, NSAffineTransformStruct;

record NSAppleEventDescriptor = externalClass(NSObject);
override externalInstanceMethod(#NSAppleEventDescriptor, "copyWithZone:") = Id, Pointer[NSZone];
override externalClassMethod(#NSAppleEventDescriptor, "nullDescriptor") = NSAppleEventDescriptor;
override externalClassMethod(#NSAppleEventDescriptor, "descriptorWithDescriptorType:bytes:length:") = NSAppleEventDescriptor, UInt, RawPointer, CULong;
override externalClassMethod(#NSAppleEventDescriptor, "descriptorWithDescriptorType:data:") = NSAppleEventDescriptor, UInt, NSData;
override externalClassMethod(#NSAppleEventDescriptor, "descriptorWithBoolean:") = NSAppleEventDescriptor, CUChar;
override externalClassMethod(#NSAppleEventDescriptor, "descriptorWithEnumCode:") = NSAppleEventDescriptor, UInt;
override externalClassMethod(#NSAppleEventDescriptor, "descriptorWithInt32:") = NSAppleEventDescriptor, Int;
override externalClassMethod(#NSAppleEventDescriptor, "descriptorWithTypeCode:") = NSAppleEventDescriptor, UInt;
override externalClassMethod(#NSAppleEventDescriptor, "descriptorWithString:") = NSAppleEventDescriptor, NSString;
override externalClassMethod(#NSAppleEventDescriptor, "appleEventWithEventClass:eventID:targetDescriptor:returnID:transactionID:") = NSAppleEventDescriptor, UInt, UInt, NSAppleEventDescriptor, Short, Int;
override externalClassMethod(#NSAppleEventDescriptor, "listDescriptor") = NSAppleEventDescriptor;
override externalClassMethod(#NSAppleEventDescriptor, "recordDescriptor") = NSAppleEventDescriptor;
override externalInstanceMethod(#NSAppleEventDescriptor, "initWithAEDescNoCopy:") = Id, Pointer[AEDesc];
override externalInstanceMethod(#NSAppleEventDescriptor, "initWithDescriptorType:bytes:length:") = Id, UInt, RawPointer, CULong;
override externalInstanceMethod(#NSAppleEventDescriptor, "initWithDescriptorType:data:") = Id, UInt, NSData;
override externalInstanceMethod(#NSAppleEventDescriptor, "initWithEventClass:eventID:targetDescriptor:returnID:transactionID:") = Id, UInt, UInt, NSAppleEventDescriptor, Short, Int;
override externalInstanceMethod(#NSAppleEventDescriptor, "initListDescriptor") = Id;
override externalInstanceMethod(#NSAppleEventDescriptor, "initRecordDescriptor") = Id;
override externalInstanceMethod(#NSAppleEventDescriptor, "aeDesc") = Pointer[AEDesc];
override externalInstanceMethod(#NSAppleEventDescriptor, "descriptorType") = UInt;
override externalInstanceMethod(#NSAppleEventDescriptor, "data") = NSData;
override externalInstanceMethod(#NSAppleEventDescriptor, "booleanValue") = CUChar;
override externalInstanceMethod(#NSAppleEventDescriptor, "enumCodeValue") = UInt;
override externalInstanceMethod(#NSAppleEventDescriptor, "int32Value") = Int;
override externalInstanceMethod(#NSAppleEventDescriptor, "typeCodeValue") = UInt;
override externalInstanceMethod(#NSAppleEventDescriptor, "stringValue") = NSString;
override externalInstanceMethod(#NSAppleEventDescriptor, "eventClass") = UInt;
override externalInstanceMethod(#NSAppleEventDescriptor, "eventID") = UInt;
override externalInstanceMethod(#NSAppleEventDescriptor, "returnID") = Short;
override externalInstanceMethod(#NSAppleEventDescriptor, "transactionID") = Int;
override externalInstanceMethod(#NSAppleEventDescriptor, "setParamDescriptor:forKeyword:") = Void, NSAppleEventDescriptor, UInt;
override externalInstanceMethod(#NSAppleEventDescriptor, "paramDescriptorForKeyword:") = NSAppleEventDescriptor, UInt;
override externalInstanceMethod(#NSAppleEventDescriptor, "removeParamDescriptorWithKeyword:") = Void, UInt;
override externalInstanceMethod(#NSAppleEventDescriptor, "setAttributeDescriptor:forKeyword:") = Void, NSAppleEventDescriptor, UInt;
override externalInstanceMethod(#NSAppleEventDescriptor, "attributeDescriptorForKeyword:") = NSAppleEventDescriptor, UInt;
override externalInstanceMethod(#NSAppleEventDescriptor, "numberOfItems") = CLong;
override externalInstanceMethod(#NSAppleEventDescriptor, "insertDescriptor:atIndex:") = Void, NSAppleEventDescriptor, CLong;
override externalInstanceMethod(#NSAppleEventDescriptor, "descriptorAtIndex:") = NSAppleEventDescriptor, CLong;
override externalInstanceMethod(#NSAppleEventDescriptor, "removeDescriptorAtIndex:") = Void, CLong;
override externalInstanceMethod(#NSAppleEventDescriptor, "setDescriptor:forKeyword:") = Void, NSAppleEventDescriptor, UInt;
override externalInstanceMethod(#NSAppleEventDescriptor, "descriptorForKeyword:") = NSAppleEventDescriptor, UInt;
override externalInstanceMethod(#NSAppleEventDescriptor, "removeDescriptorWithKeyword:") = Void, UInt;
override externalInstanceMethod(#NSAppleEventDescriptor, "keywordForDescriptorAtIndex:") = UInt, CLong;
override externalInstanceMethod(#NSAppleEventDescriptor, "coerceToDescriptorType:") = NSAppleEventDescriptor, UInt;

record NSAppleEventManager = externalClass(NSObject);
override externalClassMethod(#NSAppleEventManager, "sharedAppleEventManager") = NSAppleEventManager;
override externalInstanceMethod(#NSAppleEventManager, "setEventHandler:andSelector:forEventClass:andEventID:") = Void, Id, SelectorHandle, UInt, UInt;
override externalInstanceMethod(#NSAppleEventManager, "removeEventHandlerForEventClass:andEventID:") = Void, UInt, UInt;
override externalInstanceMethod(#NSAppleEventManager, "dispatchRawAppleEvent:withRawReply:handlerRefCon:") = Short, Pointer[AppleEvent], Pointer[AppleEvent], SRefCon;
override externalInstanceMethod(#NSAppleEventManager, "currentAppleEvent") = NSAppleEventDescriptor;
override externalInstanceMethod(#NSAppleEventManager, "currentReplyAppleEvent") = NSAppleEventDescriptor;
override externalInstanceMethod(#NSAppleEventManager, "suspendCurrentAppleEvent") = NSAppleEventManagerSuspensionID;
override externalInstanceMethod(#NSAppleEventManager, "appleEventForSuspensionID:") = NSAppleEventDescriptor, NSAppleEventManagerSuspensionID;
override externalInstanceMethod(#NSAppleEventManager, "replyAppleEventForSuspensionID:") = NSAppleEventDescriptor, NSAppleEventManagerSuspensionID;
override externalInstanceMethod(#NSAppleEventManager, "setCurrentAppleEventAndReplyEventWithSuspensionID:") = Void, NSAppleEventManagerSuspensionID;
override externalInstanceMethod(#NSAppleEventManager, "resumeWithSuspensionID:") = Void, NSAppleEventManagerSuspensionID;

record NSAppleScript = externalClass(NSObject);
override externalInstanceMethod(#NSAppleScript, "copyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSAppleScript, "initWithContentsOfURL:error:") = Id, NSURL, Pointer[NSDictionary];
override externalInstanceMethod(#NSAppleScript, "initWithSource:") = Id, NSString;
override externalInstanceMethod(#NSAppleScript, "source") = NSString;
override externalInstanceMethod(#NSAppleScript, "isCompiled") = Bool;
override externalInstanceMethod(#NSAppleScript, "compileAndReturnError:") = Bool, Pointer[NSDictionary];
override externalInstanceMethod(#NSAppleScript, "executeAndReturnError:") = NSAppleEventDescriptor, Pointer[NSDictionary];
override externalInstanceMethod(#NSAppleScript, "executeAppleEvent:error:") = NSAppleEventDescriptor, NSAppleEventDescriptor, Pointer[NSDictionary];

record NSArchiver = externalClass(NSCoder);
override externalInstanceMethod(#NSArchiver, "initForWritingWithMutableData:") = Id, NSMutableData;
override externalInstanceMethod(#NSArchiver, "archiverData") = NSMutableData;
override externalInstanceMethod(#NSArchiver, "encodeRootObject:") = Void, Id;
override externalInstanceMethod(#NSArchiver, "encodeConditionalObject:") = Void, Id;
override externalClassMethod(#NSArchiver, "archivedDataWithRootObject:") = NSData, Id;
override externalClassMethod(#NSArchiver, "archiveRootObject:toFile:") = Bool, Id, NSString;
override externalInstanceMethod(#NSArchiver, "encodeClassName:intoClassName:") = Void, NSString, NSString;
override externalInstanceMethod(#NSArchiver, "classNameEncodedForTrueClassName:") = NSString, NSString;
override externalInstanceMethod(#NSArchiver, "replaceObject:withObject:") = Void, Id, Id;

record NSArray = externalClass(NSObject);
override externalInstanceMethod(#NSArray, "copyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSArray, "mutableCopyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSArray, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSArray, "initWithCoder:") = Id, NSCoder;
override externalInstanceMethod(#NSArray, "countByEnumeratingWithState:objects:count:") = CULong, Pointer[NSFastEnumerationState], Pointer[Id], CULong;
override externalInstanceMethod(#NSArray, "count") = CULong;
override externalInstanceMethod(#NSArray, "objectAtIndex:") = Id, CULong;
override externalInstanceMethod(#NSArray, "arrayByAddingObject:") = NSArray, Id;
override externalInstanceMethod(#NSArray, "arrayByAddingObjectsFromArray:") = NSArray, NSArray;
override externalInstanceMethod(#NSArray, "componentsJoinedByString:") = NSString, NSString;
override externalInstanceMethod(#NSArray, "containsObject:") = Bool, Id;
override externalInstanceMethod(#NSArray, "description") = NSString;
override externalInstanceMethod(#NSArray, "descriptionWithLocale:") = NSString, Id;
override externalInstanceMethod(#NSArray, "descriptionWithLocale:indent:") = NSString, Id, CULong;
override externalInstanceMethod(#NSArray, "firstObjectCommonWithArray:") = Id, NSArray;
override externalInstanceMethod(#NSArray, "getObjects:range:") = Void, Pointer[Id], NSRange;
override externalInstanceMethod(#NSArray, "indexOfObject:") = CULong, Id;
override externalInstanceMethod(#NSArray, "indexOfObject:inRange:") = CULong, Id, NSRange;
override externalInstanceMethod(#NSArray, "indexOfObjectIdenticalTo:") = CULong, Id;
override externalInstanceMethod(#NSArray, "indexOfObjectIdenticalTo:inRange:") = CULong, Id, NSRange;
override externalInstanceMethod(#NSArray, "isEqualToArray:") = Bool, NSArray;
override externalInstanceMethod(#NSArray, "lastObject") = Id;
override externalInstanceMethod(#NSArray, "objectEnumerator") = NSEnumerator;
override externalInstanceMethod(#NSArray, "reverseObjectEnumerator") = NSEnumerator;
override externalInstanceMethod(#NSArray, "sortedArrayHint") = NSData;
override externalInstanceMethod(#NSArray, "sortedArrayUsingFunction:context:") = NSArray, CCodePointer[[Id,Id,RawPointer],[CLong]], RawPointer;
override externalInstanceMethod(#NSArray, "sortedArrayUsingFunction:context:hint:") = NSArray, CCodePointer[[Id,Id,RawPointer],[CLong]], RawPointer, NSData;
override externalInstanceMethod(#NSArray, "sortedArrayUsingSelector:") = NSArray, SelectorHandle;
override externalInstanceMethod(#NSArray, "subarrayWithRange:") = NSArray, NSRange;
override externalInstanceMethod(#NSArray, "writeToFile:atomically:") = Bool, NSString, Bool;
override externalInstanceMethod(#NSArray, "writeToURL:atomically:") = Bool, NSURL, Bool;
override externalInstanceMethod(#NSArray, "makeObjectsPerformSelector:") = Void, SelectorHandle;
override externalInstanceMethod(#NSArray, "makeObjectsPerformSelector:withObject:") = Void, SelectorHandle, Id;
override externalInstanceMethod(#NSArray, "objectsAtIndexes:") = NSArray, NSIndexSet;
override externalInstanceMethod(#NSArray, "enumerateObjectsUsingBlock:") = Void, UnknownType;
override externalInstanceMethod(#NSArray, "enumerateObjectsWithOptions:usingBlock:") = Void, CULong, UnknownType;
override externalInstanceMethod(#NSArray, "enumerateObjectsAtIndexes:options:usingBlock:") = Void, NSIndexSet, CULong, UnknownType;
override externalInstanceMethod(#NSArray, "indexOfObjectPassingTest:") = CULong, UnknownType;
override externalInstanceMethod(#NSArray, "indexOfObjectWithOptions:passingTest:") = CULong, CULong, UnknownType;
override externalInstanceMethod(#NSArray, "indexOfObjectAtIndexes:options:passingTest:") = CULong, NSIndexSet, CULong, UnknownType;
override externalInstanceMethod(#NSArray, "indexesOfObjectsPassingTest:") = NSIndexSet, UnknownType;
override externalInstanceMethod(#NSArray, "indexesOfObjectsWithOptions:passingTest:") = NSIndexSet, CULong, UnknownType;
override externalInstanceMethod(#NSArray, "indexesOfObjectsAtIndexes:options:passingTest:") = NSIndexSet, NSIndexSet, CULong, UnknownType;
override externalInstanceMethod(#NSArray, "sortedArrayUsingComparator:") = NSArray, NSComparator;
override externalInstanceMethod(#NSArray, "sortedArrayWithOptions:usingComparator:") = NSArray, CULong, NSComparator;
override externalInstanceMethod(#NSArray, "indexOfObject:inSortedRange:options:usingComparator:") = CULong, Id, NSRange, CULong, NSComparator;
override externalClassMethod(#NSArray, "array") = Id;
override externalClassMethod(#NSArray, "arrayWithObject:") = Id, Id;
override externalClassMethod(#NSArray, "arrayWithObjects:count:") = Id, Pointer[Id], CULong;
override externalVarargClassMethod(#NSArray, "arrayWithObjects:") = Id, Id;
override externalClassMethod(#NSArray, "arrayWithArray:") = Id, NSArray;
override externalInstanceMethod(#NSArray, "initWithObjects:count:") = Id, Pointer[Id], CULong;
override externalVarargInstanceMethod(#NSArray, "initWithObjects:") = Id, Id;
override externalInstanceMethod(#NSArray, "initWithArray:") = Id, NSArray;
override externalInstanceMethod(#NSArray, "initWithArray:copyItems:") = Id, NSArray, Bool;
override externalClassMethod(#NSArray, "arrayWithContentsOfFile:") = Id, NSString;
override externalClassMethod(#NSArray, "arrayWithContentsOfURL:") = Id, NSURL;
override externalInstanceMethod(#NSArray, "initWithContentsOfFile:") = Id, NSString;
override externalInstanceMethod(#NSArray, "initWithContentsOfURL:") = Id, NSURL;
override externalInstanceMethod(#NSArray, "getObjects:") = Void, Pointer[Id];
override externalInstanceMethod(#NSArray, "pathsMatchingExtensions:") = NSArray, NSArray;
override externalInstanceMethod(#NSArray, "valueForKey:") = Id, NSString;
override externalInstanceMethod(#NSArray, "setValue:forKey:") = Void, Id, NSString;
override externalInstanceMethod(#NSArray, "addObserver:toObjectsAtIndexes:forKeyPath:options:context:") = Void, NSObject, NSIndexSet, NSString, CULong, RawPointer;
override externalInstanceMethod(#NSArray, "removeObserver:fromObjectsAtIndexes:forKeyPath:") = Void, NSObject, NSIndexSet, NSString;
override externalInstanceMethod(#NSArray, "addObserver:forKeyPath:options:context:") = Void, NSObject, NSString, CULong, RawPointer;
override externalInstanceMethod(#NSArray, "removeObserver:forKeyPath:") = Void, NSObject, NSString;
override externalInstanceMethod(#NSArray, "sortedArrayUsingDescriptors:") = NSArray, NSArray;
override externalInstanceMethod(#NSArray, "filteredArrayUsingPredicate:") = NSArray, NSPredicate;

record NSAssertionHandler = externalClass(NSObject);
override externalClassMethod(#NSAssertionHandler, "currentHandler") = NSAssertionHandler;
override externalVarargInstanceMethod(#NSAssertionHandler, "handleFailureInMethod:object:file:lineNumber:description:") = Void, SelectorHandle, Id, NSString, CLong, NSString;
override externalVarargInstanceMethod(#NSAssertionHandler, "handleFailureInFunction:file:lineNumber:description:") = Void, NSString, NSString, CLong, NSString;

record NSAttributedString = externalClass(NSObject);
override externalInstanceMethod(#NSAttributedString, "copyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSAttributedString, "mutableCopyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSAttributedString, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSAttributedString, "initWithCoder:") = Id, NSCoder;
override externalInstanceMethod(#NSAttributedString, "string") = NSString;
override externalInstanceMethod(#NSAttributedString, "attributesAtIndex:effectiveRange:") = NSDictionary, CULong, NSRangePointer;
override externalInstanceMethod(#NSAttributedString, "length") = CULong;
override externalInstanceMethod(#NSAttributedString, "attribute:atIndex:effectiveRange:") = Id, NSString, CULong, NSRangePointer;
override externalInstanceMethod(#NSAttributedString, "attributedSubstringFromRange:") = NSAttributedString, NSRange;
override externalInstanceMethod(#NSAttributedString, "attributesAtIndex:longestEffectiveRange:inRange:") = NSDictionary, CULong, NSRangePointer, NSRange;
override externalInstanceMethod(#NSAttributedString, "attribute:atIndex:longestEffectiveRange:inRange:") = Id, NSString, CULong, NSRangePointer, NSRange;
override externalInstanceMethod(#NSAttributedString, "isEqualToAttributedString:") = Bool, NSAttributedString;
override externalInstanceMethod(#NSAttributedString, "initWithString:") = Id, NSString;
override externalInstanceMethod(#NSAttributedString, "initWithString:attributes:") = Id, NSString, NSDictionary;
override externalInstanceMethod(#NSAttributedString, "initWithAttributedString:") = Id, NSAttributedString;
override externalInstanceMethod(#NSAttributedString, "enumerateAttributesInRange:options:usingBlock:") = Void, NSRange, CULong, UnknownType;
override externalInstanceMethod(#NSAttributedString, "enumerateAttribute:inRange:options:usingBlock:") = Void, NSString, NSRange, CULong, UnknownType;

record NSAutoreleasePool = externalClass(NSObject);
override externalClassMethod(#NSAutoreleasePool, "addObject:") = Void, Id;
override externalInstanceMethod(#NSAutoreleasePool, "addObject:") = Void, Id;
override externalInstanceMethod(#NSAutoreleasePool, "drain") = Void;

record NSBlockOperation = externalClass(NSOperation);
override externalClassMethod(#NSBlockOperation, "blockOperationWithBlock:") = Id, UnknownType;
override externalInstanceMethod(#NSBlockOperation, "addExecutionBlock:") = Void, UnknownType;
override externalInstanceMethod(#NSBlockOperation, "executionBlocks") = NSArray;

record NSBundle = externalClass(NSObject);
override externalClassMethod(#NSBundle, "mainBundle") = NSBundle;
override externalClassMethod(#NSBundle, "bundleWithPath:") = NSBundle, NSString;
override externalInstanceMethod(#NSBundle, "initWithPath:") = Id, NSString;
override externalClassMethod(#NSBundle, "bundleWithURL:") = NSBundle, NSURL;
override externalInstanceMethod(#NSBundle, "initWithURL:") = Id, NSURL;
override externalClassMethod(#NSBundle, "bundleForClass:") = NSBundle, Id;
override externalClassMethod(#NSBundle, "bundleWithIdentifier:") = NSBundle, NSString;
override externalClassMethod(#NSBundle, "allBundles") = NSArray;
override externalClassMethod(#NSBundle, "allFrameworks") = NSArray;
override externalInstanceMethod(#NSBundle, "load") = Bool;
override externalInstanceMethod(#NSBundle, "isLoaded") = Bool;
override externalInstanceMethod(#NSBundle, "unload") = Bool;
override externalInstanceMethod(#NSBundle, "preflightAndReturnError:") = Bool, Pointer[NSError];
override externalInstanceMethod(#NSBundle, "loadAndReturnError:") = Bool, Pointer[NSError];
override externalInstanceMethod(#NSBundle, "bundleURL") = NSURL;
override externalInstanceMethod(#NSBundle, "resourceURL") = NSURL;
override externalInstanceMethod(#NSBundle, "executableURL") = NSURL;
override externalInstanceMethod(#NSBundle, "URLForAuxiliaryExecutable:") = NSURL, NSString;
override externalInstanceMethod(#NSBundle, "privateFrameworksURL") = NSURL;
override externalInstanceMethod(#NSBundle, "sharedFrameworksURL") = NSURL;
override externalInstanceMethod(#NSBundle, "sharedSupportURL") = NSURL;
override externalInstanceMethod(#NSBundle, "builtInPlugInsURL") = NSURL;
override externalInstanceMethod(#NSBundle, "bundlePath") = NSString;
override externalInstanceMethod(#NSBundle, "resourcePath") = NSString;
override externalInstanceMethod(#NSBundle, "executablePath") = NSString;
override externalInstanceMethod(#NSBundle, "pathForAuxiliaryExecutable:") = NSString, NSString;
override externalInstanceMethod(#NSBundle, "privateFrameworksPath") = NSString;
override externalInstanceMethod(#NSBundle, "sharedFrameworksPath") = NSString;
override externalInstanceMethod(#NSBundle, "sharedSupportPath") = NSString;
override externalInstanceMethod(#NSBundle, "builtInPlugInsPath") = NSString;
override externalClassMethod(#NSBundle, "URLForResource:withExtension:subdirectory:inBundleWithURL:") = NSURL, NSString, NSString, NSString, NSURL;
override externalClassMethod(#NSBundle, "URLsForResourcesWithExtension:subdirectory:inBundleWithURL:") = NSArray, NSString, NSString, NSURL;
override externalInstanceMethod(#NSBundle, "URLForResource:withExtension:") = NSURL, NSString, NSString;
override externalInstanceMethod(#NSBundle, "URLForResource:withExtension:subdirectory:") = NSURL, NSString, NSString, NSString;
override externalInstanceMethod(#NSBundle, "URLForResource:withExtension:subdirectory:localization:") = NSURL, NSString, NSString, NSString, NSString;
override externalInstanceMethod(#NSBundle, "URLsForResourcesWithExtension:subdirectory:") = NSArray, NSString, NSString;
override externalInstanceMethod(#NSBundle, "URLsForResourcesWithExtension:subdirectory:localization:") = NSArray, NSString, NSString, NSString;
override externalClassMethod(#NSBundle, "pathForResource:ofType:inDirectory:") = NSString, NSString, NSString, NSString;
override externalClassMethod(#NSBundle, "pathsForResourcesOfType:inDirectory:") = NSArray, NSString, NSString;
override externalInstanceMethod(#NSBundle, "pathForResource:ofType:") = NSString, NSString, NSString;
override externalInstanceMethod(#NSBundle, "pathForResource:ofType:inDirectory:") = NSString, NSString, NSString, NSString;
override externalInstanceMethod(#NSBundle, "pathForResource:ofType:inDirectory:forLocalization:") = NSString, NSString, NSString, NSString, NSString;
override externalInstanceMethod(#NSBundle, "pathsForResourcesOfType:inDirectory:") = NSArray, NSString, NSString;
override externalInstanceMethod(#NSBundle, "pathsForResourcesOfType:inDirectory:forLocalization:") = NSArray, NSString, NSString, NSString;
override externalInstanceMethod(#NSBundle, "localizedStringForKey:value:table:") = NSString, NSString, NSString, NSString;
override externalInstanceMethod(#NSBundle, "bundleIdentifier") = NSString;
override externalInstanceMethod(#NSBundle, "infoDictionary") = NSDictionary;
override externalInstanceMethod(#NSBundle, "localizedInfoDictionary") = NSDictionary;
override externalInstanceMethod(#NSBundle, "objectForInfoDictionaryKey:") = Id, NSString;
override externalInstanceMethod(#NSBundle, "classNamed:") = Id, NSString;
override externalInstanceMethod(#NSBundle, "principalClass") = Id;
override externalInstanceMethod(#NSBundle, "localizations") = NSArray;
override externalInstanceMethod(#NSBundle, "preferredLocalizations") = NSArray;
override externalInstanceMethod(#NSBundle, "developmentLocalization") = NSString;
override externalClassMethod(#NSBundle, "preferredLocalizationsFromArray:") = NSArray, NSArray;
override externalClassMethod(#NSBundle, "preferredLocalizationsFromArray:forPreferences:") = NSArray, NSArray, NSArray;
override externalInstanceMethod(#NSBundle, "executableArchitectures") = NSArray;

record NSCache = externalClass(NSObject);
override externalInstanceMethod(#NSCache, "setName:") = Void, NSString;
override externalInstanceMethod(#NSCache, "name") = NSString;
override externalInstanceMethod(#NSCache, "setDelegate:") = Void, Id;
override externalInstanceMethod(#NSCache, "delegate") = Id;
override externalInstanceMethod(#NSCache, "objectForKey:") = Id, Id;
override externalInstanceMethod(#NSCache, "setObject:forKey:") = Void, Id, Id;
override externalInstanceMethod(#NSCache, "setObject:forKey:cost:") = Void, Id, Id, CULong;
override externalInstanceMethod(#NSCache, "removeObjectForKey:") = Void, Id;
override externalInstanceMethod(#NSCache, "removeAllObjects") = Void;
override externalInstanceMethod(#NSCache, "setTotalCostLimit:") = Void, CULong;
override externalInstanceMethod(#NSCache, "totalCostLimit") = CULong;
override externalInstanceMethod(#NSCache, "setCountLimit:") = Void, CULong;
override externalInstanceMethod(#NSCache, "countLimit") = CULong;
override externalInstanceMethod(#NSCache, "evictsObjectsWithDiscardedContent") = Bool;
override externalInstanceMethod(#NSCache, "setEvictsObjectsWithDiscardedContent:") = Void, Bool;

record NSCachedURLResponse = externalClass(NSObject);
override externalInstanceMethod(#NSCachedURLResponse, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSCachedURLResponse, "initWithCoder:") = Id, NSCoder;
override externalInstanceMethod(#NSCachedURLResponse, "copyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSCachedURLResponse, "initWithResponse:data:") = Id, NSURLResponse, NSData;
override externalInstanceMethod(#NSCachedURLResponse, "initWithResponse:data:userInfo:storagePolicy:") = Id, NSURLResponse, NSData, NSDictionary, CULong;
override externalInstanceMethod(#NSCachedURLResponse, "response") = NSURLResponse;
override externalInstanceMethod(#NSCachedURLResponse, "data") = NSData;
override externalInstanceMethod(#NSCachedURLResponse, "userInfo") = NSDictionary;
override externalInstanceMethod(#NSCachedURLResponse, "storagePolicy") = CULong;

record NSCalendar = externalClass(NSObject);
override externalInstanceMethod(#NSCalendar, "copyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSCalendar, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSCalendar, "initWithCoder:") = Id, NSCoder;
override externalClassMethod(#NSCalendar, "currentCalendar") = Id;
override externalClassMethod(#NSCalendar, "autoupdatingCurrentCalendar") = Id;
override externalInstanceMethod(#NSCalendar, "initWithCalendarIdentifier:") = Id, NSString;
override externalInstanceMethod(#NSCalendar, "calendarIdentifier") = NSString;
override externalInstanceMethod(#NSCalendar, "setLocale:") = Void, NSLocale;
override externalInstanceMethod(#NSCalendar, "locale") = NSLocale;
override externalInstanceMethod(#NSCalendar, "setTimeZone:") = Void, NSTimeZone;
override externalInstanceMethod(#NSCalendar, "timeZone") = NSTimeZone;
override externalInstanceMethod(#NSCalendar, "setFirstWeekday:") = Void, CULong;
override externalInstanceMethod(#NSCalendar, "firstWeekday") = CULong;
override externalInstanceMethod(#NSCalendar, "setMinimumDaysInFirstWeek:") = Void, CULong;
override externalInstanceMethod(#NSCalendar, "minimumDaysInFirstWeek") = CULong;
override externalInstanceMethod(#NSCalendar, "minimumRangeOfUnit:") = NSRange, CULong;
override externalInstanceMethod(#NSCalendar, "maximumRangeOfUnit:") = NSRange, CULong;
override externalInstanceMethod(#NSCalendar, "rangeOfUnit:inUnit:forDate:") = NSRange, CULong, CULong, NSDate;
override externalInstanceMethod(#NSCalendar, "ordinalityOfUnit:inUnit:forDate:") = CULong, CULong, CULong, NSDate;
override externalInstanceMethod(#NSCalendar, "rangeOfUnit:startDate:interval:forDate:") = Bool, CULong, Pointer[NSDate], Pointer[Double], NSDate;
override externalInstanceMethod(#NSCalendar, "dateFromComponents:") = NSDate, NSDateComponents;
override externalInstanceMethod(#NSCalendar, "components:fromDate:") = NSDateComponents, CULong, NSDate;
override externalInstanceMethod(#NSCalendar, "dateByAddingComponents:toDate:options:") = NSDate, NSDateComponents, NSDate, CULong;
override externalInstanceMethod(#NSCalendar, "components:fromDate:toDate:options:") = NSDateComponents, CULong, NSDate, NSDate, CULong;

record NSCalendarDate = externalClass(NSDate);
override externalClassMethod(#NSCalendarDate, "calendarDate") = Id;
override externalClassMethod(#NSCalendarDate, "dateWithString:calendarFormat:locale:") = Id, NSString, NSString, Id;
override externalClassMethod(#NSCalendarDate, "dateWithString:calendarFormat:") = Id, NSString, NSString;
override externalClassMethod(#NSCalendarDate, "dateWithYear:month:day:hour:minute:second:timeZone:") = Id, CLong, CULong, CULong, CULong, CULong, CULong, NSTimeZone;
override externalInstanceMethod(#NSCalendarDate, "dateByAddingYears:months:days:hours:minutes:seconds:") = NSCalendarDate, CLong, CLong, CLong, CLong, CLong, CLong;
override externalInstanceMethod(#NSCalendarDate, "dayOfCommonEra") = CLong;
override externalInstanceMethod(#NSCalendarDate, "dayOfMonth") = CLong;
override externalInstanceMethod(#NSCalendarDate, "dayOfWeek") = CLong;
override externalInstanceMethod(#NSCalendarDate, "dayOfYear") = CLong;
override externalInstanceMethod(#NSCalendarDate, "hourOfDay") = CLong;
override externalInstanceMethod(#NSCalendarDate, "minuteOfHour") = CLong;
override externalInstanceMethod(#NSCalendarDate, "monthOfYear") = CLong;
override externalInstanceMethod(#NSCalendarDate, "secondOfMinute") = CLong;
override externalInstanceMethod(#NSCalendarDate, "yearOfCommonEra") = CLong;
override externalInstanceMethod(#NSCalendarDate, "calendarFormat") = NSString;
override externalInstanceMethod(#NSCalendarDate, "descriptionWithCalendarFormat:locale:") = NSString, NSString, Id;
override externalInstanceMethod(#NSCalendarDate, "descriptionWithCalendarFormat:") = NSString, NSString;
override externalInstanceMethod(#NSCalendarDate, "descriptionWithLocale:") = NSString, Id;
override externalInstanceMethod(#NSCalendarDate, "timeZone") = NSTimeZone;
override externalInstanceMethod(#NSCalendarDate, "initWithString:calendarFormat:locale:") = Id, NSString, NSString, Id;
override externalInstanceMethod(#NSCalendarDate, "initWithString:calendarFormat:") = Id, NSString, NSString;
override externalInstanceMethod(#NSCalendarDate, "initWithString:") = Id, NSString;
override externalInstanceMethod(#NSCalendarDate, "initWithYear:month:day:hour:minute:second:timeZone:") = Id, CLong, CULong, CULong, CULong, CULong, CULong, NSTimeZone;
override externalInstanceMethod(#NSCalendarDate, "setCalendarFormat:") = Void, NSString;
override externalInstanceMethod(#NSCalendarDate, "setTimeZone:") = Void, NSTimeZone;
override externalInstanceMethod(#NSCalendarDate, "years:months:days:hours:minutes:seconds:sinceDate:") = Void, Pointer[CLong], Pointer[CLong], Pointer[CLong], Pointer[CLong], Pointer[CLong], Pointer[CLong], NSCalendarDate;

record NSCharacterSet = externalClass(NSObject);
override externalInstanceMethod(#NSCharacterSet, "copyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSCharacterSet, "mutableCopyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSCharacterSet, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSCharacterSet, "initWithCoder:") = Id, NSCoder;
override externalClassMethod(#NSCharacterSet, "controlCharacterSet") = Id;
override externalClassMethod(#NSCharacterSet, "whitespaceCharacterSet") = Id;
override externalClassMethod(#NSCharacterSet, "whitespaceAndNewlineCharacterSet") = Id;
override externalClassMethod(#NSCharacterSet, "decimalDigitCharacterSet") = Id;
override externalClassMethod(#NSCharacterSet, "letterCharacterSet") = Id;
override externalClassMethod(#NSCharacterSet, "lowercaseLetterCharacterSet") = Id;
override externalClassMethod(#NSCharacterSet, "uppercaseLetterCharacterSet") = Id;
override externalClassMethod(#NSCharacterSet, "nonBaseCharacterSet") = Id;
override externalClassMethod(#NSCharacterSet, "alphanumericCharacterSet") = Id;
override externalClassMethod(#NSCharacterSet, "decomposableCharacterSet") = Id;
override externalClassMethod(#NSCharacterSet, "illegalCharacterSet") = Id;
override externalClassMethod(#NSCharacterSet, "punctuationCharacterSet") = Id;
override externalClassMethod(#NSCharacterSet, "capitalizedLetterCharacterSet") = Id;
override externalClassMethod(#NSCharacterSet, "symbolCharacterSet") = Id;
override externalClassMethod(#NSCharacterSet, "newlineCharacterSet") = Id;
override externalClassMethod(#NSCharacterSet, "characterSetWithRange:") = Id, NSRange;
override externalClassMethod(#NSCharacterSet, "characterSetWithCharactersInString:") = Id, NSString;
override externalClassMethod(#NSCharacterSet, "characterSetWithBitmapRepresentation:") = Id, NSData;
override externalClassMethod(#NSCharacterSet, "characterSetWithContentsOfFile:") = Id, NSString;
override externalInstanceMethod(#NSCharacterSet, "characterIsMember:") = Bool, UShort;
override externalInstanceMethod(#NSCharacterSet, "bitmapRepresentation") = NSData;
override externalInstanceMethod(#NSCharacterSet, "invertedSet") = NSCharacterSet;
override externalInstanceMethod(#NSCharacterSet, "longCharacterIsMember:") = Bool, UInt;
override externalInstanceMethod(#NSCharacterSet, "isSupersetOfSet:") = Bool, NSCharacterSet;
override externalInstanceMethod(#NSCharacterSet, "hasMemberInPlane:") = Bool, CUChar;

record NSClassDescription = externalClass(NSObject);
override externalClassMethod(#NSClassDescription, "registerClassDescription:forClass:") = Void, NSClassDescription, Id;
override externalClassMethod(#NSClassDescription, "invalidateClassDescriptionCache") = Void;
override externalClassMethod(#NSClassDescription, "classDescriptionForClass:") = NSClassDescription, Id;
override externalInstanceMethod(#NSClassDescription, "attributeKeys") = NSArray;
override externalInstanceMethod(#NSClassDescription, "toOneRelationshipKeys") = NSArray;
override externalInstanceMethod(#NSClassDescription, "toManyRelationshipKeys") = NSArray;
override externalInstanceMethod(#NSClassDescription, "inverseForRelationshipKey:") = NSString, NSString;

record NSCloneCommand = externalClass(NSScriptCommand);
override externalInstanceMethod(#NSCloneCommand, "setReceiversSpecifier:") = Void, NSScriptObjectSpecifier;
override externalInstanceMethod(#NSCloneCommand, "keySpecifier") = NSScriptObjectSpecifier;

record NSCloseCommand = externalClass(NSScriptCommand);
override externalInstanceMethod(#NSCloseCommand, "saveOptions") = CULong;

record NSCoder = externalClass(NSObject);
override externalInstanceMethod(#NSCoder, "encodeValueOfObjCType:at:") = Void, Pointer[CChar], RawPointer;
override externalInstanceMethod(#NSCoder, "encodeDataObject:") = Void, NSData;
override externalInstanceMethod(#NSCoder, "decodeValueOfObjCType:at:") = Void, Pointer[CChar], RawPointer;
override externalInstanceMethod(#NSCoder, "decodeDataObject") = NSData;
override externalInstanceMethod(#NSCoder, "versionForClassName:") = CLong, NSString;
override externalInstanceMethod(#NSCoder, "encodeObject:") = Void, Id;
override externalInstanceMethod(#NSCoder, "encodeRootObject:") = Void, Id;
override externalInstanceMethod(#NSCoder, "encodeBycopyObject:") = Void, Id;
override externalInstanceMethod(#NSCoder, "encodeByrefObject:") = Void, Id;
override externalInstanceMethod(#NSCoder, "encodeConditionalObject:") = Void, Id;
override externalVarargInstanceMethod(#NSCoder, "encodeValuesOfObjCTypes:") = Void, Pointer[CChar];
override externalInstanceMethod(#NSCoder, "encodeArrayOfObjCType:count:at:") = Void, Pointer[CChar], CULong, RawPointer;
override externalInstanceMethod(#NSCoder, "encodeBytes:length:") = Void, RawPointer, CULong;
override externalInstanceMethod(#NSCoder, "decodeObject") = Id;
override externalVarargInstanceMethod(#NSCoder, "decodeValuesOfObjCTypes:") = Void, Pointer[CChar];
override externalInstanceMethod(#NSCoder, "decodeArrayOfObjCType:count:at:") = Void, Pointer[CChar], CULong, RawPointer;
override externalInstanceMethod(#NSCoder, "decodeBytesWithReturnedLength:") = RawPointer, Pointer[CULong];
override externalInstanceMethod(#NSCoder, "encodePropertyList:") = Void, Id;
override externalInstanceMethod(#NSCoder, "decodePropertyList") = Id;
override externalInstanceMethod(#NSCoder, "setObjectZone:") = Void, Pointer[NSZone];
override externalInstanceMethod(#NSCoder, "objectZone") = Pointer[NSZone];
override externalInstanceMethod(#NSCoder, "systemVersion") = UInt;
override externalInstanceMethod(#NSCoder, "allowsKeyedCoding") = Bool;
override externalInstanceMethod(#NSCoder, "encodeObject:forKey:") = Void, Id, NSString;
override externalInstanceMethod(#NSCoder, "encodeConditionalObject:forKey:") = Void, Id, NSString;
override externalInstanceMethod(#NSCoder, "encodeBool:forKey:") = Void, Bool, NSString;
override externalInstanceMethod(#NSCoder, "encodeInt:forKey:") = Void, Int, NSString;
override externalInstanceMethod(#NSCoder, "encodeInt32:forKey:") = Void, Int, NSString;
override externalInstanceMethod(#NSCoder, "encodeInt64:forKey:") = Void, Int64, NSString;
override externalInstanceMethod(#NSCoder, "encodeFloat:forKey:") = Void, Float, NSString;
override externalInstanceMethod(#NSCoder, "encodeDouble:forKey:") = Void, Double, NSString;
override externalInstanceMethod(#NSCoder, "encodeBytes:length:forKey:") = Void, Pointer[CUChar], CULong, NSString;
override externalInstanceMethod(#NSCoder, "containsValueForKey:") = Bool, NSString;
override externalInstanceMethod(#NSCoder, "decodeObjectForKey:") = Id, NSString;
override externalInstanceMethod(#NSCoder, "decodeBoolForKey:") = Bool, NSString;
override externalInstanceMethod(#NSCoder, "decodeIntForKey:") = Int, NSString;
override externalInstanceMethod(#NSCoder, "decodeInt32ForKey:") = Int, NSString;
override externalInstanceMethod(#NSCoder, "decodeInt64ForKey:") = Int64, NSString;
override externalInstanceMethod(#NSCoder, "decodeFloatForKey:") = Float, NSString;
override externalInstanceMethod(#NSCoder, "decodeDoubleForKey:") = Double, NSString;
override externalInstanceMethod(#NSCoder, "decodeBytesForKey:returnedLength:") = Pointer[CUChar], NSString, Pointer[CULong];
override externalInstanceMethod(#NSCoder, "encodeInteger:forKey:") = Void, CLong, NSString;
override externalInstanceMethod(#NSCoder, "decodeIntegerForKey:") = CLong, NSString;
override externalInstanceMethod(#NSCoder, "encodeNXObject:") = Void, Id;
override externalInstanceMethod(#NSCoder, "decodeNXObject") = Id;
override externalInstanceMethod(#NSCoder, "encodePoint:") = Void, NSPoint;
override externalInstanceMethod(#NSCoder, "decodePoint") = NSPoint;
override externalInstanceMethod(#NSCoder, "encodeSize:") = Void, NSSize;
override externalInstanceMethod(#NSCoder, "decodeSize") = NSSize;
override externalInstanceMethod(#NSCoder, "encodeRect:") = Void, NSRect;
override externalInstanceMethod(#NSCoder, "decodeRect") = NSRect;
override externalInstanceMethod(#NSCoder, "encodePoint:forKey:") = Void, NSPoint, NSString;
override externalInstanceMethod(#NSCoder, "encodeSize:forKey:") = Void, NSSize, NSString;
override externalInstanceMethod(#NSCoder, "encodeRect:forKey:") = Void, NSRect, NSString;
override externalInstanceMethod(#NSCoder, "decodePointForKey:") = NSPoint, NSString;
override externalInstanceMethod(#NSCoder, "decodeSizeForKey:") = NSSize, NSString;
override externalInstanceMethod(#NSCoder, "decodeRectForKey:") = NSRect, NSString;

record NSComparisonPredicate = externalClass(NSPredicate);
override externalClassMethod(#NSComparisonPredicate, "predicateWithLeftExpression:rightExpression:modifier:type:options:") = NSPredicate, NSExpression, NSExpression, CULong, CULong, CULong;
override externalClassMethod(#NSComparisonPredicate, "predicateWithLeftExpression:rightExpression:customSelector:") = NSPredicate, NSExpression, NSExpression, SelectorHandle;
override externalInstanceMethod(#NSComparisonPredicate, "initWithLeftExpression:rightExpression:modifier:type:options:") = Id, NSExpression, NSExpression, CULong, CULong, CULong;
override externalInstanceMethod(#NSComparisonPredicate, "initWithLeftExpression:rightExpression:customSelector:") = Id, NSExpression, NSExpression, SelectorHandle;
override externalInstanceMethod(#NSComparisonPredicate, "predicateOperatorType") = CULong;
override externalInstanceMethod(#NSComparisonPredicate, "comparisonPredicateModifier") = CULong;
override externalInstanceMethod(#NSComparisonPredicate, "leftExpression") = NSExpression;
override externalInstanceMethod(#NSComparisonPredicate, "rightExpression") = NSExpression;
override externalInstanceMethod(#NSComparisonPredicate, "customSelector") = SelectorHandle;
override externalInstanceMethod(#NSComparisonPredicate, "options") = CULong;

record NSCompoundPredicate = externalClass(NSPredicate);
override externalInstanceMethod(#NSCompoundPredicate, "initWithType:subpredicates:") = Id, CULong, NSArray;
override externalInstanceMethod(#NSCompoundPredicate, "compoundPredicateType") = CULong;
override externalInstanceMethod(#NSCompoundPredicate, "subpredicates") = NSArray;
override externalClassMethod(#NSCompoundPredicate, "andPredicateWithSubpredicates:") = NSPredicate, NSArray;
override externalClassMethod(#NSCompoundPredicate, "orPredicateWithSubpredicates:") = NSPredicate, NSArray;
override externalClassMethod(#NSCompoundPredicate, "notPredicateWithSubpredicate:") = NSPredicate, NSPredicate;

record NSCondition = externalClass(NSObject);
override externalInstanceMethod(#NSCondition, "lock") = Void;
override externalInstanceMethod(#NSCondition, "unlock") = Void;
override externalInstanceMethod(#NSCondition, "wait") = Void;
override externalInstanceMethod(#NSCondition, "waitUntilDate:") = Bool, NSDate;
override externalInstanceMethod(#NSCondition, "signal") = Void;
override externalInstanceMethod(#NSCondition, "broadcast") = Void;
override externalInstanceMethod(#NSCondition, "setName:") = Void, NSString;
override externalInstanceMethod(#NSCondition, "name") = NSString;

record NSConditionLock = externalClass(NSObject);
override externalInstanceMethod(#NSConditionLock, "lock") = Void;
override externalInstanceMethod(#NSConditionLock, "unlock") = Void;
override externalInstanceMethod(#NSConditionLock, "initWithCondition:") = Id, CLong;
override externalInstanceMethod(#NSConditionLock, "condition") = CLong;
override externalInstanceMethod(#NSConditionLock, "lockWhenCondition:") = Void, CLong;
override externalInstanceMethod(#NSConditionLock, "tryLock") = Bool;
override externalInstanceMethod(#NSConditionLock, "tryLockWhenCondition:") = Bool, CLong;
override externalInstanceMethod(#NSConditionLock, "unlockWithCondition:") = Void, CLong;
override externalInstanceMethod(#NSConditionLock, "lockBeforeDate:") = Bool, NSDate;
override externalInstanceMethod(#NSConditionLock, "lockWhenCondition:beforeDate:") = Bool, CLong, NSDate;
override externalInstanceMethod(#NSConditionLock, "setName:") = Void, NSString;
override externalInstanceMethod(#NSConditionLock, "name") = NSString;

record NSConnection = externalClass(NSObject);
override externalInstanceMethod(#NSConnection, "statistics") = NSDictionary;
override externalClassMethod(#NSConnection, "allConnections") = NSArray;
override externalClassMethod(#NSConnection, "defaultConnection") = NSConnection;
override externalClassMethod(#NSConnection, "connectionWithRegisteredName:host:") = Id, NSString, NSString;
override externalClassMethod(#NSConnection, "connectionWithRegisteredName:host:usingNameServer:") = Id, NSString, NSString, NSPortNameServer;
override externalClassMethod(#NSConnection, "rootProxyForConnectionWithRegisteredName:host:") = NSDistantObject, NSString, NSString;
override externalClassMethod(#NSConnection, "rootProxyForConnectionWithRegisteredName:host:usingNameServer:") = NSDistantObject, NSString, NSString, NSPortNameServer;
override externalClassMethod(#NSConnection, "serviceConnectionWithName:rootObject:usingNameServer:") = Id, NSString, Id, NSPortNameServer;
override externalClassMethod(#NSConnection, "serviceConnectionWithName:rootObject:") = Id, NSString, Id;
override externalInstanceMethod(#NSConnection, "setRequestTimeout:") = Void, Double;
override externalInstanceMethod(#NSConnection, "requestTimeout") = Double;
override externalInstanceMethod(#NSConnection, "setReplyTimeout:") = Void, Double;
override externalInstanceMethod(#NSConnection, "replyTimeout") = Double;
override externalInstanceMethod(#NSConnection, "setRootObject:") = Void, Id;
override externalInstanceMethod(#NSConnection, "rootObject") = Id;
override externalInstanceMethod(#NSConnection, "rootProxy") = NSDistantObject;
override externalInstanceMethod(#NSConnection, "setDelegate:") = Void, Id;
override externalInstanceMethod(#NSConnection, "delegate") = Id;
override externalInstanceMethod(#NSConnection, "setIndependentConversationQueueing:") = Void, Bool;
override externalInstanceMethod(#NSConnection, "independentConversationQueueing") = Bool;
override externalInstanceMethod(#NSConnection, "isValid") = Bool;
override externalInstanceMethod(#NSConnection, "invalidate") = Void;
override externalInstanceMethod(#NSConnection, "addRequestMode:") = Void, NSString;
override externalInstanceMethod(#NSConnection, "removeRequestMode:") = Void, NSString;
override externalInstanceMethod(#NSConnection, "requestModes") = NSArray;
override externalInstanceMethod(#NSConnection, "registerName:") = Bool, NSString;
override externalInstanceMethod(#NSConnection, "registerName:withNameServer:") = Bool, NSString, NSPortNameServer;
override externalClassMethod(#NSConnection, "connectionWithReceivePort:sendPort:") = Id, NSPort, NSPort;
override externalClassMethod(#NSConnection, "currentConversation") = Id;
override externalInstanceMethod(#NSConnection, "initWithReceivePort:sendPort:") = Id, NSPort, NSPort;
override externalInstanceMethod(#NSConnection, "sendPort") = NSPort;
override externalInstanceMethod(#NSConnection, "receivePort") = NSPort;
override externalInstanceMethod(#NSConnection, "enableMultipleThreads") = Void;
override externalInstanceMethod(#NSConnection, "multipleThreadsEnabled") = Bool;
override externalInstanceMethod(#NSConnection, "addRunLoop:") = Void, NSRunLoop;
override externalInstanceMethod(#NSConnection, "removeRunLoop:") = Void, NSRunLoop;
override externalInstanceMethod(#NSConnection, "runInNewThread") = Void;
override externalInstanceMethod(#NSConnection, "remoteObjects") = NSArray;
override externalInstanceMethod(#NSConnection, "localObjects") = NSArray;

record NSConstantString = externalClass(NSSimpleCString);

record NSCountCommand = externalClass(NSScriptCommand);

record NSCountedSet = externalClass(NSMutableSet);
override externalInstanceMethod(#NSCountedSet, "initWithCapacity:") = Id, CULong;
override externalInstanceMethod(#NSCountedSet, "initWithArray:") = Id, NSArray;
override externalInstanceMethod(#NSCountedSet, "initWithSet:") = Id, NSSet;
override externalInstanceMethod(#NSCountedSet, "countForObject:") = CULong, Id;
override externalInstanceMethod(#NSCountedSet, "objectEnumerator") = NSEnumerator;
override externalInstanceMethod(#NSCountedSet, "addObject:") = Void, Id;
override externalInstanceMethod(#NSCountedSet, "removeObject:") = Void, Id;

record NSCreateCommand = externalClass(NSScriptCommand);
override externalInstanceMethod(#NSCreateCommand, "createClassDescription") = NSScriptClassDescription;
override externalInstanceMethod(#NSCreateCommand, "resolvedKeyDictionary") = NSDictionary;

record NSData = externalClass(NSObject);
override externalInstanceMethod(#NSData, "copyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSData, "mutableCopyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSData, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSData, "initWithCoder:") = Id, NSCoder;
override externalInstanceMethod(#NSData, "length") = CULong;
override externalInstanceMethod(#NSData, "bytes") = RawPointer;
override externalInstanceMethod(#NSData, "description") = NSString;
override externalInstanceMethod(#NSData, "getBytes:length:") = Void, RawPointer, CULong;
override externalInstanceMethod(#NSData, "getBytes:range:") = Void, RawPointer, NSRange;
override externalInstanceMethod(#NSData, "isEqualToData:") = Bool, NSData;
override externalInstanceMethod(#NSData, "subdataWithRange:") = NSData, NSRange;
override externalInstanceMethod(#NSData, "writeToFile:atomically:") = Bool, NSString, Bool;
override externalInstanceMethod(#NSData, "writeToURL:atomically:") = Bool, NSURL, Bool;
override externalInstanceMethod(#NSData, "writeToFile:options:error:") = Bool, NSString, CULong, Pointer[NSError];
override externalInstanceMethod(#NSData, "writeToURL:options:error:") = Bool, NSURL, CULong, Pointer[NSError];
override externalInstanceMethod(#NSData, "rangeOfData:options:range:") = NSRange, NSData, CULong, NSRange;
override externalClassMethod(#NSData, "data") = Id;
override externalClassMethod(#NSData, "dataWithBytes:length:") = Id, RawPointer, CULong;
override externalClassMethod(#NSData, "dataWithBytesNoCopy:length:") = Id, RawPointer, CULong;
override externalClassMethod(#NSData, "dataWithBytesNoCopy:length:freeWhenDone:") = Id, RawPointer, CULong, Bool;
override externalClassMethod(#NSData, "dataWithContentsOfFile:options:error:") = Id, NSString, CULong, Pointer[NSError];
override externalClassMethod(#NSData, "dataWithContentsOfURL:options:error:") = Id, NSURL, CULong, Pointer[NSError];
override externalClassMethod(#NSData, "dataWithContentsOfFile:") = Id, NSString;
override externalClassMethod(#NSData, "dataWithContentsOfURL:") = Id, NSURL;
override externalClassMethod(#NSData, "dataWithContentsOfMappedFile:") = Id, NSString;
override externalInstanceMethod(#NSData, "initWithBytes:length:") = Id, RawPointer, CULong;
override externalInstanceMethod(#NSData, "initWithBytesNoCopy:length:") = Id, RawPointer, CULong;
override externalInstanceMethod(#NSData, "initWithBytesNoCopy:length:freeWhenDone:") = Id, RawPointer, CULong, Bool;
override externalInstanceMethod(#NSData, "initWithContentsOfFile:options:error:") = Id, NSString, CULong, Pointer[NSError];
override externalInstanceMethod(#NSData, "initWithContentsOfURL:options:error:") = Id, NSURL, CULong, Pointer[NSError];
override externalInstanceMethod(#NSData, "initWithContentsOfFile:") = Id, NSString;
override externalInstanceMethod(#NSData, "initWithContentsOfURL:") = Id, NSURL;
override externalInstanceMethod(#NSData, "initWithContentsOfMappedFile:") = Id, NSString;
override externalInstanceMethod(#NSData, "initWithData:") = Id, NSData;
override externalClassMethod(#NSData, "dataWithData:") = Id, NSData;
override externalInstanceMethod(#NSData, "getBytes:") = Void, RawPointer;

record NSDate = externalClass(NSObject);
override externalInstanceMethod(#NSDate, "copyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSDate, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSDate, "initWithCoder:") = Id, NSCoder;
override externalInstanceMethod(#NSDate, "timeIntervalSinceReferenceDate") = Double;
override externalInstanceMethod(#NSDate, "timeIntervalSinceDate:") = Double, NSDate;
override externalInstanceMethod(#NSDate, "timeIntervalSinceNow") = Double;
override externalInstanceMethod(#NSDate, "timeIntervalSince1970") = Double;
override externalInstanceMethod(#NSDate, "addTimeInterval:") = Id, Double;
override externalInstanceMethod(#NSDate, "dateByAddingTimeInterval:") = Id, Double;
override externalInstanceMethod(#NSDate, "earlierDate:") = NSDate, NSDate;
override externalInstanceMethod(#NSDate, "laterDate:") = NSDate, NSDate;
override externalInstanceMethod(#NSDate, "compare:") = CLong, NSDate;
override externalInstanceMethod(#NSDate, "isEqualToDate:") = Bool, NSDate;
override externalInstanceMethod(#NSDate, "description") = NSString;
override externalInstanceMethod(#NSDate, "descriptionWithLocale:") = NSString, Id;
override externalClassMethod(#NSDate, "timeIntervalSinceReferenceDate") = Double;
override externalClassMethod(#NSDate, "date") = Id;
override externalClassMethod(#NSDate, "dateWithTimeIntervalSinceNow:") = Id, Double;
override externalClassMethod(#NSDate, "dateWithTimeIntervalSinceReferenceDate:") = Id, Double;
override externalClassMethod(#NSDate, "dateWithTimeIntervalSince1970:") = Id, Double;
override externalClassMethod(#NSDate, "dateWithTimeInterval:sinceDate:") = Id, Double, NSDate;
override externalClassMethod(#NSDate, "distantFuture") = Id;
override externalClassMethod(#NSDate, "distantPast") = Id;
override externalInstanceMethod(#NSDate, "init") = Id;
override externalInstanceMethod(#NSDate, "initWithTimeIntervalSinceNow:") = Id, Double;
override externalInstanceMethod(#NSDate, "initWithTimeIntervalSinceReferenceDate:") = Id, Double;
override externalInstanceMethod(#NSDate, "initWithTimeIntervalSince1970:") = Id, Double;
override externalInstanceMethod(#NSDate, "initWithTimeInterval:sinceDate:") = Id, Double, NSDate;
override externalClassMethod(#NSDate, "dateWithNaturalLanguageString:locale:") = Id, NSString, Id;
override externalClassMethod(#NSDate, "dateWithNaturalLanguageString:") = Id, NSString;
override externalClassMethod(#NSDate, "dateWithString:") = Id, NSString;
override externalInstanceMethod(#NSDate, "dateWithCalendarFormat:timeZone:") = NSCalendarDate, NSString, NSTimeZone;
override externalInstanceMethod(#NSDate, "descriptionWithCalendarFormat:timeZone:locale:") = NSString, NSString, NSTimeZone, Id;
override externalInstanceMethod(#NSDate, "initWithString:") = Id, NSString;

record NSDateComponents = externalClass(NSObject);
override externalInstanceMethod(#NSDateComponents, "copyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSDateComponents, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSDateComponents, "initWithCoder:") = Id, NSCoder;
override externalInstanceMethod(#NSDateComponents, "era") = CLong;
override externalInstanceMethod(#NSDateComponents, "year") = CLong;
override externalInstanceMethod(#NSDateComponents, "month") = CLong;
override externalInstanceMethod(#NSDateComponents, "day") = CLong;
override externalInstanceMethod(#NSDateComponents, "hour") = CLong;
override externalInstanceMethod(#NSDateComponents, "minute") = CLong;
override externalInstanceMethod(#NSDateComponents, "second") = CLong;
override externalInstanceMethod(#NSDateComponents, "week") = CLong;
override externalInstanceMethod(#NSDateComponents, "weekday") = CLong;
override externalInstanceMethod(#NSDateComponents, "weekdayOrdinal") = CLong;
override externalInstanceMethod(#NSDateComponents, "quarter") = CLong;
override externalInstanceMethod(#NSDateComponents, "setEra:") = Void, CLong;
override externalInstanceMethod(#NSDateComponents, "setYear:") = Void, CLong;
override externalInstanceMethod(#NSDateComponents, "setMonth:") = Void, CLong;
override externalInstanceMethod(#NSDateComponents, "setDay:") = Void, CLong;
override externalInstanceMethod(#NSDateComponents, "setHour:") = Void, CLong;
override externalInstanceMethod(#NSDateComponents, "setMinute:") = Void, CLong;
override externalInstanceMethod(#NSDateComponents, "setSecond:") = Void, CLong;
override externalInstanceMethod(#NSDateComponents, "setWeek:") = Void, CLong;
override externalInstanceMethod(#NSDateComponents, "setWeekday:") = Void, CLong;
override externalInstanceMethod(#NSDateComponents, "setWeekdayOrdinal:") = Void, CLong;
override externalInstanceMethod(#NSDateComponents, "setQuarter:") = Void, CLong;

record NSDateFormatter = externalClass(NSFormatter);
override externalInstanceMethod(#NSDateFormatter, "getObjectValue:forString:range:error:") = Bool, Pointer[Id], NSString, Pointer[NSRange], Pointer[NSError];
override externalInstanceMethod(#NSDateFormatter, "stringFromDate:") = NSString, NSDate;
override externalInstanceMethod(#NSDateFormatter, "dateFromString:") = NSDate, NSString;
override externalClassMethod(#NSDateFormatter, "localizedStringFromDate:dateStyle:timeStyle:") = NSString, NSDate, CULong, CULong;
override externalClassMethod(#NSDateFormatter, "dateFormatFromTemplate:options:locale:") = NSString, NSString, CULong, NSLocale;
override externalInstanceMethod(#NSDateFormatter, "dateFormat") = NSString;
override externalInstanceMethod(#NSDateFormatter, "dateStyle") = CULong;
override externalInstanceMethod(#NSDateFormatter, "setDateStyle:") = Void, CULong;
override externalInstanceMethod(#NSDateFormatter, "timeStyle") = CULong;
override externalInstanceMethod(#NSDateFormatter, "setTimeStyle:") = Void, CULong;
override externalInstanceMethod(#NSDateFormatter, "locale") = NSLocale;
override externalInstanceMethod(#NSDateFormatter, "setLocale:") = Void, NSLocale;
override externalInstanceMethod(#NSDateFormatter, "generatesCalendarDates") = Bool;
override externalInstanceMethod(#NSDateFormatter, "setGeneratesCalendarDates:") = Void, Bool;
override externalInstanceMethod(#NSDateFormatter, "formatterBehavior") = CULong;
override externalInstanceMethod(#NSDateFormatter, "setFormatterBehavior:") = Void, CULong;
override externalClassMethod(#NSDateFormatter, "defaultFormatterBehavior") = CULong;
override externalClassMethod(#NSDateFormatter, "setDefaultFormatterBehavior:") = Void, CULong;
override externalInstanceMethod(#NSDateFormatter, "setDateFormat:") = Void, NSString;
override externalInstanceMethod(#NSDateFormatter, "timeZone") = NSTimeZone;
override externalInstanceMethod(#NSDateFormatter, "setTimeZone:") = Void, NSTimeZone;
override externalInstanceMethod(#NSDateFormatter, "calendar") = NSCalendar;
override externalInstanceMethod(#NSDateFormatter, "setCalendar:") = Void, NSCalendar;
override externalInstanceMethod(#NSDateFormatter, "isLenient") = Bool;
override externalInstanceMethod(#NSDateFormatter, "setLenient:") = Void, Bool;
override externalInstanceMethod(#NSDateFormatter, "twoDigitStartDate") = NSDate;
override externalInstanceMethod(#NSDateFormatter, "setTwoDigitStartDate:") = Void, NSDate;
override externalInstanceMethod(#NSDateFormatter, "defaultDate") = NSDate;
override externalInstanceMethod(#NSDateFormatter, "setDefaultDate:") = Void, NSDate;
override externalInstanceMethod(#NSDateFormatter, "eraSymbols") = NSArray;
override externalInstanceMethod(#NSDateFormatter, "setEraSymbols:") = Void, NSArray;
override externalInstanceMethod(#NSDateFormatter, "monthSymbols") = NSArray;
override externalInstanceMethod(#NSDateFormatter, "setMonthSymbols:") = Void, NSArray;
override externalInstanceMethod(#NSDateFormatter, "shortMonthSymbols") = NSArray;
override externalInstanceMethod(#NSDateFormatter, "setShortMonthSymbols:") = Void, NSArray;
override externalInstanceMethod(#NSDateFormatter, "weekdaySymbols") = NSArray;
override externalInstanceMethod(#NSDateFormatter, "setWeekdaySymbols:") = Void, NSArray;
override externalInstanceMethod(#NSDateFormatter, "shortWeekdaySymbols") = NSArray;
override externalInstanceMethod(#NSDateFormatter, "setShortWeekdaySymbols:") = Void, NSArray;
override externalInstanceMethod(#NSDateFormatter, "AMSymbol") = NSString;
override externalInstanceMethod(#NSDateFormatter, "setAMSymbol:") = Void, NSString;
override externalInstanceMethod(#NSDateFormatter, "PMSymbol") = NSString;
override externalInstanceMethod(#NSDateFormatter, "setPMSymbol:") = Void, NSString;
override externalInstanceMethod(#NSDateFormatter, "longEraSymbols") = NSArray;
override externalInstanceMethod(#NSDateFormatter, "setLongEraSymbols:") = Void, NSArray;
override externalInstanceMethod(#NSDateFormatter, "veryShortMonthSymbols") = NSArray;
override externalInstanceMethod(#NSDateFormatter, "setVeryShortMonthSymbols:") = Void, NSArray;
override externalInstanceMethod(#NSDateFormatter, "standaloneMonthSymbols") = NSArray;
override externalInstanceMethod(#NSDateFormatter, "setStandaloneMonthSymbols:") = Void, NSArray;
override externalInstanceMethod(#NSDateFormatter, "shortStandaloneMonthSymbols") = NSArray;
override externalInstanceMethod(#NSDateFormatter, "setShortStandaloneMonthSymbols:") = Void, NSArray;
override externalInstanceMethod(#NSDateFormatter, "veryShortStandaloneMonthSymbols") = NSArray;
override externalInstanceMethod(#NSDateFormatter, "setVeryShortStandaloneMonthSymbols:") = Void, NSArray;
override externalInstanceMethod(#NSDateFormatter, "veryShortWeekdaySymbols") = NSArray;
override externalInstanceMethod(#NSDateFormatter, "setVeryShortWeekdaySymbols:") = Void, NSArray;
override externalInstanceMethod(#NSDateFormatter, "standaloneWeekdaySymbols") = NSArray;
override externalInstanceMethod(#NSDateFormatter, "setStandaloneWeekdaySymbols:") = Void, NSArray;
override externalInstanceMethod(#NSDateFormatter, "shortStandaloneWeekdaySymbols") = NSArray;
override externalInstanceMethod(#NSDateFormatter, "setShortStandaloneWeekdaySymbols:") = Void, NSArray;
override externalInstanceMethod(#NSDateFormatter, "veryShortStandaloneWeekdaySymbols") = NSArray;
override externalInstanceMethod(#NSDateFormatter, "setVeryShortStandaloneWeekdaySymbols:") = Void, NSArray;
override externalInstanceMethod(#NSDateFormatter, "quarterSymbols") = NSArray;
override externalInstanceMethod(#NSDateFormatter, "setQuarterSymbols:") = Void, NSArray;
override externalInstanceMethod(#NSDateFormatter, "shortQuarterSymbols") = NSArray;
override externalInstanceMethod(#NSDateFormatter, "setShortQuarterSymbols:") = Void, NSArray;
override externalInstanceMethod(#NSDateFormatter, "standaloneQuarterSymbols") = NSArray;
override externalInstanceMethod(#NSDateFormatter, "setStandaloneQuarterSymbols:") = Void, NSArray;
override externalInstanceMethod(#NSDateFormatter, "shortStandaloneQuarterSymbols") = NSArray;
override externalInstanceMethod(#NSDateFormatter, "setShortStandaloneQuarterSymbols:") = Void, NSArray;
override externalInstanceMethod(#NSDateFormatter, "gregorianStartDate") = NSDate;
override externalInstanceMethod(#NSDateFormatter, "setGregorianStartDate:") = Void, NSDate;
override externalInstanceMethod(#NSDateFormatter, "doesRelativeDateFormatting") = Bool;
override externalInstanceMethod(#NSDateFormatter, "setDoesRelativeDateFormatting:") = Void, Bool;
override externalInstanceMethod(#NSDateFormatter, "initWithDateFormat:allowNaturalLanguage:") = Id, NSString, Bool;
override externalInstanceMethod(#NSDateFormatter, "allowsNaturalLanguage") = Bool;

record NSDecimalNumber = externalClass(NSNumber);
override externalInstanceMethod(#NSDecimalNumber, "initWithMantissa:exponent:isNegative:") = Id, UInt64, Short, Bool;
override externalInstanceMethod(#NSDecimalNumber, "initWithDecimal:") = Id, NSDecimal;
override externalInstanceMethod(#NSDecimalNumber, "initWithString:") = Id, NSString;
override externalInstanceMethod(#NSDecimalNumber, "initWithString:locale:") = Id, NSString, Id;
override externalInstanceMethod(#NSDecimalNumber, "descriptionWithLocale:") = NSString, Id;
override externalInstanceMethod(#NSDecimalNumber, "decimalValue") = NSDecimal;
override externalClassMethod(#NSDecimalNumber, "decimalNumberWithMantissa:exponent:isNegative:") = NSDecimalNumber, UInt64, Short, Bool;
override externalClassMethod(#NSDecimalNumber, "decimalNumberWithDecimal:") = NSDecimalNumber, NSDecimal;
override externalClassMethod(#NSDecimalNumber, "decimalNumberWithString:") = NSDecimalNumber, NSString;
override externalClassMethod(#NSDecimalNumber, "decimalNumberWithString:locale:") = NSDecimalNumber, NSString, Id;
override externalClassMethod(#NSDecimalNumber, "zero") = NSDecimalNumber;
override externalClassMethod(#NSDecimalNumber, "one") = NSDecimalNumber;
override externalClassMethod(#NSDecimalNumber, "minimumDecimalNumber") = NSDecimalNumber;
override externalClassMethod(#NSDecimalNumber, "maximumDecimalNumber") = NSDecimalNumber;
override externalClassMethod(#NSDecimalNumber, "notANumber") = NSDecimalNumber;
override externalInstanceMethod(#NSDecimalNumber, "decimalNumberByAdding:") = NSDecimalNumber, NSDecimalNumber;
override externalInstanceMethod(#NSDecimalNumber, "decimalNumberByAdding:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
override externalInstanceMethod(#NSDecimalNumber, "decimalNumberBySubtracting:") = NSDecimalNumber, NSDecimalNumber;
override externalInstanceMethod(#NSDecimalNumber, "decimalNumberBySubtracting:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
override externalInstanceMethod(#NSDecimalNumber, "decimalNumberByMultiplyingBy:") = NSDecimalNumber, NSDecimalNumber;
override externalInstanceMethod(#NSDecimalNumber, "decimalNumberByMultiplyingBy:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
override externalInstanceMethod(#NSDecimalNumber, "decimalNumberByDividingBy:") = NSDecimalNumber, NSDecimalNumber;
override externalInstanceMethod(#NSDecimalNumber, "decimalNumberByDividingBy:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
override externalInstanceMethod(#NSDecimalNumber, "decimalNumberByRaisingToPower:") = NSDecimalNumber, CULong;
override externalInstanceMethod(#NSDecimalNumber, "decimalNumberByRaisingToPower:withBehavior:") = NSDecimalNumber, CULong, Id;
override externalInstanceMethod(#NSDecimalNumber, "decimalNumberByMultiplyingByPowerOf10:") = NSDecimalNumber, Short;
override externalInstanceMethod(#NSDecimalNumber, "decimalNumberByMultiplyingByPowerOf10:withBehavior:") = NSDecimalNumber, Short, Id;
override externalInstanceMethod(#NSDecimalNumber, "decimalNumberByRoundingAccordingToBehavior:") = NSDecimalNumber, Id;
override externalInstanceMethod(#NSDecimalNumber, "compare:") = CLong, NSNumber;
override externalClassMethod(#NSDecimalNumber, "setDefaultBehavior:") = Void, Id;
override externalClassMethod(#NSDecimalNumber, "defaultBehavior") = Id;
override externalInstanceMethod(#NSDecimalNumber, "objCType") = Pointer[CChar];
override externalInstanceMethod(#NSDecimalNumber, "doubleValue") = Double;

record NSDecimalNumberHandler = externalClass(NSObject);
override externalInstanceMethod(#NSDecimalNumberHandler, "roundingMode") = CULong;
override externalInstanceMethod(#NSDecimalNumberHandler, "scale") = Short;
override externalInstanceMethod(#NSDecimalNumberHandler, "exceptionDuringOperation:error:leftOperand:rightOperand:") = NSDecimalNumber, SelectorHandle, CULong, NSDecimalNumber, NSDecimalNumber;
override externalInstanceMethod(#NSDecimalNumberHandler, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSDecimalNumberHandler, "initWithCoder:") = Id, NSCoder;
override externalClassMethod(#NSDecimalNumberHandler, "defaultDecimalNumberHandler") = Id;
override externalInstanceMethod(#NSDecimalNumberHandler, "initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:") = Id, CULong, Short, Bool, Bool, Bool, Bool;
override externalClassMethod(#NSDecimalNumberHandler, "decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:") = Id, CULong, Short, Bool, Bool, Bool, Bool;

record NSDeleteCommand = externalClass(NSScriptCommand);
override externalInstanceMethod(#NSDeleteCommand, "setReceiversSpecifier:") = Void, NSScriptObjectSpecifier;
override externalInstanceMethod(#NSDeleteCommand, "keySpecifier") = NSScriptObjectSpecifier;

record NSDictionary = externalClass(NSObject);
override externalInstanceMethod(#NSDictionary, "copyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSDictionary, "mutableCopyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSDictionary, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSDictionary, "initWithCoder:") = Id, NSCoder;
override externalInstanceMethod(#NSDictionary, "countByEnumeratingWithState:objects:count:") = CULong, Pointer[NSFastEnumerationState], Pointer[Id], CULong;
override externalInstanceMethod(#NSDictionary, "count") = CULong;
override externalInstanceMethod(#NSDictionary, "objectForKey:") = Id, Id;
override externalInstanceMethod(#NSDictionary, "keyEnumerator") = NSEnumerator;
override externalInstanceMethod(#NSDictionary, "allKeys") = NSArray;
override externalInstanceMethod(#NSDictionary, "allKeysForObject:") = NSArray, Id;
override externalInstanceMethod(#NSDictionary, "allValues") = NSArray;
override externalInstanceMethod(#NSDictionary, "description") = NSString;
override externalInstanceMethod(#NSDictionary, "descriptionInStringsFileFormat") = NSString;
override externalInstanceMethod(#NSDictionary, "descriptionWithLocale:") = NSString, Id;
override externalInstanceMethod(#NSDictionary, "descriptionWithLocale:indent:") = NSString, Id, CULong;
override externalInstanceMethod(#NSDictionary, "isEqualToDictionary:") = Bool, NSDictionary;
override externalInstanceMethod(#NSDictionary, "objectEnumerator") = NSEnumerator;
override externalInstanceMethod(#NSDictionary, "objectsForKeys:notFoundMarker:") = NSArray, NSArray, Id;
override externalInstanceMethod(#NSDictionary, "writeToFile:atomically:") = Bool, NSString, Bool;
override externalInstanceMethod(#NSDictionary, "writeToURL:atomically:") = Bool, NSURL, Bool;
override externalInstanceMethod(#NSDictionary, "keysSortedByValueUsingSelector:") = NSArray, SelectorHandle;
override externalInstanceMethod(#NSDictionary, "getObjects:andKeys:") = Void, Pointer[Id], Pointer[Id];
override externalInstanceMethod(#NSDictionary, "enumerateKeysAndObjectsUsingBlock:") = Void, UnknownType;
override externalInstanceMethod(#NSDictionary, "enumerateKeysAndObjectsWithOptions:usingBlock:") = Void, CULong, UnknownType;
override externalInstanceMethod(#NSDictionary, "keysSortedByValueUsingComparator:") = NSArray, NSComparator;
override externalInstanceMethod(#NSDictionary, "keysSortedByValueWithOptions:usingComparator:") = NSArray, CULong, NSComparator;
override externalInstanceMethod(#NSDictionary, "keysOfEntriesPassingTest:") = NSSet, UnknownType;
override externalInstanceMethod(#NSDictionary, "keysOfEntriesWithOptions:passingTest:") = NSSet, CULong, UnknownType;
override externalClassMethod(#NSDictionary, "dictionary") = Id;
override externalClassMethod(#NSDictionary, "dictionaryWithObject:forKey:") = Id, Id, Id;
override externalClassMethod(#NSDictionary, "dictionaryWithObjects:forKeys:count:") = Id, Pointer[Id], Pointer[Id], CULong;
override externalVarargClassMethod(#NSDictionary, "dictionaryWithObjectsAndKeys:") = Id, Id;
override externalClassMethod(#NSDictionary, "dictionaryWithDictionary:") = Id, NSDictionary;
override externalClassMethod(#NSDictionary, "dictionaryWithObjects:forKeys:") = Id, NSArray, NSArray;
override externalInstanceMethod(#NSDictionary, "initWithObjects:forKeys:count:") = Id, Pointer[Id], Pointer[Id], CULong;
override externalVarargInstanceMethod(#NSDictionary, "initWithObjectsAndKeys:") = Id, Id;
override externalInstanceMethod(#NSDictionary, "initWithDictionary:") = Id, NSDictionary;
override externalInstanceMethod(#NSDictionary, "initWithDictionary:copyItems:") = Id, NSDictionary, Bool;
override externalInstanceMethod(#NSDictionary, "initWithObjects:forKeys:") = Id, NSArray, NSArray;
override externalClassMethod(#NSDictionary, "dictionaryWithContentsOfFile:") = Id, NSString;
override externalClassMethod(#NSDictionary, "dictionaryWithContentsOfURL:") = Id, NSURL;
override externalInstanceMethod(#NSDictionary, "initWithContentsOfFile:") = Id, NSString;
override externalInstanceMethod(#NSDictionary, "initWithContentsOfURL:") = Id, NSURL;
override externalInstanceMethod(#NSDictionary, "fileSize") = UInt64;
override externalInstanceMethod(#NSDictionary, "fileModificationDate") = NSDate;
override externalInstanceMethod(#NSDictionary, "fileType") = NSString;
override externalInstanceMethod(#NSDictionary, "filePosixPermissions") = CULong;
override externalInstanceMethod(#NSDictionary, "fileOwnerAccountName") = NSString;
override externalInstanceMethod(#NSDictionary, "fileGroupOwnerAccountName") = NSString;
override externalInstanceMethod(#NSDictionary, "fileSystemNumber") = CLong;
override externalInstanceMethod(#NSDictionary, "fileSystemFileNumber") = CULong;
override externalInstanceMethod(#NSDictionary, "fileExtensionHidden") = Bool;
override externalInstanceMethod(#NSDictionary, "fileHFSCreatorCode") = UInt;
override externalInstanceMethod(#NSDictionary, "fileHFSTypeCode") = UInt;
override externalInstanceMethod(#NSDictionary, "fileIsImmutable") = Bool;
override externalInstanceMethod(#NSDictionary, "fileIsAppendOnly") = Bool;
override externalInstanceMethod(#NSDictionary, "fileCreationDate") = NSDate;
override externalInstanceMethod(#NSDictionary, "fileOwnerAccountID") = NSNumber;
override externalInstanceMethod(#NSDictionary, "fileGroupOwnerAccountID") = NSNumber;
override externalInstanceMethod(#NSDictionary, "valueForKey:") = Id, NSString;

record NSDirectoryEnumerator = externalClass(NSEnumerator);
override externalInstanceMethod(#NSDirectoryEnumerator, "fileAttributes") = NSDictionary;
override externalInstanceMethod(#NSDirectoryEnumerator, "directoryAttributes") = NSDictionary;
override externalInstanceMethod(#NSDirectoryEnumerator, "skipDescendents") = Void;
override externalInstanceMethod(#NSDirectoryEnumerator, "level") = CULong;
override externalInstanceMethod(#NSDirectoryEnumerator, "skipDescendants") = Void;

record NSDistantObject = externalClass(NSProxy);
override externalInstanceMethod(#NSDistantObject, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSDistantObject, "initWithCoder:") = Id, NSCoder;
override externalClassMethod(#NSDistantObject, "proxyWithTarget:connection:") = NSDistantObject, Id, NSConnection;
override externalInstanceMethod(#NSDistantObject, "initWithTarget:connection:") = Id, Id, NSConnection;
override externalClassMethod(#NSDistantObject, "proxyWithLocal:connection:") = NSDistantObject, Id, NSConnection;
override externalInstanceMethod(#NSDistantObject, "initWithLocal:connection:") = Id, Id, NSConnection;
override externalInstanceMethod(#NSDistantObject, "setProtocolForProxy:") = Void, Id;
override externalInstanceMethod(#NSDistantObject, "connectionForProxy") = NSConnection;

record NSDistantObjectRequest = externalClass(NSObject);
override externalInstanceMethod(#NSDistantObjectRequest, "invocation") = NSInvocation;
override externalInstanceMethod(#NSDistantObjectRequest, "connection") = NSConnection;
override externalInstanceMethod(#NSDistantObjectRequest, "conversation") = Id;
override externalInstanceMethod(#NSDistantObjectRequest, "replyWithException:") = Void, NSException;

record NSDistributedLock = externalClass(NSObject);
override externalClassMethod(#NSDistributedLock, "lockWithPath:") = NSDistributedLock, NSString;
override externalInstanceMethod(#NSDistributedLock, "initWithPath:") = Id, NSString;
override externalInstanceMethod(#NSDistributedLock, "tryLock") = Bool;
override externalInstanceMethod(#NSDistributedLock, "unlock") = Void;
override externalInstanceMethod(#NSDistributedLock, "breakLock") = Void;
override externalInstanceMethod(#NSDistributedLock, "lockDate") = NSDate;

record NSDistributedNotificationCenter = externalClass(NSNotificationCenter);
override externalClassMethod(#NSDistributedNotificationCenter, "notificationCenterForType:") = NSDistributedNotificationCenter, NSString;
override externalClassMethod(#NSDistributedNotificationCenter, "defaultCenter") = Id;
override externalInstanceMethod(#NSDistributedNotificationCenter, "addObserver:selector:name:object:suspensionBehavior:") = Void, Id, SelectorHandle, NSString, NSString, CULong;
override externalInstanceMethod(#NSDistributedNotificationCenter, "postNotificationName:object:userInfo:deliverImmediately:") = Void, NSString, NSString, NSDictionary, Bool;
override externalInstanceMethod(#NSDistributedNotificationCenter, "postNotificationName:object:userInfo:options:") = Void, NSString, NSString, NSDictionary, CULong;
override externalInstanceMethod(#NSDistributedNotificationCenter, "setSuspended:") = Void, Bool;
override externalInstanceMethod(#NSDistributedNotificationCenter, "suspended") = Bool;
override externalInstanceMethod(#NSDistributedNotificationCenter, "addObserver:selector:name:object:") = Void, Id, SelectorHandle, NSString, NSString;
override externalInstanceMethod(#NSDistributedNotificationCenter, "postNotificationName:object:") = Void, NSString, NSString;
override externalInstanceMethod(#NSDistributedNotificationCenter, "postNotificationName:object:userInfo:") = Void, NSString, NSString, NSDictionary;
override externalInstanceMethod(#NSDistributedNotificationCenter, "removeObserver:name:object:") = Void, Id, NSString, NSString;

record NSEnumerator = externalClass(NSObject);
override externalInstanceMethod(#NSEnumerator, "countByEnumeratingWithState:objects:count:") = CULong, Pointer[NSFastEnumerationState], Pointer[Id], CULong;
override externalInstanceMethod(#NSEnumerator, "nextObject") = Id;
override externalInstanceMethod(#NSEnumerator, "allObjects") = NSArray;

record NSError = externalClass(NSObject);
override externalInstanceMethod(#NSError, "copyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSError, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSError, "initWithCoder:") = Id, NSCoder;
override externalInstanceMethod(#NSError, "initWithDomain:code:userInfo:") = Id, NSString, CLong, NSDictionary;
override externalClassMethod(#NSError, "errorWithDomain:code:userInfo:") = Id, NSString, CLong, NSDictionary;
override externalInstanceMethod(#NSError, "domain") = NSString;
override externalInstanceMethod(#NSError, "code") = CLong;
override externalInstanceMethod(#NSError, "userInfo") = NSDictionary;
override externalInstanceMethod(#NSError, "localizedDescription") = NSString;
override externalInstanceMethod(#NSError, "localizedFailureReason") = NSString;
override externalInstanceMethod(#NSError, "localizedRecoverySuggestion") = NSString;
override externalInstanceMethod(#NSError, "localizedRecoveryOptions") = NSArray;
override externalInstanceMethod(#NSError, "recoveryAttempter") = Id;
override externalInstanceMethod(#NSError, "helpAnchor") = NSString;

record NSException = externalClass(NSObject);
override externalInstanceMethod(#NSException, "copyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSException, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSException, "initWithCoder:") = Id, NSCoder;
override externalClassMethod(#NSException, "exceptionWithName:reason:userInfo:") = NSException, NSString, NSString, NSDictionary;
override externalInstanceMethod(#NSException, "initWithName:reason:userInfo:") = Id, NSString, NSString, NSDictionary;
override externalInstanceMethod(#NSException, "name") = NSString;
override externalInstanceMethod(#NSException, "reason") = NSString;
override externalInstanceMethod(#NSException, "userInfo") = NSDictionary;
override externalInstanceMethod(#NSException, "callStackReturnAddresses") = NSArray;
override externalInstanceMethod(#NSException, "callStackSymbols") = NSArray;
override externalInstanceMethod(#NSException, "raise") = Void;
override externalVarargClassMethod(#NSException, "raise:format:") = Void, NSString, NSString;
override externalClassMethod(#NSException, "raise:format:arguments:") = Void, NSString, NSString, Pointer[__va_list_tag];

record NSExistsCommand = externalClass(NSScriptCommand);

record NSExpression = externalClass(NSObject);
override externalInstanceMethod(#NSExpression, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSExpression, "initWithCoder:") = Id, NSCoder;
override externalInstanceMethod(#NSExpression, "copyWithZone:") = Id, Pointer[NSZone];
override externalClassMethod(#NSExpression, "expressionForConstantValue:") = NSExpression, Id;
override externalClassMethod(#NSExpression, "expressionForEvaluatedObject") = NSExpression;
override externalClassMethod(#NSExpression, "expressionForVariable:") = NSExpression, NSString;
override externalClassMethod(#NSExpression, "expressionForKeyPath:") = NSExpression, NSString;
override externalClassMethod(#NSExpression, "expressionForFunction:arguments:") = NSExpression, NSString, NSArray;
override externalClassMethod(#NSExpression, "expressionForAggregate:") = NSExpression, NSArray;
override externalClassMethod(#NSExpression, "expressionForUnionSet:with:") = NSExpression, NSExpression, NSExpression;
override externalClassMethod(#NSExpression, "expressionForIntersectSet:with:") = NSExpression, NSExpression, NSExpression;
override externalClassMethod(#NSExpression, "expressionForMinusSet:with:") = NSExpression, NSExpression, NSExpression;
override externalClassMethod(#NSExpression, "expressionForSubquery:usingIteratorVariable:predicate:") = NSExpression, NSExpression, NSString, Id;
override externalClassMethod(#NSExpression, "expressionForFunction:selectorName:arguments:") = NSExpression, NSExpression, NSString, NSArray;
override externalClassMethod(#NSExpression, "expressionForBlock:arguments:") = NSExpression, UnknownType, NSArray;
override externalInstanceMethod(#NSExpression, "initWithExpressionType:") = Id, CULong;
override externalInstanceMethod(#NSExpression, "expressionType") = CULong;
override externalInstanceMethod(#NSExpression, "constantValue") = Id;
override externalInstanceMethod(#NSExpression, "keyPath") = NSString;
override externalInstanceMethod(#NSExpression, "function") = NSString;
override externalInstanceMethod(#NSExpression, "variable") = NSString;
override externalInstanceMethod(#NSExpression, "operand") = NSExpression;
override externalInstanceMethod(#NSExpression, "arguments") = NSArray;
override externalInstanceMethod(#NSExpression, "collection") = Id;
override externalInstanceMethod(#NSExpression, "predicate") = NSPredicate;
override externalInstanceMethod(#NSExpression, "leftExpression") = NSExpression;
override externalInstanceMethod(#NSExpression, "rightExpression") = NSExpression;
override externalInstanceMethod(#NSExpression, "expressionBlock") = UnknownType;
override externalInstanceMethod(#NSExpression, "expressionValueWithObject:context:") = Id, Id, NSMutableDictionary;

record NSFileHandle = externalClass(NSObject);
override externalInstanceMethod(#NSFileHandle, "availableData") = NSData;
override externalInstanceMethod(#NSFileHandle, "readDataToEndOfFile") = NSData;
override externalInstanceMethod(#NSFileHandle, "readDataOfLength:") = NSData, CULong;
override externalInstanceMethod(#NSFileHandle, "writeData:") = Void, NSData;
override externalInstanceMethod(#NSFileHandle, "offsetInFile") = UInt64;
override externalInstanceMethod(#NSFileHandle, "seekToEndOfFile") = UInt64;
override externalInstanceMethod(#NSFileHandle, "seekToFileOffset:") = Void, UInt64;
override externalInstanceMethod(#NSFileHandle, "truncateFileAtOffset:") = Void, UInt64;
override externalInstanceMethod(#NSFileHandle, "synchronizeFile") = Void;
override externalInstanceMethod(#NSFileHandle, "closeFile") = Void;
override externalClassMethod(#NSFileHandle, "fileHandleWithStandardInput") = Id;
override externalClassMethod(#NSFileHandle, "fileHandleWithStandardOutput") = Id;
override externalClassMethod(#NSFileHandle, "fileHandleWithStandardError") = Id;
override externalClassMethod(#NSFileHandle, "fileHandleWithNullDevice") = Id;
override externalClassMethod(#NSFileHandle, "fileHandleForReadingAtPath:") = Id, NSString;
override externalClassMethod(#NSFileHandle, "fileHandleForWritingAtPath:") = Id, NSString;
override externalClassMethod(#NSFileHandle, "fileHandleForUpdatingAtPath:") = Id, NSString;
override externalClassMethod(#NSFileHandle, "fileHandleForReadingFromURL:error:") = Id, NSURL, Pointer[NSError];
override externalClassMethod(#NSFileHandle, "fileHandleForWritingToURL:error:") = Id, NSURL, Pointer[NSError];
override externalClassMethod(#NSFileHandle, "fileHandleForUpdatingURL:error:") = Id, NSURL, Pointer[NSError];
override externalInstanceMethod(#NSFileHandle, "readInBackgroundAndNotifyForModes:") = Void, NSArray;
override externalInstanceMethod(#NSFileHandle, "readInBackgroundAndNotify") = Void;
override externalInstanceMethod(#NSFileHandle, "readToEndOfFileInBackgroundAndNotifyForModes:") = Void, NSArray;
override externalInstanceMethod(#NSFileHandle, "readToEndOfFileInBackgroundAndNotify") = Void;
override externalInstanceMethod(#NSFileHandle, "acceptConnectionInBackgroundAndNotifyForModes:") = Void, NSArray;
override externalInstanceMethod(#NSFileHandle, "acceptConnectionInBackgroundAndNotify") = Void;
override externalInstanceMethod(#NSFileHandle, "waitForDataInBackgroundAndNotifyForModes:") = Void, NSArray;
override externalInstanceMethod(#NSFileHandle, "waitForDataInBackgroundAndNotify") = Void;
override externalInstanceMethod(#NSFileHandle, "initWithFileDescriptor:closeOnDealloc:") = Id, Int, Bool;
override externalInstanceMethod(#NSFileHandle, "initWithFileDescriptor:") = Id, Int;
override externalInstanceMethod(#NSFileHandle, "fileDescriptor") = Int;

record NSFileManager = externalClass(NSObject);
override externalClassMethod(#NSFileManager, "defaultManager") = NSFileManager;
override externalInstanceMethod(#NSFileManager, "mountedVolumeURLsIncludingResourceValuesForKeys:options:") = NSArray, NSArray, CULong;
override externalInstanceMethod(#NSFileManager, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:") = NSArray, NSURL, NSArray, CULong, Pointer[NSError];
override externalInstanceMethod(#NSFileManager, "URLsForDirectory:inDomains:") = NSArray, CULong, CULong;
override externalInstanceMethod(#NSFileManager, "URLForDirectory:inDomain:appropriateForURL:create:error:") = NSURL, CULong, CULong, NSURL, Bool, Pointer[NSError];
override externalInstanceMethod(#NSFileManager, "setDelegate:") = Void, Id;
override externalInstanceMethod(#NSFileManager, "delegate") = Id;
override externalInstanceMethod(#NSFileManager, "setAttributes:ofItemAtPath:error:") = Bool, NSDictionary, NSString, Pointer[NSError];
override externalInstanceMethod(#NSFileManager, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:") = Bool, NSString, Bool, NSDictionary, Pointer[NSError];
override externalInstanceMethod(#NSFileManager, "contentsOfDirectoryAtPath:error:") = NSArray, NSString, Pointer[NSError];
override externalInstanceMethod(#NSFileManager, "subpathsOfDirectoryAtPath:error:") = NSArray, NSString, Pointer[NSError];
override externalInstanceMethod(#NSFileManager, "attributesOfItemAtPath:error:") = NSDictionary, NSString, Pointer[NSError];
override externalInstanceMethod(#NSFileManager, "attributesOfFileSystemForPath:error:") = NSDictionary, NSString, Pointer[NSError];
override externalInstanceMethod(#NSFileManager, "createSymbolicLinkAtPath:withDestinationPath:error:") = Bool, NSString, NSString, Pointer[NSError];
override externalInstanceMethod(#NSFileManager, "destinationOfSymbolicLinkAtPath:error:") = NSString, NSString, Pointer[NSError];
override externalInstanceMethod(#NSFileManager, "copyItemAtPath:toPath:error:") = Bool, NSString, NSString, Pointer[NSError];
override externalInstanceMethod(#NSFileManager, "moveItemAtPath:toPath:error:") = Bool, NSString, NSString, Pointer[NSError];
override externalInstanceMethod(#NSFileManager, "linkItemAtPath:toPath:error:") = Bool, NSString, NSString, Pointer[NSError];
override externalInstanceMethod(#NSFileManager, "removeItemAtPath:error:") = Bool, NSString, Pointer[NSError];
override externalInstanceMethod(#NSFileManager, "copyItemAtURL:toURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
override externalInstanceMethod(#NSFileManager, "moveItemAtURL:toURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
override externalInstanceMethod(#NSFileManager, "linkItemAtURL:toURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
override externalInstanceMethod(#NSFileManager, "removeItemAtURL:error:") = Bool, NSURL, Pointer[NSError];
override externalInstanceMethod(#NSFileManager, "fileAttributesAtPath:traverseLink:") = NSDictionary, NSString, Bool;
override externalInstanceMethod(#NSFileManager, "changeFileAttributes:atPath:") = Bool, NSDictionary, NSString;
override externalInstanceMethod(#NSFileManager, "directoryContentsAtPath:") = NSArray, NSString;
override externalInstanceMethod(#NSFileManager, "fileSystemAttributesAtPath:") = NSDictionary, NSString;
override externalInstanceMethod(#NSFileManager, "pathContentOfSymbolicLinkAtPath:") = NSString, NSString;
override externalInstanceMethod(#NSFileManager, "createSymbolicLinkAtPath:pathContent:") = Bool, NSString, NSString;
override externalInstanceMethod(#NSFileManager, "createDirectoryAtPath:attributes:") = Bool, NSString, NSDictionary;
override externalInstanceMethod(#NSFileManager, "linkPath:toPath:handler:") = Bool, NSString, NSString, Id;
override externalInstanceMethod(#NSFileManager, "copyPath:toPath:handler:") = Bool, NSString, NSString, Id;
override externalInstanceMethod(#NSFileManager, "movePath:toPath:handler:") = Bool, NSString, NSString, Id;
override externalInstanceMethod(#NSFileManager, "removeFileAtPath:handler:") = Bool, NSString, Id;
override externalInstanceMethod(#NSFileManager, "currentDirectoryPath") = NSString;
override externalInstanceMethod(#NSFileManager, "changeCurrentDirectoryPath:") = Bool, NSString;
override externalInstanceMethod(#NSFileManager, "fileExistsAtPath:") = Bool, NSString;
override externalInstanceMethod(#NSFileManager, "fileExistsAtPath:isDirectory:") = Bool, NSString, Pointer[Bool];
override externalInstanceMethod(#NSFileManager, "isReadableFileAtPath:") = Bool, NSString;
override externalInstanceMethod(#NSFileManager, "isWritableFileAtPath:") = Bool, NSString;
override externalInstanceMethod(#NSFileManager, "isExecutableFileAtPath:") = Bool, NSString;
override externalInstanceMethod(#NSFileManager, "isDeletableFileAtPath:") = Bool, NSString;
override externalInstanceMethod(#NSFileManager, "contentsEqualAtPath:andPath:") = Bool, NSString, NSString;
override externalInstanceMethod(#NSFileManager, "displayNameAtPath:") = NSString, NSString;
override externalInstanceMethod(#NSFileManager, "componentsToDisplayForPath:") = NSArray, NSString;
override externalInstanceMethod(#NSFileManager, "enumeratorAtPath:") = NSDirectoryEnumerator, NSString;
override externalInstanceMethod(#NSFileManager, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:") = NSDirectoryEnumerator, NSURL, NSArray, CULong, UnknownType;
override externalInstanceMethod(#NSFileManager, "subpathsAtPath:") = NSArray, NSString;
override externalInstanceMethod(#NSFileManager, "contentsAtPath:") = NSData, NSString;
override externalInstanceMethod(#NSFileManager, "createFileAtPath:contents:attributes:") = Bool, NSString, NSData, NSDictionary;
override externalInstanceMethod(#NSFileManager, "fileSystemRepresentationWithPath:") = Pointer[CChar], NSString;
override externalInstanceMethod(#NSFileManager, "stringWithFileSystemRepresentation:length:") = NSString, Pointer[CChar], CULong;
override externalInstanceMethod(#NSFileManager, "replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:") = Bool, NSURL, NSURL, NSString, CULong, Pointer[NSURL], Pointer[NSError];

record NSFormatter = externalClass(NSObject);
override externalInstanceMethod(#NSFormatter, "copyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSFormatter, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSFormatter, "initWithCoder:") = Id, NSCoder;
override externalInstanceMethod(#NSFormatter, "stringForObjectValue:") = NSString, Id;
override externalInstanceMethod(#NSFormatter, "attributedStringForObjectValue:withDefaultAttributes:") = NSAttributedString, Id, NSDictionary;
override externalInstanceMethod(#NSFormatter, "editingStringForObjectValue:") = NSString, Id;
override externalInstanceMethod(#NSFormatter, "getObjectValue:forString:errorDescription:") = Bool, Pointer[Id], NSString, Pointer[NSString];
override externalInstanceMethod(#NSFormatter, "isPartialStringValid:newEditingString:errorDescription:") = Bool, NSString, Pointer[NSString], Pointer[NSString];
override externalInstanceMethod(#NSFormatter, "isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:") = Bool, Pointer[NSString], NSRangePointer, NSString, NSRange, Pointer[NSString];

record NSGarbageCollector = externalClass(NSObject);
override externalClassMethod(#NSGarbageCollector, "defaultCollector") = Id;
override externalInstanceMethod(#NSGarbageCollector, "isCollecting") = Bool;
override externalInstanceMethod(#NSGarbageCollector, "disable") = Void;
override externalInstanceMethod(#NSGarbageCollector, "enable") = Void;
override externalInstanceMethod(#NSGarbageCollector, "isEnabled") = Bool;
override externalInstanceMethod(#NSGarbageCollector, "collectIfNeeded") = Void;
override externalInstanceMethod(#NSGarbageCollector, "collectExhaustively") = Void;
override externalInstanceMethod(#NSGarbageCollector, "disableCollectorForPointer:") = Void, RawPointer;
override externalInstanceMethod(#NSGarbageCollector, "enableCollectorForPointer:") = Void, RawPointer;
override externalInstanceMethod(#NSGarbageCollector, "zone") = Pointer[NSZone];

record NSGetCommand = externalClass(NSScriptCommand);

record NSHTTPCookie = externalClass(NSObject);
override externalInstanceMethod(#NSHTTPCookie, "initWithProperties:") = Id, NSDictionary;
override externalClassMethod(#NSHTTPCookie, "cookieWithProperties:") = Id, NSDictionary;
override externalClassMethod(#NSHTTPCookie, "requestHeaderFieldsWithCookies:") = NSDictionary, NSArray;
override externalClassMethod(#NSHTTPCookie, "cookiesWithResponseHeaderFields:forURL:") = NSArray, NSDictionary, NSURL;
override externalInstanceMethod(#NSHTTPCookie, "properties") = NSDictionary;
override externalInstanceMethod(#NSHTTPCookie, "version") = CULong;
override externalInstanceMethod(#NSHTTPCookie, "name") = NSString;
override externalInstanceMethod(#NSHTTPCookie, "value") = NSString;
override externalInstanceMethod(#NSHTTPCookie, "expiresDate") = NSDate;
override externalInstanceMethod(#NSHTTPCookie, "isSessionOnly") = Bool;
override externalInstanceMethod(#NSHTTPCookie, "domain") = NSString;
override externalInstanceMethod(#NSHTTPCookie, "path") = NSString;
override externalInstanceMethod(#NSHTTPCookie, "isSecure") = Bool;
override externalInstanceMethod(#NSHTTPCookie, "isHTTPOnly") = Bool;
override externalInstanceMethod(#NSHTTPCookie, "comment") = NSString;
override externalInstanceMethod(#NSHTTPCookie, "commentURL") = NSURL;
override externalInstanceMethod(#NSHTTPCookie, "portList") = NSArray;

record NSHTTPCookieStorage = externalClass(NSObject);
override externalClassMethod(#NSHTTPCookieStorage, "sharedHTTPCookieStorage") = NSHTTPCookieStorage;
override externalInstanceMethod(#NSHTTPCookieStorage, "initWithStorageLocation:") = Id, NSURL;
override externalInstanceMethod(#NSHTTPCookieStorage, "cookies") = NSArray;
override externalInstanceMethod(#NSHTTPCookieStorage, "setCookie:") = Void, NSHTTPCookie;
override externalInstanceMethod(#NSHTTPCookieStorage, "deleteCookie:") = Void, NSHTTPCookie;
override externalInstanceMethod(#NSHTTPCookieStorage, "cookiesForURL:") = NSArray, NSURL;
override externalInstanceMethod(#NSHTTPCookieStorage, "setCookies:forURL:mainDocumentURL:") = Void, NSArray, NSURL, NSURL;
override externalInstanceMethod(#NSHTTPCookieStorage, "cookieAcceptPolicy") = CULong;
override externalInstanceMethod(#NSHTTPCookieStorage, "setCookieAcceptPolicy:") = Void, CULong;

record NSHTTPURLResponse = externalClass(NSURLResponse);
override externalInstanceMethod(#NSHTTPURLResponse, "statusCode") = CLong;
override externalInstanceMethod(#NSHTTPURLResponse, "allHeaderFields") = NSDictionary;
override externalClassMethod(#NSHTTPURLResponse, "localizedStringForStatusCode:") = NSString, CLong;

record NSHashTable = externalClass(NSObject);
override externalInstanceMethod(#NSHashTable, "copyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSHashTable, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSHashTable, "initWithCoder:") = Id, NSCoder;
override externalInstanceMethod(#NSHashTable, "countByEnumeratingWithState:objects:count:") = CULong, Pointer[NSFastEnumerationState], Pointer[Id], CULong;
override externalInstanceMethod(#NSHashTable, "initWithOptions:capacity:") = Id, CULong, CULong;
override externalInstanceMethod(#NSHashTable, "initWithPointerFunctions:capacity:") = Id, NSPointerFunctions, CULong;
override externalClassMethod(#NSHashTable, "hashTableWithOptions:") = Id, CULong;
override externalClassMethod(#NSHashTable, "hashTableWithWeakObjects") = Id;
override externalInstanceMethod(#NSHashTable, "pointerFunctions") = NSPointerFunctions;
override externalInstanceMethod(#NSHashTable, "count") = CULong;
override externalInstanceMethod(#NSHashTable, "member:") = Id, Id;
override externalInstanceMethod(#NSHashTable, "objectEnumerator") = NSEnumerator;
override externalInstanceMethod(#NSHashTable, "addObject:") = Void, Id;
override externalInstanceMethod(#NSHashTable, "removeObject:") = Void, Id;
override externalInstanceMethod(#NSHashTable, "removeAllObjects") = Void;
override externalInstanceMethod(#NSHashTable, "allObjects") = NSArray;
override externalInstanceMethod(#NSHashTable, "anyObject") = Id;
override externalInstanceMethod(#NSHashTable, "containsObject:") = Bool, Id;
override externalInstanceMethod(#NSHashTable, "intersectsHashTable:") = Bool, NSHashTable;
override externalInstanceMethod(#NSHashTable, "isEqualToHashTable:") = Bool, NSHashTable;
override externalInstanceMethod(#NSHashTable, "isSubsetOfHashTable:") = Bool, NSHashTable;
override externalInstanceMethod(#NSHashTable, "intersectHashTable:") = Void, NSHashTable;
override externalInstanceMethod(#NSHashTable, "unionHashTable:") = Void, NSHashTable;
override externalInstanceMethod(#NSHashTable, "minusHashTable:") = Void, NSHashTable;
override externalInstanceMethod(#NSHashTable, "setRepresentation") = NSSet;

record NSHost = externalClass(NSObject);
override externalClassMethod(#NSHost, "currentHost") = NSHost;
override externalClassMethod(#NSHost, "hostWithName:") = NSHost, NSString;
override externalClassMethod(#NSHost, "hostWithAddress:") = NSHost, NSString;
override externalClassMethod(#NSHost, "setHostCacheEnabled:") = Void, Bool;
override externalClassMethod(#NSHost, "isHostCacheEnabled") = Bool;
override externalClassMethod(#NSHost, "flushHostCache") = Void;
override externalInstanceMethod(#NSHost, "isEqualToHost:") = Bool, NSHost;
override externalInstanceMethod(#NSHost, "name") = NSString;
override externalInstanceMethod(#NSHost, "names") = NSArray;
override externalInstanceMethod(#NSHost, "address") = NSString;
override externalInstanceMethod(#NSHost, "addresses") = NSArray;
override externalInstanceMethod(#NSHost, "localizedName") = NSString;

record NSIndexPath = externalClass(NSObject);
override externalInstanceMethod(#NSIndexPath, "copyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSIndexPath, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSIndexPath, "initWithCoder:") = Id, NSCoder;
override externalClassMethod(#NSIndexPath, "indexPathWithIndex:") = Id, CULong;
override externalClassMethod(#NSIndexPath, "indexPathWithIndexes:length:") = Id, Pointer[CULong], CULong;
override externalInstanceMethod(#NSIndexPath, "initWithIndex:") = Id, CULong;
override externalInstanceMethod(#NSIndexPath, "initWithIndexes:length:") = Id, Pointer[CULong], CULong;
override externalInstanceMethod(#NSIndexPath, "indexPathByAddingIndex:") = NSIndexPath, CULong;
override externalInstanceMethod(#NSIndexPath, "indexPathByRemovingLastIndex") = NSIndexPath;
override externalInstanceMethod(#NSIndexPath, "indexAtPosition:") = CULong, CULong;
override externalInstanceMethod(#NSIndexPath, "length") = CULong;
override externalInstanceMethod(#NSIndexPath, "getIndexes:") = Void, Pointer[CULong];
override externalInstanceMethod(#NSIndexPath, "compare:") = CLong, NSIndexPath;

record NSIndexSet = externalClass(NSObject);
override externalInstanceMethod(#NSIndexSet, "copyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSIndexSet, "mutableCopyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSIndexSet, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSIndexSet, "initWithCoder:") = Id, NSCoder;
override externalClassMethod(#NSIndexSet, "indexSet") = Id;
override externalClassMethod(#NSIndexSet, "indexSetWithIndex:") = Id, CULong;
override externalClassMethod(#NSIndexSet, "indexSetWithIndexesInRange:") = Id, NSRange;
override externalInstanceMethod(#NSIndexSet, "init") = Id;
override externalInstanceMethod(#NSIndexSet, "initWithIndex:") = Id, CULong;
override externalInstanceMethod(#NSIndexSet, "initWithIndexesInRange:") = Id, NSRange;
override externalInstanceMethod(#NSIndexSet, "initWithIndexSet:") = Id, NSIndexSet;
override externalInstanceMethod(#NSIndexSet, "isEqualToIndexSet:") = Bool, NSIndexSet;
override externalInstanceMethod(#NSIndexSet, "count") = CULong;
override externalInstanceMethod(#NSIndexSet, "firstIndex") = CULong;
override externalInstanceMethod(#NSIndexSet, "lastIndex") = CULong;
override externalInstanceMethod(#NSIndexSet, "indexGreaterThanIndex:") = CULong, CULong;
override externalInstanceMethod(#NSIndexSet, "indexLessThanIndex:") = CULong, CULong;
override externalInstanceMethod(#NSIndexSet, "indexGreaterThanOrEqualToIndex:") = CULong, CULong;
override externalInstanceMethod(#NSIndexSet, "indexLessThanOrEqualToIndex:") = CULong, CULong;
override externalInstanceMethod(#NSIndexSet, "getIndexes:maxCount:inIndexRange:") = CULong, Pointer[CULong], CULong, NSRangePointer;
override externalInstanceMethod(#NSIndexSet, "countOfIndexesInRange:") = CULong, NSRange;
override externalInstanceMethod(#NSIndexSet, "containsIndex:") = Bool, CULong;
override externalInstanceMethod(#NSIndexSet, "containsIndexesInRange:") = Bool, NSRange;
override externalInstanceMethod(#NSIndexSet, "containsIndexes:") = Bool, NSIndexSet;
override externalInstanceMethod(#NSIndexSet, "intersectsIndexesInRange:") = Bool, NSRange;
override externalInstanceMethod(#NSIndexSet, "enumerateIndexesUsingBlock:") = Void, UnknownType;
override externalInstanceMethod(#NSIndexSet, "enumerateIndexesWithOptions:usingBlock:") = Void, CULong, UnknownType;
override externalInstanceMethod(#NSIndexSet, "enumerateIndexesInRange:options:usingBlock:") = Void, NSRange, CULong, UnknownType;
override externalInstanceMethod(#NSIndexSet, "indexPassingTest:") = CULong, UnknownType;
override externalInstanceMethod(#NSIndexSet, "indexWithOptions:passingTest:") = CULong, CULong, UnknownType;
override externalInstanceMethod(#NSIndexSet, "indexInRange:options:passingTest:") = CULong, NSRange, CULong, UnknownType;
override externalInstanceMethod(#NSIndexSet, "indexesPassingTest:") = NSIndexSet, UnknownType;
override externalInstanceMethod(#NSIndexSet, "indexesWithOptions:passingTest:") = NSIndexSet, CULong, UnknownType;
override externalInstanceMethod(#NSIndexSet, "indexesInRange:options:passingTest:") = NSIndexSet, NSRange, CULong, UnknownType;

record NSIndexSpecifier = externalClass(NSScriptObjectSpecifier);
override externalInstanceMethod(#NSIndexSpecifier, "initWithContainerClassDescription:containerSpecifier:key:index:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, CLong;
override externalInstanceMethod(#NSIndexSpecifier, "index") = CLong;
override externalInstanceMethod(#NSIndexSpecifier, "setIndex:") = Void, CLong;

record NSInputStream = externalClass(NSStream);
override externalInstanceMethod(#NSInputStream, "read:maxLength:") = CLong, Pointer[CUChar], CULong;
override externalInstanceMethod(#NSInputStream, "getBuffer:length:") = Bool, Pointer[Pointer[CUChar]], Pointer[CULong];
override externalInstanceMethod(#NSInputStream, "hasBytesAvailable") = Bool;
override externalInstanceMethod(#NSInputStream, "initWithData:") = Id, NSData;
override externalInstanceMethod(#NSInputStream, "initWithFileAtPath:") = Id, NSString;
override externalInstanceMethod(#NSInputStream, "initWithURL:") = Id, NSURL;
override externalClassMethod(#NSInputStream, "inputStreamWithData:") = Id, NSData;
override externalClassMethod(#NSInputStream, "inputStreamWithFileAtPath:") = Id, NSString;
override externalClassMethod(#NSInputStream, "inputStreamWithURL:") = Id, NSURL;

record NSInvocation = externalClass(NSObject);
override externalClassMethod(#NSInvocation, "invocationWithMethodSignature:") = NSInvocation, NSMethodSignature;
override externalInstanceMethod(#NSInvocation, "methodSignature") = NSMethodSignature;
override externalInstanceMethod(#NSInvocation, "retainArguments") = Void;
override externalInstanceMethod(#NSInvocation, "argumentsRetained") = Bool;
override externalInstanceMethod(#NSInvocation, "target") = Id;
override externalInstanceMethod(#NSInvocation, "setTarget:") = Void, Id;
override externalInstanceMethod(#NSInvocation, "selector") = SelectorHandle;
override externalInstanceMethod(#NSInvocation, "setSelector:") = Void, SelectorHandle;
override externalInstanceMethod(#NSInvocation, "getReturnValue:") = Void, RawPointer;
override externalInstanceMethod(#NSInvocation, "setReturnValue:") = Void, RawPointer;
override externalInstanceMethod(#NSInvocation, "getArgument:atIndex:") = Void, RawPointer, CLong;
override externalInstanceMethod(#NSInvocation, "setArgument:atIndex:") = Void, RawPointer, CLong;
override externalInstanceMethod(#NSInvocation, "invoke") = Void;
override externalInstanceMethod(#NSInvocation, "invokeWithTarget:") = Void, Id;

record NSInvocationOperation = externalClass(NSOperation);
override externalInstanceMethod(#NSInvocationOperation, "initWithTarget:selector:object:") = Id, Id, SelectorHandle, Id;
override externalInstanceMethod(#NSInvocationOperation, "initWithInvocation:") = Id, NSInvocation;
override externalInstanceMethod(#NSInvocationOperation, "invocation") = NSInvocation;
override externalInstanceMethod(#NSInvocationOperation, "result") = Id;

record NSKeyedArchiver = externalClass(NSCoder);
override externalClassMethod(#NSKeyedArchiver, "archivedDataWithRootObject:") = NSData, Id;
override externalClassMethod(#NSKeyedArchiver, "archiveRootObject:toFile:") = Bool, Id, NSString;
override externalInstanceMethod(#NSKeyedArchiver, "initForWritingWithMutableData:") = Id, NSMutableData;
override externalInstanceMethod(#NSKeyedArchiver, "setDelegate:") = Void, Id;
override externalInstanceMethod(#NSKeyedArchiver, "delegate") = Id;
override externalInstanceMethod(#NSKeyedArchiver, "setOutputFormat:") = Void, CULong;
override externalInstanceMethod(#NSKeyedArchiver, "outputFormat") = CULong;
override externalInstanceMethod(#NSKeyedArchiver, "finishEncoding") = Void;
override externalClassMethod(#NSKeyedArchiver, "setClassName:forClass:") = Void, NSString, Id;
override externalInstanceMethod(#NSKeyedArchiver, "setClassName:forClass:") = Void, NSString, Id;
override externalClassMethod(#NSKeyedArchiver, "classNameForClass:") = NSString, Id;
override externalInstanceMethod(#NSKeyedArchiver, "classNameForClass:") = NSString, Id;
override externalInstanceMethod(#NSKeyedArchiver, "encodeObject:forKey:") = Void, Id, NSString;
override externalInstanceMethod(#NSKeyedArchiver, "encodeConditionalObject:forKey:") = Void, Id, NSString;
override externalInstanceMethod(#NSKeyedArchiver, "encodeBool:forKey:") = Void, Bool, NSString;
override externalInstanceMethod(#NSKeyedArchiver, "encodeInt:forKey:") = Void, Int, NSString;
override externalInstanceMethod(#NSKeyedArchiver, "encodeInt32:forKey:") = Void, Int, NSString;
override externalInstanceMethod(#NSKeyedArchiver, "encodeInt64:forKey:") = Void, Int64, NSString;
override externalInstanceMethod(#NSKeyedArchiver, "encodeFloat:forKey:") = Void, Float, NSString;
override externalInstanceMethod(#NSKeyedArchiver, "encodeDouble:forKey:") = Void, Double, NSString;
override externalInstanceMethod(#NSKeyedArchiver, "encodeBytes:length:forKey:") = Void, Pointer[CUChar], CULong, NSString;

record NSKeyedUnarchiver = externalClass(NSCoder);
override externalClassMethod(#NSKeyedUnarchiver, "unarchiveObjectWithData:") = Id, NSData;
override externalClassMethod(#NSKeyedUnarchiver, "unarchiveObjectWithFile:") = Id, NSString;
override externalInstanceMethod(#NSKeyedUnarchiver, "initForReadingWithData:") = Id, NSData;
override externalInstanceMethod(#NSKeyedUnarchiver, "setDelegate:") = Void, Id;
override externalInstanceMethod(#NSKeyedUnarchiver, "delegate") = Id;
override externalInstanceMethod(#NSKeyedUnarchiver, "finishDecoding") = Void;
override externalClassMethod(#NSKeyedUnarchiver, "setClass:forClassName:") = Void, Id, NSString;
override externalInstanceMethod(#NSKeyedUnarchiver, "setClass:forClassName:") = Void, Id, NSString;
override externalClassMethod(#NSKeyedUnarchiver, "classForClassName:") = Id, NSString;
override externalInstanceMethod(#NSKeyedUnarchiver, "classForClassName:") = Id, NSString;
override externalInstanceMethod(#NSKeyedUnarchiver, "containsValueForKey:") = Bool, NSString;
override externalInstanceMethod(#NSKeyedUnarchiver, "decodeObjectForKey:") = Id, NSString;
override externalInstanceMethod(#NSKeyedUnarchiver, "decodeBoolForKey:") = Bool, NSString;
override externalInstanceMethod(#NSKeyedUnarchiver, "decodeIntForKey:") = Int, NSString;
override externalInstanceMethod(#NSKeyedUnarchiver, "decodeInt32ForKey:") = Int, NSString;
override externalInstanceMethod(#NSKeyedUnarchiver, "decodeInt64ForKey:") = Int64, NSString;
override externalInstanceMethod(#NSKeyedUnarchiver, "decodeFloatForKey:") = Float, NSString;
override externalInstanceMethod(#NSKeyedUnarchiver, "decodeDoubleForKey:") = Double, NSString;
override externalInstanceMethod(#NSKeyedUnarchiver, "decodeBytesForKey:returnedLength:") = Pointer[CUChar], NSString, Pointer[CULong];

record NSLocale = externalClass(NSObject);
override externalInstanceMethod(#NSLocale, "copyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSLocale, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSLocale, "initWithCoder:") = Id, NSCoder;
override externalInstanceMethod(#NSLocale, "objectForKey:") = Id, Id;
override externalInstanceMethod(#NSLocale, "displayNameForKey:value:") = NSString, Id, Id;
override externalInstanceMethod(#NSLocale, "localeIdentifier") = NSString;
override externalClassMethod(#NSLocale, "systemLocale") = Id;
override externalClassMethod(#NSLocale, "currentLocale") = Id;
override externalClassMethod(#NSLocale, "autoupdatingCurrentLocale") = Id;
override externalInstanceMethod(#NSLocale, "initWithLocaleIdentifier:") = Id, NSString;
override externalClassMethod(#NSLocale, "availableLocaleIdentifiers") = NSArray;
override externalClassMethod(#NSLocale, "ISOLanguageCodes") = NSArray;
override externalClassMethod(#NSLocale, "ISOCountryCodes") = NSArray;
override externalClassMethod(#NSLocale, "ISOCurrencyCodes") = NSArray;
override externalClassMethod(#NSLocale, "commonISOCurrencyCodes") = NSArray;
override externalClassMethod(#NSLocale, "preferredLanguages") = NSArray;
override externalClassMethod(#NSLocale, "componentsFromLocaleIdentifier:") = NSDictionary, NSString;
override externalClassMethod(#NSLocale, "localeIdentifierFromComponents:") = NSString, NSDictionary;
override externalClassMethod(#NSLocale, "canonicalLocaleIdentifierFromString:") = NSString, NSString;
override externalClassMethod(#NSLocale, "canonicalLanguageIdentifierFromString:") = NSString, NSString;
override externalClassMethod(#NSLocale, "localeIdentifierFromWindowsLocaleCode:") = NSString, UInt;
override externalClassMethod(#NSLocale, "windowsLocaleCodeFromLocaleIdentifier:") = UInt, NSString;
override externalClassMethod(#NSLocale, "characterDirectionForLanguage:") = CULong, NSString;
override externalClassMethod(#NSLocale, "lineDirectionForLanguage:") = CULong, NSString;

record NSLock = externalClass(NSObject);
override externalInstanceMethod(#NSLock, "lock") = Void;
override externalInstanceMethod(#NSLock, "unlock") = Void;
override externalInstanceMethod(#NSLock, "tryLock") = Bool;
override externalInstanceMethod(#NSLock, "lockBeforeDate:") = Bool, NSDate;
override externalInstanceMethod(#NSLock, "setName:") = Void, NSString;
override externalInstanceMethod(#NSLock, "name") = NSString;

record NSLogicalTest = externalClass(NSScriptWhoseTest);
override externalInstanceMethod(#NSLogicalTest, "initAndTestWithTests:") = Id, NSArray;
override externalInstanceMethod(#NSLogicalTest, "initOrTestWithTests:") = Id, NSArray;
override externalInstanceMethod(#NSLogicalTest, "initNotTestWithTest:") = Id, NSScriptWhoseTest;

record NSMachBootstrapServer = externalClass(NSPortNameServer);
override externalClassMethod(#NSMachBootstrapServer, "sharedInstance") = Id;
override externalInstanceMethod(#NSMachBootstrapServer, "portForName:") = NSPort, NSString;
override externalInstanceMethod(#NSMachBootstrapServer, "portForName:host:") = NSPort, NSString, NSString;
override externalInstanceMethod(#NSMachBootstrapServer, "registerPort:name:") = Bool, NSPort, NSString;
override externalInstanceMethod(#NSMachBootstrapServer, "servicePortWithName:") = NSPort, NSString;

record NSMachPort = externalClass(NSPort);
override externalClassMethod(#NSMachPort, "portWithMachPort:") = NSPort, UInt;
override externalInstanceMethod(#NSMachPort, "initWithMachPort:") = Id, UInt;
override externalInstanceMethod(#NSMachPort, "setDelegate:") = Void, Id;
override externalInstanceMethod(#NSMachPort, "delegate") = Id;
override externalClassMethod(#NSMachPort, "portWithMachPort:options:") = NSPort, UInt, CULong;
override externalInstanceMethod(#NSMachPort, "initWithMachPort:options:") = Id, UInt, CULong;
override externalInstanceMethod(#NSMachPort, "machPort") = UInt;
override externalInstanceMethod(#NSMachPort, "scheduleInRunLoop:forMode:") = Void, NSRunLoop, NSString;
override externalInstanceMethod(#NSMachPort, "removeFromRunLoop:forMode:") = Void, NSRunLoop, NSString;

record NSMapTable = externalClass(NSObject);
override externalInstanceMethod(#NSMapTable, "copyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSMapTable, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSMapTable, "initWithCoder:") = Id, NSCoder;
override externalInstanceMethod(#NSMapTable, "countByEnumeratingWithState:objects:count:") = CULong, Pointer[NSFastEnumerationState], Pointer[Id], CULong;
override externalInstanceMethod(#NSMapTable, "initWithKeyOptions:valueOptions:capacity:") = Id, CULong, CULong, CULong;
override externalInstanceMethod(#NSMapTable, "initWithKeyPointerFunctions:valuePointerFunctions:capacity:") = Id, NSPointerFunctions, NSPointerFunctions, CULong;
override externalClassMethod(#NSMapTable, "mapTableWithKeyOptions:valueOptions:") = Id, CULong, CULong;
override externalClassMethod(#NSMapTable, "mapTableWithStrongToStrongObjects") = Id;
override externalClassMethod(#NSMapTable, "mapTableWithWeakToStrongObjects") = Id;
override externalClassMethod(#NSMapTable, "mapTableWithStrongToWeakObjects") = Id;
override externalClassMethod(#NSMapTable, "mapTableWithWeakToWeakObjects") = Id;
override externalInstanceMethod(#NSMapTable, "keyPointerFunctions") = NSPointerFunctions;
override externalInstanceMethod(#NSMapTable, "valuePointerFunctions") = NSPointerFunctions;
override externalInstanceMethod(#NSMapTable, "objectForKey:") = Id, Id;
override externalInstanceMethod(#NSMapTable, "removeObjectForKey:") = Void, Id;
override externalInstanceMethod(#NSMapTable, "setObject:forKey:") = Void, Id, Id;
override externalInstanceMethod(#NSMapTable, "count") = CULong;
override externalInstanceMethod(#NSMapTable, "keyEnumerator") = NSEnumerator;
override externalInstanceMethod(#NSMapTable, "objectEnumerator") = NSEnumerator;
override externalInstanceMethod(#NSMapTable, "removeAllObjects") = Void;
override externalInstanceMethod(#NSMapTable, "dictionaryRepresentation") = NSDictionary;

record NSMessagePort = externalClass(NSPort);

record NSMessagePortNameServer = externalClass(NSPortNameServer);
override externalClassMethod(#NSMessagePortNameServer, "sharedInstance") = Id;
override externalInstanceMethod(#NSMessagePortNameServer, "portForName:") = NSPort, NSString;
override externalInstanceMethod(#NSMessagePortNameServer, "portForName:host:") = NSPort, NSString, NSString;

record NSMetadataItem = externalClass(NSObject);
override externalInstanceMethod(#NSMetadataItem, "valueForAttribute:") = Id, NSString;
override externalInstanceMethod(#NSMetadataItem, "valuesForAttributes:") = NSDictionary, NSArray;
override externalInstanceMethod(#NSMetadataItem, "attributes") = NSArray;

record NSMetadataQuery = externalClass(NSObject);
override externalInstanceMethod(#NSMetadataQuery, "init") = Id;
override externalInstanceMethod(#NSMetadataQuery, "delegate") = Id;
override externalInstanceMethod(#NSMetadataQuery, "setDelegate:") = Void, Id;
override externalInstanceMethod(#NSMetadataQuery, "predicate") = NSPredicate;
override externalInstanceMethod(#NSMetadataQuery, "setPredicate:") = Void, NSPredicate;
override externalInstanceMethod(#NSMetadataQuery, "sortDescriptors") = NSArray;
override externalInstanceMethod(#NSMetadataQuery, "setSortDescriptors:") = Void, NSArray;
override externalInstanceMethod(#NSMetadataQuery, "valueListAttributes") = NSArray;
override externalInstanceMethod(#NSMetadataQuery, "setValueListAttributes:") = Void, NSArray;
override externalInstanceMethod(#NSMetadataQuery, "groupingAttributes") = NSArray;
override externalInstanceMethod(#NSMetadataQuery, "setGroupingAttributes:") = Void, NSArray;
override externalInstanceMethod(#NSMetadataQuery, "notificationBatchingInterval") = Double;
override externalInstanceMethod(#NSMetadataQuery, "setNotificationBatchingInterval:") = Void, Double;
override externalInstanceMethod(#NSMetadataQuery, "searchScopes") = NSArray;
override externalInstanceMethod(#NSMetadataQuery, "setSearchScopes:") = Void, NSArray;
override externalInstanceMethod(#NSMetadataQuery, "startQuery") = Bool;
override externalInstanceMethod(#NSMetadataQuery, "stopQuery") = Void;
override externalInstanceMethod(#NSMetadataQuery, "isStarted") = Bool;
override externalInstanceMethod(#NSMetadataQuery, "isGathering") = Bool;
override externalInstanceMethod(#NSMetadataQuery, "isStopped") = Bool;
override externalInstanceMethod(#NSMetadataQuery, "disableUpdates") = Void;
override externalInstanceMethod(#NSMetadataQuery, "enableUpdates") = Void;
override externalInstanceMethod(#NSMetadataQuery, "resultCount") = CULong;
override externalInstanceMethod(#NSMetadataQuery, "resultAtIndex:") = Id, CULong;
override externalInstanceMethod(#NSMetadataQuery, "results") = NSArray;
override externalInstanceMethod(#NSMetadataQuery, "indexOfResult:") = CULong, Id;
override externalInstanceMethod(#NSMetadataQuery, "valueLists") = NSDictionary;
override externalInstanceMethod(#NSMetadataQuery, "groupedResults") = NSArray;
override externalInstanceMethod(#NSMetadataQuery, "valueOfAttribute:forResultAtIndex:") = Id, NSString, CULong;

record NSMetadataQueryAttributeValueTuple = externalClass(NSObject);
override externalInstanceMethod(#NSMetadataQueryAttributeValueTuple, "attribute") = NSString;
override externalInstanceMethod(#NSMetadataQueryAttributeValueTuple, "value") = Id;
override externalInstanceMethod(#NSMetadataQueryAttributeValueTuple, "count") = CULong;

record NSMetadataQueryResultGroup = externalClass(NSObject);
override externalInstanceMethod(#NSMetadataQueryResultGroup, "attribute") = NSString;
override externalInstanceMethod(#NSMetadataQueryResultGroup, "value") = Id;
override externalInstanceMethod(#NSMetadataQueryResultGroup, "subgroups") = NSArray;
override externalInstanceMethod(#NSMetadataQueryResultGroup, "resultCount") = CULong;
override externalInstanceMethod(#NSMetadataQueryResultGroup, "resultAtIndex:") = Id, CULong;
override externalInstanceMethod(#NSMetadataQueryResultGroup, "results") = NSArray;

record NSMethodSignature = externalClass(NSObject);
override externalClassMethod(#NSMethodSignature, "signatureWithObjCTypes:") = NSMethodSignature, Pointer[CChar];
override externalInstanceMethod(#NSMethodSignature, "numberOfArguments") = CULong;
override externalInstanceMethod(#NSMethodSignature, "getArgumentTypeAtIndex:") = Pointer[CChar], CULong;
override externalInstanceMethod(#NSMethodSignature, "frameLength") = CULong;
override externalInstanceMethod(#NSMethodSignature, "isOneway") = Bool;
override externalInstanceMethod(#NSMethodSignature, "methodReturnType") = Pointer[CChar];
override externalInstanceMethod(#NSMethodSignature, "methodReturnLength") = CULong;

record NSMiddleSpecifier = externalClass(NSScriptObjectSpecifier);

record NSMoveCommand = externalClass(NSScriptCommand);
override externalInstanceMethod(#NSMoveCommand, "setReceiversSpecifier:") = Void, NSScriptObjectSpecifier;
override externalInstanceMethod(#NSMoveCommand, "keySpecifier") = NSScriptObjectSpecifier;

record NSMutableArray = externalClass(NSArray);
override externalInstanceMethod(#NSMutableArray, "addObject:") = Void, Id;
override externalInstanceMethod(#NSMutableArray, "insertObject:atIndex:") = Void, Id, CULong;
override externalInstanceMethod(#NSMutableArray, "removeLastObject") = Void;
override externalInstanceMethod(#NSMutableArray, "removeObjectAtIndex:") = Void, CULong;
override externalInstanceMethod(#NSMutableArray, "replaceObjectAtIndex:withObject:") = Void, CULong, Id;
override externalInstanceMethod(#NSMutableArray, "addObjectsFromArray:") = Void, NSArray;
override externalInstanceMethod(#NSMutableArray, "exchangeObjectAtIndex:withObjectAtIndex:") = Void, CULong, CULong;
override externalInstanceMethod(#NSMutableArray, "removeAllObjects") = Void;
override externalInstanceMethod(#NSMutableArray, "removeObject:inRange:") = Void, Id, NSRange;
override externalInstanceMethod(#NSMutableArray, "removeObject:") = Void, Id;
override externalInstanceMethod(#NSMutableArray, "removeObjectIdenticalTo:inRange:") = Void, Id, NSRange;
override externalInstanceMethod(#NSMutableArray, "removeObjectIdenticalTo:") = Void, Id;
override externalInstanceMethod(#NSMutableArray, "removeObjectsFromIndices:numIndices:") = Void, Pointer[CULong], CULong;
override externalInstanceMethod(#NSMutableArray, "removeObjectsInArray:") = Void, NSArray;
override externalInstanceMethod(#NSMutableArray, "removeObjectsInRange:") = Void, NSRange;
override externalInstanceMethod(#NSMutableArray, "replaceObjectsInRange:withObjectsFromArray:range:") = Void, NSRange, NSArray, NSRange;
override externalInstanceMethod(#NSMutableArray, "replaceObjectsInRange:withObjectsFromArray:") = Void, NSRange, NSArray;
override externalInstanceMethod(#NSMutableArray, "setArray:") = Void, NSArray;
override externalInstanceMethod(#NSMutableArray, "sortUsingFunction:context:") = Void, CCodePointer[[Id,Id,RawPointer],[CLong]], RawPointer;
override externalInstanceMethod(#NSMutableArray, "sortUsingSelector:") = Void, SelectorHandle;
override externalInstanceMethod(#NSMutableArray, "insertObjects:atIndexes:") = Void, NSArray, NSIndexSet;
override externalInstanceMethod(#NSMutableArray, "removeObjectsAtIndexes:") = Void, NSIndexSet;
override externalInstanceMethod(#NSMutableArray, "replaceObjectsAtIndexes:withObjects:") = Void, NSIndexSet, NSArray;
override externalInstanceMethod(#NSMutableArray, "sortUsingComparator:") = Void, NSComparator;
override externalInstanceMethod(#NSMutableArray, "sortWithOptions:usingComparator:") = Void, CULong, NSComparator;
override externalClassMethod(#NSMutableArray, "arrayWithCapacity:") = Id, CULong;
override externalInstanceMethod(#NSMutableArray, "initWithCapacity:") = Id, CULong;
override externalInstanceMethod(#NSMutableArray, "sortUsingDescriptors:") = Void, NSArray;
override externalInstanceMethod(#NSMutableArray, "filterUsingPredicate:") = Void, NSPredicate;

record NSMutableAttributedString = externalClass(NSAttributedString);
override externalInstanceMethod(#NSMutableAttributedString, "replaceCharactersInRange:withString:") = Void, NSRange, NSString;
override externalInstanceMethod(#NSMutableAttributedString, "setAttributes:range:") = Void, NSDictionary, NSRange;
override externalInstanceMethod(#NSMutableAttributedString, "mutableString") = NSMutableString;
override externalInstanceMethod(#NSMutableAttributedString, "addAttribute:value:range:") = Void, NSString, Id, NSRange;
override externalInstanceMethod(#NSMutableAttributedString, "addAttributes:range:") = Void, NSDictionary, NSRange;
override externalInstanceMethod(#NSMutableAttributedString, "removeAttribute:range:") = Void, NSString, NSRange;
override externalInstanceMethod(#NSMutableAttributedString, "replaceCharactersInRange:withAttributedString:") = Void, NSRange, NSAttributedString;
override externalInstanceMethod(#NSMutableAttributedString, "insertAttributedString:atIndex:") = Void, NSAttributedString, CULong;
override externalInstanceMethod(#NSMutableAttributedString, "appendAttributedString:") = Void, NSAttributedString;
override externalInstanceMethod(#NSMutableAttributedString, "deleteCharactersInRange:") = Void, NSRange;
override externalInstanceMethod(#NSMutableAttributedString, "setAttributedString:") = Void, NSAttributedString;
override externalInstanceMethod(#NSMutableAttributedString, "beginEditing") = Void;
override externalInstanceMethod(#NSMutableAttributedString, "endEditing") = Void;

record NSMutableCharacterSet = externalClass(NSCharacterSet);
override externalInstanceMethod(#NSMutableCharacterSet, "copyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSMutableCharacterSet, "mutableCopyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSMutableCharacterSet, "addCharactersInRange:") = Void, NSRange;
override externalInstanceMethod(#NSMutableCharacterSet, "removeCharactersInRange:") = Void, NSRange;
override externalInstanceMethod(#NSMutableCharacterSet, "addCharactersInString:") = Void, NSString;
override externalInstanceMethod(#NSMutableCharacterSet, "removeCharactersInString:") = Void, NSString;
override externalInstanceMethod(#NSMutableCharacterSet, "formUnionWithCharacterSet:") = Void, NSCharacterSet;
override externalInstanceMethod(#NSMutableCharacterSet, "formIntersectionWithCharacterSet:") = Void, NSCharacterSet;
override externalInstanceMethod(#NSMutableCharacterSet, "invert") = Void;

record NSMutableData = externalClass(NSData);
override externalInstanceMethod(#NSMutableData, "mutableBytes") = RawPointer;
override externalInstanceMethod(#NSMutableData, "setLength:") = Void, CULong;
override externalInstanceMethod(#NSMutableData, "appendBytes:length:") = Void, RawPointer, CULong;
override externalInstanceMethod(#NSMutableData, "appendData:") = Void, NSData;
override externalInstanceMethod(#NSMutableData, "increaseLengthBy:") = Void, CULong;
override externalInstanceMethod(#NSMutableData, "replaceBytesInRange:withBytes:") = Void, NSRange, RawPointer;
override externalInstanceMethod(#NSMutableData, "resetBytesInRange:") = Void, NSRange;
override externalInstanceMethod(#NSMutableData, "setData:") = Void, NSData;
override externalInstanceMethod(#NSMutableData, "replaceBytesInRange:withBytes:length:") = Void, NSRange, RawPointer, CULong;
override externalClassMethod(#NSMutableData, "dataWithCapacity:") = Id, CULong;
override externalClassMethod(#NSMutableData, "dataWithLength:") = Id, CULong;
override externalInstanceMethod(#NSMutableData, "initWithCapacity:") = Id, CULong;
override externalInstanceMethod(#NSMutableData, "initWithLength:") = Id, CULong;

record NSMutableDictionary = externalClass(NSDictionary);
override externalInstanceMethod(#NSMutableDictionary, "removeObjectForKey:") = Void, Id;
override externalInstanceMethod(#NSMutableDictionary, "setObject:forKey:") = Void, Id, Id;
override externalInstanceMethod(#NSMutableDictionary, "addEntriesFromDictionary:") = Void, NSDictionary;
override externalInstanceMethod(#NSMutableDictionary, "removeAllObjects") = Void;
override externalInstanceMethod(#NSMutableDictionary, "removeObjectsForKeys:") = Void, NSArray;
override externalInstanceMethod(#NSMutableDictionary, "setDictionary:") = Void, NSDictionary;
override externalClassMethod(#NSMutableDictionary, "dictionaryWithCapacity:") = Id, CULong;
override externalInstanceMethod(#NSMutableDictionary, "initWithCapacity:") = Id, CULong;
override externalInstanceMethod(#NSMutableDictionary, "setValue:forKey:") = Void, Id, NSString;

record NSMutableIndexSet = externalClass(NSIndexSet);
override externalInstanceMethod(#NSMutableIndexSet, "addIndexes:") = Void, NSIndexSet;
override externalInstanceMethod(#NSMutableIndexSet, "removeIndexes:") = Void, NSIndexSet;
override externalInstanceMethod(#NSMutableIndexSet, "removeAllIndexes") = Void;
override externalInstanceMethod(#NSMutableIndexSet, "addIndex:") = Void, CULong;
override externalInstanceMethod(#NSMutableIndexSet, "removeIndex:") = Void, CULong;
override externalInstanceMethod(#NSMutableIndexSet, "addIndexesInRange:") = Void, NSRange;
override externalInstanceMethod(#NSMutableIndexSet, "removeIndexesInRange:") = Void, NSRange;
override externalInstanceMethod(#NSMutableIndexSet, "shiftIndexesStartingAtIndex:by:") = Void, CULong, CLong;

record NSMutableSet = externalClass(NSSet);
override externalInstanceMethod(#NSMutableSet, "addObject:") = Void, Id;
override externalInstanceMethod(#NSMutableSet, "removeObject:") = Void, Id;
override externalInstanceMethod(#NSMutableSet, "addObjectsFromArray:") = Void, NSArray;
override externalInstanceMethod(#NSMutableSet, "intersectSet:") = Void, NSSet;
override externalInstanceMethod(#NSMutableSet, "minusSet:") = Void, NSSet;
override externalInstanceMethod(#NSMutableSet, "removeAllObjects") = Void;
override externalInstanceMethod(#NSMutableSet, "unionSet:") = Void, NSSet;
override externalInstanceMethod(#NSMutableSet, "setSet:") = Void, NSSet;
override externalClassMethod(#NSMutableSet, "setWithCapacity:") = Id, CULong;
override externalInstanceMethod(#NSMutableSet, "initWithCapacity:") = Id, CULong;
override externalInstanceMethod(#NSMutableSet, "filterUsingPredicate:") = Void, NSPredicate;

record NSMutableString = externalClass(NSString);
override externalInstanceMethod(#NSMutableString, "replaceCharactersInRange:withString:") = Void, NSRange, NSString;
override externalInstanceMethod(#NSMutableString, "insertString:atIndex:") = Void, NSString, CULong;
override externalInstanceMethod(#NSMutableString, "deleteCharactersInRange:") = Void, NSRange;
override externalInstanceMethod(#NSMutableString, "appendString:") = Void, NSString;
override externalVarargInstanceMethod(#NSMutableString, "appendFormat:") = Void, NSString;
override externalInstanceMethod(#NSMutableString, "setString:") = Void, NSString;
override externalInstanceMethod(#NSMutableString, "initWithCapacity:") = Id, CULong;
override externalClassMethod(#NSMutableString, "stringWithCapacity:") = Id, CULong;
override externalInstanceMethod(#NSMutableString, "replaceOccurrencesOfString:withString:options:range:") = CULong, NSString, NSString, CULong, NSRange;

record NSMutableURLRequest = externalClass(NSURLRequest);
override externalInstanceMethod(#NSMutableURLRequest, "setURL:") = Void, NSURL;
override externalInstanceMethod(#NSMutableURLRequest, "setCachePolicy:") = Void, CULong;
override externalInstanceMethod(#NSMutableURLRequest, "setTimeoutInterval:") = Void, Double;
override externalInstanceMethod(#NSMutableURLRequest, "setMainDocumentURL:") = Void, NSURL;
override externalInstanceMethod(#NSMutableURLRequest, "setHTTPMethod:") = Void, NSString;
override externalInstanceMethod(#NSMutableURLRequest, "setAllHTTPHeaderFields:") = Void, NSDictionary;
override externalInstanceMethod(#NSMutableURLRequest, "setValue:forHTTPHeaderField:") = Void, NSString, NSString;
override externalInstanceMethod(#NSMutableURLRequest, "addValue:forHTTPHeaderField:") = Void, NSString, NSString;
override externalInstanceMethod(#NSMutableURLRequest, "setHTTPBody:") = Void, NSData;
override externalInstanceMethod(#NSMutableURLRequest, "setHTTPBodyStream:") = Void, NSInputStream;
override externalInstanceMethod(#NSMutableURLRequest, "setHTTPShouldHandleCookies:") = Void, Bool;

record NSNameSpecifier = externalClass(NSScriptObjectSpecifier);
override externalInstanceMethod(#NSNameSpecifier, "initWithContainerClassDescription:containerSpecifier:key:name:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, NSString;
override externalInstanceMethod(#NSNameSpecifier, "name") = NSString;
override externalInstanceMethod(#NSNameSpecifier, "setName:") = Void, NSString;

record NSNetService = externalClass(NSObject);
override externalInstanceMethod(#NSNetService, "initWithDomain:type:name:port:") = Id, NSString, NSString, NSString, Int;
override externalInstanceMethod(#NSNetService, "initWithDomain:type:name:") = Id, NSString, NSString, NSString;
override externalInstanceMethod(#NSNetService, "delegate") = Id;
override externalInstanceMethod(#NSNetService, "setDelegate:") = Void, Id;
override externalInstanceMethod(#NSNetService, "scheduleInRunLoop:forMode:") = Void, NSRunLoop, NSString;
override externalInstanceMethod(#NSNetService, "removeFromRunLoop:forMode:") = Void, NSRunLoop, NSString;
override externalInstanceMethod(#NSNetService, "domain") = NSString;
override externalInstanceMethod(#NSNetService, "type") = NSString;
override externalInstanceMethod(#NSNetService, "name") = NSString;
override externalInstanceMethod(#NSNetService, "addresses") = NSArray;
override externalInstanceMethod(#NSNetService, "port") = CLong;
override externalInstanceMethod(#NSNetService, "publish") = Void;
override externalInstanceMethod(#NSNetService, "publishWithOptions:") = Void, CULong;
override externalInstanceMethod(#NSNetService, "resolve") = Void;
override externalInstanceMethod(#NSNetService, "stop") = Void;
override externalClassMethod(#NSNetService, "dictionaryFromTXTRecordData:") = NSDictionary, NSData;
override externalClassMethod(#NSNetService, "dataFromTXTRecordDictionary:") = NSData, NSDictionary;
override externalInstanceMethod(#NSNetService, "hostName") = NSString;
override externalInstanceMethod(#NSNetService, "resolveWithTimeout:") = Void, Double;
override externalInstanceMethod(#NSNetService, "getInputStream:outputStream:") = Bool, Pointer[NSInputStream], Pointer[NSOutputStream];
override externalInstanceMethod(#NSNetService, "setTXTRecordData:") = Bool, NSData;
override externalInstanceMethod(#NSNetService, "TXTRecordData") = NSData;
override externalInstanceMethod(#NSNetService, "startMonitoring") = Void;
override externalInstanceMethod(#NSNetService, "stopMonitoring") = Void;
override externalInstanceMethod(#NSNetService, "protocolSpecificInformation") = NSString;
override externalInstanceMethod(#NSNetService, "setProtocolSpecificInformation:") = Void, NSString;

record NSNetServiceBrowser = externalClass(NSObject);
override externalInstanceMethod(#NSNetServiceBrowser, "init") = Id;
override externalInstanceMethod(#NSNetServiceBrowser, "delegate") = Id;
override externalInstanceMethod(#NSNetServiceBrowser, "setDelegate:") = Void, Id;
override externalInstanceMethod(#NSNetServiceBrowser, "scheduleInRunLoop:forMode:") = Void, NSRunLoop, NSString;
override externalInstanceMethod(#NSNetServiceBrowser, "removeFromRunLoop:forMode:") = Void, NSRunLoop, NSString;
override externalInstanceMethod(#NSNetServiceBrowser, "searchForBrowsableDomains") = Void;
override externalInstanceMethod(#NSNetServiceBrowser, "searchForRegistrationDomains") = Void;
override externalInstanceMethod(#NSNetServiceBrowser, "searchForServicesOfType:inDomain:") = Void, NSString, NSString;
override externalInstanceMethod(#NSNetServiceBrowser, "stop") = Void;
override externalInstanceMethod(#NSNetServiceBrowser, "searchForAllDomains") = Void;

record NSNotification = externalClass(NSObject);
override externalInstanceMethod(#NSNotification, "copyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSNotification, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSNotification, "initWithCoder:") = Id, NSCoder;
override externalInstanceMethod(#NSNotification, "name") = NSString;
override externalInstanceMethod(#NSNotification, "object") = Id;
override externalInstanceMethod(#NSNotification, "userInfo") = NSDictionary;
override externalClassMethod(#NSNotification, "notificationWithName:object:") = Id, NSString, Id;
override externalClassMethod(#NSNotification, "notificationWithName:object:userInfo:") = Id, NSString, Id, NSDictionary;

record NSNotificationCenter = externalClass(NSObject);
override externalClassMethod(#NSNotificationCenter, "defaultCenter") = Id;
override externalInstanceMethod(#NSNotificationCenter, "addObserver:selector:name:object:") = Void, Id, SelectorHandle, NSString, Id;
override externalInstanceMethod(#NSNotificationCenter, "postNotification:") = Void, NSNotification;
override externalInstanceMethod(#NSNotificationCenter, "postNotificationName:object:") = Void, NSString, Id;
override externalInstanceMethod(#NSNotificationCenter, "postNotificationName:object:userInfo:") = Void, NSString, Id, NSDictionary;
override externalInstanceMethod(#NSNotificationCenter, "removeObserver:") = Void, Id;
override externalInstanceMethod(#NSNotificationCenter, "removeObserver:name:object:") = Void, Id, NSString, Id;
override externalInstanceMethod(#NSNotificationCenter, "addObserverForName:object:queue:usingBlock:") = Id, NSString, Id, NSOperationQueue, UnknownType;

record NSNotificationQueue = externalClass(NSObject);
override externalClassMethod(#NSNotificationQueue, "defaultQueue") = Id;
override externalInstanceMethod(#NSNotificationQueue, "initWithNotificationCenter:") = Id, NSNotificationCenter;
override externalInstanceMethod(#NSNotificationQueue, "enqueueNotification:postingStyle:") = Void, NSNotification, CULong;
override externalInstanceMethod(#NSNotificationQueue, "enqueueNotification:postingStyle:coalesceMask:forModes:") = Void, NSNotification, CULong, CULong, NSArray;
override externalInstanceMethod(#NSNotificationQueue, "dequeueNotificationsMatching:coalesceMask:") = Void, NSNotification, CULong;

record NSNull = externalClass(NSObject);
override externalInstanceMethod(#NSNull, "copyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSNull, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSNull, "initWithCoder:") = Id, NSCoder;
override externalClassMethod(#NSNull, "null") = NSNull;

record NSNumber = externalClass(NSValue);
override externalInstanceMethod(#NSNumber, "charValue") = CChar;
override externalInstanceMethod(#NSNumber, "unsignedCharValue") = CUChar;
override externalInstanceMethod(#NSNumber, "shortValue") = Short;
override externalInstanceMethod(#NSNumber, "unsignedShortValue") = UShort;
override externalInstanceMethod(#NSNumber, "intValue") = Int;
override externalInstanceMethod(#NSNumber, "unsignedIntValue") = UInt;
override externalInstanceMethod(#NSNumber, "longValue") = CLong;
override externalInstanceMethod(#NSNumber, "unsignedLongValue") = CULong;
override externalInstanceMethod(#NSNumber, "longLongValue") = Int64;
override externalInstanceMethod(#NSNumber, "unsignedLongLongValue") = UInt64;
override externalInstanceMethod(#NSNumber, "floatValue") = Float;
override externalInstanceMethod(#NSNumber, "doubleValue") = Double;
override externalInstanceMethod(#NSNumber, "boolValue") = Bool;
override externalInstanceMethod(#NSNumber, "integerValue") = CLong;
override externalInstanceMethod(#NSNumber, "unsignedIntegerValue") = CULong;
override externalInstanceMethod(#NSNumber, "stringValue") = NSString;
override externalInstanceMethod(#NSNumber, "compare:") = CLong, NSNumber;
override externalInstanceMethod(#NSNumber, "isEqualToNumber:") = Bool, NSNumber;
override externalInstanceMethod(#NSNumber, "descriptionWithLocale:") = NSString, Id;
override externalInstanceMethod(#NSNumber, "initWithChar:") = Id, CChar;
override externalInstanceMethod(#NSNumber, "initWithUnsignedChar:") = Id, CUChar;
override externalInstanceMethod(#NSNumber, "initWithShort:") = Id, Short;
override externalInstanceMethod(#NSNumber, "initWithUnsignedShort:") = Id, UShort;
override externalInstanceMethod(#NSNumber, "initWithInt:") = Id, Int;
override externalInstanceMethod(#NSNumber, "initWithUnsignedInt:") = Id, UInt;
override externalInstanceMethod(#NSNumber, "initWithLong:") = Id, CLong;
override externalInstanceMethod(#NSNumber, "initWithUnsignedLong:") = Id, CULong;
override externalInstanceMethod(#NSNumber, "initWithLongLong:") = Id, Int64;
override externalInstanceMethod(#NSNumber, "initWithUnsignedLongLong:") = Id, UInt64;
override externalInstanceMethod(#NSNumber, "initWithFloat:") = Id, Float;
override externalInstanceMethod(#NSNumber, "initWithDouble:") = Id, Double;
override externalInstanceMethod(#NSNumber, "initWithBool:") = Id, Bool;
override externalInstanceMethod(#NSNumber, "initWithInteger:") = Id, CLong;
override externalInstanceMethod(#NSNumber, "initWithUnsignedInteger:") = Id, CULong;
override externalClassMethod(#NSNumber, "numberWithChar:") = NSNumber, CChar;
override externalClassMethod(#NSNumber, "numberWithUnsignedChar:") = NSNumber, CUChar;
override externalClassMethod(#NSNumber, "numberWithShort:") = NSNumber, Short;
override externalClassMethod(#NSNumber, "numberWithUnsignedShort:") = NSNumber, UShort;
override externalClassMethod(#NSNumber, "numberWithInt:") = NSNumber, Int;
override externalClassMethod(#NSNumber, "numberWithUnsignedInt:") = NSNumber, UInt;
override externalClassMethod(#NSNumber, "numberWithLong:") = NSNumber, CLong;
override externalClassMethod(#NSNumber, "numberWithUnsignedLong:") = NSNumber, CULong;
override externalClassMethod(#NSNumber, "numberWithLongLong:") = NSNumber, Int64;
override externalClassMethod(#NSNumber, "numberWithUnsignedLongLong:") = NSNumber, UInt64;
override externalClassMethod(#NSNumber, "numberWithFloat:") = NSNumber, Float;
override externalClassMethod(#NSNumber, "numberWithDouble:") = NSNumber, Double;
override externalClassMethod(#NSNumber, "numberWithBool:") = NSNumber, Bool;
override externalClassMethod(#NSNumber, "numberWithInteger:") = NSNumber, CLong;
override externalClassMethod(#NSNumber, "numberWithUnsignedInteger:") = NSNumber, CULong;
override externalInstanceMethod(#NSNumber, "decimalValue") = NSDecimal;

record NSNumberFormatter = externalClass(NSFormatter);
override externalInstanceMethod(#NSNumberFormatter, "getObjectValue:forString:range:error:") = Bool, Pointer[Id], NSString, Pointer[NSRange], Pointer[NSError];
override externalInstanceMethod(#NSNumberFormatter, "stringFromNumber:") = NSString, NSNumber;
override externalInstanceMethod(#NSNumberFormatter, "numberFromString:") = NSNumber, NSString;
override externalClassMethod(#NSNumberFormatter, "localizedStringFromNumber:numberStyle:") = NSString, NSNumber, CULong;
override externalInstanceMethod(#NSNumberFormatter, "numberStyle") = CULong;
override externalInstanceMethod(#NSNumberFormatter, "setNumberStyle:") = Void, CULong;
override externalInstanceMethod(#NSNumberFormatter, "locale") = NSLocale;
override externalInstanceMethod(#NSNumberFormatter, "setLocale:") = Void, NSLocale;
override externalInstanceMethod(#NSNumberFormatter, "generatesDecimalNumbers") = Bool;
override externalInstanceMethod(#NSNumberFormatter, "setGeneratesDecimalNumbers:") = Void, Bool;
override externalInstanceMethod(#NSNumberFormatter, "formatterBehavior") = CULong;
override externalInstanceMethod(#NSNumberFormatter, "setFormatterBehavior:") = Void, CULong;
override externalClassMethod(#NSNumberFormatter, "defaultFormatterBehavior") = CULong;
override externalClassMethod(#NSNumberFormatter, "setDefaultFormatterBehavior:") = Void, CULong;
override externalInstanceMethod(#NSNumberFormatter, "negativeFormat") = NSString;
override externalInstanceMethod(#NSNumberFormatter, "setNegativeFormat:") = Void, NSString;
override externalInstanceMethod(#NSNumberFormatter, "textAttributesForNegativeValues") = NSDictionary;
override externalInstanceMethod(#NSNumberFormatter, "setTextAttributesForNegativeValues:") = Void, NSDictionary;
override externalInstanceMethod(#NSNumberFormatter, "positiveFormat") = NSString;
override externalInstanceMethod(#NSNumberFormatter, "setPositiveFormat:") = Void, NSString;
override externalInstanceMethod(#NSNumberFormatter, "textAttributesForPositiveValues") = NSDictionary;
override externalInstanceMethod(#NSNumberFormatter, "setTextAttributesForPositiveValues:") = Void, NSDictionary;
override externalInstanceMethod(#NSNumberFormatter, "allowsFloats") = Bool;
override externalInstanceMethod(#NSNumberFormatter, "setAllowsFloats:") = Void, Bool;
override externalInstanceMethod(#NSNumberFormatter, "decimalSeparator") = NSString;
override externalInstanceMethod(#NSNumberFormatter, "setDecimalSeparator:") = Void, NSString;
override externalInstanceMethod(#NSNumberFormatter, "alwaysShowsDecimalSeparator") = Bool;
override externalInstanceMethod(#NSNumberFormatter, "setAlwaysShowsDecimalSeparator:") = Void, Bool;
override externalInstanceMethod(#NSNumberFormatter, "currencyDecimalSeparator") = NSString;
override externalInstanceMethod(#NSNumberFormatter, "setCurrencyDecimalSeparator:") = Void, NSString;
override externalInstanceMethod(#NSNumberFormatter, "usesGroupingSeparator") = Bool;
override externalInstanceMethod(#NSNumberFormatter, "setUsesGroupingSeparator:") = Void, Bool;
override externalInstanceMethod(#NSNumberFormatter, "groupingSeparator") = NSString;
override externalInstanceMethod(#NSNumberFormatter, "setGroupingSeparator:") = Void, NSString;
override externalInstanceMethod(#NSNumberFormatter, "zeroSymbol") = NSString;
override externalInstanceMethod(#NSNumberFormatter, "setZeroSymbol:") = Void, NSString;
override externalInstanceMethod(#NSNumberFormatter, "textAttributesForZero") = NSDictionary;
override externalInstanceMethod(#NSNumberFormatter, "setTextAttributesForZero:") = Void, NSDictionary;
override externalInstanceMethod(#NSNumberFormatter, "nilSymbol") = NSString;
override externalInstanceMethod(#NSNumberFormatter, "setNilSymbol:") = Void, NSString;
override externalInstanceMethod(#NSNumberFormatter, "textAttributesForNil") = NSDictionary;
override externalInstanceMethod(#NSNumberFormatter, "setTextAttributesForNil:") = Void, NSDictionary;
override externalInstanceMethod(#NSNumberFormatter, "notANumberSymbol") = NSString;
override externalInstanceMethod(#NSNumberFormatter, "setNotANumberSymbol:") = Void, NSString;
override externalInstanceMethod(#NSNumberFormatter, "textAttributesForNotANumber") = NSDictionary;
override externalInstanceMethod(#NSNumberFormatter, "setTextAttributesForNotANumber:") = Void, NSDictionary;
override externalInstanceMethod(#NSNumberFormatter, "positiveInfinitySymbol") = NSString;
override externalInstanceMethod(#NSNumberFormatter, "setPositiveInfinitySymbol:") = Void, NSString;
override externalInstanceMethod(#NSNumberFormatter, "textAttributesForPositiveInfinity") = NSDictionary;
override externalInstanceMethod(#NSNumberFormatter, "setTextAttributesForPositiveInfinity:") = Void, NSDictionary;
override externalInstanceMethod(#NSNumberFormatter, "negativeInfinitySymbol") = NSString;
override externalInstanceMethod(#NSNumberFormatter, "setNegativeInfinitySymbol:") = Void, NSString;
override externalInstanceMethod(#NSNumberFormatter, "textAttributesForNegativeInfinity") = NSDictionary;
override externalInstanceMethod(#NSNumberFormatter, "setTextAttributesForNegativeInfinity:") = Void, NSDictionary;
override externalInstanceMethod(#NSNumberFormatter, "positivePrefix") = NSString;
override externalInstanceMethod(#NSNumberFormatter, "setPositivePrefix:") = Void, NSString;
override externalInstanceMethod(#NSNumberFormatter, "positiveSuffix") = NSString;
override externalInstanceMethod(#NSNumberFormatter, "setPositiveSuffix:") = Void, NSString;
override externalInstanceMethod(#NSNumberFormatter, "negativePrefix") = NSString;
override externalInstanceMethod(#NSNumberFormatter, "setNegativePrefix:") = Void, NSString;
override externalInstanceMethod(#NSNumberFormatter, "negativeSuffix") = NSString;
override externalInstanceMethod(#NSNumberFormatter, "setNegativeSuffix:") = Void, NSString;
override externalInstanceMethod(#NSNumberFormatter, "currencyCode") = NSString;
override externalInstanceMethod(#NSNumberFormatter, "setCurrencyCode:") = Void, NSString;
override externalInstanceMethod(#NSNumberFormatter, "currencySymbol") = NSString;
override externalInstanceMethod(#NSNumberFormatter, "setCurrencySymbol:") = Void, NSString;
override externalInstanceMethod(#NSNumberFormatter, "internationalCurrencySymbol") = NSString;
override externalInstanceMethod(#NSNumberFormatter, "setInternationalCurrencySymbol:") = Void, NSString;
override externalInstanceMethod(#NSNumberFormatter, "percentSymbol") = NSString;
override externalInstanceMethod(#NSNumberFormatter, "setPercentSymbol:") = Void, NSString;
override externalInstanceMethod(#NSNumberFormatter, "perMillSymbol") = NSString;
override externalInstanceMethod(#NSNumberFormatter, "setPerMillSymbol:") = Void, NSString;
override externalInstanceMethod(#NSNumberFormatter, "minusSign") = NSString;
override externalInstanceMethod(#NSNumberFormatter, "setMinusSign:") = Void, NSString;
override externalInstanceMethod(#NSNumberFormatter, "plusSign") = NSString;
override externalInstanceMethod(#NSNumberFormatter, "setPlusSign:") = Void, NSString;
override externalInstanceMethod(#NSNumberFormatter, "exponentSymbol") = NSString;
override externalInstanceMethod(#NSNumberFormatter, "setExponentSymbol:") = Void, NSString;
override externalInstanceMethod(#NSNumberFormatter, "groupingSize") = CULong;
override externalInstanceMethod(#NSNumberFormatter, "setGroupingSize:") = Void, CULong;
override externalInstanceMethod(#NSNumberFormatter, "secondaryGroupingSize") = CULong;
override externalInstanceMethod(#NSNumberFormatter, "setSecondaryGroupingSize:") = Void, CULong;
override externalInstanceMethod(#NSNumberFormatter, "multiplier") = NSNumber;
override externalInstanceMethod(#NSNumberFormatter, "setMultiplier:") = Void, NSNumber;
override externalInstanceMethod(#NSNumberFormatter, "formatWidth") = CULong;
override externalInstanceMethod(#NSNumberFormatter, "setFormatWidth:") = Void, CULong;
override externalInstanceMethod(#NSNumberFormatter, "paddingCharacter") = NSString;
override externalInstanceMethod(#NSNumberFormatter, "setPaddingCharacter:") = Void, NSString;
override externalInstanceMethod(#NSNumberFormatter, "paddingPosition") = CULong;
override externalInstanceMethod(#NSNumberFormatter, "setPaddingPosition:") = Void, CULong;
override externalInstanceMethod(#NSNumberFormatter, "roundingMode") = CULong;
override externalInstanceMethod(#NSNumberFormatter, "setRoundingMode:") = Void, CULong;
override externalInstanceMethod(#NSNumberFormatter, "roundingIncrement") = NSNumber;
override externalInstanceMethod(#NSNumberFormatter, "setRoundingIncrement:") = Void, NSNumber;
override externalInstanceMethod(#NSNumberFormatter, "minimumIntegerDigits") = CULong;
override externalInstanceMethod(#NSNumberFormatter, "setMinimumIntegerDigits:") = Void, CULong;
override externalInstanceMethod(#NSNumberFormatter, "maximumIntegerDigits") = CULong;
override externalInstanceMethod(#NSNumberFormatter, "setMaximumIntegerDigits:") = Void, CULong;
override externalInstanceMethod(#NSNumberFormatter, "minimumFractionDigits") = CULong;
override externalInstanceMethod(#NSNumberFormatter, "setMinimumFractionDigits:") = Void, CULong;
override externalInstanceMethod(#NSNumberFormatter, "maximumFractionDigits") = CULong;
override externalInstanceMethod(#NSNumberFormatter, "setMaximumFractionDigits:") = Void, CULong;
override externalInstanceMethod(#NSNumberFormatter, "minimum") = NSNumber;
override externalInstanceMethod(#NSNumberFormatter, "setMinimum:") = Void, NSNumber;
override externalInstanceMethod(#NSNumberFormatter, "maximum") = NSNumber;
override externalInstanceMethod(#NSNumberFormatter, "setMaximum:") = Void, NSNumber;
override externalInstanceMethod(#NSNumberFormatter, "currencyGroupingSeparator") = NSString;
override externalInstanceMethod(#NSNumberFormatter, "setCurrencyGroupingSeparator:") = Void, NSString;
override externalInstanceMethod(#NSNumberFormatter, "isLenient") = Bool;
override externalInstanceMethod(#NSNumberFormatter, "setLenient:") = Void, Bool;
override externalInstanceMethod(#NSNumberFormatter, "usesSignificantDigits") = Bool;
override externalInstanceMethod(#NSNumberFormatter, "setUsesSignificantDigits:") = Void, Bool;
override externalInstanceMethod(#NSNumberFormatter, "minimumSignificantDigits") = CULong;
override externalInstanceMethod(#NSNumberFormatter, "setMinimumSignificantDigits:") = Void, CULong;
override externalInstanceMethod(#NSNumberFormatter, "maximumSignificantDigits") = CULong;
override externalInstanceMethod(#NSNumberFormatter, "setMaximumSignificantDigits:") = Void, CULong;
override externalInstanceMethod(#NSNumberFormatter, "isPartialStringValidationEnabled") = Bool;
override externalInstanceMethod(#NSNumberFormatter, "setPartialStringValidationEnabled:") = Void, Bool;
override externalInstanceMethod(#NSNumberFormatter, "hasThousandSeparators") = Bool;
override externalInstanceMethod(#NSNumberFormatter, "setHasThousandSeparators:") = Void, Bool;
override externalInstanceMethod(#NSNumberFormatter, "thousandSeparator") = NSString;
override externalInstanceMethod(#NSNumberFormatter, "setThousandSeparator:") = Void, NSString;
override externalInstanceMethod(#NSNumberFormatter, "localizesFormat") = Bool;
override externalInstanceMethod(#NSNumberFormatter, "setLocalizesFormat:") = Void, Bool;
override externalInstanceMethod(#NSNumberFormatter, "format") = NSString;
override externalInstanceMethod(#NSNumberFormatter, "setFormat:") = Void, NSString;
override externalInstanceMethod(#NSNumberFormatter, "attributedStringForZero") = NSAttributedString;
override externalInstanceMethod(#NSNumberFormatter, "setAttributedStringForZero:") = Void, NSAttributedString;
override externalInstanceMethod(#NSNumberFormatter, "attributedStringForNil") = NSAttributedString;
override externalInstanceMethod(#NSNumberFormatter, "setAttributedStringForNil:") = Void, NSAttributedString;
override externalInstanceMethod(#NSNumberFormatter, "attributedStringForNotANumber") = NSAttributedString;
override externalInstanceMethod(#NSNumberFormatter, "setAttributedStringForNotANumber:") = Void, NSAttributedString;
override externalInstanceMethod(#NSNumberFormatter, "roundingBehavior") = NSDecimalNumberHandler;
override externalInstanceMethod(#NSNumberFormatter, "setRoundingBehavior:") = Void, NSDecimalNumberHandler;

record NSObject = externalClass(Void);
override externalInstanceMethod(#NSObject, "isEqual:") = Bool, Id;
override externalInstanceMethod(#NSObject, "hash") = CULong;
override externalInstanceMethod(#NSObject, "superclass") = Id;
override externalInstanceMethod(#NSObject, "class") = Id;
override externalInstanceMethod(#NSObject, "self") = Id;
override externalInstanceMethod(#NSObject, "zone") = Pointer[NSZone];
override externalInstanceMethod(#NSObject, "performSelector:") = Id, SelectorHandle;
override externalInstanceMethod(#NSObject, "performSelector:withObject:") = Id, SelectorHandle, Id;
override externalInstanceMethod(#NSObject, "performSelector:withObject:withObject:") = Id, SelectorHandle, Id, Id;
override externalInstanceMethod(#NSObject, "isProxy") = Bool;
override externalInstanceMethod(#NSObject, "isKindOfClass:") = Bool, Id;
override externalInstanceMethod(#NSObject, "isMemberOfClass:") = Bool, Id;
override externalInstanceMethod(#NSObject, "conformsToProtocol:") = Bool, Id;
override externalInstanceMethod(#NSObject, "respondsToSelector:") = Bool, SelectorHandle;
override externalInstanceMethod(#NSObject, "retain") = Id;
override externalInstanceMethod(#NSObject, "release") = Void;
override externalInstanceMethod(#NSObject, "autorelease") = Id;
override externalInstanceMethod(#NSObject, "retainCount") = CULong;
override externalInstanceMethod(#NSObject, "description") = NSString;
override externalClassMethod(#NSObject, "load") = Void;
override externalClassMethod(#NSObject, "initialize") = Void;
override externalInstanceMethod(#NSObject, "init") = Id;
override externalClassMethod(#NSObject, "new") = Id;
override externalClassMethod(#NSObject, "allocWithZone:") = Id, Pointer[NSZone];
override externalClassMethod(#NSObject, "alloc") = Id;
override externalInstanceMethod(#NSObject, "dealloc") = Void;
override externalInstanceMethod(#NSObject, "finalize") = Void;
override externalInstanceMethod(#NSObject, "copy") = Id;
override externalInstanceMethod(#NSObject, "mutableCopy") = Id;
override externalClassMethod(#NSObject, "copyWithZone:") = Id, Pointer[NSZone];
override externalClassMethod(#NSObject, "mutableCopyWithZone:") = Id, Pointer[NSZone];
override externalClassMethod(#NSObject, "superclass") = Id;
override externalClassMethod(#NSObject, "class") = Id;
override externalClassMethod(#NSObject, "instancesRespondToSelector:") = Bool, SelectorHandle;
override externalClassMethod(#NSObject, "conformsToProtocol:") = Bool, Id;
override externalInstanceMethod(#NSObject, "methodForSelector:") = IMP, SelectorHandle;
override externalClassMethod(#NSObject, "instanceMethodForSelector:") = IMP, SelectorHandle;
override externalInstanceMethod(#NSObject, "doesNotRecognizeSelector:") = Void, SelectorHandle;
override externalInstanceMethod(#NSObject, "forwardingTargetForSelector:") = Id, SelectorHandle;
override externalInstanceMethod(#NSObject, "forwardInvocation:") = Void, NSInvocation;
override externalInstanceMethod(#NSObject, "methodSignatureForSelector:") = NSMethodSignature, SelectorHandle;
override externalClassMethod(#NSObject, "instanceMethodSignatureForSelector:") = NSMethodSignature, SelectorHandle;
override externalClassMethod(#NSObject, "description") = NSString;
override externalClassMethod(#NSObject, "isSubclassOfClass:") = Bool, Id;
override externalClassMethod(#NSObject, "resolveClassMethod:") = Bool, SelectorHandle;
override externalClassMethod(#NSObject, "resolveInstanceMethod:") = Bool, SelectorHandle;
override externalClassMethod(#NSObject, "version") = CLong;
override externalClassMethod(#NSObject, "setVersion:") = Void, CLong;
override externalInstanceMethod(#NSObject, "classForCoder") = Id;
override externalInstanceMethod(#NSObject, "replacementObjectForCoder:") = Id, NSCoder;
override externalInstanceMethod(#NSObject, "awakeAfterUsingCoder:") = Id, NSCoder;
override externalClassMethod(#NSObject, "poseAsClass:") = Void, Id;
override externalInstanceMethod(#NSObject, "autoContentAccessingProxy") = Id;
override externalInstanceMethod(#NSObject, "attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:") = Void, NSError, CULong, Id, SelectorHandle, RawPointer;
override externalInstanceMethod(#NSObject, "attemptRecoveryFromError:optionIndex:") = Bool, NSError, CULong;
override externalInstanceMethod(#NSObject, "fileManager:shouldProceedAfterError:") = Bool, NSFileManager, NSDictionary;
override externalInstanceMethod(#NSObject, "fileManager:willProcessPath:") = Void, NSFileManager, NSString;
override externalInstanceMethod(#NSObject, "fileManager:shouldCopyItemAtPath:toPath:") = Bool, NSFileManager, NSString, NSString;
override externalInstanceMethod(#NSObject, "fileManager:shouldCopyItemAtURL:toURL:") = Bool, NSFileManager, NSURL, NSURL;
override externalInstanceMethod(#NSObject, "fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:") = Bool, NSFileManager, NSError, NSString, NSString;
override externalInstanceMethod(#NSObject, "fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:") = Bool, NSFileManager, NSError, NSURL, NSURL;
override externalInstanceMethod(#NSObject, "fileManager:shouldMoveItemAtPath:toPath:") = Bool, NSFileManager, NSString, NSString;
override externalInstanceMethod(#NSObject, "fileManager:shouldMoveItemAtURL:toURL:") = Bool, NSFileManager, NSURL, NSURL;
override externalInstanceMethod(#NSObject, "fileManager:shouldProceedAfterError:movingItemAtPath:toPath:") = Bool, NSFileManager, NSError, NSString, NSString;
override externalInstanceMethod(#NSObject, "fileManager:shouldProceedAfterError:movingItemAtURL:toURL:") = Bool, NSFileManager, NSError, NSURL, NSURL;
override externalInstanceMethod(#NSObject, "fileManager:shouldLinkItemAtPath:toPath:") = Bool, NSFileManager, NSString, NSString;
override externalInstanceMethod(#NSObject, "fileManager:shouldLinkItemAtURL:toURL:") = Bool, NSFileManager, NSURL, NSURL;
override externalInstanceMethod(#NSObject, "fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:") = Bool, NSFileManager, NSError, NSString, NSString;
override externalInstanceMethod(#NSObject, "fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:") = Bool, NSFileManager, NSError, NSURL, NSURL;
override externalInstanceMethod(#NSObject, "fileManager:shouldRemoveItemAtPath:") = Bool, NSFileManager, NSString;
override externalInstanceMethod(#NSObject, "fileManager:shouldRemoveItemAtURL:") = Bool, NSFileManager, NSURL;
override externalInstanceMethod(#NSObject, "fileManager:shouldProceedAfterError:removingItemAtPath:") = Bool, NSFileManager, NSError, NSString;
override externalInstanceMethod(#NSObject, "fileManager:shouldProceedAfterError:removingItemAtURL:") = Bool, NSFileManager, NSError, NSURL;
override externalClassMethod(#NSObject, "accessInstanceVariablesDirectly") = Bool;
override externalInstanceMethod(#NSObject, "valueForKey:") = Id, NSString;
override externalInstanceMethod(#NSObject, "setValue:forKey:") = Void, Id, NSString;
override externalInstanceMethod(#NSObject, "validateValue:forKey:error:") = Bool, Pointer[Id], NSString, Pointer[NSError];
override externalInstanceMethod(#NSObject, "mutableArrayValueForKey:") = NSMutableArray, NSString;
override externalInstanceMethod(#NSObject, "mutableSetValueForKey:") = NSMutableSet, NSString;
override externalInstanceMethod(#NSObject, "valueForKeyPath:") = Id, NSString;
override externalInstanceMethod(#NSObject, "setValue:forKeyPath:") = Void, Id, NSString;
override externalInstanceMethod(#NSObject, "validateValue:forKeyPath:error:") = Bool, Pointer[Id], NSString, Pointer[NSError];
override externalInstanceMethod(#NSObject, "mutableArrayValueForKeyPath:") = NSMutableArray, NSString;
override externalInstanceMethod(#NSObject, "mutableSetValueForKeyPath:") = NSMutableSet, NSString;
override externalInstanceMethod(#NSObject, "valueForUndefinedKey:") = Id, NSString;
override externalInstanceMethod(#NSObject, "setValue:forUndefinedKey:") = Void, Id, NSString;
override externalInstanceMethod(#NSObject, "setNilValueForKey:") = Void, NSString;
override externalInstanceMethod(#NSObject, "dictionaryWithValuesForKeys:") = NSDictionary, NSArray;
override externalInstanceMethod(#NSObject, "setValuesForKeysWithDictionary:") = Void, NSDictionary;
override externalClassMethod(#NSObject, "useStoredAccessor") = Bool;
override externalInstanceMethod(#NSObject, "storedValueForKey:") = Id, NSString;
override externalInstanceMethod(#NSObject, "takeStoredValue:forKey:") = Void, Id, NSString;
override externalInstanceMethod(#NSObject, "takeValue:forKey:") = Void, Id, NSString;
override externalInstanceMethod(#NSObject, "takeValue:forKeyPath:") = Void, Id, NSString;
override externalInstanceMethod(#NSObject, "handleQueryWithUnboundKey:") = Id, NSString;
override externalInstanceMethod(#NSObject, "handleTakeValue:forUnboundKey:") = Void, Id, NSString;
override externalInstanceMethod(#NSObject, "unableToSetNilForKey:") = Void, NSString;
override externalInstanceMethod(#NSObject, "valuesForKeys:") = NSDictionary, NSArray;
override externalInstanceMethod(#NSObject, "takeValuesFromDictionary:") = Void, NSDictionary;
override externalInstanceMethod(#NSObject, "observeValueForKeyPath:ofObject:change:context:") = Void, NSString, Id, NSDictionary, RawPointer;
override externalInstanceMethod(#NSObject, "addObserver:forKeyPath:options:context:") = Void, NSObject, NSString, CULong, RawPointer;
override externalInstanceMethod(#NSObject, "removeObserver:forKeyPath:") = Void, NSObject, NSString;
override externalInstanceMethod(#NSObject, "willChangeValueForKey:") = Void, NSString;
override externalInstanceMethod(#NSObject, "didChangeValueForKey:") = Void, NSString;
override externalInstanceMethod(#NSObject, "willChange:valuesAtIndexes:forKey:") = Void, CULong, NSIndexSet, NSString;
override externalInstanceMethod(#NSObject, "didChange:valuesAtIndexes:forKey:") = Void, CULong, NSIndexSet, NSString;
override externalInstanceMethod(#NSObject, "willChangeValueForKey:withSetMutation:usingObjects:") = Void, NSString, CULong, NSSet;
override externalInstanceMethod(#NSObject, "didChangeValueForKey:withSetMutation:usingObjects:") = Void, NSString, CULong, NSSet;
override externalClassMethod(#NSObject, "keyPathsForValuesAffectingValueForKey:") = NSSet, NSString;
override externalClassMethod(#NSObject, "automaticallyNotifiesObserversForKey:") = Bool, NSString;
override externalInstanceMethod(#NSObject, "setObservationInfo:") = Void, RawPointer;
override externalInstanceMethod(#NSObject, "observationInfo") = RawPointer;
override externalClassMethod(#NSObject, "setKeys:triggerChangeNotificationsForDependentKey:") = Void, NSArray, NSString;
override externalInstanceMethod(#NSObject, "classForKeyedArchiver") = Id;
override externalInstanceMethod(#NSObject, "replacementObjectForKeyedArchiver:") = Id, NSKeyedArchiver;
override externalClassMethod(#NSObject, "classFallbacksForKeyedArchiver") = NSArray;
override externalClassMethod(#NSObject, "classForKeyedUnarchiver") = Id;
override externalInstanceMethod(#NSObject, "performSelector:withObject:afterDelay:inModes:") = Void, SelectorHandle, Id, Double, NSArray;
override externalInstanceMethod(#NSObject, "performSelector:withObject:afterDelay:") = Void, SelectorHandle, Id, Double;
override externalClassMethod(#NSObject, "cancelPreviousPerformRequestsWithTarget:selector:object:") = Void, Id, SelectorHandle, Id;
override externalClassMethod(#NSObject, "cancelPreviousPerformRequestsWithTarget:") = Void, Id;
override externalInstanceMethod(#NSObject, "performSelectorOnMainThread:withObject:waitUntilDone:modes:") = Void, SelectorHandle, Id, Bool, NSArray;
override externalInstanceMethod(#NSObject, "performSelectorOnMainThread:withObject:waitUntilDone:") = Void, SelectorHandle, Id, Bool;
override externalInstanceMethod(#NSObject, "performSelector:onThread:withObject:waitUntilDone:modes:") = Void, SelectorHandle, NSThread, Id, Bool, NSArray;
override externalInstanceMethod(#NSObject, "performSelector:onThread:withObject:waitUntilDone:") = Void, SelectorHandle, NSThread, Id, Bool;
override externalInstanceMethod(#NSObject, "performSelectorInBackground:withObject:") = Void, SelectorHandle, Id;
override externalInstanceMethod(#NSObject, "URL:resourceDataDidBecomeAvailable:") = Void, NSURL, NSData;
override externalInstanceMethod(#NSObject, "URLResourceDidFinishLoading:") = Void, NSURL;
override externalInstanceMethod(#NSObject, "URLResourceDidCancelLoading:") = Void, NSURL;
override externalInstanceMethod(#NSObject, "URL:resourceDidFailLoadingWithReason:") = Void, NSURL, NSString;
override externalInstanceMethod(#NSObject, "connection:willSendRequest:redirectResponse:") = NSURLRequest, NSURLConnection, NSURLRequest, NSURLResponse;
override externalInstanceMethod(#NSObject, "connection:needNewBodyStream:") = NSInputStream, NSURLConnection, NSURLRequest;
override externalInstanceMethod(#NSObject, "connection:canAuthenticateAgainstProtectionSpace:") = Bool, NSURLConnection, NSURLProtectionSpace;
override externalInstanceMethod(#NSObject, "connection:didReceiveAuthenticationChallenge:") = Void, NSURLConnection, NSURLAuthenticationChallenge;
override externalInstanceMethod(#NSObject, "connection:didCancelAuthenticationChallenge:") = Void, NSURLConnection, NSURLAuthenticationChallenge;
override externalInstanceMethod(#NSObject, "connectionShouldUseCredentialStorage:") = Bool, NSURLConnection;
override externalInstanceMethod(#NSObject, "connection:didReceiveResponse:") = Void, NSURLConnection, NSURLResponse;
override externalInstanceMethod(#NSObject, "connection:didReceiveData:") = Void, NSURLConnection, NSData;
override externalInstanceMethod(#NSObject, "connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:") = Void, NSURLConnection, CLong, CLong, CLong;
override externalInstanceMethod(#NSObject, "connectionDidFinishLoading:") = Void, NSURLConnection;
override externalInstanceMethod(#NSObject, "connection:didFailWithError:") = Void, NSURLConnection, NSError;
override externalInstanceMethod(#NSObject, "connection:willCacheResponse:") = NSCachedURLResponse, NSURLConnection, NSCachedURLResponse;
override externalInstanceMethod(#NSObject, "classForArchiver") = Id;
override externalInstanceMethod(#NSObject, "replacementObjectForArchiver:") = Id, NSArchiver;
override externalInstanceMethod(#NSObject, "classForPortCoder") = Id;
override externalInstanceMethod(#NSObject, "replacementObjectForPortCoder:") = Id, NSPortCoder;
override externalInstanceMethod(#NSObject, "classDescription") = NSClassDescription;
override externalInstanceMethod(#NSObject, "attributeKeys") = NSArray;
override externalInstanceMethod(#NSObject, "toOneRelationshipKeys") = NSArray;
override externalInstanceMethod(#NSObject, "toManyRelationshipKeys") = NSArray;
override externalInstanceMethod(#NSObject, "inverseForRelationshipKey:") = NSString, NSString;
override externalInstanceMethod(#NSObject, "scriptingValueForSpecifier:") = Id, NSScriptObjectSpecifier;
override externalInstanceMethod(#NSObject, "scriptingProperties") = NSDictionary;
override externalInstanceMethod(#NSObject, "setScriptingProperties:") = Void, NSDictionary;
override externalInstanceMethod(#NSObject, "copyScriptingValue:forKey:withProperties:") = Id, Id, NSString, NSDictionary;
override externalInstanceMethod(#NSObject, "newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:") = Id, Id, NSString, Id, NSDictionary;
override externalInstanceMethod(#NSObject, "classCode") = UInt;
override externalInstanceMethod(#NSObject, "className") = NSString;
override externalInstanceMethod(#NSObject, "valueAtIndex:inPropertyWithKey:") = Id, CULong, NSString;
override externalInstanceMethod(#NSObject, "valueWithName:inPropertyWithKey:") = Id, NSString, NSString;
override externalInstanceMethod(#NSObject, "valueWithUniqueID:inPropertyWithKey:") = Id, Id, NSString;
override externalInstanceMethod(#NSObject, "insertValue:atIndex:inPropertyWithKey:") = Void, Id, CULong, NSString;
override externalInstanceMethod(#NSObject, "removeValueAtIndex:fromPropertyWithKey:") = Void, CULong, NSString;
override externalInstanceMethod(#NSObject, "replaceValueAtIndex:inPropertyWithKey:withValue:") = Void, CULong, NSString, Id;
override externalInstanceMethod(#NSObject, "insertValue:inPropertyWithKey:") = Void, Id, NSString;
override externalInstanceMethod(#NSObject, "coerceValue:forKey:") = Id, Id, NSString;
override externalInstanceMethod(#NSObject, "objectSpecifier") = NSScriptObjectSpecifier;
override externalInstanceMethod(#NSObject, "indicesOfObjectsByEvaluatingObjectSpecifier:") = NSArray, NSScriptObjectSpecifier;
override externalInstanceMethod(#NSObject, "isEqualTo:") = Bool, Id;
override externalInstanceMethod(#NSObject, "isLessThanOrEqualTo:") = Bool, Id;
override externalInstanceMethod(#NSObject, "isLessThan:") = Bool, Id;
override externalInstanceMethod(#NSObject, "isGreaterThanOrEqualTo:") = Bool, Id;
override externalInstanceMethod(#NSObject, "isGreaterThan:") = Bool, Id;
override externalInstanceMethod(#NSObject, "isNotEqualTo:") = Bool, Id;
override externalInstanceMethod(#NSObject, "doesContain:") = Bool, Id;
override externalInstanceMethod(#NSObject, "isLike:") = Bool, NSString;
override externalInstanceMethod(#NSObject, "isCaseInsensitiveLike:") = Bool, NSString;
override externalInstanceMethod(#NSObject, "scriptingIsEqualTo:") = Bool, Id;
override externalInstanceMethod(#NSObject, "scriptingIsLessThanOrEqualTo:") = Bool, Id;
override externalInstanceMethod(#NSObject, "scriptingIsLessThan:") = Bool, Id;
override externalInstanceMethod(#NSObject, "scriptingIsGreaterThanOrEqualTo:") = Bool, Id;
override externalInstanceMethod(#NSObject, "scriptingIsGreaterThan:") = Bool, Id;
override externalInstanceMethod(#NSObject, "scriptingBeginsWith:") = Bool, Id;
override externalInstanceMethod(#NSObject, "scriptingEndsWith:") = Bool, Id;
override externalInstanceMethod(#NSObject, "scriptingContains:") = Bool, Id;
override externalInstanceMethod(#NSObject, "downloadDidBegin:") = Void, NSURLDownload;
override externalInstanceMethod(#NSObject, "download:willSendRequest:redirectResponse:") = NSURLRequest, NSURLDownload, NSURLRequest, NSURLResponse;
override externalInstanceMethod(#NSObject, "download:canAuthenticateAgainstProtectionSpace:") = Bool, NSURLDownload, NSURLProtectionSpace;
override externalInstanceMethod(#NSObject, "download:didReceiveAuthenticationChallenge:") = Void, NSURLDownload, NSURLAuthenticationChallenge;
override externalInstanceMethod(#NSObject, "download:didCancelAuthenticationChallenge:") = Void, NSURLDownload, NSURLAuthenticationChallenge;
override externalInstanceMethod(#NSObject, "downloadShouldUseCredentialStorage:") = Bool, NSURLDownload;
override externalInstanceMethod(#NSObject, "download:didReceiveResponse:") = Void, NSURLDownload, NSURLResponse;
override externalInstanceMethod(#NSObject, "download:willResumeWithResponse:fromByte:") = Void, NSURLDownload, NSURLResponse, Int64;
override externalInstanceMethod(#NSObject, "download:didReceiveDataOfLength:") = Void, NSURLDownload, CULong;
override externalInstanceMethod(#NSObject, "download:shouldDecodeSourceDataOfMIMEType:") = Bool, NSURLDownload, NSString;
override externalInstanceMethod(#NSObject, "download:decideDestinationWithSuggestedFilename:") = Void, NSURLDownload, NSString;
override externalInstanceMethod(#NSObject, "download:didCreateDestination:") = Void, NSURLDownload, NSString;
override externalInstanceMethod(#NSObject, "downloadDidFinish:") = Void, NSURLDownload;
override externalInstanceMethod(#NSObject, "download:didFailWithError:") = Void, NSURLDownload, NSError;

record NSOperation = externalClass(NSObject);
override externalInstanceMethod(#NSOperation, "init") = Id;
override externalInstanceMethod(#NSOperation, "start") = Void;
override externalInstanceMethod(#NSOperation, "main") = Void;
override externalInstanceMethod(#NSOperation, "isCancelled") = Bool;
override externalInstanceMethod(#NSOperation, "cancel") = Void;
override externalInstanceMethod(#NSOperation, "isExecuting") = Bool;
override externalInstanceMethod(#NSOperation, "isFinished") = Bool;
override externalInstanceMethod(#NSOperation, "isConcurrent") = Bool;
override externalInstanceMethod(#NSOperation, "isReady") = Bool;
override externalInstanceMethod(#NSOperation, "addDependency:") = Void, NSOperation;
override externalInstanceMethod(#NSOperation, "removeDependency:") = Void, NSOperation;
override externalInstanceMethod(#NSOperation, "dependencies") = NSArray;
override externalInstanceMethod(#NSOperation, "queuePriority") = CLong;
override externalInstanceMethod(#NSOperation, "setQueuePriority:") = Void, CLong;
override externalInstanceMethod(#NSOperation, "completionBlock") = UnknownType;
override externalInstanceMethod(#NSOperation, "setCompletionBlock:") = Void, UnknownType;
override externalInstanceMethod(#NSOperation, "waitUntilFinished") = Void;
override externalInstanceMethod(#NSOperation, "threadPriority") = Double;
override externalInstanceMethod(#NSOperation, "setThreadPriority:") = Void, Double;

record NSOperationQueue = externalClass(NSObject);
override externalInstanceMethod(#NSOperationQueue, "addOperation:") = Void, NSOperation;
override externalInstanceMethod(#NSOperationQueue, "addOperations:waitUntilFinished:") = Void, NSArray, Bool;
override externalInstanceMethod(#NSOperationQueue, "addOperationWithBlock:") = Void, UnknownType;
override externalInstanceMethod(#NSOperationQueue, "operations") = NSArray;
override externalInstanceMethod(#NSOperationQueue, "operationCount") = CULong;
override externalInstanceMethod(#NSOperationQueue, "maxConcurrentOperationCount") = CLong;
override externalInstanceMethod(#NSOperationQueue, "setMaxConcurrentOperationCount:") = Void, CLong;
override externalInstanceMethod(#NSOperationQueue, "setSuspended:") = Void, Bool;
override externalInstanceMethod(#NSOperationQueue, "isSuspended") = Bool;
override externalInstanceMethod(#NSOperationQueue, "setName:") = Void, NSString;
override externalInstanceMethod(#NSOperationQueue, "name") = NSString;
override externalInstanceMethod(#NSOperationQueue, "cancelAllOperations") = Void;
override externalInstanceMethod(#NSOperationQueue, "waitUntilAllOperationsAreFinished") = Void;
override externalClassMethod(#NSOperationQueue, "currentQueue") = Id;
override externalClassMethod(#NSOperationQueue, "mainQueue") = Id;

record NSOrthography = externalClass(NSObject);
override externalInstanceMethod(#NSOrthography, "copyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSOrthography, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSOrthography, "initWithCoder:") = Id, NSCoder;
override externalInstanceMethod(#NSOrthography, "dominantScript") = NSString;
override externalInstanceMethod(#NSOrthography, "languageMap") = NSDictionary;
override externalInstanceMethod(#NSOrthography, "languagesForScript:") = NSArray, NSString;
override externalInstanceMethod(#NSOrthography, "dominantLanguageForScript:") = NSString, NSString;
override externalInstanceMethod(#NSOrthography, "dominantLanguage") = NSString;
override externalInstanceMethod(#NSOrthography, "allScripts") = NSArray;
override externalInstanceMethod(#NSOrthography, "allLanguages") = NSArray;
override externalClassMethod(#NSOrthography, "orthographyWithDominantScript:languageMap:") = Id, NSString, NSDictionary;
override externalInstanceMethod(#NSOrthography, "initWithDominantScript:languageMap:") = Id, NSString, NSDictionary;

record NSOutputStream = externalClass(NSStream);
override externalInstanceMethod(#NSOutputStream, "write:maxLength:") = CLong, Pointer[CUChar], CULong;
override externalInstanceMethod(#NSOutputStream, "hasSpaceAvailable") = Bool;
override externalInstanceMethod(#NSOutputStream, "initToMemory") = Id;
override externalInstanceMethod(#NSOutputStream, "initToBuffer:capacity:") = Id, Pointer[CUChar], CULong;
override externalInstanceMethod(#NSOutputStream, "initToFileAtPath:append:") = Id, NSString, Bool;
override externalInstanceMethod(#NSOutputStream, "initWithURL:append:") = Id, NSURL, Bool;
override externalClassMethod(#NSOutputStream, "outputStreamToMemory") = Id;
override externalClassMethod(#NSOutputStream, "outputStreamToBuffer:capacity:") = Id, Pointer[CUChar], CULong;
override externalClassMethod(#NSOutputStream, "outputStreamToFileAtPath:append:") = Id, NSString, Bool;
override externalClassMethod(#NSOutputStream, "outputStreamWithURL:append:") = Id, NSURL, Bool;

record NSPipe = externalClass(NSObject);
override externalInstanceMethod(#NSPipe, "fileHandleForReading") = NSFileHandle;
override externalInstanceMethod(#NSPipe, "fileHandleForWriting") = NSFileHandle;
override externalInstanceMethod(#NSPipe, "init") = Id;
override externalClassMethod(#NSPipe, "pipe") = Id;

record NSPointerArray = externalClass(NSObject);
override externalInstanceMethod(#NSPointerArray, "countByEnumeratingWithState:objects:count:") = CULong, Pointer[NSFastEnumerationState], Pointer[Id], CULong;
override externalInstanceMethod(#NSPointerArray, "copyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSPointerArray, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSPointerArray, "initWithCoder:") = Id, NSCoder;
override externalInstanceMethod(#NSPointerArray, "initWithOptions:") = Id, CULong;
override externalInstanceMethod(#NSPointerArray, "initWithPointerFunctions:") = Id, NSPointerFunctions;
override externalClassMethod(#NSPointerArray, "pointerArrayWithOptions:") = Id, CULong;
override externalClassMethod(#NSPointerArray, "pointerArrayWithPointerFunctions:") = Id, NSPointerFunctions;
override externalInstanceMethod(#NSPointerArray, "pointerFunctions") = NSPointerFunctions;
override externalInstanceMethod(#NSPointerArray, "pointerAtIndex:") = RawPointer, CULong;
override externalInstanceMethod(#NSPointerArray, "addPointer:") = Void, RawPointer;
override externalInstanceMethod(#NSPointerArray, "removePointerAtIndex:") = Void, CULong;
override externalInstanceMethod(#NSPointerArray, "insertPointer:atIndex:") = Void, RawPointer, CULong;
override externalInstanceMethod(#NSPointerArray, "replacePointerAtIndex:withPointer:") = Void, CULong, RawPointer;
override externalInstanceMethod(#NSPointerArray, "compact") = Void;
override externalInstanceMethod(#NSPointerArray, "count") = CULong;
override externalInstanceMethod(#NSPointerArray, "setCount:") = Void, CULong;
override externalClassMethod(#NSPointerArray, "pointerArrayWithStrongObjects") = Id;
override externalClassMethod(#NSPointerArray, "pointerArrayWithWeakObjects") = Id;
override externalInstanceMethod(#NSPointerArray, "allObjects") = NSArray;

record NSPointerFunctions = externalClass(NSObject);
override externalInstanceMethod(#NSPointerFunctions, "copyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSPointerFunctions, "initWithOptions:") = Id, CULong;
override externalClassMethod(#NSPointerFunctions, "pointerFunctionsWithOptions:") = Id, CULong;
override externalInstanceMethod(#NSPointerFunctions, "hashFunction") = CCodePointer[[RawPointer,CCodePointer[[RawPointer],[CULong]]],[CULong]];
override externalInstanceMethod(#NSPointerFunctions, "setHashFunction:") = Void, CCodePointer[[RawPointer,CCodePointer[[RawPointer],[CULong]]],[CULong]];
override externalInstanceMethod(#NSPointerFunctions, "isEqualFunction") = CCodePointer[[RawPointer,RawPointer,CCodePointer[[RawPointer],[CULong]]],[CChar]];
override externalInstanceMethod(#NSPointerFunctions, "setIsEqualFunction:") = Void, CCodePointer[[RawPointer,RawPointer,CCodePointer[[RawPointer],[CULong]]],[CChar]];
override externalInstanceMethod(#NSPointerFunctions, "sizeFunction") = CCodePointer[[RawPointer],[CULong]];
override externalInstanceMethod(#NSPointerFunctions, "setSizeFunction:") = Void, CCodePointer[[RawPointer],[CULong]];
override externalInstanceMethod(#NSPointerFunctions, "descriptionFunction") = CCodePointer[[RawPointer],[NSString]];
override externalInstanceMethod(#NSPointerFunctions, "setDescriptionFunction:") = Void, CCodePointer[[RawPointer],[NSString]];
override externalInstanceMethod(#NSPointerFunctions, "relinquishFunction") = CCodePointer[[RawPointer,CCodePointer[[RawPointer],[CULong]]],[]];
override externalInstanceMethod(#NSPointerFunctions, "setRelinquishFunction:") = Void, CCodePointer[[RawPointer,CCodePointer[[RawPointer],[CULong]]],[]];
override externalInstanceMethod(#NSPointerFunctions, "acquireFunction") = CCodePointer[[RawPointer,CCodePointer[[RawPointer],[CULong]],CChar],[RawPointer]];
override externalInstanceMethod(#NSPointerFunctions, "setAcquireFunction:") = Void, CCodePointer[[RawPointer,CCodePointer[[RawPointer],[CULong]],CChar],[RawPointer]];
override externalInstanceMethod(#NSPointerFunctions, "usesStrongWriteBarrier") = Bool;
override externalInstanceMethod(#NSPointerFunctions, "setUsesStrongWriteBarrier:") = Void, Bool;
override externalInstanceMethod(#NSPointerFunctions, "usesWeakReadAndWriteBarriers") = Bool;
override externalInstanceMethod(#NSPointerFunctions, "setUsesWeakReadAndWriteBarriers:") = Void, Bool;

record NSPort = externalClass(NSObject);
override externalInstanceMethod(#NSPort, "copyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSPort, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSPort, "initWithCoder:") = Id, NSCoder;
override externalClassMethod(#NSPort, "allocWithZone:") = Id, Pointer[NSZone];
override externalClassMethod(#NSPort, "port") = NSPort;
override externalInstanceMethod(#NSPort, "invalidate") = Void;
override externalInstanceMethod(#NSPort, "isValid") = Bool;
override externalInstanceMethod(#NSPort, "setDelegate:") = Void, Id;
override externalInstanceMethod(#NSPort, "delegate") = Id;
override externalInstanceMethod(#NSPort, "scheduleInRunLoop:forMode:") = Void, NSRunLoop, NSString;
override externalInstanceMethod(#NSPort, "removeFromRunLoop:forMode:") = Void, NSRunLoop, NSString;
override externalInstanceMethod(#NSPort, "reservedSpaceLength") = CULong;
override externalInstanceMethod(#NSPort, "sendBeforeDate:components:from:reserved:") = Bool, NSDate, NSMutableArray, NSPort, CULong;
override externalInstanceMethod(#NSPort, "sendBeforeDate:msgid:components:from:reserved:") = Bool, NSDate, CULong, NSMutableArray, NSPort, CULong;
override externalInstanceMethod(#NSPort, "addConnection:toRunLoop:forMode:") = Void, NSConnection, NSRunLoop, NSString;
override externalInstanceMethod(#NSPort, "removeConnection:fromRunLoop:forMode:") = Void, NSConnection, NSRunLoop, NSString;

record NSPortCoder = externalClass(NSCoder);
override externalInstanceMethod(#NSPortCoder, "isBycopy") = Bool;
override externalInstanceMethod(#NSPortCoder, "isByref") = Bool;
override externalInstanceMethod(#NSPortCoder, "connection") = NSConnection;
override externalInstanceMethod(#NSPortCoder, "encodePortObject:") = Void, NSPort;
override externalInstanceMethod(#NSPortCoder, "decodePortObject") = NSPort;
override externalClassMethod(#NSPortCoder, "portCoderWithReceivePort:sendPort:components:") = Id, NSPort, NSPort, NSArray;
override externalInstanceMethod(#NSPortCoder, "initWithReceivePort:sendPort:components:") = Id, NSPort, NSPort, NSArray;
override externalInstanceMethod(#NSPortCoder, "dispatch") = Void;

record NSPortMessage = externalClass(NSObject);
override externalInstanceMethod(#NSPortMessage, "initWithSendPort:receivePort:components:") = Id, NSPort, NSPort, NSArray;
override externalInstanceMethod(#NSPortMessage, "components") = NSArray;
override externalInstanceMethod(#NSPortMessage, "receivePort") = NSPort;
override externalInstanceMethod(#NSPortMessage, "sendPort") = NSPort;
override externalInstanceMethod(#NSPortMessage, "sendBeforeDate:") = Bool, NSDate;
override externalInstanceMethod(#NSPortMessage, "msgid") = UInt;
override externalInstanceMethod(#NSPortMessage, "setMsgid:") = Void, UInt;

record NSPortNameServer = externalClass(NSObject);
override externalClassMethod(#NSPortNameServer, "systemDefaultPortNameServer") = NSPortNameServer;
override externalInstanceMethod(#NSPortNameServer, "portForName:") = NSPort, NSString;
override externalInstanceMethod(#NSPortNameServer, "portForName:host:") = NSPort, NSString, NSString;
override externalInstanceMethod(#NSPortNameServer, "registerPort:name:") = Bool, NSPort, NSString;
override externalInstanceMethod(#NSPortNameServer, "removePortForName:") = Bool, NSString;

record NSPositionalSpecifier = externalClass(NSObject);
override externalInstanceMethod(#NSPositionalSpecifier, "initWithPosition:objectSpecifier:") = Id, CULong, NSScriptObjectSpecifier;
override externalInstanceMethod(#NSPositionalSpecifier, "position") = CULong;
override externalInstanceMethod(#NSPositionalSpecifier, "objectSpecifier") = NSScriptObjectSpecifier;
override externalInstanceMethod(#NSPositionalSpecifier, "setInsertionClassDescription:") = Void, NSScriptClassDescription;
override externalInstanceMethod(#NSPositionalSpecifier, "evaluate") = Void;
override externalInstanceMethod(#NSPositionalSpecifier, "insertionContainer") = Id;
override externalInstanceMethod(#NSPositionalSpecifier, "insertionKey") = NSString;
override externalInstanceMethod(#NSPositionalSpecifier, "insertionIndex") = CLong;
override externalInstanceMethod(#NSPositionalSpecifier, "insertionReplaces") = Bool;

record NSPredicate = externalClass(NSObject);
override externalInstanceMethod(#NSPredicate, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSPredicate, "initWithCoder:") = Id, NSCoder;
override externalInstanceMethod(#NSPredicate, "copyWithZone:") = Id, Pointer[NSZone];
override externalClassMethod(#NSPredicate, "predicateWithFormat:argumentArray:") = NSPredicate, NSString, NSArray;
override externalVarargClassMethod(#NSPredicate, "predicateWithFormat:") = NSPredicate, NSString;
override externalClassMethod(#NSPredicate, "predicateWithFormat:arguments:") = NSPredicate, NSString, Pointer[__va_list_tag];
override externalClassMethod(#NSPredicate, "predicateWithValue:") = NSPredicate, Bool;
override externalClassMethod(#NSPredicate, "predicateWithBlock:") = NSPredicate, UnknownType;
override externalInstanceMethod(#NSPredicate, "predicateFormat") = NSString;
override externalInstanceMethod(#NSPredicate, "predicateWithSubstitutionVariables:") = NSPredicate, NSDictionary;
override externalInstanceMethod(#NSPredicate, "evaluateWithObject:") = Bool, Id;
override externalInstanceMethod(#NSPredicate, "evaluateWithObject:substitutionVariables:") = Bool, Id, NSDictionary;

record NSProcessInfo = externalClass(NSObject);
override externalClassMethod(#NSProcessInfo, "processInfo") = NSProcessInfo;
override externalInstanceMethod(#NSProcessInfo, "environment") = NSDictionary;
override externalInstanceMethod(#NSProcessInfo, "arguments") = NSArray;
override externalInstanceMethod(#NSProcessInfo, "hostName") = NSString;
override externalInstanceMethod(#NSProcessInfo, "processName") = NSString;
override externalInstanceMethod(#NSProcessInfo, "processIdentifier") = Int;
override externalInstanceMethod(#NSProcessInfo, "setProcessName:") = Void, NSString;
override externalInstanceMethod(#NSProcessInfo, "globallyUniqueString") = NSString;
override externalInstanceMethod(#NSProcessInfo, "operatingSystem") = CULong;
override externalInstanceMethod(#NSProcessInfo, "operatingSystemName") = NSString;
override externalInstanceMethod(#NSProcessInfo, "operatingSystemVersionString") = NSString;
override externalInstanceMethod(#NSProcessInfo, "processorCount") = CULong;
override externalInstanceMethod(#NSProcessInfo, "activeProcessorCount") = CULong;
override externalInstanceMethod(#NSProcessInfo, "physicalMemory") = UInt64;
override externalInstanceMethod(#NSProcessInfo, "systemUptime") = Double;
override externalInstanceMethod(#NSProcessInfo, "disableSuddenTermination") = Void;
override externalInstanceMethod(#NSProcessInfo, "enableSuddenTermination") = Void;

record NSPropertyListSerialization = externalClass(NSObject);
override externalClassMethod(#NSPropertyListSerialization, "propertyList:isValidForFormat:") = Bool, Id, CULong;
override externalClassMethod(#NSPropertyListSerialization, "dataWithPropertyList:format:options:error:") = NSData, Id, CULong, CULong, Pointer[NSError];
override externalClassMethod(#NSPropertyListSerialization, "writePropertyList:toStream:format:options:error:") = CLong, Id, NSOutputStream, CULong, CULong, Pointer[NSError];
override externalClassMethod(#NSPropertyListSerialization, "propertyListWithData:options:format:error:") = Id, NSData, CULong, Pointer[CULong], Pointer[NSError];
override externalClassMethod(#NSPropertyListSerialization, "propertyListWithStream:options:format:error:") = Id, NSInputStream, CULong, Pointer[CULong], Pointer[NSError];
override externalClassMethod(#NSPropertyListSerialization, "dataFromPropertyList:format:errorDescription:") = NSData, Id, CULong, Pointer[NSString];
override externalClassMethod(#NSPropertyListSerialization, "propertyListFromData:mutabilityOption:format:errorDescription:") = Id, NSData, CULong, Pointer[CULong], Pointer[NSString];

record NSPropertySpecifier = externalClass(NSScriptObjectSpecifier);

record NSProtocolChecker = externalClass(NSProxy);
override externalInstanceMethod(#NSProtocolChecker, "protocol") = Id;
override externalInstanceMethod(#NSProtocolChecker, "target") = NSObject;
override externalClassMethod(#NSProtocolChecker, "protocolCheckerWithTarget:protocol:") = Id, NSObject, Id;
override externalInstanceMethod(#NSProtocolChecker, "initWithTarget:protocol:") = Id, NSObject, Id;

record NSProxy = externalClass(Void);
override externalInstanceMethod(#NSProxy, "isEqual:") = Bool, Id;
override externalInstanceMethod(#NSProxy, "hash") = CULong;
override externalInstanceMethod(#NSProxy, "superclass") = Id;
override externalInstanceMethod(#NSProxy, "class") = Id;
override externalInstanceMethod(#NSProxy, "self") = Id;
override externalInstanceMethod(#NSProxy, "zone") = Pointer[NSZone];
override externalInstanceMethod(#NSProxy, "performSelector:") = Id, SelectorHandle;
override externalInstanceMethod(#NSProxy, "performSelector:withObject:") = Id, SelectorHandle, Id;
override externalInstanceMethod(#NSProxy, "performSelector:withObject:withObject:") = Id, SelectorHandle, Id, Id;
override externalInstanceMethod(#NSProxy, "isProxy") = Bool;
override externalInstanceMethod(#NSProxy, "isKindOfClass:") = Bool, Id;
override externalInstanceMethod(#NSProxy, "isMemberOfClass:") = Bool, Id;
override externalInstanceMethod(#NSProxy, "conformsToProtocol:") = Bool, Id;
override externalInstanceMethod(#NSProxy, "respondsToSelector:") = Bool, SelectorHandle;
override externalInstanceMethod(#NSProxy, "retain") = Id;
override externalInstanceMethod(#NSProxy, "release") = Void;
override externalInstanceMethod(#NSProxy, "autorelease") = Id;
override externalInstanceMethod(#NSProxy, "retainCount") = CULong;
override externalInstanceMethod(#NSProxy, "description") = NSString;
override externalClassMethod(#NSProxy, "alloc") = Id;
override externalClassMethod(#NSProxy, "allocWithZone:") = Id, Pointer[NSZone];
override externalClassMethod(#NSProxy, "class") = Id;
override externalInstanceMethod(#NSProxy, "forwardInvocation:") = Void, NSInvocation;
override externalInstanceMethod(#NSProxy, "methodSignatureForSelector:") = NSMethodSignature, SelectorHandle;
override externalInstanceMethod(#NSProxy, "dealloc") = Void;
override externalInstanceMethod(#NSProxy, "finalize") = Void;
override externalInstanceMethod(#NSProxy, "description") = NSString;
override externalClassMethod(#NSProxy, "respondsToSelector:") = Bool, SelectorHandle;

record NSPurgeableData = externalClass(NSMutableData);
override externalInstanceMethod(#NSPurgeableData, "beginContentAccess") = Bool;
override externalInstanceMethod(#NSPurgeableData, "endContentAccess") = Void;
override externalInstanceMethod(#NSPurgeableData, "discardContentIfPossible") = Void;
override externalInstanceMethod(#NSPurgeableData, "isContentDiscarded") = Bool;

record NSQuitCommand = externalClass(NSScriptCommand);
override externalInstanceMethod(#NSQuitCommand, "saveOptions") = CULong;

record NSRandomSpecifier = externalClass(NSScriptObjectSpecifier);

record NSRangeSpecifier = externalClass(NSScriptObjectSpecifier);
override externalInstanceMethod(#NSRangeSpecifier, "initWithContainerClassDescription:containerSpecifier:key:startSpecifier:endSpecifier:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, NSScriptObjectSpecifier, NSScriptObjectSpecifier;
override externalInstanceMethod(#NSRangeSpecifier, "startSpecifier") = NSScriptObjectSpecifier;
override externalInstanceMethod(#NSRangeSpecifier, "setStartSpecifier:") = Void, NSScriptObjectSpecifier;
override externalInstanceMethod(#NSRangeSpecifier, "endSpecifier") = NSScriptObjectSpecifier;
override externalInstanceMethod(#NSRangeSpecifier, "setEndSpecifier:") = Void, NSScriptObjectSpecifier;

record NSRecursiveLock = externalClass(NSObject);
override externalInstanceMethod(#NSRecursiveLock, "lock") = Void;
override externalInstanceMethod(#NSRecursiveLock, "unlock") = Void;
override externalInstanceMethod(#NSRecursiveLock, "tryLock") = Bool;
override externalInstanceMethod(#NSRecursiveLock, "lockBeforeDate:") = Bool, NSDate;
override externalInstanceMethod(#NSRecursiveLock, "setName:") = Void, NSString;
override externalInstanceMethod(#NSRecursiveLock, "name") = NSString;

record NSRelativeSpecifier = externalClass(NSScriptObjectSpecifier);
override externalInstanceMethod(#NSRelativeSpecifier, "initWithContainerClassDescription:containerSpecifier:key:relativePosition:baseSpecifier:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, CULong, NSScriptObjectSpecifier;
override externalInstanceMethod(#NSRelativeSpecifier, "relativePosition") = CULong;
override externalInstanceMethod(#NSRelativeSpecifier, "setRelativePosition:") = Void, CULong;
override externalInstanceMethod(#NSRelativeSpecifier, "baseSpecifier") = NSScriptObjectSpecifier;
override externalInstanceMethod(#NSRelativeSpecifier, "setBaseSpecifier:") = Void, NSScriptObjectSpecifier;

record NSRunLoop = externalClass(NSObject);
override externalClassMethod(#NSRunLoop, "currentRunLoop") = NSRunLoop;
override externalClassMethod(#NSRunLoop, "mainRunLoop") = NSRunLoop;
override externalInstanceMethod(#NSRunLoop, "currentMode") = NSString;
override externalInstanceMethod(#NSRunLoop, "getCFRunLoop") = CFRunLoopRef;
override externalInstanceMethod(#NSRunLoop, "addTimer:forMode:") = Void, NSTimer, NSString;
override externalInstanceMethod(#NSRunLoop, "addPort:forMode:") = Void, NSPort, NSString;
override externalInstanceMethod(#NSRunLoop, "removePort:forMode:") = Void, NSPort, NSString;
override externalInstanceMethod(#NSRunLoop, "limitDateForMode:") = NSDate, NSString;
override externalInstanceMethod(#NSRunLoop, "acceptInputForMode:beforeDate:") = Void, NSString, NSDate;
override externalInstanceMethod(#NSRunLoop, "run") = Void;
override externalInstanceMethod(#NSRunLoop, "runUntilDate:") = Void, NSDate;
override externalInstanceMethod(#NSRunLoop, "runMode:beforeDate:") = Bool, NSString, NSDate;
override externalInstanceMethod(#NSRunLoop, "configureAsServer") = Void;
override externalInstanceMethod(#NSRunLoop, "performSelector:target:argument:order:modes:") = Void, SelectorHandle, Id, Id, CULong, NSArray;
override externalInstanceMethod(#NSRunLoop, "cancelPerformSelector:target:argument:") = Void, SelectorHandle, Id, Id;
override externalInstanceMethod(#NSRunLoop, "cancelPerformSelectorsWithTarget:") = Void, Id;

record NSScanner = externalClass(NSObject);
override externalInstanceMethod(#NSScanner, "copyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSScanner, "string") = NSString;
override externalInstanceMethod(#NSScanner, "scanLocation") = CULong;
override externalInstanceMethod(#NSScanner, "setScanLocation:") = Void, CULong;
override externalInstanceMethod(#NSScanner, "setCharactersToBeSkipped:") = Void, NSCharacterSet;
override externalInstanceMethod(#NSScanner, "setCaseSensitive:") = Void, Bool;
override externalInstanceMethod(#NSScanner, "setLocale:") = Void, Id;
override externalInstanceMethod(#NSScanner, "charactersToBeSkipped") = NSCharacterSet;
override externalInstanceMethod(#NSScanner, "caseSensitive") = Bool;
override externalInstanceMethod(#NSScanner, "locale") = Id;
override externalInstanceMethod(#NSScanner, "scanInt:") = Bool, Pointer[Int];
override externalInstanceMethod(#NSScanner, "scanInteger:") = Bool, Pointer[CLong];
override externalInstanceMethod(#NSScanner, "scanHexLongLong:") = Bool, Pointer[UInt64];
override externalInstanceMethod(#NSScanner, "scanHexFloat:") = Bool, Pointer[Float];
override externalInstanceMethod(#NSScanner, "scanHexDouble:") = Bool, Pointer[Double];
override externalInstanceMethod(#NSScanner, "scanHexInt:") = Bool, Pointer[UInt];
override externalInstanceMethod(#NSScanner, "scanLongLong:") = Bool, Pointer[Int64];
override externalInstanceMethod(#NSScanner, "scanFloat:") = Bool, Pointer[Float];
override externalInstanceMethod(#NSScanner, "scanDouble:") = Bool, Pointer[Double];
override externalInstanceMethod(#NSScanner, "scanString:intoString:") = Bool, NSString, Pointer[NSString];
override externalInstanceMethod(#NSScanner, "scanCharactersFromSet:intoString:") = Bool, NSCharacterSet, Pointer[NSString];
override externalInstanceMethod(#NSScanner, "scanUpToString:intoString:") = Bool, NSString, Pointer[NSString];
override externalInstanceMethod(#NSScanner, "scanUpToCharactersFromSet:intoString:") = Bool, NSCharacterSet, Pointer[NSString];
override externalInstanceMethod(#NSScanner, "isAtEnd") = Bool;
override externalInstanceMethod(#NSScanner, "initWithString:") = Id, NSString;
override externalClassMethod(#NSScanner, "scannerWithString:") = Id, NSString;
override externalClassMethod(#NSScanner, "localizedScannerWithString:") = Id, NSString;
override externalInstanceMethod(#NSScanner, "scanDecimal:") = Bool, Pointer[NSDecimal];

record NSScriptClassDescription = externalClass(NSClassDescription);
override externalClassMethod(#NSScriptClassDescription, "classDescriptionForClass:") = NSScriptClassDescription, Id;
override externalInstanceMethod(#NSScriptClassDescription, "initWithSuiteName:className:dictionary:") = Id, NSString, NSString, NSDictionary;
override externalInstanceMethod(#NSScriptClassDescription, "suiteName") = NSString;
override externalInstanceMethod(#NSScriptClassDescription, "className") = NSString;
override externalInstanceMethod(#NSScriptClassDescription, "implementationClassName") = NSString;
override externalInstanceMethod(#NSScriptClassDescription, "superclassDescription") = NSScriptClassDescription;
override externalInstanceMethod(#NSScriptClassDescription, "appleEventCode") = UInt;
override externalInstanceMethod(#NSScriptClassDescription, "matchesAppleEventCode:") = Bool, UInt;
override externalInstanceMethod(#NSScriptClassDescription, "supportsCommand:") = Bool, NSScriptCommandDescription;
override externalInstanceMethod(#NSScriptClassDescription, "selectorForCommand:") = SelectorHandle, NSScriptCommandDescription;
override externalInstanceMethod(#NSScriptClassDescription, "typeForKey:") = NSString, NSString;
override externalInstanceMethod(#NSScriptClassDescription, "classDescriptionForKey:") = NSScriptClassDescription, NSString;
override externalInstanceMethod(#NSScriptClassDescription, "appleEventCodeForKey:") = UInt, NSString;
override externalInstanceMethod(#NSScriptClassDescription, "keyWithAppleEventCode:") = NSString, UInt;
override externalInstanceMethod(#NSScriptClassDescription, "defaultSubcontainerAttributeKey") = NSString;
override externalInstanceMethod(#NSScriptClassDescription, "isLocationRequiredToCreateForKey:") = Bool, NSString;
override externalInstanceMethod(#NSScriptClassDescription, "hasPropertyForKey:") = Bool, NSString;
override externalInstanceMethod(#NSScriptClassDescription, "hasOrderedToManyRelationshipForKey:") = Bool, NSString;
override externalInstanceMethod(#NSScriptClassDescription, "hasReadablePropertyForKey:") = Bool, NSString;
override externalInstanceMethod(#NSScriptClassDescription, "hasWritablePropertyForKey:") = Bool, NSString;
override externalInstanceMethod(#NSScriptClassDescription, "isReadOnlyKey:") = Bool, NSString;

record NSScriptCoercionHandler = externalClass(NSObject);
override externalClassMethod(#NSScriptCoercionHandler, "sharedCoercionHandler") = NSScriptCoercionHandler;
override externalInstanceMethod(#NSScriptCoercionHandler, "coerceValue:toClass:") = Id, Id, Id;
override externalInstanceMethod(#NSScriptCoercionHandler, "registerCoercer:selector:toConvertFromClass:toClass:") = Void, Id, SelectorHandle, Id, Id;

record NSScriptCommand = externalClass(NSObject);
override externalInstanceMethod(#NSScriptCommand, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSScriptCommand, "initWithCoder:") = Id, NSCoder;
override externalInstanceMethod(#NSScriptCommand, "initWithCommandDescription:") = Id, NSScriptCommandDescription;
override externalInstanceMethod(#NSScriptCommand, "commandDescription") = NSScriptCommandDescription;
override externalInstanceMethod(#NSScriptCommand, "setDirectParameter:") = Void, Id;
override externalInstanceMethod(#NSScriptCommand, "directParameter") = Id;
override externalInstanceMethod(#NSScriptCommand, "setReceiversSpecifier:") = Void, NSScriptObjectSpecifier;
override externalInstanceMethod(#NSScriptCommand, "receiversSpecifier") = NSScriptObjectSpecifier;
override externalInstanceMethod(#NSScriptCommand, "evaluatedReceivers") = Id;
override externalInstanceMethod(#NSScriptCommand, "setArguments:") = Void, NSDictionary;
override externalInstanceMethod(#NSScriptCommand, "arguments") = NSDictionary;
override externalInstanceMethod(#NSScriptCommand, "evaluatedArguments") = NSDictionary;
override externalInstanceMethod(#NSScriptCommand, "isWellFormed") = Bool;
override externalInstanceMethod(#NSScriptCommand, "performDefaultImplementation") = Id;
override externalInstanceMethod(#NSScriptCommand, "executeCommand") = Id;
override externalInstanceMethod(#NSScriptCommand, "setScriptErrorNumber:") = Void, Int;
override externalInstanceMethod(#NSScriptCommand, "setScriptErrorOffendingObjectDescriptor:") = Void, NSAppleEventDescriptor;
override externalInstanceMethod(#NSScriptCommand, "setScriptErrorExpectedTypeDescriptor:") = Void, NSAppleEventDescriptor;
override externalInstanceMethod(#NSScriptCommand, "setScriptErrorString:") = Void, NSString;
override externalInstanceMethod(#NSScriptCommand, "scriptErrorNumber") = Int;
override externalInstanceMethod(#NSScriptCommand, "scriptErrorOffendingObjectDescriptor") = NSAppleEventDescriptor;
override externalInstanceMethod(#NSScriptCommand, "scriptErrorExpectedTypeDescriptor") = NSAppleEventDescriptor;
override externalInstanceMethod(#NSScriptCommand, "scriptErrorString") = NSString;
override externalClassMethod(#NSScriptCommand, "currentCommand") = NSScriptCommand;
override externalInstanceMethod(#NSScriptCommand, "appleEvent") = NSAppleEventDescriptor;
override externalInstanceMethod(#NSScriptCommand, "suspendExecution") = Void;
override externalInstanceMethod(#NSScriptCommand, "resumeExecutionWithResult:") = Void, Id;

record NSScriptCommandDescription = externalClass(NSObject);
override externalInstanceMethod(#NSScriptCommandDescription, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSScriptCommandDescription, "initWithCoder:") = Id, NSCoder;
override externalInstanceMethod(#NSScriptCommandDescription, "initWithSuiteName:commandName:dictionary:") = Id, NSString, NSString, NSDictionary;
override externalInstanceMethod(#NSScriptCommandDescription, "suiteName") = NSString;
override externalInstanceMethod(#NSScriptCommandDescription, "commandName") = NSString;
override externalInstanceMethod(#NSScriptCommandDescription, "appleEventClassCode") = UInt;
override externalInstanceMethod(#NSScriptCommandDescription, "appleEventCode") = UInt;
override externalInstanceMethod(#NSScriptCommandDescription, "commandClassName") = NSString;
override externalInstanceMethod(#NSScriptCommandDescription, "returnType") = NSString;
override externalInstanceMethod(#NSScriptCommandDescription, "appleEventCodeForReturnType") = UInt;
override externalInstanceMethod(#NSScriptCommandDescription, "argumentNames") = NSArray;
override externalInstanceMethod(#NSScriptCommandDescription, "typeForArgumentWithName:") = NSString, NSString;
override externalInstanceMethod(#NSScriptCommandDescription, "appleEventCodeForArgumentWithName:") = UInt, NSString;
override externalInstanceMethod(#NSScriptCommandDescription, "isOptionalArgumentWithName:") = Bool, NSString;
override externalInstanceMethod(#NSScriptCommandDescription, "createCommandInstance") = NSScriptCommand;
override externalInstanceMethod(#NSScriptCommandDescription, "createCommandInstanceWithZone:") = NSScriptCommand, Pointer[NSZone];

record NSScriptExecutionContext = externalClass(NSObject);
override externalClassMethod(#NSScriptExecutionContext, "sharedScriptExecutionContext") = NSScriptExecutionContext;
override externalInstanceMethod(#NSScriptExecutionContext, "topLevelObject") = Id;
override externalInstanceMethod(#NSScriptExecutionContext, "setTopLevelObject:") = Void, Id;
override externalInstanceMethod(#NSScriptExecutionContext, "objectBeingTested") = Id;
override externalInstanceMethod(#NSScriptExecutionContext, "setObjectBeingTested:") = Void, Id;
override externalInstanceMethod(#NSScriptExecutionContext, "rangeContainerObject") = Id;
override externalInstanceMethod(#NSScriptExecutionContext, "setRangeContainerObject:") = Void, Id;

record NSScriptObjectSpecifier = externalClass(NSObject);
override externalInstanceMethod(#NSScriptObjectSpecifier, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSScriptObjectSpecifier, "initWithCoder:") = Id, NSCoder;
override externalClassMethod(#NSScriptObjectSpecifier, "objectSpecifierWithDescriptor:") = NSScriptObjectSpecifier, NSAppleEventDescriptor;
override externalInstanceMethod(#NSScriptObjectSpecifier, "initWithContainerSpecifier:key:") = Id, NSScriptObjectSpecifier, NSString;
override externalInstanceMethod(#NSScriptObjectSpecifier, "initWithContainerClassDescription:containerSpecifier:key:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString;
override externalInstanceMethod(#NSScriptObjectSpecifier, "childSpecifier") = NSScriptObjectSpecifier;
override externalInstanceMethod(#NSScriptObjectSpecifier, "setChildSpecifier:") = Void, NSScriptObjectSpecifier;
override externalInstanceMethod(#NSScriptObjectSpecifier, "containerSpecifier") = NSScriptObjectSpecifier;
override externalInstanceMethod(#NSScriptObjectSpecifier, "setContainerSpecifier:") = Void, NSScriptObjectSpecifier;
override externalInstanceMethod(#NSScriptObjectSpecifier, "containerIsObjectBeingTested") = Bool;
override externalInstanceMethod(#NSScriptObjectSpecifier, "setContainerIsObjectBeingTested:") = Void, Bool;
override externalInstanceMethod(#NSScriptObjectSpecifier, "containerIsRangeContainerObject") = Bool;
override externalInstanceMethod(#NSScriptObjectSpecifier, "setContainerIsRangeContainerObject:") = Void, Bool;
override externalInstanceMethod(#NSScriptObjectSpecifier, "key") = NSString;
override externalInstanceMethod(#NSScriptObjectSpecifier, "setKey:") = Void, NSString;
override externalInstanceMethod(#NSScriptObjectSpecifier, "containerClassDescription") = NSScriptClassDescription;
override externalInstanceMethod(#NSScriptObjectSpecifier, "setContainerClassDescription:") = Void, NSScriptClassDescription;
override externalInstanceMethod(#NSScriptObjectSpecifier, "keyClassDescription") = NSScriptClassDescription;
override externalInstanceMethod(#NSScriptObjectSpecifier, "indicesOfObjectsByEvaluatingWithContainer:count:") = Pointer[CLong], Id, Pointer[CLong];
override externalInstanceMethod(#NSScriptObjectSpecifier, "objectsByEvaluatingWithContainers:") = Id, Id;
override externalInstanceMethod(#NSScriptObjectSpecifier, "objectsByEvaluatingSpecifier") = Id;
override externalInstanceMethod(#NSScriptObjectSpecifier, "evaluationErrorNumber") = CLong;
override externalInstanceMethod(#NSScriptObjectSpecifier, "setEvaluationErrorNumber:") = Void, CLong;
override externalInstanceMethod(#NSScriptObjectSpecifier, "evaluationErrorSpecifier") = NSScriptObjectSpecifier;
override externalInstanceMethod(#NSScriptObjectSpecifier, "descriptor") = NSAppleEventDescriptor;

record NSScriptSuiteRegistry = externalClass(NSObject);
override externalClassMethod(#NSScriptSuiteRegistry, "sharedScriptSuiteRegistry") = NSScriptSuiteRegistry;
override externalClassMethod(#NSScriptSuiteRegistry, "setSharedScriptSuiteRegistry:") = Void, NSScriptSuiteRegistry;
override externalInstanceMethod(#NSScriptSuiteRegistry, "loadSuitesFromBundle:") = Void, NSBundle;
override externalInstanceMethod(#NSScriptSuiteRegistry, "loadSuiteWithDictionary:fromBundle:") = Void, NSDictionary, NSBundle;
override externalInstanceMethod(#NSScriptSuiteRegistry, "registerClassDescription:") = Void, NSScriptClassDescription;
override externalInstanceMethod(#NSScriptSuiteRegistry, "registerCommandDescription:") = Void, NSScriptCommandDescription;
override externalInstanceMethod(#NSScriptSuiteRegistry, "suiteNames") = NSArray;
override externalInstanceMethod(#NSScriptSuiteRegistry, "appleEventCodeForSuite:") = UInt, NSString;
override externalInstanceMethod(#NSScriptSuiteRegistry, "bundleForSuite:") = NSBundle, NSString;
override externalInstanceMethod(#NSScriptSuiteRegistry, "classDescriptionsInSuite:") = NSDictionary, NSString;
override externalInstanceMethod(#NSScriptSuiteRegistry, "commandDescriptionsInSuite:") = NSDictionary, NSString;
override externalInstanceMethod(#NSScriptSuiteRegistry, "suiteForAppleEventCode:") = NSString, UInt;
override externalInstanceMethod(#NSScriptSuiteRegistry, "classDescriptionWithAppleEventCode:") = NSScriptClassDescription, UInt;
override externalInstanceMethod(#NSScriptSuiteRegistry, "commandDescriptionWithAppleEventClass:andAppleEventCode:") = NSScriptCommandDescription, UInt, UInt;
override externalInstanceMethod(#NSScriptSuiteRegistry, "aeteResource:") = NSData, NSString;

record NSScriptWhoseTest = externalClass(NSObject);
override externalInstanceMethod(#NSScriptWhoseTest, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSScriptWhoseTest, "initWithCoder:") = Id, NSCoder;
override externalInstanceMethod(#NSScriptWhoseTest, "isTrue") = Bool;

record NSSet = externalClass(NSObject);
override externalInstanceMethod(#NSSet, "copyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSSet, "mutableCopyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSSet, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSSet, "initWithCoder:") = Id, NSCoder;
override externalInstanceMethod(#NSSet, "countByEnumeratingWithState:objects:count:") = CULong, Pointer[NSFastEnumerationState], Pointer[Id], CULong;
override externalInstanceMethod(#NSSet, "count") = CULong;
override externalInstanceMethod(#NSSet, "member:") = Id, Id;
override externalInstanceMethod(#NSSet, "objectEnumerator") = NSEnumerator;
override externalInstanceMethod(#NSSet, "allObjects") = NSArray;
override externalInstanceMethod(#NSSet, "anyObject") = Id;
override externalInstanceMethod(#NSSet, "containsObject:") = Bool, Id;
override externalInstanceMethod(#NSSet, "description") = NSString;
override externalInstanceMethod(#NSSet, "descriptionWithLocale:") = NSString, Id;
override externalInstanceMethod(#NSSet, "intersectsSet:") = Bool, NSSet;
override externalInstanceMethod(#NSSet, "isEqualToSet:") = Bool, NSSet;
override externalInstanceMethod(#NSSet, "isSubsetOfSet:") = Bool, NSSet;
override externalInstanceMethod(#NSSet, "makeObjectsPerformSelector:") = Void, SelectorHandle;
override externalInstanceMethod(#NSSet, "makeObjectsPerformSelector:withObject:") = Void, SelectorHandle, Id;
override externalInstanceMethod(#NSSet, "setByAddingObject:") = NSSet, Id;
override externalInstanceMethod(#NSSet, "setByAddingObjectsFromSet:") = NSSet, NSSet;
override externalInstanceMethod(#NSSet, "setByAddingObjectsFromArray:") = NSSet, NSArray;
override externalInstanceMethod(#NSSet, "enumerateObjectsUsingBlock:") = Void, UnknownType;
override externalInstanceMethod(#NSSet, "enumerateObjectsWithOptions:usingBlock:") = Void, CULong, UnknownType;
override externalInstanceMethod(#NSSet, "objectsPassingTest:") = NSSet, UnknownType;
override externalInstanceMethod(#NSSet, "objectsWithOptions:passingTest:") = NSSet, CULong, UnknownType;
override externalClassMethod(#NSSet, "set") = Id;
override externalClassMethod(#NSSet, "setWithObject:") = Id, Id;
override externalClassMethod(#NSSet, "setWithObjects:count:") = Id, Pointer[Id], CULong;
override externalVarargClassMethod(#NSSet, "setWithObjects:") = Id, Id;
override externalClassMethod(#NSSet, "setWithSet:") = Id, NSSet;
override externalClassMethod(#NSSet, "setWithArray:") = Id, NSArray;
override externalInstanceMethod(#NSSet, "initWithObjects:count:") = Id, Pointer[Id], CULong;
override externalVarargInstanceMethod(#NSSet, "initWithObjects:") = Id, Id;
override externalInstanceMethod(#NSSet, "initWithSet:") = Id, NSSet;
override externalInstanceMethod(#NSSet, "initWithSet:copyItems:") = Id, NSSet, Bool;
override externalInstanceMethod(#NSSet, "initWithArray:") = Id, NSArray;
override externalInstanceMethod(#NSSet, "valueForKey:") = Id, NSString;
override externalInstanceMethod(#NSSet, "setValue:forKey:") = Void, Id, NSString;
override externalInstanceMethod(#NSSet, "addObserver:forKeyPath:options:context:") = Void, NSObject, NSString, CULong, RawPointer;
override externalInstanceMethod(#NSSet, "removeObserver:forKeyPath:") = Void, NSObject, NSString;
override externalInstanceMethod(#NSSet, "sortedArrayUsingDescriptors:") = NSArray, NSArray;
override externalInstanceMethod(#NSSet, "filteredSetUsingPredicate:") = NSSet, NSPredicate;

record NSSetCommand = externalClass(NSScriptCommand);
override externalInstanceMethod(#NSSetCommand, "setReceiversSpecifier:") = Void, NSScriptObjectSpecifier;
override externalInstanceMethod(#NSSetCommand, "keySpecifier") = NSScriptObjectSpecifier;

record NSSimpleCString = externalClass(NSString);

record NSSocketPort = externalClass(NSPort);
override externalInstanceMethod(#NSSocketPort, "init") = Id;
override externalInstanceMethod(#NSSocketPort, "initWithTCPPort:") = Id, UShort;
override externalInstanceMethod(#NSSocketPort, "initWithProtocolFamily:socketType:protocol:address:") = Id, Int, Int, Int, NSData;
override externalInstanceMethod(#NSSocketPort, "initWithProtocolFamily:socketType:protocol:socket:") = Id, Int, Int, Int, Int;
override externalInstanceMethod(#NSSocketPort, "initRemoteWithTCPPort:host:") = Id, UShort, NSString;
override externalInstanceMethod(#NSSocketPort, "initRemoteWithProtocolFamily:socketType:protocol:address:") = Id, Int, Int, Int, NSData;
override externalInstanceMethod(#NSSocketPort, "protocolFamily") = Int;
override externalInstanceMethod(#NSSocketPort, "socketType") = Int;
override externalInstanceMethod(#NSSocketPort, "protocol") = Int;
override externalInstanceMethod(#NSSocketPort, "address") = NSData;
override externalInstanceMethod(#NSSocketPort, "socket") = Int;

record NSSocketPortNameServer = externalClass(NSPortNameServer);
override externalClassMethod(#NSSocketPortNameServer, "sharedInstance") = Id;
override externalInstanceMethod(#NSSocketPortNameServer, "portForName:") = NSPort, NSString;
override externalInstanceMethod(#NSSocketPortNameServer, "portForName:host:") = NSPort, NSString, NSString;
override externalInstanceMethod(#NSSocketPortNameServer, "registerPort:name:") = Bool, NSPort, NSString;
override externalInstanceMethod(#NSSocketPortNameServer, "removePortForName:") = Bool, NSString;
override externalInstanceMethod(#NSSocketPortNameServer, "portForName:host:nameServerPortNumber:") = NSPort, NSString, NSString, UShort;
override externalInstanceMethod(#NSSocketPortNameServer, "registerPort:name:nameServerPortNumber:") = Bool, NSPort, NSString, UShort;
override externalInstanceMethod(#NSSocketPortNameServer, "setDefaultNameServerPortNumber:") = Void, UShort;
override externalInstanceMethod(#NSSocketPortNameServer, "defaultNameServerPortNumber") = UShort;

record NSSortDescriptor = externalClass(NSObject);
override externalInstanceMethod(#NSSortDescriptor, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSSortDescriptor, "initWithCoder:") = Id, NSCoder;
override externalInstanceMethod(#NSSortDescriptor, "copyWithZone:") = Id, Pointer[NSZone];
override externalClassMethod(#NSSortDescriptor, "sortDescriptorWithKey:ascending:") = Id, NSString, Bool;
override externalClassMethod(#NSSortDescriptor, "sortDescriptorWithKey:ascending:selector:") = Id, NSString, Bool, SelectorHandle;
override externalInstanceMethod(#NSSortDescriptor, "initWithKey:ascending:") = Id, NSString, Bool;
override externalInstanceMethod(#NSSortDescriptor, "initWithKey:ascending:selector:") = Id, NSString, Bool, SelectorHandle;
override externalInstanceMethod(#NSSortDescriptor, "key") = NSString;
override externalInstanceMethod(#NSSortDescriptor, "ascending") = Bool;
override externalInstanceMethod(#NSSortDescriptor, "selector") = SelectorHandle;
override externalClassMethod(#NSSortDescriptor, "sortDescriptorWithKey:ascending:comparator:") = Id, NSString, Bool, NSComparator;
override externalInstanceMethod(#NSSortDescriptor, "initWithKey:ascending:comparator:") = Id, NSString, Bool, NSComparator;
override externalInstanceMethod(#NSSortDescriptor, "comparator") = NSComparator;
override externalInstanceMethod(#NSSortDescriptor, "compareObject:toObject:") = CLong, Id, Id;
override externalInstanceMethod(#NSSortDescriptor, "reversedSortDescriptor") = Id;

record NSSpecifierTest = externalClass(NSScriptWhoseTest);
override externalInstanceMethod(#NSSpecifierTest, "initWithObjectSpecifier:comparisonOperator:testObject:") = Id, NSScriptObjectSpecifier, CULong, Id;

record NSSpellServer = externalClass(NSObject);
override externalInstanceMethod(#NSSpellServer, "setDelegate:") = Void, Id;
override externalInstanceMethod(#NSSpellServer, "delegate") = Id;
override externalInstanceMethod(#NSSpellServer, "registerLanguage:byVendor:") = Bool, NSString, NSString;
override externalInstanceMethod(#NSSpellServer, "isWordInUserDictionaries:caseSensitive:") = Bool, NSString, Bool;
override externalInstanceMethod(#NSSpellServer, "run") = Void;

record NSStream = externalClass(NSObject);
override externalInstanceMethod(#NSStream, "open") = Void;
override externalInstanceMethod(#NSStream, "close") = Void;
override externalInstanceMethod(#NSStream, "delegate") = Id;
override externalInstanceMethod(#NSStream, "setDelegate:") = Void, Id;
override externalInstanceMethod(#NSStream, "propertyForKey:") = Id, NSString;
override externalInstanceMethod(#NSStream, "setProperty:forKey:") = Bool, Id, NSString;
override externalInstanceMethod(#NSStream, "scheduleInRunLoop:forMode:") = Void, NSRunLoop, NSString;
override externalInstanceMethod(#NSStream, "removeFromRunLoop:forMode:") = Void, NSRunLoop, NSString;
override externalInstanceMethod(#NSStream, "streamStatus") = CULong;
override externalInstanceMethod(#NSStream, "streamError") = NSError;
override externalClassMethod(#NSStream, "getStreamsToHost:port:inputStream:outputStream:") = Void, NSHost, CLong, Pointer[NSInputStream], Pointer[NSOutputStream];

record NSString = externalClass(NSObject);
override externalInstanceMethod(#NSString, "copyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSString, "mutableCopyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSString, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSString, "initWithCoder:") = Id, NSCoder;
override externalInstanceMethod(#NSString, "length") = CULong;
override externalInstanceMethod(#NSString, "characterAtIndex:") = UShort, CULong;
override externalInstanceMethod(#NSString, "getCharacters:range:") = Void, Pointer[UShort], NSRange;
override externalInstanceMethod(#NSString, "substringFromIndex:") = NSString, CULong;
override externalInstanceMethod(#NSString, "substringToIndex:") = NSString, CULong;
override externalInstanceMethod(#NSString, "substringWithRange:") = NSString, NSRange;
override externalInstanceMethod(#NSString, "compare:") = CLong, NSString;
override externalInstanceMethod(#NSString, "compare:options:") = CLong, NSString, CULong;
override externalInstanceMethod(#NSString, "compare:options:range:") = CLong, NSString, CULong, NSRange;
override externalInstanceMethod(#NSString, "compare:options:range:locale:") = CLong, NSString, CULong, NSRange, Id;
override externalInstanceMethod(#NSString, "caseInsensitiveCompare:") = CLong, NSString;
override externalInstanceMethod(#NSString, "localizedCompare:") = CLong, NSString;
override externalInstanceMethod(#NSString, "localizedCaseInsensitiveCompare:") = CLong, NSString;
override externalInstanceMethod(#NSString, "localizedStandardCompare:") = CLong, NSString;
override externalInstanceMethod(#NSString, "isEqualToString:") = Bool, NSString;
override externalInstanceMethod(#NSString, "hasPrefix:") = Bool, NSString;
override externalInstanceMethod(#NSString, "hasSuffix:") = Bool, NSString;
override externalInstanceMethod(#NSString, "rangeOfString:") = NSRange, NSString;
override externalInstanceMethod(#NSString, "rangeOfString:options:") = NSRange, NSString, CULong;
override externalInstanceMethod(#NSString, "rangeOfString:options:range:") = NSRange, NSString, CULong, NSRange;
override externalInstanceMethod(#NSString, "rangeOfString:options:range:locale:") = NSRange, NSString, CULong, NSRange, NSLocale;
override externalInstanceMethod(#NSString, "rangeOfCharacterFromSet:") = NSRange, NSCharacterSet;
override externalInstanceMethod(#NSString, "rangeOfCharacterFromSet:options:") = NSRange, NSCharacterSet, CULong;
override externalInstanceMethod(#NSString, "rangeOfCharacterFromSet:options:range:") = NSRange, NSCharacterSet, CULong, NSRange;
override externalInstanceMethod(#NSString, "rangeOfComposedCharacterSequenceAtIndex:") = NSRange, CULong;
override externalInstanceMethod(#NSString, "rangeOfComposedCharacterSequencesForRange:") = NSRange, NSRange;
override externalInstanceMethod(#NSString, "stringByAppendingString:") = NSString, NSString;
override externalVarargInstanceMethod(#NSString, "stringByAppendingFormat:") = NSString, NSString;
override externalInstanceMethod(#NSString, "doubleValue") = Double;
override externalInstanceMethod(#NSString, "floatValue") = Float;
override externalInstanceMethod(#NSString, "intValue") = Int;
override externalInstanceMethod(#NSString, "integerValue") = CLong;
override externalInstanceMethod(#NSString, "longLongValue") = Int64;
override externalInstanceMethod(#NSString, "boolValue") = Bool;
override externalInstanceMethod(#NSString, "componentsSeparatedByString:") = NSArray, NSString;
override externalInstanceMethod(#NSString, "componentsSeparatedByCharactersInSet:") = NSArray, NSCharacterSet;
override externalInstanceMethod(#NSString, "commonPrefixWithString:options:") = NSString, NSString, CULong;
override externalInstanceMethod(#NSString, "uppercaseString") = NSString;
override externalInstanceMethod(#NSString, "lowercaseString") = NSString;
override externalInstanceMethod(#NSString, "capitalizedString") = NSString;
override externalInstanceMethod(#NSString, "stringByTrimmingCharactersInSet:") = NSString, NSCharacterSet;
override externalInstanceMethod(#NSString, "stringByPaddingToLength:withString:startingAtIndex:") = NSString, CULong, NSString, CULong;
override externalInstanceMethod(#NSString, "getLineStart:end:contentsEnd:forRange:") = Void, Pointer[CULong], Pointer[CULong], Pointer[CULong], NSRange;
override externalInstanceMethod(#NSString, "lineRangeForRange:") = NSRange, NSRange;
override externalInstanceMethod(#NSString, "getParagraphStart:end:contentsEnd:forRange:") = Void, Pointer[CULong], Pointer[CULong], Pointer[CULong], NSRange;
override externalInstanceMethod(#NSString, "paragraphRangeForRange:") = NSRange, NSRange;
override externalInstanceMethod(#NSString, "enumerateSubstringsInRange:options:usingBlock:") = Void, NSRange, CULong, UnknownType;
override externalInstanceMethod(#NSString, "enumerateLinesUsingBlock:") = Void, UnknownType;
override externalInstanceMethod(#NSString, "description") = NSString;
override externalInstanceMethod(#NSString, "hash") = CULong;
override externalInstanceMethod(#NSString, "fastestEncoding") = CULong;
override externalInstanceMethod(#NSString, "smallestEncoding") = CULong;
override externalInstanceMethod(#NSString, "dataUsingEncoding:allowLossyConversion:") = NSData, CULong, Bool;
override externalInstanceMethod(#NSString, "dataUsingEncoding:") = NSData, CULong;
override externalInstanceMethod(#NSString, "canBeConvertedToEncoding:") = Bool, CULong;
override externalInstanceMethod(#NSString, "cStringUsingEncoding:") = Pointer[CChar], CULong;
override externalInstanceMethod(#NSString, "getCString:maxLength:encoding:") = Bool, Pointer[CChar], CULong, CULong;
override externalInstanceMethod(#NSString, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:") = Bool, RawPointer, CULong, Pointer[CULong], CULong, CULong, NSRange, NSRangePointer;
override externalInstanceMethod(#NSString, "maximumLengthOfBytesUsingEncoding:") = CULong, CULong;
override externalInstanceMethod(#NSString, "lengthOfBytesUsingEncoding:") = CULong, CULong;
override externalInstanceMethod(#NSString, "decomposedStringWithCanonicalMapping") = NSString;
override externalInstanceMethod(#NSString, "precomposedStringWithCanonicalMapping") = NSString;
override externalInstanceMethod(#NSString, "decomposedStringWithCompatibilityMapping") = NSString;
override externalInstanceMethod(#NSString, "precomposedStringWithCompatibilityMapping") = NSString;
override externalInstanceMethod(#NSString, "stringByFoldingWithOptions:locale:") = NSString, CULong, NSLocale;
override externalInstanceMethod(#NSString, "stringByReplacingOccurrencesOfString:withString:options:range:") = NSString, NSString, NSString, CULong, NSRange;
override externalInstanceMethod(#NSString, "stringByReplacingOccurrencesOfString:withString:") = NSString, NSString, NSString;
override externalInstanceMethod(#NSString, "stringByReplacingCharactersInRange:withString:") = NSString, NSRange, NSString;
override externalInstanceMethod(#NSString, "UTF8String") = Pointer[CChar];
override externalClassMethod(#NSString, "defaultCStringEncoding") = CULong;
override externalClassMethod(#NSString, "availableStringEncodings") = Pointer[CULong];
override externalClassMethod(#NSString, "localizedNameOfStringEncoding:") = NSString, CULong;
override externalInstanceMethod(#NSString, "init") = Id;
override externalInstanceMethod(#NSString, "initWithCharactersNoCopy:length:freeWhenDone:") = Id, Pointer[UShort], CULong, Bool;
override externalInstanceMethod(#NSString, "initWithCharacters:length:") = Id, Pointer[UShort], CULong;
override externalInstanceMethod(#NSString, "initWithUTF8String:") = Id, Pointer[CChar];
override externalInstanceMethod(#NSString, "initWithString:") = Id, NSString;
override externalVarargInstanceMethod(#NSString, "initWithFormat:") = Id, NSString;
override externalInstanceMethod(#NSString, "initWithFormat:arguments:") = Id, NSString, Pointer[__va_list_tag];
override externalVarargInstanceMethod(#NSString, "initWithFormat:locale:") = Id, NSString, Id;
override externalInstanceMethod(#NSString, "initWithFormat:locale:arguments:") = Id, NSString, Id, Pointer[__va_list_tag];
override externalInstanceMethod(#NSString, "initWithData:encoding:") = Id, NSData, CULong;
override externalInstanceMethod(#NSString, "initWithBytes:length:encoding:") = Id, RawPointer, CULong, CULong;
override externalInstanceMethod(#NSString, "initWithBytesNoCopy:length:encoding:freeWhenDone:") = Id, RawPointer, CULong, CULong, Bool;
override externalClassMethod(#NSString, "string") = Id;
override externalClassMethod(#NSString, "stringWithString:") = Id, NSString;
override externalClassMethod(#NSString, "stringWithCharacters:length:") = Id, Pointer[UShort], CULong;
override externalClassMethod(#NSString, "stringWithUTF8String:") = Id, Pointer[CChar];
override externalVarargClassMethod(#NSString, "stringWithFormat:") = Id, NSString;
override externalVarargClassMethod(#NSString, "localizedStringWithFormat:") = Id, NSString;
override externalInstanceMethod(#NSString, "initWithCString:encoding:") = Id, Pointer[CChar], CULong;
override externalClassMethod(#NSString, "stringWithCString:encoding:") = Id, Pointer[CChar], CULong;
override externalInstanceMethod(#NSString, "initWithContentsOfURL:encoding:error:") = Id, NSURL, CULong, Pointer[NSError];
override externalInstanceMethod(#NSString, "initWithContentsOfFile:encoding:error:") = Id, NSString, CULong, Pointer[NSError];
override externalClassMethod(#NSString, "stringWithContentsOfURL:encoding:error:") = Id, NSURL, CULong, Pointer[NSError];
override externalClassMethod(#NSString, "stringWithContentsOfFile:encoding:error:") = Id, NSString, CULong, Pointer[NSError];
override externalInstanceMethod(#NSString, "initWithContentsOfURL:usedEncoding:error:") = Id, NSURL, Pointer[CULong], Pointer[NSError];
override externalInstanceMethod(#NSString, "initWithContentsOfFile:usedEncoding:error:") = Id, NSString, Pointer[CULong], Pointer[NSError];
override externalClassMethod(#NSString, "stringWithContentsOfURL:usedEncoding:error:") = Id, NSURL, Pointer[CULong], Pointer[NSError];
override externalClassMethod(#NSString, "stringWithContentsOfFile:usedEncoding:error:") = Id, NSString, Pointer[CULong], Pointer[NSError];
override externalInstanceMethod(#NSString, "writeToURL:atomically:encoding:error:") = Bool, NSURL, Bool, CULong, Pointer[NSError];
override externalInstanceMethod(#NSString, "writeToFile:atomically:encoding:error:") = Bool, NSString, Bool, CULong, Pointer[NSError];
override externalInstanceMethod(#NSString, "propertyList") = Id;
override externalInstanceMethod(#NSString, "propertyListFromStringsFileFormat") = NSDictionary;
override externalInstanceMethod(#NSString, "cString") = Pointer[CChar];
override externalInstanceMethod(#NSString, "lossyCString") = Pointer[CChar];
override externalInstanceMethod(#NSString, "cStringLength") = CULong;
override externalInstanceMethod(#NSString, "getCString:") = Void, Pointer[CChar];
override externalInstanceMethod(#NSString, "getCString:maxLength:") = Void, Pointer[CChar], CULong;
override externalInstanceMethod(#NSString, "getCString:maxLength:range:remainingRange:") = Void, Pointer[CChar], CULong, NSRange, NSRangePointer;
override externalInstanceMethod(#NSString, "writeToFile:atomically:") = Bool, NSString, Bool;
override externalInstanceMethod(#NSString, "writeToURL:atomically:") = Bool, NSURL, Bool;
override externalInstanceMethod(#NSString, "initWithContentsOfFile:") = Id, NSString;
override externalInstanceMethod(#NSString, "initWithContentsOfURL:") = Id, NSURL;
override externalClassMethod(#NSString, "stringWithContentsOfFile:") = Id, NSString;
override externalClassMethod(#NSString, "stringWithContentsOfURL:") = Id, NSURL;
override externalInstanceMethod(#NSString, "initWithCStringNoCopy:length:freeWhenDone:") = Id, Pointer[CChar], CULong, Bool;
override externalInstanceMethod(#NSString, "initWithCString:length:") = Id, Pointer[CChar], CULong;
override externalInstanceMethod(#NSString, "initWithCString:") = Id, Pointer[CChar];
override externalClassMethod(#NSString, "stringWithCString:length:") = Id, Pointer[CChar], CULong;
override externalClassMethod(#NSString, "stringWithCString:") = Id, Pointer[CChar];
override externalInstanceMethod(#NSString, "getCharacters:") = Void, Pointer[UShort];
override externalClassMethod(#NSString, "pathWithComponents:") = NSString, NSArray;
override externalInstanceMethod(#NSString, "pathComponents") = NSArray;
override externalInstanceMethod(#NSString, "isAbsolutePath") = Bool;
override externalInstanceMethod(#NSString, "lastPathComponent") = NSString;
override externalInstanceMethod(#NSString, "stringByDeletingLastPathComponent") = NSString;
override externalInstanceMethod(#NSString, "stringByAppendingPathComponent:") = NSString, NSString;
override externalInstanceMethod(#NSString, "pathExtension") = NSString;
override externalInstanceMethod(#NSString, "stringByDeletingPathExtension") = NSString;
override externalInstanceMethod(#NSString, "stringByAppendingPathExtension:") = NSString, NSString;
override externalInstanceMethod(#NSString, "stringByAbbreviatingWithTildeInPath") = NSString;
override externalInstanceMethod(#NSString, "stringByExpandingTildeInPath") = NSString;
override externalInstanceMethod(#NSString, "stringByStandardizingPath") = NSString;
override externalInstanceMethod(#NSString, "stringByResolvingSymlinksInPath") = NSString;
override externalInstanceMethod(#NSString, "stringsByAppendingPaths:") = NSArray, NSArray;
override externalInstanceMethod(#NSString, "completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:") = CULong, Pointer[NSString], Bool, Pointer[NSArray], NSArray;
override externalInstanceMethod(#NSString, "fileSystemRepresentation") = Pointer[CChar];
override externalInstanceMethod(#NSString, "getFileSystemRepresentation:maxLength:") = Bool, Pointer[CChar], CULong;
override externalInstanceMethod(#NSString, "stringByAddingPercentEscapesUsingEncoding:") = NSString, CULong;
override externalInstanceMethod(#NSString, "stringByReplacingPercentEscapesUsingEncoding:") = NSString, CULong;

record NSTask = externalClass(NSObject);
override externalInstanceMethod(#NSTask, "init") = Id;
override externalInstanceMethod(#NSTask, "setLaunchPath:") = Void, NSString;
override externalInstanceMethod(#NSTask, "setArguments:") = Void, NSArray;
override externalInstanceMethod(#NSTask, "setEnvironment:") = Void, NSDictionary;
override externalInstanceMethod(#NSTask, "setCurrentDirectoryPath:") = Void, NSString;
override externalInstanceMethod(#NSTask, "setStandardInput:") = Void, Id;
override externalInstanceMethod(#NSTask, "setStandardOutput:") = Void, Id;
override externalInstanceMethod(#NSTask, "setStandardError:") = Void, Id;
override externalInstanceMethod(#NSTask, "launchPath") = NSString;
override externalInstanceMethod(#NSTask, "arguments") = NSArray;
override externalInstanceMethod(#NSTask, "environment") = NSDictionary;
override externalInstanceMethod(#NSTask, "currentDirectoryPath") = NSString;
override externalInstanceMethod(#NSTask, "standardInput") = Id;
override externalInstanceMethod(#NSTask, "standardOutput") = Id;
override externalInstanceMethod(#NSTask, "standardError") = Id;
override externalInstanceMethod(#NSTask, "launch") = Void;
override externalInstanceMethod(#NSTask, "interrupt") = Void;
override externalInstanceMethod(#NSTask, "terminate") = Void;
override externalInstanceMethod(#NSTask, "suspend") = Bool;
override externalInstanceMethod(#NSTask, "resume") = Bool;
override externalInstanceMethod(#NSTask, "processIdentifier") = Int;
override externalInstanceMethod(#NSTask, "isRunning") = Bool;
override externalInstanceMethod(#NSTask, "terminationStatus") = Int;
override externalInstanceMethod(#NSTask, "terminationReason") = CLong;
override externalClassMethod(#NSTask, "launchedTaskWithLaunchPath:arguments:") = NSTask, NSString, NSArray;
override externalInstanceMethod(#NSTask, "waitUntilExit") = Void;

record NSTextCheckingResult = externalClass(NSObject);
override externalInstanceMethod(#NSTextCheckingResult, "copyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSTextCheckingResult, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSTextCheckingResult, "initWithCoder:") = Id, NSCoder;
override externalInstanceMethod(#NSTextCheckingResult, "resultType") = UInt64;
override externalInstanceMethod(#NSTextCheckingResult, "range") = NSRange;
override externalInstanceMethod(#NSTextCheckingResult, "orthography") = NSOrthography;
override externalInstanceMethod(#NSTextCheckingResult, "grammarDetails") = NSArray;
override externalInstanceMethod(#NSTextCheckingResult, "date") = NSDate;
override externalInstanceMethod(#NSTextCheckingResult, "timeZone") = NSTimeZone;
override externalInstanceMethod(#NSTextCheckingResult, "duration") = Double;
override externalInstanceMethod(#NSTextCheckingResult, "addressComponents") = NSDictionary;
override externalInstanceMethod(#NSTextCheckingResult, "URL") = NSURL;
override externalInstanceMethod(#NSTextCheckingResult, "replacementString") = NSString;
override externalClassMethod(#NSTextCheckingResult, "orthographyCheckingResultWithRange:orthography:") = NSTextCheckingResult, NSRange, NSOrthography;
override externalClassMethod(#NSTextCheckingResult, "spellCheckingResultWithRange:") = NSTextCheckingResult, NSRange;
override externalClassMethod(#NSTextCheckingResult, "grammarCheckingResultWithRange:details:") = NSTextCheckingResult, NSRange, NSArray;
override externalClassMethod(#NSTextCheckingResult, "dateCheckingResultWithRange:date:") = NSTextCheckingResult, NSRange, NSDate;
override externalClassMethod(#NSTextCheckingResult, "dateCheckingResultWithRange:date:timeZone:duration:") = NSTextCheckingResult, NSRange, NSDate, NSTimeZone, Double;
override externalClassMethod(#NSTextCheckingResult, "addressCheckingResultWithRange:components:") = NSTextCheckingResult, NSRange, NSDictionary;
override externalClassMethod(#NSTextCheckingResult, "linkCheckingResultWithRange:URL:") = NSTextCheckingResult, NSRange, NSURL;
override externalClassMethod(#NSTextCheckingResult, "quoteCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
override externalClassMethod(#NSTextCheckingResult, "dashCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
override externalClassMethod(#NSTextCheckingResult, "replacementCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
override externalClassMethod(#NSTextCheckingResult, "correctionCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;

record NSThread = externalClass(NSObject);
override externalClassMethod(#NSThread, "currentThread") = NSThread;
override externalClassMethod(#NSThread, "detachNewThreadSelector:toTarget:withObject:") = Void, SelectorHandle, Id, Id;
override externalClassMethod(#NSThread, "isMultiThreaded") = Bool;
override externalInstanceMethod(#NSThread, "threadDictionary") = NSMutableDictionary;
override externalClassMethod(#NSThread, "sleepUntilDate:") = Void, NSDate;
override externalClassMethod(#NSThread, "sleepForTimeInterval:") = Void, Double;
override externalClassMethod(#NSThread, "exit") = Void;
override externalClassMethod(#NSThread, "threadPriority") = Double;
override externalClassMethod(#NSThread, "setThreadPriority:") = Bool, Double;
override externalInstanceMethod(#NSThread, "threadPriority") = Double;
override externalInstanceMethod(#NSThread, "setThreadPriority:") = Void, Double;
override externalClassMethod(#NSThread, "callStackReturnAddresses") = NSArray;
override externalClassMethod(#NSThread, "callStackSymbols") = NSArray;
override externalInstanceMethod(#NSThread, "setName:") = Void, NSString;
override externalInstanceMethod(#NSThread, "name") = NSString;
override externalInstanceMethod(#NSThread, "stackSize") = CULong;
override externalInstanceMethod(#NSThread, "setStackSize:") = Void, CULong;
override externalInstanceMethod(#NSThread, "isMainThread") = Bool;
override externalClassMethod(#NSThread, "isMainThread") = Bool;
override externalClassMethod(#NSThread, "mainThread") = NSThread;
override externalInstanceMethod(#NSThread, "init") = Id;
override externalInstanceMethod(#NSThread, "initWithTarget:selector:object:") = Id, Id, SelectorHandle, Id;
override externalInstanceMethod(#NSThread, "isExecuting") = Bool;
override externalInstanceMethod(#NSThread, "isFinished") = Bool;
override externalInstanceMethod(#NSThread, "isCancelled") = Bool;
override externalInstanceMethod(#NSThread, "cancel") = Void;
override externalInstanceMethod(#NSThread, "start") = Void;
override externalInstanceMethod(#NSThread, "main") = Void;

record NSTimeZone = externalClass(NSObject);
override externalInstanceMethod(#NSTimeZone, "copyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSTimeZone, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSTimeZone, "initWithCoder:") = Id, NSCoder;
override externalInstanceMethod(#NSTimeZone, "name") = NSString;
override externalInstanceMethod(#NSTimeZone, "data") = NSData;
override externalInstanceMethod(#NSTimeZone, "secondsFromGMTForDate:") = CLong, NSDate;
override externalInstanceMethod(#NSTimeZone, "abbreviationForDate:") = NSString, NSDate;
override externalInstanceMethod(#NSTimeZone, "isDaylightSavingTimeForDate:") = Bool, NSDate;
override externalInstanceMethod(#NSTimeZone, "daylightSavingTimeOffsetForDate:") = Double, NSDate;
override externalInstanceMethod(#NSTimeZone, "nextDaylightSavingTimeTransitionAfterDate:") = NSDate, NSDate;
override externalClassMethod(#NSTimeZone, "systemTimeZone") = NSTimeZone;
override externalClassMethod(#NSTimeZone, "resetSystemTimeZone") = Void;
override externalClassMethod(#NSTimeZone, "defaultTimeZone") = NSTimeZone;
override externalClassMethod(#NSTimeZone, "setDefaultTimeZone:") = Void, NSTimeZone;
override externalClassMethod(#NSTimeZone, "localTimeZone") = NSTimeZone;
override externalClassMethod(#NSTimeZone, "knownTimeZoneNames") = NSArray;
override externalClassMethod(#NSTimeZone, "abbreviationDictionary") = NSDictionary;
override externalClassMethod(#NSTimeZone, "setAbbreviationDictionary:") = Void, NSDictionary;
override externalClassMethod(#NSTimeZone, "timeZoneDataVersion") = NSString;
override externalInstanceMethod(#NSTimeZone, "secondsFromGMT") = CLong;
override externalInstanceMethod(#NSTimeZone, "abbreviation") = NSString;
override externalInstanceMethod(#NSTimeZone, "isDaylightSavingTime") = Bool;
override externalInstanceMethod(#NSTimeZone, "daylightSavingTimeOffset") = Double;
override externalInstanceMethod(#NSTimeZone, "nextDaylightSavingTimeTransition") = NSDate;
override externalInstanceMethod(#NSTimeZone, "description") = NSString;
override externalInstanceMethod(#NSTimeZone, "isEqualToTimeZone:") = Bool, NSTimeZone;
override externalInstanceMethod(#NSTimeZone, "localizedName:locale:") = NSString, CLong, NSLocale;
override externalClassMethod(#NSTimeZone, "timeZoneWithName:") = Id, NSString;
override externalClassMethod(#NSTimeZone, "timeZoneWithName:data:") = Id, NSString, NSData;
override externalInstanceMethod(#NSTimeZone, "initWithName:") = Id, NSString;
override externalInstanceMethod(#NSTimeZone, "initWithName:data:") = Id, NSString, NSData;
override externalClassMethod(#NSTimeZone, "timeZoneForSecondsFromGMT:") = Id, CLong;
override externalClassMethod(#NSTimeZone, "timeZoneWithAbbreviation:") = Id, NSString;

record NSTimer = externalClass(NSObject);
override externalClassMethod(#NSTimer, "timerWithTimeInterval:invocation:repeats:") = NSTimer, Double, NSInvocation, Bool;
override externalClassMethod(#NSTimer, "scheduledTimerWithTimeInterval:invocation:repeats:") = NSTimer, Double, NSInvocation, Bool;
override externalClassMethod(#NSTimer, "timerWithTimeInterval:target:selector:userInfo:repeats:") = NSTimer, Double, Id, SelectorHandle, Id, Bool;
override externalClassMethod(#NSTimer, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:") = NSTimer, Double, Id, SelectorHandle, Id, Bool;
override externalInstanceMethod(#NSTimer, "initWithFireDate:interval:target:selector:userInfo:repeats:") = Id, NSDate, Double, Id, SelectorHandle, Id, Bool;
override externalInstanceMethod(#NSTimer, "fire") = Void;
override externalInstanceMethod(#NSTimer, "fireDate") = NSDate;
override externalInstanceMethod(#NSTimer, "setFireDate:") = Void, NSDate;
override externalInstanceMethod(#NSTimer, "timeInterval") = Double;
override externalInstanceMethod(#NSTimer, "invalidate") = Void;
override externalInstanceMethod(#NSTimer, "isValid") = Bool;
override externalInstanceMethod(#NSTimer, "userInfo") = Id;

record NSURL = externalClass(NSObject);
override externalInstanceMethod(#NSURL, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSURL, "initWithCoder:") = Id, NSCoder;
override externalInstanceMethod(#NSURL, "copyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSURL, "URLHandle:resourceDataDidBecomeAvailable:") = Void, NSURLHandle, NSData;
override externalInstanceMethod(#NSURL, "URLHandleResourceDidBeginLoading:") = Void, NSURLHandle;
override externalInstanceMethod(#NSURL, "URLHandleResourceDidFinishLoading:") = Void, NSURLHandle;
override externalInstanceMethod(#NSURL, "URLHandleResourceDidCancelLoading:") = Void, NSURLHandle;
override externalInstanceMethod(#NSURL, "URLHandle:resourceDidFailLoadingWithReason:") = Void, NSURLHandle, NSString;
override externalInstanceMethod(#NSURL, "initWithScheme:host:path:") = Id, NSString, NSString, NSString;
override externalInstanceMethod(#NSURL, "initFileURLWithPath:isDirectory:") = Id, NSString, Bool;
override externalInstanceMethod(#NSURL, "initFileURLWithPath:") = Id, NSString;
override externalClassMethod(#NSURL, "fileURLWithPath:isDirectory:") = Id, NSString, Bool;
override externalClassMethod(#NSURL, "fileURLWithPath:") = Id, NSString;
override externalInstanceMethod(#NSURL, "initWithString:") = Id, NSString;
override externalInstanceMethod(#NSURL, "initWithString:relativeToURL:") = Id, NSString, NSURL;
override externalClassMethod(#NSURL, "URLWithString:") = Id, NSString;
override externalClassMethod(#NSURL, "URLWithString:relativeToURL:") = Id, NSString, NSURL;
override externalInstanceMethod(#NSURL, "absoluteString") = NSString;
override externalInstanceMethod(#NSURL, "relativeString") = NSString;
override externalInstanceMethod(#NSURL, "baseURL") = NSURL;
override externalInstanceMethod(#NSURL, "absoluteURL") = NSURL;
override externalInstanceMethod(#NSURL, "scheme") = NSString;
override externalInstanceMethod(#NSURL, "resourceSpecifier") = NSString;
override externalInstanceMethod(#NSURL, "host") = NSString;
override externalInstanceMethod(#NSURL, "port") = NSNumber;
override externalInstanceMethod(#NSURL, "user") = NSString;
override externalInstanceMethod(#NSURL, "password") = NSString;
override externalInstanceMethod(#NSURL, "path") = NSString;
override externalInstanceMethod(#NSURL, "fragment") = NSString;
override externalInstanceMethod(#NSURL, "parameterString") = NSString;
override externalInstanceMethod(#NSURL, "query") = NSString;
override externalInstanceMethod(#NSURL, "relativePath") = NSString;
override externalInstanceMethod(#NSURL, "isFileURL") = Bool;
override externalInstanceMethod(#NSURL, "standardizedURL") = NSURL;
override externalInstanceMethod(#NSURL, "getResourceValue:forKey:error:") = Bool, Pointer[Id], NSString, Pointer[NSError];
override externalInstanceMethod(#NSURL, "resourceValuesForKeys:error:") = NSDictionary, NSArray, Pointer[NSError];
override externalInstanceMethod(#NSURL, "setResourceValue:forKey:error:") = Bool, Id, NSString, Pointer[NSError];
override externalInstanceMethod(#NSURL, "setResourceValues:error:") = Bool, NSDictionary, Pointer[NSError];
override externalInstanceMethod(#NSURL, "checkResourceIsReachableAndReturnError:") = Bool, Pointer[NSError];
override externalInstanceMethod(#NSURL, "isFileReferenceURL") = Bool;
override externalInstanceMethod(#NSURL, "fileReferenceURL") = NSURL;
override externalInstanceMethod(#NSURL, "filePathURL") = NSURL;
override externalInstanceMethod(#NSURL, "bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:") = NSData, CULong, NSArray, NSURL, Pointer[NSError];
override externalInstanceMethod(#NSURL, "initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:") = Id, NSData, CULong, NSURL, Pointer[Bool], Pointer[NSError];
override externalClassMethod(#NSURL, "URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:") = Id, NSData, CULong, NSURL, Pointer[Bool], Pointer[NSError];
override externalClassMethod(#NSURL, "resourceValuesForKeys:fromBookmarkData:") = NSDictionary, NSArray, NSData;
override externalClassMethod(#NSURL, "writeBookmarkData:toURL:options:error:") = Bool, NSData, NSURL, CULong, Pointer[NSError];
override externalClassMethod(#NSURL, "bookmarkDataWithContentsOfURL:error:") = NSData, NSURL, Pointer[NSError];
override externalInstanceMethod(#NSURL, "resourceDataUsingCache:") = NSData, Bool;
override externalInstanceMethod(#NSURL, "loadResourceDataNotifyingClient:usingCache:") = Void, Id, Bool;
override externalInstanceMethod(#NSURL, "propertyForKey:") = Id, NSString;
override externalInstanceMethod(#NSURL, "setResourceData:") = Bool, NSData;
override externalInstanceMethod(#NSURL, "setProperty:forKey:") = Bool, Id, NSString;
override externalInstanceMethod(#NSURL, "URLHandleUsingCache:") = NSURLHandle, Bool;
override externalClassMethod(#NSURL, "fileURLWithPathComponents:") = NSURL, NSArray;
override externalInstanceMethod(#NSURL, "pathComponents") = NSArray;
override externalInstanceMethod(#NSURL, "lastPathComponent") = NSString;
override externalInstanceMethod(#NSURL, "pathExtension") = NSString;
override externalInstanceMethod(#NSURL, "URLByAppendingPathComponent:") = NSURL, NSString;
override externalInstanceMethod(#NSURL, "URLByDeletingLastPathComponent") = NSURL;
override externalInstanceMethod(#NSURL, "URLByAppendingPathExtension:") = NSURL, NSString;
override externalInstanceMethod(#NSURL, "URLByDeletingPathExtension") = NSURL;
override externalInstanceMethod(#NSURL, "URLByStandardizingPath") = NSURL;
override externalInstanceMethod(#NSURL, "URLByResolvingSymlinksInPath") = NSURL;

record NSURLAuthenticationChallenge = externalClass(NSObject);
override externalInstanceMethod(#NSURLAuthenticationChallenge, "initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:sender:") = Id, NSURLProtectionSpace, NSURLCredential, CLong, NSURLResponse, NSError, Id;
override externalInstanceMethod(#NSURLAuthenticationChallenge, "initWithAuthenticationChallenge:sender:") = Id, NSURLAuthenticationChallenge, Id;
override externalInstanceMethod(#NSURLAuthenticationChallenge, "protectionSpace") = NSURLProtectionSpace;
override externalInstanceMethod(#NSURLAuthenticationChallenge, "proposedCredential") = NSURLCredential;
override externalInstanceMethod(#NSURLAuthenticationChallenge, "previousFailureCount") = CLong;
override externalInstanceMethod(#NSURLAuthenticationChallenge, "failureResponse") = NSURLResponse;
override externalInstanceMethod(#NSURLAuthenticationChallenge, "error") = NSError;
override externalInstanceMethod(#NSURLAuthenticationChallenge, "sender") = Id;

record NSURLCache = externalClass(NSObject);
override externalClassMethod(#NSURLCache, "sharedURLCache") = NSURLCache;
override externalClassMethod(#NSURLCache, "setSharedURLCache:") = Void, NSURLCache;
override externalInstanceMethod(#NSURLCache, "initWithMemoryCapacity:diskCapacity:diskPath:") = Id, CULong, CULong, NSString;
override externalInstanceMethod(#NSURLCache, "cachedResponseForRequest:") = NSCachedURLResponse, NSURLRequest;
override externalInstanceMethod(#NSURLCache, "storeCachedResponse:forRequest:") = Void, NSCachedURLResponse, NSURLRequest;
override externalInstanceMethod(#NSURLCache, "removeCachedResponseForRequest:") = Void, NSURLRequest;
override externalInstanceMethod(#NSURLCache, "removeAllCachedResponses") = Void;
override externalInstanceMethod(#NSURLCache, "memoryCapacity") = CULong;
override externalInstanceMethod(#NSURLCache, "diskCapacity") = CULong;
override externalInstanceMethod(#NSURLCache, "setMemoryCapacity:") = Void, CULong;
override externalInstanceMethod(#NSURLCache, "setDiskCapacity:") = Void, CULong;
override externalInstanceMethod(#NSURLCache, "currentMemoryUsage") = CULong;
override externalInstanceMethod(#NSURLCache, "currentDiskUsage") = CULong;

record NSURLConnection = externalClass(NSObject);
override externalClassMethod(#NSURLConnection, "canHandleRequest:") = Bool, NSURLRequest;
override externalClassMethod(#NSURLConnection, "connectionWithRequest:delegate:") = NSURLConnection, NSURLRequest, Id;
override externalInstanceMethod(#NSURLConnection, "initWithRequest:delegate:") = Id, NSURLRequest, Id;
override externalInstanceMethod(#NSURLConnection, "initWithRequest:delegate:startImmediately:") = Id, NSURLRequest, Id, Bool;
override externalInstanceMethod(#NSURLConnection, "start") = Void;
override externalInstanceMethod(#NSURLConnection, "cancel") = Void;
override externalInstanceMethod(#NSURLConnection, "scheduleInRunLoop:forMode:") = Void, NSRunLoop, NSString;
override externalInstanceMethod(#NSURLConnection, "unscheduleFromRunLoop:forMode:") = Void, NSRunLoop, NSString;
override externalClassMethod(#NSURLConnection, "sendSynchronousRequest:returningResponse:error:") = NSData, NSURLRequest, Pointer[NSURLResponse], Pointer[NSError];

record NSURLCredential = externalClass(NSObject);
override externalInstanceMethod(#NSURLCredential, "copyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSURLCredential, "persistence") = CULong;
override externalInstanceMethod(#NSURLCredential, "initWithUser:password:persistence:") = Id, NSString, NSString, CULong;
override externalClassMethod(#NSURLCredential, "credentialWithUser:password:persistence:") = NSURLCredential, NSString, NSString, CULong;
override externalInstanceMethod(#NSURLCredential, "user") = NSString;
override externalInstanceMethod(#NSURLCredential, "password") = NSString;
override externalInstanceMethod(#NSURLCredential, "hasPassword") = Bool;
override externalInstanceMethod(#NSURLCredential, "initWithIdentity:certificates:persistence:") = Id, SecIdentityRef, NSArray, CULong;
override externalClassMethod(#NSURLCredential, "credentialWithIdentity:certificates:persistence:") = NSURLCredential, SecIdentityRef, NSArray, CULong;
override externalInstanceMethod(#NSURLCredential, "identity") = SecIdentityRef;
override externalInstanceMethod(#NSURLCredential, "certificates") = NSArray;
override externalInstanceMethod(#NSURLCredential, "initWithTrust:") = Id, SecTrustRef;
override externalClassMethod(#NSURLCredential, "credentialForTrust:") = NSURLCredential, SecTrustRef;

record NSURLCredentialStorage = externalClass(NSObject);
override externalClassMethod(#NSURLCredentialStorage, "sharedCredentialStorage") = NSURLCredentialStorage;
override externalInstanceMethod(#NSURLCredentialStorage, "credentialsForProtectionSpace:") = NSDictionary, NSURLProtectionSpace;
override externalInstanceMethod(#NSURLCredentialStorage, "allCredentials") = NSDictionary;
override externalInstanceMethod(#NSURLCredentialStorage, "setCredential:forProtectionSpace:") = Void, NSURLCredential, NSURLProtectionSpace;
override externalInstanceMethod(#NSURLCredentialStorage, "removeCredential:forProtectionSpace:") = Void, NSURLCredential, NSURLProtectionSpace;
override externalInstanceMethod(#NSURLCredentialStorage, "defaultCredentialForProtectionSpace:") = NSURLCredential, NSURLProtectionSpace;
override externalInstanceMethod(#NSURLCredentialStorage, "setDefaultCredential:forProtectionSpace:") = Void, NSURLCredential, NSURLProtectionSpace;

record NSURLDownload = externalClass(NSObject);
override externalClassMethod(#NSURLDownload, "canResumeDownloadDecodedWithEncodingMIMEType:") = Bool, NSString;
override externalInstanceMethod(#NSURLDownload, "initWithRequest:delegate:") = Id, NSURLRequest, Id;
override externalInstanceMethod(#NSURLDownload, "initWithResumeData:delegate:path:") = Id, NSData, Id, NSString;
override externalInstanceMethod(#NSURLDownload, "cancel") = Void;
override externalInstanceMethod(#NSURLDownload, "setDestination:allowOverwrite:") = Void, NSString, Bool;
override externalInstanceMethod(#NSURLDownload, "request") = NSURLRequest;
override externalInstanceMethod(#NSURLDownload, "resumeData") = NSData;
override externalInstanceMethod(#NSURLDownload, "setDeletesFileUponFailure:") = Void, Bool;
override externalInstanceMethod(#NSURLDownload, "deletesFileUponFailure") = Bool;

record NSURLHandle = externalClass(NSObject);
override externalClassMethod(#NSURLHandle, "registerURLHandleClass:") = Void, Id;
override externalClassMethod(#NSURLHandle, "URLHandleClassForURL:") = Id, NSURL;
override externalInstanceMethod(#NSURLHandle, "status") = CULong;
override externalInstanceMethod(#NSURLHandle, "failureReason") = NSString;
override externalInstanceMethod(#NSURLHandle, "addClient:") = Void, Id;
override externalInstanceMethod(#NSURLHandle, "removeClient:") = Void, Id;
override externalInstanceMethod(#NSURLHandle, "loadInBackground") = Void;
override externalInstanceMethod(#NSURLHandle, "cancelLoadInBackground") = Void;
override externalInstanceMethod(#NSURLHandle, "resourceData") = NSData;
override externalInstanceMethod(#NSURLHandle, "availableResourceData") = NSData;
override externalInstanceMethod(#NSURLHandle, "expectedResourceDataSize") = Int64;
override externalInstanceMethod(#NSURLHandle, "flushCachedData") = Void;
override externalInstanceMethod(#NSURLHandle, "backgroundLoadDidFailWithReason:") = Void, NSString;
override externalInstanceMethod(#NSURLHandle, "didLoadBytes:loadComplete:") = Void, NSData, Bool;
override externalClassMethod(#NSURLHandle, "canInitWithURL:") = Bool, NSURL;
override externalClassMethod(#NSURLHandle, "cachedHandleForURL:") = NSURLHandle, NSURL;
override externalInstanceMethod(#NSURLHandle, "initWithURL:cached:") = Id, NSURL, Bool;
override externalInstanceMethod(#NSURLHandle, "propertyForKey:") = Id, NSString;
override externalInstanceMethod(#NSURLHandle, "propertyForKeyIfAvailable:") = Id, NSString;
override externalInstanceMethod(#NSURLHandle, "writeProperty:forKey:") = Bool, Id, NSString;
override externalInstanceMethod(#NSURLHandle, "writeData:") = Bool, NSData;
override externalInstanceMethod(#NSURLHandle, "loadInForeground") = NSData;
override externalInstanceMethod(#NSURLHandle, "beginLoadInBackground") = Void;
override externalInstanceMethod(#NSURLHandle, "endLoadInBackground") = Void;

record NSURLProtectionSpace = externalClass(NSObject);
override externalInstanceMethod(#NSURLProtectionSpace, "copyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSURLProtectionSpace, "initWithHost:port:protocol:realm:authenticationMethod:") = Id, NSString, CLong, NSString, NSString, NSString;
override externalInstanceMethod(#NSURLProtectionSpace, "initWithProxyHost:port:type:realm:authenticationMethod:") = Id, NSString, CLong, NSString, NSString, NSString;
override externalInstanceMethod(#NSURLProtectionSpace, "realm") = NSString;
override externalInstanceMethod(#NSURLProtectionSpace, "receivesCredentialSecurely") = Bool;
override externalInstanceMethod(#NSURLProtectionSpace, "isProxy") = Bool;
override externalInstanceMethod(#NSURLProtectionSpace, "host") = NSString;
override externalInstanceMethod(#NSURLProtectionSpace, "port") = CLong;
override externalInstanceMethod(#NSURLProtectionSpace, "proxyType") = NSString;
override externalInstanceMethod(#NSURLProtectionSpace, "protocol") = NSString;
override externalInstanceMethod(#NSURLProtectionSpace, "authenticationMethod") = NSString;
override externalInstanceMethod(#NSURLProtectionSpace, "distinguishedNames") = NSArray;
override externalInstanceMethod(#NSURLProtectionSpace, "serverTrust") = SecTrustRef;

record NSURLProtocol = externalClass(NSObject);
override externalInstanceMethod(#NSURLProtocol, "initWithRequest:cachedResponse:client:") = Id, NSURLRequest, NSCachedURLResponse, Id;
override externalInstanceMethod(#NSURLProtocol, "client") = Id;
override externalInstanceMethod(#NSURLProtocol, "request") = NSURLRequest;
override externalInstanceMethod(#NSURLProtocol, "cachedResponse") = NSCachedURLResponse;
override externalClassMethod(#NSURLProtocol, "canInitWithRequest:") = Bool, NSURLRequest;
override externalClassMethod(#NSURLProtocol, "canonicalRequestForRequest:") = NSURLRequest, NSURLRequest;
override externalClassMethod(#NSURLProtocol, "requestIsCacheEquivalent:toRequest:") = Bool, NSURLRequest, NSURLRequest;
override externalInstanceMethod(#NSURLProtocol, "startLoading") = Void;
override externalInstanceMethod(#NSURLProtocol, "stopLoading") = Void;
override externalClassMethod(#NSURLProtocol, "propertyForKey:inRequest:") = Id, NSString, NSURLRequest;
override externalClassMethod(#NSURLProtocol, "setProperty:forKey:inRequest:") = Void, Id, NSString, NSMutableURLRequest;
override externalClassMethod(#NSURLProtocol, "removePropertyForKey:inRequest:") = Void, NSString, NSMutableURLRequest;
override externalClassMethod(#NSURLProtocol, "registerClass:") = Bool, Id;
override externalClassMethod(#NSURLProtocol, "unregisterClass:") = Void, Id;

record NSURLRequest = externalClass(NSObject);
override externalInstanceMethod(#NSURLRequest, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSURLRequest, "initWithCoder:") = Id, NSCoder;
override externalInstanceMethod(#NSURLRequest, "copyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSURLRequest, "mutableCopyWithZone:") = Id, Pointer[NSZone];
override externalClassMethod(#NSURLRequest, "requestWithURL:") = Id, NSURL;
override externalClassMethod(#NSURLRequest, "requestWithURL:cachePolicy:timeoutInterval:") = Id, NSURL, CULong, Double;
override externalInstanceMethod(#NSURLRequest, "initWithURL:") = Id, NSURL;
override externalInstanceMethod(#NSURLRequest, "initWithURL:cachePolicy:timeoutInterval:") = Id, NSURL, CULong, Double;
override externalInstanceMethod(#NSURLRequest, "URL") = NSURL;
override externalInstanceMethod(#NSURLRequest, "cachePolicy") = CULong;
override externalInstanceMethod(#NSURLRequest, "timeoutInterval") = Double;
override externalInstanceMethod(#NSURLRequest, "mainDocumentURL") = NSURL;
override externalInstanceMethod(#NSURLRequest, "HTTPMethod") = NSString;
override externalInstanceMethod(#NSURLRequest, "allHTTPHeaderFields") = NSDictionary;
override externalInstanceMethod(#NSURLRequest, "valueForHTTPHeaderField:") = NSString, NSString;
override externalInstanceMethod(#NSURLRequest, "HTTPBody") = NSData;
override externalInstanceMethod(#NSURLRequest, "HTTPBodyStream") = NSInputStream;
override externalInstanceMethod(#NSURLRequest, "HTTPShouldHandleCookies") = Bool;

record NSURLResponse = externalClass(NSObject);
override externalInstanceMethod(#NSURLResponse, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSURLResponse, "initWithCoder:") = Id, NSCoder;
override externalInstanceMethod(#NSURLResponse, "copyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSURLResponse, "initWithURL:MIMEType:expectedContentLength:textEncodingName:") = Id, NSURL, NSString, CLong, NSString;
override externalInstanceMethod(#NSURLResponse, "URL") = NSURL;
override externalInstanceMethod(#NSURLResponse, "MIMEType") = NSString;
override externalInstanceMethod(#NSURLResponse, "expectedContentLength") = Int64;
override externalInstanceMethod(#NSURLResponse, "textEncodingName") = NSString;
override externalInstanceMethod(#NSURLResponse, "suggestedFilename") = NSString;

record NSUnarchiver = externalClass(NSCoder);
override externalInstanceMethod(#NSUnarchiver, "initForReadingWithData:") = Id, NSData;
override externalInstanceMethod(#NSUnarchiver, "setObjectZone:") = Void, Pointer[NSZone];
override externalInstanceMethod(#NSUnarchiver, "objectZone") = Pointer[NSZone];
override externalInstanceMethod(#NSUnarchiver, "isAtEnd") = Bool;
override externalInstanceMethod(#NSUnarchiver, "systemVersion") = UInt;
override externalClassMethod(#NSUnarchiver, "unarchiveObjectWithData:") = Id, NSData;
override externalClassMethod(#NSUnarchiver, "unarchiveObjectWithFile:") = Id, NSString;
override externalClassMethod(#NSUnarchiver, "decodeClassName:asClassName:") = Void, NSString, NSString;
override externalInstanceMethod(#NSUnarchiver, "decodeClassName:asClassName:") = Void, NSString, NSString;
override externalClassMethod(#NSUnarchiver, "classNameDecodedForArchiveClassName:") = NSString, NSString;
override externalInstanceMethod(#NSUnarchiver, "classNameDecodedForArchiveClassName:") = NSString, NSString;
override externalInstanceMethod(#NSUnarchiver, "replaceObject:withObject:") = Void, Id, Id;

record NSUndoManager = externalClass(NSObject);
override externalInstanceMethod(#NSUndoManager, "beginUndoGrouping") = Void;
override externalInstanceMethod(#NSUndoManager, "endUndoGrouping") = Void;
override externalInstanceMethod(#NSUndoManager, "groupingLevel") = CLong;
override externalInstanceMethod(#NSUndoManager, "disableUndoRegistration") = Void;
override externalInstanceMethod(#NSUndoManager, "enableUndoRegistration") = Void;
override externalInstanceMethod(#NSUndoManager, "isUndoRegistrationEnabled") = Bool;
override externalInstanceMethod(#NSUndoManager, "groupsByEvent") = Bool;
override externalInstanceMethod(#NSUndoManager, "setGroupsByEvent:") = Void, Bool;
override externalInstanceMethod(#NSUndoManager, "setLevelsOfUndo:") = Void, CULong;
override externalInstanceMethod(#NSUndoManager, "levelsOfUndo") = CULong;
override externalInstanceMethod(#NSUndoManager, "setRunLoopModes:") = Void, NSArray;
override externalInstanceMethod(#NSUndoManager, "runLoopModes") = NSArray;
override externalInstanceMethod(#NSUndoManager, "undo") = Void;
override externalInstanceMethod(#NSUndoManager, "redo") = Void;
override externalInstanceMethod(#NSUndoManager, "undoNestedGroup") = Void;
override externalInstanceMethod(#NSUndoManager, "canUndo") = Bool;
override externalInstanceMethod(#NSUndoManager, "canRedo") = Bool;
override externalInstanceMethod(#NSUndoManager, "isUndoing") = Bool;
override externalInstanceMethod(#NSUndoManager, "isRedoing") = Bool;
override externalInstanceMethod(#NSUndoManager, "removeAllActions") = Void;
override externalInstanceMethod(#NSUndoManager, "removeAllActionsWithTarget:") = Void, Id;
override externalInstanceMethod(#NSUndoManager, "registerUndoWithTarget:selector:object:") = Void, Id, SelectorHandle, Id;
override externalInstanceMethod(#NSUndoManager, "prepareWithInvocationTarget:") = Id, Id;
override externalInstanceMethod(#NSUndoManager, "undoActionName") = NSString;
override externalInstanceMethod(#NSUndoManager, "redoActionName") = NSString;
override externalInstanceMethod(#NSUndoManager, "setActionName:") = Void, NSString;
override externalInstanceMethod(#NSUndoManager, "undoMenuItemTitle") = NSString;
override externalInstanceMethod(#NSUndoManager, "redoMenuItemTitle") = NSString;
override externalInstanceMethod(#NSUndoManager, "undoMenuTitleForUndoActionName:") = NSString, NSString;
override externalInstanceMethod(#NSUndoManager, "redoMenuTitleForUndoActionName:") = NSString, NSString;

record NSUniqueIDSpecifier = externalClass(NSScriptObjectSpecifier);
override externalInstanceMethod(#NSUniqueIDSpecifier, "initWithContainerClassDescription:containerSpecifier:key:uniqueID:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, Id;
override externalInstanceMethod(#NSUniqueIDSpecifier, "uniqueID") = Id;
override externalInstanceMethod(#NSUniqueIDSpecifier, "setUniqueID:") = Void, Id;

record NSUserDefaults = externalClass(NSObject);
override externalClassMethod(#NSUserDefaults, "standardUserDefaults") = NSUserDefaults;
override externalClassMethod(#NSUserDefaults, "resetStandardUserDefaults") = Void;
override externalInstanceMethod(#NSUserDefaults, "init") = Id;
override externalInstanceMethod(#NSUserDefaults, "initWithUser:") = Id, NSString;
override externalInstanceMethod(#NSUserDefaults, "objectForKey:") = Id, NSString;
override externalInstanceMethod(#NSUserDefaults, "setObject:forKey:") = Void, Id, NSString;
override externalInstanceMethod(#NSUserDefaults, "removeObjectForKey:") = Void, NSString;
override externalInstanceMethod(#NSUserDefaults, "stringForKey:") = NSString, NSString;
override externalInstanceMethod(#NSUserDefaults, "arrayForKey:") = NSArray, NSString;
override externalInstanceMethod(#NSUserDefaults, "dictionaryForKey:") = NSDictionary, NSString;
override externalInstanceMethod(#NSUserDefaults, "dataForKey:") = NSData, NSString;
override externalInstanceMethod(#NSUserDefaults, "stringArrayForKey:") = NSArray, NSString;
override externalInstanceMethod(#NSUserDefaults, "integerForKey:") = CLong, NSString;
override externalInstanceMethod(#NSUserDefaults, "floatForKey:") = Float, NSString;
override externalInstanceMethod(#NSUserDefaults, "doubleForKey:") = Double, NSString;
override externalInstanceMethod(#NSUserDefaults, "boolForKey:") = Bool, NSString;
override externalInstanceMethod(#NSUserDefaults, "URLForKey:") = NSURL, NSString;
override externalInstanceMethod(#NSUserDefaults, "setInteger:forKey:") = Void, CLong, NSString;
override externalInstanceMethod(#NSUserDefaults, "setFloat:forKey:") = Void, Float, NSString;
override externalInstanceMethod(#NSUserDefaults, "setDouble:forKey:") = Void, Double, NSString;
override externalInstanceMethod(#NSUserDefaults, "setBool:forKey:") = Void, Bool, NSString;
override externalInstanceMethod(#NSUserDefaults, "setURL:forKey:") = Void, NSURL, NSString;
override externalInstanceMethod(#NSUserDefaults, "registerDefaults:") = Void, NSDictionary;
override externalInstanceMethod(#NSUserDefaults, "addSuiteNamed:") = Void, NSString;
override externalInstanceMethod(#NSUserDefaults, "removeSuiteNamed:") = Void, NSString;
override externalInstanceMethod(#NSUserDefaults, "dictionaryRepresentation") = NSDictionary;
override externalInstanceMethod(#NSUserDefaults, "volatileDomainNames") = NSArray;
override externalInstanceMethod(#NSUserDefaults, "volatileDomainForName:") = NSDictionary, NSString;
override externalInstanceMethod(#NSUserDefaults, "setVolatileDomain:forName:") = Void, NSDictionary, NSString;
override externalInstanceMethod(#NSUserDefaults, "removeVolatileDomainForName:") = Void, NSString;
override externalInstanceMethod(#NSUserDefaults, "persistentDomainNames") = NSArray;
override externalInstanceMethod(#NSUserDefaults, "persistentDomainForName:") = NSDictionary, NSString;
override externalInstanceMethod(#NSUserDefaults, "setPersistentDomain:forName:") = Void, NSDictionary, NSString;
override externalInstanceMethod(#NSUserDefaults, "removePersistentDomainForName:") = Void, NSString;
override externalInstanceMethod(#NSUserDefaults, "synchronize") = Bool;
override externalInstanceMethod(#NSUserDefaults, "objectIsForcedForKey:") = Bool, NSString;
override externalInstanceMethod(#NSUserDefaults, "objectIsForcedForKey:inDomain:") = Bool, NSString, NSString;

record NSValue = externalClass(NSObject);
override externalInstanceMethod(#NSValue, "copyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSValue, "encodeWithCoder:") = Void, NSCoder;
override externalInstanceMethod(#NSValue, "initWithCoder:") = Id, NSCoder;
override externalInstanceMethod(#NSValue, "getValue:") = Void, RawPointer;
override externalInstanceMethod(#NSValue, "objCType") = Pointer[CChar];
override externalInstanceMethod(#NSValue, "initWithBytes:objCType:") = Id, RawPointer, Pointer[CChar];
override externalClassMethod(#NSValue, "valueWithBytes:objCType:") = NSValue, RawPointer, Pointer[CChar];
override externalClassMethod(#NSValue, "value:withObjCType:") = NSValue, RawPointer, Pointer[CChar];
override externalClassMethod(#NSValue, "valueWithNonretainedObject:") = NSValue, Id;
override externalInstanceMethod(#NSValue, "nonretainedObjectValue") = Id;
override externalClassMethod(#NSValue, "valueWithPointer:") = NSValue, RawPointer;
override externalInstanceMethod(#NSValue, "pointerValue") = RawPointer;
override externalInstanceMethod(#NSValue, "isEqualToValue:") = Bool, NSValue;
override externalClassMethod(#NSValue, "valueWithRange:") = NSValue, NSRange;
override externalInstanceMethod(#NSValue, "rangeValue") = NSRange;
override externalClassMethod(#NSValue, "valueWithPoint:") = NSValue, NSPoint;
override externalClassMethod(#NSValue, "valueWithSize:") = NSValue, NSSize;
override externalClassMethod(#NSValue, "valueWithRect:") = NSValue, NSRect;
override externalInstanceMethod(#NSValue, "pointValue") = NSPoint;
override externalInstanceMethod(#NSValue, "sizeValue") = NSSize;
override externalInstanceMethod(#NSValue, "rectValue") = NSRect;

record NSValueTransformer = externalClass(NSObject);
override externalClassMethod(#NSValueTransformer, "setValueTransformer:forName:") = Void, NSValueTransformer, NSString;
override externalClassMethod(#NSValueTransformer, "valueTransformerForName:") = NSValueTransformer, NSString;
override externalClassMethod(#NSValueTransformer, "valueTransformerNames") = NSArray;
override externalClassMethod(#NSValueTransformer, "transformedValueClass") = Id;
override externalClassMethod(#NSValueTransformer, "allowsReverseTransformation") = Bool;
override externalInstanceMethod(#NSValueTransformer, "transformedValue:") = Id, Id;
override externalInstanceMethod(#NSValueTransformer, "reverseTransformedValue:") = Id, Id;

record NSWhoseSpecifier = externalClass(NSScriptObjectSpecifier);
override externalInstanceMethod(#NSWhoseSpecifier, "initWithContainerClassDescription:containerSpecifier:key:test:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, NSScriptWhoseTest;
override externalInstanceMethod(#NSWhoseSpecifier, "test") = NSScriptWhoseTest;
override externalInstanceMethod(#NSWhoseSpecifier, "setTest:") = Void, NSScriptWhoseTest;
override externalInstanceMethod(#NSWhoseSpecifier, "startSubelementIdentifier") = CULong;
override externalInstanceMethod(#NSWhoseSpecifier, "setStartSubelementIdentifier:") = Void, CULong;
override externalInstanceMethod(#NSWhoseSpecifier, "startSubelementIndex") = CLong;
override externalInstanceMethod(#NSWhoseSpecifier, "setStartSubelementIndex:") = Void, CLong;
override externalInstanceMethod(#NSWhoseSpecifier, "endSubelementIdentifier") = CULong;
override externalInstanceMethod(#NSWhoseSpecifier, "setEndSubelementIdentifier:") = Void, CULong;
override externalInstanceMethod(#NSWhoseSpecifier, "endSubelementIndex") = CLong;
override externalInstanceMethod(#NSWhoseSpecifier, "setEndSubelementIndex:") = Void, CLong;

record NSXMLDTD = externalClass(NSXMLNode);
override externalInstanceMethod(#NSXMLDTD, "initWithContentsOfURL:options:error:") = Id, NSURL, CULong, Pointer[NSError];
override externalInstanceMethod(#NSXMLDTD, "initWithData:options:error:") = Id, NSData, CULong, Pointer[NSError];
override externalInstanceMethod(#NSXMLDTD, "setPublicID:") = Void, NSString;
override externalInstanceMethod(#NSXMLDTD, "publicID") = NSString;
override externalInstanceMethod(#NSXMLDTD, "setSystemID:") = Void, NSString;
override externalInstanceMethod(#NSXMLDTD, "systemID") = NSString;
override externalInstanceMethod(#NSXMLDTD, "insertChild:atIndex:") = Void, NSXMLNode, CULong;
override externalInstanceMethod(#NSXMLDTD, "insertChildren:atIndex:") = Void, NSArray, CULong;
override externalInstanceMethod(#NSXMLDTD, "removeChildAtIndex:") = Void, CULong;
override externalInstanceMethod(#NSXMLDTD, "setChildren:") = Void, NSArray;
override externalInstanceMethod(#NSXMLDTD, "addChild:") = Void, NSXMLNode;
override externalInstanceMethod(#NSXMLDTD, "replaceChildAtIndex:withNode:") = Void, CULong, NSXMLNode;
override externalInstanceMethod(#NSXMLDTD, "entityDeclarationForName:") = NSXMLDTDNode, NSString;
override externalInstanceMethod(#NSXMLDTD, "notationDeclarationForName:") = NSXMLDTDNode, NSString;
override externalInstanceMethod(#NSXMLDTD, "elementDeclarationForName:") = NSXMLDTDNode, NSString;
override externalInstanceMethod(#NSXMLDTD, "attributeDeclarationForName:elementName:") = NSXMLDTDNode, NSString, NSString;
override externalClassMethod(#NSXMLDTD, "predefinedEntityDeclarationForName:") = NSXMLDTDNode, NSString;

record NSXMLDTDNode = externalClass(NSXMLNode);
override externalInstanceMethod(#NSXMLDTDNode, "initWithXMLString:") = Id, NSString;
override externalInstanceMethod(#NSXMLDTDNode, "setDTDKind:") = Void, CULong;
override externalInstanceMethod(#NSXMLDTDNode, "DTDKind") = CULong;
override externalInstanceMethod(#NSXMLDTDNode, "isExternal") = Bool;
override externalInstanceMethod(#NSXMLDTDNode, "setPublicID:") = Void, NSString;
override externalInstanceMethod(#NSXMLDTDNode, "publicID") = NSString;
override externalInstanceMethod(#NSXMLDTDNode, "setSystemID:") = Void, NSString;
override externalInstanceMethod(#NSXMLDTDNode, "systemID") = NSString;
override externalInstanceMethod(#NSXMLDTDNode, "setNotationName:") = Void, NSString;
override externalInstanceMethod(#NSXMLDTDNode, "notationName") = NSString;

record NSXMLDocument = externalClass(NSXMLNode);
override externalInstanceMethod(#NSXMLDocument, "initWithXMLString:options:error:") = Id, NSString, CULong, Pointer[NSError];
override externalInstanceMethod(#NSXMLDocument, "initWithContentsOfURL:options:error:") = Id, NSURL, CULong, Pointer[NSError];
override externalInstanceMethod(#NSXMLDocument, "initWithData:options:error:") = Id, NSData, CULong, Pointer[NSError];
override externalInstanceMethod(#NSXMLDocument, "initWithRootElement:") = Id, NSXMLElement;
override externalClassMethod(#NSXMLDocument, "replacementClassForClass:") = Id, Id;
override externalInstanceMethod(#NSXMLDocument, "setCharacterEncoding:") = Void, NSString;
override externalInstanceMethod(#NSXMLDocument, "characterEncoding") = NSString;
override externalInstanceMethod(#NSXMLDocument, "setVersion:") = Void, NSString;
override externalInstanceMethod(#NSXMLDocument, "version") = NSString;
override externalInstanceMethod(#NSXMLDocument, "setStandalone:") = Void, Bool;
override externalInstanceMethod(#NSXMLDocument, "isStandalone") = Bool;
override externalInstanceMethod(#NSXMLDocument, "setDocumentContentKind:") = Void, CULong;
override externalInstanceMethod(#NSXMLDocument, "documentContentKind") = CULong;
override externalInstanceMethod(#NSXMLDocument, "setMIMEType:") = Void, NSString;
override externalInstanceMethod(#NSXMLDocument, "MIMEType") = NSString;
override externalInstanceMethod(#NSXMLDocument, "setDTD:") = Void, NSXMLDTD;
override externalInstanceMethod(#NSXMLDocument, "DTD") = NSXMLDTD;
override externalInstanceMethod(#NSXMLDocument, "setRootElement:") = Void, NSXMLNode;
override externalInstanceMethod(#NSXMLDocument, "rootElement") = NSXMLElement;
override externalInstanceMethod(#NSXMLDocument, "insertChild:atIndex:") = Void, NSXMLNode, CULong;
override externalInstanceMethod(#NSXMLDocument, "insertChildren:atIndex:") = Void, NSArray, CULong;
override externalInstanceMethod(#NSXMLDocument, "removeChildAtIndex:") = Void, CULong;
override externalInstanceMethod(#NSXMLDocument, "setChildren:") = Void, NSArray;
override externalInstanceMethod(#NSXMLDocument, "addChild:") = Void, NSXMLNode;
override externalInstanceMethod(#NSXMLDocument, "replaceChildAtIndex:withNode:") = Void, CULong, NSXMLNode;
override externalInstanceMethod(#NSXMLDocument, "XMLData") = NSData;
override externalInstanceMethod(#NSXMLDocument, "XMLDataWithOptions:") = NSData, CULong;
override externalInstanceMethod(#NSXMLDocument, "objectByApplyingXSLT:arguments:error:") = Id, NSData, NSDictionary, Pointer[NSError];
override externalInstanceMethod(#NSXMLDocument, "objectByApplyingXSLTString:arguments:error:") = Id, NSString, NSDictionary, Pointer[NSError];
override externalInstanceMethod(#NSXMLDocument, "objectByApplyingXSLTAtURL:arguments:error:") = Id, NSURL, NSDictionary, Pointer[NSError];
override externalInstanceMethod(#NSXMLDocument, "validateAndReturnError:") = Bool, Pointer[NSError];

record NSXMLElement = externalClass(NSXMLNode);
override externalInstanceMethod(#NSXMLElement, "initWithName:") = Id, NSString;
override externalInstanceMethod(#NSXMLElement, "initWithName:URI:") = Id, NSString, NSString;
override externalInstanceMethod(#NSXMLElement, "initWithName:stringValue:") = Id, NSString, NSString;
override externalInstanceMethod(#NSXMLElement, "initWithXMLString:error:") = Id, NSString, Pointer[NSError];
override externalInstanceMethod(#NSXMLElement, "elementsForName:") = NSArray, NSString;
override externalInstanceMethod(#NSXMLElement, "elementsForLocalName:URI:") = NSArray, NSString, NSString;
override externalInstanceMethod(#NSXMLElement, "addAttribute:") = Void, NSXMLNode;
override externalInstanceMethod(#NSXMLElement, "removeAttributeForName:") = Void, NSString;
override externalInstanceMethod(#NSXMLElement, "setAttributes:") = Void, NSArray;
override externalInstanceMethod(#NSXMLElement, "setAttributesAsDictionary:") = Void, NSDictionary;
override externalInstanceMethod(#NSXMLElement, "attributes") = NSArray;
override externalInstanceMethod(#NSXMLElement, "attributeForName:") = NSXMLNode, NSString;
override externalInstanceMethod(#NSXMLElement, "attributeForLocalName:URI:") = NSXMLNode, NSString, NSString;
override externalInstanceMethod(#NSXMLElement, "addNamespace:") = Void, NSXMLNode;
override externalInstanceMethod(#NSXMLElement, "removeNamespaceForPrefix:") = Void, NSString;
override externalInstanceMethod(#NSXMLElement, "setNamespaces:") = Void, NSArray;
override externalInstanceMethod(#NSXMLElement, "namespaces") = NSArray;
override externalInstanceMethod(#NSXMLElement, "namespaceForPrefix:") = NSXMLNode, NSString;
override externalInstanceMethod(#NSXMLElement, "resolveNamespaceForName:") = NSXMLNode, NSString;
override externalInstanceMethod(#NSXMLElement, "resolvePrefixForNamespaceURI:") = NSString, NSString;
override externalInstanceMethod(#NSXMLElement, "insertChild:atIndex:") = Void, NSXMLNode, CULong;
override externalInstanceMethod(#NSXMLElement, "insertChildren:atIndex:") = Void, NSArray, CULong;
override externalInstanceMethod(#NSXMLElement, "removeChildAtIndex:") = Void, CULong;
override externalInstanceMethod(#NSXMLElement, "setChildren:") = Void, NSArray;
override externalInstanceMethod(#NSXMLElement, "addChild:") = Void, NSXMLNode;
override externalInstanceMethod(#NSXMLElement, "replaceChildAtIndex:withNode:") = Void, CULong, NSXMLNode;
override externalInstanceMethod(#NSXMLElement, "normalizeAdjacentTextNodesPreservingCDATA:") = Void, Bool;

record NSXMLNode = externalClass(NSObject);
override externalInstanceMethod(#NSXMLNode, "copyWithZone:") = Id, Pointer[NSZone];
override externalInstanceMethod(#NSXMLNode, "initWithKind:") = Id, CULong;
override externalInstanceMethod(#NSXMLNode, "initWithKind:options:") = Id, CULong, CULong;
override externalClassMethod(#NSXMLNode, "document") = Id;
override externalClassMethod(#NSXMLNode, "documentWithRootElement:") = Id, NSXMLElement;
override externalClassMethod(#NSXMLNode, "elementWithName:") = Id, NSString;
override externalClassMethod(#NSXMLNode, "elementWithName:URI:") = Id, NSString, NSString;
override externalClassMethod(#NSXMLNode, "elementWithName:stringValue:") = Id, NSString, NSString;
override externalClassMethod(#NSXMLNode, "elementWithName:children:attributes:") = Id, NSString, NSArray, NSArray;
override externalClassMethod(#NSXMLNode, "attributeWithName:stringValue:") = Id, NSString, NSString;
override externalClassMethod(#NSXMLNode, "attributeWithName:URI:stringValue:") = Id, NSString, NSString, NSString;
override externalClassMethod(#NSXMLNode, "namespaceWithName:stringValue:") = Id, NSString, NSString;
override externalClassMethod(#NSXMLNode, "processingInstructionWithName:stringValue:") = Id, NSString, NSString;
override externalClassMethod(#NSXMLNode, "commentWithStringValue:") = Id, NSString;
override externalClassMethod(#NSXMLNode, "textWithStringValue:") = Id, NSString;
override externalClassMethod(#NSXMLNode, "DTDNodeWithXMLString:") = Id, NSString;
override externalInstanceMethod(#NSXMLNode, "kind") = CULong;
override externalInstanceMethod(#NSXMLNode, "setName:") = Void, NSString;
override externalInstanceMethod(#NSXMLNode, "name") = NSString;
override externalInstanceMethod(#NSXMLNode, "setObjectValue:") = Void, Id;
override externalInstanceMethod(#NSXMLNode, "objectValue") = Id;
override externalInstanceMethod(#NSXMLNode, "setStringValue:") = Void, NSString;
override externalInstanceMethod(#NSXMLNode, "setStringValue:resolvingEntities:") = Void, NSString, Bool;
override externalInstanceMethod(#NSXMLNode, "stringValue") = NSString;
override externalInstanceMethod(#NSXMLNode, "index") = CULong;
override externalInstanceMethod(#NSXMLNode, "level") = CULong;
override externalInstanceMethod(#NSXMLNode, "rootDocument") = NSXMLDocument;
override externalInstanceMethod(#NSXMLNode, "parent") = NSXMLNode;
override externalInstanceMethod(#NSXMLNode, "childCount") = CULong;
override externalInstanceMethod(#NSXMLNode, "children") = NSArray;
override externalInstanceMethod(#NSXMLNode, "childAtIndex:") = NSXMLNode, CULong;
override externalInstanceMethod(#NSXMLNode, "previousSibling") = NSXMLNode;
override externalInstanceMethod(#NSXMLNode, "nextSibling") = NSXMLNode;
override externalInstanceMethod(#NSXMLNode, "previousNode") = NSXMLNode;
override externalInstanceMethod(#NSXMLNode, "nextNode") = NSXMLNode;
override externalInstanceMethod(#NSXMLNode, "detach") = Void;
override externalInstanceMethod(#NSXMLNode, "XPath") = NSString;
override externalInstanceMethod(#NSXMLNode, "localName") = NSString;
override externalInstanceMethod(#NSXMLNode, "prefix") = NSString;
override externalInstanceMethod(#NSXMLNode, "setURI:") = Void, NSString;
override externalInstanceMethod(#NSXMLNode, "URI") = NSString;
override externalClassMethod(#NSXMLNode, "localNameForName:") = NSString, NSString;
override externalClassMethod(#NSXMLNode, "prefixForName:") = NSString, NSString;
override externalClassMethod(#NSXMLNode, "predefinedNamespaceForPrefix:") = NSXMLNode, NSString;
override externalInstanceMethod(#NSXMLNode, "description") = NSString;
override externalInstanceMethod(#NSXMLNode, "XMLString") = NSString;
override externalInstanceMethod(#NSXMLNode, "XMLStringWithOptions:") = NSString, CULong;
override externalInstanceMethod(#NSXMLNode, "canonicalXMLStringPreservingComments:") = NSString, Bool;
override externalInstanceMethod(#NSXMLNode, "nodesForXPath:error:") = NSArray, NSString, Pointer[NSError];
override externalInstanceMethod(#NSXMLNode, "objectsForXQuery:constants:error:") = NSArray, NSString, NSDictionary, Pointer[NSError];
override externalInstanceMethod(#NSXMLNode, "objectsForXQuery:error:") = NSArray, NSString, Pointer[NSError];

record NSXMLParser = externalClass(NSObject);
override externalInstanceMethod(#NSXMLParser, "initWithContentsOfURL:") = Id, NSURL;
override externalInstanceMethod(#NSXMLParser, "initWithData:") = Id, NSData;
override externalInstanceMethod(#NSXMLParser, "delegate") = Id;
override externalInstanceMethod(#NSXMLParser, "setDelegate:") = Void, Id;
override externalInstanceMethod(#NSXMLParser, "setShouldProcessNamespaces:") = Void, Bool;
override externalInstanceMethod(#NSXMLParser, "setShouldReportNamespacePrefixes:") = Void, Bool;
override externalInstanceMethod(#NSXMLParser, "setShouldResolveExternalEntities:") = Void, Bool;
override externalInstanceMethod(#NSXMLParser, "shouldProcessNamespaces") = Bool;
override externalInstanceMethod(#NSXMLParser, "shouldReportNamespacePrefixes") = Bool;
override externalInstanceMethod(#NSXMLParser, "shouldResolveExternalEntities") = Bool;
override externalInstanceMethod(#NSXMLParser, "parse") = Bool;
override externalInstanceMethod(#NSXMLParser, "abortParsing") = Void;
override externalInstanceMethod(#NSXMLParser, "parserError") = NSError;
override externalInstanceMethod(#NSXMLParser, "publicID") = NSString;
override externalInstanceMethod(#NSXMLParser, "systemID") = NSString;
override externalInstanceMethod(#NSXMLParser, "lineNumber") = CLong;
override externalInstanceMethod(#NSXMLParser, "columnNumber") = CLong;


external NSFoundationVersionNumber : Double;

alias NSInteger = CLong;

alias NSUInteger = CULong;

external NSStringFromSelector(
    aSelector : SelectorHandle) : NSString;

external NSSelectorFromString(
    aSelectorName : NSString) : SelectorHandle;

external NSStringFromClass(
    aClass : Id) : NSString;

external NSClassFromString(
    aClassName : NSString) : Id;

external NSStringFromProtocol(
    proto : Id) : NSString;

external NSProtocolFromString(
    namestr : NSString) : Id;

external NSGetSizeAndAlignment(
    typePtr : Pointer[CChar],
    sizep : Pointer[CULong],
    alignp : Pointer[CULong]) : Pointer[CChar];

external NSLog(
    format : NSString,
    ..);

external NSLogv(
    format : NSString,
    args : Pointer[__va_list_tag]);

alias NSOrderedAscending = 4294967295;
alias NSOrderedSame = 0;
alias NSOrderedDescending = 1;

alias NSComparisonResult = CLong;

alias NSComparator = UnknownType;

alias NSEnumerationConcurrent = 1;
alias NSEnumerationReverse = 2;

alias NSEnumerationOptions = CULong;

alias NSSortConcurrent = 1;
alias NSSortStable = 16;

alias NSSortOptions = CULong;

alias NSNotFound = 9223372036854775807;

alias NSZone = Opaque;

external NSDefaultMallocZone() : Pointer[NSZone];

external NSCreateZone(
    startSize : CULong,
    granularity : CULong,
    canFree : Bool) : Pointer[NSZone];

external NSRecycleZone(
    zone : Pointer[NSZone]);

external NSSetZoneName(
    zone : Pointer[NSZone],
    name : NSString);

external NSZoneName(
    zone : Pointer[NSZone]) : NSString;

external NSZoneFromPointer(
    ptr : RawPointer) : Pointer[NSZone];

external NSZoneMalloc(
    zone : Pointer[NSZone],
    size : CULong) : RawPointer;

external NSZoneCalloc(
    zone : Pointer[NSZone],
    numElems : CULong,
    byteSize : CULong) : RawPointer;

external NSZoneRealloc(
    zone : Pointer[NSZone],
    ptr : RawPointer,
    size : CULong) : RawPointer;

external NSZoneFree(
    zone : Pointer[NSZone],
    ptr : RawPointer);

alias NSScannedOption = 1;
alias NSCollectorDisabledOption = 2;

external NSAllocateCollectable(
    size : CULong,
    options : CULong) : RawPointer;

external NSReallocateCollectable(
    ptr : RawPointer,
    size : CULong,
    options : CULong) : RawPointer;

external NSPageSize() : CULong;

external NSLogPageSize() : CULong;

external NSRoundUpToMultipleOfPageSize(
    bytes : CULong) : CULong;

external NSRoundDownToMultipleOfPageSize(
    bytes : CULong) : CULong;

external NSAllocateMemoryPages(
    bytes : CULong) : RawPointer;

external NSDeallocateMemoryPages(
    ptr : RawPointer,
    bytes : CULong);

external NSCopyMemoryPages(
    source : RawPointer,
    dest : RawPointer,
    bytes : CULong);

external NSRealMemoryAvailable() : CULong;

external NSAllocateObject(
    aClass : Id,
    extraBytes : CULong,
    zone : Pointer[NSZone]) : Id;

external NSDeallocateObject(
    object : Id);

external NSCopyObject(
    object : Id,
    extraBytes : CULong,
    zone : Pointer[NSZone]) : Id;

external NSShouldRetainWithZone(
    anObject : Id,
    requestedZone : Pointer[NSZone]) : Bool;

external NSIncrementExtraRefCount(
    object : Id);

external NSDecrementExtraRefCountWasZero(
    object : Id) : Bool;

external NSExtraRefCount(
    object : Id) : CULong;

record UnnamedStruct71 (
    state : CULong,
    itemsPtr : Pointer[Id],
    mutationsPtr : Pointer[CULong],
    extra : Array[CULong,5],
);

alias NSFastEnumerationState = UnnamedStruct71;

record Struct__NSRange (
    location : CULong,
    length : CULong,
);

alias NSRange = Struct__NSRange;

alias NSRangePointer = Pointer[NSRange];

external NSUnionRange(
    range1 : NSRange,
    range2 : NSRange) : NSRange;

external NSIntersectionRange(
    range1 : NSRange,
    range2 : NSRange) : NSRange;

external NSStringFromRange(
    range : NSRange) : NSString;

external NSRangeFromString(
    aString : NSString) : NSRange;

external NSBundleDidLoadNotification : NSString;

external NSLoadedClasses : NSString;

alias NS_UnknownByteOrder = 0;
alias NS_LittleEndian = 1;
alias NS_BigEndian = 2;

record UnnamedStruct72 (
    v : UInt,
);

alias NSSwappedFloat = UnnamedStruct72;

record UnnamedStruct73 (
    v : UInt64,
);

alias NSSwappedDouble = UnnamedStruct73;

external NSSystemClockDidChangeNotification : NSString;

alias NSTimeInterval = Double;

alias NSEraCalendarUnit = 2;
alias NSYearCalendarUnit = 4;
alias NSMonthCalendarUnit = 8;
alias NSDayCalendarUnit = 16;
alias NSHourCalendarUnit = 32;
alias NSMinuteCalendarUnit = 64;
alias NSSecondCalendarUnit = 128;
alias NSWeekCalendarUnit = 256;
alias NSWeekdayCalendarUnit = 512;
alias NSWeekdayOrdinalCalendarUnit = 1024;
alias NSQuarterCalendarUnit = 2048;

alias NSCalendarUnit = CULong;

alias NSWrapCalendarComponents = 1;

alias NSUndefinedDateComponent = 9223372036854775807;

alias unichar = UShort;

external NSParseErrorException : NSString;

alias NSCaseInsensitiveSearch = 1;
alias NSLiteralSearch = 2;
alias NSBackwardsSearch = 4;
alias NSAnchoredSearch = 8;
alias NSNumericSearch = 64;
alias NSDiacriticInsensitiveSearch = 128;
alias NSWidthInsensitiveSearch = 256;
alias NSForcedOrderingSearch = 512;

alias NSStringCompareOptions = CULong;

alias NSASCIIStringEncoding = 1;
alias NSNEXTSTEPStringEncoding = 2;
alias NSJapaneseEUCStringEncoding = 3;
alias NSUTF8StringEncoding = 4;
alias NSISOLatin1StringEncoding = 5;
alias NSSymbolStringEncoding = 6;
alias NSNonLossyASCIIStringEncoding = 7;
alias NSShiftJISStringEncoding = 8;
alias NSISOLatin2StringEncoding = 9;
alias NSUnicodeStringEncoding = 10;
alias NSWindowsCP1251StringEncoding = 11;
alias NSWindowsCP1252StringEncoding = 12;
alias NSWindowsCP1253StringEncoding = 13;
alias NSWindowsCP1254StringEncoding = 14;
alias NSWindowsCP1250StringEncoding = 15;
alias NSISO2022JPStringEncoding = 21;
alias NSMacOSRomanStringEncoding = 30;
alias NSUTF16StringEncoding = 10;
alias NSUTF16BigEndianStringEncoding = 2415919360;
alias NSUTF16LittleEndianStringEncoding = 2483028224;
alias NSUTF32StringEncoding = 2348810496;
alias NSUTF32BigEndianStringEncoding = 2550137088;
alias NSUTF32LittleEndianStringEncoding = 2617245952;

alias NSStringEncoding = CULong;

alias NSStringEncodingConversionAllowLossy = 1;
alias NSStringEncodingConversionExternalRepresentation = 2;

alias NSStringEncodingConversionOptions = CULong;

external NSCharacterConversionException : NSString;

alias NSOpenStepUnicodeReservedBase = 62464;

external NXReadNSObjectFromCoder(
    decoder : NSCoder) : NSObject;

alias NSDataReadingMapped = 1;
alias NSDataReadingUncached = 2;

alias NSDataReadingOptions = CULong;

alias NSDataWritingAtomic = 1;

alias NSDataWritingOptions = CULong;

alias NSMappedRead = 1;
alias NSUncachedRead = 2;

alias NSAtomicWrite = 1;

alias NSDataSearchBackwards = 1;
alias NSDataSearchAnchored = 2;

alias NSDataSearchOptions = CULong;

alias NSRoundPlain = 0;
alias NSRoundDown = 1;
alias NSRoundUp = 2;
alias NSRoundBankers = 3;

alias NSRoundingMode = CULong;

alias NSCalculationNoError = 0;
alias NSCalculationLossOfPrecision = 1;
alias NSCalculationUnderflow = 2;
alias NSCalculationOverflow = 3;
alias NSCalculationDivideByZero = 4;

alias NSCalculationError = CULong;

record UnnamedStruct74 (
    _exponent : Int,
    _length : UInt,
    _isNegative : UInt,
    _isCompact : UInt,
    _reserved : UInt,
    _mantissa : Array[UShort,8],
);

alias NSDecimal = UnnamedStruct74;

external NSDecimalCopy(
    destination : Pointer[NSDecimal],
    source : Pointer[NSDecimal]);

external NSDecimalCompact(
    number : Pointer[NSDecimal]);

external NSDecimalCompare(
    leftOperand : Pointer[NSDecimal],
    rightOperand : Pointer[NSDecimal]) : CLong;

external NSDecimalRound(
    result : Pointer[NSDecimal],
    number : Pointer[NSDecimal],
    scale : CLong,
    roundingMode : CULong);

external NSDecimalNormalize(
    number1 : Pointer[NSDecimal],
    number2 : Pointer[NSDecimal],
    roundingMode : CULong) : CULong;

external NSDecimalAdd(
    result : Pointer[NSDecimal],
    leftOperand : Pointer[NSDecimal],
    rightOperand : Pointer[NSDecimal],
    roundingMode : CULong) : CULong;

external NSDecimalSubtract(
    result : Pointer[NSDecimal],
    leftOperand : Pointer[NSDecimal],
    rightOperand : Pointer[NSDecimal],
    roundingMode : CULong) : CULong;

external NSDecimalMultiply(
    result : Pointer[NSDecimal],
    leftOperand : Pointer[NSDecimal],
    rightOperand : Pointer[NSDecimal],
    roundingMode : CULong) : CULong;

external NSDecimalDivide(
    result : Pointer[NSDecimal],
    leftOperand : Pointer[NSDecimal],
    rightOperand : Pointer[NSDecimal],
    roundingMode : CULong) : CULong;

external NSDecimalPower(
    result : Pointer[NSDecimal],
    number : Pointer[NSDecimal],
    power : CULong,
    roundingMode : CULong) : CULong;

external NSDecimalMultiplyByPowerOf10(
    result : Pointer[NSDecimal],
    number : Pointer[NSDecimal],
    power : Short,
    roundingMode : CULong) : CULong;

external NSDecimalString(
    dcm : Pointer[NSDecimal],
    locale : Id) : NSString;

external NSDecimalNumberExactnessException : NSString;

external NSDecimalNumberOverflowException : NSString;

external NSDecimalNumberUnderflowException : NSString;

external NSDecimalNumberDivideByZeroException : NSString;

external NSCocoaErrorDomain : NSString;

external NSPOSIXErrorDomain : NSString;

external NSOSStatusErrorDomain : NSString;

external NSMachErrorDomain : NSString;

external NSUnderlyingErrorKey : NSString;

external NSLocalizedDescriptionKey : NSString;

external NSLocalizedFailureReasonErrorKey : NSString;

external NSLocalizedRecoverySuggestionErrorKey : NSString;

external NSLocalizedRecoveryOptionsErrorKey : NSString;

external NSRecoveryAttempterErrorKey : NSString;

external NSHelpAnchorErrorKey : NSString;

external NSStringEncodingErrorKey : NSString;

external NSURLErrorKey : NSString;

external NSFilePathErrorKey : NSString;

external NSGenericException : NSString;

external NSRangeException : NSString;

external NSInvalidArgumentException : NSString;

external NSInternalInconsistencyException : NSString;

external NSMallocException : NSString;

external NSObjectInaccessibleException : NSString;

external NSObjectNotAvailableException : NSString;

external NSDestinationInvalidException : NSString;

external NSPortTimeoutException : NSString;

external NSInvalidSendPortException : NSString;

external NSInvalidReceivePortException : NSString;

external NSPortSendException : NSString;

external NSPortReceiveException : NSString;

external NSOldStyleException : NSString;

external NSGetUncaughtExceptionHandler() : CCodePointer[[NSException],[]];

external NSSetUncaughtExceptionHandler(
    argument0 : CCodePointer[[NSException],[]]);

external NSAssertionHandlerKey : NSString;

external NSFileHandleOperationException : NSString;

external NSFileHandleReadCompletionNotification : NSString;

external NSFileHandleReadToEndOfFileCompletionNotification : NSString;

external NSFileHandleConnectionAcceptedNotification : NSString;

external NSFileHandleDataAvailableNotification : NSString;

external NSFileHandleNotificationDataItem : NSString;

external NSFileHandleNotificationFileHandleItem : NSString;

external NSFileHandleNotificationMonitorModes : NSString;

external NSUserName() : NSString;

external NSFullUserName() : NSString;

external NSHomeDirectory() : NSString;

external NSHomeDirectoryForUser(
    userName : NSString) : NSString;

external NSTemporaryDirectory() : NSString;

external NSOpenStepRootDirectory() : NSString;

alias NSApplicationDirectory = 1;
alias NSDemoApplicationDirectory = 2;
alias NSDeveloperApplicationDirectory = 3;
alias NSAdminApplicationDirectory = 4;
alias NSLibraryDirectory = 5;
alias NSDeveloperDirectory = 6;
alias NSUserDirectory = 7;
alias NSDocumentationDirectory = 8;
alias NSDocumentDirectory = 9;
alias NSCoreServiceDirectory = 10;
alias NSAutosavedInformationDirectory = 11;
alias NSDesktopDirectory = 12;
alias NSCachesDirectory = 13;
alias NSApplicationSupportDirectory = 14;
alias NSDownloadsDirectory = 15;
alias NSInputMethodsDirectory = 16;
alias NSMoviesDirectory = 17;
alias NSMusicDirectory = 18;
alias NSPicturesDirectory = 19;
alias NSPrinterDescriptionDirectory = 20;
alias NSSharedPublicDirectory = 21;
alias NSPreferencePanesDirectory = 22;
alias NSItemReplacementDirectory = 99;
alias NSAllApplicationsDirectory = 100;
alias NSAllLibrariesDirectory = 101;

alias NSSearchPathDirectory = CULong;

alias NSUserDomainMask = 1;
alias NSLocalDomainMask = 2;
alias NSNetworkDomainMask = 4;
alias NSSystemDomainMask = 8;
alias NSAllDomainsMask = 65535;

alias NSSearchPathDomainMask = CULong;

external NSSearchPathForDirectoriesInDomains(
    directory : CULong,
    domainMask : CULong,
    expandTilde : Bool) : NSArray;

alias NSVolumeEnumerationSkipHiddenVolumes = 2;
alias NSVolumeEnumerationProduceFileReferenceURLs = 4;

alias NSVolumeEnumerationOptions = CULong;

alias NSDirectoryEnumerationSkipsSubdirectoryDescendants = 1;
alias NSDirectoryEnumerationSkipsPackageDescendants = 2;
alias NSDirectoryEnumerationSkipsHiddenFiles = 4;

alias NSDirectoryEnumerationOptions = CULong;

alias NSFileManagerItemReplacementUsingNewMetadataOnly = 1;
alias NSFileManagerItemReplacementWithoutDeletingBackupItem = 2;

alias NSFileManagerItemReplacementOptions = CULong;

external NSFileType : NSString;

external NSFileTypeDirectory : NSString;

external NSFileTypeRegular : NSString;

external NSFileTypeSymbolicLink : NSString;

external NSFileTypeSocket : NSString;

external NSFileTypeCharacterSpecial : NSString;

external NSFileTypeBlockSpecial : NSString;

external NSFileTypeUnknown : NSString;

external NSFileSize : NSString;

external NSFileModificationDate : NSString;

external NSFileReferenceCount : NSString;

external NSFileDeviceIdentifier : NSString;

external NSFileOwnerAccountName : NSString;

external NSFileGroupOwnerAccountName : NSString;

external NSFilePosixPermissions : NSString;

external NSFileSystemNumber : NSString;

external NSFileSystemFileNumber : NSString;

external NSFileExtensionHidden : NSString;

external NSFileHFSCreatorCode : NSString;

external NSFileHFSTypeCode : NSString;

external NSFileImmutable : NSString;

external NSFileAppendOnly : NSString;

external NSFileCreationDate : NSString;

external NSFileOwnerAccountID : NSString;

external NSFileGroupOwnerAccountID : NSString;

external NSFileBusy : NSString;

external NSFileSystemSize : NSString;

external NSFileSystemFreeSize : NSString;

external NSFileSystemNodes : NSString;

external NSFileSystemFreeNodes : NSString;

external NSUndefinedKeyException : NSString;

external NSAverageKeyValueOperator : NSString;

external NSCountKeyValueOperator : NSString;

external NSDistinctUnionOfArraysKeyValueOperator : NSString;

external NSDistinctUnionOfObjectsKeyValueOperator : NSString;

external NSDistinctUnionOfSetsKeyValueOperator : NSString;

external NSMaximumKeyValueOperator : NSString;

external NSMinimumKeyValueOperator : NSString;

external NSSumKeyValueOperator : NSString;

external NSUnionOfArraysKeyValueOperator : NSString;

external NSUnionOfObjectsKeyValueOperator : NSString;

external NSUnionOfSetsKeyValueOperator : NSString;

alias NSKeyValueObservingOptionNew = 1;
alias NSKeyValueObservingOptionOld = 2;
alias NSKeyValueObservingOptionInitial = 4;
alias NSKeyValueObservingOptionPrior = 8;

alias NSKeyValueObservingOptions = CULong;

alias NSKeyValueChangeSetting = 1;
alias NSKeyValueChangeInsertion = 2;
alias NSKeyValueChangeRemoval = 3;
alias NSKeyValueChangeReplacement = 4;

alias NSKeyValueChange = CULong;

alias NSKeyValueUnionSetMutation = 1;
alias NSKeyValueMinusSetMutation = 2;
alias NSKeyValueIntersectSetMutation = 3;
alias NSKeyValueSetSetMutation = 4;

alias NSKeyValueSetMutationKind = CULong;

external NSKeyValueChangeKindKey : NSString;

external NSKeyValueChangeNewKey : NSString;

external NSKeyValueChangeOldKey : NSString;

external NSKeyValueChangeIndexesKey : NSString;

external NSKeyValueChangeNotificationIsPriorKey : NSString;

alias NSPropertyListImmutable = 0;
alias NSPropertyListMutableContainers = 1;
alias NSPropertyListMutableContainersAndLeaves = 2;

alias NSPropertyListMutabilityOptions = CULong;

alias NSPropertyListOpenStepFormat = 1;
alias NSPropertyListXMLFormat_v1_0 = 100;
alias NSPropertyListBinaryFormat_v1_0 = 200;

alias NSPropertyListFormat = CULong;

alias NSPropertyListReadOptions = CULong;

alias NSPropertyListWriteOptions = CULong;

alias NSPoint = CGPoint;

alias NSPointPointer = Pointer[NSPoint];

alias NSPointArray = Pointer[NSPoint];

alias NSSize = CGSize;

alias NSSizePointer = Pointer[NSSize];

alias NSSizeArray = Pointer[NSSize];

alias NSRect = CGRect;

alias NSRectPointer = Pointer[NSRect];

alias NSRectArray = Pointer[NSRect];

alias NSRectEdge = CULong;

external NSZeroPoint : NSPoint;

external NSZeroSize : NSSize;

external NSZeroRect : NSRect;

external NSEqualPoints(
    aPoint : NSPoint,
    bPoint : NSPoint) : Bool;

external NSEqualSizes(
    aSize : NSSize,
    bSize : NSSize) : Bool;

external NSEqualRects(
    aRect : NSRect,
    bRect : NSRect) : Bool;

external NSIsEmptyRect(
    aRect : NSRect) : Bool;

external NSInsetRect(
    aRect : NSRect,
    dX : Double,
    dY : Double) : NSRect;

external NSIntegralRect(
    aRect : NSRect) : NSRect;

external NSUnionRect(
    aRect : NSRect,
    bRect : NSRect) : NSRect;

external NSIntersectionRect(
    aRect : NSRect,
    bRect : NSRect) : NSRect;

external NSOffsetRect(
    aRect : NSRect,
    dX : Double,
    dY : Double) : NSRect;

external NSDivideRect(
    inRect : NSRect,
    slice : Pointer[NSRect],
    rem : Pointer[NSRect],
    amount : Double,
    edge : CULong);

external NSPointInRect(
    aPoint : NSPoint,
    aRect : NSRect) : Bool;

external NSMouseInRect(
    aPoint : NSPoint,
    aRect : NSRect,
    flipped : Bool) : Bool;

external NSContainsRect(
    aRect : NSRect,
    bRect : NSRect) : Bool;

external NSIntersectsRect(
    aRect : NSRect,
    bRect : NSRect) : Bool;

external NSStringFromPoint(
    aPoint : NSPoint) : NSString;

external NSStringFromSize(
    aSize : NSSize) : NSString;

external NSStringFromRect(
    aRect : NSRect) : NSString;

external NSPointFromString(
    aString : NSString) : NSPoint;

external NSSizeFromString(
    aString : NSString) : NSSize;

external NSRectFromString(
    aString : NSString) : NSRect;

external NSInvalidArchiveOperationException : NSString;

external NSInvalidUnarchiveOperationException : NSString;

external NSCurrentLocaleDidChangeNotification : NSString;

external NSLocaleIdentifier : NSString;

external NSLocaleLanguageCode : NSString;

external NSLocaleCountryCode : NSString;

external NSLocaleScriptCode : NSString;

external NSLocaleVariantCode : NSString;

external NSLocaleExemplarCharacterSet : NSString;

external NSLocaleCalendar : NSString;

external NSLocaleCollationIdentifier : NSString;

external NSLocaleUsesMetricSystem : NSString;

external NSLocaleMeasurementSystem : NSString;

external NSLocaleDecimalSeparator : NSString;

external NSLocaleGroupingSeparator : NSString;

external NSLocaleCurrencySymbol : NSString;

external NSLocaleCurrencyCode : NSString;

external NSLocaleCollatorIdentifier : NSString;

external NSLocaleQuotationBeginDelimiterKey : NSString;

external NSLocaleQuotationEndDelimiterKey : NSString;

external NSLocaleAlternateQuotationBeginDelimiterKey : NSString;

external NSLocaleAlternateQuotationEndDelimiterKey : NSString;

external NSGregorianCalendar : NSString;

external NSBuddhistCalendar : NSString;

external NSChineseCalendar : NSString;

external NSHebrewCalendar : NSString;

external NSIslamicCalendar : NSString;

external NSIslamicCivilCalendar : NSString;

external NSJapaneseCalendar : NSString;

external NSRepublicOfChinaCalendar : NSString;

external NSPersianCalendar : NSString;

external NSIndianCalendar : NSString;

external NSISO8601Calendar : NSString;

alias NSPostWhenIdle = 1;
alias NSPostASAP = 2;
alias NSPostNow = 3;

alias NSPostingStyle = CULong;

alias NSNotificationNoCoalescing = 0;
alias NSNotificationCoalescingOnName = 1;
alias NSNotificationCoalescingOnSender = 2;

alias NSNotificationCoalescing = CULong;

alias NSSocketNativeHandle = Int;

external NSPortDidBecomeInvalidNotification : NSString;

alias NSWindowsNTOperatingSystem = 1;
alias NSWindows95OperatingSystem = 2;
alias NSSolarisOperatingSystem = 3;
alias NSHPUXOperatingSystem = 4;
alias NSMACHOperatingSystem = 5;
alias NSSunOSOperatingSystem = 6;
alias NSOSF1OperatingSystem = 7;

external NSDefaultRunLoopMode : NSString;

external NSRunLoopCommonModes : NSString;

alias NSStreamStatusNotOpen = 0;
alias NSStreamStatusOpening = 1;
alias NSStreamStatusOpen = 2;
alias NSStreamStatusReading = 3;
alias NSStreamStatusWriting = 4;
alias NSStreamStatusAtEnd = 5;
alias NSStreamStatusClosed = 6;
alias NSStreamStatusError = 7;

alias NSStreamStatus = CULong;

alias NSStreamEventNone = 0;
alias NSStreamEventOpenCompleted = 1;
alias NSStreamEventHasBytesAvailable = 2;
alias NSStreamEventHasSpaceAvailable = 4;
alias NSStreamEventErrorOccurred = 8;
alias NSStreamEventEndEncountered = 16;

alias NSStreamEvent = CULong;

external NSStreamSocketSecurityLevelKey : NSString;

external NSStreamSocketSecurityLevelNone : NSString;

external NSStreamSocketSecurityLevelSSLv2 : NSString;

external NSStreamSocketSecurityLevelSSLv3 : NSString;

external NSStreamSocketSecurityLevelTLSv1 : NSString;

external NSStreamSocketSecurityLevelNegotiatedSSL : NSString;

external NSStreamSOCKSProxyConfigurationKey : NSString;

external NSStreamSOCKSProxyHostKey : NSString;

external NSStreamSOCKSProxyPortKey : NSString;

external NSStreamSOCKSProxyVersionKey : NSString;

external NSStreamSOCKSProxyUserKey : NSString;

external NSStreamSOCKSProxyPasswordKey : NSString;

external NSStreamSOCKSProxyVersion4 : NSString;

external NSStreamSOCKSProxyVersion5 : NSString;

external NSStreamDataWrittenToMemoryStreamKey : NSString;

external NSStreamFileCurrentOffsetKey : NSString;

external NSStreamSocketSSLErrorDomain : NSString;

external NSStreamSOCKSErrorDomain : NSString;

external NSWillBecomeMultiThreadedNotification : NSString;

external NSDidBecomeSingleThreadedNotification : NSString;

external NSThreadWillExitNotification : NSString;

external NSSystemTimeZoneDidChangeNotification : NSString;

external NSHTTPPropertyStatusCodeKey : NSString;

external NSHTTPPropertyStatusReasonKey : NSString;

external NSHTTPPropertyServerHTTPVersionKey : NSString;

external NSHTTPPropertyRedirectionHeadersKey : NSString;

external NSHTTPPropertyErrorPageDataKey : NSString;

external NSHTTPPropertyHTTPProxy : NSString;

external NSFTPPropertyUserLoginKey : NSString;

external NSFTPPropertyUserPasswordKey : NSString;

external NSFTPPropertyActiveTransferModeKey : NSString;

external NSFTPPropertyFileOffsetKey : NSString;

external NSFTPPropertyFTPProxy : NSString;

alias NSURLHandleNotLoaded = 0;
alias NSURLHandleLoadSucceeded = 1;
alias NSURLHandleLoadInProgress = 2;
alias NSURLHandleLoadFailed = 3;

alias NSURLHandleStatus = CULong;

alias NSURLBookmarkCreationPreferFileIDResolution = 256;
alias NSURLBookmarkCreationMinimalBookmark = 512;
alias NSURLBookmarkCreationSuitableForBookmarkFile = 1024;

alias NSURLBookmarkResolutionWithoutUI = 256;
alias NSURLBookmarkResolutionWithoutMounting = 512;

alias NSURLBookmarkCreationOptions = CULong;

alias NSURLBookmarkResolutionOptions = CULong;

alias NSURLBookmarkFileCreationOptions = CULong;

external NSURLFileScheme : NSString;

external NSURLNameKey : NSString;

external NSURLLocalizedNameKey : NSString;

external NSURLIsRegularFileKey : NSString;

external NSURLIsDirectoryKey : NSString;

external NSURLIsSymbolicLinkKey : NSString;

external NSURLIsVolumeKey : NSString;

external NSURLIsPackageKey : NSString;

external NSURLIsSystemImmutableKey : NSString;

external NSURLIsUserImmutableKey : NSString;

external NSURLIsHiddenKey : NSString;

external NSURLHasHiddenExtensionKey : NSString;

external NSURLCreationDateKey : NSString;

external NSURLContentAccessDateKey : NSString;

external NSURLContentModificationDateKey : NSString;

external NSURLAttributeModificationDateKey : NSString;

external NSURLLinkCountKey : NSString;

external NSURLParentDirectoryURLKey : NSString;

external NSURLVolumeURLKey : NSString;

external NSURLTypeIdentifierKey : NSString;

external NSURLLocalizedTypeDescriptionKey : NSString;

external NSURLLabelNumberKey : NSString;

external NSURLLabelColorKey : NSString;

external NSURLLocalizedLabelKey : NSString;

external NSURLEffectiveIconKey : NSString;

external NSURLCustomIconKey : NSString;

external NSURLFileSizeKey : NSString;

external NSURLFileAllocatedSizeKey : NSString;

external NSURLIsAliasFileKey : NSString;

external NSURLVolumeLocalizedFormatDescriptionKey : NSString;

external NSURLVolumeTotalCapacityKey : NSString;

external NSURLVolumeAvailableCapacityKey : NSString;

external NSURLVolumeResourceCountKey : NSString;

external NSURLVolumeSupportsPersistentIDsKey : NSString;

external NSURLVolumeSupportsSymbolicLinksKey : NSString;

external NSURLVolumeSupportsHardLinksKey : NSString;

external NSURLVolumeSupportsJournalingKey : NSString;

external NSURLVolumeIsJournalingKey : NSString;

external NSURLVolumeSupportsSparseFilesKey : NSString;

external NSURLVolumeSupportsZeroRunsKey : NSString;

external NSURLVolumeSupportsCaseSensitiveNamesKey : NSString;

external NSURLVolumeSupportsCasePreservedNamesKey : NSString;

external NSGlobalDomain : NSString;

external NSArgumentDomain : NSString;

external NSRegistrationDomain : NSString;

external NSUserDefaultsDidChangeNotification : NSString;

external NSWeekDayNameArray : NSString;

external NSShortWeekDayNameArray : NSString;

external NSMonthNameArray : NSString;

external NSShortMonthNameArray : NSString;

external NSTimeFormatString : NSString;

external NSDateFormatString : NSString;

external NSTimeDateFormatString : NSString;

external NSShortTimeDateFormatString : NSString;

external NSCurrencySymbol : NSString;

external NSDecimalSeparator : NSString;

external NSThousandsSeparator : NSString;

external NSDecimalDigits : NSString;

external NSAMPMDesignation : NSString;

external NSHourNameDesignations : NSString;

external NSYearMonthWeekDesignations : NSString;

external NSEarlierTimeDesignations : NSString;

external NSLaterTimeDesignations : NSString;

external NSThisDayDesignations : NSString;

external NSNextDayDesignations : NSString;

external NSNextNextDayDesignations : NSString;

external NSPriorDayDesignations : NSString;

external NSDateTimeOrdering : NSString;

external NSInternationalCurrencyString : NSString;

external NSShortDateFormatString : NSString;

external NSPositiveCurrencyFormatString : NSString;

external NSNegativeCurrencyFormatString : NSString;

alias NSFileNoSuchFileError = 4;
alias NSFileLockingError = 255;
alias NSFileReadUnknownError = 256;
alias NSFileReadNoPermissionError = 257;
alias NSFileReadInvalidFileNameError = 258;
alias NSFileReadCorruptFileError = 259;
alias NSFileReadNoSuchFileError = 260;
alias NSFileReadInapplicableStringEncodingError = 261;
alias NSFileReadUnsupportedSchemeError = 262;
alias NSFileReadTooLargeError = 263;
alias NSFileReadUnknownStringEncodingError = 264;
alias NSFileWriteUnknownError = 512;
alias NSFileWriteNoPermissionError = 513;
alias NSFileWriteInvalidFileNameError = 514;
alias NSFileWriteInapplicableStringEncodingError = 517;
alias NSFileWriteUnsupportedSchemeError = 518;
alias NSFileWriteOutOfSpaceError = 640;
alias NSFileWriteVolumeReadOnlyError = 642;
alias NSKeyValueValidationError = 1024;
alias NSFormattingError = 2048;
alias NSUserCancelledError = 3072;
alias NSExecutableNotLoadableError = 3584;
alias NSExecutableArchitectureMismatchError = 3585;
alias NSExecutableRuntimeMismatchError = 3586;
alias NSExecutableLoadError = 3587;
alias NSExecutableLinkError = 3588;
alias NSFileErrorMinimum = 0;
alias NSFileErrorMaximum = 1023;
alias NSValidationErrorMinimum = 1024;
alias NSValidationErrorMaximum = 2047;
alias NSExecutableErrorMinimum = 3584;
alias NSExecutableErrorMaximum = 3839;
alias NSFormattingErrorMinimum = 2048;
alias NSFormattingErrorMaximum = 2559;
alias NSPropertyListReadCorruptError = 3840;
alias NSPropertyListReadUnknownVersionError = 3841;
alias NSPropertyListReadStreamError = 3842;
alias NSPropertyListWriteStreamError = 3851;
alias NSPropertyListErrorMinimum = 3840;
alias NSPropertyListErrorMaximum = 4095;

external NSInvocationOperationVoidResultException : NSString;

external NSInvocationOperationCancelledException : NSString;

external NSHTTPCookieName : NSString;

external NSHTTPCookieValue : NSString;

external NSHTTPCookieOriginURL : NSString;

external NSHTTPCookieVersion : NSString;

external NSHTTPCookieDomain : NSString;

external NSHTTPCookiePath : NSString;

external NSHTTPCookieSecure : NSString;

external NSHTTPCookieExpires : NSString;

external NSHTTPCookieComment : NSString;

external NSHTTPCookieCommentURL : NSString;

external NSHTTPCookieDiscard : NSString;

external NSHTTPCookieMaximumAge : NSString;

external NSHTTPCookiePort : NSString;

alias NSHTTPCookieAcceptPolicyAlways = 0;
alias NSHTTPCookieAcceptPolicyNever = 1;
alias NSHTTPCookieAcceptPolicyOnlyFromMainDocumentDomain = 2;

alias NSHTTPCookieAcceptPolicy = CULong;

external NSHTTPCookieManagerAcceptPolicyChangedNotification : NSString;

external NSHTTPCookieManagerCookiesChangedNotification : NSString;

external NSNetServicesErrorCode : NSString;

external NSNetServicesErrorDomain : NSString;

alias NSNetServicesUnknownError = 4294895296;
alias NSNetServicesCollisionError = 4294895295;
alias NSNetServicesNotFoundError = 4294895294;
alias NSNetServicesActivityInProgress = 4294895293;
alias NSNetServicesBadArgumentError = 4294895292;
alias NSNetServicesCancelledError = 4294895291;
alias NSNetServicesInvalidError = 4294895290;
alias NSNetServicesTimeoutError = 4294895289;

alias NSNetServicesError = CLong;

alias NSNetServiceNoAutoRename = 1;

alias NSNetServiceOptions = CULong;

alias NSURLCacheStorageAllowed = 0;
alias NSURLCacheStorageAllowedInMemoryOnly = 1;
alias NSURLCacheStorageNotAllowed = 2;

alias NSURLCacheStoragePolicy = CULong;

alias NSURLCredentialPersistenceNone = 0;
alias NSURLCredentialPersistenceForSession = 1;
alias NSURLCredentialPersistencePermanent = 2;

alias NSURLCredentialPersistence = CULong;

external NSURLCredentialStorageChangedNotification : NSString;

external NSURLErrorDomain : NSString;

external NSURLErrorFailingURLErrorKey : NSString;

external NSURLErrorFailingURLStringErrorKey : NSString;

external NSErrorFailingURLStringKey : NSString;

external NSURLErrorFailingURLPeerTrustErrorKey : NSString;

alias NSURLErrorUnknown = 4294967295;
alias NSURLErrorCancelled = 4294966297;
alias NSURLErrorBadURL = 4294966296;
alias NSURLErrorTimedOut = 4294966295;
alias NSURLErrorUnsupportedURL = 4294966294;
alias NSURLErrorCannotFindHost = 4294966293;
alias NSURLErrorCannotConnectToHost = 4294966292;
alias NSURLErrorNetworkConnectionLost = 4294966291;
alias NSURLErrorDNSLookupFailed = 4294966290;
alias NSURLErrorHTTPTooManyRedirects = 4294966289;
alias NSURLErrorResourceUnavailable = 4294966288;
alias NSURLErrorNotConnectedToInternet = 4294966287;
alias NSURLErrorRedirectToNonExistentLocation = 4294966286;
alias NSURLErrorBadServerResponse = 4294966285;
alias NSURLErrorUserCancelledAuthentication = 4294966284;
alias NSURLErrorUserAuthenticationRequired = 4294966283;
alias NSURLErrorZeroByteResource = 4294966282;
alias NSURLErrorCannotDecodeRawData = 4294966281;
alias NSURLErrorCannotDecodeContentData = 4294966280;
alias NSURLErrorCannotParseResponse = 4294966279;
alias NSURLErrorFileDoesNotExist = 4294966196;
alias NSURLErrorFileIsDirectory = 4294966195;
alias NSURLErrorNoPermissionsToReadFile = 4294966194;
alias NSURLErrorDataLengthExceedsMaximum = 4294966193;
alias NSURLErrorSecureConnectionFailed = 4294966096;
alias NSURLErrorServerCertificateHasBadDate = 4294966095;
alias NSURLErrorServerCertificateUntrusted = 4294966094;
alias NSURLErrorServerCertificateHasUnknownRoot = 4294966093;
alias NSURLErrorServerCertificateNotYetValid = 4294966092;
alias NSURLErrorClientCertificateRejected = 4294966091;
alias NSURLErrorClientCertificateRequired = 4294966090;
alias NSURLErrorCannotLoadFromNetwork = 4294965296;
alias NSURLErrorCannotCreateFile = 4294964296;
alias NSURLErrorCannotOpenFile = 4294964295;
alias NSURLErrorCannotCloseFile = 4294964294;
alias NSURLErrorCannotWriteToFile = 4294964293;
alias NSURLErrorCannotRemoveFile = 4294964292;
alias NSURLErrorCannotMoveFile = 4294964291;
alias NSURLErrorDownloadDecodingFailedMidStream = 4294964290;
alias NSURLErrorDownloadDecodingFailedToComplete = 4294964289;

external NSURLProtectionSpaceHTTP : NSString;

external NSURLProtectionSpaceHTTPS : NSString;

external NSURLProtectionSpaceFTP : NSString;

external NSURLProtectionSpaceHTTPProxy : NSString;

external NSURLProtectionSpaceHTTPSProxy : NSString;

external NSURLProtectionSpaceFTPProxy : NSString;

external NSURLProtectionSpaceSOCKSProxy : NSString;

external NSURLAuthenticationMethodDefault : NSString;

external NSURLAuthenticationMethodHTTPBasic : NSString;

external NSURLAuthenticationMethodHTTPDigest : NSString;

external NSURLAuthenticationMethodHTMLForm : NSString;

external NSURLAuthenticationMethodNTLM : NSString;

external NSURLAuthenticationMethodNegotiate : NSString;

external NSURLAuthenticationMethodClientCertificate : NSString;

external NSURLAuthenticationMethodServerTrust : NSString;

alias NSURLRequestUseProtocolCachePolicy = 0;
alias NSURLRequestReloadIgnoringLocalCacheData = 1;
alias NSURLRequestReloadIgnoringLocalAndRemoteCacheData = 4;
alias NSURLRequestReloadIgnoringCacheData = 1;
alias NSURLRequestReturnCacheDataElseLoad = 2;
alias NSURLRequestReturnCacheDataDontLoad = 3;
alias NSURLRequestReloadRevalidatingCacheData = 5;

alias NSURLRequestCachePolicy = CULong;

external NSXMLParserErrorDomain : NSString;

alias NSXMLParserInternalError = 1;
alias NSXMLParserOutOfMemoryError = 2;
alias NSXMLParserDocumentStartError = 3;
alias NSXMLParserEmptyDocumentError = 4;
alias NSXMLParserPrematureDocumentEndError = 5;
alias NSXMLParserInvalidHexCharacterRefError = 6;
alias NSXMLParserInvalidDecimalCharacterRefError = 7;
alias NSXMLParserInvalidCharacterRefError = 8;
alias NSXMLParserInvalidCharacterError = 9;
alias NSXMLParserCharacterRefAtEOFError = 10;
alias NSXMLParserCharacterRefInPrologError = 11;
alias NSXMLParserCharacterRefInEpilogError = 12;
alias NSXMLParserCharacterRefInDTDError = 13;
alias NSXMLParserEntityRefAtEOFError = 14;
alias NSXMLParserEntityRefInPrologError = 15;
alias NSXMLParserEntityRefInEpilogError = 16;
alias NSXMLParserEntityRefInDTDError = 17;
alias NSXMLParserParsedEntityRefAtEOFError = 18;
alias NSXMLParserParsedEntityRefInPrologError = 19;
alias NSXMLParserParsedEntityRefInEpilogError = 20;
alias NSXMLParserParsedEntityRefInInternalSubsetError = 21;
alias NSXMLParserEntityReferenceWithoutNameError = 22;
alias NSXMLParserEntityReferenceMissingSemiError = 23;
alias NSXMLParserParsedEntityRefNoNameError = 24;
alias NSXMLParserParsedEntityRefMissingSemiError = 25;
alias NSXMLParserUndeclaredEntityError = 26;
alias NSXMLParserUnparsedEntityError = 28;
alias NSXMLParserEntityIsExternalError = 29;
alias NSXMLParserEntityIsParameterError = 30;
alias NSXMLParserUnknownEncodingError = 31;
alias NSXMLParserEncodingNotSupportedError = 32;
alias NSXMLParserStringNotStartedError = 33;
alias NSXMLParserStringNotClosedError = 34;
alias NSXMLParserNamespaceDeclarationError = 35;
alias NSXMLParserEntityNotStartedError = 36;
alias NSXMLParserEntityNotFinishedError = 37;
alias NSXMLParserLessThanSymbolInAttributeError = 38;
alias NSXMLParserAttributeNotStartedError = 39;
alias NSXMLParserAttributeNotFinishedError = 40;
alias NSXMLParserAttributeHasNoValueError = 41;
alias NSXMLParserAttributeRedefinedError = 42;
alias NSXMLParserLiteralNotStartedError = 43;
alias NSXMLParserLiteralNotFinishedError = 44;
alias NSXMLParserCommentNotFinishedError = 45;
alias NSXMLParserProcessingInstructionNotStartedError = 46;
alias NSXMLParserProcessingInstructionNotFinishedError = 47;
alias NSXMLParserNotationNotStartedError = 48;
alias NSXMLParserNotationNotFinishedError = 49;
alias NSXMLParserAttributeListNotStartedError = 50;
alias NSXMLParserAttributeListNotFinishedError = 51;
alias NSXMLParserMixedContentDeclNotStartedError = 52;
alias NSXMLParserMixedContentDeclNotFinishedError = 53;
alias NSXMLParserElementContentDeclNotStartedError = 54;
alias NSXMLParserElementContentDeclNotFinishedError = 55;
alias NSXMLParserXMLDeclNotStartedError = 56;
alias NSXMLParserXMLDeclNotFinishedError = 57;
alias NSXMLParserConditionalSectionNotStartedError = 58;
alias NSXMLParserConditionalSectionNotFinishedError = 59;
alias NSXMLParserExternalSubsetNotFinishedError = 60;
alias NSXMLParserDOCTYPEDeclNotFinishedError = 61;
alias NSXMLParserMisplacedCDATAEndStringError = 62;
alias NSXMLParserCDATANotFinishedError = 63;
alias NSXMLParserMisplacedXMLDeclarationError = 64;
alias NSXMLParserSpaceRequiredError = 65;
alias NSXMLParserSeparatorRequiredError = 66;
alias NSXMLParserNMTOKENRequiredError = 67;
alias NSXMLParserNAMERequiredError = 68;
alias NSXMLParserPCDATARequiredError = 69;
alias NSXMLParserURIRequiredError = 70;
alias NSXMLParserPublicIdentifierRequiredError = 71;
alias NSXMLParserLTRequiredError = 72;
alias NSXMLParserGTRequiredError = 73;
alias NSXMLParserLTSlashRequiredError = 74;
alias NSXMLParserEqualExpectedError = 75;
alias NSXMLParserTagNameMismatchError = 76;
alias NSXMLParserUnfinishedTagError = 77;
alias NSXMLParserStandaloneValueError = 78;
alias NSXMLParserInvalidEncodingNameError = 79;
alias NSXMLParserCommentContainsDoubleHyphenError = 80;
alias NSXMLParserInvalidEncodingError = 81;
alias NSXMLParserExternalStandaloneEntityError = 82;
alias NSXMLParserInvalidConditionalSectionError = 83;
alias NSXMLParserEntityValueRequiredError = 84;
alias NSXMLParserNotWellBalancedError = 85;
alias NSXMLParserExtraContentError = 86;
alias NSXMLParserInvalidCharacterInEntityError = 87;
alias NSXMLParserParsedEntityRefInInternalError = 88;
alias NSXMLParserEntityRefLoopError = 89;
alias NSXMLParserEntityBoundaryError = 90;
alias NSXMLParserInvalidURIError = 91;
alias NSXMLParserURIFragmentError = 92;
alias NSXMLParserNoDTDError = 94;
alias NSXMLParserDelegateAbortedParseError = 512;

alias NSXMLParserError = CLong;

external NSInconsistentArchiveException : NSString;

external NSConnectionReplyMode : NSString;

external NSConnectionDidDieNotification : NSString;

external NSFailedAuthenticationException : NSString;

external NSConnectionDidInitializeNotification : NSString;

external NSLocalNotificationCenterType : NSString;

alias NSNotificationSuspensionBehaviorDrop = 1;
alias NSNotificationSuspensionBehaviorCoalesce = 2;
alias NSNotificationSuspensionBehaviorHold = 3;
alias NSNotificationSuspensionBehaviorDeliverImmediately = 4;

alias NSNotificationSuspensionBehavior = CULong;

alias NSTaskTerminationReasonExit = 1;
alias NSTaskTerminationReasonUncaughtSignal = 2;

alias NSTaskTerminationReason = CLong;

external NSTaskDidTerminateNotification : NSString;

alias NSXMLNodeOptionsNone = 0;
alias NSXMLNodeIsCDATA = 1;
alias NSXMLNodeExpandEmptyElement = 2;
alias NSXMLNodeCompactEmptyElement = 4;
alias NSXMLNodeUseSingleQuotes = 8;
alias NSXMLNodeUseDoubleQuotes = 16;
alias NSXMLDocumentTidyHTML = 512;
alias NSXMLDocumentTidyXML = 1024;
alias NSXMLDocumentValidate = 8192;
alias NSXMLDocumentXInclude = 65536;
alias NSXMLNodePrettyPrint = 131072;
alias NSXMLDocumentIncludeContentTypeDeclaration = 262144;
alias NSXMLNodePreserveNamespaceOrder = 1048576;
alias NSXMLNodePreserveAttributeOrder = 2097152;
alias NSXMLNodePreserveEntities = 4194304;
alias NSXMLNodePreservePrefixes = 8388608;
alias NSXMLNodePreserveCDATA = 16777216;
alias NSXMLNodePreserveWhitespace = 33554432;
alias NSXMLNodePreserveDTD = 67108864;
alias NSXMLNodePreserveCharacterReferences = 134217728;
alias NSXMLNodePreserveEmptyElements = 6;
alias NSXMLNodePreserveQuotes = 24;
alias NSXMLNodePreserveAll = 4293918750;

alias NSXMLInvalidKind = 0;
alias NSXMLDocumentKind = 1;
alias NSXMLElementKind = 2;
alias NSXMLAttributeKind = 3;
alias NSXMLNamespaceKind = 4;
alias NSXMLProcessingInstructionKind = 5;
alias NSXMLCommentKind = 6;
alias NSXMLTextKind = 7;
alias NSXMLDTDKind = 8;
alias NSXMLEntityDeclarationKind = 9;
alias NSXMLAttributeDeclarationKind = 10;
alias NSXMLElementDeclarationKind = 11;
alias NSXMLNotationDeclarationKind = 12;

alias NSXMLNodeKind = CULong;

alias NSXMLEntityGeneralKind = 1;
alias NSXMLEntityParsedKind = 2;
alias NSXMLEntityUnparsedKind = 3;
alias NSXMLEntityParameterKind = 4;
alias NSXMLEntityPredefined = 5;
alias NSXMLAttributeCDATAKind = 6;
alias NSXMLAttributeIDKind = 7;
alias NSXMLAttributeIDRefKind = 8;
alias NSXMLAttributeIDRefsKind = 9;
alias NSXMLAttributeEntityKind = 10;
alias NSXMLAttributeEntitiesKind = 11;
alias NSXMLAttributeNMTokenKind = 12;
alias NSXMLAttributeNMTokensKind = 13;
alias NSXMLAttributeEnumerationKind = 14;
alias NSXMLAttributeNotationKind = 15;
alias NSXMLElementDeclarationUndefinedKind = 16;
alias NSXMLElementDeclarationEmptyKind = 17;
alias NSXMLElementDeclarationAnyKind = 18;
alias NSXMLElementDeclarationMixedKind = 19;
alias NSXMLElementDeclarationElementKind = 20;

alias NSXMLDTDNodeKind = CULong;

alias NSXMLDocumentXMLKind = 0;
alias NSXMLDocumentXHTMLKind = 1;
alias NSXMLDocumentHTMLKind = 2;
alias NSXMLDocumentTextKind = 3;

alias NSXMLDocumentContentKind = CULong;

record UnnamedStruct115 (
    m11 : Double,
    m12 : Double,
    m21 : Double,
    m22 : Double,
    tX : Double,
    tY : Double,
);

alias NSAffineTransformStruct = UnnamedStruct115;

alias NSAppleEventManagerSuspensionID = OpaquePointer;

external NSAppleEventTimeOutDefault : Double;

external NSAppleEventTimeOutNone : Double;

external NSAppleEventManagerWillProcessFirstEventNotification : NSString;

external NSAppleScriptErrorMessage : NSString;

external NSAppleScriptErrorNumber : NSString;

external NSAppleScriptErrorAppName : NSString;

external NSAppleScriptErrorBriefMessage : NSString;

external NSAppleScriptErrorRange : NSString;

external NSClassDescriptionNeededForClassNotification : NSString;

alias NSCaseInsensitivePredicateOption = 1;
alias NSDiacriticInsensitivePredicateOption = 2;

alias NSDirectPredicateModifier = 0;
alias NSAllPredicateModifier = 1;
alias NSAnyPredicateModifier = 2;

alias NSComparisonPredicateModifier = CULong;

alias NSLessThanPredicateOperatorType = 0;
alias NSLessThanOrEqualToPredicateOperatorType = 1;
alias NSGreaterThanPredicateOperatorType = 2;
alias NSGreaterThanOrEqualToPredicateOperatorType = 3;
alias NSEqualToPredicateOperatorType = 4;
alias NSNotEqualToPredicateOperatorType = 5;
alias NSMatchesPredicateOperatorType = 6;
alias NSLikePredicateOperatorType = 7;
alias NSBeginsWithPredicateOperatorType = 8;
alias NSEndsWithPredicateOperatorType = 9;
alias NSInPredicateOperatorType = 10;
alias NSCustomSelectorPredicateOperatorType = 11;
alias NSContainsPredicateOperatorType = 99;
alias NSBetweenPredicateOperatorType = 100;

alias NSPredicateOperatorType = CULong;

alias NSNotPredicateType = 0;
alias NSAndPredicateType = 1;
alias NSOrPredicateType = 2;

alias NSCompoundPredicateType = CULong;

alias NSConstantValueExpressionType = 0;
alias NSEvaluatedObjectExpressionType = 1;
alias NSVariableExpressionType = 2;
alias NSKeyPathExpressionType = 3;
alias NSFunctionExpressionType = 4;
alias NSUnionSetExpressionType = 5;
alias NSIntersectSetExpressionType = 6;
alias NSMinusSetExpressionType = 7;
alias NSSubqueryExpressionType = 13;
alias NSAggregateExpressionType = 14;
alias NSBlockExpressionType = 19;

alias NSExpressionType = CULong;

external NSFileTypeForHFSTypeCode(
    hfsFileTypeCode : UInt) : NSString;

external NSHFSTypeCodeFromFileType(
    fileTypeString : NSString) : UInt;

external NSHFSTypeOfFile(
    fullFilePath : NSString) : NSString;

alias NSPointerFunctionsStrongMemory = 0;
alias NSPointerFunctionsZeroingWeakMemory = 1;
alias NSPointerFunctionsOpaqueMemory = 2;
alias NSPointerFunctionsMallocMemory = 3;
alias NSPointerFunctionsMachVirtualMemory = 4;
alias NSPointerFunctionsObjectPersonality = 0;
alias NSPointerFunctionsOpaquePersonality = 256;
alias NSPointerFunctionsObjectPointerPersonality = 512;
alias NSPointerFunctionsCStringPersonality = 768;
alias NSPointerFunctionsStructPersonality = 1024;
alias NSPointerFunctionsIntegerPersonality = 1280;
alias NSPointerFunctionsCopyIn = 65536;

alias NSPointerFunctionsOptions = CULong;

alias NSHashTableStrongMemory = 0;
alias NSHashTableZeroingWeakMemory = 1;
alias NSHashTableCopyIn = 65536;
alias NSHashTableObjectPointerPersonality = 512;

alias NSHashTableOptions = CULong;

record UnnamedStruct119 (
    _pi : CULong,
    _si : CULong,
    _bs : RawPointer,
);

alias NSHashEnumerator = UnnamedStruct119;

external NSFreeHashTable(
    table : NSHashTable);

external NSResetHashTable(
    table : NSHashTable);

external NSCompareHashTables(
    table1 : NSHashTable,
    table2 : NSHashTable) : Bool;

external NSCopyHashTableWithZone(
    table : NSHashTable,
    zone : Pointer[NSZone]) : NSHashTable;

external NSHashGet(
    table : NSHashTable,
    pointer : RawPointer) : RawPointer;

external NSHashInsert(
    table : NSHashTable,
    pointer : RawPointer);

external NSHashInsertKnownAbsent(
    table : NSHashTable,
    pointer : RawPointer);

external NSHashInsertIfAbsent(
    table : NSHashTable,
    pointer : RawPointer) : RawPointer;

external NSHashRemove(
    table : NSHashTable,
    pointer : RawPointer);

external NSEnumerateHashTable(
    table : NSHashTable) : NSHashEnumerator;

external NSNextHashEnumeratorItem(
    enumerator : Pointer[NSHashEnumerator]) : RawPointer;

external NSEndHashTableEnumeration(
    enumerator : Pointer[NSHashEnumerator]);

external NSCountHashTable(
    table : NSHashTable) : CULong;

external NSStringFromHashTable(
    table : NSHashTable) : NSString;

external NSAllHashTableObjects(
    table : NSHashTable) : NSArray;

record UnnamedStruct120 (
    hash : CCodePointer[[NSHashTable,RawPointer],[CULong]],
    isEqual : CCodePointer[[NSHashTable,RawPointer,RawPointer],[CChar]],
    retain : CCodePointer[[NSHashTable,RawPointer],[]],
    release : CCodePointer[[NSHashTable,RawPointer],[]],
    describe : CCodePointer[[NSHashTable,RawPointer],[NSString]],
);

alias NSHashTableCallBacks = UnnamedStruct120;

external NSCreateHashTableWithZone(
    callBacks : NSHashTableCallBacks,
    capacity : CULong,
    zone : Pointer[NSZone]) : NSHashTable;

external NSCreateHashTable(
    callBacks : NSHashTableCallBacks,
    capacity : CULong) : NSHashTable;

external NSIntegerHashCallBacks : NSHashTableCallBacks;

external NSNonOwnedPointerHashCallBacks : NSHashTableCallBacks;

external NSNonRetainedObjectHashCallBacks : NSHashTableCallBacks;

external NSObjectHashCallBacks : NSHashTableCallBacks;

external NSOwnedObjectIdentityHashCallBacks : NSHashTableCallBacks;

external NSOwnedPointerHashCallBacks : NSHashTableCallBacks;

external NSPointerToStructHashCallBacks : NSHashTableCallBacks;

external NSIntHashCallBacks : NSHashTableCallBacks;

alias NSMapTableStrongMemory = 0;
alias NSMapTableZeroingWeakMemory = 1;
alias NSMapTableCopyIn = 65536;
alias NSMapTableObjectPointerPersonality = 512;

alias NSMapTableOptions = CULong;

record UnnamedStruct121 (
    _pi : CULong,
    _si : CULong,
    _bs : RawPointer,
);

alias NSMapEnumerator = UnnamedStruct121;

external NSFreeMapTable(
    table : NSMapTable);

external NSResetMapTable(
    table : NSMapTable);

external NSCompareMapTables(
    table1 : NSMapTable,
    table2 : NSMapTable) : Bool;

external NSCopyMapTableWithZone(
    table : NSMapTable,
    zone : Pointer[NSZone]) : NSMapTable;

external NSMapMember(
    table : NSMapTable,
    key : RawPointer,
    originalKey : Pointer[RawPointer],
    value : Pointer[RawPointer]) : Bool;

external NSMapGet(
    table : NSMapTable,
    key : RawPointer) : RawPointer;

external NSMapInsert(
    table : NSMapTable,
    key : RawPointer,
    value : RawPointer);

external NSMapInsertKnownAbsent(
    table : NSMapTable,
    key : RawPointer,
    value : RawPointer);

external NSMapInsertIfAbsent(
    table : NSMapTable,
    key : RawPointer,
    value : RawPointer) : RawPointer;

external NSMapRemove(
    table : NSMapTable,
    key : RawPointer);

external NSEnumerateMapTable(
    table : NSMapTable) : NSMapEnumerator;

external NSNextMapEnumeratorPair(
    enumerator : Pointer[NSMapEnumerator],
    key : Pointer[RawPointer],
    value : Pointer[RawPointer]) : Bool;

external NSEndMapTableEnumeration(
    enumerator : Pointer[NSMapEnumerator]);

external NSCountMapTable(
    table : NSMapTable) : CULong;

external NSStringFromMapTable(
    table : NSMapTable) : NSString;

external NSAllMapTableKeys(
    table : NSMapTable) : NSArray;

external NSAllMapTableValues(
    table : NSMapTable) : NSArray;

record UnnamedStruct122 (
    hash : CCodePointer[[NSMapTable,RawPointer],[CULong]],
    isEqual : CCodePointer[[NSMapTable,RawPointer,RawPointer],[CChar]],
    retain : CCodePointer[[NSMapTable,RawPointer],[]],
    release : CCodePointer[[NSMapTable,RawPointer],[]],
    describe : CCodePointer[[NSMapTable,RawPointer],[NSString]],
    notAKeyMarker : RawPointer,
);

alias NSMapTableKeyCallBacks = UnnamedStruct122;

record UnnamedStruct123 (
    retain : CCodePointer[[NSMapTable,RawPointer],[]],
    release : CCodePointer[[NSMapTable,RawPointer],[]],
    describe : CCodePointer[[NSMapTable,RawPointer],[NSString]],
);

alias NSMapTableValueCallBacks = UnnamedStruct123;

external NSCreateMapTableWithZone(
    keyCallBacks : NSMapTableKeyCallBacks,
    valueCallBacks : NSMapTableValueCallBacks,
    capacity : CULong,
    zone : Pointer[NSZone]) : NSMapTable;

external NSCreateMapTable(
    keyCallBacks : NSMapTableKeyCallBacks,
    valueCallBacks : NSMapTableValueCallBacks,
    capacity : CULong) : NSMapTable;

external NSIntegerMapKeyCallBacks : NSMapTableKeyCallBacks;

external NSNonOwnedPointerMapKeyCallBacks : NSMapTableKeyCallBacks;

external NSNonOwnedPointerOrNullMapKeyCallBacks : NSMapTableKeyCallBacks;

external NSNonRetainedObjectMapKeyCallBacks : NSMapTableKeyCallBacks;

external NSObjectMapKeyCallBacks : NSMapTableKeyCallBacks;

external NSOwnedPointerMapKeyCallBacks : NSMapTableKeyCallBacks;

external NSIntMapKeyCallBacks : NSMapTableKeyCallBacks;

external NSIntegerMapValueCallBacks : NSMapTableValueCallBacks;

external NSNonOwnedPointerMapValueCallBacks : NSMapTableValueCallBacks;

external NSObjectMapValueCallBacks : NSMapTableValueCallBacks;

external NSNonRetainedObjectMapValueCallBacks : NSMapTableValueCallBacks;

external NSOwnedPointerMapValueCallBacks : NSMapTableValueCallBacks;

external NSIntMapValueCallBacks : NSMapTableValueCallBacks;

external NSMetadataQueryDidStartGatheringNotification : NSString;

external NSMetadataQueryGatheringProgressNotification : NSString;

external NSMetadataQueryDidFinishGatheringNotification : NSString;

external NSMetadataQueryDidUpdateNotification : NSString;

external NSMetadataQueryResultContentRelevanceAttribute : NSString;

external NSMetadataQueryUserHomeScope : NSString;

external NSMetadataQueryLocalComputerScope : NSString;

external NSMetadataQueryNetworkScope : NSString;

alias NSNoScriptError = 0;
alias NSReceiverEvaluationScriptError = 1;
alias NSKeySpecifierEvaluationScriptError = 2;
alias NSArgumentEvaluationScriptError = 3;
alias NSReceiversCantHandleCommandScriptError = 4;
alias NSRequiredArgumentsMissingScriptError = 5;
alias NSArgumentsWrongScriptError = 6;
alias NSUnknownKeyScriptError = 7;
alias NSInternalScriptError = 8;
alias NSOperationNotSupportedForKeyScriptError = 9;
alias NSCannotCreateScriptCommandError = 10;

external NSOperationNotSupportedForKeyException : NSString;

alias NSNoSpecifierError = 0;
alias NSNoTopLevelContainersSpecifierError = 1;
alias NSContainerSpecifierError = 2;
alias NSUnknownKeySpecifierError = 3;
alias NSInvalidIndexSpecifierError = 4;
alias NSInternalSpecifierError = 5;
alias NSOperationNotSupportedForKeySpecifierError = 6;

alias NSPositionAfter = 0;
alias NSPositionBefore = 1;
alias NSPositionBeginning = 2;
alias NSPositionEnd = 3;
alias NSPositionReplace = 4;

alias NSInsertionPosition = CULong;

alias NSRelativeAfter = 0;
alias NSRelativeBefore = 1;

alias NSRelativePosition = CULong;

alias NSIndexSubelement = 0;
alias NSEverySubelement = 1;
alias NSMiddleSubelement = 2;
alias NSRandomSubelement = 3;
alias NSNoSubelement = 4;

alias NSWhoseSubelementIdentifier = CULong;

alias NSSaveOptionsYes = 0;
alias NSSaveOptionsNo = 1;
alias NSSaveOptionsAsk = 2;

alias NSSaveOptions = CULong;

alias NSEqualToComparison = 0;
alias NSLessThanOrEqualToComparison = 1;
alias NSLessThanComparison = 2;
alias NSGreaterThanOrEqualToComparison = 3;
alias NSGreaterThanComparison = 4;
alias NSBeginsWithComparison = 5;
alias NSEndsWithComparison = 6;
alias NSContainsComparison = 7;

alias NSTestComparisonOperation = CULong;

alias NSTextCheckingTypeOrthography = 1;
alias NSTextCheckingTypeSpelling = 2;
alias NSTextCheckingTypeGrammar = 4;
alias NSTextCheckingTypeDate = 8;
alias NSTextCheckingTypeAddress = 16;
alias NSTextCheckingTypeLink = 32;
alias NSTextCheckingTypeQuote = 64;
alias NSTextCheckingTypeDash = 128;
alias NSTextCheckingTypeReplacement = 256;
alias NSTextCheckingTypeCorrection = 512;

alias NSTextCheckingType = UInt64;

alias NSTextCheckingAllSystemTypes = 4294967295;
alias NSTextCheckingAllCustomTypes = 18446744069414584320;
alias NSTextCheckingAllTypes = 18446744073709551615;

alias NSTextCheckingTypes = UInt64;

external NSTextCheckingNameKey : NSString;

external NSTextCheckingJobTitleKey : NSString;

external NSTextCheckingOrganizationKey : NSString;

external NSTextCheckingStreetKey : NSString;

external NSTextCheckingCityKey : NSString;

external NSTextCheckingStateKey : NSString;

external NSTextCheckingZIPKey : NSString;

external NSTextCheckingCountryKey : NSString;

external NSTextCheckingPhoneKey : NSString;

alias NSUndoCloseGroupingRunLoopOrdering = 350000;

external NSUndoManagerCheckpointNotification : NSString;

external NSUndoManagerWillUndoChangeNotification : NSString;

external NSUndoManagerWillRedoChangeNotification : NSString;

external NSUndoManagerDidUndoChangeNotification : NSString;

external NSUndoManagerDidRedoChangeNotification : NSString;

external NSUndoManagerDidOpenUndoGroupNotification : NSString;

external NSUndoManagerWillCloseUndoGroupNotification : NSString;

external NSNegateBooleanTransformerName : NSString;

external NSIsNilTransformerName : NSString;

external NSIsNotNilTransformerName : NSString;

external NSUnarchiveFromDataTransformerName : NSString;

external NSKeyedUnarchiveFromDataTransformerName : NSString;
