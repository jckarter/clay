import cocoa.objc.platform.*;
import cocoa.objc.runtime.*;
import identifiers.*;
public import cocoa.objc.runtime.(
    Id as ObjectHandle,
    Class as ClassHandle,
    nil as nilHandle,
    SEL as SelectorHandle,
    BOOL, YES, NO, IMP
);



//
// class, selector, and ivar data
//

private define objcClassMake;
private define objcInitIvar;
private define objcInitIvarOffset;
private var objcClass[Class] = objcClassMake(Class);

private var objcSelector[name] = sel_registerName(cstring(StaticName(name)));

private var objcIvar[Class, ivarName]
    = objcInitIvar(Class, ivarName);

private var objcIvarOffset[Class, ivarName]
    = objcInitIvarOffset(Class, ivarName);

private var objcConstantString[value]
    = CFConstantString(
        Class(&__CFConstantStringClassReference),
        CFConstantStringID,
        cstring(StaticName(value)),
        size(value)
    );



//
// constant NSStrings
//

[value when StringLiteral?(value)]
NSSTR(#value) = ObjectHandle(&objcConstantString[value]);



//
// encode
//

define Void; // stand-in symbol for "no return value"

define encodeIdentifier;

overload encodeIdentifier() = "";

[X] overload encodeIdentifier(#X) = "?";
[T] overload encodeIdentifier(#Pointer[T])
    = "^" ++ encodeIdentifier(T);

// XXX distinguish raw pointer from Pointer[UInt8]
overload encodeIdentifier(#RawPointer) = "^v";

[T when Record?(T)]
overload encodeIdentifier(#Pointer[Pointer[T]])
    = "^^{" ++ StaticName(T) ++ "}";
[T when Tuple?(T)]
overload encodeIdentifier(#Pointer[Pointer[T]]) = "^^{Tuple}";
[T when Union?(T)]
overload encodeIdentifier(#Pointer[Pointer[T]]) = "^^(Union)";

[T when RegularRecord?(T)] overload encodeIdentifier(#T) =
    "{" ++ StaticName(T) ++ "=" ++ encodeIdentifier(..RecordFieldTypes(T)) ++ "}";
[..Members] overload encodeIdentifier(#Tuple[..Members])
    = "{Tuple=" ++ encodeIdentifier(..RecordFieldTypes(T)) ++ "}";
[..Members] overload encodeIdentifier(#Union[..Members])
    = "(Union=" ++ encodeIdentifier(..Members) ++ ")";

overload encodeIdentifier(#Pointer[CChar]) = "*";
overload encodeIdentifier(#ObjectHandle) = "@";
overload encodeIdentifier(#ClassHandle) = "#";
overload encodeIdentifier(#SEL) = ":";

overload encodeIdentifier(#Int8) = "c";
overload encodeIdentifier(#Int16) = "s";
overload encodeIdentifier(#Int32) = "i";
overload encodeIdentifier(#Int64) = "q";
overload encodeIdentifier(#UInt8) = "C";
overload encodeIdentifier(#UInt16) = "S";
overload encodeIdentifier(#UInt32) = "I";
overload encodeIdentifier(#UInt64) = "Q";
overload encodeIdentifier(#Float32) = "f";
overload encodeIdentifier(#Float64) = "d";
overload encodeIdentifier(#Bool) = "c";
overload encodeIdentifier(#Void) = "v";
overload encodeIdentifier(#[]) = "v";

[..T when countValues(..T) > 1]
overload encodeIdentifier(..types: T)
    = cat(..mapValues(encodeIdentifier, ..types));

// fixme
encode(..types) = encodeIdentifier(..types);


//
// object parameters
//

define objectHandle;
define ObjectParameterType;

ObjectHandleType(T) = Type(objectHandle(typeToRValue(T)));

ObjectParameterType?(T)
    = CallDefined?(objectHandle, T)
      and CallDefined?(ObjectParameterType, Static[T])
      and ObjectHandleType(T) == ObjectHandle;

[T when ObjectParameterType?(T)]
objectParameter(forward x: T) = forward ObjectParameterType(T)(objectHandle(x));



//
// reference counting methods
//

private release(x) {
    if (not null?(x)) {
        objc_msgSend(objectHandle(x), objcSelector["release"]);
    }
}
private retain(x) {
    return objc_msgSend(objectHandle(x), objcSelector["retain"]);
}



//
// object references
//

ObjectType?(T) = false;

[O when ObjectType?(O)] overload objectHandle(x: O) : ObjectHandle = x.__handle__;
[O when ObjectType?(O)] overload ObjectParameterType(#O) = O;

[O when ObjectRef?(O)] nil(#O) = O();
[O when ObjectRef?(O)] nil?(obj: O) = null?(obj.__handle__);

[O when ObjectType?(O)] overload O() = O(nilHandle);

[O1, O2 when ObjectType?(O1) and ObjectType?(O2)]
overload O1(obj: O2) = O1(obj.__handle__);

private AssignableObjectTypes?(O1, O2)
    = ObjectType?(O1) and ObjectType?(O2);

[O1, O2 when AssignableObjectTypes?(O1, O2)]
overload assign(ref left: O1, right: O2) {
    left.__handle__ = right.__handle__;
}



//
// generic object reference
//

record Id (__handle__: ObjectHandle);

overload ObjectType?(#Id) = true;

overload nil() = nil(Id);

[T when ObjectParameterType?(T) and T != Id and T != ObjectHandle]
overload Id(object: T) = Id(objectHandle(object));



//
// cast between raw pointer and object types
//

[O when ObjectType?(O)]
overload RawPointer(o: O) = RawPointer(o.__handle__);
[O when ObjectType?(O)]
overload O(o: RawPointer) = O(ObjectHandle(o));



//
// managed object references
//

record Retained[O] (__handle__: ObjectHandle);

[O when ObjectType?(O)] overload RegularRecord?(#Retained[O]) = false;

[O when ObjectType?(O)] overload objectHandle(obj: Retained[O]) : ObjectHandle = obj.__handle__;
[O when ObjectType?(O)] overload ObjectParameterType(#Retained[O]) = O;

[O when ObjectType?(O)] overload Retained[O]() = Retained[O](nilHandle);

// copying managed <-> unmanaged
[O1, O2 when ObjectType?(O1) and ObjectType?(O2)]
overload Retained[O1](obj: O2) = Retained[O1](obj.__handle__);
[O1, O2 when ObjectType?(O1) and ObjectType?(O2)]
overload O1(obj: Retained[O2]) = O1(obj.__handle__);

// copying managed to managed
[O1, O2 when ObjectType?(O1) and ObjectType?(O2)]
overload Retained[O1](ref obj: Retained[O2]) = Retained[O1](retain(obj.__handle__));
[O1, O2 when ObjectType?(O1) and ObjectType?(O2)]
overload Retained[O1](rvalue obj: Retained[O2]) --> r: Retained[O1] {
    r.__handle__ <-- obj.__handle__;
    resetUnsafe(obj);
}

// shorthand copying
[O when ObjectType?(O)]
overload Retained(obj: O) = Retained[O](obj);
[O when ObjectType?(O)]
overload Retained(forward obj: Retained[O]) = Retained[O](obj);

[O when ObjectType?(O)]
weak(obj: Retained[O]) = O(obj);

// assigning managed <-> unmanaged
[O1, O2 when AssignableObjectTypes?(O1, O2)]
overload assign(ref left: Retained[O1], right: O2) {
    var oldHandle = left.__handle__;
    left.__handle__ = retain(right.__handle__);
    release(oldHandle);
}
[O1, O2 when AssignableObjectTypes?(O1, O2)]
overload assign(ref left: O1, right: Retained[O2]) {
    left.__handle__ = right.__handle__;
}

// assigning managed to managed
[O1, O2 when AssignableObjectTypes?(O1, O2)]
overload assign(ref left: Retained[O1], ref right: Retained[O2]) {
    var oldHandle = left.__handle__;
    left.__handle__ = retain(right.__handle__);
    release(oldHandle);
}
// assigning managed to managed
[O1, O2 when AssignableObjectTypes?(O1, O2)]
overload assign(ref left: Retained[O1], rvalue right: Retained[O2]) {
    var oldHandle = left.__handle__;
    left.__handle__ = right.__handle__;
    resetUnsafe(right);
    release(oldHandle);
}

[O when ObjectType?(O)] 
overload destroy(obj: Retained[O]) { release(obj.__handle__); }

[O when ObjectType?(O)] 
overload BitwiseMovedType?(#Retained[O]) = true;

[O when ObjectType?(O)] 
overload resetUnsafe(obj: Retained[O]) { obj.__handle__ = nilHandle; }



//
// raw object handles as parameters
//

overload objectHandle(x: ObjectHandle) : ObjectHandle = x;
overload ObjectParameterType(#ObjectHandle) = Id;



//
// class hierarchy
//

define SuperclassType;
define Subclass?;

[Super, Sub]
overload Subclass?(#Super, #Sub)
    = Subclass?(Super, SuperclassType(Sub));

[Super] overload Subclass?(#Super, #Super) = true;
[Super] overload Subclass?(#Super, #Void) = false;



//
// literal types for passing class attributes to class type definers
//

record InstanceVars[T] (value: T);
record ClassMethods[T] (value: T);
record InstanceMethods[T] (value: T);

overload InstanceVars(..values) = InstanceVars[Type(Tuple(..values))](Tuple(..values));
overload ClassMethods(..values) = ClassMethods[Type(Tuple(..values))](Tuple(..values));
overload InstanceMethods(..values) = InstanceMethods[Type(Tuple(..values))](Tuple(..values));



//
// class properties
//

[T when Class?(T)]
ClassInstanceVars(#T) = [];
define ClassClassMethods;
define ClassInstanceMethods;

MangledModuleChar(c) = c;
overload MangledModuleChar(#".") = "__";

MangledModuleName(T) = cat(..mapValues(
    MangledModuleChar,
    ..IdentifierChars(ModuleName(T))
));

[T when ClayClass?(T)]
overload ClassName(#T) = "clay__" ++ MangledModuleName(T) ++ "__" ++ StaticName(T);

[T when ExternalClass?(T) or ExternalClayClass?(T)]
ClassName(#T) = StaticName(T);

define ClassStaticName;

[T when CallDefined?(ClassStaticName, Static[T])]
overload ClassName(#T) = StaticName(ClassStaticName(T));

[T, name when Class?(T) and SuperclassType(T) != Void and StringLiteral?(name)]
ClassIvarType(#T, #name) = ClassIvarType(SuperclassType(T), name);
[T, name when Class?(T) and StringLiteral?(name) and assocValue?(name, ..ClassInstanceVars(T))]
overload ClassIvarType(#T, #name) = firstValue(..assocValue(name, ..ClassInstanceVars(T)));

ClassIvarNames(T) = ..mapValues(ivar => ivar.0, ..ClassInstanceVars(T));
ClassIvarTypes(T) = ..mapValues(ivar => ivar.1, ..ClassInstanceVars(T));

ClassInstanceVar?(T, ivar) = false;
[T, ivar when Class?(T) and StringLiteral?(ivar)]
overload ClassInstanceVar?(#T, #ivar) = ClassInstanceVar?(SuperclassType(T), ivar);
[T, ivar when Class?(T) and StringLiteral?(ivar) and assocValue?(ivar, ..ClassInstanceVars(T))]
overload ClassInstanceVar?(#T, #ivar) = true;



//
// bindings to external classes
//

Class?(T) = Type?(T) and CallDefined?(SuperclassType, Static[T]);
[T when Class?(T)] overload ObjectType?(#T) = true;
ExternalClass?(T) = false;

define classObjcName;

ValidSuperclass?(T) = Class?(T) or T == Void;

[Super when ValidSuperclass?(Super)]
externalClass(#Super) = recordWithProperties(
    [
        [SuperclassType, Super],
        [ExternalClass?, #true],
    ], 
    ["__handle__", ObjectHandle]
);

[name, Super when StringLiteral?(name) and ValidSuperclass?(Super)]
overload externalClass(#name, #Super) = recordWithProperties(
    [
        [SuperclassType, Super],
        [ExternalClass?, #true],
        [ClassStaticName, name],
    ], 
    ["__handle__", ObjectHandle]
);

record ExternalClassNotFound (name: StringLiteralRef);
instance Exception (ExternalClassNotFound);

private _objcExternalClassMake(name) {
    var handle = objc_getClass(cstring(name));
    if (null?(handle))
        throw ExternalClassNotFound(StringLiteralRef(name));
    return handle;
}

[T when ExternalClass?(T)]
overload objcClassMake(#T) {
    return _objcExternalClassMake(ClassName(T));
}

[T when ExternalClass?(T)]
overload objcInitIvar(#T, ivarName)
    = class_getInstanceVariable(objcClass[Class], cstring(StaticName(ivarName)));

[T when ExternalClass?(T)]
overload objcInitIvarOffset(#T, ivarName)
    = ivar_getOffset(objcIvar[Class, ivarName]);



//
// defining new classes in Clay
//

ClayClass?(T) = false;
ExternalClayClass?(T) = false;

[Super, IV, CM, IM] // XXX when ValidSuperclass?(Super)]
newClass(#Super,
    instancevars: InstanceVars[IV],
    classmethods: ClassMethods[CM],
    instancemethods: InstanceMethods[IM]
) = recordWithProperties(
    [
        [SuperclassType, Super],
        [ClayClass?, #true],
        Tuple(ClassInstanceVars, ..unpack(instancevars.value)),
        Tuple(ClassClassMethods, ..unpack(classmethods.value)),
        Tuple(ClassInstanceMethods, ..unpack(instancemethods.value)),
    ], 
    ["__handle__", ObjectHandle]
);

[name, Super, IV, CM, IM] // XXX ValidSuperclass?(Super)]
overload newClass(#name, #Super,
    instancevars: InstanceVars[IV],
    classmethods: ClassMethods[CM],
    instancemethods: InstanceMethods[IM]
) = recordWithProperties(
    [
        [SuperclassType, Super],
        [ClayClass?, #true],
        [ClassStaticName, name],
        Tuple(ClassInstanceVars, ..unpack(instancevars.value)),
        Tuple(ClassClassMethods, ..unpack(classmethods.value)),
        Tuple(ClassInstanceMethods, ..unpack(instancemethods.value)),
    ], 
    ["__handle__", ObjectHandle]
);

[Super, IV, CM, IM] // XXX when ValidSuperclass?(Super)]
newExternalClass(#Super,
    instancevars: InstanceVars[IV],
    classmethods: ClassMethods[CM],
    instancemethods: InstanceMethods[IM]
) = recordWithProperties(
    [
        [SuperclassType, Super],
        [ClayClass?, #true],
        [ExternalClayClass?, #true],
        Tuple(ClassInstanceVars, ..unpack(instancevars.value)),
        Tuple(ClassClassMethods, ..unpack(classmethods.value)),
        Tuple(ClassInstanceMethods, ..unpack(instancemethods.value)),
    ], 
    ["__handle__", ObjectHandle]
);

record NewClassCouldNotBeCreated (module: StringLiteralRef, name: StringLiteralRef);
instance Exception (NewClassCouldNotBeCreated);

record NewClassCouldNotAddIvar (module: StringLiteralRef, name: StringLiteralRef, ivar: StringLiteralRef);
instance Exception (NewClassCouldNotAddIvar);

record NewClassCouldNotAddMethod (module: StringLiteralRef, name: StringLiteralRef, selector: CStringRef);
instance Exception (NewClassCouldNotAddMethod);

private raiseNSException(reason: ObjectHandle, format: ObjectHandle, ..args) {
    objc_msgSend(
        ObjectHandle(objc_getClass(cstring("NSException"))),
        objcSelector["raise:format:"],
        reason, format, ..mapValues(varArgUnbox1, ..args) 
    );
}

[T, sel]
private classMethodImp(#T, #sel, fn) 
    = makeCCodePointer(
        (self, _cmd, ..args) => {
            try {
                return forward ..mapValues(
                    r => msgSendUnbox1(SelectorReturnType(Static[T], sel), r),
                    ..fn(objectParameter(T), ..msgSendBox(Static[T], sel, ..args))
                );
            } catch (ex) {
                raiseNSException(NSSTR("Clay Exception"), NSSTR("%s"), cstring(str(ex)));
                // not actually reached
                throw ex;
            }
        },
        ObjectHandle, SelectorHandle, ..SelectorArgumentParamTypes(Static[T], sel)
    );

[T, sel]
private instanceMethodImp(#T, #sel, fn)
    = makeCCodePointer(
        (self, _cmd, ..args) => {
            try {
                return forward ..mapValues(
                    r => msgSendUnbox1(SelectorReturnType(T, sel), r),
                    ..fn(T(self), ..msgSendBox(T, sel, ..args))
                );
            } catch (ex) {
                raiseNSException(NSSTR("Clay Exception"), NSSTR("%s"), cstring(str(ex)));
                // not actually reached
                throw ex;
            }
        },
        ObjectHandle, SelectorHandle, ..SelectorArgumentParamTypes(T, sel)
    );

private record ObjcNewClassInstanceVar(
    name: StringLiteralRef,
    size: SizeT,
    alignment: UInt8,
    typeEncoding: StringLiteralRef,
);

private objcNewClassInstanceVar(ivarPair) {
    var ivarName = ivarPair.0;
    var ivarType = ivarPair.1;

    return ObjcNewClassInstanceVar(
        StringLiteralRef(StaticName(ivarName)),
        TypeSize(ivarType),
        UInt8(log2(TypeAlignment(ivarType))),
        StringLiteralRef(encode(ivarType))
    );
}

private var objcNewClassInstanceVarsTable[T]
    = Array[ObjcNewClassInstanceVar, countValues(..ClassInstanceVars(T))](
        ..mapValues(objcNewClassInstanceVar, ..ClassInstanceVars(T))
    );

private record ObjcNewClassMethod (
    selector: SelectorHandle,
    imp: RawPointer,
    typeEncoding: StringLiteralRef,
);

private objcNewClassClassMethod(T, classMethod) {
    var selector = classMethod.0;
    var imp = classMethod.1;
    return ObjcNewClassMethod(
        objcSelector[selector],
        RawPointer(classMethodImp(T, selector, imp)),
        StringLiteralRef(SelectorTypeEncoding(Static[T], selector))
    );
}

private var objcNewClassClassMethodsTable[T]
    = Array[ObjcNewClassMethod, countValues(..ClassClassMethods(T))](
        ..mapValues(m => objcNewClassClassMethod(T, m), ..ClassClassMethods(T))
    );

private objcNewClassInstanceMethod(T, instanceMethod) {
    var selector = instanceMethod.0;
    var imp = instanceMethod.1;
    return ObjcNewClassMethod(
        objcSelector[selector],
        RawPointer(instanceMethodImp(T, selector, imp)),
        StringLiteralRef(SelectorTypeEncoding(T, selector))
    );
}

private var objcNewClassInstanceMethodsTable[T]
    = Array[ObjcNewClassMethod, countValues(..ClassInstanceMethods(T))](
        ..mapValues(m => objcNewClassInstanceMethod(T, m), ..ClassInstanceMethods(T))
    );

private _objcNewClassAddMethods(
    moduleName: StringLiteralRef,
    symbolName: StringLiteralRef,
    handle: ClassHandle,
    methodsBegin: Pointer[ObjcNewClassMethod],
    methodsEnd: Pointer[ObjcNewClassMethod]
) {
    for (method in coordinateRange(methodsBegin, methodsEnd))
        if (class_addMethod(
            handle,
            method.selector,
            method.imp,
            cstring(method.typeEncoding)
        ) == NO)
            throw NewClassCouldNotAddMethod(moduleName, symbolName, CStringRef(Pointer[CChar](method.selector)));
}

private _objcNewClassMake(
    super: ClassHandle,
    className: StringLiteralRef,
    symbolName: StringLiteralRef,
    moduleName: StringLiteralRef,
    ivarsBegin: Pointer[ObjcNewClassInstanceVar],
    ivarsEnd: Pointer[ObjcNewClassInstanceVar],
    classMethodsBegin: Pointer[ObjcNewClassMethod],
    classMethodsEnd: Pointer[ObjcNewClassMethod],
    instanceMethodsBegin: Pointer[ObjcNewClassMethod],
    instanceMethodsEnd: Pointer[ObjcNewClassMethod]
) : ClassHandle {
    var handle = objc_allocateClassPair(
        super,
        cstring(className),
        SizeT(0)
    );
    if (null?(handle))
        throw NewClassCouldNotBeCreated(moduleName, symbolName);

    var metahandle = Class(object_getClass(ObjectHandle(handle)));

    for (ivarEntry in coordinateRange(ivarsBegin, ivarsEnd))
        if (class_addIvar(
            handle,
            cstring(ivarEntry.name),
            ivarEntry.size,
            ivarEntry.alignment,
            cstring(ivarEntry.typeEncoding),
        ) == NO)
            throw NewClassCouldNotAddIvar(moduleName, symbolName, ivarEntry.name);

    _objcNewClassAddMethods(moduleName, symbolName, metahandle,
        classMethodsBegin, classMethodsEnd
    );
    _objcNewClassAddMethods(moduleName, symbolName, handle,
        instanceMethodsBegin, instanceMethodsEnd
    );

    objc_registerClassPair(handle);
    return handle;
}

[T when ClayClass?(T)]
inline overload objcClassMake(#T) : ClassHandle {
    var handle = _objcNewClassMake(
        objcClass[SuperclassType(T)],
        StringLiteralRef(ClassName(T)),
        StringLiteralRef(StaticName(T)),
        StringLiteralRef(ModuleName(T)),
        begin(objcNewClassInstanceVarsTable[T]),
        end  (objcNewClassInstanceVarsTable[T]),
        begin(objcNewClassClassMethodsTable[T]),
        end  (objcNewClassClassMethodsTable[T]),
        begin(objcNewClassInstanceMethodsTable[T]),
        end  (objcNewClassInstanceMethodsTable[T]),
    );

    ..for (ivarPair in ClassInstanceVars(T)) {
        var ivar = ivarPair.0;
        objcIvar[T, ivar] = class_getInstanceVariable(handle, cstring(StaticName(ivar)));
        objcIvarOffset[T, ivar] = ivar_getOffset(objcIvar[T, ivar]);
    }

    return handle;
}

[T when ClayClass?(T)]
overload objcInitIvar(#T, ivarName) = Ivar();

[T when ClayClass?(T)]
overload objcInitIvarOffset(#T, ivarName) = PtrInt();



//
// Class objects as objc params
//

[T when Class?(T)] classHandle(#T) = objcClass[T];
[T when Class?(T)] overload objectHandle(#T) = ObjectHandle(classHandle(T));
[T when Class?(T)] overload ObjectParameterType(#Static[T]) = Id; // XXX Class

[T when ObjectRef?(T)] overload encodeIdentifier(#T) = "@";

// XXX class container



//
// generic selectors
// XXX should be derived from class selector definitions
//

define selector;
define varargSelector;
define externalInstanceMethod;
define externalClassMethod;
define externalVarargInstanceMethod;
define externalVarargClassMethod;

FixedSelector?(sel) = CallDefined?(selector, Static[sel]);
VarargSelector?(sel) = CallDefined?(varargSelector, Static[sel]);
Selector?(sel) = FixedSelector?(sel) or VarargSelector?(sel);

selectorHandle(sel) = objcSelector[sel];

[sel when Selector?(sel)]
SelectorArgumentCount(#sel) = countValues(..GenericSelector(sel)) - 1;

[sel when FixedSelector?(sel)]
GenericSelector(#sel) = ..selector(sel);
[sel when VarargSelector?(sel)]
overload GenericSelector(#sel) = ..varargSelector(sel);



//
// typed selectors
//

[T, sel when ExternalClass?(T) and FixedSelector?(sel)]
TypedSelector(#T, #sel) = ..externalInstanceMethod(T, sel);
[T, sel when ExternalClass?(T) and FixedSelector?(sel)]
overload TypedSelector(#Static[T], #sel) = ..externalClassMethod(T, sel);
[T, sel when ClayClass?(T) and FixedSelector?(sel)]
overload TypedSelector(#T, #sel)
    = ..restValues(..assocValue(sel, ..ClassInstanceMethods(T)));
[T, sel when ClayClass?(T) and FixedSelector?(sel)]
overload TypedSelector(#Static[T], #sel)
    = ..restValues(..assocValue(sel, ..ClassClassMethods(T)));

[T, sel when ExternalClass?(T) and FixedSelector?(sel)]
TypedSelector?(#T, #sel)
    = CallDefined?(externalInstanceMethod, Static[T], Static[sel]);
[T, sel when ExternalClass?(T) and FixedSelector?(sel)]
overload TypedSelector?(#Static[T], #sel)
    = CallDefined?(externalClassMethod, Static[Static[T]], Static[sel]);
[T, sel when ClayClass?(T) and FixedSelector?(sel)]
overload TypedSelector?(#T, #sel)
    = assocCountValues(sel, ..ClassInstanceMethods(T)) > 1;
[T, sel when ClayClass?(T) and FixedSelector?(sel)]
overload TypedSelector?(#Static[T], #sel)
    = assocCountValues(sel, ..ClassClassMethods(T)) > 1;


[T, sel when ExternalClass?(T) and VarargSelector?(sel)]
overload TypedSelector(#T, #sel) = ..externalVarargInstanceMethod(T, sel);
[T, sel when ExternalClass?(T) and VarargSelector?(sel)]
overload TypedSelector(#Static[T], #sel) = ..externalVarargClassMethod(T, sel);

[T, sel when ExternalClass?(T) and VarargSelector?(sel)]
overload TypedSelector?(#T, #sel)
    = CallDefined?(externalVarargInstanceMethod, Static[T], Static[sel]);
[T, sel when ExternalClass?(T) and VarargSelector?(sel)]
overload TypedSelector?(#Static[T], #sel)
    = CallDefined?(externalVarargClassMethod, Static[Static[T]], Static[sel]);
 


//
// selector signatures by type
//

[sel when Selector?(sel)]
private Selector(#Id, #sel) = ..GenericSelector(sel);

[T, sel when Class?(T) and Selector?(sel)]
overload Selector(#T, #sel) = ..GenericSelector(sel);
[T, sel when Class?(T) and Selector?(sel)]
overload Selector(#Static[T], #sel) = ..GenericSelector(sel);

[T, sel when Class?(T) and SuperclassType(T) != Void]
overload Selector(#T, #sel) = ..Selector(SuperclassType(T), sel);
[T, sel when
    Class?(T)
    and TypedSelector?(T, sel)
]
overload Selector(#T, #sel) = ..TypedSelector(T, sel);

[T, sel when Class?(T) and SuperclassType(T) != Void]
overload Selector(#Static[T], #sel) = ..Selector(Static[SuperclassType(T)], sel);
[T, sel when
    Class?(T)
    and TypedSelector?(Static[T], sel)
]
overload Selector(#Static[T], #sel) = ..TypedSelector(Static[T], sel);

[T, sel]
SelectorReturnType(#T, #sel) = firstValue(..Selector(T, sel));

[T, sel]
SelectorArgumentTypes(#T, #sel) = ..restValues(..Selector(T, sel));



//
// retaining and forwarding selectors
//

AllocatingSelector?(sel) = false;
[sel when
    IdentifierStartsWith?(sel, "alloc")
    or IdentifierStartsWith?(sel, "new")
]
overload AllocatingSelector?(#sel) = true;

RetainingSelector?(sel) = false;
[sel when
    IdentifierStartsWith?(sel, "copy")
    or IdentifierStartsWith?(sel, "mutableCopy")
    or sel == "retain"
]
overload RetainingSelector?(#sel) = true;

ForwardingSelector?(sel) = false;
[sel when IdentifierStartsWith?(sel, "init")]
overload ForwardingSelector?(#sel) = true;

AutoreleasingSelector?(sel) = false;
overload AutoreleasingSelector?("autorelease") = true;

[T, sel when Class?(T) and AllocatingSelector?(sel)]
overload SelectorReturnType(#Static[T], #sel) = T;

[T, sel when ObjectType?(T) and (
    RetainingSelector?(sel)
    or ForwardingSelector?(sel)
    or AutoreleasingSelector?(sel)
)]
overload SelectorReturnType(#T, #sel) = T;



//
// argument conversion
//

ObjectRef?(T) = false;
[T when ObjectType?(T)]
overload ObjectRef?(#T) = true;
[T when ObjectType?(T)]
overload ObjectRef?(#Retained[T]) = true;

MsgSendCompatible?(ParamType, ValueType) = false;

[T] overload MsgSendCompatible?(#T, #T) = true;

[Param, Value when
    ObjectRef?(Param)
    and ObjectParameterType?(Value)
    and (
        ObjectParameterType(Value) == Id
        or Subclass?(ObjectParameterType(Param), ObjectParameterType(Value))
    )
]
overload MsgSendCompatible?(#Param, #Value) = true;

[Value when ObjectParameterType?(Value)]
overload MsgSendCompatible?(#Id, #Value) = true;

[Value when ObjectParameterType?(Value)]
overload MsgSendCompatible?(#Retained[Id], #Value) = true;


// XXX selector container

MsgSendParamType(Param) = Param;

[Param when ObjectRef?(Param)]
overload MsgSendParamType(#Param) = ObjectHandle;

overload MsgSendParamType(#Void) = #[];
overload MsgSendParamType(#Bool) = BOOL;

[Param]
/*private*/ msgSendUnbox1(#Param, forward x: Param) = forward x;
[Param, Value when ObjectRef?(Param)]
overload msgSendUnbox1(#Param, forward x: Value) = objectHandle(x);

overload msgSendUnbox1(#Bool, forward x: Bool) = if (x) BOOL(1) else BOOL(0);

private varArgUnbox1(forward x) = forward x;
[Param when ObjectRef?(Param)]
overload varArgUnbox1(forward x: Param) = objectHandle(x);

[T, S when FixedSelector?(S)]
/*XXX private*/ msgSendUnbox(#T, #S, forward ..args)
    = forward ..mapValues2(msgSendUnbox1, #SelectorArgumentCount(S),
        ..SelectorArgumentTypes(T, S),
        ..args
    );
[T, S when VarargSelector?(S)]
overload msgSendUnbox(#T, #S, forward ..args) {
    var argCount = #SelectorArgumentCount(S);
    return forward
        ..mapValues2(msgSendUnbox1, argCount, ..SelectorArgumentTypes(T, S), ..args),
        ..mapValues(varArgUnbox1, ..dropValues(argCount, ..args));
}


[Return]
/*XXX private*/ msgSendBox1(#Return, forward x: Return) = forward x;

overload msgSendBox1(#Void) = ;

overload msgSendBox1(#Bool, forward x: BOOL) = x != NO;

[T when ObjectRef?(T)]
overload msgSendBox1(#T, forward x: ObjectHandle)
    = T(x);

[T, S when FixedSelector?(S)]
/*XXX private*/ msgSendBox(#T, #S, forward ..args)
    = forward ..mapValues2(msgSendBox1, #SelectorArgumentCount(S),
        ..SelectorArgumentTypes(T, S),
        ..args
    );
// XXX support overloading vararg selectors

SelectorReturnParamType(T, S) = MsgSendParamType(SelectorReturnType(T, S));
SelectorArgumentParamTypes(T, S) = ..mapValues(MsgSendParamType, ..SelectorArgumentTypes(T, S));

SelectorTypeEncoding(T, S)
    = encode(SelectorReturnParamType(T, S), ObjectHandle, SelectorHandle,
        ..SelectorArgumentParamTypes(T, S)
    );



//
// message sending
//

[T, S when Selector?(S)]
private objc_msgSend_for(#T, #S) = objc_msgSend;
[T, S when Selector?(S) and StRet?(SelectorReturnParamType(T, S))]
overload objc_msgSend_for(#T, #S) = objc_msgSend_stret;
[T, S when Selector?(S) and FpRet?(SelectorReturnParamType(T, S))]
overload objc_msgSend_for(#T, #S) = objc_msgSend_fpret;

[T, S when Selector?(S)]
private objc_msgSendSuper_for(#T, #S) = objc_msgSendSuper;
[T, S when Selector?(S) and StRet?(SelectorReturnParamType(T, S))]
overload objc_msgSendSuper_for(#T, #S) = objc_msgSendSuper_stret;

[T, S when Selector?(S)]
private class_getMethodImplementation_for(#T, #S) = class_getMethodImplementation;
[T, S when Selector?(S) and StRet?(SelectorReturnParamType(T, S))]
overload class_getMethodImplementation_for(#T, #S) = class_getMethodImplementation_stret;

SelectorCallableWith?(C, S, ..T) = false;

[C, S, ..TT when FixedSelector?(S) and countValues(..TT) == SelectorArgumentCount(S)]
overload SelectorCallableWith?(#C, #S, ..T: TT)
    = _SelectorCallableWith?(C, S, ..T);

[C, S, ..TT when VarargSelector?(S) and countValues(..TT) >= SelectorArgumentCount(S)]
overload SelectorCallableWith?(#C, #S, ..T: TT)
    = _SelectorCallableWith?(C, S, ..takeValues(#(countValues(..varargSelector(S)) - 1), ..T));

private _SelectorCallableWith?(C, S, ..T) {
    alias Params = Tuple(..SelectorArgumentTypes(C, S));
    alias Values = Tuple(..T);
    ..for (n in staticIntegers(#countValues(..T))) {
        if (not MsgSendCompatible?(staticIndex(Params, n), staticIndex(Values, n))) 
            return false;
    }
    return true;
}

[C, S when FixedSelector?(S)]
SelectorImpType(#C, #S) = CCodePointer[
        [ObjectHandle, SelectorHandle, ..SelectorArgumentParamTypes(C, S)],
        SelectorReturnParamType(C, S)
    ];

[C, S when VarargSelector?(S)]
overload SelectorImpType(#C, #S) = VarArgsCCodePointer[
        [ObjectHandle, SelectorHandle, ..SelectorArgumentParamTypes(C, S)],
        SelectorReturnParamType(C, S)
    ];

private msgSender(C, S)
    = SelectorImpType(C, S)(objc_msgSend_for(C, S));

[C, S when FixedSelector?(S)]
private msgSenderSuper(#C, #S)
    = CCodePointer[
        [Pointer[ObjcSuper], SelectorHandle, ..SelectorArgumentParamTypes(C, S)],
        SelectorReturnParamType(C, S)
    ](objc_msgSendSuper_for(C, S));

[C, S when VarargSelector?(S)]
overload msgSenderSuper(#C, #S)
    = VarArgsCCodePointer[
        [Pointer[ObjcSuper], SelectorHandle, ..SelectorArgumentParamTypes(C, S)],
        SelectorReturnParamType(C, S)
    ](objc_msgSendSuper_for(C, S));

[SelfT, S, ..T]
msgSend(#SelfT, imp, self, #S, forward ..args: T) {
    var cmdHandle = selectorHandle(S);

    return forward ..mapValues(ret => msgSendBox1(SelectorReturnType(SelfT, S), ret),
        ..imp(self, cmdHandle, ..msgSendUnbox(SelfT, S, ..args))
    );
}



//
// identifier-selector conversion
//

private _identifierSelectorChar(c) = c;
overload _identifierSelectorChar(#"_") = ":";

[argCount, underscoreCount, lastCharacter]
private _extraColon(#argCount, #underscoreCount, #lastCharacter) = ;
[argCount, underscoreCount, lastCharacter when
    argCount > underscoreCount
    and lastCharacter != "_"
    and lastCharacter != ":"
]
overload _extraColon(#argCount, #underscoreCount, #lastCharacter)
    = ":";

[argCount] private _identifierSelector(#argCount, ..chars) {
    var lastCharacter = lastValue(..chars);
    return cat(
        ..mapValues(_identifierSelectorChar, ..chars),
        .._extraColon(#argCount, #countOccurrences("_", ..chars), lastCharacter)
    );
}

private var memoIdentifierSelector[identifier, argCount]
    = _identifierSelector(#argCount, ..IdentifierChars(identifier));

[argCount] identifierSelector(identifier, #argCount)
    = memoIdentifierSelector[identifier, argCount];

[identifier, minArity]
private _ValidMethodIdentifier?(#identifier, #minArity)
    = Selector?(identifierSelector(identifier, #minArity))
      or Selector?(identifierSelector(identifier, #minArity+1));

[identifier]
ValidMethodIdentifier?(#identifier) = true;
    //= _ValidMethodIdentifier?(
    //    #identifier,
    //    #countOccurrences("_", ...IdentifierChars(identifier))
    //);



//
// method syntax
//

private record MethodRef[T, Captured, identifier] (self: Captured);

overload MethodRef(T, forward value, identifier)
    = MethodRef[T, Type(captureValue(value)), identifier](captureValue(value));

[T, cmd when ObjectRef?(T) and cmd != "__handle__" and ValidMethodIdentifier?(cmd)]
overload fieldRef(forward self: T, #cmd)
    = MethodRef(ObjectParameterType(T), self, cmd);
[T, cmd when Class?(T) and ValidMethodIdentifier?(cmd)]
overload fieldRef(#T, #cmd) = MethodRef(Static[T], T, cmd);

[T, selector, ..Args when ObjectParameterType?(T) and Selector?(selector)]
callMethod(forward self: T, #selector, forward ..args: Args)
    = forward ..msgSend(
        T,
        msgSender(T, selector),
        objectHandle(self),
        selector,
        ..args
    );

[T, Captured, identifier, ..Args when
    Selector?(identifierSelector(identifier, #countValues(..Args)))
    and SelectorCallableWith?(
        T,
        identifierSelector(identifier, #countValues(..Args)),
        ..Args
    )
]
overload call(method: MethodRef[T, Captured, identifier], forward ..args: Args) {
    var selector = identifierSelector(identifier, #countValues(..Args));
    return forward ..msgSend(
        T,
        msgSender(T, selector),
        objectHandle(forwardValue(method.self)),
        selector, 
        ..args
    );
}



//
// method delegate (cached method pointer)
//

record MethodDelegate[T, selector] (self: ObjectHandle, imp: IMP);

[T, selector when ObjectParameterType?(T) and Selector?(selector)]
overload MethodDelegate(self: T, #selector) {
    var selfHandle = objectHandle(self);
    var imp = class_getMethodImplementation_for(T, selector)(
        object_getClass(selfHandle), 
        selectorHandle(selector)
    );
    return MethodDelegate[T, selector](selfHandle, imp);
}

[T, selector]
overload call(delegate: MethodDelegate[T, selector], forward ..args)
    = forward ..msgSend(
        T,
        SelectorImpType(T, selector)(delegate.imp),
        delegate.self,
        selector,
        ..args
    );



//
// instance variable access
//

private record IvarsRef[T] (__handle__: ObjectHandle);

[T when Class?(T)]
overload dereference(obj: T) = IvarsRef[T](objectHandle(obj));
[T when Class?(T)]
overload dereference(obj: Retained[T]) = IvarsRef[T](objectHandle(obj));


[T, ivar when Class?(T) and ivar != "__handle__" and ClassInstanceVar?(T, ivar)]
overload fieldRef(ivars: IvarsRef[T], #ivar)
    = ref Pointer[ClassIvarType(T, ivar)](
        Pointer[UInt8](ivars.__handle__) + objcIvarOffset[T, ivar]
    )^;



//
// superclass method invocation
//

private record SuperRef[T, Captured] (__self__: Captured);

[T when Class?(T) and SuperclassType(T) != Void]
super(forward obj: T) = SuperRef[T, Type(captureValue(obj))](captureValue(obj));

[T when Class?(T) and SuperclassType(T) != Void]
overload super(forward obj: Retained[T]) = SuperRef[T, Type(captureValue(obj))](captureValue(obj));

private record SuperMethodRef[T, Captured, identifier] (__self__: Captured);

[T, Captured]
overload SuperMethodRef(forward super: SuperRef[T, Captured], identifier)
    = SuperMethodRef[T, Captured, identifier](super.__self__);

[T, Captured, cmd when Class?(T) and cmd != "__self__"]
overload fieldRef(sup: SuperRef[T, Captured], #cmd)
    = SuperMethodRef(sup, cmd);

[T, Captured, selector, ..Args when Class?(T) and Selector?(selector)]
overload callMethod(sup: SuperRef[T, Captured], #selector, forward ..args: Args) {
    var super = ObjcSuper(
        objectHandle(forwardValue(sup.__self__)),
        classHandle(SuperclassType(T))
    );
    return forward ..msgSend(
        SuperclassType(T),
        msgSenderSuper(SuperclassType(T), selector),
        &super,
        selector,
        ..args
    );
}

[T, Captured, identifier, ..Args]
overload call(method: SuperMethodRef[T, Captured, identifier], forward ..args: Args) {
    var selector = identifierSelector(identifier, #countValues(..Args));
    var super = ObjcSuper(
        objectHandle(forwardValue(method.__self__)),
        classHandle(SuperclassType(T))
    );
    return forward ..msgSend(
        SuperclassType(T),
        msgSenderSuper(SuperclassType(T), selector),
        &super,
        selector,
        ..args
    );
}
