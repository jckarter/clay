import printer.(println);

doIt(x) {
    println("done! x = ", x);
}

main() {
    var a = Maybe(35);
    var b = nothing(Int);

    println(Type(a));
    println(Type(b));

    println(nothing?(a));
    println(nothing?(b));

    println(just(a));
    just(a) +: 1;
    println(just(a));
    just(a) -: 1;

    maybe(a, doIt);
    maybe(b, doIt);

    try { require(a, doIt); } catch(ex: ValueMissing) { println("a missing!"); }
    try { require(b, doIt); } catch(ex: ValueMissing) { println("b missing!"); }

    println(variantTag(b));

    var v = Vector(range(100));

    for (value in array(a,b)) {
        // test return-by-ref from 'maybe'
        ref y = maybe(value, x -> ref v[x], () -> ref v[0]);
        y +: 1;
        maybe(value, x -> {println(v[x]);}, () -> {println(v[0]);});
    }

    // return-by-value from 'require'
    println( require(a, x => x*10) );

    // return-by-ref from 'require'
    ref y = require(a, x -> ref v[x]);
    y +: 1;
    println( require(a, x -> v[x]) );

    // require (reference)
    ref y = require(a);
    y *: 100;
    println(a);

    // require (value)
    forward y = require(copy(a));
    y *: 1000;
    println(a);

    var c = Maybe(100);
    var d = nothing(Int);

    println(maybe(c, cc => Maybe(cc+1)));
    println(maybe(d, dd => Maybe(dd+1)));
}
