import crypto.digest.sha2.*;
import printer.*;
import printer.formatter.*;
import test.*;

expectDigest(test, algorithm, hash, string) {
    expectPrinted(test, algorithm ++ " of string " ++ str(repr(string)),
        hash,
        digest(string, algorithm));
}

expectSha256(test, hash, string) =
    ..expectDigest(test, SHA256_NAME, hash, string);

expectSha512(test, hash, string) =
    ..expectDigest(test, SHA512_NAME, hash, string);

main() = testMain(
    TestSuite("sha2", array(
        TestCase("sha256", test => {
            expectSha256(test,
                "B9F195C5CC7EF6AFADBFBC42892AD47D3B24C6BC94BB510C4564A90A14E8B799",
                "swordfish");
            expectSha256(test,
                "600867073E9002961F853FD00BBB62108035197C17242BD70B871ACDB1BEC9E2",
                "ABCDEFGHIJabcdefghijABCDEFGHIJabcdefghijABCDEFGHIJ12345");
            expectSha256(test,
                "5C7C76D05CB971DF30EF14EB30E1B1C75A19AC6AC55E14F9A962181E6F694678",
                "ABCDEFGHIJabcdefghijABCDEFGHIJabcdefghijABCDEFGHIJ123456");
            expectSha256(test,
                "B25CADD808A9A96D977B326B65B9B2321E6D86462DB2392A6156EF167EC04725",
                "ABCDEFGHIJabcdefghijABCDEFGHIJabcdefghijABCDEFGHIJ1234567");
            expectSha256(test,
                "82C2BE1C906DA4B58B9EA060216A6EB4C74E99912BBC14B77F84F46B3396B1E5",
                "ABCDEFGHIJabcdefghijABCDEFGHIJabcdefghijABCDEFGHIJabcdefghij123");
            expectSha256(test,
                "7F1F966E506C85F443E39E82C74F41E923CC0CBF9A837E512F82798282A8BA05",
                "ABCDEFGHIJabcdefghijABCDEFGHIJabcdefghijABCDEFGHIJabcdefghij1234");
            expectSha256(test,
                "9DEDD7106DA68AAC98215B0B290BBC296A9C7C5129A53B8894FC45C6D69D4DF8",
                "ABCDEFGHIJabcdefghijABCDEFGHIJabcdefghijABCDEFGHIJabcdefghij12345");
            expectSha256(test,
                "520BAA51D704E8697E3431F87534DF9E275F34EAB5CF24A82DB26F477C44995B",
                "AAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIIIIIJJJJJJJJJJKKKKKKKKKK123456789");
            expectSha256(test,
                "E117C07C5DD76D107065C5EC3F078C09C82FDC2F746838D6B6FDB9DEFDA30BF8",
                "AAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIIIIIJJJJJJJJJJKKKKKKKKKKLLLLLLLLLL");
            expectSha256(test,
                "B727550D5FFAA7D263F41B044760FE171458E801C22705AC6ED1712CADCDA33A",
                "AAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIIIIIJJJJJJJJJJKKKKKKKKKKLLLLLLLLLL1");
            expectSha256(test,
                "CB98A2D98EEEBE4F670F08B752DC5CC56BDB5BF1500DD7A88461363B68492351",
                "AAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIIIIIJJJJJJJJJJKKKKKKKKKKLLLLLLLLLL1234567");
            expectSha256(test,
                "914E400A4E55E76D9981E0020F9971A64D030ED41AC67BD3C9136BE110EBEFAE",
                "AAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIIIIIJJJJJJJJJJKKKKKKKKKKLLLLLLLLLL12345678");
            expectSha256(test,
                "50045F4231B493EB436AFC58E2B1F33B70E4071F68C1BC1930F58BA2776FBF25",
                "AAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIIIIIJJJJJJJJJJKKKKKKKKKKLLLLLLLLLL123456789");
        }),

        TestCase("sha256 streaming", test => {
            var context = SHA256Context();
            digestUpdate(context, "A long time ago in a galaxy far,");
            digestUpdate(context, " far away....");
            expectPrinted(test, "SHA-256 1",
                "A014AE72628AC605EF9456695E3721D455271752DED65F630D741601DB42B1D4",
                digestFinish(context));
        
            context = SHA256Context();
            digestUpdate(context, "It is a period of civil war. ");
            digestUpdate(context, "Rebel spaceships, striking ");
            digestUpdate(context, "from a hidden base, have won ");
            digestUpdate(context, "their first victory against ");
            digestUpdate(context, "the evil Galactic Empire.");
            expectPrinted(test, "SHA-256 2",
                "1D16FB2F8303CEB13C0092C8C244FD84F5EA5D3E46622405BD33C389DDC4CC68",
                digestFinish(context));

            context = SHA256Context();
            for (i in range(1000)) {
                digestUpdate(context, str(i));
            }
            // check with: `for i in {0..999}; do echo -n $i; done | shasum -a 256`
            expectPrinted(test, "SHA-256 3",
                "14E7FD93E3D8DD8D448B65A1BA7DBEC9433C57E554B522831089EB2064EF1F34",
                digestFinish(context));
        }),

        TestCase("sha256 on unaligned data", test => {
            var context = SHA256Context();
            digestUpdate(context, "a");
            // this array must be long enough to prevent copying data into context.buffer
            digestUpdate(context, array(..replicateValue('a', #129)));
            expectPrinted(test, "SHA-256",
                "1E3C4F4750C8C29BBFA9CED317788176B156D342E57F7777F62FD7221A44312F",
                digestFinish(context));
        }),

        TestCase("sha512", test => {
            expectSha512(test,
                "9719A6439375C9115E01DCEDA86E210E5F2D78A6CF3F4872997746832C4C0F58C5AE0923FABE5ACFB923DFC94A117A7D444E453622912DFA193FC6636581F159",
                "swordfish");
            expectSha512(test,
                "73203D2EEB109D55F0943DCDB03A52E07D4E8A3EEAD49DC29A9AA53A25132C9A96F464A5B4FA6D0DF9515463AC1C839E359F73CFB0DFC04D97C22CD0C79D7DFC",
                "ABCDEFGHIJabcdefghijABCDEFGHIJabcdefghijABCDEFGHIJ12345");
            expectSha512(test,
                "9362ACA4B327455459A10D3C5B6982153DCD28E2CDE3EA4AA4FA371A35D2EBB3709E5E56024D15FFF18F6F9C1F78AB6DFD52B6A5B824A2DB7EC4E45FA5BE6508",
                "ABCDEFGHIJabcdefghijABCDEFGHIJabcdefghijABCDEFGHIJ123456");
            expectSha512(test,
                "73DCBC13B3D2CF73E97330AB6724C9AF5398589B601118DD7CC5045E32A53FC52A083B06F4E4A1A2DA7A4637F6D2ACFA6C9E82C959C8F9AD3B5283C7467DBCA7",
                "ABCDEFGHIJabcdefghijABCDEFGHIJabcdefghijABCDEFGHIJ1234567");
            expectSha512(test,
                "1F0C4CE96051CD9D9E99357B3434C40C53523A37F36358E4A5BBE2AC7316BB43B9A5977B5D1C7CC36968E6D2D08865A21DFA6D0A8F47F364DC050D04C774F789",
                "ABCDEFGHIJabcdefghijABCDEFGHIJabcdefghijABCDEFGHIJabcdefghij123");
            expectSha512(test,
                "C8387ADB813799E65EC9CB36BBBB60DAA681B917F983411EF3F431B9351028FC4323513E3D1A8E013AAB9CE8856158F70D5095BD5EDA84E90C29BC04C690F3E9",
                "ABCDEFGHIJabcdefghijABCDEFGHIJabcdefghijABCDEFGHIJabcdefghij1234");
            expectSha512(test,
                "40E17E89614AE26DCD2C4BF51D81E683B53946A4B2E7163F42B424C7FBD624394EB7240933C199AE994C3048BB28C6E10BBDFAA54F8BE06A24547EF62F59CBBE",
                "ABCDEFGHIJabcdefghijABCDEFGHIJabcdefghijABCDEFGHIJabcdefghij12345");
            expectSha512(test,
                "354FB5891D9B722CD3181FC3A9643AB8801BF1C9284DBABD82B36337ACED0C81776F0389FF0CDBD14AA3DC702AAB47602690FBB280F23CF154DB0741B79D8200",
                "AAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIIIIIJJJJJJJJJJKKKKKKKKKK123456789");
            expectSha512(test,
                "11969D5C0FB9207BA94994FF32BA4C2FE675E7613F910F573C8AF20FA2096B2B01603303F1EE943FC9CBCECEF59FE1DC23F59F39D83B455DD3C7D8A7709DF935",
                "AAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIIIIIJJJJJJJJJJKKKKKKKKKKLLLLLLLLLL");
            expectSha512(test,
                "E9629B40544214E75511DE6ED8D36FB38C0D6B6DB24FAAC2F167D05469357CF44483E61EFE04FB9B11A5E78E1EF396D4E6C7F84B35B7E6705278A1B59352B445",
                "AAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIIIIIJJJJJJJJJJKKKKKKKKKKLLLLLLLLLL1");
            expectSha512(test,
                "453941D6095F2F4F573C60C212FCBA33F4A8C12B8693DAA5B30868C63388FBD87C58F9AC2CE611E9EA8900A88E94667352874EA10FC7BE37E95C1E18F524059F",
                "AAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIIIIIJJJJJJJJJJKKKKKKKKKKLLLLLLLLLL1234567");
            expectSha512(test,
                "ED74BEA5C6E2806D420026B535B61E1B1D8A528BCD75A6C04EDCF4A218FB4FADD0DD64D62B8B1B67921FBB6B06F3BE0D7D0CD00F8F0B86D0DB465C698970DBB3",
                "AAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIIIIIJJJJJJJJJJKKKKKKKKKKLLLLLLLLLL12345678");
            expectSha512(test,
                "4FB509F736174B93B5601ACD8DBFFD17E1720383414C1EB428B3DC836CAB6C007C2C03CD3CC91C08D15A961B186CC567B702139B5872C367D1BC4C552358DB0E",
                "AAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIIIIIJJJJJJJJJJKKKKKKKKKKLLLLLLLLLL123456789");
        }),

        TestCase("sha512 streaming", test => {
            var context = SHA512Context();
            digestUpdate(context, "A long time ago in a galaxy far,");
            digestUpdate(context, " far away....");
            expectPrinted(test, "SHA-512 1",
                "A3427B0FDF76645CC01C201A291AE5393103B41D3131BDE4A847B9E51DE83F3551AC582AFF6DE03E5E56AEA530CD40C852B75A9BAD701F77DE7A7CBB77F707CC",
                digestFinish(context));
        
            context = SHA512Context();
            digestUpdate(context, "It is a period of civil war. ");
            digestUpdate(context, "Rebel spaceships, striking ");
            digestUpdate(context, "from a hidden base, have won ");
            digestUpdate(context, "their first victory against ");
            digestUpdate(context, "the evil Galactic Empire.");
            expectPrinted(test, "SHA-512 of string ",
                "4E5CCF2EF134CBBC178A68A552AFC4305DB3FF5BDD0A9CAD773725ABE2B9D3DA9E8313B0D2CEE6DA29AD3C974F7C049AEB9D902FEC6F014CB6ECFDACB00969AC",
                digestFinish(context));

            context = SHA512Context();
            for (i in range(1000)) {
                digestUpdate(context, str(i));
            }
            // check with: `for i in {0..999}; do echo -n $i; done | shasum -a 512`
            expectPrinted(test, "SHA-512 3",
                "B8EE3A44A1F37C52CA35E3871349B75989D8EE26D39BD7D79218B591250D4003F8172E5F49EEFC06A3E4789AB31584BEFA5E8CAA5BE8789DC13297B157FB4B46",
                digestFinish(context));
        }),
    )));

