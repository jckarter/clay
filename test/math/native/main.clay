// Test math functions

import math.*;

itypes() = Int8, Int16, Int32, Int64;

var f32data = array(0.f, 1.f, -1.f,3.f, 38.f, 355.f, 2147483647.f, 9223372036854775807.f, 
        -2147483648.f, -9223372036854775808.f, Float32(M_PI),Float32(-M_PI), nan(Float32), -nan(Float32),
        infinity(Float32), negativeInfinity(Float32), LeastPositive(Float32),
        LeastPositiveNormalized(Float32), GreatestPositiveFinite(Float32));

var f64data = array(0., 1., -1.,3., 38. , 355. , 2147483647., 9223372036854775807., 
        -2147483648., -9223372036854775808., M_PI,-M_PI, nan(Float64), -nan(Float64),
        infinity(Float64), negativeInfinity(Float64), LeastPositive(Float64),
        LeastPositiveNormalized(Float64), GreatestPositiveFinite(Float64));

idata(T) = T(0), T(1), T(-1), T(3), T(38), Least(T)+1, Greatest(T);

oneArgFuncs() = 
                abs,recip,
                sqrt,rsqrt,cbrt,square,cube,
                trunc,round,ceil,floor,rint,
                significand,
                sin,cos,tan,
                asin,acos,atan,
                sinh,cosh,tanh,
                exp,expm1,sigmoid,
                log,log10,log2,ilogb,log1p,
                erf,erfc,gamma,lgamma,
                //j0,j1,i1,
                sec,csc,cot,
                asec,acsc,acot,
                sech,csch,coth,
                asech,acsch,acoth, 
                ;


twoArgFuncs() = 
                pow,beta,atan2,
                ;


intArgFuncs() = 
                abs, sign
                ;

evalFuncs(funcs,data) {
    ..for(f in funcs()) {
        for(i in range(size(data)))
            println(StaticName(f),"(",data[i],") = ",f(data[i]));
        println();            
    }
}


evalFuncs2(funcs,data) {
    ..for(f in funcs()) {
        for(i in range(size(data)))
            for(j in range(size(data))) {
                println(StaticName(f),"(",data[i],",",data[j],") = ",f(data[i],data[j]));
            }
        println();            
    }
}


evalFuncsInt(funcs,data,types) {
    ..for(f in funcs()) {
        ..for(t in types())
            ..for(i in data(t))
                println(StaticName(f),"(",i,") = ",f(i));
        println();            
    }
}


main() {

    evalFuncs(oneArgFuncs,f32data);
    evalFuncs2(twoArgFuncs,f32data);
    
    evalFuncs(oneArgFuncs,f64data);
    evalFuncs2(twoArgFuncs,f64data);
    
    evalFuncsInt(intArgFuncs,idata,itypes);

}
