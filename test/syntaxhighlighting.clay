// This file isn't meant to be compiled, but used as a spot
// test for syntax highlighters

import module;
import module as anAlias;
import module.*;
import module.(member);
import module.(member1, member2);
import module.(member1 as alias1, member2);
import module.(member1 as alias1, member2, member3);
import module.(member1 as alias1, member2, member3,);

import module.path;
import module.path as anAlias;
import module.path.*;
import module.path.(member);
import module.path.(member1, member2);
import module.path.(member1 as alias1, member2);
import module.path.(member1 as alias1, member2, member3);
import module.path.(member1 as alias1, member2, member3,);

import module.path.name;
import module.path.name as anAlias;
import module.path.name.*;
import module.path.name.(member);
import module.path.name.(member1, member2);
import module.path.name.(member1 as alias1, member2);
import module.path.name.(member1 as alias1, member2, member3);
import module.path.name.(member1 as alias1, member2, member3,);

public import module.path.name;
private import module.path.name;

in some.module;

/* comment */
notAComment0() {}
/* "comment */
notAComment1() {}
/* 'comment */
notAComment2() {}
/* /* comment */
notAComment3() {}
// comment
notAComment4() {}
// "comment
notAComment5() {}
// 'comment
notAComment6() {}
// comment \
notAComment7() {}
// comment \\
notAComment8() {}
// comment {
notAComment9() {}
// comment (
notAComment10() {}
/*
])}
comment
actuallyThisIsAComment() {
{(["'
*/

record TypesTest (
    a: Int8,
    b: Int16,
    c: Int32,
    d: Int64,
    e: UInt8,
    f: UInt16,
    g: UInt32,
    h: UInt64,
    i: Float32,
    j: Float64,
    k: Int,
    l: UInt,
    m: Float,
    n: Double,
    o: Char,
    p: Pointer[Int],
    q: RawPointer,
    r: CodePointer[Int, Int],
    s: RefCodePointer[Int, Int],
    t: CCodePointer[Int, Int],
    u: StdCallCodePointer[Int, Int],
    v: FastCallCodePointer[Int, Int],
    w: Array[Int, 10],
    x: PtrInt,
    y: UPtrInt,
    z: SizeT,
    aa: StringConstant,
    bb: Vec[Int, 4],
    cc: Bool,
    dd: Byte,
    ee: UByte,
    ff: Short,
    gg: UShort,
    hh: Long,
    ii: ULong,
    jj: Tuple[Int, Char],
    kk: Union[Int, Char],
    ll: Static[0],
);

variant VariantTest (TypesTest, Int);
instance InstanceTest (VariantTest);

keywordsTest(x, ref y, rvalue z, forward w, static v) {
    if (x) {} else {}

    switch (x)
    case (0) {}
    case (1, 2, 3) {}
    else {}

    for (x in y) {
        continue;
        break;
    }

    ..for (x in y, z) {
        continue;
        break;
    }

    while (x) {}

    goto labelTest;
labelTest:

    try {} catch(x) {} catch(y) {}

    return x;
    return ref y;
    return forward z;

    return ..x;
    return ref ..y;
    return forward ..z;

    var u = x;
    ref t = y;
    alias s = z;
}

[X, Y, ..Z | PatternGuard?()]
alias aliasTest(x:X, y:Y, ..z:Z);

external externalTest1(x:Int, y:Char) : Float;
external (stdcall) externalTest2(x:Int, y:Char);
external (cdecl, "_externalTest3") externalTest3(x:Int, y:Char, ..);
external ("_externalTest4", fastcall) externalTest4(x:Int, y:Char) {
}

[| EmptyPatternGuard?()]
operatorsTest() {
    not x;
    +x;
    -x;
    x^;
    &x;
    *x;
    x.0;
    x.0.1.2;
    x.y;
    x[y];
    x[y, z, w];
    x[y, z, ..w];
    x(y);
    x(y, z, w);
    x(y, z, ..w);

    x * y;
    x / y;
    x % y;

    x + y;
    x - y;

    x and y;

    x or y;

    x => y;
    (x, y) => z;
    
    x => { y; };
    (x, y) => { z; };

    x -> y;
    (x, y) -> z;
    
    x -> { y; };
    (x, y) -> { z; };

    if (x) y else z;

    (..x);

    static x;
    ref x;
    forward x;
}

private overload keywordsTest() {}
public overload keywordsTest() {}

external externalKeywordTest1();
external externalKeywordTest2() {}

valueTest() {
    true;
    false;

    'a';
    ' ';
    '\f';
    '\r';
    '\n';
    '\t';
    '\0';
    '\x00';
    '\x7F';
    '\"';
    '\'';
    '\$';

    0;
    123;
    1_234;
    1_23_45_678;
    1_23_45_678_;
    0x0;
    0x123;
    0x123abc;
    0x123_abc;
    
    -0;
    -123;
    -1_234;
    -1_23_45_678;
    -1_23_45_678_;
    -0x0;
    -0x123;
    -0x123abc;
    -0x123_abc;

    -0;
    -123;
    -1_234;
    -1_23_45_678;
    -1_23_45_678_;
    -0x0;
    -0x123;
    -0x123abc;
    -0x123_abc;

    123ss; 123s; 123i; 123l; 123i128;
    123uss; 123us; 123u; 123ul; 123u128;
    123f; 123ff;
    123u; 123f;

    123_ss; 123_s; 123_i; 123_l;
    123_uss; 123_us; 123_u; 123_ul;
    123_f; 123_ff;
    123_u; 123_f;

    0.;
    1.;
    123.;
    1.0;
    1.123;
    1.123_456;
    321.123_456;
    1_234.567_890;
    2e1_234;
    3e+1_234;
    4e-1_234;
    5.2e1;
    5.3e+1;
    5.3e-1;

    0.f;
    1.f;
    123.f;
    1.0f;
    1.123f;
    1.123_456f;
    321.123_456f;
    1_234.567_890f;
    2e1_234f;
    3e+1_234f;
    4e-1_234f;
    5.2e1f;
    5.3e+1f;
    5.3e-1f;

    +0.;
    +1.;
    +123.;
    +1.0;
    +1.123;
    +1.123_456;
    +321.123_456;
    +1_234.567_890;
    +2e1_234;
    +3e+1_234;
    +4e-1_234;
    +5.2e1;
    +5.3e+1;
    +5.3e-1;

    -0.;
    -1.;
    -123.;
    -1.0;
    -1.123;
    -1.123_456;
    -321.123_456;
    -1_234.567_890;
    -2e1_234;
    -3e+1_234;
    -4e-1_234;
    -5.2e1;
    -5.3e+1;
    -5.3e-1;

    1.2e3f;
    1.2e3f;
    1.2e3ff;
    1.2e3l;
    1.2e3f128;

    1.2e3fj;
    1.2e3j;
    1.2e3fj;
    1.2e3ffj;
    1.2e3lj;
    1.2e3j128;

    0x1p0;
    0x1p+0;
    0x1p-0;
    0x1p+1022;
    0x1p-1022;
    +0x1p+1022;
    +0x1p-1022;
    -0x1p+1022;
    -0x1p-1022;
    -0x1_00.p+1_022;
    -0x1_FF.23_DE_ad_BEEFp+1_000;

    "str ing";
    " str ing";
    "str ing ";
    "\"string\"";
    "string\\";
    "string\\\"";
    "string\\\\";
    " \x00 \x7F \0 \t \r \n \f \" \\ \$";
    "//";
    "/*";
    "



string



    ";
    ("


string



    ");

    """""";
    """triple "quoted" string""";
    """triple \""" quoted string""";
    """"triple quoted string"""";

    #zim;
    #zang_zung;
    #_zippity;
    #doo_;

    #"dah";
    #"deedle ";
    #" dum";
    #"diddly squat";

    #doodly?;
    #?doodly;

    #"\"symbol\"";
    #"symbol\\";
    #"symbol\\\"";
    #"symbol\\\\";
    #" \x00 \x7F \0 \t \r \n \f \" \\ \$";
    #"//";
    #"/*";

    123
    ;
    0x123
    ;
}
