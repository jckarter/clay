
import math.native.*;
import complex.*;
import printer.(println);
import numbers.floats.(nan,infinity);


alias CC[T] = CodePointer[[T],[T]];
alias CD[T] = CodePointer[[T],[ComplexBaseType(T)]];


var fdata[T] = array(T(0.+0j),
                    T(-0.+0j),
                    T(-1.-1j),
                    T(2.+2j),
                    T(0.+nan(Imag64)),
                    T(-0.+nan(Imag64)),
                    T(1.+infinity(Imag64)),
                    T(1.+nan(Imag64)),
                    T(-infinity(Double)+1j),
                    T(infinity(Double)+1j),
                    T(-infinity(Double)+infinity(Imag64)),
                    infinity(T),
                    T(infinity(Double)+nan(Imag64)),
                    T(-infinity(Double)+nan(Imag64)),
                    T(nan(Double)+1.j),
                    T(nan(Double)+infinity(Imag64)),
                    nan(T));


var ccFuncs[T] = array(T(sin),T(cos),T(tan),T(asin),T(acos),
                            T(atan),T(sinh),T(cosh),T(tanh),T(asinh),
                            T(acosh),T(atanh),T(exp),
                            T(log),T(sqrt),T(proj));

var cdFuncs[T] = array(T(arg),T(abs));

evalFuncs(funcs,data) {
    for(f in funcs) {
        for(i in data)
            println(f(i));
        println();            
    }
}


evalFuncs2(funcs,data) {
    for(f in funcs) {
        for(i in data)
            for(j in data)
                println(f(i,j));
        
        println();            
    }
}

main() {

    evalFuncs(ccFuncs[CC[Complex64]],fdata[Complex64]);
    evalFuncs(cdFuncs[CD[Complex64]],fdata[Complex64]);
    //evalFuncs2(twoArgFuncs,fdata,ftypes);

}

