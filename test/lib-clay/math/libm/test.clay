// Test math functions
import numbers.floats.(nan,infinity,negativeInfinity);
import math.libm.*;
import math.native.constants.(M_PI);
import core.platform.(OS, FreeBSD, Windows);
import printer.(println);


var fdata[T] = array(T(0), T(1), T(-1), T(3), T(38) , T(355) , 
        T(2147483647.0), T(9223372036854775807.0), T(-2147483648.0), 
        T(-9223372036854775808.0), T(M_PI), T(-M_PI), nan(T), -nan(T),
        infinity(T), negativeInfinity(T), LeastPositive(T),
        LeastPositiveNormalized(T), GreatestPositiveFinite(T));

var idata[T] = array(T(0),T(1),T(-1),T(3),T(38),Least(T)+T(1),Greatest(T));

alias C1[T] = CodePointer[[T],[T]];
alias C2[T] = CodePointer[[T,T],[T]];

define oneArgFuncs;

override oneArgFuncs(T) = array(T(abs),T(sqrt),T(cbrt),T(trunc),T(round),
                            T(ceil),T(floor),T(rint),T(sin),
                            T(cos),T(tan),T(asin),T(acos),T(atan),T(sinh),
                            T(cosh),T(tanh),T(exp),T(expm1),
                            T(log),T(log10),T(log2),T(log1p),T(erf),T(erfc),
                            T(gamma),T(lgamma));


[when OS == FreeBSD]
override oneArgFuncs(T) = array(T(abs),T(sqrt),T(cbrt),T(trunc),T(round),
                            T(ceil),T(floor),T(rint),T(sin),
                            T(cos),T(tan),T(asin),T(acos),T(atan),T(sinh),
                            T(cosh),T(tanh),T(exp),T(expm1),
                            T(log),T(log10),T(log1p),T(erf),T(erfc),
                            T(gamma),T(lgamma));

[when OS == Windows]
override oneArgFuncs(T) = array(T(abs),T(sqrt),T(floor),T(sin),
                            T(cos),T(tan),T(asin),T(acos),T(atan),T(sinh),
                            T(cosh),T(tanh),T(exp),T(log),T(log10));


var twoArgFuncs[T] = array(T(hypot),T(pow),T(atan2));

var intFuncs[T] = array(T(abs));


evalFuncs(funcs,data) {
    for(f in funcs) {
        for(i in data)
            println(f(i));
        println();            
    }
}


evalFuncs2(funcs,data) {
    for(f in funcs) {
        for(i in data)
            for(j in data)
                println(f(i,j));
        
        println();            
    }
}

main() {

    evalFuncs(oneArgFuncs(C1[Float]),fdata[Float]);        
    evalFuncs(oneArgFuncs(C1[Double]),fdata[Double]);
    
    evalFuncs2(twoArgFuncs[C2[Float]],fdata[Float]);
    evalFuncs2(twoArgFuncs[C2[Double]],fdata[Double]);

    evalFuncs(intFuncs[C1[Int32]],idata[Int32]);
    evalFuncs(intFuncs[C1[Int64]],idata[Int64]);

}
