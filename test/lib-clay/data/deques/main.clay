import data.deques.*;
import printer.(print, println);
import data.vectors.*;
import data.sequences.*;

main() {
    println("d1:");

    var d1 = Deque[Int]();
    alias TEST_RANGE = 500;

    for (i in range(TEST_RANGE)) {
        pushFront(d1, 2*i);
        push(d1, 2*i + 1);
    }

    println("Full size ", size(d1));

    println("begin is ", if (begin(d1) < end(d1)) "" else "not ", "less than end");
    println("begin is ", if (begin(d1) == end(d1)) "" else "not ", "equal to end");
    println("begin is ", if (begin(d1) > end(d1)) "" else "not ", "greater than end");

    println("end is ", if (end(d1) < begin(d1)) "" else "not ", "less than begin");
    println("end is ", if (end(d1) == begin(d1)) "" else "not ", "equal to begin");
    println("end is ", if (end(d1) > begin(d1)) "" else "not ", "greater than begin");

    println("Iterating:");
    
    var n = 0;
    for (x in d1) {
        print(x, " ");
        n +: 1;
        if (n == 20) {
            println();
            n = 0;
        }
    }
    println();

    println("Reverse Iterating:");
    
    var n = 0;
    for (x in reversed(d1)) {
        print(x, " ");
        n +: 1;
        if (n == 20) {
            println();
            n = 0;
        }
    }
    println();

    println("d1[0] = ", d1[0]);
    println("d1[999] = ", d1[999]);
    println("d1[500] = ", d1[500]);

    d1[500] = 1111;

    println("now d1[500] = ", d1[500]);

    println("Popping:");

    n = 0;
    for (i in range(TEST_RANGE)) {
        var x = popFront(d1);
        var y = pop(d1);

        print(y, " ", x, " ");
        n +: 2;
        if (n == 20) {
            println();
            n = 0;
        }
    }

    println("Empty size ", size(d1));

    println("begin is ", if (begin(d1) < end(d1)) "" else "not ", "less than end");
    println("begin is ", if (begin(d1) == end(d1)) "" else "not ", "equal to end");
    println("begin is ", if (begin(d1) > end(d1)) "" else "not ", "greater than end");

    println("end is ", if (end(d1) < begin(d1)) "" else "not ", "less than begin");
    println("end is ", if (end(d1) == begin(d1)) "" else "not ", "equal to begin");
    println("end is ", if (end(d1) > begin(d1)) "" else "not ", "greater than begin");

    println();
    println("d2:");

    var d2 = deque(2, 3, 5, 7, 11, 13);
    println("Size ", size(d2));
    print("Contents: ");
    for (x in d2) print(x, " ");
    println();

    var d2copy = d2;
    println("Copy size ", size(d2copy));
    print("Contents: ");
    for (x in d2copy) print(x, " ");
    println();

    remove(d2copy, end(d2copy) - 1);
    println("Removed element from back size ", size(d2copy));
    print("Contents: ");
    for (x in d2copy) print(x, " ");
    println();

    remove(d2copy, begin(d2copy));
    println("Removed element from front size ", size(d2copy));
    print("Contents: ");
    for (x in d2copy) print(x, " ");
    println();

    println();
    println("d3:");

    var v3 = vector(17, 19, 23, 29, 31, 37, 41);
    var d3 = Deque[Int](v3);
    println("Size ", size(d3));
    print("Contents: ");
    for (x in d3) print(x, " ");
    println();

    remove(d3, begin(d3) + 2);
    println("Removed element from front half size ", size(d3));
    print("Contents: ");
    for (x in d3) print(x, " ");
    println();

    remove(d3, begin(d3) + 4);
    println("Removed element from back half size ", size(d3));
    print("Contents: ");
    for (x in d3) print(x, " ");
    println();

    d3 = d2;
    println("Assigned from d2 size ", size(d3));
    print("Contents: ");
    for (x in d3) print(x, " ");
    println();

    d3 = deque(1, 1, 2);
    println("Assigned from shorter rvalue size ", size(d3));
    print("Contents: ");
    for (x in d3) print(x, " ");
    println();

    println();
    println("d4:");

    var d4 = move(d3);
    println("Moved from d3 size ", size(d4));
    print("Contents: ");
    for (x in d4) print(x, " ");
    println();

    println();
    println("d5:");
    var v5 = vector(17, 19, 23, 29, 31, 37, 41);
    var d5 = Deque[Int](filtered(x => x > 20, v5));
    println("Size ", size(d5));
    print("Contents: ");
    for (x in d5) print(x, " ");
    println();
    clear(d5);
    println("Cleared size ", size(d5));

    println();
    println("d6:");
    var d6 = Deque[Int](range(1024));
    println("Size ", size(d6));

    n = 0;
    for (x in d6) {
        print(x, " ");
        n +: 1;
        if (n == 16) {
            println();
            n = 0;
        }
    }
    println();

    remove(d6, begin(d6), begin(d6) + 128);
    println("Removed chunk from front size ", size(d6));
    n = 0;
    for (x in d6) {
        print(x, " ");
        n +: 1;
        if (n == 16) {
            println();
            n = 0;
        }
    }
    println();

    remove(d6, end(d6) - 128, end(d6));
    println("Removed chunk from back size ", size(d6));
    n = 0;
    for (x in d6) {
        print(x, " ");
        n +: 1;
        if (n == 16) {
            println();
            n = 0;
        }
    }
    println();

    remove(d6, begin(d6) + 128, begin(d6) + 256);
    println("Removed chunk from front half size ", size(d6));
    n = 0;
    for (x in d6) {
        print(x, " ");
        n +: 1;
        if (n == 16) {
            println();
            n = 0;
        }
    }
    println();

    remove(d6, end(d6) - 256, end(d6) - 128);
    println("Removed chunk from back half size ", size(d6));
    n = 0;
    for (x in d6) {
        print(x, " ");
        n +: 1;
        if (n == 16) {
            println();
            n = 0;
        }
    }
    println();

    println("d7:");
    var d7 = deque(10, 20, 30);
    println("Size ", size(d7));
    print("Contents: ");
    for (x in d7) print(x, " ");
    println();

    insert(d7, begin(d7), 5);
    println("Insert element front size ", size(d7));
    print("Contents: ");
    for (x in d7) print(x, " ");
    println();

    insert(d7, end(d7), 35);
    println("Insert element end size ", size(d7));
    print("Contents: ");
    for (x in d7) print(x, " ");
    println();

    insert(d7, begin(d7) + 2, 15);
    println("Insert element front half size ", size(d7));
    print("Contents: ");
    for (x in d7) print(x, " ");
    println();

    insert(d7, end(d7) - 2, 25);
    println("Insert element back half size ", size(d7));
    print("Contents: ");
    for (x in d7) print(x, " ");
    println();

    insertAll(d7, begin(d7), range(5));
    println("Insert sequence front size ", size(d7));
    print("Contents: ");
    for (x in d7) print(x, " ");
    println();

    insertAll(d7, end(d7), range(36, 41));
    println("Insert sequence back size ", size(d7));
    print("Contents: ");
    for (x in d7) print(x, " ");
    println();

    insertAll(d7, begin(d7) + 6, range(6, 10));
    println("Insert sequence front half size ", size(d7));
    print("Contents: ");
    for (x in d7) print(x, " ");
    println();

    insertAll(d7, end(d7) - 6, range(31, 35));
    println("Insert sequence back half size ", size(d7));
    print("Contents: ");
    for (x in d7) print(x, " ");
    println();

    println();
    println("d8:");
    var d8 = Deque(Vector(d7));
    for (x in d8) print(x, " ");
    println();
}
