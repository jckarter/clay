import 
    byteorder.*,
    printer.(str),
    test.*,
    test.module.*;

define testNetworkToHost;

[IntType]
overload testNetworkToHost(#IntType, function, expectReversed?) {
    alias S = #TypeSize(IntType);
    var digits = array(..mapValues(i -> UInt8(250 - i), ..integers(S)));
    var digitsReversed = array(..reverseValues(..arrayElements(digits)));
    var expected = if (expectReversed?) digitsReversed else digits;
    expectEqual(
        expected,
        bitcast(Array[UInt8, Int(TypeSize(IntType))], function(Union[IntType, Array[UInt8, Int(TypeSize(IntType))]](digits).0)));
}

[IntType when not IntegerAvailable?(IntType)]
overload testNetworkToHost(#IntType, function, expectReversed?) {
}

TEST_networkToHost_hostToNetwork() {
    ..for (IntType in ..BuiltinIntegerTypes()) {
        testNetworkToHost(IntType, networkToHost, LittleEndian?);
        testNetworkToHost(IntType, hostToNetwork, LittleEndian?);
        testNetworkToHost(IntType, bigToHost, LittleEndian?);
        testNetworkToHost(IntType, hostToBig, LittleEndian?);
        testNetworkToHost(IntType, littleToHost, BigEndian?);
        testNetworkToHost(IntType, hostToLittle, BigEndian?);
    }
}

private main() = testMainModule();
