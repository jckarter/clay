import printer.(str);
import data.strings.(String);
import data.vectors.(Vector);
import test.*;

even?(x) = x % 2 == 0;


// non-copyable, non-constructible record
record NonConstructibleRecord ();

RegularRecord?(#NonConstructibleRecord) = false;

makeNonConstructibleRecord(foo: Int) --> returned: NonConstructibleRecord { }

moveUnsafe(src: NonConstructibleRecord) --> returned: NonConstructibleRecord { }
resetUnsafe(foo: NonConstructibleRecord) { }
destroy(foo: NonConstructibleRecord) { }

expectRef(ref a) {}
expectRValue(rvalue a) {}

testCaptureValue() {
    var capture1 = captureValue(makeNonConstructibleRecord(17));
    expectRef(capturedRef(capture1));
    expectRValue(forwardValue(capture1));

    var lva = makeNonConstructibleRecord(19);
    var capture2 = captureValue(lva);
    expectRef(capturedRef(capture2));
    expectRef(forwardValue(capture2));
}


main() = testMain(
    TestSuite("values", array(
        TestCase("eachValue", -> {
            var r = Vector[String]();
            eachValue(x -> { push(r, str(x)); }, 1, 2.0, "three");
            var expected = Vector[String](String("1"), String("2"), String("three"));
            expectEqual(expected, r);
        }),
        TestCase("eachValue2", -> {
            var r = Vector[Int]();
            eachValue2(
                (x, y) -> { push(r, x + y); }, #3,
                1, 2, 3,
                7, 8, 9,
            );
            var expected = Vector[Int](8, 10, 12);
            expectEqual(expected, r);
        }),
        TestCase("weaveValues", -> {
            expectEqual(
                ["threethree"],
                [..weaveValues(", ", ..mapValues(x => x++x, "three"))]
            );

            expectEqual(
                [],
                [..weaveValues(", ", ..mapValues(x => x++x))]
            );
            
            expectEqual(
                [#0, ":", #1, ":", #2, ":", #3, ":", #4, ":", #5, ":", #6, ":", #7],
                [..weaveValues(":", ..staticIntegers(#8))]
            );
            expectEqual(
                [0, ":", 1, ":", 2, ":", 3, ":", 4, ":", 5, ":", 6, ":", 7],
                [..weaveValues(":", ..integers(#8))]
            );
        }),
        TestCase("reverseValues", -> {
            expectEqual([], [..reverseValues()]);
            expectEqual([1], [..reverseValues(1)]);
            expectEqual([1, "a"], [..reverseValues("a", 1)]);
            expectEqual([true, 1, "a"], [..reverseValues("a", 1, true)]);
        }),
        TestCase("foldValues", -> {
            expectEqual(6, foldValues(add, 1, 2, 3));
        }),
        TestCase("takeValues", -> {
            expectEqual(
                [],
                [..takeValues(#3)]
            );
            expectEqual(
                ["one", "two"],
                [..takeValues(#3, "one", "two")]
            );
            expectEqual(
                ["one", "two", "three"],
                [..takeValues(#3, "one", "two", "three")]
            );
            expectEqual(
                ["one", "two", "three"],
                [..takeValues(#3, "one", "two", "three", "four")]
            );
        }),
        TestCase("dropValues", -> {
            expectEqual(
                [],
                [..dropValues(#3)]
            );
            expectEqual(
                [],
                [..dropValues(#3, "one", "two")]
            );
            expectEqual(
                [],
                [..dropValues(#3, "one", "two", "three")]
            );
            expectEqual(
                ["four"],
                [..dropValues(#3, "one", "two", "three", "four")]
            );
        }),
        TestCase("countValues", -> {
            expectEqual(0, countValues());
            expectEqual(1, countValues("one"));
            expectEqual(4, countValues("one", "two", "three", "four"));
        }),
        TestCase("equalValues?", -> {
            expectEqual(true, equalValues?(1, 1, 1));
            expectEqual(false, equalValues?(1, 1, 2));
        }),
        TestCase("allValues?, anyValues?", -> {
            expectEqual(false, allValues?(even?, 1, 2, 3));
            expectEqual(true,  anyValues?(even?, 1, 2, 3));
            expectEqual(true,  allValues?(even?, 2, 4, 6));
            expectEqual(true,  anyValues?(even?, 2, 4, 6));
            expectEqual(false, allValues?(even?, 1, 3, 5));
            expectEqual(false, anyValues?(even?, 1, 3, 5));
        }),
        TestCase("inValues?", -> {
            expectEqual(false, inValues?(0, 1, 2));
            expectEqual(true,  inValues?(1, 1, 2));
            expectEqual(true,  inValues?(2, 1, 2));
            expectEqual(false, inValues?(3, 1, 2));
        }),
        TestCase("sequenceValues", -> {
            expectEqual(
                [3, 7, 15, 1, 292, 1, 1, 1],
                [..sequenceValues(array(3, 7, 15, 1, 292, 1, 1, 1), #8)]
            );
        }),
        TestCase("mapValues2", -> {
            expectEqual(
                [8, 10, 12],
                [..mapValues2((x, y) => x+y, #3,
                    1, 2, 3,
                    7, 8, 9,
                )]
            );
        }),
        TestCase("filterValues", -> {
            expectEqual(
                [#2, #4],
                [..filterValues(even?, #1, #2, #3, #4)]
            );
            expectEqual(
                [],
                [..filterValues(even?, #1, #3)]
            );
            expectEqual(
                [#2, #6],
                [..filterValues(even?, #2, #6)]
            );
            expectEqual(
                [],
                [..filterValues(even?)]
            );
        }),
        TestCase("assocValue", -> {
            expectEqual(
                true,
                assocValue?("foo", ["foo", 1, 2, 3], ["bar", 4]));
            expectEqual(
                true,
                assocValue?("bar", ["foo", 1, 2, 3], ["bar", 4]));
            expectEqual(
                false,
                assocValue?("bas", ["foo", 1, 2, 3], ["bar", 4]));

            expectEqual(
                [1, 2, 3],
                [..assocValue("foo", ["foo", 1, 2, 3], ["bar", 4])]
            );
            expectEqual(
                4,
                assocValue("bar", ["foo", 1, 2, 3], ["bar", 4])
            );
        }),
        TestCase("replicateValue", -> {
            ..for (Type in Int, UInt, Int8, UInt8, SizeT) {
                expectEqual(
                    [],
                    [..replicateValue(true, #Type(0))]);
                expectEqual(
                    [17],
                    [..replicateValue(17, #Type(1))]);
                expectEqual(
                    ['a', 'a', 'a'],
                    [..replicateValue('a', #Type(3))]);
            }
        }),
        TestCase("captureValue", testCaptureValue),
    )));
