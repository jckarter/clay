import 
    test.*, 
    test.module.*;

record NonCopyable (
);

overload resetUnsafe(x:NonCopyable) {}
overload destroy(x:NonCopyable) {}

overload RegularRecord?(#NonCopyable) = false;
overload BitwiseMovedType?(#NonCopyable) = true;

staticassert (     Movable?(NonCopyable));
staticassert (not Copyable?(NonCopyable));

TEST_arrayElements() {
    var a = array(3, 5, 8);

    expectEqual([], [..arrayElements(Array[UInt, 0]())]);
    expectEqual([true], [..arrayElements(array(true))]);
    expectEqual([3, 5, 8], [..arrayElements(a)]);
}

TEST_ArrayRef() {
    var a = array(3, 5, 8);
    expectEqual(ArrayRef(a), a);
}

TEST_indexing() {
    var b = array(..integers(#256));
    expectEqual(224, b[224_uss]);
}

TEST_array_from_single_non_copyable() {
    array(NonCopyable());
}

private main() = testMainModule();