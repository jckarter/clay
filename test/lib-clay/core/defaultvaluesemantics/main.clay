import printer.(println);
import test.memory.(Canary, checkCanariesDestroyed);

// test that default assign(ref, ref) implementation works with a type defining
// a throwing or nonthrowing copy constructor

record NonthrowingCopy (c:Canary);
RegularRecord?(#NonthrowingCopy) = false;
CopyDoesNotThrowType?(#NonthrowingCopy) = true;
NonthrowingCopy() = initializeRecord(NonthrowingCopy);
NonthrowingCopy(x:NonthrowingCopy) = copyRecord(x);
moveUnsafe(x:NonthrowingCopy) = moveRecordUnsafe(x);
resetUnsafe(x:NonthrowingCopy) { resetRecordUnsafe(x); }
destroy(x:NonthrowingCopy) { destroyRecord(x); }

record ThrowingCopy (c:Canary);
RegularRecord?(#ThrowingCopy) = false;
CopyDoesNotThrowType?(#ThrowingCopy) = false;
ThrowingCopy() = initializeRecord(ThrowingCopy, Canary(true));
ThrowingCopy(throw?) = initializeRecord(ThrowingCopy, Canary(throw?));
ThrowingCopy(x:ThrowingCopy) = copyRecord(x);
moveUnsafe(x:ThrowingCopy) = moveRecordUnsafe(x);
resetUnsafe(x:ThrowingCopy) { resetRecordUnsafe(x); }
destroy(x:ThrowingCopy) { destroyRecord(x); }

tryNonthrowing() {
    var a = NonthrowingCopy();
    var b = NonthrowingCopy();
    a = b;
    var c = move(a);
    c = move(b);
}

tryThrowing() {
    var a = ThrowingCopy(true);
    var b = ThrowingCopy(true);
    try {
        a = b;
    } catch (ex) {}
    var c = move(a);
    c = move(b);

    var d = ThrowingCopy(false);
    c = d;
}

main() {
    tryNonthrowing();
    tryThrowing();
    if (checkCanariesDestroyed())
        println("ok");
}
