import test.*;
import data.vectors.*;
import data.strings.*;
import core.types.*;
import numbers.parser.*;
import parsing.combinators.strings.*;
import parsing.combinators.wrapper.*;
import printer.*;

var digit = condition(c -> (c >= '0') and (c <= '9'));
var number = modify(x -> parse(Int, x), oneOrMore(digit));

// (strict, opt)
define makeSeparatedListParser;
override makeSeparatedListParser(#false, #false) {
    return separatedList('.', number);
}
override makeSeparatedListParser(#true, #false) {
    return separatedListStrict('.', number);
}
override makeSeparatedListParser(#false, #true) {
    return optSeparatedList('.', number);
}
override makeSeparatedListParser(#true, #true) {
    return optSeparatedListStrict('.', number);
}

[strict, opt]
testSeparatedListNotEmpty(#strict, #opt) {
    var p = makeSeparatedListParser(#strict, #opt);
    var s = String("1.12.xy");
    var input = iterator(s);
    var r = require(p(input));
    var expected = Vector[Int](1, 12);
    expectEqual(expected, r);
    if (strict) {
        expectEqual(String(".xy"), String(input));
    } else {
        expectEqual(String("xy"), String(input));
    }
}

[strict, opt]
testSeparatedListEmpty(#strict, #opt) {
    var p = makeSeparatedListParser(#strict, #opt);
    var s = String("invalid");
    var input = iterator(s);
    if (opt) {
        var r = require(p(input));
        var expected = Vector[Int]();
        expectEqual(expected, r);
    } else {
        expectTrue(nothing?(p(input)));
    }
    expectEqual(String("invalid"), String(input));
}

[strict, opt]
testSeparatedList(#strict, #opt) {
    testSeparatedListNotEmpty(#strict, #opt);
    testSeparatedListEmpty(#strict, #opt);
}

testSuite() =
    TestSuite("parsing.combinators.generic", array(
        TestCase("separatedList", -> {
            testSeparatedList(#false, #false);
        }),
        TestCase("separatedListStrict", -> {
            testSeparatedList(#true, #false);
        }),
        TestCase("optSeparatedList", -> {
            testSeparatedList(#false, #true);
        }),
        TestCase("optSeparatedListStrict", -> {
            testSeparatedList(#true, #true);
        }),
    ));


main() = testMain(testSuite());
