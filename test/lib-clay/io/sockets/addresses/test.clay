import io.sockets.*;
import io.sockets.platform.(s_addr);
import test.*;
import byteorder.*;
import data.vectors.*;
import data.sequences.*;

define _expectSockaddrIn;

_expectSockaddrIn(expectedHost, expectedPort, sockaddr) {}
_expectSockaddrIn(expectedHost, expectedPort, sockaddr: Sockaddr_in)
{
    expectEqual(AF_INET, sockaddr.sin_family);
    expectEqual(expectedHost, networkToHost(s_addr(sockaddr.sin_addr)));
    expectEqual(expectedPort, networkToHost(sockaddr.sin_port));
}

expectSockaddrIn(expectedHost, expectedPort, address) {
    var sockaddr = makeSockaddr(address);
    expectType(Sockaddr_in, sockaddr);
    _expectSockaddrIn(expectedHost, expectedPort, sockaddr);
}

main() {
    startSockets();
    var r = testMain(
        TestSuite("socket IPv4 addresses", array(
            TestCase("numeric addresses", -> {
                expectSockaddrIn(
                    0x7F_00_00_01u,
                    1234,
                    Inet(0x7F_00_00_01u, 1234)
                );
                expectSockaddrIn(
                    INADDR_ANY,
                    1234,
                    Inet(INADDR_ANY, 1234)
                );
            }),
            TestCase("dotted quads", -> {
                expectSockaddrIn(
                    0x7F_00_00_01u,
                    1234,
                    Inet("127.0.0.1", 1234)
                );
            }),
            TestCase("hostnames", -> {
                expectSockaddrIn(
                    0x7F_00_00_01u,
                    1234,
                    Inet("localhost", 1234)
                );
            }),
        )),
    );
    finishSockets();
    return r;
}
