import commandline.dispatch.*;
import data.algorithms.(reduce);
import printer.(println,printlnTo);
import io.files.*;
import data.sequences.*;
import numbers.parser.*;

define add;
add(args) {
    println(
        if (empty?(args)) PtrInt(0) else reduce((a, b) => a + b, mapped(x -> parse(PtrInt, x), args))
    );
}
define subtract;
subtract(args) {
    println(
        if (empty?(args)) PtrInt(0) else reduce((a, b) => a - b, mapped(x -> parse(PtrInt, x), args))
    );
}
define multiply;
multiply(args) {
    println(
        if (empty?(args)) PtrInt(1) else reduce((a, b) => a * b, mapped(x -> parse(PtrInt, x), args))
    );
}

record DivideByZero();
instance Exception (DivideByZero);

define divide;
divide(args) {
    if (empty?(args)) {
        println(1.0);
        return 0;
    }
    try {
        println(reduce((a, b) => {
            if (b == 0.0)
                throw DivideByZero();
            else
                return a / b;
        }, mapped(x -> parse(Double, x), args)));
        return 0;
    } catch (ex: DivideByZero) {
        printlnTo(stderr, "Division by zero!");
        return 1;
    }
}

version(args) {
    println("dispatchr 2.0 BETA");
}

main() = dispatchMain(
    [add, "add integers"],
    ["subtract", args => { subtract(args); }, "subtract", ' ', "integers"],
    [multiply, "multiply integers"],
    [divide, "divide integers"],
    version
);
