
import test.*;
import io.paths.*;
import printer.(printTo);
import strings.*;

expectSplitPath(test, path, expected) {
    expectEqual(test,
        "array(..splitPath(\"" ++ path ++ "\"))",
        expected,
        array(..splitPath(path)),
    );
}

expectPathComponents(test, path, expected) {
    expectEqual(test,
        "pathComponents(\"" ++ path ++ "\")",
        expected,
        pathComponents(path),
    );
}

expectJoinPath(test, parts, expected) {
    var argumentsStr = String();
    printTo(argumentsStr, Vector(parts));
    expectEqual(test,
        "joinPath(" ++ argumentsStr ++ ")",
        expected,
        joinPath(parts),
    );
}

testSuite() =
    TestSuite("path test suite", array(
        TestCase("splitPath test cases", test => {
            expectSplitPath(test, "", array("", ""));
            expectSplitPath(test, "\\", array("\\", ""));
            expectSplitPath(test, "foo", array("", "foo"));
            expectSplitPath(test, "foo\\", array("", "foo"));
            expectSplitPath(test, "\\foo", array("\\", "foo"));
            expectSplitPath(test, "\\foo\\", array("\\", "foo"));
            expectSplitPath(test, "\\foo\\bar", array("\\foo", "bar"));
            expectSplitPath(test, "\\foo\\bar\\", array("\\foo", "bar"));
            expectSplitPath(test, "z:\\foo\\bar\\", array("z:\\foo", "bar"));
            expectSplitPath(test, "z:foo\\bar", array("z:foo", "bar"));
            expectSplitPath(test, "z:foo\\", array("z:", "foo"));
            expectSplitPath(test, "z:\\", array("z:\\", ""));
            expectSplitPath(test, "z:", array("z:", ""));
            expectSplitPath(test, "\\\\woof\\foo\\bar\\", array("\\\\woof\\foo\\", "bar"));
            expectSplitPath(test, "\\\\woof\\foo\\bar", array("\\\\woof\\foo\\", "bar"));
            expectSplitPath(test, "\\\\woof\\foo\\", array("\\\\woof\\foo\\", ""));
            expectSplitPath(test, "\\\\woof\\foo", array("\\\\woof\\foo", ""));
        }),
        TestCase("pathComponents test cases", test => {
            expectPathComponents(test, "", Vector[String]());
            expectPathComponents(test, "\\", array("\\"));
            expectPathComponents(test, "foo", array("foo"));
            expectPathComponents(test, "foo\\", array("foo"));
            expectPathComponents(test, "\\foo", array("\\", "foo"));
            expectPathComponents(test, "\\foo\\", array("\\", "foo"));
            expectPathComponents(test, "\\foo\\bar", array("\\", "foo", "bar"));
            expectPathComponents(test, "\\foo\\bar\\", array("\\", "foo", "bar"));
            expectPathComponents(test, "\\foo\\bar\\baz\\", array("\\", "foo", "bar", "baz"));
            expectPathComponents(test, "z:\\foo\\bar\\baz\\", array("z:", "\\", "foo", "bar", "baz"));
            expectPathComponents(test, "z:foo\\bar\\baz\\", array("z:", "foo", "bar", "baz"));
            expectPathComponents(test, "\\\\woof\\foo\\bar\\baz\\", array("\\\\woof\\foo", "\\", "bar", "baz"));
        }),
        TestCase("joinPath test cases", test => {
            expectJoinPath(test, Vector[String](), "");
            expectJoinPath(test, array(""), "");
            expectJoinPath(test, array("", ""), "");
            expectJoinPath(test, array("", "\\"), "\\");
            expectJoinPath(test, array("foo", "\\"), "\\");
            expectJoinPath(test, array("foo\\bar", "baz\\"), "foo\\bar\\baz");
            expectJoinPath(test, array("foo\\bar\\", "baz"), "foo\\bar\\baz");
            expectJoinPath(test, array("foo\\bar\\", "baz\\"), "foo\\bar\\baz");
            expectJoinPath(test, array("foo\\bar\\", "x:baz\\"), "x:baz");
            expectJoinPath(test, array("foo\\bar\\", "x:baz\\", "\\boo\\hoo\\"), "x:\\boo\\hoo");
            expectJoinPath(test, array("foo\\bar\\", "\\baz\\"), "\\baz");
            expectJoinPath(test, array("foo\\bar\\", "\\\\glop\\blop\\feep\\foop", "\\baz"), "\\\\glop\\blop\\baz");
        }),
    ));

main() = testMain(testSuite());
