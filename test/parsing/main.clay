
import parsing.combinators.strings.*;
import maybe.*;

//
// bracketed -> '(' expr ')'
// number -> digit+
// factor -> number when bracketed
//
// term -> factor (('*' when '/') factor)*;
//
// expr -> term (('+' when '-') term)*
//

expr(input) : Maybe[Int] = expr2(input);

var bracketed = modify(x => x.1, ['(', expr, ')']);
var digit = condition(c => ((c >= '0') and (c <= '9')));
var number = modify(Int, oneOrMore(digit));
var factor = choice(number, bracketed);
var term = modify(foldTail, [factor, zeroOrMore([choice('*', '\\'), factor])]);
var expr2 = modify(foldTail, [term, zeroOrMore([choice('+','-'), term])]);

foldTail(x) {
    var result = x.0;
    for (y in x.1) {
        switch (y.0)
            case ('+') result += y.1;
            case ('-') result -= y.1;
            case ('*') result *= y.1;
            case ('\\') result \= y.1;
            else assert(false);
    }
    return result;
}

calculate(s) {
    var input = iterator(s);
    var result = expr(input);
    print(s, " = ", result);
    var unparsed = String(input);
    if (not empty?(unparsed))
        print(" (unparsed: '", unparsed, "')");
    println();
}

main() {
    calculate("-1");
    calculate("1");
    calculate("1+");
    calculate("1+2");
    calculate("1+2*3");
    calculate("(1+2)*3");
}
