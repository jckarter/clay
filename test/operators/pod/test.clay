import test.*;
import uniquepointers.(UniquePointer);
import sharedpointers.*;
import simd.*;
import strings.*;
import vectors.*;

record IrregularRecord ();
overload RegularRecord?(#IrregularRecord) = false;

record PODRecord (x: Int, y: Char);
record NonPODRecord (x: Int, y: IrregularRecord);

variant PODVariant (Int, Char);
variant NonPODVariant (Int, NonPODRecord);

enum Enum ( A, B, C );

expectPOD(test, tf, Type) { expectEqual(test, StaticName(Type), tf, PODType?(Type)); }

main() = testMain(TestSuite("PODType?", array(
    TestCase("PODType?", test -> {
        expectPOD(test, false, IrregularRecord);
        expectPOD(test, true,  PODRecord);
        expectPOD(test, false, NonPODRecord);
        expectPOD(test, true,  Array[Int, 2]);
        expectPOD(test, false, Array[IrregularRecord, 2]);
        expectPOD(test, true,  Vec[Int, 2]);
        expectPOD(test, true,  Tuple[]);
        expectPOD(test, true,  Tuple[Int, Float]);
        expectPOD(test, false, Tuple[Int, IrregularRecord]);
        expectPOD(test, true,  Union[]);
        expectPOD(test, true,  Union[Int, Float]);

        expectPOD(test, true,  Char);
        expectPOD(test, true,  StringLiteralRef);
        expectPOD(test, false, SharedPointer[Int]);
        expectPOD(test, false, UniquePointer[Int]);
        expectPOD(test, false, Vector[Int]);
        expectPOD(test, false, String);

        expectPOD(test, true,  PODVariant);
        expectPOD(test, false, NonPODVariant);

        expectPOD(test, true,  Enum);
    }),
)));
