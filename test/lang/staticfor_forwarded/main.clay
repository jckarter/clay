import printer.(println);

record Foo(value:Int);

override RegularRecord?(#Foo) = false;

var _nextId = 1;

override Foo() --> returned:Foo {
    returned.value = _nextId;
    _nextId +: 1;
    println("Foo(): ", returned);
}

override moveUnsafe(src:Foo) --> returned:Foo {
    returned.value = src.value;
    println("moveUnsafe(): ", returned);
}

override resetUnsafe(x:Foo) {
    x.value = -1;
}

override destroy(x:Foo) {
    if (x.value != -1)
        println("destroy(): ", x);
}


[T, ..A when equalValues?(T, ..A)]
makeArray(forward first:T, forward ..rest:A) --> returned:Array[T,countValues(T,..A)] {
    var i = 0;
    ..for (x in first, ..rest) {
        returned[i] <-- x;
        i +: 1;
    }
}

main() {
    var a = makeArray(Foo(), Foo());
    println(a);
}
