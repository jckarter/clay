import printer.(println);
import data.vectors.*;

//
// Opaque
//

alias Opaque = Int;


//
// display
//

define display;

overload display(x) {
    println(x);
}


//
// Displayable
//

record Displayable (
    obj : Pointer[Opaque],
    size : SizeT,
    alignment : SizeT,
    destructor : CodePointer[[Opaque],[]],
    copyConstructor : CodePointer[[Opaque],[Opaque]],
    display : CodePointer[[Opaque],[]],
);

overload RegularRecord?(#Displayable) = false;


// primary constructor
[T]
overload Displayable(x:T) {
    var obj = allocateRawMemoryAligned(T, 1, TypeAlignment(T));
    obj^ <-- x;
    var destructor = makeCodePointer(destroy, T);
    var copyConstructor = makeCodePointer(T, T);
    var displayPtr = makeCodePointer(display, T);

    return Displayable(Pointer[Opaque](obj),
                       TypeSize(T),
                       TypeAlignment(T),
                       CodePointer[[Opaque],[]](destructor),
                       CodePointer[[Opaque],[Opaque]](copyConstructor),
                       CodePointer[[Opaque],[]](displayPtr));
}

// default constructor
overload Displayable() {
    return Displayable(null(Opaque), SizeT(0), SizeT(0),
                       CodePointer[[Opaque],[]](0),
                       CodePointer[[Opaque],[Opaque]](0),
                       CodePointer[[Opaque],[]](0));
}

// copy constructor
overload Displayable(x:Displayable) {
    var p = allocateRawMemoryAligned(Int8, x.size, x.alignment);
    var obj = Pointer[Opaque](p);
    obj^ <-- x.copyConstructor(x.obj^);
    return Displayable(obj, x.size, x.alignment,
                       x.destructor, x.copyConstructor, x.display);
}

// moveUnsafe
overload moveUnsafe(src:Displayable) --> returned:Displayable {
    returned <-- Displayable(
        src.obj,
        src.size,
        src.alignment,
        src.destructor,
        src.copyConstructor,
        src.display
    );
}

// resetUnsafe
overload resetUnsafe(x:Displayable) {
    x <-- Displayable();
}

// destructor
overload destroy(x:Displayable) {
    if (not null?(x.obj)) {
        x.destructor(x.obj^);
        freeRawMemoryAligned(x.obj);
    }
}

overload display(x:Displayable) {
    x.display(x.obj^);
}

main() {
    var v = vector(Displayable(1), Displayable(3.2), Displayable("Hi!"));
    for (x in v)
        display(x);
}
