import printer.(error, println);
import data.vectors.*;

var _countdown = 7;

testAndThrow() {
    if (_countdown <= 0)
        error("foo");
    _countdown -: 1;
}

var _nextId = 0;

nextId() {
    var id = _nextId;
    _nextId +: 1;
    return id;
}

record Test (
    id : Int
);

override RegularRecord?(#Test) = false;

override Test() {
    var id = nextId();
    testAndThrow();
    println("construct Test ", id);
    return Test(id);
}

override Test(src:Test) {
    testAndThrow();
    println("copy Test ", src.id);
    return Test(src.id);
}

override moveUnsafe(src:Test) {
    println("move Test ", src.id);
    return Test(src.id);
}

override resetUnsafe(x:Test) {
    var id = nextId();
    println("resetting Test ", id);
    x.id = id;
}

override destroy(x:Test) {
    println("destroy Test ", x.id);
}

override assign(dest:Test, src:Test) {
    println("assign ", src.id, " to ", dest.id);
    dest.id = src.id;
}

main() {
    try {
        var a = Vector[Test](Test(), Test(), Test(), Test());
        var b = Vector[Test]();
        b = move(a);
        var c = b;
    }
    catch (e) {
        println("exception: ", e);
    }
}
