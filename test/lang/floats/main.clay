import numbers.floats.*;
import printer.(error, println);

main() {
    var ..orderedComparisons = 
        floatOrderedEquals?,
        floatOrderedGreater?,
        floatOrderedGreaterEquals?,
        floatOrderedLesser?,
        floatOrderedLesserEquals?,
        floatOrderedNotEquals?,
        floatOrdered?;

    var ..unorderedComparisons = 
        floatUnorderedEquals?,
        floatUnorderedGreater?,
        floatUnorderedGreaterEquals?,
        floatUnorderedLesser?,
        floatUnorderedLesserEquals?,
        floatUnorderedNotEquals?,
        floatUnordered?;

    var ..operators = 
        equals?,
        notEquals?,
        lesser?,
        lesserEquals?,
        greater?,
        greaterEquals?,
        ordered?;

    var zero, one = 0.0, 1.0;
    var inf, ninf, nan = infinity(Double), negativeInfinity(Double), nan(Double);

    var values = array(zero, one, inf, ninf, nan);

    testFuncs("ORDERED COMPARISONS", ..orderedComparisons, values);
    testFuncs("UNORDERED COMPARISONS", ..unorderedComparisons, values);
    testFuncs("DEFAULT OPERATORS", ..operators, values);
}

testFuncs(title, ..funcs, values) {
    println();
    println("#########################");
    println("## ", title);
    println("#########################");
    println();
    ..for (f in ..funcs) {
        for (a in values)
            for (b in values)
                test(f, a, b);
    }
    println();
}

test(f, a, b) {
    var astr, bstr = floatStr(a), floatStr(b);
    println(f, "(", astr, ", ", bstr, ") = ", f(a,b));
}

floatStr(x) {
    if (x == 0.0)
        return StringLiteralRef("0.0");
    if (x == 1.0)
        return StringLiteralRef("1.0");
    if (x == 1.0/0.0)
        return StringLiteralRef("Inf");
    if (x == -1.0/0.0)
        return StringLiteralRef("-Inf");
    if (x != x)
        return StringLiteralRef("NaN");
    error("unknown value: ", x);
    return StringLiteralRef();
}
