import deques.*;
import test.memory.*;
import printer.(println);

// artificially shrink the deque node size to stress-test overflow handling
overload DequeBufferSize(#Canary) = SizeT(1);

test() {
    println("making deque d1");
    var d1 = Deque[Canary](Canary(), Canary(), Canary());

    {
        println("copying deque d2");
        var d2 = d1;

        println("lengthening deque d2");
        resize(d2, SizeT(6));
        println("shortening deque d2");
        resize(d2, SizeT(3));

        println("deque d2 leaving scope");
    }

    println("making deque d3 with exception");
    try {
        var thrower = Canary(true);
        var d3 = Deque[Canary](Canary(), thrower, Canary());
    } catch(x) {}

    {
        println("copying deque d4 with exception");
        d1[1].throwOnCopy? = true;

        try {
            var d4 = Deque[Canary](d1);
        } catch(x) {}

        d1[1].throwOnCopy? = false;
    }

    println("pushing onto deque d1");
    push(d1, Canary());

    println("pushing onto deque d1 with throw");
    try {
        var thrower = Canary(true);
        push(d1, thrower);
    } catch(x) {}

    println("popping from deque d1");
    pop(d1);

    println("popping from deque d1 shouldn't throw");
    back(d1).throwOnCopy? = true;
    pop(d1);

    println("pushing onto front of deque d1");
    pushFront(d1, Canary());

    println("pushing onto front of deque d1 with throw");
    try {
        var thrower = Canary(true);
        pushFront(d1, thrower);
    } catch(x) {}

    println("popping from front of deque d1");
    popFront(d1);

    println("popping from front of deque d1 shouldn't throw");
    front(d1).throwOnCopy? = true;
    popFront(d1);

    {
        println("making deque d5");
        var d5 = Deque[Canary](Canary(), Canary(), Canary(), Canary());
        println("making deque d6");
        var d6 = Deque[Canary](Canary(), Canary());

        println("d1 assign longer");
        d1 = d5;
        println("d1 assign shorter");
        d1 = d6;

        println("d5, d6 leaving scope");
    }

    println("moving d1 to d7");
    var d7 = move(d1);

    println("clearing d7");
    clear(d7);

    println("making deque d8");
    var d8 = Deque[Canary](
        Canary(), Canary(), Canary(),
        Canary(), Canary(), Canary(),
        Canary(), Canary(), Canary(),
    );

    println("removing from d8 front");
    remove(d8, begin(d8));
    checkCanariesLiveInSequence(d8);

    println("removing from d8 back");
    remove(d8, end(d8) - 1);
    checkCanariesLiveInSequence(d8);

    println("removing from d8 front half");
    remove(d8, begin(d8) + 1);
    checkCanariesLiveInSequence(d8);

    println("removing from d8 back half");
    remove(d8, end(d8) - 2);
    checkCanariesLiveInSequence(d8);

    println("removing from d8 entire range");
    remove(d8, begin(d8), end(d8));
    checkCanariesLiveInSequence(d8);

    println("making deque d9");
    var d9 = Deque[Canary](
        Canary(), Canary(), Canary(),
        Canary(), Canary(), Canary(),
        Canary(), Canary(), Canary(),
        Canary(), Canary(), Canary(),
    );

    println("removing from d9 front range");
    remove(d9, begin(d9), begin(d9) + 2);
    checkCanariesLiveInSequence(d9);

    println("removing from d9 back range");
    remove(d9, end(d9) - 2, end(d9));
    checkCanariesLiveInSequence(d9);

    println("removing from d9 front half range");
    remove(d9, begin(d9) + 1, begin(d9) + 3);
    checkCanariesLiveInSequence(d9);

    println("removing from d9 back half range");
    remove(d9, end(d9) - 3, end(d9) - 1);
    checkCanariesLiveInSequence(d9);

    println("inserting into d9 front");
    insert(d9, begin(d9), Canary());

    println("inserting into d9 back");
    insert(d9, end(d9), Canary());

    println("inserting into d9 front half");
    insert(d9, begin(d9) + 2, Canary());

    println("inserting into d9 back half");
    insert(d9, end(d9) - 2, Canary());

    println("making deque d10");
    var d10 = Deque[Canary](Canary(), Canary(), Canary());

    println("inserting d10 into d9 front");
    insert(d9, begin(d9), d10);

    println("inserting d10 into d9 back");
    insert(d9, end(d9), d10);

    println("inserting d10 into d9 front half sequence");
    insert(d9, begin(d9) + 2, d10);

    println("inserting d10 into d9 back half sequence");
    insert(d9, end(d9) - 2, d10);

    println("making deque d11");
    var d11 = Deque[Canary](Canary(), Canary(), Canary(), Canary());
    var thrower = Canary(true);
    var throwerDeque = Deque[Canary](Canary(), Canary(true), Canary());
    try {
        println("copying d12 from d11");
        var d12 = d11;

        println("inserting into d12 front half with throw");
        insert(d12, begin(d12) + 1, thrower);
    } catch(x) {}

    try {
        println("copying d13 from d11");
        var d13 = d11;

        println("inserting into d13 front half with throw");
        insert(d13, end(d13) - 1, thrower);
    } catch(x) {}

    try {
        println("copying d14 from d11");
        var d14 = d11;

        println("inserting into d14 front half sequence with throw");
        insert(d14, begin(d14) + 1, throwerDeque);
    } catch(x) {}

    try {
        println("copying d15 from d11");
        var d15 = d11;

        println("inserting into d15 back half sequence with throw");
        insert(d15, end(d15) - 1, throwerDeque);
    } catch(x) {}

    try {
        println("copying d16 from d11");
        var d16 = d11;

        println("pushing sequence onto deque d16 with throw");
        push(d16, throwerDeque);
    } catch(x) {}

    try {
        println("copying d17 from d11");
        var d17 = d11;

        println("pushing sequence onto front of deque d17 with throw");
        pushFront(d17, throwerDeque);
    } catch(x) {}

    println("d1, d7, d8, d9, d10, d11 leaving scope");
}

main() {
    test();
    checkCanariesDestroyed();
}
