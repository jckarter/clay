import lua;

// use metatables for operator overloading for custom type

alias IntArray = Vector[Int];

IntArray_new(x:lua.State) {
    var n = lua.checkInt(x, 1);
    if (n < 0)
        throw lua.Error("IntArray.new: invalid array size: ", n);
    var data = lua.newUserData(x, TypeSize(IntArray));
    ref v = Pointer[IntArray](data)^;
    v <-- IntArray();
    resize(v, n);
    lua.lookupMetaTable(x, "IntArray");
    lua.setMetaTable(x, -2);
    return 1;
}

checkIntArray(x:lua.State, index:Int) {
    var data = lua.checkUserData(x, index, "IntArray");
    return ref Pointer[IntArray](data)^;
}

IntArray_destroy(x:lua.State) {
    ref v = checkIntArray(x, 1);
    destroy(v);
    return 0;
}

IntArray_set(x:lua.State) {
    ref v = checkIntArray(x, 1);
    var index = lua.checkInt(x, 2);
    var value = lua.checkInt(x, 3);
    if ((index <= 0) or (index > size(v)))
        throw lua.Error("IntArray.set: index out of range: ", index);
    v[index-1] = value;
    return 0;
}

IntArray_get(x:lua.State) {
    ref v = checkIntArray(x, 1);
    var index = lua.checkInt(x, 2);
    if ((index <= 0) or (index > size(v)))
        throw lua.Error("IntArray.get: index out of range: ", index);
    lua.pushInt(x, v[index-1]);
    return 1;
}

IntArray_size(x:lua.State) {
    ref v = checkIntArray(x, 1);
    lua.pushInteger(x, size(v));
    return 1;
}

IntArray_tostring(x:lua.State) {
    ref v = checkIntArray(x, 1);
    lua.pushString(x, str("IntArray(", size(v), ")"));
    return 1;
}

main() {
    var x = lua.State();
    lua.openLibs(x);

    lua.newMetaTable(x, "IntArray");
    lua.registerTable(x,
        ["__tostring", IntArray_tostring],
        ["__index", IntArray_get],
        ["__newindex", IntArray_set],
        ["__len", IntArray_size],
        ["__gc", IntArray_destroy],
    );

    lua.registerModule(x,
        "IntArray",
        ["new", IntArray_new],
    );
    try {
        lua.doString(x, "
            a = IntArray.new(1000)
            print(a)
            print(#a)
            for i=1,#a do
                a[i] = i*i
            end
            print(a[11])
        ");
    }
    catch (e:lua.Error) {
        println("error: ", e.msg);
    }
}
