
external sched_init() Void;
external sched_run() Void;
external sched_destroy() Void;
external sched_ready(task:Pointer[Int8]) Void;
external sched_task_create(stacksize:Int32, func:CCodePointer[Pointer[Int8], Pointer[Int8], Int32], arg1:Pointer[Int8], arg2:Int32) Pointer[Int8];

external chan_create(size:Int32) Pointer[Int8];
external chan_send(chan:Pointer[Int8], ptr:Pointer[Int8]) Void;
external chan_recv(chan:Pointer[Int8], ptr:Pointer[Int8]) Void;
external chan_destroy(chan:Pointer[Int8]) Void;

record Channels (
    chanin: Pointer[Int8],
    chanout: Pointer[Int8],
);

[T]
send(c:Pointer[Int8], val:T) {
    //printf(cstring("Sending from %p val %d\n"), c, val);
    chan_send(c, Pointer[Int8](&val));
}

[T]
recv(c:Pointer[Int8], val:T) {
    var temp = T(0);
    //printf(cstring("Reading from %p\n"), c, temp);
    chan_recv(c, Pointer[Int8](&temp));
    //printf(cstring("Reading from %p got %d\n"), c, temp);
    val = temp;
}

generator(chan, val) {
    for(i in range(2, 100000)) {
        send(chan, i);
    }
}

filter(channels:Pointer[Channels], prime) {
    //printf(cstring("Created with prime %d %p %p\n"), prime, channels^.chanin,
    //    channels^.chanout);
    var chanin = channels^.chanin;
    var chanout = channels^.chanout;
    while(true) {
        //printf(cstring("Prime %d reading from %p\n"), prime, chanin);
        var i = 0;
        recv(chanin, i);
        if (integerRemainder(i, prime) != 0) {
            //printf(cstring("sending %d\n"), i);
            send(chanout, i);
        }
    }
}

m2(p, val) {
    while(true)
        printf(cstring("Received val = %d\n"), val);
}

m(p, val) {
    var ch = chan_create(TypeSize(Int32));
    var fp = makeCCodePointer(generator, Pointer[Int8], Int32);
    var fp2 = CCodePointer[Pointer[Int8], Pointer[Int8], Int32](fp);
    var task = sched_task_create(8192, fp2, ch, 10);
    var ch_ = ch;
    sched_ready(task);
    while(true) {
        var prime = 0;
        recv(ch_, prime);
        if (prime >= 100000) {
            break;
        }
        printf(cstring("%d\n"), prime);
        var fp2 = makeCCodePointer(filter, Pointer[Channels], Int32);
        var fp22 = CCodePointer[Pointer[Int8], Pointer[Int8], Int32](fp2);
        var c = Channels();
        c.chanin = ch_;
        c.chanout = chan_create(TypeSize(Int32));
        task = sched_task_create(8192, fp22, Pointer[Int8](&c), prime);
        sched_ready(task);
        ch_ = c.chanout;
    }
}

main() {
    sched_init();
    var v = 'c';
    var fp = makeCCodePointer(m, Pointer[Int8], Int32);
    var fp2 = CCodePointer[Pointer[Int8], Pointer[Int8], Int32](fp);
    var task = sched_task_create(8192, fp2, Pointer[Int8](&v), 10);
    sched_ready(task);
    sched_run();
    sched_destroy();
    return 0;
}
