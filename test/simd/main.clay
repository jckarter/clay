import simd.*;
import printer.(println);

main() {
    var v1 = Vec[Int,2](11, 21);

    var v2 = Vec(2, 3); // type will be inferred as Vec[Int,2]

    println("v1: ",  v1);
    println("v2: ",  v2);
    println("add: ", v1 + v2);
    println("sub: ", v1 - v2);
    println("mul: ", v1 * v2);
    println("div: ", v1 / v2);
    println("rem: ", v1 % v2);
    println("shl: ", bitshl(v1, v2));
    println("shr: ", bitshr(v1, v2));
    println("and: ", bitand(v1, v2));
    println("or: ",  bitor(v1, v2));
    println("xor: ", bitxor(v1, v2));
    println();
    println("v1: ",  v1);
    println("v2: ",  v2);
    println("add: ", v1 + v2 + 3);
    println("sub: ", v1 - v2 - 3);
    println("mul: ", v1 * v2 * 3);
    println("div: ", v1 / v2 / 3);
    println("rem: ", v1 % v2 % 3);
    println("shl: ", bitshl(bitshl(v1, v2), 3));
    println("shr: ", bitshr(bitshr(v1, v2), 3));
    println("and: ", bitand(bitand(v1, v2), 3));
    println("or: ",  bitor(bitor(v1, v2), 3));
    println("xor: ", bitxor(bitxor(v1, v2), 3));

    println("plus v1: ", add(v1));
    println("plus v2: ", add(v2));
    println("minus v1: ", subtract(v1));
    println("minus v2: ", subtract(v2));
    println("bitnot v1: ", bitnot(v1));
    println("bitnot v2: ", bitnot(v2));

    var v3 = Vec(1, -1);

    println();
    println("v3: ", v3);
    println("v4 = Vec[UInt, 2](v3): ", Vec[UInt, 2](v3));

    var v4 = Vec[UInt, 2](v3);
    println("v1 and v4: ", bitand(v1, v4));
    println("v1 or  v4: ", bitor( v1, v4));
    println("v1 xor v4: ", bitxor(v1, v4));

    var v5 = Vec[Float32, 4]( 1.0f,  2.0f,  3.0f,  4.0f);
    var v6 = Vec[Float32, 4](-5.0f, -6.0f, -7.0f, -8.0f);
    var v7 = Vec[Float32, 4](componentMask(Float32), 0.0f, 0.0f, componentMask(Float32));
    var v8 = Vec[Int, 4](-1, 0, 0, -1);

    println();
    println("v5: ", v5);
    println("v6: ", v6);
    println("bitblend v7, v5, v6: ", bitblend(v7, v5, v6));
    println("bitblend bitnot(v7), v5, v6: ", bitblend(bitnot(v7), v5, v6));
    println("v8: ", v8);
    println("bitblend v8, v5, v6: ", bitblend(v8, v5, v6));
}
