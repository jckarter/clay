
//
// Opaque
//

alias Opaque = Int;


//
// display
//

define display;

overload display(x) {
    println(x);
}


//
// DisplayableVTable
//

record DisplayableVTable (
    size : SizeT,
    alignment : SizeT,
    destructor : CodePointer[[Opaque],[]],
    copyConstructor : CodePointer[[Opaque],[Opaque]],
    display : CodePointer[[Opaque],[]],
);

[T]
makeDisplayableVTable(static T) {
    var destructor = makeCodePointer(destroy, T);
    var copyConstructor = makeCodePointer(T, T);
    var display = makeCodePointer(display, T);
    return DisplayableVTable(TypeSize(T),
                             TypeAlignment(T),
                             CodePointer[[Opaque],[]](destructor),
                             CodePointer[[Opaque],[Opaque]](copyConstructor),
                             CodePointer[[Opaque],[]](display));
}


//
// Displayable
//

record Displayable (
    obj : Pointer[Opaque],
    vtable : Pointer[DisplayableVTable],
);

overload RegularRecord?(static Displayable) = false;


// constructor
[T]
overload Displayable(x:T) {
    var obj = allocateRawMemoryAligned(T, 1, TypeAlignment(T));
    obj^ <-- x;
    var vtable = allocateRawMemory(DisplayableVTable, 1);
    vtable^ <-- makeDisplayableVTable(T);
    return Displayable(Pointer[Opaque](obj), vtable);
}

// default constructor
overload Displayable() = Displayable(null(Opaque), null(DisplayableVTable));

// copy constructor
overload Displayable(x:Displayable) {
    if (null?(x.obj))
        return Displayable();
    var vt = x.vtable;
    var p = allocateRawMemoryAligned(Int8, vt^.size, vt^.alignment);
    var obj = Pointer[Opaque](p);
    obj^ <-- vt^.copyConstructor(x.obj^);
    var vtable = allocateRawMemory(DisplayableVTable, 1);
    vtable^ <-- vt^;
    return Displayable(obj, vtable);
}

// moveUnsafe
overload moveUnsafe(src:Displayable) --> returned:Displayable {
    returned <-- Displayable(src.obj, src.vtable);
}

// resetUnsafe
overload resetUnsafe(x:Displayable) {
    x <-- Displayable();
}

// destructor
overload destroy(x:Displayable) {
    if (not null?(x.obj)) {
        x.vtable^.destructor(x.obj^);
        freeRawMemoryAligned(x.obj);
        freeRawMemory(x.vtable);
    }
}


overload display(x:Displayable) {
    x.vtable^.display(x.obj^);
}

main() {
    var v = Vector[Displayable]();
    push(v, Displayable(1));
    push(v, Displayable(3.2));
    push(v, Displayable("Hi!"));
    for (x in v)
        display(x);
}
