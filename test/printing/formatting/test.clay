import test.*;
import printer.formatter.*;

main() = testMain(
    TestSuite("formatting", array(
        TestCase("number base formatters", test => {
            expectPrinted(test, "oct(12345)", "30071",
                oct(12345)
            );
            expectPrinted(test, "hex(12346)", "303a",
                hex(12346)
            );
            expectPrinted(test, "HEX(12346)", "303A",
                HEX(12346)
            );
            expectPrinted(test, "oct(-12345)", "-30071",
                oct(-12345)
            );
            expectPrinted(test, "hex(-12346)", "-303a",
                hex(-12346)
            );
            expectPrinted(test, "HEX(-12346)", "-303A",
                HEX(-12346)
            );
        }),
        TestCase("printedWidth", test => {
            expectEqual(test, "printedWidth(\"foo\")", 3, printedWidth("foo"));

            expectEqual(test, "printedWidth(0)", 1, printedWidth(0));
            expectEqual(test, "printedWidth(1)", 1, printedWidth(1));
            expectEqual(test, "printedWidth(9)", 1, printedWidth(9));
            expectEqual(test, "printedWidth(10)", 2, printedWidth(10));
            expectEqual(test, "printedWidth(-1)", 2, printedWidth(-1));
            expectEqual(test, "printedWidth(-9)", 2, printedWidth(-9));
            expectEqual(test, "printedWidth(-10)", 3, printedWidth(-10));
            expectEqual(test, "printedWidth(18446744073709551615_ul)",
                20, printedWidth(18446744073709551615_ul)
            );
            expectEqual(test, "printedWidth(10000000000000000000_ul)",
                20, printedWidth(10000000000000000000_ul)
            );
            expectEqual(test, "printedWidth(9999999999999999999_ul)",
                19, printedWidth(9999999999999999999_ul)
            );
            expectEqual(test, "printedWidth(9223372036854775807_l)",
                19, printedWidth(9223372036854775807_l)
            );
            expectEqual(test, "printedWidth(1000000000000000000_l)",
                19, printedWidth(1000000000000000000_l)
            );
            expectEqual(test, "printedWidth(999999999999999999_l)",
                18, printedWidth(999999999999999999_l)
            );
            expectEqual(test, "printedWidth(-9223372036854775807_l)",
                20, printedWidth(-9223372036854775807_l)
            );
            expectEqual(test, "printedWidth(-1000000000000000000_l)",
                20, printedWidth(-1000000000000000000_l)
            );
            expectEqual(test, "printedWidth(-999999999999999999_l)",
                19, printedWidth(-999999999999999999_l)
            );
            expectEqual(test, "printedWidth(111_uss)",
                3, printedWidth(111_uss)
            );
            expectEqual(test, "printedWidth(-43_ss)",
                3, printedWidth(-43_ss)
            );

            expectEqual(test, "printedWidth(hex(0))", 1, printedWidth(hex(0)));
            expectEqual(test, "printedWidth(hex(1))", 1, printedWidth(hex(1)));
            expectEqual(test, "printedWidth(hex(0xf))", 1, printedWidth(hex(0xf)));
            expectEqual(test, "printedWidth(hex(0x10))", 2, printedWidth(hex(0x10)));
            expectEqual(test, "printedWidth(hex(-1))", 2, printedWidth(hex(-1)));
            expectEqual(test, "printedWidth(hex(-0xf))", 2, printedWidth(hex(-0xf)));
            expectEqual(test, "printedWidth(hex(-0x10))", 3, printedWidth(hex(-0x10)));
            expectEqual(test, "printedWidth(hex(0xffffffffffffffff_ul))",
                16, printedWidth(hex(0xffffffffffffffff_ul))
            );
            expectEqual(test, "printedWidth(hex(0x7fffffffffffffff_l))",
                16, printedWidth(hex(0x7fffffffffffffff_l))
            );
            expectEqual(test, "printedWidth(hex(0x1000000000000000_l))",
                16, printedWidth(hex(0x1000000000000000_l))
            );
            expectEqual(test, "printedWidth(hex(0xfffffffffffffff_l))",
                15, printedWidth(hex(0xfffffffffffffff_l))
            );
            expectEqual(test, "printedWidth(hex(-0x7fffffffffffffff_l))",
                17, printedWidth(hex(-0x7fffffffffffffff_l))
            );
            expectEqual(test, "printedWidth(hex(-0x1000000000000000_l))",
                17, printedWidth(hex(-0x1000000000000000_l))
            );
            expectEqual(test, "printedWidth(hex(-0xfffffffffffffff_l))",
                16, printedWidth(hex(-0xfffffffffffffff_l))
            );
        }),
        TestCase("leftAligned/rightAligned", test => {
            expectPrinted(test, "leftAligned(5, \"foo\")", "foo  ",
                leftAligned(5, "foo")
            );
            expectPrinted(test, "rightAligned(5, \"foo\")", "  foo",
                rightAligned(5, "foo")
            );

            expectPrinted(test, "leftAligned(5, \"foo\", 1234)", "foo1234",
                leftAligned(5, "foo", 1234)
            );
            expectPrinted(test, "rightAligned(5, \"foo\", 1234)", "foo1234",
                rightAligned(5, "foo", 1234)
            );

            expectPrinted(test, "leftAligned(5, \"foo\")", "foo  ",
                leftAligned(5, "foo")
            );
            expectPrinted(test, "rightAligned(5, \"foo\")", "  foo",
                rightAligned(5, "foo")
            );

            expectPrinted(test, "leftAlignedWith(5, '-', \"foo\")", "foo--",
                leftAlignedWith(5, '-', "foo")
            );
            expectPrinted(test, "rightAlignedWith(5, '-', \"foo\")", "--foo",
                rightAlignedWith(5, '-', "foo")
            );

            expectPrinted(test,
                "leftAlignedWith(10, '-', rightAlignedWith(7, '|', hex(0xFFFF)))",
                "|||ffff---",
                leftAlignedWith(10, '-', rightAlignedWith(7, '|', hex(0xFFFF)))
            );
        }),
        TestCase("hexString", test => {
            expectPrinted(test,
                "hexString(array(0_uss, 0xFF_uss, 0x0F_uss))",
                "00FF0F",
                hexString(array(0_uss, 0xFF_uss, 0x0F_uss)),
            );
        }),
        TestCase("UniChar is printed as sequence of UTF-8 bytes", test => {
            expectPrinted(test,
                "UniChar(0x044f)",
                "\xD1\x8F",
                UniChar(0x044f));
        }),
    )),
);
