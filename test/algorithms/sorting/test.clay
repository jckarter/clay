import test.*;
import algorithms.(sort,sortBy);
import comparators.(comparing,reversed);
import printer.(str);
import vectors.*;

record Unordered[T](value : T);

main() = testMain(
  TestSuite("sorting", array(
    TestCase("In ascending order", test -> {
      var baseSequence = array(10, 9, 8, 1, 2, 7, 6, 2, 3, 4);
      var sortedSequence = array(1, 2, 2, 3, 4, 6, 7, 8, 9, 10);

      sort(baseSequence);
      expectEqual(test, "the sorted sequence", sortedSequence, baseSequence);
    }),
    TestCase("In descending order", test -> {
      var baseSequence = array(10, 9, 8, 1, 2, 7, 6, 2, 3, 4);
      var sortedSequence = array(10, 9, 8, 7, 6, 4, 3, 2, 2, 1);

      sortBy(baseSequence, reversed());
      expectEqual(test, "the sorted sequence", sortedSequence, baseSequence);
    }),
    TestCase("Comparing size", test -> {
      var baseSequence = array("a", "b", "c", "blargh", "foo", "de", "x", "stuff");
      sortBy(baseSequence, comparing(size));
     
      var isFirst = true;
      var last = StringLiteralRef("ignore me");

      for(x in baseSequence){
        if(isFirst){
          last = x;
          isFirst = false; 
        } else {
          expectTrue(test, str("size(", last, ") <= size(", x, ")"), size(last) <= size(x));
          last = x;
        }
      }
    }),   
    TestCase("for something not naturally orderable", test -> {
      var sequence = Vector[Unordered[Int]]();

      for(i in range(10)){
        push(sequence, Unordered(i));
      }

      sortBy(sequence, reversed(comparing(x => x.value)));

      for(i in range(10)){
        expectEqual(test, str("sequence[", i, "].0"), 9 - i, sequence[i].value);
      }
    })
  ))
);
