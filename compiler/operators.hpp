#ifndef __CLAYNAMES_HPP
#define __CLAYNAMES_HPP

namespace clay {

ObjectPtr primitive_addressOf(CompilerStatePtr cst);
ObjectPtr primitive_boolNot(CompilerStatePtr cst);
ObjectPtr primitive_Pointer(CompilerStatePtr cst);
ObjectPtr primitive_CodePointer(CompilerStatePtr cst);
ObjectPtr primitive_ExternalCodePointer(CompilerStatePtr cst);
ObjectPtr primitive_AttributeCCall(CompilerStatePtr cst);
ObjectPtr primitive_AttributeStdCall(CompilerStatePtr cst);
ObjectPtr primitive_AttributeFastCall(CompilerStatePtr cst);
ObjectPtr primitive_AttributeThisCall(CompilerStatePtr cst);
ObjectPtr primitive_AttributeLLVMCall(CompilerStatePtr cst);
ObjectPtr primitive_Array(CompilerStatePtr cst);
ObjectPtr primitive_Vec(CompilerStatePtr cst);
ObjectPtr primitive_Tuple(CompilerStatePtr cst);
ObjectPtr primitive_Union(CompilerStatePtr cst);
ObjectPtr primitive_Static(CompilerStatePtr cst);
ObjectPtr primitive_ByRef(CompilerStatePtr cst);
ObjectPtr primitive_RecordWithProperties(CompilerStatePtr cst);
ObjectPtr primitive_activeException(CompilerStatePtr cst);

ExprPtr primitive_expr_addressOf(CompilerStatePtr cst);
ExprPtr primitive_expr_boolNot(CompilerStatePtr cst);
ExprPtr primitive_expr_Pointer(CompilerStatePtr cst);
ExprPtr primitive_expr_CodePointer(CompilerStatePtr cst);
ExprPtr primitive_expr_ExternalCodePointer(CompilerStatePtr cst);
ExprPtr primitive_expr_AttributeCCall(CompilerStatePtr cst);
ExprPtr primitive_expr_AttributeStdCall(CompilerStatePtr cst);
ExprPtr primitive_expr_AttributeFastCall(CompilerStatePtr cst);
ExprPtr primitive_expr_AttributeThisCall(CompilerStatePtr cst);
ExprPtr primitive_expr_AttributeLLVMCall(CompilerStatePtr cst);
ExprPtr primitive_expr_Array(CompilerStatePtr cst);
ExprPtr primitive_expr_Vec(CompilerStatePtr cst);
ExprPtr primitive_expr_Tuple(CompilerStatePtr cst);
ExprPtr primitive_expr_Union(CompilerStatePtr cst);
ExprPtr primitive_expr_Static(CompilerStatePtr cst);
ExprPtr primitive_expr_ByRef(CompilerStatePtr cst);
ExprPtr primitive_expr_RecordWithProperties(CompilerStatePtr cst);
ExprPtr primitive_expr_activeException(CompilerStatePtr cst);

ObjectPtr operator_dereference(CompilerStatePtr cst);
ObjectPtr operator_prefixOperator(CompilerStatePtr cst);
ObjectPtr operator_infixOperator(CompilerStatePtr cst);
ObjectPtr operator_caseP(CompilerStatePtr cst);
ObjectPtr operator_tupleLiteral(CompilerStatePtr cst);
ObjectPtr operator_staticIndex(CompilerStatePtr cst);
ObjectPtr operator_index(CompilerStatePtr cst);
ObjectPtr operator_fieldRef(CompilerStatePtr cst);
ObjectPtr operator_call(CompilerStatePtr cst);
ObjectPtr operator_destroy(CompilerStatePtr cst);
ObjectPtr operator_copy(CompilerStatePtr cst);
ObjectPtr operator_move(CompilerStatePtr cst);
ObjectPtr operator_assign(CompilerStatePtr cst);
ObjectPtr operator_updateAssign(CompilerStatePtr cst);
ObjectPtr operator_prefixUpdateAssign(CompilerStatePtr cst);
ObjectPtr operator_indexAssign(CompilerStatePtr cst);
ObjectPtr operator_indexUpdateAssign(CompilerStatePtr cst);
ObjectPtr operator_fieldRefAssign(CompilerStatePtr cst);
ObjectPtr operator_fieldRefUpdateAssign(CompilerStatePtr cst);
ObjectPtr operator_staticIndexAssign(CompilerStatePtr cst);
ObjectPtr operator_staticIndexUpdateAssign(CompilerStatePtr cst);
ObjectPtr operator_callMain(CompilerStatePtr cst);
ObjectPtr operator_charLiteral(CompilerStatePtr cst);
ObjectPtr operator_iterator(CompilerStatePtr cst);
ObjectPtr operator_nextValue(CompilerStatePtr cst);
ObjectPtr operator_hasValueP(CompilerStatePtr cst);
ObjectPtr operator_getValue(CompilerStatePtr cst);
ObjectPtr operator_throwValue(CompilerStatePtr cst);
ObjectPtr operator_exceptionIsP(CompilerStatePtr cst);
ObjectPtr operator_exceptionAs(CompilerStatePtr cst);
ObjectPtr operator_exceptionAsAny(CompilerStatePtr cst);
ObjectPtr operator_continueException(CompilerStatePtr cst);
ObjectPtr operator_unhandledExceptionInExternal(CompilerStatePtr cst);
ObjectPtr operator_exceptionInInitializer(CompilerStatePtr cst);
ObjectPtr operator_exceptionInFinalizer(CompilerStatePtr cst);
ObjectPtr operator_packMultiValuedFreeVarByRef(CompilerStatePtr cst);
ObjectPtr operator_packMultiValuedFreeVar(CompilerStatePtr cst);
ObjectPtr operator_unpackMultiValuedFreeVarAndDereference(CompilerStatePtr cst);
ObjectPtr operator_unpackMultiValuedFreeVar(CompilerStatePtr cst);
ObjectPtr operator_variantReprType(CompilerStatePtr cst);
ObjectPtr operator_DispatchTagCount(CompilerStatePtr cst);
ObjectPtr operator_dispatchTag(CompilerStatePtr cst);
ObjectPtr operator_dispatchIndex(CompilerStatePtr cst);
ObjectPtr operator_invalidDispatch(CompilerStatePtr cst);
ObjectPtr operator_ifExpression(CompilerStatePtr cst);
ObjectPtr operator_asExpression(CompilerStatePtr cst);
ObjectPtr operator_typeToRValue(CompilerStatePtr cst);
ObjectPtr operator_typesToRValues(CompilerStatePtr cst);
ObjectPtr operator_doIntegerAddChecked(CompilerStatePtr cst);
ObjectPtr operator_doIntegerSubtractChecked(CompilerStatePtr cst);
ObjectPtr operator_doIntegerMultiplyChecked(CompilerStatePtr cst);
ObjectPtr operator_doIntegerQuotientChecked(CompilerStatePtr cst);
ObjectPtr operator_doIntegerRemainderChecked(CompilerStatePtr cst);
ObjectPtr operator_doIntegerShiftLeftChecked(CompilerStatePtr cst);
ObjectPtr operator_doIntegerNegateChecked(CompilerStatePtr cst);
ObjectPtr operator_doIntegerConvertChecked(CompilerStatePtr cst);

ExprPtr operator_expr_dereference(CompilerStatePtr cst);
ExprPtr operator_expr_prefixOperator(CompilerStatePtr cst);
ExprPtr operator_expr_infixOperator(CompilerStatePtr cst);
ExprPtr operator_expr_caseP(CompilerStatePtr cst);
ExprPtr operator_expr_tupleLiteral(CompilerStatePtr cst);
ExprPtr operator_expr_staticIndex(CompilerStatePtr cst);
ExprPtr operator_expr_index(CompilerStatePtr cst);
ExprPtr operator_expr_fieldRef(CompilerStatePtr cst);
ExprPtr operator_expr_call(CompilerStatePtr cst);
ExprPtr operator_expr_destroy(CompilerStatePtr cst);
ExprPtr operator_expr_copy(CompilerStatePtr cst);
ExprPtr operator_expr_move(CompilerStatePtr cst);
ExprPtr operator_expr_assign(CompilerStatePtr cst);
ExprPtr operator_expr_updateAssign(CompilerStatePtr cst);
ExprPtr operator_expr_prefixUpdateAssign(CompilerStatePtr cst);
ExprPtr operator_expr_indexAssign(CompilerStatePtr cst);
ExprPtr operator_expr_indexUpdateAssign(CompilerStatePtr cst);
ExprPtr operator_expr_fieldRefAssign(CompilerStatePtr cst);
ExprPtr operator_expr_fieldRefUpdateAssign(CompilerStatePtr cst);
ExprPtr operator_expr_staticIndexAssign(CompilerStatePtr cst);
ExprPtr operator_expr_staticIndexUpdateAssign(CompilerStatePtr cst);
ExprPtr operator_expr_callMain(CompilerStatePtr cst);
ExprPtr operator_expr_charLiteral(CompilerStatePtr cst);
ExprPtr operator_expr_iterator(CompilerStatePtr cst);
ExprPtr operator_expr_nextValue(CompilerStatePtr cst);
ExprPtr operator_expr_hasValueP(CompilerStatePtr cst);
ExprPtr operator_expr_getValue(CompilerStatePtr cst);
ExprPtr operator_expr_throwValue(CompilerStatePtr cst);
ExprPtr operator_expr_exceptionIsP(CompilerStatePtr cst);
ExprPtr operator_expr_exceptionAs(CompilerStatePtr cst);
ExprPtr operator_expr_exceptionAsAny(CompilerStatePtr cst);
ExprPtr operator_expr_continueException(CompilerStatePtr cst);
ExprPtr operator_expr_unhandledExceptionInExternal(CompilerStatePtr cst);
ExprPtr operator_expr_exceptionInInitializer(CompilerStatePtr cst);
ExprPtr operator_expr_exceptionInFinalizer(CompilerStatePtr cst);
ExprPtr operator_expr_packMultiValuedFreeVarByRef(CompilerStatePtr cst);
ExprPtr operator_expr_packMultiValuedFreeVar(CompilerStatePtr cst);
ExprPtr operator_expr_unpackMultiValuedFreeVarAndDereference(CompilerStatePtr cst);
ExprPtr operator_expr_unpackMultiValuedFreeVar(CompilerStatePtr cst);
ExprPtr operator_expr_variantReprType(CompilerStatePtr cst);
ExprPtr operator_expr_DispatchTagCount(CompilerStatePtr cst);
ExprPtr operator_expr_dispatchTag(CompilerStatePtr cst);
ExprPtr operator_expr_dispatchIndex(CompilerStatePtr cst);
ExprPtr operator_expr_invalidDispatch(CompilerStatePtr cst);
ExprPtr operator_expr_ifExpression(CompilerStatePtr cst);
ExprPtr operator_expr_asExpression(CompilerStatePtr cst);
ExprPtr operator_expr_typeToRValue(CompilerStatePtr cst);
ExprPtr operator_expr_typesToRValues(CompilerStatePtr cst);
ExprPtr operator_expr_doIntegerAddChecked(CompilerStatePtr cst);
ExprPtr operator_expr_doIntegerSubtractChecked(CompilerStatePtr cst);
ExprPtr operator_expr_doIntegerMultiplyChecked(CompilerStatePtr cst);
ExprPtr operator_expr_doIntegerQuotientChecked(CompilerStatePtr cst);
ExprPtr operator_expr_doIntegerRemainderChecked(CompilerStatePtr cst);
ExprPtr operator_expr_doIntegerShiftLeftChecked(CompilerStatePtr cst);
ExprPtr operator_expr_doIntegerNegateChecked(CompilerStatePtr cst);
ExprPtr operator_expr_doIntegerConvertChecked(CompilerStatePtr cst);

}

#endif
